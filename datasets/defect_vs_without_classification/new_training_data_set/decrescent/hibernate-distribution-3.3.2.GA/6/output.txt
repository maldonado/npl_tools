test out the optimizer:	WITHOUT_CLASSIFICATION	0.999978409597002	WITHOUT_CLASSIFICATION	2.1590402997931753E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9993580414438554	WITHOUT_CLASSIFICATION	6.419585561446351E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999420286065036	WITHOUT_CLASSIFICATION	5.7971393496298775E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999360684289513	WITHOUT_CLASSIFICATION	6.393157104868036E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999360684289513	WITHOUT_CLASSIFICATION	6.393157104868036E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940883019238	WITHOUT_CLASSIFICATION	5.911698076115601E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998895460936932	WITHOUT_CLASSIFICATION	1.1045390630678298E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999709883927919	WITHOUT_CLASSIFICATION	2.9011607208203363E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999353263657927	WITHOUT_CLASSIFICATION	6.467363420728242E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960760237842	WITHOUT_CLASSIFICATION	3.923976215834264E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960760237842	WITHOUT_CLASSIFICATION	3.923976215834264E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999952555303325	WITHOUT_CLASSIFICATION	4.744469667543612E-6	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999640494097527	WITHOUT_CLASSIFICATION	3.595059024730396E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999274410835545	WITHOUT_CLASSIFICATION	7.255891644549007E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999652318808504	WITHOUT_CLASSIFICATION	3.476811914957862E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999809266717096	WITHOUT_CLASSIFICATION	1.907332829046671E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999898483635923	WITHOUT_CLASSIFICATION	1.0151636407773522E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999900290927112	WITHOUT_CLASSIFICATION	9.970907288835347E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999404532626368	WITHOUT_CLASSIFICATION	5.954673736319038E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998994952356511	WITHOUT_CLASSIFICATION	1.0050476434878598E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999472336741795	WITHOUT_CLASSIFICATION	5.276632582048741E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999897758523942	WITHOUT_CLASSIFICATION	1.0224147605867769E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999897758523942	WITHOUT_CLASSIFICATION	1.0224147605867769E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9996387125221667	WITHOUT_CLASSIFICATION	3.6128747783320677E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999913152043399	WITHOUT_CLASSIFICATION	8.68479565999788E-6	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999607837114772	WITHOUT_CLASSIFICATION	3.9216288522745624E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999410240479931	WITHOUT_CLASSIFICATION	5.8975952006724426E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.99935152579385	WITHOUT_CLASSIFICATION	6.48474206150012E-4	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999986595693616	WITHOUT_CLASSIFICATION	1.3404306382892466E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9998431790211547	WITHOUT_CLASSIFICATION	1.568209788453321E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999801655822336	WITHOUT_CLASSIFICATION	1.9834417766465952E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9997690039199515	WITHOUT_CLASSIFICATION	2.309960800485654E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999615318452767	WITHOUT_CLASSIFICATION	3.8468154723257025E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997228618196542	WITHOUT_CLASSIFICATION	2.7713818034574047E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999612720985963	WITHOUT_CLASSIFICATION	3.872790140372556E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999556990537074	WITHOUT_CLASSIFICATION	4.430094629262717E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998787626814832	WITHOUT_CLASSIFICATION	1.2123731851670587E-4	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999269375621362	WITHOUT_CLASSIFICATION	7.30624378637178E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998418616069584	WITHOUT_CLASSIFICATION	1.5813839304145268E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999584940825172	WITHOUT_CLASSIFICATION	4.1505917482777275E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9061048320568065	WITHOUT_CLASSIFICATION	0.09389516794319346	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999907769181946	WITHOUT_CLASSIFICATION	9.223081805481625E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999907769181946	WITHOUT_CLASSIFICATION	9.223081805481625E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999584940825172	WITHOUT_CLASSIFICATION	4.1505917482777275E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9995828708823611	WITHOUT_CLASSIFICATION	4.171291176389042E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9998704663412572	WITHOUT_CLASSIFICATION	1.295336587428493E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998040086738914	WITHOUT_CLASSIFICATION	1.959913261085727E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999916034435901	WITHOUT_CLASSIFICATION	8.39655640992118E-6	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999997805379162	WITHOUT_CLASSIFICATION	2.1946208387466578E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.996928842929333	WITHOUT_CLASSIFICATION	0.0030711570706668857	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9995393595563536	WITHOUT_CLASSIFICATION	4.6064044364637686E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999803379840249	WITHOUT_CLASSIFICATION	1.9662015975210642E-5	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9998486331141263	WITHOUT_CLASSIFICATION	1.5136688587360687E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997878237923576	WITHOUT_CLASSIFICATION	2.121762076424358E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999907769181946	WITHOUT_CLASSIFICATION	9.223081805481625E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999867346325063	WITHOUT_CLASSIFICATION	1.3265367493606939E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9991527578257545	WITHOUT_CLASSIFICATION	8.47242174245381E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9986399790743387	WITHOUT_CLASSIFICATION	0.00136002092566131	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9986782941166676	WITHOUT_CLASSIFICATION	0.0013217058833322989	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999556692357988	WITHOUT_CLASSIFICATION	4.433076420108034E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9995341800106562	WITHOUT_CLASSIFICATION	4.658199893437687E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999461485969272	WITHOUT_CLASSIFICATION	5.3851403072743615E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999606140181957	WITHOUT_CLASSIFICATION	3.9385981804199094E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999976298896374	WITHOUT_CLASSIFICATION	2.370110362608149E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993871554689	WITHOUT_CLASSIFICATION	6.12844531093007E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999773579616198	WITHOUT_CLASSIFICATION	2.2642038380237215E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998316854837818	WITHOUT_CLASSIFICATION	1.6831451621828446E-4	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9980899935530777	WITHOUT_CLASSIFICATION	0.0019100064469222487	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999941298025094	WITHOUT_CLASSIFICATION	5.870197490605316E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999440945959583	WITHOUT_CLASSIFICATION	5.590540404155199E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999977883264296	WITHOUT_CLASSIFICATION	2.211673570374686E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998147931930398	WITHOUT_CLASSIFICATION	1.8520680696008796E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999970293700191	WITHOUT_CLASSIFICATION	2.970629980893586E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999990302379179	WITHOUT_CLASSIFICATION	9.697620820715892E-7	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999862680456774	WITHOUT_CLASSIFICATION	1.373195432270145E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998181205749059	WITHOUT_CLASSIFICATION	1.818794250940719E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996926717749043	WITHOUT_CLASSIFICATION	3.073282250957806E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998945542219237	WITHOUT_CLASSIFICATION	1.054457780762435E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999510869832791	WITHOUT_CLASSIFICATION	4.8913016720926975E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996926717749043	WITHOUT_CLASSIFICATION	3.073282250957806E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9995584424163383	WITHOUT_CLASSIFICATION	4.415575836616624E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9997589878619496	WITHOUT_CLASSIFICATION	2.410121380503357E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999928062156513	WITHOUT_CLASSIFICATION	7.193784348648989E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.999964026219849	WITHOUT_CLASSIFICATION	3.597378015099453E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999919447344465	WITHOUT_CLASSIFICATION	8.055265553482419E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999919447344465	WITHOUT_CLASSIFICATION	8.055265553482419E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999079703255493	WITHOUT_CLASSIFICATION	9.202967445054978E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999995565131659	WITHOUT_CLASSIFICATION	4.434868340536471E-7	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998904689663114	WITHOUT_CLASSIFICATION	1.0953103368864735E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999936790590991	WITHOUT_CLASSIFICATION	6.3209409009983025E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999551479984974	WITHOUT_CLASSIFICATION	4.485200150266982E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999992021247949	WITHOUT_CLASSIFICATION	7.97875205112352E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999409670481527	WITHOUT_CLASSIFICATION	5.903295184729091E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.999979171239622	WITHOUT_CLASSIFICATION	2.0828760377916665E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999660717136989	WITHOUT_CLASSIFICATION	3.39282863011535E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999576166785644	WITHOUT_CLASSIFICATION	4.2383321435614485E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999967529610548	WITHOUT_CLASSIFICATION	3.247038945170255E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999967529610548	WITHOUT_CLASSIFICATION	3.247038945170255E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999081134422447	WITHOUT_CLASSIFICATION	9.188655775536191E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998313821394404	WITHOUT_CLASSIFICATION	1.6861786055952962E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999191256143011	WITHOUT_CLASSIFICATION	8.087438569900386E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999967529610548	WITHOUT_CLASSIFICATION	3.247038945170255E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999081134422447	WITHOUT_CLASSIFICATION	9.188655775536191E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999081134422447	WITHOUT_CLASSIFICATION	9.188655775536191E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999404366469334	WITHOUT_CLASSIFICATION	5.956335306669276E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999296240872801	WITHOUT_CLASSIFICATION	7.037591271984224E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999840136991311	WITHOUT_CLASSIFICATION	1.5986300868811638E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999893751860932	WITHOUT_CLASSIFICATION	1.062481390672866E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997057725635318	WITHOUT_CLASSIFICATION	2.9422743646824337E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997057725635318	WITHOUT_CLASSIFICATION	2.9422743646824337E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998893188380144	WITHOUT_CLASSIFICATION	1.1068116198562207E-4	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998832726003914	WITHOUT_CLASSIFICATION	1.1672739960845628E-4	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999437545766044	WITHOUT_CLASSIFICATION	5.6245423395591015E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998849417971685	WITHOUT_CLASSIFICATION	1.1505820283155856E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9998849417971685	WITHOUT_CLASSIFICATION	1.1505820283155856E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999844164071446	WITHOUT_CLASSIFICATION	1.5583592855397243E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998785485612163	WITHOUT_CLASSIFICATION	1.2145143878375906E-4	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999409997769574	WITHOUT_CLASSIFICATION	5.900022304261156E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9998214092539661	WITHOUT_CLASSIFICATION	1.7859074603386265E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999868566897233	WITHOUT_CLASSIFICATION	1.3143310276596177E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999173529364218	WITHOUT_CLASSIFICATION	8.264706357814149E-5	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998984594429806	WITHOUT_CLASSIFICATION	1.0154055701935132E-4	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999854596443772	WITHOUT_CLASSIFICATION	1.454035562268728E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999409997769574	WITHOUT_CLASSIFICATION	5.900022304261156E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999884917796129	WITHOUT_CLASSIFICATION	1.1508220387127222E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999618232819487	WITHOUT_CLASSIFICATION	3.8176718051310335E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999618232819487	WITHOUT_CLASSIFICATION	3.8176718051310335E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999994179027155	WITHOUT_CLASSIFICATION	5.8209728449147295E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998170662703327	WITHOUT_CLASSIFICATION	1.8293372966735337E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999590459691864	WITHOUT_CLASSIFICATION	4.0954030813670505E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999059690484108	WITHOUT_CLASSIFICATION	9.403095158931035E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997925762695631	WITHOUT_CLASSIFICATION	2.0742373043686682E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999856621479957	WITHOUT_CLASSIFICATION	1.4337852004262928E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999500039118693	WITHOUT_CLASSIFICATION	4.999608813083205E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998087898840128	WITHOUT_CLASSIFICATION	1.9121011598722222E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999994782786587	WITHOUT_CLASSIFICATION	5.21721341294893E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999547882601549	WITHOUT_CLASSIFICATION	4.521173984511357E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999547882601549	WITHOUT_CLASSIFICATION	4.521173984511357E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999978409597002	WITHOUT_CLASSIFICATION	2.1590402997931753E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999805467655278	WITHOUT_CLASSIFICATION	1.9453234472157464E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999099444856583	WITHOUT_CLASSIFICATION	9.005551434172328E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999189963037115	WITHOUT_CLASSIFICATION	8.100369628849498E-5	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999326024161908	WITHOUT_CLASSIFICATION	6.739758380931405E-5	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9997548217528329	WITHOUT_CLASSIFICATION	2.45178247167108E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9992605697689837	WITHOUT_CLASSIFICATION	7.394302310162725E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999927202046408	WITHOUT_CLASSIFICATION	7.27979535928676E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999897988398454	WITHOUT_CLASSIFICATION	1.0201160154638887E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999373421583995	WITHOUT_CLASSIFICATION	6.265784160056106E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9997548217528329	WITHOUT_CLASSIFICATION	2.45178247167108E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9980266744453401	WITHOUT_CLASSIFICATION	0.0019733255546599835	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9994411835811501	WITHOUT_CLASSIFICATION	5.588164188498523E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999338150214849	WITHOUT_CLASSIFICATION	6.618497851509378E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999397848826634	WITHOUT_CLASSIFICATION	6.021511733655898E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9998382484293866	WITHOUT_CLASSIFICATION	1.61751570613334E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999360684289513	WITHOUT_CLASSIFICATION	6.393157104868036E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999778272709301	WITHOUT_CLASSIFICATION	2.2172729069907417E-4	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999945202094168	WITHOUT_CLASSIFICATION	5.47979058320245E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999225393566304	WITHOUT_CLASSIFICATION	7.746064336947105E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998543256561021	WITHOUT_CLASSIFICATION	1.4567434389783045E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999897597753953	WITHOUT_CLASSIFICATION	1.0240224604608152E-5	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999148983398232	WITHOUT_CLASSIFICATION	8.510166017683887E-5	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999410702478577	WITHOUT_CLASSIFICATION	5.892975214230118E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9990854428176656	WITHOUT_CLASSIFICATION	9.145571823343283E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995531802986536	WITHOUT_CLASSIFICATION	4.468197013463759E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9999319042416596	WITHOUT_CLASSIFICATION	6.80957583405236E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999897988398454	WITHOUT_CLASSIFICATION	1.0201160154638887E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999897597753953	WITHOUT_CLASSIFICATION	1.0240224604608152E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940883019238	WITHOUT_CLASSIFICATION	5.911698076115601E-6	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998276151972995	WITHOUT_CLASSIFICATION	1.72384802700624E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999333791045389	WITHOUT_CLASSIFICATION	6.662089546099375E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997696704651522	WITHOUT_CLASSIFICATION	2.3032953484772788E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999900253828994	WITHOUT_CLASSIFICATION	9.9746171005941E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.997312208745559	WITHOUT_CLASSIFICATION	0.0026877912544409207	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999899480739701	WITHOUT_CLASSIFICATION	1.0051926029839184E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999364755658123	WITHOUT_CLASSIFICATION	6.352443418756331E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997297356816788	WITHOUT_CLASSIFICATION	2.702643183212188E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997297356816788	WITHOUT_CLASSIFICATION	2.702643183212188E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999976742798983	WITHOUT_CLASSIFICATION	2.3257201017917856E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999822157320823	WITHOUT_CLASSIFICATION	1.7784267917658488E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9998892932899013	WITHOUT_CLASSIFICATION	1.1070671009867884E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.999917512110521	WITHOUT_CLASSIFICATION	8.248788947892057E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999970177659738	WITHOUT_CLASSIFICATION	2.982234026194063E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.9999580308856328	WITHOUT_CLASSIFICATION	4.1969114367221915E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999896290192407	WITHOUT_CLASSIFICATION	1.0370980759287884E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998895460936932	WITHOUT_CLASSIFICATION	1.1045390630678298E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999664511452958	WITHOUT_CLASSIFICATION	3.3548854704174004E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999664511452958	WITHOUT_CLASSIFICATION	3.3548854704174004E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.999922997290103	WITHOUT_CLASSIFICATION	7.70027098969571E-5	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999832171823441	WITHOUT_CLASSIFICATION	1.6782817655967364E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.999922997290103	WITHOUT_CLASSIFICATION	7.70027098969571E-5	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999167822960493	WITHOUT_CLASSIFICATION	8.321770395075022E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.999934733288864	WITHOUT_CLASSIFICATION	6.526671113601133E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999955374846597	WITHOUT_CLASSIFICATION	4.462515340276336E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999897988398454	WITHOUT_CLASSIFICATION	1.0201160154638887E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999897597753953	WITHOUT_CLASSIFICATION	1.0240224604608152E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999897597753953	WITHOUT_CLASSIFICATION	1.0240224604608152E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.999995569530021	WITHOUT_CLASSIFICATION	4.430469979001265E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999723108974813	WITHOUT_CLASSIFICATION	2.7689102518659024E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999626211418471	WITHOUT_CLASSIFICATION	3.737885815295073E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999353263657927	WITHOUT_CLASSIFICATION	6.467363420728242E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999353263657927	WITHOUT_CLASSIFICATION	6.467363420728242E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999638583128496	WITHOUT_CLASSIFICATION	3.614168715037167E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999549074519818	WITHOUT_CLASSIFICATION	4.509254801822957E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.9999932203885806	WITHOUT_CLASSIFICATION	6.77961141933992E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999912841225166	WITHOUT_CLASSIFICATION	8.715877483482321E-6	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999922865054014	WITHOUT_CLASSIFICATION	7.713494598605987E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999904808079509	WITHOUT_CLASSIFICATION	9.519192049021082E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960760237842	WITHOUT_CLASSIFICATION	3.923976215834264E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999899057538798	WITHOUT_CLASSIFICATION	1.0094246120235991E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999899057538798	WITHOUT_CLASSIFICATION	1.0094246120235991E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999952555303325	WITHOUT_CLASSIFICATION	4.744469667543612E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999952555303325	WITHOUT_CLASSIFICATION	4.744469667543612E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999198474398531	WITHOUT_CLASSIFICATION	8.015256014685783E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999198474398531	WITHOUT_CLASSIFICATION	8.015256014685783E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998721575000221	WITHOUT_CLASSIFICATION	1.2784249997783382E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998721575000221	WITHOUT_CLASSIFICATION	1.2784249997783382E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999353263657927	WITHOUT_CLASSIFICATION	6.467363420728242E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999960760237842	WITHOUT_CLASSIFICATION	3.923976215834264E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999899057538798	WITHOUT_CLASSIFICATION	1.0094246120235991E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999899057538798	WITHOUT_CLASSIFICATION	1.0094246120235991E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999952555303325	WITHOUT_CLASSIFICATION	4.744469667543612E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999198474398531	WITHOUT_CLASSIFICATION	8.015256014685783E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999198474398531	WITHOUT_CLASSIFICATION	8.015256014685783E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998721575000221	WITHOUT_CLASSIFICATION	1.2784249997783382E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999430406171124	WITHOUT_CLASSIFICATION	5.6959382887607993E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999084235940885	WITHOUT_CLASSIFICATION	9.157640591151176E-5	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999570183803763	WITHOUT_CLASSIFICATION	4.298161962362295E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999983340819211	WITHOUT_CLASSIFICATION	1.6659180788931735E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999478408264119	WITHOUT_CLASSIFICATION	5.215917358816793E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999898804670422	WITHOUT_CLASSIFICATION	1.0119532957875256E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9943271324339058	WITHOUT_CLASSIFICATION	0.005672867566094222	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9986133978697622	WITHOUT_CLASSIFICATION	0.0013866021302378101	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999428343832999	WITHOUT_CLASSIFICATION	5.716561670013178E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999923310155989	WITHOUT_CLASSIFICATION	7.668984401107968E-6	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998800352576457	WITHOUT_CLASSIFICATION	1.199647423543282E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999391627940766	WITHOUT_CLASSIFICATION	6.0837205923542975E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999079703255493	WITHOUT_CLASSIFICATION	9.202967445054978E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999898804670422	WITHOUT_CLASSIFICATION	1.0119532957875256E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999898804670422	WITHOUT_CLASSIFICATION	1.0119532957875256E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999898804670422	WITHOUT_CLASSIFICATION	1.0119532957875256E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9992349854954691	WITHOUT_CLASSIFICATION	7.650145045309717E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999726390516552	WITHOUT_CLASSIFICATION	2.7360948344781538E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999726390516552	WITHOUT_CLASSIFICATION	2.7360948344781538E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9996185973664241	WITHOUT_CLASSIFICATION	3.814026335758583E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999980543527098	WITHOUT_CLASSIFICATION	1.945647290210588E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999389090974726	WITHOUT_CLASSIFICATION	6.109090252740933E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991893127222794	WITHOUT_CLASSIFICATION	8.10687277720566E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9991893127222794	WITHOUT_CLASSIFICATION	8.10687277720566E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999809266717096	WITHOUT_CLASSIFICATION	1.907332829046671E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99980301597849	WITHOUT_CLASSIFICATION	1.969840215100609E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.99980301597849	WITHOUT_CLASSIFICATION	1.969840215100609E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999442693697286	WITHOUT_CLASSIFICATION	5.5730630271384295E-5	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999197762385286	WITHOUT_CLASSIFICATION	8.022376147140666E-5	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999472336741795	WITHOUT_CLASSIFICATION	5.276632582048741E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.9999913584088334	WITHOUT_CLASSIFICATION	8.641591166770917E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999898483635923	WITHOUT_CLASSIFICATION	1.0151636407773522E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9918972730583916	WITHOUT_CLASSIFICATION	0.008102726941608442	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999899017962791	WITHOUT_CLASSIFICATION	1.0098203720856398E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999239710830408	WITHOUT_CLASSIFICATION	7.602891695917081E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997106826092598	WITHOUT_CLASSIFICATION	2.893173907402267E-4	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999746097536678	WITHOUT_CLASSIFICATION	2.539024633225857E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999618841518122	WITHOUT_CLASSIFICATION	3.811584818786421E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999410240479931	WITHOUT_CLASSIFICATION	5.8975952006724426E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999964803708845	WITHOUT_CLASSIFICATION	3.5196291154825415E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999045854247279	WITHOUT_CLASSIFICATION	9.541457527199054E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999903300097158	WITHOUT_CLASSIFICATION	9.669990284191876E-6	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999897788337304	WITHOUT_CLASSIFICATION	1.0221166269668577E-5	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999086515955979	WITHOUT_CLASSIFICATION	9.134840440208916E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999942148226868	WITHOUT_CLASSIFICATION	5.785177313201137E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999472336741795	WITHOUT_CLASSIFICATION	5.276632582048741E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999848932466676	WITHOUT_CLASSIFICATION	1.5106753332331465E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999217543317647	WITHOUT_CLASSIFICATION	7.824566823531041E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999902852688886	WITHOUT_CLASSIFICATION	9.71473111138895E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999898483635923	WITHOUT_CLASSIFICATION	1.0151636407773522E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999942148226868	WITHOUT_CLASSIFICATION	5.785177313201137E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999848932466676	WITHOUT_CLASSIFICATION	1.5106753332331465E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999902852688886	WITHOUT_CLASSIFICATION	9.71473111138895E-6	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997979373609086	WITHOUT_CLASSIFICATION	2.02062639091531E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.9999897598859496	WITHOUT_CLASSIFICATION	1.0240114050449959E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997979373609086	WITHOUT_CLASSIFICATION	2.02062639091531E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999897758523942	WITHOUT_CLASSIFICATION	1.0224147605867769E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999124282452599	WITHOUT_CLASSIFICATION	8.757175474005238E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999449570239961	WITHOUT_CLASSIFICATION	5.5042976003845485E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999854800364213	WITHOUT_CLASSIFICATION	1.451996357862767E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999982919258427	WITHOUT_CLASSIFICATION	1.7080741573881498E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999740283900193	WITHOUT_CLASSIFICATION	2.5971609980841695E-5	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999816718581892	WITHOUT_CLASSIFICATION	1.8328141810723403E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9996333728852977	WITHOUT_CLASSIFICATION	3.6662711470228013E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999647205410501	WITHOUT_CLASSIFICATION	3.5279458949871494E-5	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999816718581892	WITHOUT_CLASSIFICATION	1.8328141810723403E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999913152043399	WITHOUT_CLASSIFICATION	8.68479565999788E-6	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998252925786689	WITHOUT_CLASSIFICATION	1.7470742133113303E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999942148226868	WITHOUT_CLASSIFICATION	5.785177313201137E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9998808787132222	WITHOUT_CLASSIFICATION	1.1912128677781052E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999058144054223	WITHOUT_CLASSIFICATION	9.418559457768522E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9989857968586308	WITHOUT_CLASSIFICATION	0.0010142031413693006	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.999838062980046	WITHOUT_CLASSIFICATION	1.6193701995411564E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999912687704523	WITHOUT_CLASSIFICATION	8.731229547698704E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999907654245321	WITHOUT_CLASSIFICATION	9.234575467869485E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999883648263272	WITHOUT_CLASSIFICATION	1.1635173672788871E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999357144573592	WITHOUT_CLASSIFICATION	6.428554264087018E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999897816748755	WITHOUT_CLASSIFICATION	1.021832512449478E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998992389833719	WITHOUT_CLASSIFICATION	1.0076101662808001E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9995049756231872	WITHOUT_CLASSIFICATION	4.950243768129314E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999410240479931	WITHOUT_CLASSIFICATION	5.8975952006724426E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999343737793794	WITHOUT_CLASSIFICATION	6.562622062056092E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998592359682874	WITHOUT_CLASSIFICATION	1.4076403171254674E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999668024713697	WITHOUT_CLASSIFICATION	3.3197528630393075E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999274468438899	WITHOUT_CLASSIFICATION	7.255315611002524E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999281134886733	WITHOUT_CLASSIFICATION	7.188651132674033E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999926155273803	WITHOUT_CLASSIFICATION	7.38447261969552E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999594916691	WITHOUT_CLASSIFICATION	4.05083308924012E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999970843606532	WITHOUT_CLASSIFICATION	2.915639346804518E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999663231650042	WITHOUT_CLASSIFICATION	3.3676834995824614E-5	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999264144960718	WITHOUT_CLASSIFICATION	7.35855039282285E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999474603947909	WITHOUT_CLASSIFICATION	5.253960520903654E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999474603947909	WITHOUT_CLASSIFICATION	5.253960520903654E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999064736539414	WITHOUT_CLASSIFICATION	9.352634605874458E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999905507400503	WITHOUT_CLASSIFICATION	9.449259949706831E-5	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.999970824007475	WITHOUT_CLASSIFICATION	2.9175992525038815E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998991976391128	WITHOUT_CLASSIFICATION	1.0080236088718295E-4	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999471827331001	WITHOUT_CLASSIFICATION	5.28172668999013E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9997429617702165	WITHOUT_CLASSIFICATION	2.570382297834874E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997342887917745	WITHOUT_CLASSIFICATION	2.6571120822551356E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999287855062056	WITHOUT_CLASSIFICATION	7.121449379443996E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999678433254425	WITHOUT_CLASSIFICATION	3.215667455748003E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999252305203341	WITHOUT_CLASSIFICATION	7.476947966587301E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999094391388254	WITHOUT_CLASSIFICATION	9.05608611745728E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9996746186038434	WITHOUT_CLASSIFICATION	3.2538139615660445E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999053155064844	WITHOUT_CLASSIFICATION	9.468449351560032E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9993363915397686	WITHOUT_CLASSIFICATION	6.636084602314278E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9994354090614751	WITHOUT_CLASSIFICATION	5.645909385247857E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9995796929784008	WITHOUT_CLASSIFICATION	4.2030702159913917E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999199211002338	WITHOUT_CLASSIFICATION	8.007889976628394E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999700334909665	WITHOUT_CLASSIFICATION	2.9966509033546604E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999132004956071	WITHOUT_CLASSIFICATION	8.679950439290253E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999329947338398	WITHOUT_CLASSIFICATION	6.700526616016308E-5	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999831593196131	WITHOUT_CLASSIFICATION	1.684068038687283E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9951844445254915	WITHOUT_CLASSIFICATION	0.004815555474508497	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9995796929784008	WITHOUT_CLASSIFICATION	4.2030702159913917E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999291644467163	WITHOUT_CLASSIFICATION	7.083555328376197E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999224372089678	WITHOUT_CLASSIFICATION	7.75627910322707E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999922121928828	WITHOUT_CLASSIFICATION	7.787807117208495E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999817895828592	WITHOUT_CLASSIFICATION	1.8210417140795667E-4	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999963760751887	WITHOUT_CLASSIFICATION	3.623924811298594E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999700334909665	WITHOUT_CLASSIFICATION	2.9966509033546604E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9957271558720439	WITHOUT_CLASSIFICATION	0.004272844127956217	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998922057657563	WITHOUT_CLASSIFICATION	1.0779423424373371E-4	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998906436709244	WITHOUT_CLASSIFICATION	1.093563290756012E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999948775016483	WITHOUT_CLASSIFICATION	5.122498351648696E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999948775016483	WITHOUT_CLASSIFICATION	5.122498351648696E-6	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999027648500342	WITHOUT_CLASSIFICATION	9.723514996585038E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998979662156514	WITHOUT_CLASSIFICATION	1.0203378434854909E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998979662156514	WITHOUT_CLASSIFICATION	1.0203378434854909E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999663231650042	WITHOUT_CLASSIFICATION	3.3676834995824614E-5	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9948891253463733	WITHOUT_CLASSIFICATION	0.005110874653626657	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995443707459302	WITHOUT_CLASSIFICATION	4.55629254069823E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998164719102078	WITHOUT_CLASSIFICATION	1.8352808979220402E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995443707459302	WITHOUT_CLASSIFICATION	4.55629254069823E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998164719102078	WITHOUT_CLASSIFICATION	1.8352808979220402E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999478299326379	WITHOUT_CLASSIFICATION	5.217006736208153E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9987146950616698	WITHOUT_CLASSIFICATION	0.0012853049383302099	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999320225960193	WITHOUT_CLASSIFICATION	6.797740398065321E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999793327748935	WITHOUT_CLASSIFICATION	2.066722510646081E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998132260914487	WITHOUT_CLASSIFICATION	1.8677390855137055E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999770471471965	WITHOUT_CLASSIFICATION	2.2952852803533645E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996266729458578	WITHOUT_CLASSIFICATION	3.7332705414223346E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996266729458578	WITHOUT_CLASSIFICATION	3.7332705414223346E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997100377600323	WITHOUT_CLASSIFICATION	2.8996223996768537E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991688165927	WITHOUT_CLASSIFICATION	8.311834072572825E-7	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999664969026154	WITHOUT_CLASSIFICATION	3.350309738455522E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998199319637	WITHOUT_CLASSIFICATION	1.8006803630008183E-4	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999838133607093	WITHOUT_CLASSIFICATION	1.6186639290804048E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999133206805643	WITHOUT_CLASSIFICATION	8.667931943573379E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999133206805643	WITHOUT_CLASSIFICATION	8.667931943573379E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990169266567767	WITHOUT_CLASSIFICATION	9.830733432233606E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990169266567767	WITHOUT_CLASSIFICATION	9.830733432233606E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9989572998001515	WITHOUT_CLASSIFICATION	0.0010427001998485992	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999478299326379	WITHOUT_CLASSIFICATION	5.217006736208153E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999068923185279	WITHOUT_CLASSIFICATION	9.310768147208703E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9996429576793485	WITHOUT_CLASSIFICATION	3.5704232065154743E-4	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996766640972035	WITHOUT_CLASSIFICATION	3.233359027964618E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998668639784556	WITHOUT_CLASSIFICATION	1.3313602154443391E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9946795458717672	WITHOUT_CLASSIFICATION	0.005320454128232752	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999478299326379	WITHOUT_CLASSIFICATION	5.217006736208153E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9998668639784556	WITHOUT_CLASSIFICATION	1.3313602154443391E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9946795458717672	WITHOUT_CLASSIFICATION	0.005320454128232752	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9996609462306572	WITHOUT_CLASSIFICATION	3.39053769342811E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999150269939235	WITHOUT_CLASSIFICATION	8.497300607645842E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999478638150755	WITHOUT_CLASSIFICATION	5.2136184924585834E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999478299326379	WITHOUT_CLASSIFICATION	5.217006736208153E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999478299326379	WITHOUT_CLASSIFICATION	5.217006736208153E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999889424085563	WITHOUT_CLASSIFICATION	1.1057591443644009E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9998693533448041	WITHOUT_CLASSIFICATION	1.3064665519591282E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9999167916905811	WITHOUT_CLASSIFICATION	8.320830941887309E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998787626814832	WITHOUT_CLASSIFICATION	1.2123731851670587E-4	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999688866017883	WITHOUT_CLASSIFICATION	3.111339821166951E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999939226847515	WITHOUT_CLASSIFICATION	6.077315248445724E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999475158706596	WITHOUT_CLASSIFICATION	5.248412934053406E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999469794222557	WITHOUT_CLASSIFICATION	5.302057774438119E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998653962136628	WITHOUT_CLASSIFICATION	1.346037863372436E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.999881858862783	WITHOUT_CLASSIFICATION	1.1814113721707573E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999191314056097	WITHOUT_CLASSIFICATION	8.086859439025429E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999993670862098	WITHOUT_CLASSIFICATION	6.329137902100317E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999918850847745	WITHOUT_CLASSIFICATION	8.11491522542251E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999558191441189	WITHOUT_CLASSIFICATION	4.4180855881170685E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657757736903	WITHOUT_CLASSIFICATION	1.3422422630967587E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999940505079516	WITHOUT_CLASSIFICATION	5.949492048331914E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998787626814832	WITHOUT_CLASSIFICATION	1.2123731851670587E-4	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.999880452872106	WITHOUT_CLASSIFICATION	1.1954712789394195E-4	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999197116737056	WITHOUT_CLASSIFICATION	8.028832629436575E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999769357405507	WITHOUT_CLASSIFICATION	2.3064259449288364E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999496036426585	WITHOUT_CLASSIFICATION	5.039635734156743E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998989728202163	WITHOUT_CLASSIFICATION	1.0102717978364699E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998989728202163	WITHOUT_CLASSIFICATION	1.0102717978364699E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998787626814832	WITHOUT_CLASSIFICATION	1.2123731851670587E-4	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9590022389144125	WITHOUT_CLASSIFICATION	0.04099776108558753	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999991052293531	WITHOUT_CLASSIFICATION	8.947706469374543E-7	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9985644445315263	WITHOUT_CLASSIFICATION	0.0014355554684736562	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999515557111296	WITHOUT_CLASSIFICATION	4.844428887042811E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897741636691	WITHOUT_CLASSIFICATION	1.022583633097912E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999658390795658	WITHOUT_CLASSIFICATION	3.416092043410052E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9987771090623334	WITHOUT_CLASSIFICATION	0.0012228909376665003	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999912492437458	WITHOUT_CLASSIFICATION	8.750756254073381E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999613849300784	WITHOUT_CLASSIFICATION	3.861506992169564E-5	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999400600301187	WITHOUT_CLASSIFICATION	5.993996988140121E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9972455475009632	WITHOUT_CLASSIFICATION	0.0027544524990367487	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999193090347558	WITHOUT_CLASSIFICATION	8.06909652441615E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999944443984471	WITHOUT_CLASSIFICATION	5.555601552839212E-6	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999044647026908	WITHOUT_CLASSIFICATION	9.55352973092386E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996037108432658	WITHOUT_CLASSIFICATION	3.9628915673420344E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999180542621772	WITHOUT_CLASSIFICATION	8.194573782285045E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9997007906995616	WITHOUT_CLASSIFICATION	2.9920930043826963E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999289184637806	WITHOUT_CLASSIFICATION	7.108153621935998E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9998983385838799	WITHOUT_CLASSIFICATION	1.0166141612003459E-4	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9994035783448635	WITHOUT_CLASSIFICATION	5.964216551365714E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999755245136094	WITHOUT_CLASSIFICATION	2.4475486390626704E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998625780271175	WITHOUT_CLASSIFICATION	1.3742197288239504E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99986598714953	WITHOUT_CLASSIFICATION	1.3401285046997293E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999063351489058	WITHOUT_CLASSIFICATION	9.366485109412976E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998999389564168	WITHOUT_CLASSIFICATION	1.0006104358310494E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999038199556987	WITHOUT_CLASSIFICATION	9.618004430136344E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999971592625555	WITHOUT_CLASSIFICATION	2.8407374445949323E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999969565276913	WITHOUT_CLASSIFICATION	3.0434723087666526E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999971351094414	WITHOUT_CLASSIFICATION	2.864890558605815E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817001233429	WITHOUT_CLASSIFICATION	1.8299876657215634E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100661213376	WITHOUT_CLASSIFICATION	8.993387866239559E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999502897379885	WITHOUT_CLASSIFICATION	4.971026201153313E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998979877836501	WITHOUT_CLASSIFICATION	1.020122163499454E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998787943667642	WITHOUT_CLASSIFICATION	1.2120563323579045E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999198033605344	WITHOUT_CLASSIFICATION	8.019663946549786E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998584995285986	WITHOUT_CLASSIFICATION	1.4150047140146628E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.999838343887957	WITHOUT_CLASSIFICATION	1.616561120429866E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999183783790003	WITHOUT_CLASSIFICATION	8.162162099970387E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999997192123969	WITHOUT_CLASSIFICATION	2.807876030968806E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999535565713025	WITHOUT_CLASSIFICATION	4.644342869751582E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.9998840656141514	WITHOUT_CLASSIFICATION	1.1593438584857708E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999102602364515	WITHOUT_CLASSIFICATION	8.973976354851314E-5	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999917788743775	WITHOUT_CLASSIFICATION	8.22112562242765E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998987058745842	WITHOUT_CLASSIFICATION	1.0129412541592216E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999009990087828	WITHOUT_CLASSIFICATION	9.900099121713429E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999151168456311	WITHOUT_CLASSIFICATION	8.488315436895197E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999319374803578	WITHOUT_CLASSIFICATION	6.806251964224486E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999899218375093	WITHOUT_CLASSIFICATION	1.0078162490644411E-5	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999375047734765	WITHOUT_CLASSIFICATION	6.24952265234215E-5	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9998598839749981	WITHOUT_CLASSIFICATION	1.401160250018817E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991932522377642	WITHOUT_CLASSIFICATION	8.067477622357906E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9995463688745841	WITHOUT_CLASSIFICATION	4.5363112541579924E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577512876649	WITHOUT_CLASSIFICATION	1.4224871233509294E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998908764406848	WITHOUT_CLASSIFICATION	1.0912355931527993E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998928054342162	WITHOUT_CLASSIFICATION	1.0719456578381236E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998642546911762	WITHOUT_CLASSIFICATION	1.3574530882386342E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.995509478968697	WITHOUT_CLASSIFICATION	0.004490521031302932	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9998930741305211	WITHOUT_CLASSIFICATION	1.0692586947891635E-4	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999634098727486	WITHOUT_CLASSIFICATION	3.659012725130941E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9978952019133694	WITHOUT_CLASSIFICATION	0.00210479808663062	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999830224078325	WITHOUT_CLASSIFICATION	1.697759216750485E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998322735892131	WITHOUT_CLASSIFICATION	1.6772641078684674E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9997589913507103	WITHOUT_CLASSIFICATION	2.4100864928974964E-4	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9998987935824848	WITHOUT_CLASSIFICATION	1.0120641751515462E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999904575663159	WITHOUT_CLASSIFICATION	9.542433684063085E-6	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9993374477539411	WITHOUT_CLASSIFICATION	6.625522460589048E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9997362264400483	WITHOUT_CLASSIFICATION	2.6377355995161375E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998755800922235	WITHOUT_CLASSIFICATION	1.244199077764564E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997180638430261	WITHOUT_CLASSIFICATION	2.8193615697388717E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999535565713025	WITHOUT_CLASSIFICATION	4.644342869751582E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999693725360791	WITHOUT_CLASSIFICATION	3.0627463920900586E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999692826678619	WITHOUT_CLASSIFICATION	3.071733213799809E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999227133139772	WITHOUT_CLASSIFICATION	7.728668602273713E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999183783790003	WITHOUT_CLASSIFICATION	8.162162099970387E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998683846347032	WITHOUT_CLASSIFICATION	1.316153652967719E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999140853171624	WITHOUT_CLASSIFICATION	8.591468283765276E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.995509478968697	WITHOUT_CLASSIFICATION	0.004490521031302932	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992252937018334	WITHOUT_CLASSIFICATION	7.747062981664984E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999765514835709	WITHOUT_CLASSIFICATION	2.3448516429111748E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998668659720723	WITHOUT_CLASSIFICATION	1.3313402792769307E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998789969885368	WITHOUT_CLASSIFICATION	1.210030114631621E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999721107941634	WITHOUT_CLASSIFICATION	2.788920583659372E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999618244144497	WITHOUT_CLASSIFICATION	3.8175585550321066E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998188002432079	WITHOUT_CLASSIFICATION	1.8119975679212313E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999921953449104	WITHOUT_CLASSIFICATION	7.80465508974668E-6	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995771715399225	WITHOUT_CLASSIFICATION	4.228284600773734E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999046234413784	WITHOUT_CLASSIFICATION	9.537655862158111E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999468573633283	WITHOUT_CLASSIFICATION	5.3142636671675396E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999185125017002	WITHOUT_CLASSIFICATION	8.1487498299789E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999781033939906	WITHOUT_CLASSIFICATION	2.189660600946631E-5	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9992713562127302	WITHOUT_CLASSIFICATION	7.286437872697863E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9996860505591939	WITHOUT_CLASSIFICATION	3.139494408060757E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998529029353256	WITHOUT_CLASSIFICATION	1.4709706467444885E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802216995038	WITHOUT_CLASSIFICATION	1.9778300496104663E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.999920790445303	WITHOUT_CLASSIFICATION	7.92095546970806E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999114855476621	WITHOUT_CLASSIFICATION	8.851445233797219E-5	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9994570033866138	WITHOUT_CLASSIFICATION	5.429966133862422E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998976148671322	WITHOUT_CLASSIFICATION	1.0238513286776604E-4	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998839023262363	WITHOUT_CLASSIFICATION	1.1609767376367109E-4	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999056049777756	WITHOUT_CLASSIFICATION	9.439502222441565E-5	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.8195396102540604	WITHOUT_CLASSIFICATION	0.1804603897459396	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999985609538371	WITHOUT_CLASSIFICATION	1.4390461629107591E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999855893071109	WITHOUT_CLASSIFICATION	1.4410692889051987E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999183783790003	WITHOUT_CLASSIFICATION	8.162162099970387E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999535565713025	WITHOUT_CLASSIFICATION	4.644342869751582E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9981255168275883	WITHOUT_CLASSIFICATION	0.0018744831724116816	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999935484350785	WITHOUT_CLASSIFICATION	6.451564921546073E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9761427385911536	WITHOUT_CLASSIFICATION	0.02385726140884647	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9996856888793636	WITHOUT_CLASSIFICATION	3.14311120636383E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996886527830926	WITHOUT_CLASSIFICATION	3.1134721690739543E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996894250368902	WITHOUT_CLASSIFICATION	3.1057496310989016E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999535565713025	WITHOUT_CLASSIFICATION	4.644342869751582E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998989503129103	WITHOUT_CLASSIFICATION	1.01049687089633E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802216995038	WITHOUT_CLASSIFICATION	1.9778300496104663E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9976366323591459	WITHOUT_CLASSIFICATION	0.0023633676408540815	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998529029353256	WITHOUT_CLASSIFICATION	1.4709706467444885E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9994985041337088	WITHOUT_CLASSIFICATION	5.014958662912487E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9842517775006216	WITHOUT_CLASSIFICATION	0.01574822249937845	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999789665807445	WITHOUT_CLASSIFICATION	2.1033419255453024E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998668659720723	WITHOUT_CLASSIFICATION	1.3313402792769307E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998789969885368	WITHOUT_CLASSIFICATION	1.210030114631621E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999721107941634	WITHOUT_CLASSIFICATION	2.788920583659372E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999515852160975	WITHOUT_CLASSIFICATION	4.841478390250196E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9997983008305925	WITHOUT_CLASSIFICATION	2.0169916940738616E-4	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999097752068277	WITHOUT_CLASSIFICATION	9.02247931723986E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998529029353256	WITHOUT_CLASSIFICATION	1.4709706467444885E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9994985041337088	WITHOUT_CLASSIFICATION	5.014958662912487E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999535565713025	WITHOUT_CLASSIFICATION	4.644342869751582E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999618244144497	WITHOUT_CLASSIFICATION	3.8175585550321066E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998188002432079	WITHOUT_CLASSIFICATION	1.8119975679212313E-4	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999921953449104	WITHOUT_CLASSIFICATION	7.80465508974668E-6	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947117553907	WITHOUT_CLASSIFICATION	5.288244609245767E-6	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999403511754829	WITHOUT_CLASSIFICATION	5.964882451715257E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999220209923626	WITHOUT_CLASSIFICATION	7.797900763741569E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998220295832962	WITHOUT_CLASSIFICATION	1.779704167038073E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9917335086401217	WITHOUT_CLASSIFICATION	0.008266491359878407	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993860643679082	WITHOUT_CLASSIFICATION	6.139356320918743E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999889498860719	WITHOUT_CLASSIFICATION	1.1050113928105585E-4	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999037937469505	WITHOUT_CLASSIFICATION	9.620625304953001E-5	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999391066705755	WITHOUT_CLASSIFICATION	6.089332942447533E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999038199556987	WITHOUT_CLASSIFICATION	9.618004430136344E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817001233429	WITHOUT_CLASSIFICATION	1.8299876657215634E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999961186083443	WITHOUT_CLASSIFICATION	3.881391655698721E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999179051692485	WITHOUT_CLASSIFICATION	8.209483075145204E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388723675979	WITHOUT_CLASSIFICATION	6.11276324020271E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9889270502844059	WITHOUT_CLASSIFICATION	0.011072949715594103	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999100661213376	WITHOUT_CLASSIFICATION	8.993387866239559E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960421041243	WITHOUT_CLASSIFICATION	1.0395789587563616E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999904575663159	WITHOUT_CLASSIFICATION	9.542433684063085E-6	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9994362114299794	WITHOUT_CLASSIFICATION	5.637885700205548E-4	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9995181815214033	WITHOUT_CLASSIFICATION	4.818184785967081E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999348201645829	WITHOUT_CLASSIFICATION	6.517983541711447E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999243907319552	WITHOUT_CLASSIFICATION	7.560926804482E-5	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999954298744625	WITHOUT_CLASSIFICATION	4.570125537485334E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9997979373609086	WITHOUT_CLASSIFICATION	2.02062639091531E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998974760446189	WITHOUT_CLASSIFICATION	1.0252395538107629E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999912492437458	WITHOUT_CLASSIFICATION	8.750756254073381E-6	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998241225893495	WITHOUT_CLASSIFICATION	1.758774106504282E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999464441929667	WITHOUT_CLASSIFICATION	5.355580703319734E-5	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999498893071265	WITHOUT_CLASSIFICATION	5.011069287361152E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999771564543019	WITHOUT_CLASSIFICATION	2.2843545698090815E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999973361723896	WITHOUT_CLASSIFICATION	2.6638276104115372E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999564187424468	WITHOUT_CLASSIFICATION	4.358125755331995E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999106085807372	WITHOUT_CLASSIFICATION	8.939141926276078E-5	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998845604847705	WITHOUT_CLASSIFICATION	1.1543951522942937E-4	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996885747163377	WITHOUT_CLASSIFICATION	3.114252836623306E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996644443572771	WITHOUT_CLASSIFICATION	3.35555642722906E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999475260465436	WITHOUT_CLASSIFICATION	5.247395345640265E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994349034334528	WITHOUT_CLASSIFICATION	5.650965665473007E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9976206168490658	WITHOUT_CLASSIFICATION	0.0023793831509342223	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995084101081364	WITHOUT_CLASSIFICATION	4.915898918636292E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996939289384525	WITHOUT_CLASSIFICATION	3.0607106154742627E-4	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9994986994673264	WITHOUT_CLASSIFICATION	5.013005326736632E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999214921041893	WITHOUT_CLASSIFICATION	7.850789581067656E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995084101081364	WITHOUT_CLASSIFICATION	4.915898918636292E-4	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997932468980679	WITHOUT_CLASSIFICATION	2.067531019319306E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995347432672196	WITHOUT_CLASSIFICATION	4.6525673278044704E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295926031048	WITHOUT_CLASSIFICATION	7.040739689533372E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999418201588598	WITHOUT_CLASSIFICATION	5.8179841140259244E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997190132055837	WITHOUT_CLASSIFICATION	2.8098679441635913E-4	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999808514256217	WITHOUT_CLASSIFICATION	1.9148574378310085E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999151706408709	WITHOUT_CLASSIFICATION	8.482935912909563E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999438105104607	WITHOUT_CLASSIFICATION	5.6189489539387326E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999438105104607	WITHOUT_CLASSIFICATION	5.6189489539387326E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999854154599236	WITHOUT_CLASSIFICATION	1.4584540076459582E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9998318607145052	WITHOUT_CLASSIFICATION	1.6813928549482096E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998893336243884	WITHOUT_CLASSIFICATION	1.1066637561165301E-4	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999648000117094	WITHOUT_CLASSIFICATION	3.5199988290694696E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9976091202129207	WITHOUT_CLASSIFICATION	0.002390879787079421	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999963344558325	WITHOUT_CLASSIFICATION	3.665544167492014E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999954084326991	WITHOUT_CLASSIFICATION	4.591567300964339E-6	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999777266468514	WITHOUT_CLASSIFICATION	2.2273353148689455E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9998149136595817	WITHOUT_CLASSIFICATION	1.8508634041835637E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999972112824772	WITHOUT_CLASSIFICATION	2.788717522782879E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999851278442201	WITHOUT_CLASSIFICATION	1.4872155779948607E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999270314394489	WITHOUT_CLASSIFICATION	7.296856055101881E-5	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999848378137842	WITHOUT_CLASSIFICATION	1.51621862156931E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9993836315911252	WITHOUT_CLASSIFICATION	6.163684088748653E-4	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999543527211164	WITHOUT_CLASSIFICATION	4.564727888347498E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.999600641983665	WITHOUT_CLASSIFICATION	3.993580163349232E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9992574959466565	WITHOUT_CLASSIFICATION	7.425040533434658E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9980645218291566	WITHOUT_CLASSIFICATION	0.0019354781708433965	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999751743412957	WITHOUT_CLASSIFICATION	2.4825658704210826E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998764468372979	WITHOUT_CLASSIFICATION	1.235531627021259E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998932940150721	WITHOUT_CLASSIFICATION	1.0670598492781298E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999178299605327	WITHOUT_CLASSIFICATION	8.217003946728607E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999349350842626	WITHOUT_CLASSIFICATION	6.506491573741977E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999412150948781	WITHOUT_CLASSIFICATION	5.878490512194975E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999158790856523	WITHOUT_CLASSIFICATION	8.412091434778611E-5	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9994885421604864	WITHOUT_CLASSIFICATION	5.114578395134571E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9990415712762161	WITHOUT_CLASSIFICATION	9.584287237838654E-4	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9993065301909863	WITHOUT_CLASSIFICATION	6.934698090138588E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9935154807398354	WITHOUT_CLASSIFICATION	0.006484519260164517	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9986211643921982	WITHOUT_CLASSIFICATION	0.0013788356078017708	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999442764804424	WITHOUT_CLASSIFICATION	5.572351955767598E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999723005776282	WITHOUT_CLASSIFICATION	2.7699422371797012E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999780750176982	WITHOUT_CLASSIFICATION	2.1924982301887813E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999890056787762	WITHOUT_CLASSIFICATION	1.0994321223742057E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999691631598144	WITHOUT_CLASSIFICATION	3.08368401856003E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.999877178059383	WITHOUT_CLASSIFICATION	1.2282194061703279E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.998824385796599	WITHOUT_CLASSIFICATION	0.00117561420340098	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999835103689023	WITHOUT_CLASSIFICATION	1.6489631097649086E-5	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7443863412356974	WITHOUT_CLASSIFICATION	0.25561365876430264	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999836675551701	WITHOUT_CLASSIFICATION	1.63324448298999E-5	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999138215715276	WITHOUT_CLASSIFICATION	8.617842847238447E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999468573633283	WITHOUT_CLASSIFICATION	5.3142636671675396E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999468573633283	WITHOUT_CLASSIFICATION	5.3142636671675396E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997764919175481	WITHOUT_CLASSIFICATION	2.2350808245188324E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998970524108821	WITHOUT_CLASSIFICATION	1.0294758911789874E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999815229244894	WITHOUT_CLASSIFICATION	1.8477075510600695E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999887321804014	WITHOUT_CLASSIFICATION	1.1267819598534922E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999333065867445	WITHOUT_CLASSIFICATION	6.669341325547237E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999534328656178	WITHOUT_CLASSIFICATION	4.6567134382307084E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999379088287564	WITHOUT_CLASSIFICATION	6.209117124350288E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999984573909169	WITHOUT_CLASSIFICATION	1.5426090831487801E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999319599141	WITHOUT_CLASSIFICATION	6.8040085896649E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999704822494697	WITHOUT_CLASSIFICATION	2.95177505303728E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999534377906417	WITHOUT_CLASSIFICATION	4.6562209358249594E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999947665615934	WITHOUT_CLASSIFICATION	5.233438406577289E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998592394791366	WITHOUT_CLASSIFICATION	1.407605208634575E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999434508192695	WITHOUT_CLASSIFICATION	5.6549180730454674E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999608615232423	WITHOUT_CLASSIFICATION	3.9138476757745706E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9993854512596921	WITHOUT_CLASSIFICATION	6.145487403079037E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999945683317929	WITHOUT_CLASSIFICATION	5.431668207081273E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999147941141082	WITHOUT_CLASSIFICATION	8.520588589182051E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988901463583589	WITHOUT_CLASSIFICATION	0.001109853641641098	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9998774035935281	WITHOUT_CLASSIFICATION	1.2259640647202644E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9998794219297391	WITHOUT_CLASSIFICATION	1.2057807026090485E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9988901463583589	WITHOUT_CLASSIFICATION	0.001109853641641098	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999638082591878	WITHOUT_CLASSIFICATION	3.619174081208398E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999152757533153	WITHOUT_CLASSIFICATION	8.472424668464691E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999655584083453	WITHOUT_CLASSIFICATION	3.444159165474222E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998626721733632	WITHOUT_CLASSIFICATION	1.3732782663669648E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999027189209686	WITHOUT_CLASSIFICATION	9.728107903138976E-5	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999932546991884	WITHOUT_CLASSIFICATION	6.745300811647472E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999353488137109	WITHOUT_CLASSIFICATION	6.465118628901029E-5	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998820412714139	WITHOUT_CLASSIFICATION	1.1795872858608618E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998581542337772	WITHOUT_CLASSIFICATION	1.4184576622279613E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999212425779239	WITHOUT_CLASSIFICATION	7.875742207614673E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999769013879592	WITHOUT_CLASSIFICATION	2.309861204074962E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999878700284432	WITHOUT_CLASSIFICATION	1.2129971556792913E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999909744735703	WITHOUT_CLASSIFICATION	9.025526429573143E-6	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993462857396098	WITHOUT_CLASSIFICATION	6.537142603902378E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999954368300465	WITHOUT_CLASSIFICATION	4.5631699534978985E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9989409281720872	WITHOUT_CLASSIFICATION	0.001059071827912752	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999114461794685	WITHOUT_CLASSIFICATION	8.855382053153436E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999187843418644	WITHOUT_CLASSIFICATION	8.121565813560023E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996738204736402	WITHOUT_CLASSIFICATION	3.26179526359807E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9964423169900091	WITHOUT_CLASSIFICATION	0.0035576830099910434	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9992427227301439	WITHOUT_CLASSIFICATION	7.572772698560727E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999943886963223	WITHOUT_CLASSIFICATION	5.611303677705489E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999045990740923	WITHOUT_CLASSIFICATION	9.540092590765148E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9970867489883202	WITHOUT_CLASSIFICATION	0.0029132510116798077	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.999965656076181	WITHOUT_CLASSIFICATION	3.434392381901168E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999719055199	WITHOUT_CLASSIFICATION	2.809448006663568E-8	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999492619352455	WITHOUT_CLASSIFICATION	5.073806475441273E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9994275372981861	WITHOUT_CLASSIFICATION	5.724627018137991E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998812585895385	WITHOUT_CLASSIFICATION	1.1874141046150839E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999564187424468	WITHOUT_CLASSIFICATION	4.358125755331995E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9994285845280815	WITHOUT_CLASSIFICATION	5.714154719184774E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999712704201592	WITHOUT_CLASSIFICATION	2.8729579840887177E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9998545667480397	WITHOUT_CLASSIFICATION	1.4543325196025124E-4	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999588157160753	WITHOUT_CLASSIFICATION	4.11842839247501E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997573528914938	WITHOUT_CLASSIFICATION	2.426471085061775E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999890901312447	WITHOUT_CLASSIFICATION	1.0909868755275272E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.997202958980833	WITHOUT_CLASSIFICATION	0.0027970410191670353	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999821678286127	WITHOUT_CLASSIFICATION	1.7832171387346726E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999739391403222	WITHOUT_CLASSIFICATION	2.60608596777413E-5	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999974207055921	WITHOUT_CLASSIFICATION	2.5792944079101394E-5	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999923715047622	WITHOUT_CLASSIFICATION	7.628495237834585E-6	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999585243365146	WITHOUT_CLASSIFICATION	4.147566348547742E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9988113414513564	WITHOUT_CLASSIFICATION	0.001188658548643566	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9994119305507424	WITHOUT_CLASSIFICATION	5.880694492576785E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999900979273617	WITHOUT_CLASSIFICATION	9.90207263830923E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999940569669891	WITHOUT_CLASSIFICATION	5.9430330109058136E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999327726950077	WITHOUT_CLASSIFICATION	6.72273049922927E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999844026305159	WITHOUT_CLASSIFICATION	1.559736948408861E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999995544791467	WITHOUT_CLASSIFICATION	4.4552085329970105E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999886105408005	WITHOUT_CLASSIFICATION	1.1389459199554162E-5	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999833649600101	WITHOUT_CLASSIFICATION	1.66350399898641E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999878393458976	WITHOUT_CLASSIFICATION	1.216065410238531E-5	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998719448227747	WITHOUT_CLASSIFICATION	1.2805517722522562E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998408598144158	WITHOUT_CLASSIFICATION	1.5914018558422404E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999957679877247	WITHOUT_CLASSIFICATION	4.232012275297436E-6	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9995938801368737	WITHOUT_CLASSIFICATION	4.0611986312633525E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999916658965532	WITHOUT_CLASSIFICATION	8.33410344691689E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9978981490002691	WITHOUT_CLASSIFICATION	0.002101850999730995	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999436426756805	WITHOUT_CLASSIFICATION	5.635732431956017E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998916965292782	WITHOUT_CLASSIFICATION	1.0830347072183969E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997432795983411	WITHOUT_CLASSIFICATION	2.567204016590051E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998879249779098	WITHOUT_CLASSIFICATION	1.1207502209021238E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998905324907909	WITHOUT_CLASSIFICATION	1.0946750920904039E-4	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999242654518361	WITHOUT_CLASSIFICATION	7.57345481639667E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999881449832091	WITHOUT_CLASSIFICATION	1.1855016790843471E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9975845859076421	WITHOUT_CLASSIFICATION	0.002415414092357839	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9996935056055554	WITHOUT_CLASSIFICATION	3.064943944446563E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896404088022	WITHOUT_CLASSIFICATION	1.1035959119779201E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9996935056055554	WITHOUT_CLASSIFICATION	3.064943944446563E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996719814803098	WITHOUT_CLASSIFICATION	3.2801851969020126E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999537287217768	WITHOUT_CLASSIFICATION	4.627127822329784E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9998807790066466	WITHOUT_CLASSIFICATION	1.1922099335338299E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999888810401374	WITHOUT_CLASSIFICATION	1.1118959862663766E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998831684479372	WITHOUT_CLASSIFICATION	1.1683155206277014E-4	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997869920813003	WITHOUT_CLASSIFICATION	2.1300791869981672E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999515274436872	WITHOUT_CLASSIFICATION	4.847255631284818E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9979828731711812	WITHOUT_CLASSIFICATION	0.0020171268288189438	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999934258302846	WITHOUT_CLASSIFICATION	6.574169715436129E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999964931790928	WITHOUT_CLASSIFICATION	3.5068209072645425E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999475054622164	WITHOUT_CLASSIFICATION	5.249453778359843E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998425413505213	WITHOUT_CLASSIFICATION	1.574586494786461E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997848751163911	WITHOUT_CLASSIFICATION	2.1512488360881282E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9484616912962669	WITHOUT_CLASSIFICATION	0.05153830870373313	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999886563400869	WITHOUT_CLASSIFICATION	1.1343659913125546E-5	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997769255967255	WITHOUT_CLASSIFICATION	2.2307440327439516E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999967468454521	WITHOUT_CLASSIFICATION	3.2531545478821666E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999967468454521	WITHOUT_CLASSIFICATION	3.2531545478821666E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999075426418776	WITHOUT_CLASSIFICATION	9.24573581223422E-5	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999178945512631	WITHOUT_CLASSIFICATION	8.210544873687582E-5	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999950322618963	WITHOUT_CLASSIFICATION	4.967738103657349E-6	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9992402214163425	WITHOUT_CLASSIFICATION	7.59778583657466E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998950749129113	WITHOUT_CLASSIFICATION	1.049250870887991E-4	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9995034879554284	WITHOUT_CLASSIFICATION	4.965120445715127E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9971245995232056	WITHOUT_CLASSIFICATION	0.0028754004767944036	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999370985466881	WITHOUT_CLASSIFICATION	6.29014533118594E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999817474046734	WITHOUT_CLASSIFICATION	1.825259532663274E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999467279501223	WITHOUT_CLASSIFICATION	5.327204987764934E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998969514650606	WITHOUT_CLASSIFICATION	1.0304853493942741E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999820047029375	WITHOUT_CLASSIFICATION	1.799529706244822E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999257783427546	WITHOUT_CLASSIFICATION	7.422165724535839E-5	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999029014153474	WITHOUT_CLASSIFICATION	9.709858465261476E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996997589750986	WITHOUT_CLASSIFICATION	3.0024102490138605E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999359428000062	WITHOUT_CLASSIFICATION	6.405719999380037E-5	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999896678760028	WITHOUT_CLASSIFICATION	1.0332123997195032E-4	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.99978248461753	WITHOUT_CLASSIFICATION	2.1751538246981102E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999458876309159	WITHOUT_CLASSIFICATION	5.411236908421068E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999586769088061	WITHOUT_CLASSIFICATION	4.132309119384234E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999774125220052	WITHOUT_CLASSIFICATION	2.2587477994707616E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.999964829764545	WITHOUT_CLASSIFICATION	3.5170235454927586E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999971330033477	WITHOUT_CLASSIFICATION	2.8669966522899424E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999816588635914	WITHOUT_CLASSIFICATION	1.834113640860265E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999057753465384	WITHOUT_CLASSIFICATION	9.422465346160836E-5	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999362370027342	WITHOUT_CLASSIFICATION	6.376299726586503E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998439213093183	WITHOUT_CLASSIFICATION	1.5607869068168844E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991702693041473	WITHOUT_CLASSIFICATION	8.297306958525635E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999920502856673	WITHOUT_CLASSIFICATION	7.949714332796766E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993445599970275	WITHOUT_CLASSIFICATION	6.55440002972583E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999792057971476	WITHOUT_CLASSIFICATION	2.0794202852340876E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.99999626696993	WITHOUT_CLASSIFICATION	3.7330300699406324E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9993610629501262	WITHOUT_CLASSIFICATION	6.389370498738521E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999182751574234	WITHOUT_CLASSIFICATION	8.172484257656153E-5	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999797878627881	WITHOUT_CLASSIFICATION	2.0212137211951805E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999990803212607	WITHOUT_CLASSIFICATION	9.196787393032484E-6	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999804526377161	WITHOUT_CLASSIFICATION	1.9547362283945605E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999825058523111	WITHOUT_CLASSIFICATION	1.7494147688870125E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999398691525451	WITHOUT_CLASSIFICATION	6.0130847455013427E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9979426306208717	WITHOUT_CLASSIFICATION	0.00205736937912818	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997132147728575	WITHOUT_CLASSIFICATION	2.8678522714252366E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640816170067	WITHOUT_CLASSIFICATION	1.3591838299332985E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9996670411960297	WITHOUT_CLASSIFICATION	3.329588039703056E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9551787713066554	WITHOUT_CLASSIFICATION	0.044821228693344525	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9993054236959202	WITHOUT_CLASSIFICATION	6.945763040798284E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9952941712010801	WITHOUT_CLASSIFICATION	0.004705828798919877	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.944562197786615	WITHOUT_CLASSIFICATION	0.055437802213384985	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999987031752783	WITHOUT_CLASSIFICATION	1.296824721629736E-6	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998507600102189	WITHOUT_CLASSIFICATION	1.4923998978110125E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999052357584712	WITHOUT_CLASSIFICATION	9.476424152874846E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998640816170067	WITHOUT_CLASSIFICATION	1.3591838299332985E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999795424433356	WITHOUT_CLASSIFICATION	2.0457556664292895E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9997827506023107	WITHOUT_CLASSIFICATION	2.1724939768926916E-4	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999954390591184	WITHOUT_CLASSIFICATION	4.560940881598618E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999471383435822	WITHOUT_CLASSIFICATION	5.2861656417709936E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998989503129103	WITHOUT_CLASSIFICATION	1.01049687089633E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9998989503129103	WITHOUT_CLASSIFICATION	1.01049687089633E-4	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999807053608221	WITHOUT_CLASSIFICATION	1.9294639177957187E-5	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997926659980615	WITHOUT_CLASSIFICATION	2.0733400193845717E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999869166417155	WITHOUT_CLASSIFICATION	1.3083358284455662E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995357038597068	WITHOUT_CLASSIFICATION	4.642961402932287E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9997992285693412	WITHOUT_CLASSIFICATION	2.0077143065879132E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.99970911438113	WITHOUT_CLASSIFICATION	2.9088561886993143E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999438395757113	WITHOUT_CLASSIFICATION	5.616042428869305E-5	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999989727867137	WITHOUT_CLASSIFICATION	1.0272132862952456E-5	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994332350412666	WITHOUT_CLASSIFICATION	5.667649587334032E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998994322142404	WITHOUT_CLASSIFICATION	1.0056778575960068E-4	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998881559398396	WITHOUT_CLASSIFICATION	1.1184406016040886E-4	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.999777368416224	WITHOUT_CLASSIFICATION	2.2263158377604187E-4	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999120182763082	WITHOUT_CLASSIFICATION	8.798172369174612E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998725088933492	WITHOUT_CLASSIFICATION	1.2749110665071512E-4	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9940191118094406	WITHOUT_CLASSIFICATION	0.005980888190559355	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998972459244013	WITHOUT_CLASSIFICATION	1.0275407559866364E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997596425932241	WITHOUT_CLASSIFICATION	2.4035740677580777E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9886307216161582	WITHOUT_CLASSIFICATION	0.011369278383841884	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998885495001154	WITHOUT_CLASSIFICATION	1.1145049988460218E-4	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999649349404057	WITHOUT_CLASSIFICATION	3.506505959430621E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999525467821082	WITHOUT_CLASSIFICATION	4.7453217891873084E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999985720479332	WITHOUT_CLASSIFICATION	1.4279520668407479E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996323376154151	WITHOUT_CLASSIFICATION	3.676623845848502E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999855071422706	WITHOUT_CLASSIFICATION	1.449285772941956E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998886097383088	WITHOUT_CLASSIFICATION	1.1139026169114579E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999979941346652	WITHOUT_CLASSIFICATION	2.005865334803318E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9999507550960177	WITHOUT_CLASSIFICATION	4.924490398240477E-5	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999805772329806	WITHOUT_CLASSIFICATION	1.9422767019439246E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997684701262332	WITHOUT_CLASSIFICATION	2.3152987376676907E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999748796836114	WITHOUT_CLASSIFICATION	2.5120316388627035E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999549795067565	WITHOUT_CLASSIFICATION	4.502049324357132E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.999905904977873	WITHOUT_CLASSIFICATION	9.409502212701005E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999748796836114	WITHOUT_CLASSIFICATION	2.5120316388627035E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9996654832368858	WITHOUT_CLASSIFICATION	3.345167631141875E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9997684701262332	WITHOUT_CLASSIFICATION	2.3152987376676907E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999689193988512	WITHOUT_CLASSIFICATION	3.108060114874336E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999748796836114	WITHOUT_CLASSIFICATION	2.5120316388627035E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998349047805029	WITHOUT_CLASSIFICATION	1.6509521949710157E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999877333362155	WITHOUT_CLASSIFICATION	1.2266663784560972E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9998969514650606	WITHOUT_CLASSIFICATION	1.0304853493942741E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999542175368742	WITHOUT_CLASSIFICATION	4.578246312577175E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997979373609086	WITHOUT_CLASSIFICATION	2.02062639091531E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998137952590201	WITHOUT_CLASSIFICATION	1.8620474097989567E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998629756726443	WITHOUT_CLASSIFICATION	1.3702432735566397E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999797000974424	WITHOUT_CLASSIFICATION	2.0299902557547658E-5	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999598948658155	WITHOUT_CLASSIFICATION	4.010513418459963E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999897434339916	WITHOUT_CLASSIFICATION	1.025656600837375E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999704183071483	WITHOUT_CLASSIFICATION	2.9581692851762352E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999498366559638	WITHOUT_CLASSIFICATION	5.0163344036178466E-5	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999121918722176	WITHOUT_CLASSIFICATION	8.78081277824119E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999089696299779	WITHOUT_CLASSIFICATION	9.103037002209519E-5	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999404346244364	WITHOUT_CLASSIFICATION	5.956537556363083E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9997756688903866	WITHOUT_CLASSIFICATION	2.2433110961332705E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999853134458233	WITHOUT_CLASSIFICATION	1.4686554176816527E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999173261006432	WITHOUT_CLASSIFICATION	8.267389935678502E-5	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999370326633367	WITHOUT_CLASSIFICATION	6.296733666331883E-5	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.999939817695279	WITHOUT_CLASSIFICATION	6.0182304721016914E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999548127264166	WITHOUT_CLASSIFICATION	4.518727358339212E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999897299827237	WITHOUT_CLASSIFICATION	1.02700172763212E-5	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999743124381464	WITHOUT_CLASSIFICATION	2.56875618536026E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9998776604728742	WITHOUT_CLASSIFICATION	1.2233952712578688E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9995169537391699	WITHOUT_CLASSIFICATION	4.830462608300797E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999153972717645	WITHOUT_CLASSIFICATION	8.460272823556628E-5	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999334406070015	WITHOUT_CLASSIFICATION	6.655939299848125E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998465924121505	WITHOUT_CLASSIFICATION	1.5340758784949927E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997619820672842	WITHOUT_CLASSIFICATION	2.380179327157618E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9984395938328956	WITHOUT_CLASSIFICATION	0.0015604061671043788	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999662602418623	WITHOUT_CLASSIFICATION	3.37397581377503E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999230602595061	WITHOUT_CLASSIFICATION	7.693974049401627E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999990249740258	WITHOUT_CLASSIFICATION	9.75025974190415E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998091224205284	WITHOUT_CLASSIFICATION	1.908775794716001E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999446932484413	WITHOUT_CLASSIFICATION	5.53067515588201E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999112660275552	WITHOUT_CLASSIFICATION	8.873397244474741E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9997521582916965	WITHOUT_CLASSIFICATION	2.478417083035178E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994575355017075	WITHOUT_CLASSIFICATION	5.424644982925702E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999918243373459	WITHOUT_CLASSIFICATION	8.175662654145544E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999826558925644	WITHOUT_CLASSIFICATION	1.734410743557516E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999141582636581	WITHOUT_CLASSIFICATION	8.584173634182133E-5	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999931697882215	WITHOUT_CLASSIFICATION	6.830211778579055E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998814118164143	WITHOUT_CLASSIFICATION	1.1858818358569725E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999992238981544	WITHOUT_CLASSIFICATION	7.761018455816313E-7	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9989407206931216	WITHOUT_CLASSIFICATION	0.00105927930687842	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9998549723985817	WITHOUT_CLASSIFICATION	1.4502760141825858E-4	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998971038843026	WITHOUT_CLASSIFICATION	1.028961156973756E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992617450302329	WITHOUT_CLASSIFICATION	7.382549697671953E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9995445828132904	WITHOUT_CLASSIFICATION	4.554171867095982E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998303213681736	WITHOUT_CLASSIFICATION	1.696786318263928E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998608195826246	WITHOUT_CLASSIFICATION	1.3918041737538212E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999952940910904	WITHOUT_CLASSIFICATION	4.705908909574257E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999791840204074	WITHOUT_CLASSIFICATION	2.08159795925478E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9998920019224375	WITHOUT_CLASSIFICATION	1.0799807756239344E-4	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998898144495947	WITHOUT_CLASSIFICATION	1.1018555040526862E-4	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999492096001582	WITHOUT_CLASSIFICATION	5.079039984187508E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998465924121505	WITHOUT_CLASSIFICATION	1.5340758784949927E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9996328926375139	WITHOUT_CLASSIFICATION	3.6710736248607434E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999878327119969	WITHOUT_CLASSIFICATION	1.216728800320367E-5	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999898788035905	WITHOUT_CLASSIFICATION	1.0121196409584646E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9997947004118878	WITHOUT_CLASSIFICATION	2.0529958811217733E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999956906248314	WITHOUT_CLASSIFICATION	4.309375168546826E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9993305440864994	WITHOUT_CLASSIFICATION	6.694559135007509E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997276885462255	WITHOUT_CLASSIFICATION	2.7231145377451993E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999868329620145	WITHOUT_CLASSIFICATION	1.3167037985429012E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999519978953475	WITHOUT_CLASSIFICATION	4.800210465244274E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998957322780536	WITHOUT_CLASSIFICATION	1.0426772194638632E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995931931397007	WITHOUT_CLASSIFICATION	4.0680686029930614E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999920502856673	WITHOUT_CLASSIFICATION	7.949714332796766E-6	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999959859567237	WITHOUT_CLASSIFICATION	4.014043276354038E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999798725807528	WITHOUT_CLASSIFICATION	2.0127419247202374E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996719814803098	WITHOUT_CLASSIFICATION	3.2801851969020126E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999087706861459	WITHOUT_CLASSIFICATION	9.122931385410734E-5	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9994830521633894	WITHOUT_CLASSIFICATION	5.169478366105887E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998439923155488	WITHOUT_CLASSIFICATION	1.5600768445129815E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999970103714293	WITHOUT_CLASSIFICATION	2.9896285707253522E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999832367713091	WITHOUT_CLASSIFICATION	1.6763228690949738E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999572151935049	WITHOUT_CLASSIFICATION	4.2784806495058564E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999572151935049	WITHOUT_CLASSIFICATION	4.2784806495058564E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999749346164709	WITHOUT_CLASSIFICATION	2.5065383529037313E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999853968975682	WITHOUT_CLASSIFICATION	1.4603102431748409E-5	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999706802029413	WITHOUT_CLASSIFICATION	2.9319797058711386E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999324184561904	WITHOUT_CLASSIFICATION	6.758154380961193E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999281742090542	WITHOUT_CLASSIFICATION	7.182579094580126E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999447185384248	WITHOUT_CLASSIFICATION	5.528146157518732E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999263667938119	WITHOUT_CLASSIFICATION	7.363320618808464E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994468256099011	WITHOUT_CLASSIFICATION	5.531743900988884E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994468256099011	WITHOUT_CLASSIFICATION	5.531743900988884E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9997671246436542	WITHOUT_CLASSIFICATION	2.3287535634588754E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999279280546696	WITHOUT_CLASSIFICATION	7.207194533042364E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998356981368611	WITHOUT_CLASSIFICATION	1.643018631388981E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999199727290145	WITHOUT_CLASSIFICATION	8.002727098557081E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999199727290145	WITHOUT_CLASSIFICATION	8.002727098557081E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999199727290145	WITHOUT_CLASSIFICATION	8.002727098557081E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999836726303624	WITHOUT_CLASSIFICATION	1.6327369637632807E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999282943184751	WITHOUT_CLASSIFICATION	7.170568152499596E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999961435684676	WITHOUT_CLASSIFICATION	3.856431532419607E-6	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998553619168608	WITHOUT_CLASSIFICATION	1.4463808313921922E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999337254480898	WITHOUT_CLASSIFICATION	6.627455191022052E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999846698168093	WITHOUT_CLASSIFICATION	1.533018319059023E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999860875676413	WITHOUT_CLASSIFICATION	1.3912432358818838E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9751279912628864	WITHOUT_CLASSIFICATION	0.02487200873711355	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998279933400109	WITHOUT_CLASSIFICATION	1.7200665998912321E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999855482677573	WITHOUT_CLASSIFICATION	1.4451732242802569E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.999889639047888	WITHOUT_CLASSIFICATION	1.1036095211212767E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999480501946644	WITHOUT_CLASSIFICATION	5.194980533562813E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9977785548999663	WITHOUT_CLASSIFICATION	0.0022214451000337593	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999805239314504	WITHOUT_CLASSIFICATION	1.9476068549579568E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999689718128867	WITHOUT_CLASSIFICATION	3.102818711328315E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999888887531232	WITHOUT_CLASSIFICATION	1.1111246876800057E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999730830645476	WITHOUT_CLASSIFICATION	2.6916935452477813E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999433773318603	WITHOUT_CLASSIFICATION	5.662266813976984E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999572151935049	WITHOUT_CLASSIFICATION	4.2784806495058564E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999808186689764	WITHOUT_CLASSIFICATION	1.918133102357314E-5	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9992008761894078	WITHOUT_CLASSIFICATION	7.991238105921502E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999772363962376	WITHOUT_CLASSIFICATION	2.2763603762390809E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999351064982533	WITHOUT_CLASSIFICATION	6.489350174669091E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999150465645158	WITHOUT_CLASSIFICATION	8.495343548419813E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999707585092286	WITHOUT_CLASSIFICATION	2.9241490771350313E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999815587621556	WITHOUT_CLASSIFICATION	1.8441237844423713E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998419454832287	WITHOUT_CLASSIFICATION	1.5805451677127806E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998914394358659	WITHOUT_CLASSIFICATION	1.085605641340861E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999227167453651	WITHOUT_CLASSIFICATION	7.728325463476805E-5	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997269472265071	WITHOUT_CLASSIFICATION	2.7305277349282006E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999348479830672	WITHOUT_CLASSIFICATION	6.515201693281613E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999886028916175	WITHOUT_CLASSIFICATION	1.1397108382597913E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999934195393638	WITHOUT_CLASSIFICATION	6.580460636127589E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999626117655186	WITHOUT_CLASSIFICATION	3.7388234481312664E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9142898282563829	WITHOUT_CLASSIFICATION	0.08571017174361698	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9989573817051431	WITHOUT_CLASSIFICATION	0.0010426182948568845	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999864149771878	WITHOUT_CLASSIFICATION	1.3585022812140915E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999964115921061	WITHOUT_CLASSIFICATION	3.588407893888968E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999964115921061	WITHOUT_CLASSIFICATION	3.588407893888968E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999437071714272	WITHOUT_CLASSIFICATION	5.629282857271872E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999750946211184	WITHOUT_CLASSIFICATION	2.4905378881600084E-5	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999382791444195	WITHOUT_CLASSIFICATION	6.1720855580493E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999328508763956	WITHOUT_CLASSIFICATION	6.714912360435225E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997814442834938	WITHOUT_CLASSIFICATION	2.1855571650621246E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999770061411688	WITHOUT_CLASSIFICATION	2.299385883127511E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998375881075715	WITHOUT_CLASSIFICATION	1.6241189242845544E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999012694468454	WITHOUT_CLASSIFICATION	9.873055315450869E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999700260845207	WITHOUT_CLASSIFICATION	2.9973915479366715E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999564146123897	WITHOUT_CLASSIFICATION	4.35853876102842E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9995950690995156	WITHOUT_CLASSIFICATION	4.049309004843884E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999920502856673	WITHOUT_CLASSIFICATION	7.949714332796766E-6	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999957775940844	WITHOUT_CLASSIFICATION	4.2224059155895485E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999379373222749	WITHOUT_CLASSIFICATION	6.206267772511926E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999832856569297	WITHOUT_CLASSIFICATION	1.671434307020338E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999454457883677	WITHOUT_CLASSIFICATION	5.455421163229072E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767098557028	WITHOUT_CLASSIFICATION	2.329014429733514E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767098557028	WITHOUT_CLASSIFICATION	2.329014429733514E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997578918407158	WITHOUT_CLASSIFICATION	2.4210815928425554E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9934265197564193	WITHOUT_CLASSIFICATION	0.006573480243580717	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9994926380492978	WITHOUT_CLASSIFICATION	5.073619507022473E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9996662392761417	WITHOUT_CLASSIFICATION	3.337607238582314E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.999809083054613	WITHOUT_CLASSIFICATION	1.90916945387029E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996392645292589	WITHOUT_CLASSIFICATION	3.607354707410526E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999759949085827	WITHOUT_CLASSIFICATION	2.400509141732811E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985721597617645	WITHOUT_CLASSIFICATION	0.0014278402382355067	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995239331487251	WITHOUT_CLASSIFICATION	4.760668512748896E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9998766817097495	WITHOUT_CLASSIFICATION	1.2331829025045787E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999635600187581	WITHOUT_CLASSIFICATION	3.6439981241950175E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9985721597617645	WITHOUT_CLASSIFICATION	0.0014278402382355067	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9978412479935475	WITHOUT_CLASSIFICATION	0.0021587520064525957	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998723213891957	WITHOUT_CLASSIFICATION	1.2767861080439073E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999410920099668	WITHOUT_CLASSIFICATION	5.89079900331154E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9996878510727282	WITHOUT_CLASSIFICATION	3.1214892727184567E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998531714016342	WITHOUT_CLASSIFICATION	1.4682859836571502E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999947294114073	WITHOUT_CLASSIFICATION	5.2705885926268934E-6	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999695842170003	WITHOUT_CLASSIFICATION	3.0415782999615994E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999572359542468	WITHOUT_CLASSIFICATION	4.2764045753236634E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998431315003261	WITHOUT_CLASSIFICATION	1.5686849967389588E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9973975980019316	WITHOUT_CLASSIFICATION	0.0026024019980683912	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999907433646434	WITHOUT_CLASSIFICATION	9.256635356602935E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998493359045157	WITHOUT_CLASSIFICATION	1.5066409548422803E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999926640397011	WITHOUT_CLASSIFICATION	7.335960298894011E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999889245640486	WITHOUT_CLASSIFICATION	1.1075435951337058E-5	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999518536742996	WITHOUT_CLASSIFICATION	4.814632570023459E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999340625584665	WITHOUT_CLASSIFICATION	6.593744153345197E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999587375476382	WITHOUT_CLASSIFICATION	4.126245236174493E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.999650430201831	WITHOUT_CLASSIFICATION	3.495697981690509E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.999650430201831	WITHOUT_CLASSIFICATION	3.495697981690509E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999695842170003	WITHOUT_CLASSIFICATION	3.0415782999615994E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9996383127323589	WITHOUT_CLASSIFICATION	3.6168726764108363E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9996037723989714	WITHOUT_CLASSIFICATION	3.962276010285585E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9985543732110861	WITHOUT_CLASSIFICATION	0.001445626788913974	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999897768515459	WITHOUT_CLASSIFICATION	1.0223148454151587E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999840050848318	WITHOUT_CLASSIFICATION	1.599491516826575E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999618232819487	WITHOUT_CLASSIFICATION	3.8176718051310335E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999184033003914	WITHOUT_CLASSIFICATION	8.15966996085818E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9989406264242069	WITHOUT_CLASSIFICATION	0.0010593735757930842	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999942344631477	WITHOUT_CLASSIFICATION	5.765536852260129E-6	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999166309633614	WITHOUT_CLASSIFICATION	8.336903663864293E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999865611178441	WITHOUT_CLASSIFICATION	1.3438882155884027E-5	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9989046145885363	WITHOUT_CLASSIFICATION	0.0010953854114637274	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9995730673783197	WITHOUT_CLASSIFICATION	4.269326216802861E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999994662366841	WITHOUT_CLASSIFICATION	5.337633158701917E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999569299687946	WITHOUT_CLASSIFICATION	4.307003120543654E-5	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999900710446213	WITHOUT_CLASSIFICATION	9.928955378644522E-6	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999949180634243	WITHOUT_CLASSIFICATION	5.081936575764838E-6	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9998881201589801	WITHOUT_CLASSIFICATION	1.1187984101987176E-4	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999982487580592	WITHOUT_CLASSIFICATION	1.7512419407919772E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999973571963035	WITHOUT_CLASSIFICATION	2.6428036964947225E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999801624215318	WITHOUT_CLASSIFICATION	1.98375784683043E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999478143337174	WITHOUT_CLASSIFICATION	5.2185666282761896E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999947365414475	WITHOUT_CLASSIFICATION	5.2634585524844895E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999932702113051	WITHOUT_CLASSIFICATION	6.7297886949590854E-6	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999970657026529	WITHOUT_CLASSIFICATION	2.934297347069103E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999355373929971	WITHOUT_CLASSIFICATION	6.446260700291471E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9998957825854734	WITHOUT_CLASSIFICATION	1.042174145266472E-4	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999752432644436	WITHOUT_CLASSIFICATION	2.475673555628688E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999956892106221	WITHOUT_CLASSIFICATION	4.310789377897824E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9995532799649834	WITHOUT_CLASSIFICATION	4.467200350165624E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999569299687946	WITHOUT_CLASSIFICATION	4.307003120543654E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999784606901901	WITHOUT_CLASSIFICATION	2.1539309809798873E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9998338700295677	WITHOUT_CLASSIFICATION	1.6612997043227595E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999858812336715	WITHOUT_CLASSIFICATION	1.4118766328476448E-5	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9998832786885388	WITHOUT_CLASSIFICATION	1.1672131146122157E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996641976451355	WITHOUT_CLASSIFICATION	3.358023548644671E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9995924801635218	WITHOUT_CLASSIFICATION	4.0751983647828335E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999563331829133	WITHOUT_CLASSIFICATION	4.366681708670455E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998727588346891	WITHOUT_CLASSIFICATION	1.2724116531088266E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9980343371500922	WITHOUT_CLASSIFICATION	0.001965662849907851	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999661910407405	WITHOUT_CLASSIFICATION	3.380895925955763E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9994207041919856	WITHOUT_CLASSIFICATION	5.792958080143587E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5599121519326965	WITHOUT_CLASSIFICATION	0.4400878480673036	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999488854919307	WITHOUT_CLASSIFICATION	5.111450806925562E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998344874880009	WITHOUT_CLASSIFICATION	1.6551251199910664E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998953736925036	WITHOUT_CLASSIFICATION	1.0462630749638221E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999305460638139	WITHOUT_CLASSIFICATION	6.945393618610725E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999312952988087	WITHOUT_CLASSIFICATION	6.870470119130727E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999849418115023	WITHOUT_CLASSIFICATION	1.5058188497736414E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999921150089828	WITHOUT_CLASSIFICATION	7.88499101720431E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9997435327002758	WITHOUT_CLASSIFICATION	2.564672997241588E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9995239331487251	WITHOUT_CLASSIFICATION	4.760668512748896E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996636489894	WITHOUT_CLASSIFICATION	3.363510104998267E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999569299687946	WITHOUT_CLASSIFICATION	4.307003120543654E-5	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9953016584732967	WITHOUT_CLASSIFICATION	0.004698341526703373	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998172247606211	WITHOUT_CLASSIFICATION	1.8277523937894902E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999969665905492	WITHOUT_CLASSIFICATION	3.033409450801075E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999695790047454	WITHOUT_CLASSIFICATION	3.042099525464245E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999103709890897	WITHOUT_CLASSIFICATION	8.962901091024147E-5	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999976175558459	WITHOUT_CLASSIFICATION	2.382444154144902E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9983331423028866	WITHOUT_CLASSIFICATION	0.0016668576971134808	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999991558812901	WITHOUT_CLASSIFICATION	8.441187098936398E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9875305669798263	WITHOUT_CLASSIFICATION	0.012469433020173639	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998564479583744	WITHOUT_CLASSIFICATION	1.4355204162568708E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999915971479588	WITHOUT_CLASSIFICATION	8.402852041220209E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999966044160197	WITHOUT_CLASSIFICATION	3.3955839804063133E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996424748468794	WITHOUT_CLASSIFICATION	3.575251531205812E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996424748468794	WITHOUT_CLASSIFICATION	3.575251531205812E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999954972950658	WITHOUT_CLASSIFICATION	4.502704934239908E-6	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998860111107436	WITHOUT_CLASSIFICATION	1.139888892564158E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999820756781772	WITHOUT_CLASSIFICATION	1.79243218228374E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999900420985635	WITHOUT_CLASSIFICATION	9.957901436527053E-6	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999269233169737	WITHOUT_CLASSIFICATION	7.30766830262568E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998840743687432	WITHOUT_CLASSIFICATION	1.159256312567859E-4	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9992931521787778	WITHOUT_CLASSIFICATION	7.068478212222381E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998678870265333	WITHOUT_CLASSIFICATION	1.3211297346675405E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999685360859294	WITHOUT_CLASSIFICATION	3.146391407061549E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.999939148399472	WITHOUT_CLASSIFICATION	6.0851600528136215E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.999939148399472	WITHOUT_CLASSIFICATION	6.0851600528136215E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999074841071399	WITHOUT_CLASSIFICATION	9.251589286004263E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999393624248654	WITHOUT_CLASSIFICATION	6.0637575134659735E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999259363214519	WITHOUT_CLASSIFICATION	7.406367854804619E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9988809088699037	WITHOUT_CLASSIFICATION	0.0011190911300963393	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999557104300859	WITHOUT_CLASSIFICATION	4.428956991399982E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9997841111100972	WITHOUT_CLASSIFICATION	2.1588888990279587E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999990715114084	WITHOUT_CLASSIFICATION	9.284885916063926E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9992191278401161	WITHOUT_CLASSIFICATION	7.808721598837861E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999863494790406	WITHOUT_CLASSIFICATION	1.3650520959398616E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990802513279042	WITHOUT_CLASSIFICATION	9.197486720957045E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999056605523362	WITHOUT_CLASSIFICATION	9.433944766386943E-5	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999934004385421	WITHOUT_CLASSIFICATION	6.599561457894493E-5	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999898025355497	WITHOUT_CLASSIFICATION	1.0197464450386912E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999774363580933	WITHOUT_CLASSIFICATION	2.2563641906644928E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998601300547503	WITHOUT_CLASSIFICATION	1.398699452498068E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999400600301187	WITHOUT_CLASSIFICATION	5.993996988140121E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996142372307182	WITHOUT_CLASSIFICATION	3.857627692818336E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999844164071446	WITHOUT_CLASSIFICATION	1.5583592855397243E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999053146728462	WITHOUT_CLASSIFICATION	9.468532715375884E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998427977623874	WITHOUT_CLASSIFICATION	1.5720223761265018E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999197116737056	WITHOUT_CLASSIFICATION	8.028832629436575E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999875805206542	WITHOUT_CLASSIFICATION	1.241947934580064E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999567504409475	WITHOUT_CLASSIFICATION	4.3249559052496996E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999528471708995	WITHOUT_CLASSIFICATION	4.71528291005986E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997151430834419	WITHOUT_CLASSIFICATION	2.8485691655810263E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999433016525927	WITHOUT_CLASSIFICATION	5.6698347407298375E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999246607633567	WITHOUT_CLASSIFICATION	7.533923664317167E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999098692764672	WITHOUT_CLASSIFICATION	9.013072353277982E-5	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999887787694747	WITHOUT_CLASSIFICATION	1.1221230525312435E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999844429462287	WITHOUT_CLASSIFICATION	1.5557053771393232E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999137356233125	WITHOUT_CLASSIFICATION	8.626437668742106E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999357025203347	WITHOUT_CLASSIFICATION	6.429747966531015E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388723675979	WITHOUT_CLASSIFICATION	6.11276324020271E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9918972730583916	WITHOUT_CLASSIFICATION	0.008102726941608442	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999686880563334	WITHOUT_CLASSIFICATION	3.131194366651679E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999117120159	WITHOUT_CLASSIFICATION	8.828798408973489E-8	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9998645382464229	WITHOUT_CLASSIFICATION	1.3546175357717524E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186144952356	WITHOUT_CLASSIFICATION	8.138550476439102E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999975623902807	WITHOUT_CLASSIFICATION	2.4376097192976795E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999134486240429	WITHOUT_CLASSIFICATION	8.655137595709088E-5	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998188289580797	WITHOUT_CLASSIFICATION	1.8117104192025345E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999765488352995	WITHOUT_CLASSIFICATION	2.345116470044278E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9992760143978494	WITHOUT_CLASSIFICATION	7.239856021506264E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9994584778237262	WITHOUT_CLASSIFICATION	5.415221762737547E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9997963030231	WITHOUT_CLASSIFICATION	2.036969769000701E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9998901004475689	WITHOUT_CLASSIFICATION	1.0989955243117863E-4	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999149520552665	WITHOUT_CLASSIFICATION	8.504794473355719E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999246416020012	WITHOUT_CLASSIFICATION	7.535839799874478E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9990770953063818	WITHOUT_CLASSIFICATION	9.22904693618128E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999755997533486	WITHOUT_CLASSIFICATION	2.4400246651378572E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998999778156845	WITHOUT_CLASSIFICATION	1.0002218431549688E-4	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999622549497886	WITHOUT_CLASSIFICATION	3.7745050211360025E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997768665015256	WITHOUT_CLASSIFICATION	2.2313349847431768E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999633443839837	WITHOUT_CLASSIFICATION	3.665561601622457E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998926657489061	WITHOUT_CLASSIFICATION	1.0733425109384552E-4	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999854354306059	WITHOUT_CLASSIFICATION	1.456456939408508E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999359721946625	WITHOUT_CLASSIFICATION	6.402780533753856E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999854354306059	WITHOUT_CLASSIFICATION	1.456456939408508E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9985062037145425	WITHOUT_CLASSIFICATION	0.0014937962854575815	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9968098643257443	WITHOUT_CLASSIFICATION	0.003190135674255739	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999959304712255	WITHOUT_CLASSIFICATION	4.069528774506515E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999902819309872	WITHOUT_CLASSIFICATION	9.718069012865971E-6	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998853577680556	WITHOUT_CLASSIFICATION	1.1464223194439536E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999959304712255	WITHOUT_CLASSIFICATION	4.069528774506515E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999962449466754	WITHOUT_CLASSIFICATION	3.755053324595341E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997744303395495	WITHOUT_CLASSIFICATION	2.255696604505903E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999452216823562	WITHOUT_CLASSIFICATION	5.477831764381634E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999700370825906	WITHOUT_CLASSIFICATION	2.996291740950426E-5	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999878582533198	WITHOUT_CLASSIFICATION	1.2141746680136877E-5	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999711240601465	WITHOUT_CLASSIFICATION	2.8875939853518485E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999985454595205	WITHOUT_CLASSIFICATION	1.4545404794892342E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998238102234974	WITHOUT_CLASSIFICATION	1.7618977650250383E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999860509535545	WITHOUT_CLASSIFICATION	1.394904644541994E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999219916992014	WITHOUT_CLASSIFICATION	7.800830079857591E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9991514697639918	WITHOUT_CLASSIFICATION	8.485302360083071E-4	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999253724055087	WITHOUT_CLASSIFICATION	7.462759449119545E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998013674063734	WITHOUT_CLASSIFICATION	1.9863259362667027E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999492803361999	WITHOUT_CLASSIFICATION	5.071966380016649E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999146414118559	WITHOUT_CLASSIFICATION	8.535858814416948E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998822142344503	WITHOUT_CLASSIFICATION	1.1778576554968588E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991166465344961	WITHOUT_CLASSIFICATION	8.833534655039106E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997151286689073	WITHOUT_CLASSIFICATION	2.8487133109272406E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998842192022973	WITHOUT_CLASSIFICATION	1.1578079770277137E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9956650554825239	WITHOUT_CLASSIFICATION	0.004334944517476012	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996006868763393	WITHOUT_CLASSIFICATION	3.993131236606916E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999192693810325	WITHOUT_CLASSIFICATION	8.073061896763002E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999025167047911	WITHOUT_CLASSIFICATION	9.74832952088982E-5	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996438865230379	WITHOUT_CLASSIFICATION	3.56113476962017E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999524676905588	WITHOUT_CLASSIFICATION	4.75323094411915E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9331499533387507	WITHOUT_CLASSIFICATION	0.06685004666124926	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9920293080771464	WITHOUT_CLASSIFICATION	0.007970691922853679	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999839905178264	WITHOUT_CLASSIFICATION	1.6009482173601395E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.9999325433787422	WITHOUT_CLASSIFICATION	6.745662125783241E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9997511818165892	WITHOUT_CLASSIFICATION	2.4881818341084347E-4	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999025167047911	WITHOUT_CLASSIFICATION	9.74832952088982E-5	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998955704571593	WITHOUT_CLASSIFICATION	1.0442954284070508E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999859760432833	WITHOUT_CLASSIFICATION	1.4023956716567345E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999438309298805	WITHOUT_CLASSIFICATION	5.616907011959878E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9761427385911536	WITHOUT_CLASSIFICATION	0.02385726140884647	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9956650554825239	WITHOUT_CLASSIFICATION	0.004334944517476012	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.99995677034917	WITHOUT_CLASSIFICATION	4.3229650830034175E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997708955363674	WITHOUT_CLASSIFICATION	2.2910446363259263E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997893466863575	WITHOUT_CLASSIFICATION	2.1065331364235516E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9998471366730712	WITHOUT_CLASSIFICATION	1.5286332692881425E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999931443383056	WITHOUT_CLASSIFICATION	6.855661694375699E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999894235136991	WITHOUT_CLASSIFICATION	1.057648630075277E-5	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9773795837428031	WITHOUT_CLASSIFICATION	0.022620416257196914	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998839523805712	WITHOUT_CLASSIFICATION	1.1604761942888891E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9994749057965383	WITHOUT_CLASSIFICATION	5.250942034617647E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999682529013102	WITHOUT_CLASSIFICATION	3.1747098689808E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999934328583356	WITHOUT_CLASSIFICATION	6.567141664455898E-6	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999867865274912	WITHOUT_CLASSIFICATION	1.3213472508828021E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999195138405882	WITHOUT_CLASSIFICATION	8.048615941181779E-5	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999911772806261	WITHOUT_CLASSIFICATION	8.822719373906159E-6	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999509619744801	WITHOUT_CLASSIFICATION	4.903802551982011E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999417121480946	WITHOUT_CLASSIFICATION	5.8287851905420555E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.996538172103275	WITHOUT_CLASSIFICATION	0.0034618278967250395	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994734874696621	WITHOUT_CLASSIFICATION	5.265125303379062E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9984516058944732	WITHOUT_CLASSIFICATION	0.0015483941055267204	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.99919546679998	WITHOUT_CLASSIFICATION	8.045332000201543E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999569042276505	WITHOUT_CLASSIFICATION	4.309577234940056E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999569042276505	WITHOUT_CLASSIFICATION	4.309577234940056E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999658390795658	WITHOUT_CLASSIFICATION	3.416092043410052E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999569042276505	WITHOUT_CLASSIFICATION	4.309577234940056E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999569042276505	WITHOUT_CLASSIFICATION	4.309577234940056E-5	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9973574160668168	WITHOUT_CLASSIFICATION	0.002642583933183134	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9996699224108552	WITHOUT_CLASSIFICATION	3.3007758914476923E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998786085935517	WITHOUT_CLASSIFICATION	1.2139140644832999E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998786085935517	WITHOUT_CLASSIFICATION	1.2139140644832999E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987771090623334	WITHOUT_CLASSIFICATION	0.0012228909376665003	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999951616747934	WITHOUT_CLASSIFICATION	4.838325206668876E-6	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9985502548044434	WITHOUT_CLASSIFICATION	0.0014497451955566328	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998448412175734	WITHOUT_CLASSIFICATION	1.5515878242661647E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998784798297786	WITHOUT_CLASSIFICATION	1.2152017022141184E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999212901110831	WITHOUT_CLASSIFICATION	7.870988891698148E-5	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997725202502222	WITHOUT_CLASSIFICATION	2.2747974977785506E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999416775504006	WITHOUT_CLASSIFICATION	5.832244959934125E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999141698246081	WITHOUT_CLASSIFICATION	8.583017539189591E-5	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999938494541338	WITHOUT_CLASSIFICATION	6.150545866198848E-5	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999324201549217	WITHOUT_CLASSIFICATION	6.757984507835876E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9935235225795327	WITHOUT_CLASSIFICATION	0.006476477420467259	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999881449832091	WITHOUT_CLASSIFICATION	1.1855016790843471E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999744597765021	WITHOUT_CLASSIFICATION	2.554022349776283E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9994196336251752	WITHOUT_CLASSIFICATION	5.803663748248427E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998950879572734	WITHOUT_CLASSIFICATION	1.0491204272658631E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997962870220396	WITHOUT_CLASSIFICATION	2.0371297796037606E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999756894798197	WITHOUT_CLASSIFICATION	2.431052018030847E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999881449832091	WITHOUT_CLASSIFICATION	1.1855016790843471E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9996006868763393	WITHOUT_CLASSIFICATION	3.993131236606916E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9997886274486486	WITHOUT_CLASSIFICATION	2.1137255135134003E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996939289384525	WITHOUT_CLASSIFICATION	3.0607106154742627E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995084101081364	WITHOUT_CLASSIFICATION	4.915898918636292E-4	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9997675915091172	WITHOUT_CLASSIFICATION	2.324084908828418E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998899560695342	WITHOUT_CLASSIFICATION	1.1004393046573632E-4	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999533339402003	WITHOUT_CLASSIFICATION	4.6666059799701856E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997581311688098	WITHOUT_CLASSIFICATION	2.418688311901835E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999438380656646	WITHOUT_CLASSIFICATION	5.6161934335509975E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999993184642706	WITHOUT_CLASSIFICATION	6.815357293738152E-7	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999242996950495	WITHOUT_CLASSIFICATION	7.570030495056608E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999384749812604	WITHOUT_CLASSIFICATION	6.152501873953753E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997250118648483	WITHOUT_CLASSIFICATION	2.7498813515166296E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998913829666334	WITHOUT_CLASSIFICATION	1.0861703336664081E-4	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9952696382779821	WITHOUT_CLASSIFICATION	0.004730361722017882	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999789546318527	WITHOUT_CLASSIFICATION	2.104536814735767E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999428738155408	WITHOUT_CLASSIFICATION	5.712618445923416E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998802916880773	WITHOUT_CLASSIFICATION	1.1970831192258658E-4	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998573994137736	WITHOUT_CLASSIFICATION	1.426005862263112E-4	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997804120074812	WITHOUT_CLASSIFICATION	2.1958799251865652E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999401027832452	WITHOUT_CLASSIFICATION	5.989721675477335E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998701238899308	WITHOUT_CLASSIFICATION	1.2987611006926727E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999992813205788	WITHOUT_CLASSIFICATION	7.186794211534494E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999438380656646	WITHOUT_CLASSIFICATION	5.6161934335509975E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999395104036249	WITHOUT_CLASSIFICATION	6.0489596375147084E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999189891615965	WITHOUT_CLASSIFICATION	8.101083840354121E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999841940069188	WITHOUT_CLASSIFICATION	1.5805993081239243E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999117659851774	WITHOUT_CLASSIFICATION	8.823401482262263E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999003584929511	WITHOUT_CLASSIFICATION	9.9641507048925E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999272266441444	WITHOUT_CLASSIFICATION	7.277335585561713E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9998432491622398	WITHOUT_CLASSIFICATION	1.5675083776030632E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999270788085627	WITHOUT_CLASSIFICATION	7.292119143739736E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999059785396776	WITHOUT_CLASSIFICATION	9.402146032238008E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999932922664002	WITHOUT_CLASSIFICATION	6.7077335997558E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999770017805731	WITHOUT_CLASSIFICATION	2.299821942697716E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999833985620347	WITHOUT_CLASSIFICATION	1.660143796531765E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999116287497436	WITHOUT_CLASSIFICATION	8.837125025634501E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999704407018536	WITHOUT_CLASSIFICATION	2.9559298146485977E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999362889172946	WITHOUT_CLASSIFICATION	6.371108270539424E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999932922664002	WITHOUT_CLASSIFICATION	6.7077335997558E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999558604081527	WITHOUT_CLASSIFICATION	4.413959184734566E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9994384472780747	WITHOUT_CLASSIFICATION	5.615527219251524E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998764468372979	WITHOUT_CLASSIFICATION	1.235531627021259E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999742791928787	WITHOUT_CLASSIFICATION	2.572080712137842E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999256088837117	WITHOUT_CLASSIFICATION	7.439111628826842E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999834051342356	WITHOUT_CLASSIFICATION	1.6594865764511125E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998849142756682	WITHOUT_CLASSIFICATION	1.1508572433185265E-4	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998826872361557	WITHOUT_CLASSIFICATION	1.1731276384433359E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998781253023468	WITHOUT_CLASSIFICATION	1.2187469765325779E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997326203152166	WITHOUT_CLASSIFICATION	2.673796847833649E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997326203152166	WITHOUT_CLASSIFICATION	2.673796847833649E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997326203152166	WITHOUT_CLASSIFICATION	2.673796847833649E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99996407084843	WITHOUT_CLASSIFICATION	3.592915157008945E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.99996407084843	WITHOUT_CLASSIFICATION	3.592915157008945E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9984523125927488	WITHOUT_CLASSIFICATION	0.0015476874072510795	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999966828095175	WITHOUT_CLASSIFICATION	3.3171904825951243E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9997691682802295	WITHOUT_CLASSIFICATION	2.3083171977049727E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998025077040148	WITHOUT_CLASSIFICATION	1.9749229598524392E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9990393984603673	WITHOUT_CLASSIFICATION	9.606015396327941E-4	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998600837282825	WITHOUT_CLASSIFICATION	1.3991627171751686E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998766849414795	WITHOUT_CLASSIFICATION	1.233150585205797E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994085023246089	WITHOUT_CLASSIFICATION	5.914976753911672E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631623766098	WITHOUT_CLASSIFICATION	3.683762339025939E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998600837282825	WITHOUT_CLASSIFICATION	1.3991627171751686E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998766849414795	WITHOUT_CLASSIFICATION	1.233150585205797E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999770275501827	WITHOUT_CLASSIFICATION	2.29724498173295E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999729795824273	WITHOUT_CLASSIFICATION	2.7020417572826643E-5	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999947610119297	WITHOUT_CLASSIFICATION	5.238988070273877E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9101152527116433	WITHOUT_CLASSIFICATION	0.0898847472883567	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999029041816886	WITHOUT_CLASSIFICATION	9.709581831137773E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999382268641546	WITHOUT_CLASSIFICATION	6.177313584543479E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999899814419777	WITHOUT_CLASSIFICATION	1.0018558022363695E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999790015102619	WITHOUT_CLASSIFICATION	2.099848973816991E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996503880737952	WITHOUT_CLASSIFICATION	3.4961192620476636E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9959276896512232	WITHOUT_CLASSIFICATION	0.004072310348776821	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999817835692344	WITHOUT_CLASSIFICATION	1.8216430765610614E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978802608916	WITHOUT_CLASSIFICATION	2.119739108400157E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9998905489193086	WITHOUT_CLASSIFICATION	1.0945108069134519E-4	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998647249356577	WITHOUT_CLASSIFICATION	1.3527506434239176E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999121918722176	WITHOUT_CLASSIFICATION	8.78081277824119E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999155741025337	WITHOUT_CLASSIFICATION	8.442589746622592E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998832087407049	WITHOUT_CLASSIFICATION	1.1679125929511893E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9992158601747351	WITHOUT_CLASSIFICATION	7.841398252649853E-4	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999944750237234	WITHOUT_CLASSIFICATION	5.524976276554347E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999563541495479	WITHOUT_CLASSIFICATION	4.364585045212787E-5	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999792613797185	WITHOUT_CLASSIFICATION	2.073862028156298E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999984509425451	WITHOUT_CLASSIFICATION	1.5490574548707399E-6	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9996336927062176	WITHOUT_CLASSIFICATION	3.6630729378246126E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998577073019549	WITHOUT_CLASSIFICATION	1.422926980450793E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998608607849698	WITHOUT_CLASSIFICATION	1.3913921503013555E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999999305018066	WITHOUT_CLASSIFICATION	6.949819340915438E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998730964884139	WITHOUT_CLASSIFICATION	1.2690351158596347E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996250617512871	WITHOUT_CLASSIFICATION	3.7493824871295004E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999534377906417	WITHOUT_CLASSIFICATION	4.6562209358249594E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999534377906417	WITHOUT_CLASSIFICATION	4.6562209358249594E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998052541962481	WITHOUT_CLASSIFICATION	1.9474580375188454E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9992721282223768	WITHOUT_CLASSIFICATION	7.278717776231935E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999516531532122	WITHOUT_CLASSIFICATION	4.834684678772032E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999920502856673	WITHOUT_CLASSIFICATION	7.949714332796766E-6	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999817343667906	WITHOUT_CLASSIFICATION	1.826563320936248E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999839756173159	WITHOUT_CLASSIFICATION	1.602438268416335E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999907744709767	WITHOUT_CLASSIFICATION	9.225529023248047E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999873355912349	WITHOUT_CLASSIFICATION	1.2664408765176819E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999945683317929	WITHOUT_CLASSIFICATION	5.431668207081273E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998973238409131	WITHOUT_CLASSIFICATION	1.0267615908695008E-4	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998941669686989	WITHOUT_CLASSIFICATION	1.0583303130101168E-4	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998948198430132	WITHOUT_CLASSIFICATION	1.051801569868008E-4	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9992693087763699	WITHOUT_CLASSIFICATION	7.306912236301929E-4	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9996754150937229	WITHOUT_CLASSIFICATION	3.245849062771226E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992274193370182	WITHOUT_CLASSIFICATION	7.725806629819154E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995029405477632	WITHOUT_CLASSIFICATION	4.970594522366718E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999812172754352	WITHOUT_CLASSIFICATION	1.8782724564720465E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9998089963804544	WITHOUT_CLASSIFICATION	1.9100361954550997E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999849991242912	WITHOUT_CLASSIFICATION	1.5000875708712391E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999687139562501	WITHOUT_CLASSIFICATION	3.1286043749955656E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992274193370182	WITHOUT_CLASSIFICATION	7.725806629819154E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992274193370182	WITHOUT_CLASSIFICATION	7.725806629819154E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999750405783269	WITHOUT_CLASSIFICATION	2.4959421673184945E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999821076784356	WITHOUT_CLASSIFICATION	1.7892321564335575E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996171068632146	WITHOUT_CLASSIFICATION	3.828931367853755E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999329340315544	WITHOUT_CLASSIFICATION	6.706596844562264E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999934195393638	WITHOUT_CLASSIFICATION	6.580460636127589E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9998832087407049	WITHOUT_CLASSIFICATION	1.1679125929511893E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999862764617969	WITHOUT_CLASSIFICATION	1.372353820310758E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999316609058418	WITHOUT_CLASSIFICATION	6.833909415815699E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998795008264874	WITHOUT_CLASSIFICATION	1.2049917351255778E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999378503333868	WITHOUT_CLASSIFICATION	6.214966661324292E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9996121255478061	WITHOUT_CLASSIFICATION	3.8787445219389015E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999877491912355	WITHOUT_CLASSIFICATION	1.2250808764513433E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997111644039278	WITHOUT_CLASSIFICATION	2.8883559607216123E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997111644039278	WITHOUT_CLASSIFICATION	2.8883559607216123E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997111644039278	WITHOUT_CLASSIFICATION	2.8883559607216123E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9997111644039278	WITHOUT_CLASSIFICATION	2.8883559607216123E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998906156502524	WITHOUT_CLASSIFICATION	1.0938434974754521E-4	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998639555529283	WITHOUT_CLASSIFICATION	1.360444470717405E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390002228104	WITHOUT_CLASSIFICATION	1.6099977718961068E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9976030925750435	WITHOUT_CLASSIFICATION	0.0023969074249564665	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998970893381653	WITHOUT_CLASSIFICATION	1.0291066183469718E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998788347866135	WITHOUT_CLASSIFICATION	1.2116521338645989E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965336136649	WITHOUT_CLASSIFICATION	1.0346638633510865E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999829299301387	WITHOUT_CLASSIFICATION	1.7070069861244754E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999862822562896	WITHOUT_CLASSIFICATION	1.3717743710348426E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999921276708423	WITHOUT_CLASSIFICATION	7.872329157546155E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999928446695427	WITHOUT_CLASSIFICATION	7.155330457297941E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999744181739892	WITHOUT_CLASSIFICATION	2.5581826010673683E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998031698132867	WITHOUT_CLASSIFICATION	1.9683018671329158E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999904820964535	WITHOUT_CLASSIFICATION	9.517903546480732E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999904820964535	WITHOUT_CLASSIFICATION	9.517903546480732E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999904820964535	WITHOUT_CLASSIFICATION	9.517903546480732E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999981930531553	WITHOUT_CLASSIFICATION	1.8069468446938967E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999672185505448	WITHOUT_CLASSIFICATION	3.278144945516402E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999965980324927	WITHOUT_CLASSIFICATION	3.401967507237228E-6	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998419851570001	WITHOUT_CLASSIFICATION	1.5801484299994047E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998419851570001	WITHOUT_CLASSIFICATION	1.5801484299994047E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9995064485991566	WITHOUT_CLASSIFICATION	4.935514008435029E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997326203152166	WITHOUT_CLASSIFICATION	2.673796847833649E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999259420953613	WITHOUT_CLASSIFICATION	7.405790463859579E-5	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999551407912033	WITHOUT_CLASSIFICATION	4.485920879683078E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999993395228186	WITHOUT_CLASSIFICATION	6.604771813979202E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.997780969716746	WITHOUT_CLASSIFICATION	0.00221903028325389	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998657757736903	WITHOUT_CLASSIFICATION	1.3422422630967587E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997853593533135	WITHOUT_CLASSIFICATION	2.1464064668649875E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999697105059623	WITHOUT_CLASSIFICATION	3.0289494037695974E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9987182902088547	WITHOUT_CLASSIFICATION	0.0012817097911453016	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999515445177194	WITHOUT_CLASSIFICATION	4.845548228047366E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998556080909207	WITHOUT_CLASSIFICATION	1.4439190907929053E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999129335340469	WITHOUT_CLASSIFICATION	8.706646595311315E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999611263978959	WITHOUT_CLASSIFICATION	3.887360210417924E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999967620375276	WITHOUT_CLASSIFICATION	3.2379624723325417E-6	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999791196607495	WITHOUT_CLASSIFICATION	2.0880339250481836E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999959288062148	WITHOUT_CLASSIFICATION	4.071193785108644E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999972523231331	WITHOUT_CLASSIFICATION	2.7476768670190887E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999627153552553	WITHOUT_CLASSIFICATION	3.7284644744635E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996731243930922	WITHOUT_CLASSIFICATION	3.2687560690778457E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9986263060403953	WITHOUT_CLASSIFICATION	0.0013736939596047954	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999645058171273	WITHOUT_CLASSIFICATION	3.549418287265724E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999906741890935	WITHOUT_CLASSIFICATION	9.325810906502878E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999327726950077	WITHOUT_CLASSIFICATION	6.72273049922927E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999974054322498	WITHOUT_CLASSIFICATION	2.5945677503060663E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999580332068005	WITHOUT_CLASSIFICATION	4.1966793199510954E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9962099443358652	WITHOUT_CLASSIFICATION	0.0037900556641349225	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999888960149371	WITHOUT_CLASSIFICATION	1.1103985062889413E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9968649302856089	WITHOUT_CLASSIFICATION	0.0031350697143910818	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9997596425932241	WITHOUT_CLASSIFICATION	2.4035740677580777E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999949961821291	WITHOUT_CLASSIFICATION	5.0038178709574285E-6	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999913153225242	WITHOUT_CLASSIFICATION	8.6846774759471E-6	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999927143913232	WITHOUT_CLASSIFICATION	7.285608676750695E-6	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9979895228702965	WITHOUT_CLASSIFICATION	0.002010477129703383	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999062065572677	WITHOUT_CLASSIFICATION	9.379344273227491E-5	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9998508867862054	WITHOUT_CLASSIFICATION	1.491132137945849E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999474327812767	WITHOUT_CLASSIFICATION	5.256721872324378E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999424243552543	WITHOUT_CLASSIFICATION	5.757564474562639E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996218368878063	WITHOUT_CLASSIFICATION	3.7816311219371535E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.999779523228881	WITHOUT_CLASSIFICATION	2.2047677111906058E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999967468454521	WITHOUT_CLASSIFICATION	3.2531545478821666E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998715978595163	WITHOUT_CLASSIFICATION	1.2840214048364252E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999949104217798	WITHOUT_CLASSIFICATION	5.089578220150018E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999861568669535	WITHOUT_CLASSIFICATION	1.3843133046672625E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999801856049347	WITHOUT_CLASSIFICATION	1.9814395065283822E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9994321683281864	WITHOUT_CLASSIFICATION	5.678316718136545E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997066706655379	WITHOUT_CLASSIFICATION	2.9332933446216954E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9998007653771975	WITHOUT_CLASSIFICATION	1.9923462280245857E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999350191278923	WITHOUT_CLASSIFICATION	6.49808721077058E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999307685820228	WITHOUT_CLASSIFICATION	6.923141797712394E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999922650124312	WITHOUT_CLASSIFICATION	7.734987568776059E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.999968791365555	WITHOUT_CLASSIFICATION	3.120863444500203E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999002255930223	WITHOUT_CLASSIFICATION	9.977440697766852E-5	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999879783729992	WITHOUT_CLASSIFICATION	1.2021627000667957E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9996787894295849	WITHOUT_CLASSIFICATION	3.2121057041516453E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999147034598094	WITHOUT_CLASSIFICATION	8.529654019070446E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999510856538109	WITHOUT_CLASSIFICATION	4.891434618905033E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999489264442617	WITHOUT_CLASSIFICATION	5.107355573831644E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999567634726427	WITHOUT_CLASSIFICATION	4.323652735726226E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998575614910759	WITHOUT_CLASSIFICATION	1.4243850892406684E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9998793711186125	WITHOUT_CLASSIFICATION	1.2062888138747425E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996417648198671	WITHOUT_CLASSIFICATION	3.582351801328335E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999705362253135	WITHOUT_CLASSIFICATION	2.9463774686464933E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999611213253983	WITHOUT_CLASSIFICATION	3.887867460178697E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999766874764977	WITHOUT_CLASSIFICATION	2.3312523502292693E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999711030620068	WITHOUT_CLASSIFICATION	2.8896937993253845E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999942884127221	WITHOUT_CLASSIFICATION	5.711587277915135E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999757445215535	WITHOUT_CLASSIFICATION	2.4255478446514545E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.999729422567466	WITHOUT_CLASSIFICATION	2.705774325339619E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999922896845105	WITHOUT_CLASSIFICATION	7.710315489427384E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999994697738308	WITHOUT_CLASSIFICATION	5.302261692110804E-6	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9997015306863051	WITHOUT_CLASSIFICATION	2.9846931369493607E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9996321765990758	WITHOUT_CLASSIFICATION	3.6782340092416776E-4	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999934467019018	WITHOUT_CLASSIFICATION	6.5532980982325776E-6	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999475226517827	WITHOUT_CLASSIFICATION	5.247734821735855E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999632134545421	WITHOUT_CLASSIFICATION	3.6786545457948784E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998695986771148	WITHOUT_CLASSIFICATION	1.3040132288514642E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9996975000497662	WITHOUT_CLASSIFICATION	3.024999502337751E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.980674073059468	WITHOUT_CLASSIFICATION	0.019325926940532003	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999460411599336	WITHOUT_CLASSIFICATION	5.395884006634472E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999591791414364	WITHOUT_CLASSIFICATION	4.082085856364445E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999876905556092	WITHOUT_CLASSIFICATION	1.2309444390815735E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995230367807404	WITHOUT_CLASSIFICATION	4.7696321925957735E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.999874815389363	WITHOUT_CLASSIFICATION	1.2518461063704635E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998921706664232	WITHOUT_CLASSIFICATION	1.0782933357681277E-4	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999086861850571	WITHOUT_CLASSIFICATION	9.131381494279917E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999634270468749	WITHOUT_CLASSIFICATION	3.657295312506584E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996351555739412	WITHOUT_CLASSIFICATION	3.64844426058769E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999017966582827	WITHOUT_CLASSIFICATION	9.820334171724653E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999888654552093	WITHOUT_CLASSIFICATION	1.1134544790806165E-5	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999967719068915	WITHOUT_CLASSIFICATION	3.2280931084920402E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999097769814093	WITHOUT_CLASSIFICATION	9.022301859076399E-5	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999717969234059	WITHOUT_CLASSIFICATION	2.8203076594043215E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.999957259814489	WITHOUT_CLASSIFICATION	4.274018551089992E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996089562920019	WITHOUT_CLASSIFICATION	3.910437079981175E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996089562920019	WITHOUT_CLASSIFICATION	3.910437079981175E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999515175651968	WITHOUT_CLASSIFICATION	4.848243480323134E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9989095103491684	WITHOUT_CLASSIFICATION	0.0010904896508316215	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999076221685984	WITHOUT_CLASSIFICATION	9.23778314015323E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9987919523896411	WITHOUT_CLASSIFICATION	0.0012080476103588326	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999614320834984	WITHOUT_CLASSIFICATION	3.856791650153711E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9991108909164419	WITHOUT_CLASSIFICATION	8.891090835581221E-4	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998530438511527	WITHOUT_CLASSIFICATION	1.4695614884718602E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9994083551908082	WITHOUT_CLASSIFICATION	5.916448091917648E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9998885374265596	WITHOUT_CLASSIFICATION	1.114625734405245E-4	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991261316398554	WITHOUT_CLASSIFICATION	8.7386836014455E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999868328142966	WITHOUT_CLASSIFICATION	1.3167185703411903E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9993574251260674	WITHOUT_CLASSIFICATION	6.425748739326978E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999615336221602	WITHOUT_CLASSIFICATION	3.846637783982672E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999802245751653	WITHOUT_CLASSIFICATION	1.977542483455598E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996390484426061	WITHOUT_CLASSIFICATION	3.6095155739388385E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999658747112512	WITHOUT_CLASSIFICATION	3.412528874888604E-5	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9972316509167237	WITHOUT_CLASSIFICATION	0.002768349083276308	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9972316509167237	WITHOUT_CLASSIFICATION	0.002768349083276308	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999212324471198	WITHOUT_CLASSIFICATION	7.876755288021223E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997590839454569	WITHOUT_CLASSIFICATION	2.4091605454317118E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999827066066731	WITHOUT_CLASSIFICATION	1.729339332689596E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999158479574225	WITHOUT_CLASSIFICATION	8.415204257749419E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999470792917289	WITHOUT_CLASSIFICATION	5.292070827118756E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998886097383088	WITHOUT_CLASSIFICATION	1.1139026169114579E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999470792917289	WITHOUT_CLASSIFICATION	5.292070827118756E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999784722773318	WITHOUT_CLASSIFICATION	2.152772266815459E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998927910177489	WITHOUT_CLASSIFICATION	1.0720898225108477E-4	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999892079788052	WITHOUT_CLASSIFICATION	1.0792021194910552E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999892079788052	WITHOUT_CLASSIFICATION	1.0792021194910552E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999376024191056	WITHOUT_CLASSIFICATION	6.239758089441999E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999747885263999	WITHOUT_CLASSIFICATION	2.5211473600139316E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999684325670616	WITHOUT_CLASSIFICATION	3.1567432938403705E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9996852699172999	WITHOUT_CLASSIFICATION	3.147300827001704E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.999469105068786	WITHOUT_CLASSIFICATION	5.30894931214045E-4	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9999691641896316	WITHOUT_CLASSIFICATION	3.0835810368422226E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999922334495793	WITHOUT_CLASSIFICATION	7.766550420691523E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999433773318603	WITHOUT_CLASSIFICATION	5.662266813976984E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999391016952351	WITHOUT_CLASSIFICATION	6.089830476491865E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9941549848396842	WITHOUT_CLASSIFICATION	0.005845015160315851	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9992617450302329	WITHOUT_CLASSIFICATION	7.382549697671953E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9997947004118878	WITHOUT_CLASSIFICATION	2.0529958811217733E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998892244779877	WITHOUT_CLASSIFICATION	1.1077552201227935E-4	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999249039350566	WITHOUT_CLASSIFICATION	7.509606494334135E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999844164071446	WITHOUT_CLASSIFICATION	1.5583592855397243E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998200377329934	WITHOUT_CLASSIFICATION	1.7996226700667635E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999967318677161	WITHOUT_CLASSIFICATION	3.268132283798942E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9982027674094601	WITHOUT_CLASSIFICATION	0.0017972325905399058	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999711312290978	WITHOUT_CLASSIFICATION	2.8868770902206484E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998366880163466	WITHOUT_CLASSIFICATION	1.6331198365333486E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998858283440535	WITHOUT_CLASSIFICATION	1.1417165594646972E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999687142155935	WITHOUT_CLASSIFICATION	3.128578440655462E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999644962877469	WITHOUT_CLASSIFICATION	3.550371225301354E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998870211540505	WITHOUT_CLASSIFICATION	1.129788459495034E-4	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996717448373922	WITHOUT_CLASSIFICATION	3.282551626079136E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9998379507261578	WITHOUT_CLASSIFICATION	1.6204927384219018E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999992250983484	WITHOUT_CLASSIFICATION	7.749016516347843E-7	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9998913637639222	WITHOUT_CLASSIFICATION	1.0863623607784016E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999767098557028	WITHOUT_CLASSIFICATION	2.329014429733514E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999903994513653	WITHOUT_CLASSIFICATION	9.600548634757467E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9998855446711097	WITHOUT_CLASSIFICATION	1.1445532889028843E-4	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9830230982405546	WITHOUT_CLASSIFICATION	0.016976901759445384	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9989734213749358	WITHOUT_CLASSIFICATION	0.0010265786250641398	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999309926419762	WITHOUT_CLASSIFICATION	6.90073580238259E-5	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9998821261422225	WITHOUT_CLASSIFICATION	1.1787385777747187E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999154634329424	WITHOUT_CLASSIFICATION	8.453656705761765E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999154634329424	WITHOUT_CLASSIFICATION	8.453656705761765E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999942281452878	WITHOUT_CLASSIFICATION	5.771854712205355E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997106826092598	WITHOUT_CLASSIFICATION	2.893173907402267E-4	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998594251889712	WITHOUT_CLASSIFICATION	1.405748110288485E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999290972815396	WITHOUT_CLASSIFICATION	7.09027184604575E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9995891317995762	WITHOUT_CLASSIFICATION	4.1086820042381724E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999409215196549	WITHOUT_CLASSIFICATION	5.907848034515608E-5	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9998328014543463	WITHOUT_CLASSIFICATION	1.6719854565374893E-4	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9995326278928774	WITHOUT_CLASSIFICATION	4.6737210712253737E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999942281452878	WITHOUT_CLASSIFICATION	5.771854712205355E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997106826092598	WITHOUT_CLASSIFICATION	2.893173907402267E-4	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997768168299572	WITHOUT_CLASSIFICATION	2.231831700428554E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999292058072554	WITHOUT_CLASSIFICATION	7.079419274460412E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999980339875081	WITHOUT_CLASSIFICATION	1.9660124919993553E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998148918620376	WITHOUT_CLASSIFICATION	1.8510813796234583E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999142596982133	WITHOUT_CLASSIFICATION	8.574030178654657E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.998950347959115	WITHOUT_CLASSIFICATION	0.0010496520408850294	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999711563113902	WITHOUT_CLASSIFICATION	2.8843688609788228E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999904001834758	WITHOUT_CLASSIFICATION	9.599816524163117E-6	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999472430312367	WITHOUT_CLASSIFICATION	5.275696876332952E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9991315084989527	WITHOUT_CLASSIFICATION	8.684915010471918E-4	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998251267012515	WITHOUT_CLASSIFICATION	1.7487329874858105E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9991315084989527	WITHOUT_CLASSIFICATION	8.684915010471918E-4	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9997668507705086	WITHOUT_CLASSIFICATION	2.331492294914853E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998793711186125	WITHOUT_CLASSIFICATION	1.2062888138747425E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9997668507705086	WITHOUT_CLASSIFICATION	2.331492294914853E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998637736710334	WITHOUT_CLASSIFICATION	1.362263289666874E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9949942140005004	WITHOUT_CLASSIFICATION	0.0050057859994996606	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999904001834758	WITHOUT_CLASSIFICATION	9.599816524163117E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999904001834758	WITHOUT_CLASSIFICATION	9.599816524163117E-6	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999379088287564	WITHOUT_CLASSIFICATION	6.209117124350288E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999379926136094	WITHOUT_CLASSIFICATION	6.200738639055547E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999379088287564	WITHOUT_CLASSIFICATION	6.209117124350288E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999906478676049	WITHOUT_CLASSIFICATION	9.352132395099506E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999591604460111	WITHOUT_CLASSIFICATION	4.0839553988965406E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999209383939145	WITHOUT_CLASSIFICATION	7.906160608560157E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999289686871797	WITHOUT_CLASSIFICATION	7.10313128202305E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999075609351289	WITHOUT_CLASSIFICATION	9.243906487102064E-5	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999467767360144	WITHOUT_CLASSIFICATION	5.322326398567977E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999902852688886	WITHOUT_CLASSIFICATION	9.71473111138895E-6	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999903120524228	WITHOUT_CLASSIFICATION	9.687947577226952E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999451527187255	WITHOUT_CLASSIFICATION	5.484728127449383E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9991375468616321	WITHOUT_CLASSIFICATION	8.624531383678786E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999913541819113	WITHOUT_CLASSIFICATION	8.645818088740178E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999925673866314	WITHOUT_CLASSIFICATION	7.432613368550908E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999102816888368	WITHOUT_CLASSIFICATION	8.971831116319926E-5	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999627980149607	WITHOUT_CLASSIFICATION	3.720198503935074E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999441639884924	WITHOUT_CLASSIFICATION	5.583601150749898E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997809021916166	WITHOUT_CLASSIFICATION	2.1909780838336892E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999560050391064	WITHOUT_CLASSIFICATION	4.3994960893632226E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999228321571763	WITHOUT_CLASSIFICATION	7.71678428236573E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999076998400203	WITHOUT_CLASSIFICATION	9.230015997975635E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998948508789769	WITHOUT_CLASSIFICATION	1.0514912102312045E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998893886581144	WITHOUT_CLASSIFICATION	1.1061134188569832E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9994514226125237	WITHOUT_CLASSIFICATION	5.485773874763181E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997538357409392	WITHOUT_CLASSIFICATION	2.4616425906071146E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998487070110882	WITHOUT_CLASSIFICATION	1.512929889117801E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9998637326620079	WITHOUT_CLASSIFICATION	1.362673379921318E-4	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9423404102812204	WITHOUT_CLASSIFICATION	0.05765958971877965	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9996436163765058	WITHOUT_CLASSIFICATION	3.56383623494203E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999075609351289	WITHOUT_CLASSIFICATION	9.243906487102064E-5	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998956283706104	WITHOUT_CLASSIFICATION	1.043716293896319E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9999458940480012	WITHOUT_CLASSIFICATION	5.410595199873277E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9580756595174538	WITHOUT_CLASSIFICATION	0.04192434048254624	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999718706854145	WITHOUT_CLASSIFICATION	2.8129314585504098E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999830309594259	WITHOUT_CLASSIFICATION	1.696904057414087E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.999993273973199	WITHOUT_CLASSIFICATION	6.726026801017005E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999906478676049	WITHOUT_CLASSIFICATION	9.352132395099506E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999906478676049	WITHOUT_CLASSIFICATION	9.352132395099506E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999835137981082	WITHOUT_CLASSIFICATION	1.6486201891724483E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999893178090596	WITHOUT_CLASSIFICATION	1.0682190940283723E-5	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9999395484426539	WITHOUT_CLASSIFICATION	6.045155734609848E-5	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.999989879062276	WITHOUT_CLASSIFICATION	1.0120937724103609E-5	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9993287795532044	WITHOUT_CLASSIFICATION	6.712204467955564E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9993417189513055	WITHOUT_CLASSIFICATION	6.582810486944337E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9993729459529409	WITHOUT_CLASSIFICATION	6.270540470591459E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999987579841308	WITHOUT_CLASSIFICATION	1.2420158691894428E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999379865394216	WITHOUT_CLASSIFICATION	6.201346057850474E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999489652279699	WITHOUT_CLASSIFICATION	5.103477202995081E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998008984467504	WITHOUT_CLASSIFICATION	1.9910155324967256E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999102816888368	WITHOUT_CLASSIFICATION	8.971831116319926E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999942281452878	WITHOUT_CLASSIFICATION	5.771854712205355E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998008984467504	WITHOUT_CLASSIFICATION	1.9910155324967256E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999203379537471	WITHOUT_CLASSIFICATION	7.966204625287609E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999975152784113	WITHOUT_CLASSIFICATION	2.484721588702789E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999504739195094	WITHOUT_CLASSIFICATION	4.9526080490561156E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9561506023808595	WITHOUT_CLASSIFICATION	0.04384939761914055	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996296608366765	WITHOUT_CLASSIFICATION	3.70339163323545E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9989340469835941	WITHOUT_CLASSIFICATION	0.001065953016405946	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999614099855363	WITHOUT_CLASSIFICATION	3.859001446372103E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9994578872989961	WITHOUT_CLASSIFICATION	5.421127010038659E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999905257608896	WITHOUT_CLASSIFICATION	9.474239110367483E-6	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998925359457062	WITHOUT_CLASSIFICATION	1.0746405429382478E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999410240479931	WITHOUT_CLASSIFICATION	5.8975952006724426E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999410240479931	WITHOUT_CLASSIFICATION	5.8975952006724426E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9994342496749774	WITHOUT_CLASSIFICATION	5.657503250225658E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999748028801119	WITHOUT_CLASSIFICATION	2.5197119888069103E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998008984467504	WITHOUT_CLASSIFICATION	1.9910155324967256E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996296608366765	WITHOUT_CLASSIFICATION	3.70339163323545E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999614099855363	WITHOUT_CLASSIFICATION	3.859001446372103E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999268067076891	WITHOUT_CLASSIFICATION	7.319329231086435E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999964508418115	WITHOUT_CLASSIFICATION	3.549158188354057E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999449826806803	WITHOUT_CLASSIFICATION	5.5017319319577336E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999461332189671	WITHOUT_CLASSIFICATION	5.3866781032967226E-5	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999113645640968	WITHOUT_CLASSIFICATION	8.863543590317108E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999897758523942	WITHOUT_CLASSIFICATION	1.0224147605867769E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999203379537471	WITHOUT_CLASSIFICATION	7.966204625287609E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997199920519938	WITHOUT_CLASSIFICATION	2.800079480061825E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999603162227151	WITHOUT_CLASSIFICATION	3.9683777284905297E-5	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999857783050952	WITHOUT_CLASSIFICATION	1.4221694904781499E-5	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999945528718384	WITHOUT_CLASSIFICATION	5.447128161616722E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999942408244884	WITHOUT_CLASSIFICATION	5.759175511648692E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999649558144371	WITHOUT_CLASSIFICATION	3.5044185562811683E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998637736710334	WITHOUT_CLASSIFICATION	1.362263289666874E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998368031182594	WITHOUT_CLASSIFICATION	1.6319688174067912E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999903200047224	WITHOUT_CLASSIFICATION	9.679995277520743E-6	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.991739948914549	WITHOUT_CLASSIFICATION	0.00826005108545104	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.995239319757573	WITHOUT_CLASSIFICATION	0.004760680242427053	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9967671441111497	WITHOUT_CLASSIFICATION	0.0032328558888501946	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9995827185483438	WITHOUT_CLASSIFICATION	4.1728145165619625E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9996935126847347	WITHOUT_CLASSIFICATION	3.064873152652781E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9997943915385505	WITHOUT_CLASSIFICATION	2.0560846144939747E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999897758523942	WITHOUT_CLASSIFICATION	1.0224147605867769E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999140120466162	WITHOUT_CLASSIFICATION	8.598795338370089E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999066547225831	WITHOUT_CLASSIFICATION	9.334527741680182E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9997061291666706	WITHOUT_CLASSIFICATION	2.9387083332938825E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998561272648422	WITHOUT_CLASSIFICATION	1.4387273515789603E-4	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9996389533292979	WITHOUT_CLASSIFICATION	3.610466707021085E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997194485432588	WITHOUT_CLASSIFICATION	2.80551456741266E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999796938644407	WITHOUT_CLASSIFICATION	2.030613555914593E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9901905767753654	WITHOUT_CLASSIFICATION	0.009809423224634671	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998975132939746	WITHOUT_CLASSIFICATION	1.0248670602552372E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999792521958403	WITHOUT_CLASSIFICATION	2.074780415974035E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999925282975576	WITHOUT_CLASSIFICATION	7.471702442433155E-6	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9994806708249305	WITHOUT_CLASSIFICATION	5.193291750694396E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999866573961497	WITHOUT_CLASSIFICATION	1.3342603850340306E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999850338616287	WITHOUT_CLASSIFICATION	1.4966138371270471E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9994241056352143	WITHOUT_CLASSIFICATION	5.758943647856396E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999878301354465	WITHOUT_CLASSIFICATION	1.2169864553637087E-5	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999807056724719	WITHOUT_CLASSIFICATION	1.9294327528030825E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999091987186309	WITHOUT_CLASSIFICATION	9.080128136898746E-5	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999616083113939	WITHOUT_CLASSIFICATION	3.839168860604033E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999189578717396	WITHOUT_CLASSIFICATION	8.104212826034161E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998847511341497	WITHOUT_CLASSIFICATION	1.1524886585028523E-4	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999592251635705	WITHOUT_CLASSIFICATION	4.07748364293862E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.94524174274456	WITHOUT_CLASSIFICATION	0.05475825725544007	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9998936661740698	WITHOUT_CLASSIFICATION	1.0633382593015237E-4	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998324238433598	WITHOUT_CLASSIFICATION	1.6757615664019917E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999592293412092	WITHOUT_CLASSIFICATION	4.077065879080497E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.930438454018606	WITHOUT_CLASSIFICATION	0.06956154598139397	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998468197352012	WITHOUT_CLASSIFICATION	1.531802647987036E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9973975980019316	WITHOUT_CLASSIFICATION	0.0026024019980683912	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999532355721604	WITHOUT_CLASSIFICATION	4.6764427839516664E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999996636489894	WITHOUT_CLASSIFICATION	3.363510104998267E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999552361597256	WITHOUT_CLASSIFICATION	4.476384027438562E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997504226583211	WITHOUT_CLASSIFICATION	2.495773416788101E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999132967692186	WITHOUT_CLASSIFICATION	8.67032307814488E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.995412373116183	WITHOUT_CLASSIFICATION	0.004587626883816908	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9997504226583211	WITHOUT_CLASSIFICATION	2.495773416788101E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999552361597256	WITHOUT_CLASSIFICATION	4.476384027438562E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999132967692186	WITHOUT_CLASSIFICATION	8.67032307814488E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.999781384192656	WITHOUT_CLASSIFICATION	2.1861580734398915E-4	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999653887720661	WITHOUT_CLASSIFICATION	3.461122793392429E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995598448521196	WITHOUT_CLASSIFICATION	4.401551478803862E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.99984607315528	WITHOUT_CLASSIFICATION	1.539268447200484E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999969246569502	WITHOUT_CLASSIFICATION	3.075343049789012E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8489358890109483	WITHOUT_CLASSIFICATION	0.15106411098905181	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999026162391428	WITHOUT_CLASSIFICATION	9.738376085723091E-5	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998397124763638	WITHOUT_CLASSIFICATION	1.6028752363623933E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999994649859861	WITHOUT_CLASSIFICATION	5.350140139879199E-7	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9987828824442669	WITHOUT_CLASSIFICATION	0.0012171175557330585	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999105777565548	WITHOUT_CLASSIFICATION	8.94222434451456E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999592074332695	WITHOUT_CLASSIFICATION	4.0792566730582255E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998743496607261	WITHOUT_CLASSIFICATION	1.2565033927394625E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.99984607315528	WITHOUT_CLASSIFICATION	1.539268447200484E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999914906025397	WITHOUT_CLASSIFICATION	8.509397460435101E-6	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999903173410293	WITHOUT_CLASSIFICATION	9.682658970786944E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9988087075859032	WITHOUT_CLASSIFICATION	0.0011912924140967836	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999996452376358	WITHOUT_CLASSIFICATION	3.5476236416358184E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9995238638901576	WITHOUT_CLASSIFICATION	4.761361098424158E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999475768473481	WITHOUT_CLASSIFICATION	5.2423152651851726E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994413637089841	WITHOUT_CLASSIFICATION	5.586362910160083E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999987822592271	WITHOUT_CLASSIFICATION	1.2177407728530374E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998082970206295	WITHOUT_CLASSIFICATION	1.9170297937067478E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999495112191752	WITHOUT_CLASSIFICATION	5.0488780824734306E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999447800435745	WITHOUT_CLASSIFICATION	5.52199564255091E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999447800435745	WITHOUT_CLASSIFICATION	5.52199564255091E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999862648236222	WITHOUT_CLASSIFICATION	1.3735176377806427E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999862648236222	WITHOUT_CLASSIFICATION	1.3735176377806427E-5	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.9994579668141378	WITHOUT_CLASSIFICATION	5.420331858622503E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9988087075859032	WITHOUT_CLASSIFICATION	0.0011912924140967836	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999558994505945	WITHOUT_CLASSIFICATION	4.410054940555261E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999645680849696	WITHOUT_CLASSIFICATION	3.5431915030319615E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999843637274065	WITHOUT_CLASSIFICATION	1.5636272593466077E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999843637274065	WITHOUT_CLASSIFICATION	1.5636272593466077E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999830047459132	WITHOUT_CLASSIFICATION	1.699525408676232E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999966339564857	WITHOUT_CLASSIFICATION	3.366043514296906E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999818093385036	WITHOUT_CLASSIFICATION	1.8190661496367262E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.999986616633791	WITHOUT_CLASSIFICATION	1.3383366209174102E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999313501124614	WITHOUT_CLASSIFICATION	6.864988753864436E-5	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9996583316307335	WITHOUT_CLASSIFICATION	3.416683692665348E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999634286642287	WITHOUT_CLASSIFICATION	3.6571335771281546E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.999978998929077	WITHOUT_CLASSIFICATION	2.1001070922965266E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999548080957908	WITHOUT_CLASSIFICATION	4.519190420924045E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9985917924307911	WITHOUT_CLASSIFICATION	0.0014082075692088824	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999745981658835	WITHOUT_CLASSIFICATION	2.5401834116580466E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999646112614007	WITHOUT_CLASSIFICATION	3.5388738599409885E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999469871388305	WITHOUT_CLASSIFICATION	5.30128611694827E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.999994200963978	WITHOUT_CLASSIFICATION	5.79903602208343E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999927970515239	WITHOUT_CLASSIFICATION	7.2029484761093725E-6	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997437751209475	WITHOUT_CLASSIFICATION	2.5622487905257513E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089667397346	WITHOUT_CLASSIFICATION	9.103326026547059E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999388115064599	WITHOUT_CLASSIFICATION	6.11884935401856E-5	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999447710357184	WITHOUT_CLASSIFICATION	5.5228964281618686E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9991867464326902	WITHOUT_CLASSIFICATION	8.132535673096743E-4	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999089202259152	WITHOUT_CLASSIFICATION	9.107977408491538E-5	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9921850386873163	WITHOUT_CLASSIFICATION	0.007814961312683597	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998329848143332	WITHOUT_CLASSIFICATION	1.6701518566670793E-4	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999709863835788	WITHOUT_CLASSIFICATION	2.9013616421127238E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999920502856673	WITHOUT_CLASSIFICATION	7.949714332796766E-6	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998538287694151	WITHOUT_CLASSIFICATION	1.4617123058491957E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999792521958403	WITHOUT_CLASSIFICATION	2.074780415974035E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.999913496444252	WITHOUT_CLASSIFICATION	8.650355574807418E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9973955821171682	WITHOUT_CLASSIFICATION	0.0026044178828318974	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998587320544711	WITHOUT_CLASSIFICATION	1.4126794552885244E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998579448701738	WITHOUT_CLASSIFICATION	1.420551298262538E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999235656301715	WITHOUT_CLASSIFICATION	7.643436982844904E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9999235656301715	WITHOUT_CLASSIFICATION	7.643436982844904E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999398325015614	WITHOUT_CLASSIFICATION	6.016749843852047E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999946225851601	WITHOUT_CLASSIFICATION	5.377414839943875E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999189750737966	WITHOUT_CLASSIFICATION	8.102492620342651E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999189750737966	WITHOUT_CLASSIFICATION	8.102492620342651E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9996641976451355	WITHOUT_CLASSIFICATION	3.358023548644671E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994193635275417	WITHOUT_CLASSIFICATION	5.806364724583071E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9982518704548317	WITHOUT_CLASSIFICATION	0.0017481295451683952	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999934195393638	WITHOUT_CLASSIFICATION	6.580460636127589E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999081508983585	WITHOUT_CLASSIFICATION	9.184910164151726E-5	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999001469751653	WITHOUT_CLASSIFICATION	9.985302483479598E-5	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999430406171124	WITHOUT_CLASSIFICATION	5.6959382887607993E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999398622208713	WITHOUT_CLASSIFICATION	6.013777912884422E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999398622208713	WITHOUT_CLASSIFICATION	6.013777912884422E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999444852790551	WITHOUT_CLASSIFICATION	5.55147209448163E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999767403397396	WITHOUT_CLASSIFICATION	2.325966026042849E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999767403397396	WITHOUT_CLASSIFICATION	2.325966026042849E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999547362755209	WITHOUT_CLASSIFICATION	4.5263724479159515E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999201066844109	WITHOUT_CLASSIFICATION	7.989331558909494E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.999974320920597	WITHOUT_CLASSIFICATION	2.5679079402934707E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999764489837427	WITHOUT_CLASSIFICATION	2.355101625721073E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999723598433236	WITHOUT_CLASSIFICATION	2.764015667636904E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9938117900868849	WITHOUT_CLASSIFICATION	0.00618820991311513	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997355506250217	WITHOUT_CLASSIFICATION	2.6444937497836746E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999353027404597	WITHOUT_CLASSIFICATION	6.469725954025933E-5	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9996311848665566	WITHOUT_CLASSIFICATION	3.688151334433448E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.997931059230986	WITHOUT_CLASSIFICATION	0.0020689407690139398	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999648486105029	WITHOUT_CLASSIFICATION	3.5151389497108736E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897741636691	WITHOUT_CLASSIFICATION	1.022583633097912E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897741636691	WITHOUT_CLASSIFICATION	1.022583633097912E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897741636691	WITHOUT_CLASSIFICATION	1.022583633097912E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999897741636691	WITHOUT_CLASSIFICATION	1.022583633097912E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999419837976065	WITHOUT_CLASSIFICATION	5.801620239359495E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9964104422812611	WITHOUT_CLASSIFICATION	0.0035895577187388134	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999933525029956	WITHOUT_CLASSIFICATION	6.647497004340346E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999247051398927	WITHOUT_CLASSIFICATION	7.529486010723027E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9961788350347359	WITHOUT_CLASSIFICATION	0.003821164965264156	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9996805096497271	WITHOUT_CLASSIFICATION	3.194903502729109E-4	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998153544834669	WITHOUT_CLASSIFICATION	1.8464551653315958E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9997700933331105	WITHOUT_CLASSIFICATION	2.2990666688946202E-4	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999469256216044	WITHOUT_CLASSIFICATION	5.3074378395674136E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999374875568571	WITHOUT_CLASSIFICATION	6.251244314294451E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999554533647272	WITHOUT_CLASSIFICATION	4.454663527275575E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995214414450118	WITHOUT_CLASSIFICATION	4.7855855498828143E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9997292424048319	WITHOUT_CLASSIFICATION	2.70757595168159E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999989006948366	WITHOUT_CLASSIFICATION	1.0993051633991804E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999554533647272	WITHOUT_CLASSIFICATION	4.454663527275575E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999821851268396	WITHOUT_CLASSIFICATION	1.7814873160455746E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998696367883879	WITHOUT_CLASSIFICATION	1.3036321161208632E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999953101158154	WITHOUT_CLASSIFICATION	4.689884184613569E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995434706155174	WITHOUT_CLASSIFICATION	4.5652938448254135E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999268344015906	WITHOUT_CLASSIFICATION	7.316559840940704E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9989080265791682	WITHOUT_CLASSIFICATION	0.0010919734208317809	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999783018068775	WITHOUT_CLASSIFICATION	2.16981931224756E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999658909825485	WITHOUT_CLASSIFICATION	3.410901745150017E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816798797848	WITHOUT_CLASSIFICATION	1.832012021521378E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999808831343619	WITHOUT_CLASSIFICATION	1.91168656380966E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816798797848	WITHOUT_CLASSIFICATION	1.832012021521378E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999302378351269	WITHOUT_CLASSIFICATION	6.976216487308724E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9967551679451444	WITHOUT_CLASSIFICATION	0.003244832054855688	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9995029362925715	WITHOUT_CLASSIFICATION	4.970637074285296E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998554657743008	WITHOUT_CLASSIFICATION	1.4453422569920413E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998470567684057	WITHOUT_CLASSIFICATION	1.5294323159419754E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999874768307441	WITHOUT_CLASSIFICATION	1.2523169255956935E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999003650771966	WITHOUT_CLASSIFICATION	9.963492280340438E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998434925169372	WITHOUT_CLASSIFICATION	1.5650748306272655E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999003650771966	WITHOUT_CLASSIFICATION	9.963492280340438E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999193994063484	WITHOUT_CLASSIFICATION	8.060059365155926E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999982978173569	WITHOUT_CLASSIFICATION	1.7021826431113117E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9998830464337665	WITHOUT_CLASSIFICATION	1.1695356623348723E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999413944799556	WITHOUT_CLASSIFICATION	5.860552004456304E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999296643369263	WITHOUT_CLASSIFICATION	7.033566307369759E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999839995696789	WITHOUT_CLASSIFICATION	1.600043032112022E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999874768307441	WITHOUT_CLASSIFICATION	1.2523169255956935E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998434925169372	WITHOUT_CLASSIFICATION	1.5650748306272655E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999193994063484	WITHOUT_CLASSIFICATION	8.060059365155926E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999972465282625	WITHOUT_CLASSIFICATION	2.7534717375029908E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999554702650675	WITHOUT_CLASSIFICATION	4.452973493258385E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9993969658524611	WITHOUT_CLASSIFICATION	6.030341475389993E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9995451866540315	WITHOUT_CLASSIFICATION	4.5481334596860715E-4	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9996497961034114	WITHOUT_CLASSIFICATION	3.502038965885422E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9997901871529331	WITHOUT_CLASSIFICATION	2.098128470668454E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999528042822927	WITHOUT_CLASSIFICATION	4.719571770727683E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089667397346	WITHOUT_CLASSIFICATION	9.103326026547059E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999982978173569	WITHOUT_CLASSIFICATION	1.7021826431113117E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998714254164981	WITHOUT_CLASSIFICATION	1.2857458350203668E-4	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999379088287564	WITHOUT_CLASSIFICATION	6.209117124350288E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9991888371787483	WITHOUT_CLASSIFICATION	8.111628212517872E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999583487939186	WITHOUT_CLASSIFICATION	4.165120608134949E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089667397346	WITHOUT_CLASSIFICATION	9.103326026547059E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999576290898446	WITHOUT_CLASSIFICATION	4.2370910155271214E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089667397346	WITHOUT_CLASSIFICATION	9.103326026547059E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999823361121982	WITHOUT_CLASSIFICATION	1.766388780179994E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999098692764672	WITHOUT_CLASSIFICATION	9.013072353277982E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998917290862438	WITHOUT_CLASSIFICATION	1.0827091375622278E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999717288554427	WITHOUT_CLASSIFICATION	2.8271144557342304E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999686880563334	WITHOUT_CLASSIFICATION	3.131194366651679E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999072676624265	WITHOUT_CLASSIFICATION	9.273233757352032E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999334367085496	WITHOUT_CLASSIFICATION	6.656329145028137E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997571094300931	WITHOUT_CLASSIFICATION	2.4289056990701055E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999767035990191	WITHOUT_CLASSIFICATION	2.32964009808684E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999430252928698	WITHOUT_CLASSIFICATION	5.69747071301633E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9997890750721266	WITHOUT_CLASSIFICATION	2.109249278735274E-4	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999446026594733	WITHOUT_CLASSIFICATION	5.539734052671259E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9840631633360742	WITHOUT_CLASSIFICATION	0.01593683666392577	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998621461076951	WITHOUT_CLASSIFICATION	1.3785389230488006E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9994861799308283	WITHOUT_CLASSIFICATION	5.138200691716606E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999997081591775	WITHOUT_CLASSIFICATION	2.9184082250079193E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999984963654961	WITHOUT_CLASSIFICATION	1.503634503884537E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997704779483896	WITHOUT_CLASSIFICATION	2.2952205161053024E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999820289913334	WITHOUT_CLASSIFICATION	1.7971008666692206E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997112705241938	WITHOUT_CLASSIFICATION	2.887294758061065E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991310450124823	WITHOUT_CLASSIFICATION	8.689549875177124E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991310450124823	WITHOUT_CLASSIFICATION	8.689549875177124E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.99996859314344	WITHOUT_CLASSIFICATION	3.140685656005481E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998717146088136	WITHOUT_CLASSIFICATION	1.2828539118630073E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999898804670422	WITHOUT_CLASSIFICATION	1.0119532957875256E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999900750431133	WITHOUT_CLASSIFICATION	9.924956886594704E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997261293388474	WITHOUT_CLASSIFICATION	2.738706611525916E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999929805570074	WITHOUT_CLASSIFICATION	7.019442992604783E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999193090347558	WITHOUT_CLASSIFICATION	8.06909652441615E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9965683690778862	WITHOUT_CLASSIFICATION	0.0034316309221139193	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9969715927188392	WITHOUT_CLASSIFICATION	0.003028407281160885	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999633443839837	WITHOUT_CLASSIFICATION	3.665561601622457E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999162681809075	WITHOUT_CLASSIFICATION	8.373181909243875E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999834979445005	WITHOUT_CLASSIFICATION	1.650205549953472E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998445153916043	WITHOUT_CLASSIFICATION	1.5548460839573196E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999954114829253	WITHOUT_CLASSIFICATION	4.588517074691213E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999902819309872	WITHOUT_CLASSIFICATION	9.718069012865971E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999121959077346	WITHOUT_CLASSIFICATION	8.780409226539385E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999618232819487	WITHOUT_CLASSIFICATION	3.8176718051310335E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999618232819487	WITHOUT_CLASSIFICATION	3.8176718051310335E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999796695764027	WITHOUT_CLASSIFICATION	2.0330423597302448E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997571094300931	WITHOUT_CLASSIFICATION	2.4289056990701055E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9984807167607581	WITHOUT_CLASSIFICATION	0.0015192832392418208	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999868061096753	WITHOUT_CLASSIFICATION	1.319389032473605E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996191830119749	WITHOUT_CLASSIFICATION	3.8081698802503605E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997578828198325	WITHOUT_CLASSIFICATION	2.4211718016761582E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.999944956846896	WITHOUT_CLASSIFICATION	5.504315310410488E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999935032458738	WITHOUT_CLASSIFICATION	6.4967541262794404E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999387497034451	WITHOUT_CLASSIFICATION	6.125029655486598E-5	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999911205744516	WITHOUT_CLASSIFICATION	8.879425548401291E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999663239902806	WITHOUT_CLASSIFICATION	3.367600971937761E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9998907750312696	WITHOUT_CLASSIFICATION	1.0922496873043842E-4	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999490922982236	WITHOUT_CLASSIFICATION	5.090770177638487E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999487190903448	WITHOUT_CLASSIFICATION	5.128090965520199E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999993274887002	WITHOUT_CLASSIFICATION	6.725112997396019E-7	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999406204852038	WITHOUT_CLASSIFICATION	5.937951479607921E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999758088731728	WITHOUT_CLASSIFICATION	2.419112682710718E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999871584694392	WITHOUT_CLASSIFICATION	1.2841530560766197E-5	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9984471490240039	WITHOUT_CLASSIFICATION	0.0015528509759961651	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999986589054182	WITHOUT_CLASSIFICATION	1.3410945818033736E-6	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9996177760784403	WITHOUT_CLASSIFICATION	3.822239215597856E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999607146290262	WITHOUT_CLASSIFICATION	3.9285370973867315E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9952863724016093	WITHOUT_CLASSIFICATION	0.004713627598390734	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999508346316167	WITHOUT_CLASSIFICATION	4.916536838341251E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999331070782037	WITHOUT_CLASSIFICATION	6.689292179626612E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999293944438026	WITHOUT_CLASSIFICATION	7.060555619742565E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9996563239010504	WITHOUT_CLASSIFICATION	3.436760989495309E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998027966472756	WITHOUT_CLASSIFICATION	1.972033527243547E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999844046594135	WITHOUT_CLASSIFICATION	1.5595340586540672E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9978147892983676	WITHOUT_CLASSIFICATION	0.0021852107016323142	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998600837282825	WITHOUT_CLASSIFICATION	1.3991627171751686E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9998817562349012	WITHOUT_CLASSIFICATION	1.1824376509888401E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.99999261040262	WITHOUT_CLASSIFICATION	7.389597379946673E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998742653388352	WITHOUT_CLASSIFICATION	1.2573466116483036E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9997932615292418	WITHOUT_CLASSIFICATION	2.067384707582674E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999316823711014	WITHOUT_CLASSIFICATION	6.831762889859464E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9985766638917621	WITHOUT_CLASSIFICATION	0.0014233361082378849	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9819716300299718	WITHOUT_CLASSIFICATION	0.018028369970028213	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.99982330879028	WITHOUT_CLASSIFICATION	1.7669120971988824E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.99982330879028	WITHOUT_CLASSIFICATION	1.7669120971988824E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999367314146337	WITHOUT_CLASSIFICATION	6.32685853662771E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999575911498045	WITHOUT_CLASSIFICATION	4.240885019542742E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999785642461224	WITHOUT_CLASSIFICATION	2.1435753877662618E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999785642461224	WITHOUT_CLASSIFICATION	2.1435753877662618E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999857970896043	WITHOUT_CLASSIFICATION	1.4202910395600499E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999416775504006	WITHOUT_CLASSIFICATION	5.832244959934125E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999659158336809	WITHOUT_CLASSIFICATION	3.408416631905931E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999974193362066	WITHOUT_CLASSIFICATION	2.5806637934593836E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998636672212347	WITHOUT_CLASSIFICATION	1.3633277876539724E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998595976273503	WITHOUT_CLASSIFICATION	1.404023726498017E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999417825282017	WITHOUT_CLASSIFICATION	5.8217471798249355E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999417825282017	WITHOUT_CLASSIFICATION	5.8217471798249355E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998595976273503	WITHOUT_CLASSIFICATION	1.404023726498017E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998608414728307	WITHOUT_CLASSIFICATION	1.391585271691867E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999906478676049	WITHOUT_CLASSIFICATION	9.352132395099506E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998980171217589	WITHOUT_CLASSIFICATION	1.0198287824108345E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998980171217589	WITHOUT_CLASSIFICATION	1.0198287824108345E-4	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999374685933304	WITHOUT_CLASSIFICATION	6.25314066695731E-5	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999313617705325	WITHOUT_CLASSIFICATION	6.86382294673745E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999721921503357	WITHOUT_CLASSIFICATION	2.7807849664231683E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999899984955156	WITHOUT_CLASSIFICATION	1.0001504484466283E-5	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999621376850816	WITHOUT_CLASSIFICATION	3.7862314918521915E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.999912202738587	WITHOUT_CLASSIFICATION	8.779726141296477E-5	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999131667818341	WITHOUT_CLASSIFICATION	8.683321816602652E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999639195469753	WITHOUT_CLASSIFICATION	3.60804530246506E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999947139735597	WITHOUT_CLASSIFICATION	5.286026440357957E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998858660668567	WITHOUT_CLASSIFICATION	1.141339331433399E-4	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998781794323992	WITHOUT_CLASSIFICATION	1.2182056760072061E-4	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9984251686804655	WITHOUT_CLASSIFICATION	0.00157483131953445	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999513357137091	WITHOUT_CLASSIFICATION	4.866428629096933E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999369031980512	WITHOUT_CLASSIFICATION	6.309680194883295E-5	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999899132783047	WITHOUT_CLASSIFICATION	1.0086721695226353E-5	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999641687146233	WITHOUT_CLASSIFICATION	3.583128537670873E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998210962923411	WITHOUT_CLASSIFICATION	1.78903707658877E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9996259110790726	WITHOUT_CLASSIFICATION	3.7408892092741464E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999514788955262	WITHOUT_CLASSIFICATION	4.852110447379187E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9993252322553503	WITHOUT_CLASSIFICATION	6.747677446497204E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9986341286053234	WITHOUT_CLASSIFICATION	0.0013658713946766666	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999508879115984	WITHOUT_CLASSIFICATION	4.911208840169451E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999152411923141	WITHOUT_CLASSIFICATION	8.475880768599413E-5	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9995969466146589	WITHOUT_CLASSIFICATION	4.030533853410576E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9998359952070892	WITHOUT_CLASSIFICATION	1.640047929106983E-4	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999258717705042	WITHOUT_CLASSIFICATION	7.412822949580301E-5	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999431837975581	WITHOUT_CLASSIFICATION	5.681620244189661E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999980842595602	WITHOUT_CLASSIFICATION	1.915740439846374E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999978802608916	WITHOUT_CLASSIFICATION	2.119739108400157E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999944750237234	WITHOUT_CLASSIFICATION	5.524976276554347E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999696661163147	WITHOUT_CLASSIFICATION	3.0333883685360193E-5	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999990766890141	WITHOUT_CLASSIFICATION	9.233109858876087E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998619825784826	WITHOUT_CLASSIFICATION	1.380174215173184E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999959241741938	WITHOUT_CLASSIFICATION	4.075825806194641E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999062642627135	WITHOUT_CLASSIFICATION	9.373573728648045E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999293037643009	WITHOUT_CLASSIFICATION	7.069623569909601E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999905213249964	WITHOUT_CLASSIFICATION	9.478675003596248E-5	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999082595584627	WITHOUT_CLASSIFICATION	9.17404415373024E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9984597118775379	WITHOUT_CLASSIFICATION	0.0015402881224621317	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9999239804542588	WITHOUT_CLASSIFICATION	7.601954574123826E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999598316121019	WITHOUT_CLASSIFICATION	4.0168387898014164E-5	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999787830507105	WITHOUT_CLASSIFICATION	2.121694928948126E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999062524122203	WITHOUT_CLASSIFICATION	9.374758777966321E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.998520988658566	WITHOUT_CLASSIFICATION	0.0014790113414340788	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999774438377763	WITHOUT_CLASSIFICATION	2.2556162223611872E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998197652346846	WITHOUT_CLASSIFICATION	1.8023476531532463E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999554680578929	WITHOUT_CLASSIFICATION	4.4531942107103E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998445220841176	WITHOUT_CLASSIFICATION	1.55477915882418E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999918194352755	WITHOUT_CLASSIFICATION	8.180564724536366E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999975919147751	WITHOUT_CLASSIFICATION	2.408085224906115E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999906784865974	WITHOUT_CLASSIFICATION	9.321513402510876E-6	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9996078281109934	WITHOUT_CLASSIFICATION	3.9217188900660533E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999632909687843	WITHOUT_CLASSIFICATION	3.670903121559883E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9980891399701977	WITHOUT_CLASSIFICATION	0.0019108600298023849	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999150275773632	WITHOUT_CLASSIFICATION	8.497242263684082E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9987589729470643	WITHOUT_CLASSIFICATION	0.0012410270529358183	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999810094386556	WITHOUT_CLASSIFICATION	1.899056134434108E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999977296378176	WITHOUT_CLASSIFICATION	2.2703621824055367E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999977296378176	WITHOUT_CLASSIFICATION	2.2703621824055367E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.99999541411989	WITHOUT_CLASSIFICATION	4.585880110045578E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9995438664737526	WITHOUT_CLASSIFICATION	4.561335262475064E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999782580746281	WITHOUT_CLASSIFICATION	2.1741925371775687E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999226569414181	WITHOUT_CLASSIFICATION	7.734305858182522E-5	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999342456276868	WITHOUT_CLASSIFICATION	6.575437231313304E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997900328749045	WITHOUT_CLASSIFICATION	2.099671250954462E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999922087309024	WITHOUT_CLASSIFICATION	7.791269097442753E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999522280409755	WITHOUT_CLASSIFICATION	4.777195902449428E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997617186842171	WITHOUT_CLASSIFICATION	2.3828131578287448E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999685543305137	WITHOUT_CLASSIFICATION	3.1445669486361586E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999494731027052	WITHOUT_CLASSIFICATION	5.052689729485148E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996208590735227	WITHOUT_CLASSIFICATION	3.7914092647726945E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996211753551	WITHOUT_CLASSIFICATION	3.7882464484051705E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999993703892577	WITHOUT_CLASSIFICATION	6.296107423514621E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999362889172946	WITHOUT_CLASSIFICATION	6.371108270539424E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999362889172946	WITHOUT_CLASSIFICATION	6.371108270539424E-5	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999197762385286	WITHOUT_CLASSIFICATION	8.022376147140666E-5	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9993208706739254	WITHOUT_CLASSIFICATION	6.791293260746974E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999459121306107	WITHOUT_CLASSIFICATION	5.4087869389283E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999782513683102	WITHOUT_CLASSIFICATION	2.174863168971976E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999932922664002	WITHOUT_CLASSIFICATION	6.7077335997558E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999353112830346	WITHOUT_CLASSIFICATION	6.468871696544144E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999314917833029	WITHOUT_CLASSIFICATION	6.850821669719094E-5	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9998532038254087	WITHOUT_CLASSIFICATION	1.467961745913202E-4	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.99671434018855	WITHOUT_CLASSIFICATION	0.003285659811450046	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999975508542822	WITHOUT_CLASSIFICATION	2.4491457177527532E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998743891856736	WITHOUT_CLASSIFICATION	1.2561081432641808E-4	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999737695647305	WITHOUT_CLASSIFICATION	2.6230435269540264E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9998180250261296	WITHOUT_CLASSIFICATION	1.8197497387034288E-4	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999962406089077	WITHOUT_CLASSIFICATION	3.7593910923184177E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999038816923508	WITHOUT_CLASSIFICATION	9.611830764926237E-5	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998909033915552	WITHOUT_CLASSIFICATION	1.0909660844477572E-4	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999693725360791	WITHOUT_CLASSIFICATION	3.0627463920900586E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999789665807445	WITHOUT_CLASSIFICATION	2.1033419255453024E-5	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999917005491824	WITHOUT_CLASSIFICATION	8.299450817594953E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9994985041337088	WITHOUT_CLASSIFICATION	5.014958662912487E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999940668515811	WITHOUT_CLASSIFICATION	5.933148418906481E-6	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998760828215348	WITHOUT_CLASSIFICATION	1.2391717846520033E-4	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998483973593558	WITHOUT_CLASSIFICATION	1.5160264064413445E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999973514080828	WITHOUT_CLASSIFICATION	2.648591917361411E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999923389416484	WITHOUT_CLASSIFICATION	7.6610583516405E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9998977949762788	WITHOUT_CLASSIFICATION	1.0220502372108793E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9996503880737952	WITHOUT_CLASSIFICATION	3.4961192620476636E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998667537552617	WITHOUT_CLASSIFICATION	1.332462447383285E-4	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998989788962731	WITHOUT_CLASSIFICATION	1.0102110372687208E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9993065873531358	WITHOUT_CLASSIFICATION	6.934126468641937E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9995559861701881	WITHOUT_CLASSIFICATION	4.440138298118613E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999304944511317	WITHOUT_CLASSIFICATION	6.95055488682713E-5	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9997375390698963	WITHOUT_CLASSIFICATION	2.6246093010374294E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999829850069876	WITHOUT_CLASSIFICATION	1.7014993012402636E-4	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999953139727115	WITHOUT_CLASSIFICATION	4.686027288520962E-6	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992759094161672	WITHOUT_CLASSIFICATION	7.240905838328849E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999624117501755	WITHOUT_CLASSIFICATION	3.758824982460259E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999815291093014	WITHOUT_CLASSIFICATION	1.8470890698599874E-4	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999550167816017	WITHOUT_CLASSIFICATION	4.498321839827053E-5	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999669642469564	WITHOUT_CLASSIFICATION	3.3035753043598483E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9989596593841313	WITHOUT_CLASSIFICATION	0.0010403406158686547	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999883884759161	WITHOUT_CLASSIFICATION	1.1611524083930419E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9829946822846466	WITHOUT_CLASSIFICATION	0.01700531771535348	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9829946822846466	WITHOUT_CLASSIFICATION	0.01700531771535348	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999781876057734	WITHOUT_CLASSIFICATION	2.181239422667394E-5	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9737476299503955	WITHOUT_CLASSIFICATION	0.02625237004960441	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.999976481782763	WITHOUT_CLASSIFICATION	2.3518217236967914E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999554748362884	WITHOUT_CLASSIFICATION	4.452516371168127E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9995049334019814	WITHOUT_CLASSIFICATION	4.950665980184801E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998810662937706	WITHOUT_CLASSIFICATION	1.1893370622941048E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999754563466472	WITHOUT_CLASSIFICATION	2.454365335280392E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999963875896944	WITHOUT_CLASSIFICATION	3.6124103056005476E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9990251130102209	WITHOUT_CLASSIFICATION	9.748869897791716E-4	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999806990431025	WITHOUT_CLASSIFICATION	1.930095689750481E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998939468379513	WITHOUT_CLASSIFICATION	1.060531620487886E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9992274193370182	WITHOUT_CLASSIFICATION	7.725806629819154E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997377869370464	WITHOUT_CLASSIFICATION	2.6221306295358296E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999509415578252	WITHOUT_CLASSIFICATION	4.905844217481362E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997633504615484	WITHOUT_CLASSIFICATION	2.366495384515531E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9997163687028982	WITHOUT_CLASSIFICATION	2.83631297101856E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999953774308006	WITHOUT_CLASSIFICATION	4.622569199403358E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9987178292895313	WITHOUT_CLASSIFICATION	0.001282170710468689	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9994209282959003	WITHOUT_CLASSIFICATION	5.790717040996611E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9985504977325154	WITHOUT_CLASSIFICATION	0.0014495022674845272	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9985965273349386	WITHOUT_CLASSIFICATION	0.0014034726650612916	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9996181785545282	WITHOUT_CLASSIFICATION	3.818214454717232E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.999972989611412	WITHOUT_CLASSIFICATION	2.7010388587964067E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999815375859643	WITHOUT_CLASSIFICATION	1.8462414035745756E-5	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999424678008343	WITHOUT_CLASSIFICATION	5.7532199165723346E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999770804454339	WITHOUT_CLASSIFICATION	2.2919554566112817E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999934931771941	WITHOUT_CLASSIFICATION	6.506822805897206E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999173005652641	WITHOUT_CLASSIFICATION	8.269943473591456E-5	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9926753178036479	WITHOUT_CLASSIFICATION	0.0073246821963520985	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999673903901267	WITHOUT_CLASSIFICATION	3.260960987328291E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9995328958639687	WITHOUT_CLASSIFICATION	4.671041360313789E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999955549878886	WITHOUT_CLASSIFICATION	4.445012111410662E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999700309074512	WITHOUT_CLASSIFICATION	2.9969092548778815E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9997228049201744	WITHOUT_CLASSIFICATION	2.771950798256137E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998564479583744	WITHOUT_CLASSIFICATION	1.4355204162568708E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999886452203749	WITHOUT_CLASSIFICATION	1.1354779625089992E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997151286689073	WITHOUT_CLASSIFICATION	2.8487133109272406E-4	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998561274456934	WITHOUT_CLASSIFICATION	1.438725543065402E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998501345416103	WITHOUT_CLASSIFICATION	1.4986545838960113E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999842250939869	WITHOUT_CLASSIFICATION	1.5774906013095604E-5	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999605974845359	WITHOUT_CLASSIFICATION	3.940251546411196E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999304442072968	WITHOUT_CLASSIFICATION	6.955579270319111E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999588375408871	WITHOUT_CLASSIFICATION	4.1162459112901306E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9981012648074806	WITHOUT_CLASSIFICATION	0.0018987351925194233	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999600745064025	WITHOUT_CLASSIFICATION	3.9925493597566555E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.999984191895259	WITHOUT_CLASSIFICATION	1.580810474098447E-5	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999986606075315	WITHOUT_CLASSIFICATION	1.339392468474282E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9993381020936423	WITHOUT_CLASSIFICATION	6.618979063577258E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9994050670694403	WITHOUT_CLASSIFICATION	5.949329305596345E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999996211753551	WITHOUT_CLASSIFICATION	3.7882464484051705E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998367236428206	WITHOUT_CLASSIFICATION	1.6327635717949552E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999939653553735	WITHOUT_CLASSIFICATION	6.034644626416555E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998936391531512	WITHOUT_CLASSIFICATION	1.0636084684876134E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999338097733036	WITHOUT_CLASSIFICATION	6.619022669643991E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999981768673311	WITHOUT_CLASSIFICATION	1.8231326688876936E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995694220998872	WITHOUT_CLASSIFICATION	4.305779001128928E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9980613609494622	WITHOUT_CLASSIFICATION	0.0019386390505379079	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.7700335428461994	WITHOUT_CLASSIFICATION	0.22996645715380065	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999921276708423	WITHOUT_CLASSIFICATION	7.872329157546155E-6	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9995873882180196	WITHOUT_CLASSIFICATION	4.126117819804528E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999989301654859	WITHOUT_CLASSIFICATION	1.0698345140840875E-6	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9873708303670085	WITHOUT_CLASSIFICATION	0.012629169632991549	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9984516058944732	WITHOUT_CLASSIFICATION	0.0015483941055267204	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999779467531279	WITHOUT_CLASSIFICATION	2.2053246872136442E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9976843890764632	WITHOUT_CLASSIFICATION	0.00231561092353692	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998658867734166	WITHOUT_CLASSIFICATION	1.341132265834421E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999482525558024	WITHOUT_CLASSIFICATION	5.1747444197566714E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999976578134282	WITHOUT_CLASSIFICATION	2.3421865718682015E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9989406800032464	WITHOUT_CLASSIFICATION	0.0010593199967534716	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998658867734166	WITHOUT_CLASSIFICATION	1.341132265834421E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9989366666177993	WITHOUT_CLASSIFICATION	0.0010633333822007134	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999597239589088	WITHOUT_CLASSIFICATION	4.0276041091281716E-5	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999911829043435	WITHOUT_CLASSIFICATION	8.817095656448718E-6	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9987686549498114	WITHOUT_CLASSIFICATION	0.0012313450501886167	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999467344762262	WITHOUT_CLASSIFICATION	5.326552377379776E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9959721797770315	WITHOUT_CLASSIFICATION	0.004027820222968592	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999928498335194	WITHOUT_CLASSIFICATION	7.150166480594965E-6	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9998946315777927	WITHOUT_CLASSIFICATION	1.0536842220739703E-4	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999986476648293	WITHOUT_CLASSIFICATION	1.3523351707049688E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.967259918076704	WITHOUT_CLASSIFICATION	0.032740081923296034	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9998237502345703	WITHOUT_CLASSIFICATION	1.7624976542977673E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9962724856001917	WITHOUT_CLASSIFICATION	0.0037275143998083244	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999469132514963	WITHOUT_CLASSIFICATION	5.3086748503633626E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999646479903732	WITHOUT_CLASSIFICATION	3.53520096267698E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999693553313038	WITHOUT_CLASSIFICATION	3.064466869625229E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997579966554692	WITHOUT_CLASSIFICATION	2.4200334453080687E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9952863724016093	WITHOUT_CLASSIFICATION	0.004713627598390734	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9989994376119753	WITHOUT_CLASSIFICATION	0.0010005623880246933	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999796866493458	WITHOUT_CLASSIFICATION	2.0313350654149685E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9989568885263095	WITHOUT_CLASSIFICATION	0.0010431114736904703	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9954934211802478	WITHOUT_CLASSIFICATION	0.0045065788197522424	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999939425099348	WITHOUT_CLASSIFICATION	6.057490065205909E-6	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998211723188399	WITHOUT_CLASSIFICATION	1.7882768116004208E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9979992879220274	WITHOUT_CLASSIFICATION	0.0020007120779725056	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999962279022	WITHOUT_CLASSIFICATION	3.77209780324196E-8	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999983564583844	WITHOUT_CLASSIFICATION	1.6435416155140868E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999931052737166	WITHOUT_CLASSIFICATION	6.894726283403259E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997473921411522	WITHOUT_CLASSIFICATION	2.526078588478763E-4	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999515445177194	WITHOUT_CLASSIFICATION	4.845548228047366E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9955689402558657	WITHOUT_CLASSIFICATION	0.004431059744134209	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999897680029053	WITHOUT_CLASSIFICATION	1.0231997094785988E-5	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999441010606028	WITHOUT_CLASSIFICATION	5.589893939727176E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997771560608472	WITHOUT_CLASSIFICATION	2.2284393915283197E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9987756072074039	WITHOUT_CLASSIFICATION	0.001224392792596141	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999532951092448	WITHOUT_CLASSIFICATION	4.670489075525934E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999989360794014	WITHOUT_CLASSIFICATION	1.0639205985666348E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999993036775826	WITHOUT_CLASSIFICATION	6.963224173652661E-7	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999639087861938	WITHOUT_CLASSIFICATION	3.609121380626412E-5	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9998789236208182	WITHOUT_CLASSIFICATION	1.210763791816914E-4	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999652941719023	WITHOUT_CLASSIFICATION	3.4705828097728655E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998921706664232	WITHOUT_CLASSIFICATION	1.0782933357681277E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999822445552375	WITHOUT_CLASSIFICATION	1.7755444762403236E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999822445552375	WITHOUT_CLASSIFICATION	1.7755444762403236E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9991108909164419	WITHOUT_CLASSIFICATION	8.891090835581221E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999868328142966	WITHOUT_CLASSIFICATION	1.3167185703411903E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999158479574225	WITHOUT_CLASSIFICATION	8.415204257749419E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.999997655104238	WITHOUT_CLASSIFICATION	2.3448957620028654E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999934195393638	WITHOUT_CLASSIFICATION	6.580460636127589E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999934195393638	WITHOUT_CLASSIFICATION	6.580460636127589E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999904001834758	WITHOUT_CLASSIFICATION	9.599816524163117E-6	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999986074160994	WITHOUT_CLASSIFICATION	1.3925839005938844E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995288967545294	WITHOUT_CLASSIFICATION	4.7110324547063547E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998200377329934	WITHOUT_CLASSIFICATION	1.7996226700667635E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999890425895344	WITHOUT_CLASSIFICATION	1.0957410465594319E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999687142155935	WITHOUT_CLASSIFICATION	3.128578440655462E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999756249730463	WITHOUT_CLASSIFICATION	2.4375026953773126E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9997022535920249	WITHOUT_CLASSIFICATION	2.9774640797516146E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9996787936603835	WITHOUT_CLASSIFICATION	3.21206339616432E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999381655415062	WITHOUT_CLASSIFICATION	6.183445849384271E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999576383846173	WITHOUT_CLASSIFICATION	4.236161538273334E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261065187007	WITHOUT_CLASSIFICATION	7.389348129919476E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999261065187007	WITHOUT_CLASSIFICATION	7.389348129919476E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997579966554692	WITHOUT_CLASSIFICATION	2.4200334453080687E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999897570655151	WITHOUT_CLASSIFICATION	1.0242934484842238E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999905257608896	WITHOUT_CLASSIFICATION	9.474239110367483E-6	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999702333809503	WITHOUT_CLASSIFICATION	2.9766619049725875E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999675041445418	WITHOUT_CLASSIFICATION	3.24958554581847E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998368031182594	WITHOUT_CLASSIFICATION	1.6319688174067912E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999332336741567	WITHOUT_CLASSIFICATION	6.67663258433082E-5	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999588988980439	WITHOUT_CLASSIFICATION	4.1101101956187753E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.999906871440752	WITHOUT_CLASSIFICATION	9.312855924811518E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999261146747044	WITHOUT_CLASSIFICATION	7.388532529556582E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.967259918076704	WITHOUT_CLASSIFICATION	0.032740081923296034	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999952173165788	WITHOUT_CLASSIFICATION	4.7826834211185176E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9989925713631659	WITHOUT_CLASSIFICATION	0.0010074286368340559	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999904498529315	WITHOUT_CLASSIFICATION	9.55014706847897E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999136234165718	WITHOUT_CLASSIFICATION	8.637658342824746E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998970878334084	WITHOUT_CLASSIFICATION	1.0291216659172142E-4	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998574910609448	WITHOUT_CLASSIFICATION	1.4250893905517662E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999967207978486	WITHOUT_CLASSIFICATION	3.279202151390866E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999869756888284	WITHOUT_CLASSIFICATION	1.3024311171614354E-5	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9998995592910029	WITHOUT_CLASSIFICATION	1.0044070899711732E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9991745321148799	WITHOUT_CLASSIFICATION	8.254678851199719E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9991745321148799	WITHOUT_CLASSIFICATION	8.254678851199719E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999554533647272	WITHOUT_CLASSIFICATION	4.454663527275575E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999990610918749	WITHOUT_CLASSIFICATION	9.38908125091399E-7	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999930852942259	WITHOUT_CLASSIFICATION	6.914705774092003E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9998937232841513	WITHOUT_CLASSIFICATION	1.0627671584878794E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999928062156513	WITHOUT_CLASSIFICATION	7.193784348648989E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998989071662508	WITHOUT_CLASSIFICATION	1.0109283374924028E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998554657743008	WITHOUT_CLASSIFICATION	1.4453422569920413E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9997438899149897	WITHOUT_CLASSIFICATION	2.5611008501032976E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999972465282625	WITHOUT_CLASSIFICATION	2.7534717375029908E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998040086738914	WITHOUT_CLASSIFICATION	1.959913261085727E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999089667397346	WITHOUT_CLASSIFICATION	9.103326026547059E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999367981357745	WITHOUT_CLASSIFICATION	6.3201864225493E-5	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999780748749391	WITHOUT_CLASSIFICATION	2.1925125060996374E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999867346325063	WITHOUT_CLASSIFICATION	1.3265367493606939E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999865151032541	WITHOUT_CLASSIFICATION	1.3484896745902112E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999773579616198	WITHOUT_CLASSIFICATION	2.2642038380237215E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9973099226703331	WITHOUT_CLASSIFICATION	0.0026900773296668614	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9998316854837818	WITHOUT_CLASSIFICATION	1.6831451621828446E-4	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9994788448988723	WITHOUT_CLASSIFICATION	5.211551011276958E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9308083835413451	WITHOUT_CLASSIFICATION	0.06919161645865483	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999925561556606	WITHOUT_CLASSIFICATION	7.443844339407565E-5	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999999176293437	WITHOUT_CLASSIFICATION	8.237065631034733E-8	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999721921503357	WITHOUT_CLASSIFICATION	2.7807849664231683E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999828898097	WITHOUT_CLASSIFICATION	1.7110190253625696E-8	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999919447344465	WITHOUT_CLASSIFICATION	8.055265553482419E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999919447344465	WITHOUT_CLASSIFICATION	8.055265553482419E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998785485612163	WITHOUT_CLASSIFICATION	1.2145143878375906E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999059690484108	WITHOUT_CLASSIFICATION	9.403095158931035E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999837381934399	WITHOUT_CLASSIFICATION	1.6261806560085145E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998480976731889	WITHOUT_CLASSIFICATION	1.5190232681113247E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.999971641591516	WITHOUT_CLASSIFICATION	2.83584084840052E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9743090023125027	WITHOUT_CLASSIFICATION	0.025690997687497292	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.985127977262592	WITHOUT_CLASSIFICATION	0.014872022737407974	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998284321839382	WITHOUT_CLASSIFICATION	1.715678160616773E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.9204589326945464	DEFECT	0.07954106730545359	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.8810379170970225	WITHOUT_CLASSIFICATION	0.11896208290297748	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.999808647814876	WITHOUT_CLASSIFICATION	1.9135218512390383E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9997278635114267	WITHOUT_CLASSIFICATION	2.721364885732401E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999731413510518	WITHOUT_CLASSIFICATION	2.6858648948143438E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.9994314419691978	WITHOUT_CLASSIFICATION	5.685580308023275E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.8404938266956706	DEFECT	0.15950617330432926	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7925666854125689	WITHOUT_CLASSIFICATION	0.20743331458743122	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.7113651470459418	WITHOUT_CLASSIFICATION	0.2886348529540582	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.8537503207262532	DEFECT	0.14624967927374674	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8724306139075495	WITHOUT_CLASSIFICATION	0.12756938609245055	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8724306139075495	WITHOUT_CLASSIFICATION	0.12756938609245055	DEFECT
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9738915158641362	WITHOUT_CLASSIFICATION	0.02610848413586378	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999492747936273	WITHOUT_CLASSIFICATION	5.072520637269095E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.8713475867830335	DEFECT	0.12865241321696644	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9997496744499907	WITHOUT_CLASSIFICATION	2.503255500092388E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9368580240784864	DEFECT	0.06314197592151365	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9325366605525733	WITHOUT_CLASSIFICATION	0.06746333944742669	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.8903275128831796	WITHOUT_CLASSIFICATION	0.10967248711682051	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9420613304997868	WITHOUT_CLASSIFICATION	0.05793866950021313	DEFECT
TODO: is this completely correct?	DEFECT	0.7044175291535378	WITHOUT_CLASSIFICATION	0.2955824708464621	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.7710332241879985	WITHOUT_CLASSIFICATION	0.22896677581200156	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8022773026439763	WITHOUT_CLASSIFICATION	0.19772269735602374	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9846978833566746	WITHOUT_CLASSIFICATION	0.015302116643325295	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5447701062093282	WITHOUT_CLASSIFICATION	0.45522989379067186	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9999958392554833	DEFECT	4.160744516699072E-6	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5487995149674431	DEFECT	0.451200485032557	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9855950251483004	DEFECT	0.014404974851699536	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8918611128376692	DEFECT	0.10813888716233072	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8270142000257062	DEFECT	0.17298579997429364	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.6792664554551259	WITHOUT_CLASSIFICATION	0.32073354454487407	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8724306139075495	WITHOUT_CLASSIFICATION	0.12756938609245055	DEFECT
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9811940499148727	DEFECT	0.01880595008512733	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.9252731274037042	DEFECT	0.07472687259629582	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.9934537026673381	WITHOUT_CLASSIFICATION	0.006546297332661818	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9996276001814483	WITHOUT_CLASSIFICATION	3.723998185517893E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.988557416089864	WITHOUT_CLASSIFICATION	0.011442583910135867	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9977356060822258	WITHOUT_CLASSIFICATION	0.0022643939177742108	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.998792978382256	WITHOUT_CLASSIFICATION	0.0012070216177439501	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.8010370004369335	WITHOUT_CLASSIFICATION	0.19896299956306657	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.5139725167866621	DEFECT	0.48602748321333794	WITHOUT_CLASSIFICATION
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9280495061227417	WITHOUT_CLASSIFICATION	0.07195049387725826	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.8733696900050459	WITHOUT_CLASSIFICATION	0.12663030999495406	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.8294594101185503	WITHOUT_CLASSIFICATION	0.1705405898814497	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9970095902172437	WITHOUT_CLASSIFICATION	0.0029904097827564225	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9994286322629613	WITHOUT_CLASSIFICATION	5.713677370386515E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.6826650000663251	DEFECT	0.31733499993367487	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.6983620150445947	DEFECT	0.3016379849554053	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999873736489335	DEFECT	1.2626351066408267E-5	WITHOUT_CLASSIFICATION
