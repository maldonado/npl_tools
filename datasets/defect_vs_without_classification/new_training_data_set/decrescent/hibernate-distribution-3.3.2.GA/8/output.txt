test out the optimizer:	WITHOUT_CLASSIFICATION	0.999985136038796	WITHOUT_CLASSIFICATION	1.4863961203961238E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9994116769265363	WITHOUT_CLASSIFICATION	5.883230734637447E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999547526407544	WITHOUT_CLASSIFICATION	4.524735924560702E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999515256397304	WITHOUT_CLASSIFICATION	4.8474360269528976E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999515256397304	WITHOUT_CLASSIFICATION	4.8474360269528976E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940546625353	WITHOUT_CLASSIFICATION	5.945337464586771E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999119976494749	WITHOUT_CLASSIFICATION	8.800235052504032E-5	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999983215446956	WITHOUT_CLASSIFICATION	1.6784553043987065E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999337486910479	WITHOUT_CLASSIFICATION	6.625130895208348E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999974467247597	WITHOUT_CLASSIFICATION	2.553275240319764E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999974467247597	WITHOUT_CLASSIFICATION	2.553275240319764E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999979244152006	WITHOUT_CLASSIFICATION	2.075584799389786E-6	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999685597735415	WITHOUT_CLASSIFICATION	3.144022645856408E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9999358400320382	WITHOUT_CLASSIFICATION	6.415996796187396E-5	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999725887304745	WITHOUT_CLASSIFICATION	2.741126952550548E-5	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999883844716032	WITHOUT_CLASSIFICATION	1.1615528396872592E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999920436009412	WITHOUT_CLASSIFICATION	7.956399058855433E-6	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999921913753659	WITHOUT_CLASSIFICATION	7.808624634114318E-6	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999527422174204	WITHOUT_CLASSIFICATION	4.7257782579696946E-5	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999219366875717	WITHOUT_CLASSIFICATION	7.80633124282956E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999632535586149	WITHOUT_CLASSIFICATION	3.6746441384976925E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919903368352	WITHOUT_CLASSIFICATION	8.009663164887976E-6	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919903368352	WITHOUT_CLASSIFICATION	8.009663164887976E-6	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9993057515198307	WITHOUT_CLASSIFICATION	6.942484801692814E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999930810966261	WITHOUT_CLASSIFICATION	6.9189033738863855E-6	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999645483482654	WITHOUT_CLASSIFICATION	3.545165173458556E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999528169961511	WITHOUT_CLASSIFICATION	4.718300384887794E-5	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9977624976617386	WITHOUT_CLASSIFICATION	0.0022375023382613496	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999985634988987	WITHOUT_CLASSIFICATION	1.436501101322832E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999099783621003	WITHOUT_CLASSIFICATION	9.002163789971373E-5	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999842262489216	WITHOUT_CLASSIFICATION	1.577375107846882E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9995427520234741	WITHOUT_CLASSIFICATION	4.5724797652595833E-4	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999649981611262	WITHOUT_CLASSIFICATION	3.500183887387669E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9997780524067775	WITHOUT_CLASSIFICATION	2.2194759322256618E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999893581638889	WITHOUT_CLASSIFICATION	1.064183611114954E-5	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999716888028781	WITHOUT_CLASSIFICATION	2.8311197121960228E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999057320963358	WITHOUT_CLASSIFICATION	9.426790366411763E-5	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999385679534939	WITHOUT_CLASSIFICATION	6.143204650610245E-5	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998611155842806	WITHOUT_CLASSIFICATION	1.388844157193441E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999793694702245	WITHOUT_CLASSIFICATION	2.0630529775552004E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9252274901311327	WITHOUT_CLASSIFICATION	0.07477250986886735	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999926481483385	WITHOUT_CLASSIFICATION	7.351851661491575E-6	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999926481483385	WITHOUT_CLASSIFICATION	7.351851661491575E-6	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999793694702245	WITHOUT_CLASSIFICATION	2.0630529775552004E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9994990494827363	WITHOUT_CLASSIFICATION	5.009505172638463E-4	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999009468334316	WITHOUT_CLASSIFICATION	9.905316656839015E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998525653335395	WITHOUT_CLASSIFICATION	1.4743466646040693E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999838811829603	WITHOUT_CLASSIFICATION	1.6118817039650753E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999998238421138	WITHOUT_CLASSIFICATION	1.761578861533813E-7	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.997692654107335	WITHOUT_CLASSIFICATION	0.002307345892665072	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9996225046354256	WITHOUT_CLASSIFICATION	3.774953645744505E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999994398221785	WITHOUT_CLASSIFICATION	5.6017782149252194E-6	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.999812280192473	WITHOUT_CLASSIFICATION	1.877198075269228E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997810139925	WITHOUT_CLASSIFICATION	2.1898600749995309E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999926481483385	WITHOUT_CLASSIFICATION	7.351851661491575E-6	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999985446704531	WITHOUT_CLASSIFICATION	1.45532954689705E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9991988669600634	WITHOUT_CLASSIFICATION	8.011330399365366E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9987606101515891	WITHOUT_CLASSIFICATION	0.001239389848410886	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9994344823318102	WITHOUT_CLASSIFICATION	5.655176681897321E-4	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999537382517099	WITHOUT_CLASSIFICATION	4.626174829019582E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9997499915306726	WITHOUT_CLASSIFICATION	2.500084693274225E-4	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999473840882797	WITHOUT_CLASSIFICATION	5.261591172035403E-5	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999627296235553	WITHOUT_CLASSIFICATION	3.7270376444808594E-5	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999825253636845	WITHOUT_CLASSIFICATION	1.7474636315579044E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993908400855	WITHOUT_CLASSIFICATION	6.091599145782264E-7	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999797441533669	WITHOUT_CLASSIFICATION	2.0255846633180976E-5	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999441858150533	WITHOUT_CLASSIFICATION	5.5814184946745525E-5	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9993317206271604	WITHOUT_CLASSIFICATION	6.682793728397195E-4	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999721174880031	WITHOUT_CLASSIFICATION	2.788251199689331E-5	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999572618719642	WITHOUT_CLASSIFICATION	4.273812803573267E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999987423680871	WITHOUT_CLASSIFICATION	1.2576319129557415E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.99979669669095	WITHOUT_CLASSIFICATION	2.03303309050136E-4	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999632250390049	WITHOUT_CLASSIFICATION	3.67749609950057E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999999147712713	WITHOUT_CLASSIFICATION	8.522872869448768E-7	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999886788289986	WITHOUT_CLASSIFICATION	1.1321171001419458E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998551568736288	WITHOUT_CLASSIFICATION	1.4484312637113488E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997611536388639	WITHOUT_CLASSIFICATION	2.3884636113606774E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998971804793306	WITHOUT_CLASSIFICATION	1.0281952066928813E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999695195029966	WITHOUT_CLASSIFICATION	3.0480497003400403E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997611536388639	WITHOUT_CLASSIFICATION	2.3884636113606774E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9993101753459573	WITHOUT_CLASSIFICATION	6.898246540427224E-4	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9996238204841025	WITHOUT_CLASSIFICATION	3.761795158975631E-4	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999962520736136	WITHOUT_CLASSIFICATION	3.7479263864352656E-6	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999719968448147	WITHOUT_CLASSIFICATION	2.8003155185322068E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999902947264678	WITHOUT_CLASSIFICATION	9.70527353217474E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999902947264678	WITHOUT_CLASSIFICATION	9.70527353217474E-6	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999274233207112	WITHOUT_CLASSIFICATION	7.257667928880628E-5	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999994341364313	WITHOUT_CLASSIFICATION	5.658635687304769E-7	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999128267116931	WITHOUT_CLASSIFICATION	8.717328830694727E-5	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999949724872053	WITHOUT_CLASSIFICATION	5.027512794774266E-6	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999734100869241	WITHOUT_CLASSIFICATION	2.6589913075884967E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999950634636168	WITHOUT_CLASSIFICATION	4.936536383203875E-6	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999351118608595	WITHOUT_CLASSIFICATION	6.488813914049098E-5	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.999977354566939	WITHOUT_CLASSIFICATION	2.264543306099889E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999733196712661	WITHOUT_CLASSIFICATION	2.6680328733908647E-5	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999686193843031	WITHOUT_CLASSIFICATION	3.138061569692023E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999973928416618	WITHOUT_CLASSIFICATION	2.6071583382748847E-6	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999973928416618	WITHOUT_CLASSIFICATION	2.6071583382748847E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999262713711411	WITHOUT_CLASSIFICATION	7.372862885900145E-5	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9998666450608377	WITHOUT_CLASSIFICATION	1.3335493916233205E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999536390586831	WITHOUT_CLASSIFICATION	4.6360941317044694E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999973928416618	WITHOUT_CLASSIFICATION	2.6071583382748847E-6	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999262713711411	WITHOUT_CLASSIFICATION	7.372862885900145E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999262713711411	WITHOUT_CLASSIFICATION	7.372862885900145E-5	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999652944935079	WITHOUT_CLASSIFICATION	3.4705506492138866E-5	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999364302726873	WITHOUT_CLASSIFICATION	6.356972731273376E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999823863966265	WITHOUT_CLASSIFICATION	1.7613603373517967E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999929028447156	WITHOUT_CLASSIFICATION	7.09715528439092E-6	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996329340823096	WITHOUT_CLASSIFICATION	3.670659176904578E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9996329340823096	WITHOUT_CLASSIFICATION	3.670659176904578E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999290482423032	WITHOUT_CLASSIFICATION	7.095175769682101E-5	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999243467429791	WITHOUT_CLASSIFICATION	7.56532570208328E-5	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999613431604429	WITHOUT_CLASSIFICATION	3.8656839557078715E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999252288071941	WITHOUT_CLASSIFICATION	7.477119280580182E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999252288071941	WITHOUT_CLASSIFICATION	7.477119280580182E-5	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998782315830923	WITHOUT_CLASSIFICATION	1.2176841690765032E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999730325172331	WITHOUT_CLASSIFICATION	2.6967482766768393E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996162915382946	WITHOUT_CLASSIFICATION	3.8370846170552664E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999039337311821	WITHOUT_CLASSIFICATION	9.606626881793892E-5	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999645408018198	WITHOUT_CLASSIFICATION	3.545919818019042E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999498876695194	WITHOUT_CLASSIFICATION	5.01123304805841E-5	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999407243363838	WITHOUT_CLASSIFICATION	5.9275663616217375E-5	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999893115401938	WITHOUT_CLASSIFICATION	1.0688459806329618E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9996162915382946	WITHOUT_CLASSIFICATION	3.8370846170552664E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999921385328526	WITHOUT_CLASSIFICATION	7.861467147287719E-6	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999760066072947	WITHOUT_CLASSIFICATION	2.3993392705338295E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999760066072947	WITHOUT_CLASSIFICATION	2.3993392705338295E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999988898128068	WITHOUT_CLASSIFICATION	1.1101871932510896E-6	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9998494352297691	WITHOUT_CLASSIFICATION	1.5056477023089377E-4	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999732347591556	WITHOUT_CLASSIFICATION	2.676524084444148E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999411045244259	WITHOUT_CLASSIFICATION	5.889547557426518E-5	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998949597072644	WITHOUT_CLASSIFICATION	1.0504029273555904E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999854269256966	WITHOUT_CLASSIFICATION	1.4573074303339402E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.999962260387897	WITHOUT_CLASSIFICATION	3.7739612102958576E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9998553657139975	WITHOUT_CLASSIFICATION	1.4463428600251056E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999971106685381	WITHOUT_CLASSIFICATION	2.8893314618989867E-6	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999814909057116	WITHOUT_CLASSIFICATION	1.85090942883157E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999814909057116	WITHOUT_CLASSIFICATION	1.85090942883157E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999985136038796	WITHOUT_CLASSIFICATION	1.4863961203961238E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999894542426382	WITHOUT_CLASSIFICATION	1.054575736175927E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999919122902087	WITHOUT_CLASSIFICATION	8.087709791309853E-5	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999352827250645	WITHOUT_CLASSIFICATION	6.471727493546888E-5	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999494971132084	WITHOUT_CLASSIFICATION	5.050288679157307E-5	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.9998150627208303	WITHOUT_CLASSIFICATION	1.8493727916969705E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999424498301185	WITHOUT_CLASSIFICATION	5.755016988149476E-4	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999945945296608	WITHOUT_CLASSIFICATION	5.405470339187701E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999920131937176	WITHOUT_CLASSIFICATION	7.98680628247735E-6	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999368662197681	WITHOUT_CLASSIFICATION	6.313378023199496E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.9998150627208303	WITHOUT_CLASSIFICATION	1.8493727916969705E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9985857473118778	WITHOUT_CLASSIFICATION	0.001414252688122179	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9996320521482631	WITHOUT_CLASSIFICATION	3.6794785173677305E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999561032688224	WITHOUT_CLASSIFICATION	4.389673117760043E-5	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999385517586525	WITHOUT_CLASSIFICATION	6.144824134743997E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999841763995656	WITHOUT_CLASSIFICATION	1.582360043440836E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999515256397304	WITHOUT_CLASSIFICATION	4.8474360269528976E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999856795650636	WITHOUT_CLASSIFICATION	1.4320434936399305E-4	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999956388504259	WITHOUT_CLASSIFICATION	4.361149574141306E-6	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999275390595627	WITHOUT_CLASSIFICATION	7.246094043741353E-5	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9998553898519509	WITHOUT_CLASSIFICATION	1.4461014804901813E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999919802270417	WITHOUT_CLASSIFICATION	8.01977295839883E-6	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999422889794467	WITHOUT_CLASSIFICATION	5.771102055317199E-5	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999549942571198	WITHOUT_CLASSIFICATION	4.500574288035739E-5	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9993369527750707	WITHOUT_CLASSIFICATION	6.630472249293327E-4	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9995875652394346	WITHOUT_CLASSIFICATION	4.124347605655068E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.999944215768425	WITHOUT_CLASSIFICATION	5.5784231575004E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999920131937176	WITHOUT_CLASSIFICATION	7.98680628247735E-6	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999919802270417	WITHOUT_CLASSIFICATION	8.01977295839883E-6	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999940546625353	WITHOUT_CLASSIFICATION	5.945337464586771E-6	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998701540935184	WITHOUT_CLASSIFICATION	1.2984590648163738E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999425202031716	WITHOUT_CLASSIFICATION	5.7479796828262616E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997920701245658	WITHOUT_CLASSIFICATION	2.079298754342424E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999930807221068	WITHOUT_CLASSIFICATION	6.919277893100932E-6	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9971500329997189	WITHOUT_CLASSIFICATION	0.00284996700028095	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999928828762907	WITHOUT_CLASSIFICATION	7.1171237092282E-6	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9998909843593456	WITHOUT_CLASSIFICATION	1.090156406543766E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997168400861173	WITHOUT_CLASSIFICATION	2.8315991388272617E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9997168400861173	WITHOUT_CLASSIFICATION	2.8315991388272617E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999978620427049	WITHOUT_CLASSIFICATION	2.1379572950596064E-6	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999868497519872	WITHOUT_CLASSIFICATION	1.3150248012824248E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.999862578282166	WITHOUT_CLASSIFICATION	1.3742171783410199E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999128980120225	WITHOUT_CLASSIFICATION	8.710198797753772E-5	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999967821048291	WITHOUT_CLASSIFICATION	3.2178951707862323E-6	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.999962800944048	WITHOUT_CLASSIFICATION	3.719905595197914E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.9999923226408136	WITHOUT_CLASSIFICATION	7.677359186430195E-6	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999119976494749	WITHOUT_CLASSIFICATION	8.800235052504032E-5	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999651222146981	WITHOUT_CLASSIFICATION	3.4877785301830635E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.9999651222146981	WITHOUT_CLASSIFICATION	3.4877785301830635E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9999339438298067	WITHOUT_CLASSIFICATION	6.605617019335891E-5	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999900517041871	WITHOUT_CLASSIFICATION	9.948295812885856E-6	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9999339438298067	WITHOUT_CLASSIFICATION	6.605617019335891E-5	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999265862261361	WITHOUT_CLASSIFICATION	7.341377386396547E-5	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999483007333512	WITHOUT_CLASSIFICATION	5.169926664877031E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999957649691203	WITHOUT_CLASSIFICATION	4.235030879708954E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999920131937176	WITHOUT_CLASSIFICATION	7.98680628247735E-6	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999919802270417	WITHOUT_CLASSIFICATION	8.01977295839883E-6	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999919802270417	WITHOUT_CLASSIFICATION	8.01977295839883E-6	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999958215870354	WITHOUT_CLASSIFICATION	4.178412964677516E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9999833930982412	WITHOUT_CLASSIFICATION	1.6606901758752122E-5	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999581304237832	WITHOUT_CLASSIFICATION	4.186957621677137E-5	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999337486910479	WITHOUT_CLASSIFICATION	6.625130895208348E-5	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999337486910479	WITHOUT_CLASSIFICATION	6.625130895208348E-5	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9999663527261022	WITHOUT_CLASSIFICATION	3.364727389782568E-5	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999525016850864	WITHOUT_CLASSIFICATION	4.7498314913558506E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.999995521666665	WITHOUT_CLASSIFICATION	4.478333334872601E-6	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999932627020578	WITHOUT_CLASSIFICATION	6.737297942155908E-6	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999942582649483	WITHOUT_CLASSIFICATION	5.741735051665916E-6	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999924383688695	WITHOUT_CLASSIFICATION	7.5616311304402214E-6	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999974467247597	WITHOUT_CLASSIFICATION	2.553275240319764E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999921728259608	WITHOUT_CLASSIFICATION	7.827174039307276E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999921728259608	WITHOUT_CLASSIFICATION	7.827174039307276E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999979244152006	WITHOUT_CLASSIFICATION	2.075584799389786E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999979244152006	WITHOUT_CLASSIFICATION	2.075584799389786E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999270588445427	WITHOUT_CLASSIFICATION	7.294115545727431E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999270588445427	WITHOUT_CLASSIFICATION	7.294115545727431E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998965788549588	WITHOUT_CLASSIFICATION	1.0342114504124125E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998965788549588	WITHOUT_CLASSIFICATION	1.0342114504124125E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9999337486910479	WITHOUT_CLASSIFICATION	6.625130895208348E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999974467247597	WITHOUT_CLASSIFICATION	2.553275240319764E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999921728259608	WITHOUT_CLASSIFICATION	7.827174039307276E-6	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999921728259608	WITHOUT_CLASSIFICATION	7.827174039307276E-6	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999979244152006	WITHOUT_CLASSIFICATION	2.075584799389786E-6	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999270588445427	WITHOUT_CLASSIFICATION	7.294115545727431E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9999270588445427	WITHOUT_CLASSIFICATION	7.294115545727431E-5	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9998965788549588	WITHOUT_CLASSIFICATION	1.0342114504124125E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999579202611936	WITHOUT_CLASSIFICATION	4.207973880643249E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999355694684259	WITHOUT_CLASSIFICATION	6.443053157412874E-5	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999672110634293	WITHOUT_CLASSIFICATION	3.278893657062199E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999890214760887	WITHOUT_CLASSIFICATION	1.0978523911248212E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999504086515935	WITHOUT_CLASSIFICATION	4.959134840658951E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999920521291745	WITHOUT_CLASSIFICATION	7.947870825431867E-6	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9936584600000542	WITHOUT_CLASSIFICATION	0.006341539999945804	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9977066598224219	WITHOUT_CLASSIFICATION	0.002293340177578197	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999455704166715	WITHOUT_CLASSIFICATION	5.442958332848374E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999896461112481	WITHOUT_CLASSIFICATION	1.035388875189618E-5	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999039477359557	WITHOUT_CLASSIFICATION	9.605226404431398E-5	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999412574198795	WITHOUT_CLASSIFICATION	5.874258012042913E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999274233207112	WITHOUT_CLASSIFICATION	7.257667928880628E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999920521291745	WITHOUT_CLASSIFICATION	7.947870825431867E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999920521291745	WITHOUT_CLASSIFICATION	7.947870825431867E-6	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999920521291745	WITHOUT_CLASSIFICATION	7.947870825431867E-6	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9994084315616335	WITHOUT_CLASSIFICATION	5.915684383664326E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999821259690939	WITHOUT_CLASSIFICATION	1.787403090611319E-5	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999821259690939	WITHOUT_CLASSIFICATION	1.787403090611319E-5	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997786052328621	WITHOUT_CLASSIFICATION	2.2139476713795226E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999986367513053	WITHOUT_CLASSIFICATION	1.3632486947046187E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9991693381493829	WITHOUT_CLASSIFICATION	8.306618506170844E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994656236163875	WITHOUT_CLASSIFICATION	5.343763836124472E-4	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9994656236163875	WITHOUT_CLASSIFICATION	5.343763836124472E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999883844716032	WITHOUT_CLASSIFICATION	1.1615528396872592E-5	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997744399307057	WITHOUT_CLASSIFICATION	2.2556006929444621E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997744399307057	WITHOUT_CLASSIFICATION	2.2556006929444621E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999404643300034	WITHOUT_CLASSIFICATION	5.95356699965268E-5	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999513450905853	WITHOUT_CLASSIFICATION	4.865490941485159E-5	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999632535586149	WITHOUT_CLASSIFICATION	3.6746441384976925E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.99999307321589	WITHOUT_CLASSIFICATION	6.926784110029444E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999920436009412	WITHOUT_CLASSIFICATION	7.956399058855433E-6	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9915415348942516	WITHOUT_CLASSIFICATION	0.008458465105748481	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999921049525817	WITHOUT_CLASSIFICATION	7.895047418326974E-6	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999560543436695	WITHOUT_CLASSIFICATION	4.394565633055236E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997772078189707	WITHOUT_CLASSIFICATION	2.2279218102922913E-4	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999697994121824	WITHOUT_CLASSIFICATION	3.020058781751912E-5	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999793428760482	WITHOUT_CLASSIFICATION	2.0657123951850864E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999528169961511	WITHOUT_CLASSIFICATION	4.718300384887794E-5	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999982662732643	WITHOUT_CLASSIFICATION	1.733726735668093E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999234532497849	WITHOUT_CLASSIFICATION	7.654675021509618E-5	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999921635749947	WITHOUT_CLASSIFICATION	7.836425005353777E-6	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999919928493268	WITHOUT_CLASSIFICATION	8.007150673192957E-6	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999271697251075	WITHOUT_CLASSIFICATION	7.283027489247637E-5	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999920928696764	WITHOUT_CLASSIFICATION	7.907130323601314E-5	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999952100943124	WITHOUT_CLASSIFICATION	4.789905687581711E-6	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999632535586149	WITHOUT_CLASSIFICATION	3.6746441384976925E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999894314283017	WITHOUT_CLASSIFICATION	1.0568571698469824E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9999472429807919	WITHOUT_CLASSIFICATION	5.2757019208069566E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999924940899716	WITHOUT_CLASSIFICATION	7.505910028406154E-6	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.9999920436009412	WITHOUT_CLASSIFICATION	7.956399058855433E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999952100943124	WITHOUT_CLASSIFICATION	4.789905687581711E-6	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999894314283017	WITHOUT_CLASSIFICATION	1.0568571698469824E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999924940899716	WITHOUT_CLASSIFICATION	7.505910028406154E-6	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999832173764481	WITHOUT_CLASSIFICATION	1.6782623551899394E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.999991980711355	WITHOUT_CLASSIFICATION	8.019288645095292E-6	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999832173764481	WITHOUT_CLASSIFICATION	1.6782623551899394E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919903368352	WITHOUT_CLASSIFICATION	8.009663164887976E-6	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9999317656376203	WITHOUT_CLASSIFICATION	6.823436237971593E-5	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9999570229062704	WITHOUT_CLASSIFICATION	4.2977093729607394E-5	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999950413876314	WITHOUT_CLASSIFICATION	4.958612368592565E-6	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999988650010779	WITHOUT_CLASSIFICATION	1.1349989221052439E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999830035960409	WITHOUT_CLASSIFICATION	1.6996403959057127E-5	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999847418896635	WITHOUT_CLASSIFICATION	1.5258110336676097E-5	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9992167400118525	WITHOUT_CLASSIFICATION	7.832599881474427E-4	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999744676165544	WITHOUT_CLASSIFICATION	2.5532383445704183E-5	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999847418896635	WITHOUT_CLASSIFICATION	1.5258110336676097E-5	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999930810966261	WITHOUT_CLASSIFICATION	6.9189033738863855E-6	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998741565424808	WITHOUT_CLASSIFICATION	1.2584345751930388E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999952100943124	WITHOUT_CLASSIFICATION	4.789905687581711E-6	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999915030327768	WITHOUT_CLASSIFICATION	8.496967223200138E-5	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9999438006104063	WITHOUT_CLASSIFICATION	5.61993895937641E-5	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9992754208187259	WITHOUT_CLASSIFICATION	7.245791812741958E-4	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998748744921301	WITHOUT_CLASSIFICATION	1.2512550786989522E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999322224406639	WITHOUT_CLASSIFICATION	6.777755933608385E-5	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999948663095013	WITHOUT_CLASSIFICATION	5.13369049864419E-6	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999271164538411	WITHOUT_CLASSIFICATION	7.288354615884779E-5	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999504542612482	WITHOUT_CLASSIFICATION	4.9545738751870876E-5	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.9999921937864326	WITHOUT_CLASSIFICATION	7.806213567549294E-6	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999220613269341	WITHOUT_CLASSIFICATION	7.793867306591124E-5	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9995019692330245	WITHOUT_CLASSIFICATION	4.980307669754657E-4	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999528169961511	WITHOUT_CLASSIFICATION	4.718300384887794E-5	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.9999442386055013	WITHOUT_CLASSIFICATION	5.5761394498681386E-5	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999344665880169	WITHOUT_CLASSIFICATION	6.553341198317103E-5	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999679539744177	WITHOUT_CLASSIFICATION	3.2046025582174486E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999451903423013	WITHOUT_CLASSIFICATION	5.4809657698576546E-5	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9999458679881108	WITHOUT_CLASSIFICATION	5.413201188914577E-5	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999454852025224	WITHOUT_CLASSIFICATION	5.451479747767107E-5	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997865910283	WITHOUT_CLASSIFICATION	2.1340897167344935E-7	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999866650307699	WITHOUT_CLASSIFICATION	1.3334969230077803E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999730827474583	WITHOUT_CLASSIFICATION	2.6917252541685402E-5	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999436387155426	WITHOUT_CLASSIFICATION	5.636128445739166E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999528581315483	WITHOUT_CLASSIFICATION	4.714186845163248E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999528581315483	WITHOUT_CLASSIFICATION	4.714186845163248E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999127873449272	WITHOUT_CLASSIFICATION	8.721265507277127E-5	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999138387110645	WITHOUT_CLASSIFICATION	8.616128893545663E-5	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999780162063332	WITHOUT_CLASSIFICATION	2.1983793666848855E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.999908031717074	WITHOUT_CLASSIFICATION	9.196828292602107E-5	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999491630256678	WITHOUT_CLASSIFICATION	5.083697433224437E-5	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9997489773557557	WITHOUT_CLASSIFICATION	2.5102264424421917E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998198700598642	WITHOUT_CLASSIFICATION	1.8012994013579743E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.999961982442556	WITHOUT_CLASSIFICATION	3.801755744413163E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.999970063680728	WITHOUT_CLASSIFICATION	2.9936319271923538E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999356913670574	WITHOUT_CLASSIFICATION	6.430863294251861E-5	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9999277066091575	WITHOUT_CLASSIFICATION	7.229339084240462E-5	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9997551829791527	WITHOUT_CLASSIFICATION	2.4481702084732683E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999945655290625	WITHOUT_CLASSIFICATION	5.4344709374981065E-5	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999191216221652	WITHOUT_CLASSIFICATION	8.087837783481481E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9995836008719996	WITHOUT_CLASSIFICATION	4.163991280003412E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9996986490172343	WITHOUT_CLASSIFICATION	3.0135098276571823E-4	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999364553367055	WITHOUT_CLASSIFICATION	6.354466329449724E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999717481003424	WITHOUT_CLASSIFICATION	2.8251899657527815E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999359986075914	WITHOUT_CLASSIFICATION	6.400139240866138E-5	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999467837052372	WITHOUT_CLASSIFICATION	5.3216294762808366E-5	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999839217895505	WITHOUT_CLASSIFICATION	1.6078210449498063E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9972067335237889	WITHOUT_CLASSIFICATION	0.002793266476211119	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9996986490172343	WITHOUT_CLASSIFICATION	3.0135098276571823E-4	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.999935888489157	WITHOUT_CLASSIFICATION	6.411151084289455E-5	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999414051030775	WITHOUT_CLASSIFICATION	5.859489692253948E-5	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999941226353491	WITHOUT_CLASSIFICATION	5.877364650900355E-5	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999400298761659	WITHOUT_CLASSIFICATION	5.9970123833965844E-5	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999585360490227	WITHOUT_CLASSIFICATION	4.146395097727059E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999717481003424	WITHOUT_CLASSIFICATION	2.8251899657527815E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9956554860288443	WITHOUT_CLASSIFICATION	0.004344513971155697	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999323163565534	WITHOUT_CLASSIFICATION	6.76836434465144E-5	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999130763986993	WITHOUT_CLASSIFICATION	8.69236013007466E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999959727590653	WITHOUT_CLASSIFICATION	4.027240934770179E-6	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999959727590653	WITHOUT_CLASSIFICATION	4.027240934770179E-6	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999338331254704	WITHOUT_CLASSIFICATION	6.6166874529627E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999209063874589	WITHOUT_CLASSIFICATION	7.909361254109396E-5	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9999209063874589	WITHOUT_CLASSIFICATION	7.909361254109396E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999730827474583	WITHOUT_CLASSIFICATION	2.6917252541685402E-5	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9936149531999787	WITHOUT_CLASSIFICATION	0.006385046800021189	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996859197283217	WITHOUT_CLASSIFICATION	3.1408027167837104E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998560105724882	WITHOUT_CLASSIFICATION	1.4398942751182764E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9996859197283217	WITHOUT_CLASSIFICATION	3.1408027167837104E-4	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9998560105724882	WITHOUT_CLASSIFICATION	1.4398942751182764E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999678499991144	WITHOUT_CLASSIFICATION	3.215000088564257E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9989845937109985	WITHOUT_CLASSIFICATION	0.0010154062890015156	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999643004014829	WITHOUT_CLASSIFICATION	3.5699598517022264E-5	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999868255435792	WITHOUT_CLASSIFICATION	1.3174456420833412E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9998366106085776	WITHOUT_CLASSIFICATION	1.633893914223153E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999792644397794	WITHOUT_CLASSIFICATION	2.0735560220752936E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997123897634088	WITHOUT_CLASSIFICATION	2.876102365911729E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997123897634088	WITHOUT_CLASSIFICATION	2.876102365911729E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998138710764332	WITHOUT_CLASSIFICATION	1.8612892356685164E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999987711248319	WITHOUT_CLASSIFICATION	1.2288751680133405E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999792911223183	WITHOUT_CLASSIFICATION	2.0708877681694028E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999490470154955	WITHOUT_CLASSIFICATION	5.0952984504502E-5	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999794727168161	WITHOUT_CLASSIFICATION	2.0527283183888914E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999657129981808	WITHOUT_CLASSIFICATION	3.428700181919983E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999657129981808	WITHOUT_CLASSIFICATION	3.428700181919983E-5	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999391149622401	WITHOUT_CLASSIFICATION	6.088503775990362E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999391149622401	WITHOUT_CLASSIFICATION	6.088503775990362E-4	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9993389242120174	WITHOUT_CLASSIFICATION	6.610757879825294E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999678499991144	WITHOUT_CLASSIFICATION	3.215000088564257E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999219081920994	WITHOUT_CLASSIFICATION	7.809180790057217E-5	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9997507622865005	WITHOUT_CLASSIFICATION	2.492377134995158E-4	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9996883279785771	WITHOUT_CLASSIFICATION	3.116720214229254E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996162140856085	WITHOUT_CLASSIFICATION	3.837859143914158E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.987671522181263	WITHOUT_CLASSIFICATION	0.012328477818737063	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999678499991144	WITHOUT_CLASSIFICATION	3.215000088564257E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9996162140856085	WITHOUT_CLASSIFICATION	3.837859143914158E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.987671522181263	WITHOUT_CLASSIFICATION	0.012328477818737063	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9997702039507512	WITHOUT_CLASSIFICATION	2.2979604924890093E-4	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999321414319362	WITHOUT_CLASSIFICATION	6.78585680637169E-5	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999477139946863	WITHOUT_CLASSIFICATION	5.2286005313674977E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999678499991144	WITHOUT_CLASSIFICATION	3.215000088564257E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999678499991144	WITHOUT_CLASSIFICATION	3.215000088564257E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999916342554952	WITHOUT_CLASSIFICATION	8.365744504881907E-6	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9999065893804102	WITHOUT_CLASSIFICATION	9.34106195897962E-5	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.999947997514846	WITHOUT_CLASSIFICATION	5.2002485154085106E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999057320963358	WITHOUT_CLASSIFICATION	9.426790366411763E-5	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.999974334367929	WITHOUT_CLASSIFICATION	2.5665632071032957E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999954788479901	WITHOUT_CLASSIFICATION	4.5211520098514425E-6	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999730446703186	WITHOUT_CLASSIFICATION	2.6955329681350493E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999547059362532	WITHOUT_CLASSIFICATION	4.529406374666475E-5	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998822654378281	WITHOUT_CLASSIFICATION	1.1773456217182973E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9999072264295796	WITHOUT_CLASSIFICATION	9.277357042033087E-5	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999330056724222	WITHOUT_CLASSIFICATION	6.699432757773924E-5	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999960151752397	WITHOUT_CLASSIFICATION	3.984824760243998E-6	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999942451084936	WITHOUT_CLASSIFICATION	5.754891506407758E-6	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999686025280672	WITHOUT_CLASSIFICATION	3.1397471932828894E-5	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998938597126648	WITHOUT_CLASSIFICATION	1.0614028733523058E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999964518491294	WITHOUT_CLASSIFICATION	3.5481508704998177E-6	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999057320963358	WITHOUT_CLASSIFICATION	9.426790366411763E-5	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999095307854381	WITHOUT_CLASSIFICATION	9.046921456191228E-5	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999362127662879	WITHOUT_CLASSIFICATION	6.378723371210345E-5	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9997996915290582	WITHOUT_CLASSIFICATION	2.0030847094173584E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999338630281976	WITHOUT_CLASSIFICATION	6.613697180235668E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999213293460552	WITHOUT_CLASSIFICATION	7.867065394486243E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9999213293460552	WITHOUT_CLASSIFICATION	7.867065394486243E-5	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999057320963358	WITHOUT_CLASSIFICATION	9.426790366411763E-5	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9260601931821619	WITHOUT_CLASSIFICATION	0.07393980681783814	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999987144250911	WITHOUT_CLASSIFICATION	1.2855749089342187E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999231292748346	WITHOUT_CLASSIFICATION	7.687072516541506E-4	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999268741307333	WITHOUT_CLASSIFICATION	7.312586926674978E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919924581668	WITHOUT_CLASSIFICATION	8.007541833123065E-6	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999720753403152	WITHOUT_CLASSIFICATION	2.7924659684798767E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9987775508022991	WITHOUT_CLASSIFICATION	0.0012224491977008629	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999944628965461	WITHOUT_CLASSIFICATION	5.5371034539219255E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.999990245813468	WITHOUT_CLASSIFICATION	9.754186531962262E-6	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999686056047187	WITHOUT_CLASSIFICATION	3.139439528135325E-5	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9981733619601667	WITHOUT_CLASSIFICATION	0.001826638039833282	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9999337242055746	WITHOUT_CLASSIFICATION	6.62757944253397E-5	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999962562108696	WITHOUT_CLASSIFICATION	3.7437891304582887E-6	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999476155580846	WITHOUT_CLASSIFICATION	5.2384441915343164E-5	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999708611572432	WITHOUT_CLASSIFICATION	2.913884275681298E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999486500666314	WITHOUT_CLASSIFICATION	5.1349933368571775E-5	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9997730632355164	WITHOUT_CLASSIFICATION	2.269367644834499E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999433572346935	WITHOUT_CLASSIFICATION	5.6642765306436744E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999293681628392	WITHOUT_CLASSIFICATION	7.063183716082609E-5	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9995691387541812	WITHOUT_CLASSIFICATION	4.3086124581883766E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999814313651131	WITHOUT_CLASSIFICATION	1.8568634886895046E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998895424267579	WITHOUT_CLASSIFICATION	1.1045757324214408E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998983432971285	WITHOUT_CLASSIFICATION	1.0165670287150033E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999392744560425	WITHOUT_CLASSIFICATION	6.072554395747024E-5	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998765801980739	WITHOUT_CLASSIFICATION	1.2341980192603948E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999936684937667	WITHOUT_CLASSIFICATION	6.331506233306427E-5	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.999998117318498	WITHOUT_CLASSIFICATION	1.8826815020397566E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999981092861993	WITHOUT_CLASSIFICATION	1.8907138007008597E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805770188839	WITHOUT_CLASSIFICATION	1.942298111623124E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873769054334	WITHOUT_CLASSIFICATION	1.2623094566561856E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435671038652	WITHOUT_CLASSIFICATION	5.6432896134823266E-5	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999700653694228	WITHOUT_CLASSIFICATION	2.9934630577122102E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999330084266357	WITHOUT_CLASSIFICATION	6.699157336426737E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999204535461181	WITHOUT_CLASSIFICATION	7.954645388179565E-5	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999947057530272	WITHOUT_CLASSIFICATION	5.2942469727954384E-5	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999887729645379	WITHOUT_CLASSIFICATION	1.1227035462100394E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9996921268916585	WITHOUT_CLASSIFICATION	3.078731083413896E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999944885332596	WITHOUT_CLASSIFICATION	5.511466740392737E-5	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999997947594731	WITHOUT_CLASSIFICATION	2.0524052689820056E-6	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999400842207969	WITHOUT_CLASSIFICATION	5.991577920305081E-5	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.999905218119736	WITHOUT_CLASSIFICATION	9.478188026404828E-5	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998941121496945	WITHOUT_CLASSIFICATION	1.0588785030554338E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999996408432063	WITHOUT_CLASSIFICATION	3.591567936966174E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999214557158884	WITHOUT_CLASSIFICATION	7.854428411161176E-5	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999228526160873	WITHOUT_CLASSIFICATION	7.71473839127942E-5	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999249315125293	WITHOUT_CLASSIFICATION	7.506848747067386E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999411334422302	WITHOUT_CLASSIFICATION	5.886655776968971E-5	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999920981288041	WITHOUT_CLASSIFICATION	7.90187119595489E-6	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999702491848836	WITHOUT_CLASSIFICATION	2.9750815116325255E-5	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9998858285822931	WITHOUT_CLASSIFICATION	1.1417141770689097E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9994323990660657	WITHOUT_CLASSIFICATION	5.676009339342419E-4	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997433428625248	WITHOUT_CLASSIFICATION	2.5665713747520443E-4	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872220532767	WITHOUT_CLASSIFICATION	1.127779467233513E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999162105500071	WITHOUT_CLASSIFICATION	8.378944999292487E-5	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999186246257195	WITHOUT_CLASSIFICATION	8.137537428050417E-5	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998910685071233	WITHOUT_CLASSIFICATION	1.0893149287673547E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9957684842285625	WITHOUT_CLASSIFICATION	0.004231515771437504	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9997369228290538	WITHOUT_CLASSIFICATION	2.630771709461995E-4	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999737686693101	WITHOUT_CLASSIFICATION	2.623133068995283E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9985049795750879	WITHOUT_CLASSIFICATION	0.0014950204249121529	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998660563318919	WITHOUT_CLASSIFICATION	1.3394366810818602E-4	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998835754172569	WITHOUT_CLASSIFICATION	1.1642458274310442E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9997824481824397	WITHOUT_CLASSIFICATION	2.175518175603701E-4	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999373131492225	WITHOUT_CLASSIFICATION	6.268685077747905E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999900504217042	WITHOUT_CLASSIFICATION	9.949578295842822E-6	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9995124332093321	WITHOUT_CLASSIFICATION	4.875667906678712E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9998493299278912	WITHOUT_CLASSIFICATION	1.506700721087604E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997431861070654	WITHOUT_CLASSIFICATION	2.568138929345675E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997215546552254	WITHOUT_CLASSIFICATION	2.7844534477468997E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999400842207969	WITHOUT_CLASSIFICATION	5.991577920305081E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997341163281681	WITHOUT_CLASSIFICATION	2.658836718318344E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999635988982675	WITHOUT_CLASSIFICATION	3.640110173254218E-5	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999392075942486	WITHOUT_CLASSIFICATION	6.0792405751360045E-5	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999944885332596	WITHOUT_CLASSIFICATION	5.511466740392737E-5	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998918939223272	WITHOUT_CLASSIFICATION	1.0810607767275493E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.9999391045811569	WITHOUT_CLASSIFICATION	6.0895418843090296E-5	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9957684842285625	WITHOUT_CLASSIFICATION	0.004231515771437504	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992746770413692	WITHOUT_CLASSIFICATION	7.253229586307719E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998053676577822	WITHOUT_CLASSIFICATION	1.9463234221778962E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999864833829898	WITHOUT_CLASSIFICATION	1.3516617010207412E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998981893435879	WITHOUT_CLASSIFICATION	1.0181065641213401E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998125378360172	WITHOUT_CLASSIFICATION	1.8746216398281247E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999712702276581	WITHOUT_CLASSIFICATION	2.872977234184804E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999340947864886	WITHOUT_CLASSIFICATION	6.590521351141962E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999957926280598	WITHOUT_CLASSIFICATION	4.207371940138807E-6	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9996541030948913	WITHOUT_CLASSIFICATION	3.45896905108734E-4	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999152263017463	WITHOUT_CLASSIFICATION	8.477369825372522E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999643854129722	WITHOUT_CLASSIFICATION	3.5614587027791375E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999449570976722	WITHOUT_CLASSIFICATION	5.50429023278451E-5	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999814476175233	WITHOUT_CLASSIFICATION	1.8552382476725074E-5	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9997425398056975	WITHOUT_CLASSIFICATION	2.5746019430252946E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9997321203214729	WITHOUT_CLASSIFICATION	2.678796785271565E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999100898127088	WITHOUT_CLASSIFICATION	8.991018729130167E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999835014452393	WITHOUT_CLASSIFICATION	1.6498554760699032E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999298086464525	WITHOUT_CLASSIFICATION	7.019135354750336E-5	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999324095796657	WITHOUT_CLASSIFICATION	6.75904203343749E-5	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996494627184769	WITHOUT_CLASSIFICATION	3.505372815231896E-4	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999304412853988	WITHOUT_CLASSIFICATION	6.955871460125286E-5	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999186816420854	WITHOUT_CLASSIFICATION	8.131835791451398E-5	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9999161447052023	WITHOUT_CLASSIFICATION	8.385529479759886E-5	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.872100382735756	WITHOUT_CLASSIFICATION	0.12789961726424406	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999987740516408	WITHOUT_CLASSIFICATION	1.225948359187789E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999877313326142	WITHOUT_CLASSIFICATION	1.2268667385882744E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999944885332596	WITHOUT_CLASSIFICATION	5.511466740392737E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999400842207969	WITHOUT_CLASSIFICATION	5.991577920305081E-5	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9984514310961066	WITHOUT_CLASSIFICATION	0.0015485689038933687	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999943005648525	WITHOUT_CLASSIFICATION	5.69943514744777E-6	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9907102261910963	WITHOUT_CLASSIFICATION	0.009289773808903739	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9997318568786641	WITHOUT_CLASSIFICATION	2.681431213359969E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997350685212301	WITHOUT_CLASSIFICATION	2.6493147876990815E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997355975068059	WITHOUT_CLASSIFICATION	2.6440249319413105E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999400842207969	WITHOUT_CLASSIFICATION	5.991577920305081E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999220456158412	WITHOUT_CLASSIFICATION	7.795438415876279E-5	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999835014452393	WITHOUT_CLASSIFICATION	1.6498554760699032E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.998243262553159	WITHOUT_CLASSIFICATION	0.0017567374468409865	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999100898127088	WITHOUT_CLASSIFICATION	8.991018729130167E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996508660874319	WITHOUT_CLASSIFICATION	3.491339125680674E-4	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9777708619114568	WITHOUT_CLASSIFICATION	0.022229138088543095	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999892167534767	WITHOUT_CLASSIFICATION	1.0783246523265282E-5	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999864833829898	WITHOUT_CLASSIFICATION	1.3516617010207412E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9998981893435879	WITHOUT_CLASSIFICATION	1.0181065641213401E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9998125378360172	WITHOUT_CLASSIFICATION	1.8746216398281247E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999875348788274	WITHOUT_CLASSIFICATION	1.246512117264315E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9999475328664635	WITHOUT_CLASSIFICATION	5.246713353647445E-5	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999686346882098	WITHOUT_CLASSIFICATION	3.1365311790250846E-5	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999100898127088	WITHOUT_CLASSIFICATION	8.991018729130167E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996508660874319	WITHOUT_CLASSIFICATION	3.491339125680674E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999400842207969	WITHOUT_CLASSIFICATION	5.991577920305081E-5	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999712702276581	WITHOUT_CLASSIFICATION	2.872977234184804E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999340947864886	WITHOUT_CLASSIFICATION	6.590521351141962E-5	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999957926280598	WITHOUT_CLASSIFICATION	4.207371940138807E-6	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995973814788	WITHOUT_CLASSIFICATION	4.026185212106381E-6	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999395522161044	WITHOUT_CLASSIFICATION	6.044778389563316E-5	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999388624542507	WITHOUT_CLASSIFICATION	6.11375457493258E-5	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9998543995409066	WITHOUT_CLASSIFICATION	1.4560045909346115E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9946810380046847	WITHOUT_CLASSIFICATION	0.005318961995315314	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9995355406724853	WITHOUT_CLASSIFICATION	4.644593275146457E-4	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999009301744367	WITHOUT_CLASSIFICATION	9.906982556322593E-5	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999234377623286	WITHOUT_CLASSIFICATION	7.656223767141337E-5	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999775332527912	WITHOUT_CLASSIFICATION	2.2466747208826017E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999936684937667	WITHOUT_CLASSIFICATION	6.331506233306427E-5	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873769054334	WITHOUT_CLASSIFICATION	1.2623094566561856E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999981991293032	WITHOUT_CLASSIFICATION	1.8008706968596192E-6	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999375161283296	WITHOUT_CLASSIFICATION	6.248387167040874E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594607039164	WITHOUT_CLASSIFICATION	4.053929608372272E-5	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9929687172040499	WITHOUT_CLASSIFICATION	0.007031282795950156	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.999991980711355	WITHOUT_CLASSIFICATION	8.019288645095292E-6	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999435671038652	WITHOUT_CLASSIFICATION	5.6432896134823266E-5	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322989950971	WITHOUT_CLASSIFICATION	6.770100490304247E-5	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999900504217042	WITHOUT_CLASSIFICATION	9.949578295842822E-6	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9996265675915038	WITHOUT_CLASSIFICATION	3.734324084962365E-4	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9998080090626602	WITHOUT_CLASSIFICATION	1.9199093733978132E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999536183528667	WITHOUT_CLASSIFICATION	4.638164713333742E-5	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999417992959913	WITHOUT_CLASSIFICATION	5.820070400881436E-5	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999977341704178	WITHOUT_CLASSIFICATION	2.2658295821174495E-6	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999832173764481	WITHOUT_CLASSIFICATION	1.6782623551899394E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999359464866713	WITHOUT_CLASSIFICATION	6.405351332876825E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999944628965461	WITHOUT_CLASSIFICATION	5.5371034539219255E-6	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999830824938286	WITHOUT_CLASSIFICATION	1.691750617140108E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999711565961401	WITHOUT_CLASSIFICATION	2.884340385998543E-5	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999477749962047	WITHOUT_CLASSIFICATION	5.222500379535017E-5	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999841434964372	WITHOUT_CLASSIFICATION	1.585650356291437E-5	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999866946995101	WITHOUT_CLASSIFICATION	1.3305300489814096E-5	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999631884162166	WITHOUT_CLASSIFICATION	3.681158378342797E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999351817046523	WITHOUT_CLASSIFICATION	6.48182953477266E-5	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999097487313438	WITHOUT_CLASSIFICATION	9.02512686562205E-5	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997525599226907	WITHOUT_CLASSIFICATION	2.474400773092582E-4	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997152865294522	WITHOUT_CLASSIFICATION	2.8471347054782783E-4	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9995832058432412	WITHOUT_CLASSIFICATION	4.167941567588467E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995875359587623	WITHOUT_CLASSIFICATION	4.124640412377537E-4	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9983913801677442	WITHOUT_CLASSIFICATION	0.0016086198322557252	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996059640334414	WITHOUT_CLASSIFICATION	3.940359665585553E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998091155335787	WITHOUT_CLASSIFICATION	1.9088446642140044E-4	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9996076326210335	WITHOUT_CLASSIFICATION	3.923673789665081E-4	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999409019965322	WITHOUT_CLASSIFICATION	5.9098003467717875E-5	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996059640334414	WITHOUT_CLASSIFICATION	3.940359665585553E-4	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998673648080063	WITHOUT_CLASSIFICATION	1.3263519199372618E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996589947672142	WITHOUT_CLASSIFICATION	3.410052327858051E-4	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471134578335	WITHOUT_CLASSIFICATION	5.288654216648497E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999599531137141	WITHOUT_CLASSIFICATION	4.004688628584015E-5	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9997949326427699	WITHOUT_CLASSIFICATION	2.0506735723012715E-4	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999839047193637	WITHOUT_CLASSIFICATION	1.609528063628321E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9999310155179759	WITHOUT_CLASSIFICATION	6.898448202405847E-5	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999528962174739	WITHOUT_CLASSIFICATION	4.710378252615676E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999528962174739	WITHOUT_CLASSIFICATION	4.710378252615676E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999852410097188	WITHOUT_CLASSIFICATION	1.475899028127963E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999061358496973	WITHOUT_CLASSIFICATION	9.386415030264766E-5	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999020355282889	WITHOUT_CLASSIFICATION	9.796447171103494E-5	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999675786845404	WITHOUT_CLASSIFICATION	3.242131545952337E-5	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9975523960440893	WITHOUT_CLASSIFICATION	0.0024476039559107243	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999440432521189	WITHOUT_CLASSIFICATION	5.59567478811103E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999797256204952	WITHOUT_CLASSIFICATION	2.0274379504891802E-5	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999858682484762	WITHOUT_CLASSIFICATION	1.4131751523668453E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997752029690516	WITHOUT_CLASSIFICATION	2.2479703094844454E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999978505530702	WITHOUT_CLASSIFICATION	2.1494469298722042E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999870510063756	WITHOUT_CLASSIFICATION	1.2948993624353373E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999490810400836	WITHOUT_CLASSIFICATION	5.0918959916325344E-5	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999872232192156	WITHOUT_CLASSIFICATION	1.2776780784384898E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9989132927424121	WITHOUT_CLASSIFICATION	0.0010867072575878188	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999622570701949	WITHOUT_CLASSIFICATION	3.774292980516827E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9994618303898753	WITHOUT_CLASSIFICATION	5.381696101246582E-4	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9990860848421133	WITHOUT_CLASSIFICATION	9.139151578866781E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.998973885091495	WITHOUT_CLASSIFICATION	0.0010261149085049983	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999812155103275	WITHOUT_CLASSIFICATION	1.878448967251371E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998825979548134	WITHOUT_CLASSIFICATION	1.1740204518660555E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999233146962717	WITHOUT_CLASSIFICATION	7.668530372827936E-5	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999347048218981	WITHOUT_CLASSIFICATION	6.529517810192424E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999364239100115	WITHOUT_CLASSIFICATION	6.357608998853095E-5	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999715278070842	WITHOUT_CLASSIFICATION	2.847219291577937E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999446388501264	WITHOUT_CLASSIFICATION	5.5361149873605856E-5	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999659026142002	WITHOUT_CLASSIFICATION	3.4097385799798945E-4	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9989780114404566	WITHOUT_CLASSIFICATION	0.001021988559543487	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994661555854795	WITHOUT_CLASSIFICATION	5.338444145204584E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.8901550712717312	WITHOUT_CLASSIFICATION	0.10984492872826876	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9990166920097009	WITHOUT_CLASSIFICATION	9.833079902990633E-4	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999648133602076	WITHOUT_CLASSIFICATION	3.518663979236226E-5	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.9999778012911217	WITHOUT_CLASSIFICATION	2.2198708878264106E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999773737582875	WITHOUT_CLASSIFICATION	2.2626241712438784E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999875520015553	WITHOUT_CLASSIFICATION	1.2447998444603453E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999565526970214	WITHOUT_CLASSIFICATION	4.344730297863155E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9999028673250014	WITHOUT_CLASSIFICATION	9.713267499854433E-5	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9992508897906168	WITHOUT_CLASSIFICATION	7.49110209383169E-4	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999906609675572	WITHOUT_CLASSIFICATION	9.339032442804414E-6	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7849013601433757	WITHOUT_CLASSIFICATION	0.21509863985662434	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999944413990396	WITHOUT_CLASSIFICATION	5.558600960422443E-6	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999473554128148	WITHOUT_CLASSIFICATION	5.26445871851319E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999643854129722	WITHOUT_CLASSIFICATION	3.5614587027791375E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999643854129722	WITHOUT_CLASSIFICATION	3.5614587027791375E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9998130171131776	WITHOUT_CLASSIFICATION	1.869828868224423E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998094440867898	WITHOUT_CLASSIFICATION	1.9055591321020035E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999986316142305	WITHOUT_CLASSIFICATION	1.3683857694845962E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999890419249801	WITHOUT_CLASSIFICATION	1.0958075019889898E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999622248647768	WITHOUT_CLASSIFICATION	3.777513522318324E-5	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9999634164977954	WITHOUT_CLASSIFICATION	3.658350220456325E-5	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999403715625951	WITHOUT_CLASSIFICATION	5.9628437404834465E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999984713697266	WITHOUT_CLASSIFICATION	1.5286302733470867E-6	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999995872790942	WITHOUT_CLASSIFICATION	4.127209058107586E-7	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.999978129799997	WITHOUT_CLASSIFICATION	2.187020000290166E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999698058793272	WITHOUT_CLASSIFICATION	3.019412067284314E-5	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.999998302658301	WITHOUT_CLASSIFICATION	1.6973416989150163E-6	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998882220352877	WITHOUT_CLASSIFICATION	1.1177796471236353E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999446718287935	WITHOUT_CLASSIFICATION	5.532817120639835E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999753394680092	WITHOUT_CLASSIFICATION	2.466053199076502E-5	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.999589197687308	WITHOUT_CLASSIFICATION	4.108023126920032E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999952822740759	WITHOUT_CLASSIFICATION	4.717725924095939E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999333931635886	WITHOUT_CLASSIFICATION	6.660683641139996E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9991939053234865	WITHOUT_CLASSIFICATION	8.060946765135618E-4	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9999007899130029	WITHOUT_CLASSIFICATION	9.921008699709903E-5	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999280262341725	WITHOUT_CLASSIFICATION	7.197376582745952E-5	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.9991939053234865	WITHOUT_CLASSIFICATION	8.060946765135618E-4	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999780161226153	WITHOUT_CLASSIFICATION	2.1983877384651578E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.9999624759778797	WITHOUT_CLASSIFICATION	3.752402212027277E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999722111370063	WITHOUT_CLASSIFICATION	2.7788862993736862E-5	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998798859221854	WITHOUT_CLASSIFICATION	1.201140778146561E-4	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9999260836685131	WITHOUT_CLASSIFICATION	7.391633148687783E-5	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999951319519896	WITHOUT_CLASSIFICATION	4.868048010328846E-6	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999887333057252	WITHOUT_CLASSIFICATION	1.1266694274799788E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999451928859305	WITHOUT_CLASSIFICATION	5.4807114069485634E-5	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9983906261637789	WITHOUT_CLASSIFICATION	0.0016093738362210949	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998888180908035	WITHOUT_CLASSIFICATION	1.1118190919643788E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999215732270821	WITHOUT_CLASSIFICATION	7.842677291790768E-5	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999666787157896	WITHOUT_CLASSIFICATION	3.332128421032143E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999818226077881	WITHOUT_CLASSIFICATION	1.8177392211812428E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999937812513506	WITHOUT_CLASSIFICATION	6.218748649351131E-6	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996682476317428	WITHOUT_CLASSIFICATION	3.317523682571717E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999644231484369	WITHOUT_CLASSIFICATION	3.557685156303678E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9994562487995223	WITHOUT_CLASSIFICATION	5.437512004776395E-4	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9999338661950282	WITHOUT_CLASSIFICATION	6.613380497185519E-5	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999287644206138	WITHOUT_CLASSIFICATION	7.12355793861873E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9997293962400243	WITHOUT_CLASSIFICATION	2.7060375997566607E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.995325179645194	WITHOUT_CLASSIFICATION	0.004674820354806125	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9993887216628758	WITHOUT_CLASSIFICATION	6.112783371241296E-4	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999709559189324	WITHOUT_CLASSIFICATION	2.9044081067653707E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9999307446686235	WITHOUT_CLASSIFICATION	6.925533137652843E-5	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9976583604354837	WITHOUT_CLASSIFICATION	0.0023416395645162575	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999742237191551	WITHOUT_CLASSIFICATION	2.577628084484711E-5	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999823992585	WITHOUT_CLASSIFICATION	1.760074151463729E-8	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999535095241389	WITHOUT_CLASSIFICATION	4.649047586119794E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9995746324483763	WITHOUT_CLASSIFICATION	4.2536755162371736E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998989012509732	WITHOUT_CLASSIFICATION	1.0109874902665763E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999631884162166	WITHOUT_CLASSIFICATION	3.681158378342797E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996362591256689	WITHOUT_CLASSIFICATION	3.6374087433106895E-4	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999835374961797	WITHOUT_CLASSIFICATION	1.6462503820288216E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9998536817479092	WITHOUT_CLASSIFICATION	1.463182520907684E-4	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999750032790284	WITHOUT_CLASSIFICATION	2.4996720971596452E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998551670968575	WITHOUT_CLASSIFICATION	1.4483290314258048E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999914985092857	WITHOUT_CLASSIFICATION	8.501490714351119E-6	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9946102465280644	WITHOUT_CLASSIFICATION	0.005389753471935525	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.99997249380628	WITHOUT_CLASSIFICATION	2.750619372006444E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999800030923552	WITHOUT_CLASSIFICATION	1.999690764474628E-5	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999801878124669	WITHOUT_CLASSIFICATION	1.9812187533060484E-5	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999914871264034	WITHOUT_CLASSIFICATION	8.512873596666673E-6	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999692352577064	WITHOUT_CLASSIFICATION	3.076474229355188E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9989457268769021	WITHOUT_CLASSIFICATION	0.00105427312309783	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9995301024515351	WITHOUT_CLASSIFICATION	4.698975484648898E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999935244504085	WITHOUT_CLASSIFICATION	6.4755495916279336E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999953570102464	WITHOUT_CLASSIFICATION	4.642989753595965E-5	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999483670753007	WITHOUT_CLASSIFICATION	5.163292469928192E-5	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999882544730212	WITHOUT_CLASSIFICATION	1.1745526978760508E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999951730521601	WITHOUT_CLASSIFICATION	4.82694783979126E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999898202027169	WITHOUT_CLASSIFICATION	1.0179797283066673E-5	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999870339945818	WITHOUT_CLASSIFICATION	1.2966005418113511E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999940784232326	WITHOUT_CLASSIFICATION	5.921576767381957E-6	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999497412080481	WITHOUT_CLASSIFICATION	5.025879195176022E-5	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998437559710431	WITHOUT_CLASSIFICATION	1.5624402895679631E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999973201745037	WITHOUT_CLASSIFICATION	2.6798254963301386E-6	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991738597773121	WITHOUT_CLASSIFICATION	8.261402226878788E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999942185248436	WITHOUT_CLASSIFICATION	5.78147515639189E-6	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9978811300240343	WITHOUT_CLASSIFICATION	0.0021188699759656497	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999482201211529	WITHOUT_CLASSIFICATION	5.177987884713367E-5	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999828865366352	WITHOUT_CLASSIFICATION	1.711346336481131E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998226550327665	WITHOUT_CLASSIFICATION	1.7734496723352774E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998986225819085	WITHOUT_CLASSIFICATION	1.0137741809146283E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999249373269503	WITHOUT_CLASSIFICATION	7.506267304961254E-5	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999471650963383	WITHOUT_CLASSIFICATION	5.28349036615766E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999900711373486	WITHOUT_CLASSIFICATION	9.92886265132244E-6	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9987841474396137	WITHOUT_CLASSIFICATION	0.0012158525603862254	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9997689028784261	WITHOUT_CLASSIFICATION	2.3109712157389227E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998251864138246	WITHOUT_CLASSIFICATION	1.7481358617538846E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9997689028784261	WITHOUT_CLASSIFICATION	2.3109712157389227E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996921652721025	WITHOUT_CLASSIFICATION	3.078347278975235E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999665936360083	WITHOUT_CLASSIFICATION	3.340636399168955E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.999901222870674	WITHOUT_CLASSIFICATION	9.877712932597902E-5	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999993642321898	WITHOUT_CLASSIFICATION	6.35767810200911E-6	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999053632379746	WITHOUT_CLASSIFICATION	9.463676202535863E-5	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9998833968902139	WITHOUT_CLASSIFICATION	1.1660310978613863E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999604148841164	WITHOUT_CLASSIFICATION	3.9585115883663743E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9981023646203347	WITHOUT_CLASSIFICATION	0.0018976353796653182	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999967496874076	WITHOUT_CLASSIFICATION	3.2503125923637185E-6	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999981880318702	WITHOUT_CLASSIFICATION	1.8119681297482931E-6	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999676828812095	WITHOUT_CLASSIFICATION	3.231711879051192E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9998604058642183	WITHOUT_CLASSIFICATION	1.3959413578180455E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9998333473235473	WITHOUT_CLASSIFICATION	1.6665267645265722E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9610093807347526	WITHOUT_CLASSIFICATION	0.038990619265247335	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999948302293151	WITHOUT_CLASSIFICATION	5.169770684814704E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997990131233495	WITHOUT_CLASSIFICATION	2.0098687665055432E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980012915435	WITHOUT_CLASSIFICATION	1.998708456562623E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980012915435	WITHOUT_CLASSIFICATION	1.998708456562623E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999160713185776	WITHOUT_CLASSIFICATION	8.392868142239507E-5	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999264197649507	WITHOUT_CLASSIFICATION	7.358023504928881E-5	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999876288441787	WITHOUT_CLASSIFICATION	1.237115582134569E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9996907292904884	WITHOUT_CLASSIFICATION	3.0927070951164773E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999278596659676	WITHOUT_CLASSIFICATION	7.214033403238926E-5	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9995138752757223	WITHOUT_CLASSIFICATION	4.8612472427767147E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.997854039690517	WITHOUT_CLASSIFICATION	0.0021459603094829624	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999540349334193	WITHOUT_CLASSIFICATION	4.596506658069773E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999838302687684	WITHOUT_CLASSIFICATION	1.6169731231635458E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999565608655787	WITHOUT_CLASSIFICATION	4.343913442130567E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999215711953977	WITHOUT_CLASSIFICATION	7.842880460232158E-5	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999909156363282	WITHOUT_CLASSIFICATION	9.084363671670149E-6	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999305932669589	WITHOUT_CLASSIFICATION	6.940673304110455E-5	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999481478806653	WITHOUT_CLASSIFICATION	5.185211933459761E-5	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998058073396935	WITHOUT_CLASSIFICATION	1.9419266030655427E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9998950955277925	WITHOUT_CLASSIFICATION	1.0490447220741463E-4	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999277187124521	WITHOUT_CLASSIFICATION	7.228128754792363E-5	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999746955050455	WITHOUT_CLASSIFICATION	2.530449495450624E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999572388104435	WITHOUT_CLASSIFICATION	4.276118955635056E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999876072315242	WITHOUT_CLASSIFICATION	1.2392768475850725E-5	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999752872001447	WITHOUT_CLASSIFICATION	2.4712799855325897E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999598337154789	WITHOUT_CLASSIFICATION	4.0166284521091286E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999767235895477	WITHOUT_CLASSIFICATION	2.3276410452252158E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999835754246476	WITHOUT_CLASSIFICATION	1.6424575352409518E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9998719789832634	WITHOUT_CLASSIFICATION	1.2802101673659648E-4	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999493483488743	WITHOUT_CLASSIFICATION	5.0651651125671786E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999171629668264	WITHOUT_CLASSIFICATION	8.283703317354444E-5	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.999286076294037	WITHOUT_CLASSIFICATION	7.139237059630458E-4	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999953307501508	WITHOUT_CLASSIFICATION	4.66924984918826E-6	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9993794802434592	WITHOUT_CLASSIFICATION	6.20519756540753E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999815641714775	WITHOUT_CLASSIFICATION	1.8435828522398335E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999976973556073	WITHOUT_CLASSIFICATION	2.3026443927132406E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995791194348537	WITHOUT_CLASSIFICATION	4.208805651463198E-4	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998491257834538	WITHOUT_CLASSIFICATION	1.5087421654613262E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999811651939903	WITHOUT_CLASSIFICATION	1.883480600977617E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999921557123461	WITHOUT_CLASSIFICATION	7.844287653826668E-6	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999787618928592	WITHOUT_CLASSIFICATION	2.1238107140828272E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999636764669734	WITHOUT_CLASSIFICATION	3.632353302670452E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999473447284065	WITHOUT_CLASSIFICATION	5.265527159350554E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9987939827958059	WITHOUT_CLASSIFICATION	0.0012060172041941223	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9998060411856107	WITHOUT_CLASSIFICATION	1.9395881438933168E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999893251884213	WITHOUT_CLASSIFICATION	1.0674811578705597E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9997704081177801	WITHOUT_CLASSIFICATION	2.2959188221990568E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9806629831255075	WITHOUT_CLASSIFICATION	0.01933701687449253	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9991302804642549	WITHOUT_CLASSIFICATION	8.697195357449806E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9935867836745205	WITHOUT_CLASSIFICATION	0.006413216325479595	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9814255329158141	WITHOUT_CLASSIFICATION	0.018574467084185836	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999991415495011	WITHOUT_CLASSIFICATION	8.584504988722324E-7	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9998741844816023	WITHOUT_CLASSIFICATION	1.2581551839780224E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998856627326241	WITHOUT_CLASSIFICATION	1.1433726737587375E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999893251884213	WITHOUT_CLASSIFICATION	1.0674811578705597E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999909484802205	WITHOUT_CLASSIFICATION	9.051519779578847E-6	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999050029460718	WITHOUT_CLASSIFICATION	9.499705392819187E-5	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999833459965961	WITHOUT_CLASSIFICATION	1.6654003403928293E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999666122025078	WITHOUT_CLASSIFICATION	3.338779749224999E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999220456158412	WITHOUT_CLASSIFICATION	7.795438415876279E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.9999220456158412	WITHOUT_CLASSIFICATION	7.795438415876279E-5	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999983720017427	WITHOUT_CLASSIFICATION	1.6279982573008455E-5	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999791835243895	WITHOUT_CLASSIFICATION	2.0816475610506988E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999708927195675	WITHOUT_CLASSIFICATION	2.910728043250286E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9995431108582461	WITHOUT_CLASSIFICATION	4.56889141753893E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9998266993245046	WITHOUT_CLASSIFICATION	1.733006754952473E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999750708797834	WITHOUT_CLASSIFICATION	2.4929120216607046E-4	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999574821401785	WITHOUT_CLASSIFICATION	4.251785982155112E-5	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999941279857013	WITHOUT_CLASSIFICATION	5.8720142986383976E-6	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994731204257732	WITHOUT_CLASSIFICATION	5.268795742268092E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999189483035941	WITHOUT_CLASSIFICATION	8.10516964058868E-5	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999312460237983	WITHOUT_CLASSIFICATION	6.875397620159903E-5	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.999756624410742	WITHOUT_CLASSIFICATION	2.4337558925811427E-4	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999384707902481	WITHOUT_CLASSIFICATION	6.152920975192125E-5	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999901384933439	WITHOUT_CLASSIFICATION	9.861506656097138E-5	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9949443202326299	WITHOUT_CLASSIFICATION	0.005055679767370151	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999822031953013	WITHOUT_CLASSIFICATION	1.7796804698695884E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995633030999755	WITHOUT_CLASSIFICATION	4.366969000244598E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.995127854777068	WITHOUT_CLASSIFICATION	0.004872145222931943	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999006992861458	WITHOUT_CLASSIFICATION	9.930071385415605E-5	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999985789078768	WITHOUT_CLASSIFICATION	1.421092123199242E-5	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999640673461669	WITHOUT_CLASSIFICATION	3.593265383305548E-5	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999989045911346	WITHOUT_CLASSIFICATION	1.0954088653961706E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996325048450311	WITHOUT_CLASSIFICATION	3.674951549689582E-4	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999828875918516	WITHOUT_CLASSIFICATION	1.7112408148398754E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999112647598535	WITHOUT_CLASSIFICATION	8.873524014645103E-5	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999817523349684	WITHOUT_CLASSIFICATION	1.8247665031629832E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9997715028701527	WITHOUT_CLASSIFICATION	2.2849712984719596E-4	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999874152593775	WITHOUT_CLASSIFICATION	1.2584740622470931E-5	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9998209863258813	WITHOUT_CLASSIFICATION	1.7901367411863881E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999762761625356	WITHOUT_CLASSIFICATION	2.3723837464383438E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999640649329593	WITHOUT_CLASSIFICATION	3.593506704066995E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999463489363533	WITHOUT_CLASSIFICATION	5.365106364680757E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999756484740333	WITHOUT_CLASSIFICATION	2.435152596672346E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9994269595435872	WITHOUT_CLASSIFICATION	5.730404564127914E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9998209863258813	WITHOUT_CLASSIFICATION	1.7901367411863881E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999430230795103	WITHOUT_CLASSIFICATION	5.6976920489669314E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999756484740333	WITHOUT_CLASSIFICATION	2.435152596672346E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999050828156424	WITHOUT_CLASSIFICATION	9.491718435767108E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999959571231632	WITHOUT_CLASSIFICATION	4.042876836740918E-6	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999215711953977	WITHOUT_CLASSIFICATION	7.842880460232158E-5	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999933357351146	WITHOUT_CLASSIFICATION	6.664264885397488E-5	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999832173764481	WITHOUT_CLASSIFICATION	1.6782623551899394E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998959446051388	WITHOUT_CLASSIFICATION	1.040553948613064E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999103158098468	WITHOUT_CLASSIFICATION	8.96841901531488E-5	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999900714628714	WITHOUT_CLASSIFICATION	9.928537128558986E-6	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.999963062197857	WITHOUT_CLASSIFICATION	3.693780214302289E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999806027875744	WITHOUT_CLASSIFICATION	1.9397212425570475E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999836055582195	WITHOUT_CLASSIFICATION	1.6394441780428367E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999633216333269	WITHOUT_CLASSIFICATION	3.667836667298267E-5	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999346907197306	WITHOUT_CLASSIFICATION	6.530928026947926E-5	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999376316656079	WITHOUT_CLASSIFICATION	6.236833439213662E-5	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999632006048095	WITHOUT_CLASSIFICATION	3.679939519059459E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.9998604452916431	WITHOUT_CLASSIFICATION	1.3955470835697357E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999887899827548	WITHOUT_CLASSIFICATION	1.1210017245197508E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998794292194464	WITHOUT_CLASSIFICATION	1.2057078055362569E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999956149430988	WITHOUT_CLASSIFICATION	4.385056901196875E-5	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999525777859306	WITHOUT_CLASSIFICATION	4.742221406944905E-5	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999605497820643	WITHOUT_CLASSIFICATION	3.945021793569593E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999887822410649	WITHOUT_CLASSIFICATION	1.1217758935105078E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999936453534566	WITHOUT_CLASSIFICATION	6.354646543342234E-6	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999872324610553	WITHOUT_CLASSIFICATION	1.276753894464275E-5	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999932349077534	WITHOUT_CLASSIFICATION	6.765092246592457E-5	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999675996401586	WITHOUT_CLASSIFICATION	3.240035984139988E-4	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9999373485059531	WITHOUT_CLASSIFICATION	6.265149404686274E-5	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999330587525564	WITHOUT_CLASSIFICATION	6.694124744356224E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893395550835	WITHOUT_CLASSIFICATION	1.1066044491648273E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998091883629963	WITHOUT_CLASSIFICATION	1.908116370037226E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9988450027241659	WITHOUT_CLASSIFICATION	0.0011549972758341373	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999707849873573	WITHOUT_CLASSIFICATION	2.921501264266157E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999521370275668	WITHOUT_CLASSIFICATION	4.786297243324507E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999991760389575	WITHOUT_CLASSIFICATION	8.239610424640242E-7	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999074211120368	WITHOUT_CLASSIFICATION	9.257888796330502E-5	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999541187464496	WITHOUT_CLASSIFICATION	4.588125355036692E-5	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999539723904707	WITHOUT_CLASSIFICATION	4.602760952935718E-5	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999865444103723	WITHOUT_CLASSIFICATION	1.3455589627707086E-4	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9994205627696159	WITHOUT_CLASSIFICATION	5.794372303842214E-4	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999933912154622	WITHOUT_CLASSIFICATION	6.6087845378453265E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999844887490138	WITHOUT_CLASSIFICATION	1.5511250986210335E-5	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999382251675731	WITHOUT_CLASSIFICATION	6.17748324268869E-5	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999954191958722	WITHOUT_CLASSIFICATION	4.580804127788642E-6	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999160670394155	WITHOUT_CLASSIFICATION	8.393296058450282E-5	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999997529285157	WITHOUT_CLASSIFICATION	2.4707148432755705E-7	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9993478617008722	WITHOUT_CLASSIFICATION	6.521382991277935E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999284701636972	WITHOUT_CLASSIFICATION	7.152983630278629E-5	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999085975910558	WITHOUT_CLASSIFICATION	9.140240894417036E-5	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995606495111319	WITHOUT_CLASSIFICATION	4.393504888680979E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997015416443705	WITHOUT_CLASSIFICATION	2.984583556294991E-4	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999188195514607	WITHOUT_CLASSIFICATION	8.118044853942985E-5	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998297139711647	WITHOUT_CLASSIFICATION	1.702860288351961E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999995908628118	WITHOUT_CLASSIFICATION	4.0913718819425455E-6	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999858903223324	WITHOUT_CLASSIFICATION	1.4109677667528277E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999285850542702	WITHOUT_CLASSIFICATION	7.141494572989718E-5	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.999927350871519	WITHOUT_CLASSIFICATION	7.264912848107718E-5	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999778584404325	WITHOUT_CLASSIFICATION	2.2141559567499785E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893395550835	WITHOUT_CLASSIFICATION	1.1066044491648273E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997837552775339	WITHOUT_CLASSIFICATION	2.1624472246600346E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999908151494348	WITHOUT_CLASSIFICATION	9.184850565126397E-6	DEFECT
switch	WITHOUT_CLASSIFICATION	0.9999928827912642	WITHOUT_CLASSIFICATION	7.1172087358067365E-6	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998893492415559	WITHOUT_CLASSIFICATION	1.1065075844415039E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999979486678217	WITHOUT_CLASSIFICATION	2.0513321784320683E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999032657687766	WITHOUT_CLASSIFICATION	9.673423122341485E-4	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997565137448269	WITHOUT_CLASSIFICATION	2.434862551731839E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999883802969362	WITHOUT_CLASSIFICATION	1.1619703063720145E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999771203370532	WITHOUT_CLASSIFICATION	2.2879662946837382E-5	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.999876877466371	WITHOUT_CLASSIFICATION	1.2312253362895532E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9996719082463478	WITHOUT_CLASSIFICATION	3.280917536522023E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953307501508	WITHOUT_CLASSIFICATION	4.66924984918826E-6	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999957051026199	WITHOUT_CLASSIFICATION	4.294897380076793E-6	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9997631083530305	WITHOUT_CLASSIFICATION	2.3689164696965751E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996921652721025	WITHOUT_CLASSIFICATION	3.078347278975235E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999506905717974	WITHOUT_CLASSIFICATION	4.930942820249044E-5	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9996815907270992	WITHOUT_CLASSIFICATION	3.1840927290085265E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9998818657661785	WITHOUT_CLASSIFICATION	1.1813423382142638E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.9999978381885718	WITHOUT_CLASSIFICATION	2.161811428221249E-6	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999928997060057	WITHOUT_CLASSIFICATION	7.100293994260324E-6	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999610656449243	WITHOUT_CLASSIFICATION	3.893435507583211E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999610656449243	WITHOUT_CLASSIFICATION	3.893435507583211E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999752342519985	WITHOUT_CLASSIFICATION	2.4765748001382412E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999939152689628	WITHOUT_CLASSIFICATION	6.084731037235612E-6	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9997685391289087	WITHOUT_CLASSIFICATION	2.3146087109132476E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999542656771693	WITHOUT_CLASSIFICATION	4.5734322830657944E-5	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999196565152184	WITHOUT_CLASSIFICATION	8.03434847815663E-5	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999558641325049	WITHOUT_CLASSIFICATION	4.413586749501145E-5	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999330787962563	WITHOUT_CLASSIFICATION	6.69212037436366E-5	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994330329459701	WITHOUT_CLASSIFICATION	5.669670540299417E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9994330329459701	WITHOUT_CLASSIFICATION	5.669670540299417E-4	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998232962593081	WITHOUT_CLASSIFICATION	1.7670374069199033E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999465885873091	WITHOUT_CLASSIFICATION	5.341141269082525E-5	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997920462733544	WITHOUT_CLASSIFICATION	2.079537266456454E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999272301119715	WITHOUT_CLASSIFICATION	7.276988802846201E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999272301119715	WITHOUT_CLASSIFICATION	7.276988802846201E-5	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999272301119715	WITHOUT_CLASSIFICATION	7.276988802846201E-5	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999816143778025	WITHOUT_CLASSIFICATION	1.838562219744067E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999438074777008	WITHOUT_CLASSIFICATION	5.6192522299040884E-5	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999959598688766	WITHOUT_CLASSIFICATION	4.0401311234066885E-6	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999853076186615	WITHOUT_CLASSIFICATION	1.469238133849161E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999420275086486	WITHOUT_CLASSIFICATION	5.7972491351294694E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999909543587674	WITHOUT_CLASSIFICATION	9.04564123256904E-6	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999846796857305	WITHOUT_CLASSIFICATION	1.532031426956817E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9703442120313035	WITHOUT_CLASSIFICATION	0.02965578796869655	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998602941802796	WITHOUT_CLASSIFICATION	1.397058197204975E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999717532409658	WITHOUT_CLASSIFICATION	2.8246759034235567E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.99993002991969	WITHOUT_CLASSIFICATION	6.997008030994052E-5	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9998943565574808	WITHOUT_CLASSIFICATION	1.0564344251913268E-4	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9981350391082219	WITHOUT_CLASSIFICATION	0.001864960891778075	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.99998693949457	WITHOUT_CLASSIFICATION	1.3060505429966841E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999706659786777	WITHOUT_CLASSIFICATION	2.933402132227659E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999919750102957	WITHOUT_CLASSIFICATION	8.02498970421325E-6	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999739819081217	WITHOUT_CLASSIFICATION	2.6018091878315913E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999580161038631	WITHOUT_CLASSIFICATION	4.198389613679802E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999610656449243	WITHOUT_CLASSIFICATION	3.893435507583211E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999901540912822	WITHOUT_CLASSIFICATION	9.845908717775184E-6	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9992223659400997	WITHOUT_CLASSIFICATION	7.776340599002708E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999895784440439	WITHOUT_CLASSIFICATION	1.0421555956100363E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999402710388782	WITHOUT_CLASSIFICATION	5.9728961121801085E-5	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999232433884235	WITHOUT_CLASSIFICATION	7.675661157647656E-5	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999976033933253	WITHOUT_CLASSIFICATION	2.396606674708292E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999839010956574	WITHOUT_CLASSIFICATION	1.6098904342637943E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9998822396710616	WITHOUT_CLASSIFICATION	1.1776032893838166E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999054606182374	WITHOUT_CLASSIFICATION	9.453938176252101E-5	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999938070112834	WITHOUT_CLASSIFICATION	6.19298871660825E-5	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997020697155075	WITHOUT_CLASSIFICATION	2.9793028449249755E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999600598130199	WITHOUT_CLASSIFICATION	3.9940186980193475E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999912012588933	WITHOUT_CLASSIFICATION	8.798741106795078E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999965475808236	WITHOUT_CLASSIFICATION	3.452419176555447E-6	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.9999642041098776	WITHOUT_CLASSIFICATION	3.579589012241933E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9353513222435259	WITHOUT_CLASSIFICATION	0.06464867775647407	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9994624429136862	WITHOUT_CLASSIFICATION	5.375570863136884E-4	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999849849589708	WITHOUT_CLASSIFICATION	1.501504102932336E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999579063925953	WITHOUT_CLASSIFICATION	4.209360740461094E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999579063925953	WITHOUT_CLASSIFICATION	4.209360740461094E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999482919424008	WITHOUT_CLASSIFICATION	5.170805759930224E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999739255875373	WITHOUT_CLASSIFICATION	2.6074412462785665E-5	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999448781312891	WITHOUT_CLASSIFICATION	5.512186871080284E-5	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999453962586623	WITHOUT_CLASSIFICATION	5.4603741337705056E-5	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997825505885328	WITHOUT_CLASSIFICATION	2.1744941146701761E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999847663949738	WITHOUT_CLASSIFICATION	1.5233605026307904E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998767890133254	WITHOUT_CLASSIFICATION	1.2321098667457734E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999108742118475	WITHOUT_CLASSIFICATION	8.912578815238899E-5	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999803898549163	WITHOUT_CLASSIFICATION	1.9610145083692456E-5	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999772740152361	WITHOUT_CLASSIFICATION	2.2725984763865766E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9997413794805613	WITHOUT_CLASSIFICATION	2.586205194387358E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953307501508	WITHOUT_CLASSIFICATION	4.66924984918826E-6	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999983293730776	WITHOUT_CLASSIFICATION	1.6706269223140648E-6	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999594369877861	WITHOUT_CLASSIFICATION	4.056301221387903E-5	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.999989888193634	WITHOUT_CLASSIFICATION	1.011180636590647E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9994601060607888	WITHOUT_CLASSIFICATION	5.3989393921123E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999869721028977	WITHOUT_CLASSIFICATION	1.3027897102335832E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999869721028977	WITHOUT_CLASSIFICATION	1.3027897102335832E-5	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997896490958028	WITHOUT_CLASSIFICATION	2.103509041971677E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9922734751521342	WITHOUT_CLASSIFICATION	0.007726524847865854	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.999562380078016	WITHOUT_CLASSIFICATION	4.376199219840575E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9996659061942313	WITHOUT_CLASSIFICATION	3.3409380576860265E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9998673198236294	WITHOUT_CLASSIFICATION	1.3268017637050334E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996762084488219	WITHOUT_CLASSIFICATION	3.2379155117812563E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999807331033311	WITHOUT_CLASSIFICATION	1.9266896668782445E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987570052955728	WITHOUT_CLASSIFICATION	0.0012429947044272256	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998376817001876	WITHOUT_CLASSIFICATION	1.6231829981239008E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999117357244462	WITHOUT_CLASSIFICATION	8.826427555376876E-5	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999754042553877	WITHOUT_CLASSIFICATION	2.4595744612349255E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987570052955728	WITHOUT_CLASSIFICATION	0.0012429947044272256	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9985601451030435	WITHOUT_CLASSIFICATION	0.0014398548969565266	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9998632521176891	WITHOUT_CLASSIFICATION	1.367478823109994E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999180405162564	WITHOUT_CLASSIFICATION	8.195948374361478E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.999551652040228	WITHOUT_CLASSIFICATION	4.4834795977206725E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9998665865352433	WITHOUT_CLASSIFICATION	1.3341346475673088E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999951550376565	WITHOUT_CLASSIFICATION	4.844962343516697E-6	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999655076364319	WITHOUT_CLASSIFICATION	3.449236356808322E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999709387264277	WITHOUT_CLASSIFICATION	2.9061273572300994E-5	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998868801181534	WITHOUT_CLASSIFICATION	1.1311988184657084E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9975587077781058	WITHOUT_CLASSIFICATION	0.002441292221894169	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999483227273933	WITHOUT_CLASSIFICATION	5.167727260671822E-5	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9998963769955713	WITHOUT_CLASSIFICATION	1.0362300442858916E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999459981937725	WITHOUT_CLASSIFICATION	5.400180622752999E-5	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999917335339674	WITHOUT_CLASSIFICATION	8.266466032534652E-6	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999496980807504	WITHOUT_CLASSIFICATION	5.030191924964128E-5	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9998955275379026	WITHOUT_CLASSIFICATION	1.0447246209742495E-4	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999465884494514	WITHOUT_CLASSIFICATION	5.3411550548665915E-5	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997192324649397	WITHOUT_CLASSIFICATION	2.807675350602944E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997192324649397	WITHOUT_CLASSIFICATION	2.807675350602944E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999655076364319	WITHOUT_CLASSIFICATION	3.449236356808322E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998744624817681	WITHOUT_CLASSIFICATION	1.2553751823183914E-4	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997298621067201	WITHOUT_CLASSIFICATION	2.701378932798452E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9990246525974208	WITHOUT_CLASSIFICATION	9.753474025792184E-4	DEFECT
#2	WITHOUT_CLASSIFICATION	0.999991991202705	WITHOUT_CLASSIFICATION	8.008797294908988E-6	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999872509009183	WITHOUT_CLASSIFICATION	1.2749099081737507E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999760066072947	WITHOUT_CLASSIFICATION	2.3993392705338295E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999252907944576	WITHOUT_CLASSIFICATION	7.470920554249004E-5	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9987436293162079	WITHOUT_CLASSIFICATION	0.0012563706837921554	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999963222827194	WITHOUT_CLASSIFICATION	3.677717280686336E-6	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999513979318643	WITHOUT_CLASSIFICATION	4.860206813573205E-5	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999869468617902	WITHOUT_CLASSIFICATION	1.3053138209887823E-5	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9990665477165279	WITHOUT_CLASSIFICATION	9.334522834719474E-4	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9997116182941748	WITHOUT_CLASSIFICATION	2.883817058251799E-4	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999985266216072	WITHOUT_CLASSIFICATION	1.4733783928580737E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999695083239012	WITHOUT_CLASSIFICATION	3.0491676098910008E-5	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999875890635967	WITHOUT_CLASSIFICATION	1.2410936403208535E-5	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999996134040859	WITHOUT_CLASSIFICATION	3.865959141033387E-6	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999919096045896	WITHOUT_CLASSIFICATION	8.090395410400683E-5	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999981050177271	WITHOUT_CLASSIFICATION	1.8949822729012922E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999816238868233	WITHOUT_CLASSIFICATION	1.837611317666545E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999798471687262	WITHOUT_CLASSIFICATION	2.015283127378073E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999443010367942	WITHOUT_CLASSIFICATION	5.569896320571792E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999543808408097	WITHOUT_CLASSIFICATION	4.561915919032665E-5	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999965916905893	WITHOUT_CLASSIFICATION	3.4083094106395006E-6	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999972229929622	WITHOUT_CLASSIFICATION	2.777007037731181E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999379183343007	WITHOUT_CLASSIFICATION	6.208166569928631E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999527260267141	WITHOUT_CLASSIFICATION	4.727397328588622E-5	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999820750694257	WITHOUT_CLASSIFICATION	1.792493057425375E-5	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999968675891234	WITHOUT_CLASSIFICATION	3.132410876665032E-6	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9996972620929718	WITHOUT_CLASSIFICATION	3.027379070281488E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999694862281356	WITHOUT_CLASSIFICATION	3.0513771864335503E-5	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999865530027077	WITHOUT_CLASSIFICATION	1.3446997292319248E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999785262809166	WITHOUT_CLASSIFICATION	2.1473719083399225E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999945640124388	WITHOUT_CLASSIFICATION	5.435987561222852E-6	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999092353208938	WITHOUT_CLASSIFICATION	9.076467910613949E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997939152799418	WITHOUT_CLASSIFICATION	2.0608472005833093E-4	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996115041459717	WITHOUT_CLASSIFICATION	3.884958540284286E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9999659384135082	WITHOUT_CLASSIFICATION	3.406158649172983E-5	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999398260372576	WITHOUT_CLASSIFICATION	6.0173962742369205E-5	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9968412905553836	WITHOUT_CLASSIFICATION	0.0031587094446162887	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999383176546979	WITHOUT_CLASSIFICATION	6.168234530212886E-5	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9996029139393688	WITHOUT_CLASSIFICATION	3.970860606310994E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6279363751130331	WITHOUT_CLASSIFICATION	0.37206362488696687	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999763557140898	WITHOUT_CLASSIFICATION	2.3644285910208705E-5	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999874333326333	WITHOUT_CLASSIFICATION	1.2566667366695878E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998818170756257	WITHOUT_CLASSIFICATION	1.1818292437419991E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9993048072434009	WITHOUT_CLASSIFICATION	6.951927565991611E-4	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9995108309979741	WITHOUT_CLASSIFICATION	4.891690020257782E-4	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999870201491944	WITHOUT_CLASSIFICATION	1.2979850805622058E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999472955882793	WITHOUT_CLASSIFICATION	5.270441172067227E-5	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999870675084798	WITHOUT_CLASSIFICATION	1.2932491520192244E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998376817001876	WITHOUT_CLASSIFICATION	1.6231829981239008E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999999626979297	WITHOUT_CLASSIFICATION	3.7302070304791104E-7	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999695083239012	WITHOUT_CLASSIFICATION	3.0491676098910008E-5	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9970051451568899	WITHOUT_CLASSIFICATION	0.002994854843110106	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998577642856634	WITHOUT_CLASSIFICATION	1.4223571433656274E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999649295033913	WITHOUT_CLASSIFICATION	3.507049660862674E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999964859501163	WITHOUT_CLASSIFICATION	3.5140498836995344E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999077486137153	WITHOUT_CLASSIFICATION	9.225138628469195E-5	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999983599581121	WITHOUT_CLASSIFICATION	1.6400418879310664E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9986541390604778	WITHOUT_CLASSIFICATION	0.0013458609395220935	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999969511383658	WITHOUT_CLASSIFICATION	3.048861634212977E-6	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9818981983654175	WITHOUT_CLASSIFICATION	0.018101801634582512	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998302264469938	WITHOUT_CLASSIFICATION	1.6977355300615683E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999913460738827	WITHOUT_CLASSIFICATION	8.653926117262489E-6	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999970178196773	WITHOUT_CLASSIFICATION	2.9821803227710037E-6	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996771345088518	WITHOUT_CLASSIFICATION	3.228654911481833E-4	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996771345088518	WITHOUT_CLASSIFICATION	3.228654911481833E-4	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999956203808485	WITHOUT_CLASSIFICATION	4.379619151432649E-6	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998997267389176	WITHOUT_CLASSIFICATION	1.0027326108235926E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999804226275495	WITHOUT_CLASSIFICATION	1.957737245044277E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999887142028068	WITHOUT_CLASSIFICATION	1.1285797193320074E-5	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999965245585607	WITHOUT_CLASSIFICATION	3.475441439293954E-5	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998881240044153	WITHOUT_CLASSIFICATION	1.1187599558473417E-4	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9996901793611721	WITHOUT_CLASSIFICATION	3.098206388278493E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999231297885129	WITHOUT_CLASSIFICATION	7.687021148710281E-5	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999816233127324	WITHOUT_CLASSIFICATION	1.837668726755914E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.999954922849037	WITHOUT_CLASSIFICATION	4.5077150963010304E-5	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.999954922849037	WITHOUT_CLASSIFICATION	4.5077150963010304E-5	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999403147980384	WITHOUT_CLASSIFICATION	5.9685201961745635E-5	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999684988239841	WITHOUT_CLASSIFICATION	3.150117601592337E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999625438567514	WITHOUT_CLASSIFICATION	3.745614324845589E-5	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9989711565394574	WITHOUT_CLASSIFICATION	0.001028843460542517	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.999964593585461	WITHOUT_CLASSIFICATION	3.5406414539050106E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998561880268103	WITHOUT_CLASSIFICATION	1.4381197318969307E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999994122857797	WITHOUT_CLASSIFICATION	5.877142202941227E-6	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9994025629424756	WITHOUT_CLASSIFICATION	5.974370575243496E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9997845565311638	WITHOUT_CLASSIFICATION	2.1544346883623064E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991986944412413	WITHOUT_CLASSIFICATION	8.013055587587322E-4	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999535381664154	WITHOUT_CLASSIFICATION	4.6461833584552236E-5	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999552234062633	WITHOUT_CLASSIFICATION	4.477659373668615E-5	DEFECT
implied	WITHOUT_CLASSIFICATION	0.9999922701462631	WITHOUT_CLASSIFICATION	7.729853736855396E-6	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999924713253073	WITHOUT_CLASSIFICATION	7.528674692600366E-6	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998909046936686	WITHOUT_CLASSIFICATION	1.0909530633137721E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999686056047187	WITHOUT_CLASSIFICATION	3.139439528135325E-5	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996515285292131	WITHOUT_CLASSIFICATION	3.484714707869131E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998782315830923	WITHOUT_CLASSIFICATION	1.2176841690765032E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999375293583577	WITHOUT_CLASSIFICATION	6.247064164234152E-5	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9998397445534664	WITHOUT_CLASSIFICATION	1.6025544653360958E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999362127662879	WITHOUT_CLASSIFICATION	6.378723371210345E-5	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999902959586554	WITHOUT_CLASSIFICATION	9.704041344607614E-6	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999624069887684	WITHOUT_CLASSIFICATION	3.759301123170298E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999705495873159	WITHOUT_CLASSIFICATION	2.9450412684193456E-5	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999667105791092	WITHOUT_CLASSIFICATION	3.328942089080376E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999723232676664	WITHOUT_CLASSIFICATION	2.7676732333653488E-5	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.999969074254374	WITHOUT_CLASSIFICATION	3.092574562604021E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999231839275974	WITHOUT_CLASSIFICATION	7.681607240259433E-5	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999330294521872	WITHOUT_CLASSIFICATION	6.697054781287001E-5	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999826920801658	WITHOUT_CLASSIFICATION	1.7307919834290085E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999209042227454	WITHOUT_CLASSIFICATION	7.909577725462821E-5	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999458486399597	WITHOUT_CLASSIFICATION	5.415136004019579E-5	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594607039164	WITHOUT_CLASSIFICATION	4.053929608372272E-5	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9915415348942516	WITHOUT_CLASSIFICATION	0.008458465105748481	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999823669882355	WITHOUT_CLASSIFICATION	1.763301176447255E-5	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999998994274617	WITHOUT_CLASSIFICATION	1.0057253834358015E-7	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999892359547699	WITHOUT_CLASSIFICATION	1.0764045230107378E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474147071017	WITHOUT_CLASSIFICATION	5.2585292898398696E-5	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999963010137349	WITHOUT_CLASSIFICATION	3.6989862650194285E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999315014291795	WITHOUT_CLASSIFICATION	6.849857082043055E-5	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9998503902432065	WITHOUT_CLASSIFICATION	1.4960975679349239E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999836743777178	WITHOUT_CLASSIFICATION	1.6325622282164532E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9995081719219213	WITHOUT_CLASSIFICATION	4.918280780786116E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9995957665920635	WITHOUT_CLASSIFICATION	4.0423340793658343E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9998708213591425	WITHOUT_CLASSIFICATION	1.2917864085753355E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.9999220140289933	WITHOUT_CLASSIFICATION	7.79859710066855E-5	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999232594726947	WITHOUT_CLASSIFICATION	7.674052730533804E-5	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999256284065672	WITHOUT_CLASSIFICATION	7.437159343282836E-5	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9994061299504317	WITHOUT_CLASSIFICATION	5.938700495684484E-4	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999751428568379	WITHOUT_CLASSIFICATION	2.485714316218665E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999149305529692	WITHOUT_CLASSIFICATION	8.506944703083181E-5	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999738671914209	WITHOUT_CLASSIFICATION	2.6132808579037425E-5	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.999852845003197	WITHOUT_CLASSIFICATION	1.4715499680299557E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999548892300357	WITHOUT_CLASSIFICATION	4.511076996434156E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999205982726854	WITHOUT_CLASSIFICATION	7.940172731450378E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999906641303531	WITHOUT_CLASSIFICATION	9.335869646934583E-6	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999564025422264	WITHOUT_CLASSIFICATION	4.359745777351886E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999906641303531	WITHOUT_CLASSIFICATION	9.335869646934583E-6	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.998811245446915	WITHOUT_CLASSIFICATION	0.001188754553084955	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9964760457433879	WITHOUT_CLASSIFICATION	0.0035239542566121752	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999824431051969	WITHOUT_CLASSIFICATION	1.755689480317133E-5	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999942451081331	WITHOUT_CLASSIFICATION	5.754891866994585E-6	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9998990775374552	WITHOUT_CLASSIFICATION	1.0092246254476201E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999824431051969	WITHOUT_CLASSIFICATION	1.755689480317133E-5	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999999162362552	WITHOUT_CLASSIFICATION	8.376374479151743E-7	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999879250213793	WITHOUT_CLASSIFICATION	1.2074978620708825E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999818450607289	WITHOUT_CLASSIFICATION	1.815493927109102E-4	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999809304610985	WITHOUT_CLASSIFICATION	1.906953890147686E-5	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999994600030921	WITHOUT_CLASSIFICATION	5.3999690789844545E-6	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999723134047872	WITHOUT_CLASSIFICATION	2.7686595212746897E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999986948578086	WITHOUT_CLASSIFICATION	1.3051421913922777E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9998773921332641	WITHOUT_CLASSIFICATION	1.226078667360008E-4	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999898728989876	WITHOUT_CLASSIFICATION	1.0127101012389322E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999117203524949	WITHOUT_CLASSIFICATION	8.827964750515294E-5	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9991428319357682	WITHOUT_CLASSIFICATION	8.571680642319059E-4	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999249945550815	WITHOUT_CLASSIFICATION	7.500544491843259E-5	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998499755864546	WITHOUT_CLASSIFICATION	1.5002441354542098E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999439542626632	WITHOUT_CLASSIFICATION	5.60457373367135E-5	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999718634913547	WITHOUT_CLASSIFICATION	2.8136508645240483E-5	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999024114819345	WITHOUT_CLASSIFICATION	9.758851806548896E-5	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991720391495501	WITHOUT_CLASSIFICATION	8.279608504499038E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997176920476665	WITHOUT_CLASSIFICATION	2.823079523334963E-4	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998867208225398	WITHOUT_CLASSIFICATION	1.1327917746028465E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9929549598749281	WITHOUT_CLASSIFICATION	0.007045040125071928	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999614061617803	WITHOUT_CLASSIFICATION	3.8593838219701395E-4	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999467752678757	WITHOUT_CLASSIFICATION	5.322473212425363E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999197963039315	WITHOUT_CLASSIFICATION	8.020369606860279E-5	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9996628388503351	WITHOUT_CLASSIFICATION	3.3716114966481694E-4	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9999646376029557	WITHOUT_CLASSIFICATION	3.536239704426865E-5	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9570567956573998	WITHOUT_CLASSIFICATION	0.042943204342600336	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9962268265634371	WITHOUT_CLASSIFICATION	0.0037731734365629645	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999905360464983	WITHOUT_CLASSIFICATION	9.463953501686924E-6	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.999961702370016	WITHOUT_CLASSIFICATION	3.829762998388614E-5	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9998515456477433	WITHOUT_CLASSIFICATION	1.4845435225675465E-4	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999197963039315	WITHOUT_CLASSIFICATION	8.020369606860279E-5	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999157281158805	WITHOUT_CLASSIFICATION	8.427188411953627E-5	DEFECT
an association	WITHOUT_CLASSIFICATION	0.9999897341693116	WITHOUT_CLASSIFICATION	1.0265830688362937E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9999453862897566	WITHOUT_CLASSIFICATION	5.461371024345551E-5	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9907102261910963	WITHOUT_CLASSIFICATION	0.009289773808903739	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9929549598749281	WITHOUT_CLASSIFICATION	0.007045040125071928	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999703693541517	WITHOUT_CLASSIFICATION	2.9630645848178106E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998191982049982	WITHOUT_CLASSIFICATION	1.8080179500172165E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9997178494656276	WITHOUT_CLASSIFICATION	2.821505343723409E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9998835415516784	WITHOUT_CLASSIFICATION	1.1645844832155676E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999961646030887	WITHOUT_CLASSIFICATION	3.835396911281792E-6	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.99999273903849	WITHOUT_CLASSIFICATION	7.260961509970082E-6	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.983360864931468	WITHOUT_CLASSIFICATION	0.01663913506853193	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9998864429792295	WITHOUT_CLASSIFICATION	1.135570207705913E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9995398586983422	WITHOUT_CLASSIFICATION	4.601413016577868E-4	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.999974953692002	WITHOUT_CLASSIFICATION	2.50463079980542E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999955586105772	WITHOUT_CLASSIFICATION	4.4413894228472755E-6	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999860484616435	WITHOUT_CLASSIFICATION	1.3951538356462826E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999451598215457	WITHOUT_CLASSIFICATION	5.4840178454363906E-5	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999921049652876	WITHOUT_CLASSIFICATION	7.89503471251598E-6	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999470365786464	WITHOUT_CLASSIFICATION	5.296342135353453E-5	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999719657847609	WITHOUT_CLASSIFICATION	2.8034215239192016E-5	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9974735854461552	WITHOUT_CLASSIFICATION	0.0025264145538449047	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9994439363031539	WITHOUT_CLASSIFICATION	5.560636968461377E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983287171144355	WITHOUT_CLASSIFICATION	0.001671282885564577	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.999448865956417	WITHOUT_CLASSIFICATION	5.511340435829658E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999601407631469	WITHOUT_CLASSIFICATION	3.985923685303881E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999601407631469	WITHOUT_CLASSIFICATION	3.985923685303881E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999720753403152	WITHOUT_CLASSIFICATION	2.7924659684798743E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999601407631469	WITHOUT_CLASSIFICATION	3.985923685303881E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9999601407631469	WITHOUT_CLASSIFICATION	3.985923685303881E-5	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9975323117435537	WITHOUT_CLASSIFICATION	0.0024676882564463954	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998127106036522	WITHOUT_CLASSIFICATION	1.8728939634785817E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999071484723151	WITHOUT_CLASSIFICATION	9.285152768487188E-5	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999071484723151	WITHOUT_CLASSIFICATION	9.285152768487188E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987775508022991	WITHOUT_CLASSIFICATION	0.0012224491977008629	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999935538747429	WITHOUT_CLASSIFICATION	6.446125257181505E-6	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9987718716116302	WITHOUT_CLASSIFICATION	0.0012281283883697697	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998816758109117	WITHOUT_CLASSIFICATION	1.1832418908828577E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999078108537763	WITHOUT_CLASSIFICATION	9.218914622368397E-5	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999117020731778	WITHOUT_CLASSIFICATION	8.829792682217172E-5	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997692344904788	WITHOUT_CLASSIFICATION	2.3076550952105967E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999425256495319	WITHOUT_CLASSIFICATION	5.7474350468131884E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998892685152054	WITHOUT_CLASSIFICATION	1.107314847946029E-4	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999460893547186	WITHOUT_CLASSIFICATION	5.391064528139297E-5	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999161372722358	WITHOUT_CLASSIFICATION	8.38627277641654E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9953742618225543	WITHOUT_CLASSIFICATION	0.004625738177445711	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999900711373486	WITHOUT_CLASSIFICATION	9.92886265132244E-6	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999816604123783	WITHOUT_CLASSIFICATION	1.8339587621647896E-5	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9994395194271309	WITHOUT_CLASSIFICATION	5.604805728690527E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9998969093990752	WITHOUT_CLASSIFICATION	1.0309060092488719E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997602665723253	WITHOUT_CLASSIFICATION	2.3973342767473046E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999817421584255	WITHOUT_CLASSIFICATION	1.8257841574473844E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999900711373486	WITHOUT_CLASSIFICATION	9.92886265132244E-6	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.999614061617803	WITHOUT_CLASSIFICATION	3.8593838219701395E-4	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.9998508692437256	WITHOUT_CLASSIFICATION	1.4913075627435174E-4	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998091155335787	WITHOUT_CLASSIFICATION	1.9088446642140044E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996059640334414	WITHOUT_CLASSIFICATION	3.940359665585553E-4	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9998042059888188	WITHOUT_CLASSIFICATION	1.9579401118115266E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999263035469409	WITHOUT_CLASSIFICATION	7.36964530590902E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9999437106017774	WITHOUT_CLASSIFICATION	5.628939822242503E-5	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998302512889511	WITHOUT_CLASSIFICATION	1.6974871104887164E-4	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999495454108144	WITHOUT_CLASSIFICATION	5.0454589185699024E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999994150065279	WITHOUT_CLASSIFICATION	5.849934720926531E-7	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.999943975975663	WITHOUT_CLASSIFICATION	5.602402433709408E-5	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999663213458435	WITHOUT_CLASSIFICATION	3.367865415642094E-5	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997913494165589	WITHOUT_CLASSIFICATION	2.086505834410915E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999296788470491	WITHOUT_CLASSIFICATION	7.032115295084114E-5	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9937656513265002	WITHOUT_CLASSIFICATION	0.0062343486734997315	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999810019169026	WITHOUT_CLASSIFICATION	1.899808309739359E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999506685300955	WITHOUT_CLASSIFICATION	4.933146990441038E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999038816561749	WITHOUT_CLASSIFICATION	9.611834382509396E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999919321069595	WITHOUT_CLASSIFICATION	8.067893040504698E-5	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999783564458395	WITHOUT_CLASSIFICATION	2.164355416050222E-4	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999510615012227	WITHOUT_CLASSIFICATION	4.8938498777300594E-5	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998909069968388	WITHOUT_CLASSIFICATION	1.0909300316124875E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999992410400304	WITHOUT_CLASSIFICATION	7.589599697246906E-7	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999495454108144	WITHOUT_CLASSIFICATION	5.0454589185699024E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999693327424852	WITHOUT_CLASSIFICATION	3.0667257514854855E-5	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9999448362875336	WITHOUT_CLASSIFICATION	5.516371246644894E-5	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999889858364319	WITHOUT_CLASSIFICATION	1.1014163568120188E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999175315714248	WITHOUT_CLASSIFICATION	8.246842857517449E-5	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.9999231293591845	WITHOUT_CLASSIFICATION	7.687064081548505E-5	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9999438708599528	WITHOUT_CLASSIFICATION	5.6129140047147765E-5	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9998892555084229	WITHOUT_CLASSIFICATION	1.1074449157712735E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9999437756569765	WITHOUT_CLASSIFICATION	5.622434302366458E-5	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9999266077981389	WITHOUT_CLASSIFICATION	7.339220186112107E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999914495182436	WITHOUT_CLASSIFICATION	8.550481756352068E-6	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999790009060893	WITHOUT_CLASSIFICATION	2.099909391066269E-5	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999815540368602	WITHOUT_CLASSIFICATION	1.84459631398843E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999600022533581	WITHOUT_CLASSIFICATION	3.9997746641874246E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999821321112671	WITHOUT_CLASSIFICATION	1.786788873282951E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999342829141217	WITHOUT_CLASSIFICATION	6.571708587829727E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999914495182436	WITHOUT_CLASSIFICATION	8.550481756352068E-6	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999017366072993	WITHOUT_CLASSIFICATION	9.826339270062402E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9997705336942542	WITHOUT_CLASSIFICATION	2.294663057457715E-4	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998825979548134	WITHOUT_CLASSIFICATION	1.1740204518660555E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999831646248037	WITHOUT_CLASSIFICATION	1.683537519625214E-5	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9999442053323411	WITHOUT_CLASSIFICATION	5.579466765889322E-5	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999916161570842	WITHOUT_CLASSIFICATION	8.383842915734181E-6	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999400386548901	WITHOUT_CLASSIFICATION	5.99613451097541E-5	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176222342109	WITHOUT_CLASSIFICATION	8.237776578905551E-5	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999026938860044	WITHOUT_CLASSIFICATION	9.730611399557584E-5	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760097646952	WITHOUT_CLASSIFICATION	2.2399023530492117E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760097646952	WITHOUT_CLASSIFICATION	2.2399023530492117E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760097646952	WITHOUT_CLASSIFICATION	2.2399023530492117E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999721534167244	WITHOUT_CLASSIFICATION	2.7846583275515378E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999721534167244	WITHOUT_CLASSIFICATION	2.7846583275515378E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9969705131440788	WITHOUT_CLASSIFICATION	0.003029486855921308	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999959860686833	WITHOUT_CLASSIFICATION	4.013931316713428E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9998390961685854	WITHOUT_CLASSIFICATION	1.6090383141472372E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9998441082598625	WITHOUT_CLASSIFICATION	1.5589174013747666E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.8846475662068389	WITHOUT_CLASSIFICATION	0.11535243379316101	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893506393506	WITHOUT_CLASSIFICATION	1.1064936064947059E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999062671481688	WITHOUT_CLASSIFICATION	9.373285183123722E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994236544030051	WITHOUT_CLASSIFICATION	5.763455969948635E-4	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471449229093	WITHOUT_CLASSIFICATION	5.285507709072025E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998893506393506	WITHOUT_CLASSIFICATION	1.1064936064947059E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999062671481688	WITHOUT_CLASSIFICATION	9.373285183123722E-5	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999841610021304	WITHOUT_CLASSIFICATION	1.5838997869702995E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999980798929078	WITHOUT_CLASSIFICATION	1.92010709220312E-5	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999948296553387	WITHOUT_CLASSIFICATION	5.170344661281616E-6	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9354843994951415	WITHOUT_CLASSIFICATION	0.06451560050485858	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999055018204301	WITHOUT_CLASSIFICATION	9.449817956986511E-5	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9999403013590445	WITHOUT_CLASSIFICATION	5.969864095543867E-5	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999921303201638	WITHOUT_CLASSIFICATION	7.869679836185102E-6	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999115726919994	WITHOUT_CLASSIFICATION	8.842730800067115E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997890094546047	WITHOUT_CLASSIFICATION	2.1099054539527233E-4	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9970017337771804	WITHOUT_CLASSIFICATION	0.0029982662228196406	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998667794626642	WITHOUT_CLASSIFICATION	1.3322053733575808E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999876732502545	WITHOUT_CLASSIFICATION	1.2326749745439266E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999246895710088	WITHOUT_CLASSIFICATION	7.531042899118396E-5	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9997177778069318	WITHOUT_CLASSIFICATION	2.822221930681626E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999346907197306	WITHOUT_CLASSIFICATION	6.530928026947926E-5	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999303247490667	WITHOUT_CLASSIFICATION	6.967525093333268E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999012301254906	WITHOUT_CLASSIFICATION	9.87698745093866E-5	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9995547600510513	WITHOUT_CLASSIFICATION	4.452399489486869E-4	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.99999756835711	WITHOUT_CLASSIFICATION	2.431642890037891E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999814019577977	WITHOUT_CLASSIFICATION	1.8598042202327787E-5	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999874884278349	WITHOUT_CLASSIFICATION	1.2511572165183807E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999996482301721	WITHOUT_CLASSIFICATION	3.517698278933901E-7	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999742365916715	WITHOUT_CLASSIFICATION	2.5763408328497453E-4	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998872038716129	WITHOUT_CLASSIFICATION	1.127961283870786E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896975747342	WITHOUT_CLASSIFICATION	1.1030242526577424E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999999921646694	WITHOUT_CLASSIFICATION	7.835330589872742E-8	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998965284779887	WITHOUT_CLASSIFICATION	1.0347152201124849E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997127007708728	WITHOUT_CLASSIFICATION	2.8729922912723333E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999698058793272	WITHOUT_CLASSIFICATION	3.019412067284314E-5	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999698058793272	WITHOUT_CLASSIFICATION	3.019412067284314E-5	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998238978294904	WITHOUT_CLASSIFICATION	1.7610217050953103E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.999413025618425	WITHOUT_CLASSIFICATION	5.869743815749938E-4	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999688100137573	WITHOUT_CLASSIFICATION	3.1189986242771026E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953307501508	WITHOUT_CLASSIFICATION	4.66924984918826E-6	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999860336731732	WITHOUT_CLASSIFICATION	1.3966326826729183E-5	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999880977009816	WITHOUT_CLASSIFICATION	1.1902299018477528E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.9999934475818537	WITHOUT_CLASSIFICATION	6.5524181462342915E-6	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.999993637501103	WITHOUT_CLASSIFICATION	6.362498896930601E-6	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.9999952822740759	WITHOUT_CLASSIFICATION	4.717725924095939E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999174665386131	WITHOUT_CLASSIFICATION	8.253346138686348E-5	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999151537167862	WITHOUT_CLASSIFICATION	8.484628321378061E-5	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999156304954964	WITHOUT_CLASSIFICATION	8.436950450362576E-5	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.999130703042154	WITHOUT_CLASSIFICATION	8.692969578458962E-4	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9997182474463414	WITHOUT_CLASSIFICATION	2.8175255365860347E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999360628520607	WITHOUT_CLASSIFICATION	6.3937147939291E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995726212927526	WITHOUT_CLASSIFICATION	4.2737870724733796E-4	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999828148871949	WITHOUT_CLASSIFICATION	1.7185112805167255E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.9997832672083669	WITHOUT_CLASSIFICATION	2.1673279163304002E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999845894323636	WITHOUT_CLASSIFICATION	1.541056763641784E-5	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999909078381309	WITHOUT_CLASSIFICATION	9.09216186916855E-6	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999360628520607	WITHOUT_CLASSIFICATION	6.3937147939291E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999360628520607	WITHOUT_CLASSIFICATION	6.3937147939291E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9999919723735872	WITHOUT_CLASSIFICATION	8.027626412748535E-6	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999877159833509	WITHOUT_CLASSIFICATION	1.2284016649147025E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995147581289285	WITHOUT_CLASSIFICATION	4.852418710714247E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999563752314367	WITHOUT_CLASSIFICATION	4.362476856341414E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999965475808236	WITHOUT_CLASSIFICATION	3.452419176555447E-6	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999012301254906	WITHOUT_CLASSIFICATION	9.87698745093866E-5	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9998696663439781	WITHOUT_CLASSIFICATION	1.303336560218861E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999398390798707	WITHOUT_CLASSIFICATION	6.0160920129240894E-5	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9998903713418925	WITHOUT_CLASSIFICATION	1.096286581074346E-4	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999038964087127	WITHOUT_CLASSIFICATION	9.610359128739513E-5	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9996714435391543	WITHOUT_CLASSIFICATION	3.2855646084573064E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999019970545845	WITHOUT_CLASSIFICATION	9.800294541549546E-5	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996490875566957	WITHOUT_CLASSIFICATION	3.509124433043054E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996490875566957	WITHOUT_CLASSIFICATION	3.509124433043054E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996490875566957	WITHOUT_CLASSIFICATION	3.509124433043054E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996490875566957	WITHOUT_CLASSIFICATION	3.509124433043054E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999132959642008	WITHOUT_CLASSIFICATION	8.670403579916642E-5	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998919760950322	WITHOUT_CLASSIFICATION	1.0802390496772262E-4	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998595918931172	WITHOUT_CLASSIFICATION	1.4040810688277877E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9982880777096927	WITHOUT_CLASSIFICATION	0.001711922290307192	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999343895448207	WITHOUT_CLASSIFICATION	6.561045517920045E-5	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999020969052014	WITHOUT_CLASSIFICATION	9.790309479868704E-5	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999198810769363	WITHOUT_CLASSIFICATION	8.011892306378317E-5	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999874507485915	WITHOUT_CLASSIFICATION	1.2549251408561822E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.9999892881751752	WITHOUT_CLASSIFICATION	1.0711824824890605E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999894142580369	WITHOUT_CLASSIFICATION	1.0585741963169004E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999945570543487	WITHOUT_CLASSIFICATION	5.442945651285993E-5	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999985144078111	WITHOUT_CLASSIFICATION	1.48559218890244E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9998710126056186	WITHOUT_CLASSIFICATION	1.2898739438132927E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999932167731713	WITHOUT_CLASSIFICATION	6.7832268287446614E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999932167731713	WITHOUT_CLASSIFICATION	6.7832268287446614E-6	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999932167731713	WITHOUT_CLASSIFICATION	6.7832268287446614E-6	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999887675843926	WITHOUT_CLASSIFICATION	1.1232415607364442E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.999970340191545	WITHOUT_CLASSIFICATION	2.9659808455090313E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999952390871194	WITHOUT_CLASSIFICATION	4.76091288060569E-6	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998616728764703	WITHOUT_CLASSIFICATION	1.3832712352961855E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998616728764703	WITHOUT_CLASSIFICATION	1.3832712352961855E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999473765733079	WITHOUT_CLASSIFICATION	5.262342669210352E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997760097646952	WITHOUT_CLASSIFICATION	2.2399023530492117E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999941718503421	WITHOUT_CLASSIFICATION	5.82814965789716E-5	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999477975834148	WITHOUT_CLASSIFICATION	5.220241658523707E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999993831467505	WITHOUT_CLASSIFICATION	6.168532494890369E-7	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9987836657183584	WITHOUT_CLASSIFICATION	0.0012163342816415646	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998938597126648	WITHOUT_CLASSIFICATION	1.0614028733523058E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998435050343331	WITHOUT_CLASSIFICATION	1.5649496566690267E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999813796702434	WITHOUT_CLASSIFICATION	1.862032975656248E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9989564147961953	WITHOUT_CLASSIFICATION	0.0010435852038046271	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999549291932635	WITHOUT_CLASSIFICATION	4.5070806736578535E-5	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998587372276702	WITHOUT_CLASSIFICATION	1.4126277232986664E-4	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999226319714168	WITHOUT_CLASSIFICATION	7.736802858306697E-5	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999684399396667	WITHOUT_CLASSIFICATION	3.1560060333239336E-5	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999997116866009	WITHOUT_CLASSIFICATION	2.883133991105944E-6	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999966188516346	WITHOUT_CLASSIFICATION	3.3811483654025174E-5	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999952502935828	WITHOUT_CLASSIFICATION	4.7497064171743875E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999981359327108	WITHOUT_CLASSIFICATION	1.8640672891514255E-6	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999967714516616	WITHOUT_CLASSIFICATION	3.2285483383899646E-5	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994478200706849	WITHOUT_CLASSIFICATION	5.521799293151865E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9992520803166024	WITHOUT_CLASSIFICATION	7.479196833976138E-4	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999696557487955	WITHOUT_CLASSIFICATION	3.03442512045398E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9998095609045715	WITHOUT_CLASSIFICATION	1.9043909542842228E-4	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999483670753007	WITHOUT_CLASSIFICATION	5.163292469928192E-5	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999975258080662	WITHOUT_CLASSIFICATION	2.4741919338134267E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999520335448334	WITHOUT_CLASSIFICATION	4.7966455166482394E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9956261454289561	WITHOUT_CLASSIFICATION	0.0043738545710438285	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999902556264623	WITHOUT_CLASSIFICATION	9.744373537769885E-6	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9985290570760229	WITHOUT_CLASSIFICATION	0.001470942923977145	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9995633030999755	WITHOUT_CLASSIFICATION	4.366969000244598E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.999997208674931	WITHOUT_CLASSIFICATION	2.791325068994999E-6	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999990267789818	WITHOUT_CLASSIFICATION	9.732210181856102E-6	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999954966800063	WITHOUT_CLASSIFICATION	4.503319993714766E-6	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.998864506314706	WITHOUT_CLASSIFICATION	0.0011354936852939923	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999364498047125	WITHOUT_CLASSIFICATION	6.35501952874507E-5	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999339783179039	WITHOUT_CLASSIFICATION	6.602168209619705E-5	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999590553900585	WITHOUT_CLASSIFICATION	4.09446099416E-5	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999529715766445	WITHOUT_CLASSIFICATION	4.702842335557383E-5	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997162077632282	WITHOUT_CLASSIFICATION	2.8379223677180084E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9998087658383288	WITHOUT_CLASSIFICATION	1.912341616712769E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.9999980012915435	WITHOUT_CLASSIFICATION	1.998708456562623E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999169304996383	WITHOUT_CLASSIFICATION	8.306950036165364E-5	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999951302105551	WITHOUT_CLASSIFICATION	4.869789444934802E-6	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999784841965277	WITHOUT_CLASSIFICATION	2.151580347224616E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999827277898733	WITHOUT_CLASSIFICATION	1.7272210126739047E-5	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9993468215426874	WITHOUT_CLASSIFICATION	6.531784573125955E-4	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997577495669208	WITHOUT_CLASSIFICATION	2.4225043307922491E-4	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9997617569313415	WITHOUT_CLASSIFICATION	2.382430686585145E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9999581804745226	WITHOUT_CLASSIFICATION	4.181952547750159E-5	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999446418778689	WITHOUT_CLASSIFICATION	5.53581221309874E-5	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999943905341058	WITHOUT_CLASSIFICATION	5.609465894330065E-6	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999750701590632	WITHOUT_CLASSIFICATION	2.492984093683525E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999378606607866	WITHOUT_CLASSIFICATION	6.213933921338786E-5	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999830109070577	WITHOUT_CLASSIFICATION	1.6989092942358904E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9998298042146145	WITHOUT_CLASSIFICATION	1.701957853855228E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999402112904153	WITHOUT_CLASSIFICATION	5.9788709584601144E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999628737417642	WITHOUT_CLASSIFICATION	3.7126258235857357E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999580442231482	WITHOUT_CLASSIFICATION	4.1955776851864996E-5	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999057429126639	WITHOUT_CLASSIFICATION	9.425708733611386E-5	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998860695468288	WITHOUT_CLASSIFICATION	1.1393045317118813E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999903275403532	WITHOUT_CLASSIFICATION	9.672459646801225E-5	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9994798138915244	WITHOUT_CLASSIFICATION	5.201861084756211E-4	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999845979627793	WITHOUT_CLASSIFICATION	1.540203722066643E-5	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999979246485517	WITHOUT_CLASSIFICATION	2.0753514483071203E-5	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999683650362434	WITHOUT_CLASSIFICATION	3.163496375665224E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999819182385785	WITHOUT_CLASSIFICATION	1.8081761421465004E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999959603862517	WITHOUT_CLASSIFICATION	4.03961374834276E-6	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999855197212065	WITHOUT_CLASSIFICATION	1.4480278793448968E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9997619042670379	WITHOUT_CLASSIFICATION	2.3809573296215342E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999964509614077	WITHOUT_CLASSIFICATION	3.5490385924570218E-6	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999948789621529	WITHOUT_CLASSIFICATION	5.121037847092231E-6	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9997405726572592	WITHOUT_CLASSIFICATION	2.5942734274077793E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9997772839488197	WITHOUT_CLASSIFICATION	2.227160511802428E-4	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999998402175076	WITHOUT_CLASSIFICATION	1.59782492407552E-6	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999392979904762	WITHOUT_CLASSIFICATION	6.0702009523776715E-5	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999742683120882	WITHOUT_CLASSIFICATION	2.5731687911711954E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9998948070996824	WITHOUT_CLASSIFICATION	1.0519290031766099E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998696589679549	WITHOUT_CLASSIFICATION	1.303410320450596E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9935327312584924	WITHOUT_CLASSIFICATION	0.006467268741507698	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999598957027246	WITHOUT_CLASSIFICATION	4.010429727541645E-5	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999567093609768	WITHOUT_CLASSIFICATION	4.3290639023130554E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999878630709875	WITHOUT_CLASSIFICATION	1.2136929012395382E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997043004791252	WITHOUT_CLASSIFICATION	2.9569952087485677E-4	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999150360166404	WITHOUT_CLASSIFICATION	8.496398335951864E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998779697868548	WITHOUT_CLASSIFICATION	1.2203021314509682E-4	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9999006877585546	WITHOUT_CLASSIFICATION	9.931224144541657E-5	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999765794658545	WITHOUT_CLASSIFICATION	2.342053414553294E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996350420810508	WITHOUT_CLASSIFICATION	3.6495791894918775E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999427513958093	WITHOUT_CLASSIFICATION	5.724860419056051E-5	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999941945422971	WITHOUT_CLASSIFICATION	5.805457702955745E-6	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999965520892166	WITHOUT_CLASSIFICATION	3.447910783389098E-6	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999347028132235	WITHOUT_CLASSIFICATION	6.529718677654275E-5	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999767571424394	WITHOUT_CLASSIFICATION	2.3242857560656583E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9999675081526191	WITHOUT_CLASSIFICATION	3.249184738090168E-5	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997081427766945	WITHOUT_CLASSIFICATION	2.918572233055916E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997081427766945	WITHOUT_CLASSIFICATION	2.918572233055916E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999658930219532	WITHOUT_CLASSIFICATION	3.41069780467986E-5	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9988122817208396	WITHOUT_CLASSIFICATION	0.001187718279160516	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999182627652728	WITHOUT_CLASSIFICATION	8.173723472713877E-5	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9986215229128348	WITHOUT_CLASSIFICATION	0.001378477087165197	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9999450874938404	WITHOUT_CLASSIFICATION	5.491250615966578E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994874960188256	WITHOUT_CLASSIFICATION	5.125039811744515E-4	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998841633347261	WITHOUT_CLASSIFICATION	1.1583666527401096E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9995671058400164	WITHOUT_CLASSIFICATION	4.3289415998350785E-4	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9999253931925857	WITHOUT_CLASSIFICATION	7.460680741437138E-5	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9993264809538839	WITHOUT_CLASSIFICATION	6.735190461160353E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999989155301378	WITHOUT_CLASSIFICATION	1.0844698621884162E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9993597380611473	WITHOUT_CLASSIFICATION	6.402619388526673E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999635314347992	WITHOUT_CLASSIFICATION	3.6468565200675125E-5	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999782657685274	WITHOUT_CLASSIFICATION	2.1734231472535894E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997291057184571	WITHOUT_CLASSIFICATION	2.7089428154295186E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999792840011007	WITHOUT_CLASSIFICATION	2.0715998899191773E-5	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9966075347629684	WITHOUT_CLASSIFICATION	0.003392465237031734	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9966075347629684	WITHOUT_CLASSIFICATION	0.003392465237031734	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999384733937976	WITHOUT_CLASSIFICATION	6.152660620238184E-5	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9997901353674813	WITHOUT_CLASSIFICATION	2.0986463251876567E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999954517715905	WITHOUT_CLASSIFICATION	4.548228409383949E-6	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999509518667489	WITHOUT_CLASSIFICATION	4.904813325100916E-5	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999656693257533	WITHOUT_CLASSIFICATION	3.4330674246822374E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999112647598535	WITHOUT_CLASSIFICATION	8.873524014645103E-5	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999656693257533	WITHOUT_CLASSIFICATION	3.4330674246822374E-5	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999852622834945	WITHOUT_CLASSIFICATION	1.4737716505526334E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999283081359149	WITHOUT_CLASSIFICATION	7.169186408507354E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999873495840318	WITHOUT_CLASSIFICATION	1.2650415968245054E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999873495840318	WITHOUT_CLASSIFICATION	1.2650415968245054E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999706215240644	WITHOUT_CLASSIFICATION	2.9378475935599378E-5	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999763180957882	WITHOUT_CLASSIFICATION	2.3681904211680688E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999712628754642	WITHOUT_CLASSIFICATION	2.8737124535725068E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9997315843810193	WITHOUT_CLASSIFICATION	2.6841561898075693E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9990282218318763	WITHOUT_CLASSIFICATION	9.7177816812367E-4	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.999964350423676	WITHOUT_CLASSIFICATION	3.564957632397691E-5	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999311290097538	WITHOUT_CLASSIFICATION	6.887099024616664E-5	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999580161038631	WITHOUT_CLASSIFICATION	4.198389613679802E-5	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999575596335238	WITHOUT_CLASSIFICATION	4.244036647613004E-5	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9973482090417614	WITHOUT_CLASSIFICATION	0.002651790958238705	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995606495111319	WITHOUT_CLASSIFICATION	4.393504888680979E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9998893492415559	WITHOUT_CLASSIFICATION	1.1065075844415039E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999170773336598	WITHOUT_CLASSIFICATION	8.292266634025762E-5	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999296812164916	WITHOUT_CLASSIFICATION	7.03187835083156E-5	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998782315830923	WITHOUT_CLASSIFICATION	1.2176841690765032E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998263028368044	WITHOUT_CLASSIFICATION	1.736971631956675E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
by default	WITHOUT_CLASSIFICATION	0.9999979961802288	WITHOUT_CLASSIFICATION	2.0038197711753574E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9980746820839255	WITHOUT_CLASSIFICATION	0.001925317916074433	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997449705844559	WITHOUT_CLASSIFICATION	2.5502941554409966E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9998637062046999	WITHOUT_CLASSIFICATION	1.3629379530007916E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999068939280081	WITHOUT_CLASSIFICATION	9.310607199186639E-5	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999791439801436	WITHOUT_CLASSIFICATION	2.0856019856351106E-5	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999756076499446	WITHOUT_CLASSIFICATION	2.4392350055415542E-5	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999113008636019	WITHOUT_CLASSIFICATION	8.869913639804966E-5	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9998017195393981	WITHOUT_CLASSIFICATION	1.9828046060192363E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999305001133196	WITHOUT_CLASSIFICATION	6.949988668032215E-5	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999998199966756	WITHOUT_CLASSIFICATION	1.8000332442887132E-7	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999106232251118	WITHOUT_CLASSIFICATION	8.937677488827335E-5	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999869721028977	WITHOUT_CLASSIFICATION	1.3027897102335832E-5	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999936933391804	WITHOUT_CLASSIFICATION	6.306660819572232E-6	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.999919539497581	WITHOUT_CLASSIFICATION	8.046050241907123E-5	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9726064756329893	WITHOUT_CLASSIFICATION	0.027393524367010688	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9995562266265882	WITHOUT_CLASSIFICATION	4.4377337341182144E-4	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999600970793873	WITHOUT_CLASSIFICATION	3.990292061282642E-5	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999044849516954	WITHOUT_CLASSIFICATION	9.55150483046552E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999330281991115	WITHOUT_CLASSIFICATION	6.69718008885E-5	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.9999330281991115	WITHOUT_CLASSIFICATION	6.69718008885E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999952181134846	WITHOUT_CLASSIFICATION	4.781886515381062E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997772078189707	WITHOUT_CLASSIFICATION	2.2279218102922913E-4	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999949999154578	WITHOUT_CLASSIFICATION	5.000084542199716E-5	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9999698825465216	WITHOUT_CLASSIFICATION	3.0117453478369994E-5	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999274868688253	WITHOUT_CLASSIFICATION	7.25131311746947E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999632852528226	WITHOUT_CLASSIFICATION	3.671474717728822E-5	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999466226692721	WITHOUT_CLASSIFICATION	5.337733072779032E-5	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997385693079696	WITHOUT_CLASSIFICATION	2.6143069203038026E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999952181134846	WITHOUT_CLASSIFICATION	4.781886515381062E-6	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9997772078189707	WITHOUT_CLASSIFICATION	2.2279218102922913E-4	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9997625897934644	WITHOUT_CLASSIFICATION	2.374102065355896E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999377985456502	WITHOUT_CLASSIFICATION	6.220145434970067E-5	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999986977286126	WITHOUT_CLASSIFICATION	1.3022713874469468E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998474036331971	WITHOUT_CLASSIFICATION	1.5259636680289994E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999502980044227	WITHOUT_CLASSIFICATION	4.970199557736229E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9993946430922546	WITHOUT_CLASSIFICATION	6.053569077454145E-4	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999816033683618	WITHOUT_CLASSIFICATION	1.8396631638138882E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999925421820816	WITHOUT_CLASSIFICATION	7.457817918493856E-6	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999734899872653	WITHOUT_CLASSIFICATION	2.6510012734628214E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9987991342029442	WITHOUT_CLASSIFICATION	0.0012008657970558557	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998842557638987	WITHOUT_CLASSIFICATION	1.1574423610115846E-4	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9987991342029442	WITHOUT_CLASSIFICATION	0.0012008657970558557	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999009725712535	WITHOUT_CLASSIFICATION	9.902742874639021E-5	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999903275403532	WITHOUT_CLASSIFICATION	9.672459646801225E-5	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999009725712535	WITHOUT_CLASSIFICATION	9.902742874639021E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605050654773	WITHOUT_CLASSIFICATION	1.3949493452274293E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9962461631425124	WITHOUT_CLASSIFICATION	0.0037538368574877596	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999925421820816	WITHOUT_CLASSIFICATION	7.457817918493856E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999925421820816	WITHOUT_CLASSIFICATION	7.457817918493856E-6	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999403715625951	WITHOUT_CLASSIFICATION	5.9628437404834465E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999404332030092	WITHOUT_CLASSIFICATION	5.956679699088537E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999403715625951	WITHOUT_CLASSIFICATION	5.9628437404834465E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999926242215477	WITHOUT_CLASSIFICATION	7.375778452298799E-5	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999549657210013	WITHOUT_CLASSIFICATION	4.503427899872666E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999926174267811	WITHOUT_CLASSIFICATION	7.382573218889864E-5	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999465915162464	WITHOUT_CLASSIFICATION	5.340848375366371E-5	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999310438227879	WITHOUT_CLASSIFICATION	6.895617721211263E-5	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999643420395764	WITHOUT_CLASSIFICATION	3.5657960423638365E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999924940899716	WITHOUT_CLASSIFICATION	7.505910028406154E-6	DEFECT
columns	WITHOUT_CLASSIFICATION	0.9999925048972778	WITHOUT_CLASSIFICATION	7.495102722283638E-6	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9999553145789453	WITHOUT_CLASSIFICATION	4.468542105484429E-5	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9994764174669636	WITHOUT_CLASSIFICATION	5.235825330364144E-4	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999931827426415	WITHOUT_CLASSIFICATION	6.817257358503049E-6	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999940219088275	WITHOUT_CLASSIFICATION	5.978091172440837E-6	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999426375112445	WITHOUT_CLASSIFICATION	5.73624887555367E-5	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999772266827134	WITHOUT_CLASSIFICATION	2.2773317286586348E-5	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999657054595051	WITHOUT_CLASSIFICATION	3.429454049478052E-5	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998667228755501	WITHOUT_CLASSIFICATION	1.332771244498983E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999696837845531	WITHOUT_CLASSIFICATION	3.03162154468825E-5	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999391034627184	WITHOUT_CLASSIFICATION	6.08965372816024E-5	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999307024681299	WITHOUT_CLASSIFICATION	6.929753187013444E-5	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999916218199027	WITHOUT_CLASSIFICATION	8.378180097304758E-5	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999180830317512	WITHOUT_CLASSIFICATION	8.191696824873052E-5	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9996257739640151	WITHOUT_CLASSIFICATION	3.7422603598493467E-4	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997738955736739	WITHOUT_CLASSIFICATION	2.2610442632602432E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998873315273736	WITHOUT_CLASSIFICATION	1.1266847262636521E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999079594163417	WITHOUT_CLASSIFICATION	9.204058365834655E-5	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9276449589746056	WITHOUT_CLASSIFICATION	0.0723550410253944	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9998152538362847	WITHOUT_CLASSIFICATION	1.8474616371542995E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9999310438227879	WITHOUT_CLASSIFICATION	6.895617721211263E-5	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999152946210925	WITHOUT_CLASSIFICATION	8.470537890749473E-5	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.999965505627221	WITHOUT_CLASSIFICATION	3.4494372779020684E-5	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9415661855950044	WITHOUT_CLASSIFICATION	0.05843381440499559	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.999976949679562	WITHOUT_CLASSIFICATION	2.305032043798485E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999748913464861	WITHOUT_CLASSIFICATION	2.5108653513938756E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.9999951445511829	WITHOUT_CLASSIFICATION	4.855448817070723E-6	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999926242215477	WITHOUT_CLASSIFICATION	7.375778452298799E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999926242215477	WITHOUT_CLASSIFICATION	7.375778452298799E-5	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999843035417576	WITHOUT_CLASSIFICATION	1.5696458242377593E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999916880471277	WITHOUT_CLASSIFICATION	8.311952872215231E-6	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9998547032782139	WITHOUT_CLASSIFICATION	1.4529672178604592E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999925716871451	WITHOUT_CLASSIFICATION	7.428312854856099E-6	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995787234652128	WITHOUT_CLASSIFICATION	4.212765347872199E-4	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9994309655944117	WITHOUT_CLASSIFICATION	5.690344055882549E-4	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9994483682471186	WITHOUT_CLASSIFICATION	5.516317528815146E-4	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999841201755456	WITHOUT_CLASSIFICATION	1.5879824454484444E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999963560483197	WITHOUT_CLASSIFICATION	3.6439516802901175E-5	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999554342275199	WITHOUT_CLASSIFICATION	4.456577248019139E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998363163103251	WITHOUT_CLASSIFICATION	1.636836896749502E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999426375112445	WITHOUT_CLASSIFICATION	5.73624887555367E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.9999952181134846	WITHOUT_CLASSIFICATION	4.781886515381062E-6	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998363163103251	WITHOUT_CLASSIFICATION	1.636836896749502E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999375151224208	WITHOUT_CLASSIFICATION	6.248487757922193E-5	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999850523481358	WITHOUT_CLASSIFICATION	1.4947651864248236E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999547223840461	WITHOUT_CLASSIFICATION	4.527761595389771E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9424524501445506	WITHOUT_CLASSIFICATION	0.057547549855449444	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997444203918046	WITHOUT_CLASSIFICATION	2.555796081954055E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9995116832149069	WITHOUT_CLASSIFICATION	4.88316785093057E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999819074439201	WITHOUT_CLASSIFICATION	1.809255607980452E-5	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998330393825632	WITHOUT_CLASSIFICATION	1.6696061743677704E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999926440474686	WITHOUT_CLASSIFICATION	7.355952531517823E-6	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999125268257149	WITHOUT_CLASSIFICATION	8.747317428511517E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999528169961511	WITHOUT_CLASSIFICATION	4.718300384887794E-5	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999528169961511	WITHOUT_CLASSIFICATION	4.718300384887794E-5	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995980877856385	WITHOUT_CLASSIFICATION	4.0191221436151187E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999744955949675	WITHOUT_CLASSIFICATION	2.550440503243847E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9998363163103251	WITHOUT_CLASSIFICATION	1.636836896749502E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9997444203918046	WITHOUT_CLASSIFICATION	2.555796081954055E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999819074439201	WITHOUT_CLASSIFICATION	1.809255607980452E-5	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999456425100727	WITHOUT_CLASSIFICATION	5.435748992740287E-5	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999908539635004	WITHOUT_CLASSIFICATION	9.146036499529809E-6	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9999570352606527	WITHOUT_CLASSIFICATION	4.296473934732009E-5	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999645233479166	WITHOUT_CLASSIFICATION	3.5476652083499824E-5	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999250457721414	WITHOUT_CLASSIFICATION	7.495422785860544E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919903368352	WITHOUT_CLASSIFICATION	8.009663164887976E-6	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999375151224208	WITHOUT_CLASSIFICATION	6.248487757922193E-5	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997531474669332	WITHOUT_CLASSIFICATION	2.468525330667549E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999656086050056	WITHOUT_CLASSIFICATION	3.4391394994390084E-5	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999910943350939	WITHOUT_CLASSIFICATION	8.905664906083778E-6	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999952604593406	WITHOUT_CLASSIFICATION	4.739540659439644E-6	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999949278543405	WITHOUT_CLASSIFICATION	5.072145659508512E-6	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.9999753510702794	WITHOUT_CLASSIFICATION	2.46489297207482E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998605050654773	WITHOUT_CLASSIFICATION	1.3949493452274293E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998672166038721	WITHOUT_CLASSIFICATION	1.3278339612792238E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999892152350217	WITHOUT_CLASSIFICATION	1.078476497830936E-5	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9961587050391351	WITHOUT_CLASSIFICATION	0.003841294960864851	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9979133437877729	WITHOUT_CLASSIFICATION	0.002086656212227138	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9984155265608765	WITHOUT_CLASSIFICATION	0.0015844734391234775	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996384024136477	WITHOUT_CLASSIFICATION	3.6159758635231947E-4	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9997206153925448	WITHOUT_CLASSIFICATION	2.793846074552536E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998569941740567	WITHOUT_CLASSIFICATION	1.4300582594336E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999919903368352	WITHOUT_CLASSIFICATION	8.009663164887976E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999317621758548	WITHOUT_CLASSIFICATION	6.823782414526855E-5	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999150167982263	WITHOUT_CLASSIFICATION	8.498320177374689E-5	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9998984811921945	WITHOUT_CLASSIFICATION	1.0151880780554695E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999152845420495	WITHOUT_CLASSIFICATION	8.471545795041865E-5	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9997096451164509	WITHOUT_CLASSIFICATION	2.903548835490686E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997786360897633	WITHOUT_CLASSIFICATION	2.213639102367327E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999738409675886	WITHOUT_CLASSIFICATION	2.6159032411499914E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9947147952105941	WITHOUT_CLASSIFICATION	0.00528520478940588	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999191904232928	WITHOUT_CLASSIFICATION	8.080957670727962E-5	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999828930766981	WITHOUT_CLASSIFICATION	1.7106923301986978E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999910818724858	WITHOUT_CLASSIFICATION	8.918127514297051E-6	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.999493515958387	WITHOUT_CLASSIFICATION	5.064840416130923E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999987256109043	WITHOUT_CLASSIFICATION	1.2743890956938409E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999906532698725	WITHOUT_CLASSIFICATION	9.34673012741252E-6	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9994060344340212	WITHOUT_CLASSIFICATION	5.939655659788161E-4	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999914383982573	WITHOUT_CLASSIFICATION	8.561601742772716E-6	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999890773252513	WITHOUT_CLASSIFICATION	1.0922674748678905E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999242888803822	WITHOUT_CLASSIFICATION	7.571111961778568E-5	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999667959283653	WITHOUT_CLASSIFICATION	3.32040716347307E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999323487749735	WITHOUT_CLASSIFICATION	6.765122502651032E-5	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999180734005001	WITHOUT_CLASSIFICATION	8.192659949987936E-5	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999671565955283	WITHOUT_CLASSIFICATION	3.284340447175057E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9540617239390472	WITHOUT_CLASSIFICATION	0.04593827606095283	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999445080335417	WITHOUT_CLASSIFICATION	5.549196645818406E-5	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999108340736508	WITHOUT_CLASSIFICATION	8.91659263492048E-5	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997980133507101	WITHOUT_CLASSIFICATION	2.0198664928998514E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9168287503979007	WITHOUT_CLASSIFICATION	0.0831712496020993	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997722048684472	WITHOUT_CLASSIFICATION	2.2779513155284653E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9975587077781058	WITHOUT_CLASSIFICATION	0.002441292221894169	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999506814689023	WITHOUT_CLASSIFICATION	4.931853109771717E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999999626979297	WITHOUT_CLASSIFICATION	3.7302070304791104E-7	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996015183021685	WITHOUT_CLASSIFICATION	3.9848169783161157E-4	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9998976849063959	WITHOUT_CLASSIFICATION	1.0231509360421792E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999657443004789	WITHOUT_CLASSIFICATION	3.425569952112914E-5	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9966218708626493	WITHOUT_CLASSIFICATION	0.003378129137350695	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9998976849063959	WITHOUT_CLASSIFICATION	1.0231509360421792E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9996015183021685	WITHOUT_CLASSIFICATION	3.9848169783161157E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.9999657443004789	WITHOUT_CLASSIFICATION	3.425569952112914E-5	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9999442718482949	WITHOUT_CLASSIFICATION	5.572815170513484E-5	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999652459132873	WITHOUT_CLASSIFICATION	3.475408671278187E-5	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9995036068141386	WITHOUT_CLASSIFICATION	4.963931858614105E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998788482244764	WITHOUT_CLASSIFICATION	1.2115177552355715E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999864883827407	WITHOUT_CLASSIFICATION	1.3511617259276898E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8614931161377596	WITHOUT_CLASSIFICATION	0.13850688386224047	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9991917973899567	WITHOUT_CLASSIFICATION	8.082026100434583E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998902275171606	WITHOUT_CLASSIFICATION	1.0977248283931724E-4	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999997059137483	WITHOUT_CLASSIFICATION	2.9408625171815E-7	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9988466987232444	WITHOUT_CLASSIFICATION	0.0011533012767556824	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.9999320573395097	WITHOUT_CLASSIFICATION	6.7942660490285E-5	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999780224842677	WITHOUT_CLASSIFICATION	2.1977515732322665E-5	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999067178057317	WITHOUT_CLASSIFICATION	9.328219426828511E-5	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998788482244764	WITHOUT_CLASSIFICATION	1.2115177552355715E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999917315362731	WITHOUT_CLASSIFICATION	8.268463727042274E-6	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999913308705084	WITHOUT_CLASSIFICATION	8.669129491634908E-6	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989157240137954	WITHOUT_CLASSIFICATION	0.0010842759862046425	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999997079537912	WITHOUT_CLASSIFICATION	2.920462087358307E-7	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9997320440861625	WITHOUT_CLASSIFICATION	2.6795591383762493E-4	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999952797904274	WITHOUT_CLASSIFICATION	4.720209572594654E-5	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9994962225118659	WITHOUT_CLASSIFICATION	5.037774881340246E-4	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999990908316854	WITHOUT_CLASSIFICATION	9.091683145511875E-7	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998447421314518	WITHOUT_CLASSIFICATION	1.5525786854818393E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999510722218393	WITHOUT_CLASSIFICATION	4.892777816072078E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999518626972669	WITHOUT_CLASSIFICATION	4.813730273315104E-5	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999518626972669	WITHOUT_CLASSIFICATION	4.813730273315104E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999924707135206	WITHOUT_CLASSIFICATION	7.5292864793711205E-6	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999924707135206	WITHOUT_CLASSIFICATION	7.5292864793711205E-6	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.99962847577904	WITHOUT_CLASSIFICATION	3.7152422096001816E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989157240137954	WITHOUT_CLASSIFICATION	0.0010842759862046425	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999578045651034	WITHOUT_CLASSIFICATION	4.2195434896475716E-5	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999709527026122	WITHOUT_CLASSIFICATION	2.9047297387865193E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999876442436716	WITHOUT_CLASSIFICATION	1.2355756328391583E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999876442436716	WITHOUT_CLASSIFICATION	1.2355756328391583E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999884503115612	WITHOUT_CLASSIFICATION	1.1549688438762983E-5	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999639229655403	WITHOUT_CLASSIFICATION	3.6077034459648216E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999778764612715	WITHOUT_CLASSIFICATION	2.2123538728524073E-5	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999901320940447	WITHOUT_CLASSIFICATION	9.867905955153843E-6	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999001272099367	WITHOUT_CLASSIFICATION	9.987279006335828E-5	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999845389843363	WITHOUT_CLASSIFICATION	1.5461015663695738E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999719630950916	WITHOUT_CLASSIFICATION	2.803690490833994E-5	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999769177210884	WITHOUT_CLASSIFICATION	2.3082278911591797E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9999603748547234	WITHOUT_CLASSIFICATION	3.96251452765169E-5	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9995574878860309	WITHOUT_CLASSIFICATION	4.425121139691349E-4	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.9999725000719548	WITHOUT_CLASSIFICATION	2.7499928045120138E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9999628116108046	WITHOUT_CLASSIFICATION	3.7188389195304914E-5	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999490052485315	WITHOUT_CLASSIFICATION	5.0994751468546366E-5	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999949669319641	WITHOUT_CLASSIFICATION	5.033068035925716E-6	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999922458237877	WITHOUT_CLASSIFICATION	7.754176212333132E-6	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998327842363162	WITHOUT_CLASSIFICATION	1.672157636839611E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266039858857	WITHOUT_CLASSIFICATION	7.339601411429117E-5	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999519585265046	WITHOUT_CLASSIFICATION	4.804147349538877E-5	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999333979356181	WITHOUT_CLASSIFICATION	6.660206438195538E-5	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9929529060472192	WITHOUT_CLASSIFICATION	0.007047093952780764	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999346616190358	WITHOUT_CLASSIFICATION	6.533838096421341E-5	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9970235034818796	WITHOUT_CLASSIFICATION	0.0029764965181204276	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997906299684578	WITHOUT_CLASSIFICATION	2.0937003154217033E-4	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999755262190263	WITHOUT_CLASSIFICATION	2.4473780973702816E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999953307501508	WITHOUT_CLASSIFICATION	4.66924984918826E-6	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998751590777051	WITHOUT_CLASSIFICATION	1.2484092229492392E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999828930766981	WITHOUT_CLASSIFICATION	1.7106923301986978E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999452233751499	WITHOUT_CLASSIFICATION	5.4776624850037453E-5	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9980446622200322	WITHOUT_CLASSIFICATION	0.001955337779967803	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998883555750199	WITHOUT_CLASSIFICATION	1.1164442498013618E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998875477118453	WITHOUT_CLASSIFICATION	1.1245228815468868E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999941280444381	WITHOUT_CLASSIFICATION	5.871955561906266E-5	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.999941280444381	WITHOUT_CLASSIFICATION	5.871955561906266E-5	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999590111057817	WITHOUT_CLASSIFICATION	4.0988894218295434E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.999996170676352	WITHOUT_CLASSIFICATION	3.8293236479826165E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999448269831209	WITHOUT_CLASSIFICATION	5.517301687898681E-5	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9999448269831209	WITHOUT_CLASSIFICATION	5.517301687898681E-5	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997939152799418	WITHOUT_CLASSIFICATION	2.0608472005833093E-4	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994678305562535	WITHOUT_CLASSIFICATION	5.321694437463536E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9985583112965108	WITHOUT_CLASSIFICATION	0.0014416887034891797	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999965475808236	WITHOUT_CLASSIFICATION	3.452419176555447E-6	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9999280097556994	WITHOUT_CLASSIFICATION	7.199024430064885E-5	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999384853522992	WITHOUT_CLASSIFICATION	6.151464770085269E-5	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999579202611936	WITHOUT_CLASSIFICATION	4.207973880643249E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999202638436177	WITHOUT_CLASSIFICATION	7.97361563823109E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999202638436177	WITHOUT_CLASSIFICATION	7.97361563823109E-5	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.999977815052182	WITHOUT_CLASSIFICATION	2.218494781796389E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999620925216942	WITHOUT_CLASSIFICATION	3.79074783057842E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999620925216942	WITHOUT_CLASSIFICATION	3.79074783057842E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999473938275616	WITHOUT_CLASSIFICATION	5.260617243837081E-5	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999400001966129	WITHOUT_CLASSIFICATION	5.999980338721503E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9999771657444771	WITHOUT_CLASSIFICATION	2.283425552290751E-5	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999754041544046	WITHOUT_CLASSIFICATION	2.459584559533446E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999826220774526	WITHOUT_CLASSIFICATION	1.7377922547356494E-5	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9982240356311967	WITHOUT_CLASSIFICATION	0.0017759643688033146	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9998767617031514	WITHOUT_CLASSIFICATION	1.2323829684869535E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999647806870111	WITHOUT_CLASSIFICATION	3.521931298893268E-5	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9995454213720878	WITHOUT_CLASSIFICATION	4.5457862791225043E-4	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9982349370008766	WITHOUT_CLASSIFICATION	0.0017650629991233316	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999760136571388	WITHOUT_CLASSIFICATION	2.3986342861238214E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919924581668	WITHOUT_CLASSIFICATION	8.007541833123065E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919924581668	WITHOUT_CLASSIFICATION	8.007541833123065E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919924581668	WITHOUT_CLASSIFICATION	8.007541833123065E-6	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999919924581668	WITHOUT_CLASSIFICATION	8.007541833123065E-6	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999383946669613	WITHOUT_CLASSIFICATION	6.160533303870347E-5	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9956412158662556	WITHOUT_CLASSIFICATION	0.00435878413374432	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.9999950378171104	WITHOUT_CLASSIFICATION	4.962182889588363E-6	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999426913733713	WITHOUT_CLASSIFICATION	5.7308626628571224E-5	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9971607738638014	WITHOUT_CLASSIFICATION	0.0028392261361985713	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997802048280598	WITHOUT_CLASSIFICATION	2.1979517194020416E-4	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9997580245305058	WITHOUT_CLASSIFICATION	2.4197546949425387E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998143273301453	WITHOUT_CLASSIFICATION	1.8567266985461826E-4	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.9999312884039618	WITHOUT_CLASSIFICATION	6.871159603811414E-5	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9999492756805505	WITHOUT_CLASSIFICATION	5.0724319449427364E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999583489575405	WITHOUT_CLASSIFICATION	4.165104245952466E-5	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997784618800633	WITHOUT_CLASSIFICATION	2.2153811993668265E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998031903525235	WITHOUT_CLASSIFICATION	1.9680964747641107E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999937305360374	WITHOUT_CLASSIFICATION	6.269463962705172E-6	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999583489575405	WITHOUT_CLASSIFICATION	4.165104245952466E-5	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999837571722678	WITHOUT_CLASSIFICATION	1.6242827732143228E-5	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998198967297319	WITHOUT_CLASSIFICATION	1.8010327026799923E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999965207130628	WITHOUT_CLASSIFICATION	3.4792869371509297E-6	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996154580220917	WITHOUT_CLASSIFICATION	3.8454197790831386E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998572110795921	WITHOUT_CLASSIFICATION	1.4278892040788598E-4	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9990180821475844	WITHOUT_CLASSIFICATION	9.819178524155992E-4	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999855195320563	WITHOUT_CLASSIFICATION	1.4480467943697505E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999705427622311	WITHOUT_CLASSIFICATION	2.9457237768901074E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855440531463	WITHOUT_CLASSIFICATION	1.4455946853550912E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999883310832243	WITHOUT_CLASSIFICATION	1.1668916775691783E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855440531463	WITHOUT_CLASSIFICATION	1.4455946853550912E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999464540399218	WITHOUT_CLASSIFICATION	5.354596007827909E-5	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9967865078403255	WITHOUT_CLASSIFICATION	0.0032134921596744834	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9996465831448152	WITHOUT_CLASSIFICATION	3.534168551847132E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998569215566472	WITHOUT_CLASSIFICATION	1.430784433528496E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998527448664986	WITHOUT_CLASSIFICATION	1.4725513350152667E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999943794970421	WITHOUT_CLASSIFICATION	5.62050295797503E-6	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999228109006634	WITHOUT_CLASSIFICATION	7.718909933661778E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999124584770582	WITHOUT_CLASSIFICATION	8.754152294178634E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999228109006634	WITHOUT_CLASSIFICATION	7.718909933661778E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999120255839222	WITHOUT_CLASSIFICATION	8.79744160777791E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99998407792696	WITHOUT_CLASSIFICATION	1.5922073040014854E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9999227912003928	WITHOUT_CLASSIFICATION	7.72087996071927E-5	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999489145478363	WITHOUT_CLASSIFICATION	5.1085452163720646E-5	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999444091118583	WITHOUT_CLASSIFICATION	5.559088814162664E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999869989523437	WITHOUT_CLASSIFICATION	1.3001047656410497E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999943794970421	WITHOUT_CLASSIFICATION	5.62050295797503E-6	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999124584770582	WITHOUT_CLASSIFICATION	8.754152294178634E-5	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999120255839222	WITHOUT_CLASSIFICATION	8.79744160777791E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999976964579439	WITHOUT_CLASSIFICATION	2.3035420561028543E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999581910800629	WITHOUT_CLASSIFICATION	4.1808919936998726E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9994604743119335	WITHOUT_CLASSIFICATION	5.395256880665045E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9997177526730754	WITHOUT_CLASSIFICATION	2.822473269245745E-4	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9997520813853717	WITHOUT_CLASSIFICATION	2.4791861462819E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998851100719175	WITHOUT_CLASSIFICATION	1.1488992808242034E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999660161991196	WITHOUT_CLASSIFICATION	3.398380088039754E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266039858857	WITHOUT_CLASSIFICATION	7.339601411429117E-5	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.99998407792696	WITHOUT_CLASSIFICATION	1.5922073040014854E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999442053614305	WITHOUT_CLASSIFICATION	5.5794638569515064E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999403715625951	WITHOUT_CLASSIFICATION	5.9628437404834465E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99931841127279	WITHOUT_CLASSIFICATION	6.815887272100857E-4	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.999959850559446	WITHOUT_CLASSIFICATION	4.014944055389394E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266039858857	WITHOUT_CLASSIFICATION	7.339601411429117E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999682941424558	WITHOUT_CLASSIFICATION	3.170585754417851E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266039858857	WITHOUT_CLASSIFICATION	7.339601411429117E-5	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999891387879001	WITHOUT_CLASSIFICATION	1.0861212099848645E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999231839275974	WITHOUT_CLASSIFICATION	7.681607240259433E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998693859815454	WITHOUT_CLASSIFICATION	1.3061401845472785E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999806866445903	WITHOUT_CLASSIFICATION	1.9313355409701638E-5	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999823669882355	WITHOUT_CLASSIFICATION	1.763301176447255E-5	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9999287554742865	WITHOUT_CLASSIFICATION	7.124452571347877E-5	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999483120290436	WITHOUT_CLASSIFICATION	5.1687970956439E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998156747975127	WITHOUT_CLASSIFICATION	1.843252024872806E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999778496159155	WITHOUT_CLASSIFICATION	2.2150384084570663E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.9999568270082052	WITHOUT_CLASSIFICATION	4.3172991794929664E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9998085662782977	WITHOUT_CLASSIFICATION	1.9143372170218556E-4	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999514304278982	WITHOUT_CLASSIFICATION	4.8569572101764E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9878165959493393	WITHOUT_CLASSIFICATION	0.012183404050660662	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999028443425277	WITHOUT_CLASSIFICATION	9.715565747230058E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999524908217446	WITHOUT_CLASSIFICATION	4.750917825539673E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999971483159265	WITHOUT_CLASSIFICATION	2.851684073586313E-6	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999988425738732	WITHOUT_CLASSIFICATION	1.1574261267846101E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997235757907003	WITHOUT_CLASSIFICATION	2.7642420929981185E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.99999154275946	WITHOUT_CLASSIFICATION	8.457240540090632E-6	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998649708491651	WITHOUT_CLASSIFICATION	1.350291508348077E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985512091148389	WITHOUT_CLASSIFICATION	0.0014487908851612476	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985512091148389	WITHOUT_CLASSIFICATION	0.0014487908851612476	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999687936959455	WITHOUT_CLASSIFICATION	3.120630405453612E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998486849672964	WITHOUT_CLASSIFICATION	1.5131503270361974E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.9999920521291745	WITHOUT_CLASSIFICATION	7.947870825431867E-6	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999931338464566	WITHOUT_CLASSIFICATION	6.866153543319197E-6	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997720718000626	WITHOUT_CLASSIFICATION	2.27928199937366E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999517642644516	WITHOUT_CLASSIFICATION	4.8235735548448194E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999337242055746	WITHOUT_CLASSIFICATION	6.62757944253397E-5	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993230650769971	WITHOUT_CLASSIFICATION	6.769349230029553E-4	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9973850991812958	WITHOUT_CLASSIFICATION	0.002614900818704127	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999548892300357	WITHOUT_CLASSIFICATION	4.511076996434156E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999498578410116	WITHOUT_CLASSIFICATION	5.01421589882702E-5	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.999984273315274	WITHOUT_CLASSIFICATION	1.5726684726042743E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9998578117789988	WITHOUT_CLASSIFICATION	1.421882210012986E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9999791074149652	WITHOUT_CLASSIFICATION	2.089258503480807E-5	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999942451081331	WITHOUT_CLASSIFICATION	5.754891866994585E-6	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999442831369696	WITHOUT_CLASSIFICATION	5.5716863030447454E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999760066072947	WITHOUT_CLASSIFICATION	2.3993392705338295E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999760066072947	WITHOUT_CLASSIFICATION	2.3993392705338295E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999833760887756	WITHOUT_CLASSIFICATION	1.6623911224378925E-5	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998156747975127	WITHOUT_CLASSIFICATION	1.843252024872806E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981751774197188	WITHOUT_CLASSIFICATION	0.0018248225802812495	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999890830353102	WITHOUT_CLASSIFICATION	1.0916964689813514E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997044638665573	WITHOUT_CLASSIFICATION	2.955361334426761E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998164540367039	WITHOUT_CLASSIFICATION	1.835459632960327E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.999957059174369	WITHOUT_CLASSIFICATION	4.2940825631038023E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.9999944684912501	WITHOUT_CLASSIFICATION	5.531508749938185E-6	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999159976345922	WITHOUT_CLASSIFICATION	8.400236540776963E-5	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999163521920864	WITHOUT_CLASSIFICATION	8.364780791355947E-5	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999682550498042	WITHOUT_CLASSIFICATION	3.1744950195736377E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999409772304573	WITHOUT_CLASSIFICATION	5.902276954283298E-5	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999672325096512	WITHOUT_CLASSIFICATION	3.276749034878565E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999696258214579	WITHOUT_CLASSIFICATION	3.0374178542035978E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999995536064484	WITHOUT_CLASSIFICATION	4.4639355152706814E-7	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999643481335918	WITHOUT_CLASSIFICATION	3.5651866408188244E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999813207769394	WITHOUT_CLASSIFICATION	1.8679223060721033E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999926103964696	WITHOUT_CLASSIFICATION	7.389603530439416E-6	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9995152132274842	WITHOUT_CLASSIFICATION	4.8478677251579587E-4	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999991865118136	WITHOUT_CLASSIFICATION	8.134881863914902E-7	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999687996351154	WITHOUT_CLASSIFICATION	3.120036488460085E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999499222453894	WITHOUT_CLASSIFICATION	5.007775461059896E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9960463929984451	WITHOUT_CLASSIFICATION	0.003953607001554916	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999733626183698	WITHOUT_CLASSIFICATION	2.663738163013174E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999529488836737	WITHOUT_CLASSIFICATION	4.7051116326436514E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999480321702588	WITHOUT_CLASSIFICATION	5.1967829741055356E-5	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998357060475204	WITHOUT_CLASSIFICATION	1.6429395247957894E-4	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.99963995856767	WITHOUT_CLASSIFICATION	3.60041432330083E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999828461616469	WITHOUT_CLASSIFICATION	1.7153838353086476E-5	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9979580028688612	WITHOUT_CLASSIFICATION	0.002041997131138862	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9998894261502429	WITHOUT_CLASSIFICATION	1.1057384975711492E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999096682737324	WITHOUT_CLASSIFICATION	9.033172626768762E-5	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.999991314667995	WITHOUT_CLASSIFICATION	8.685332005046845E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999027489173509	WITHOUT_CLASSIFICATION	9.72510826491379E-5	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9998547496200034	WITHOUT_CLASSIFICATION	1.4525037999657474E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9994730390930749	WITHOUT_CLASSIFICATION	5.269609069249958E-4	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992936481700637	WITHOUT_CLASSIFICATION	7.063518299362273E-4	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9890543403596509	WITHOUT_CLASSIFICATION	0.010945659640349074	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997197719670139	WITHOUT_CLASSIFICATION	2.802280329860342E-4	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997197719670139	WITHOUT_CLASSIFICATION	2.802280329860342E-4	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999462013446058	WITHOUT_CLASSIFICATION	5.3798655394291066E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999571149760379	WITHOUT_CLASSIFICATION	4.2885023962209645E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999719074256956	WITHOUT_CLASSIFICATION	2.8092574304335057E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999719074256956	WITHOUT_CLASSIFICATION	2.8092574304335057E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.9999891711581987	WITHOUT_CLASSIFICATION	1.0828841801221717E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999425256495319	WITHOUT_CLASSIFICATION	5.7474350468131884E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999537619879143	WITHOUT_CLASSIFICATION	4.623801208572092E-5	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999973132368876	WITHOUT_CLASSIFICATION	2.6867631124141477E-6	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998926001685391	WITHOUT_CLASSIFICATION	1.0739983146089477E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998883056970348	WITHOUT_CLASSIFICATION	1.1169430296519628E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999467735985493	WITHOUT_CLASSIFICATION	5.322640145063946E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999467735985493	WITHOUT_CLASSIFICATION	5.322640145063946E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998883056970348	WITHOUT_CLASSIFICATION	1.1169430296519628E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999059187053898	WITHOUT_CLASSIFICATION	9.40812946101815E-5	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999926242215477	WITHOUT_CLASSIFICATION	7.375778452298799E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999209577269291	WITHOUT_CLASSIFICATION	7.904227307096929E-5	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9999209577269291	WITHOUT_CLASSIFICATION	7.904227307096929E-5	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9999531027047517	WITHOUT_CLASSIFICATION	4.689729524824989E-5	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999535275200542	WITHOUT_CLASSIFICATION	4.6472479945849344E-5	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999669910288821	WITHOUT_CLASSIFICATION	3.300897111785295E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999886543143746	WITHOUT_CLASSIFICATION	1.134568562531354E-5	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999752308776757	WITHOUT_CLASSIFICATION	2.4769122324377867E-5	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999287882914848	WITHOUT_CLASSIFICATION	7.121170851527212E-5	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999490722472055	WITHOUT_CLASSIFICATION	5.0927752794422226E-5	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999778471976736	WITHOUT_CLASSIFICATION	2.2152802326538934E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999958235557922	WITHOUT_CLASSIFICATION	4.176444207870971E-6	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998999301183087	WITHOUT_CLASSIFICATION	1.0006988169131205E-4	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999103336646677	WITHOUT_CLASSIFICATION	8.966633533229461E-5	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9975610935533091	WITHOUT_CLASSIFICATION	0.0024389064466908902	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9999710732976781	WITHOUT_CLASSIFICATION	2.8926702321878965E-5	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999962320908652	WITHOUT_CLASSIFICATION	3.767909134801871E-5	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.9999931832168679	WITHOUT_CLASSIFICATION	6.8167831319769335E-6	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9994958280732245	WITHOUT_CLASSIFICATION	5.041719267755338E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998232130490924	WITHOUT_CLASSIFICATION	1.7678695090766604E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997830887976799	WITHOUT_CLASSIFICATION	2.1691120232019315E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999693580349442	WITHOUT_CLASSIFICATION	3.06419650557218E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9995212012013056	WITHOUT_CLASSIFICATION	4.787987986944063E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9990824694376544	WITHOUT_CLASSIFICATION	9.175305623456852E-4	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999355946594054	WITHOUT_CLASSIFICATION	6.440534059465711E-5	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999963618308175	WITHOUT_CLASSIFICATION	3.638169182491541E-5	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9997553444195448	WITHOUT_CLASSIFICATION	2.446555804551184E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9999336489798624	WITHOUT_CLASSIFICATION	6.63510201375565E-5	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999568976829721	WITHOUT_CLASSIFICATION	4.310231702773616E-5	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999448412928903	WITHOUT_CLASSIFICATION	5.515870710967078E-5	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999993568132668	WITHOUT_CLASSIFICATION	6.431867332651268E-7	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999876732502545	WITHOUT_CLASSIFICATION	1.2326749745439266E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.99999756835711	WITHOUT_CLASSIFICATION	2.431642890037891E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999839244607475	WITHOUT_CLASSIFICATION	1.6075539252612983E-5	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999995771358235	WITHOUT_CLASSIFICATION	4.228641764994366E-6	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9998985309206271	WITHOUT_CLASSIFICATION	1.0146907937293107E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999969313554607	WITHOUT_CLASSIFICATION	3.0686445392436986E-6	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999914708890979	WITHOUT_CLASSIFICATION	8.529110902097715E-5	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999353401047114	WITHOUT_CLASSIFICATION	6.46598952885582E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999322691097925	WITHOUT_CLASSIFICATION	6.773089020751182E-5	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999601859255611	WITHOUT_CLASSIFICATION	3.9814074438910306E-5	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.9988463369969738	WITHOUT_CLASSIFICATION	0.0011536630030262313	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.999940900374441	WITHOUT_CLASSIFICATION	5.909962555890899E-5	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9999644349318741	WITHOUT_CLASSIFICATION	3.556506812578387E-5	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999831190618718	WITHOUT_CLASSIFICATION	1.688093812826746E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999265953772692	WITHOUT_CLASSIFICATION	7.340462273072734E-5	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.998899642000699	WITHOUT_CLASSIFICATION	0.001100357999300912	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999981584334135	WITHOUT_CLASSIFICATION	1.8415665864930182E-5	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998974599791229	WITHOUT_CLASSIFICATION	1.0254002087714783E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999973028594102	WITHOUT_CLASSIFICATION	2.6971405898010867E-5	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.999894279252397	WITHOUT_CLASSIFICATION	1.057207476029576E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.999992465707274	WITHOUT_CLASSIFICATION	7.5342927260661415E-6	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999696663865578	WITHOUT_CLASSIFICATION	3.0333613442217155E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999895025665221	WITHOUT_CLASSIFICATION	1.0497433477914152E-5	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9995923601446671	WITHOUT_CLASSIFICATION	4.076398553328642E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999742804504088	WITHOUT_CLASSIFICATION	2.57195495911748E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9984365140131537	WITHOUT_CLASSIFICATION	0.001563485986846352	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999327498404319	WITHOUT_CLASSIFICATION	6.725015956810296E-5	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9990157154215047	WITHOUT_CLASSIFICATION	9.842845784952855E-4	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999908118642569	WITHOUT_CLASSIFICATION	9.188135743067205E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999849112963088	WITHOUT_CLASSIFICATION	1.5088703691198594E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999849112963088	WITHOUT_CLASSIFICATION	1.5088703691198594E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999922443481496	WITHOUT_CLASSIFICATION	7.755651850417163E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9996755608590063	WITHOUT_CLASSIFICATION	3.2443914099363917E-4	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999995013626551	WITHOUT_CLASSIFICATION	4.986373449014682E-6	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999509653822755	WITHOUT_CLASSIFICATION	4.903461772449874E-5	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999405055727916	WITHOUT_CLASSIFICATION	5.949442720835965E-5	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9997825427279426	WITHOUT_CLASSIFICATION	2.1745727205739953E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999996460177573	WITHOUT_CLASSIFICATION	3.539822426984648E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999965040564427	WITHOUT_CLASSIFICATION	3.4959435572925345E-5	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997870960955209	WITHOUT_CLASSIFICATION	2.1290390447918316E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999799036650873	WITHOUT_CLASSIFICATION	2.0096334912793254E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999820363338024	WITHOUT_CLASSIFICATION	1.7963666197491975E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9997266657282088	WITHOUT_CLASSIFICATION	2.733342717912961E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999995973396778	WITHOUT_CLASSIFICATION	4.026603221404928E-7	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999996988242644	WITHOUT_CLASSIFICATION	3.0117573556994156E-7	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999342829141217	WITHOUT_CLASSIFICATION	6.571708587829727E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999342829141217	WITHOUT_CLASSIFICATION	6.571708587829727E-5	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999513450905853	WITHOUT_CLASSIFICATION	4.865490941485159E-5	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9994214813053465	WITHOUT_CLASSIFICATION	5.785186946534401E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999612820658269	WITHOUT_CLASSIFICATION	3.871793417314539E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999885657577792	WITHOUT_CLASSIFICATION	1.1434242220882851E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999914495182436	WITHOUT_CLASSIFICATION	8.550481756352068E-6	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999451498533827	WITHOUT_CLASSIFICATION	5.485014661742738E-5	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999461523669059	WITHOUT_CLASSIFICATION	5.3847633094032746E-5	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9998839914816035	WITHOUT_CLASSIFICATION	1.1600851839650089E-4	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9970875815112356	WITHOUT_CLASSIFICATION	0.0029124184887645197	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999987285814861	WITHOUT_CLASSIFICATION	1.2714185138752073E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999636531908526	WITHOUT_CLASSIFICATION	3.634680914735743E-5	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999743823203535	WITHOUT_CLASSIFICATION	2.561767964644793E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999152534771762	WITHOUT_CLASSIFICATION	8.47465228237038E-5	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999968580276726	WITHOUT_CLASSIFICATION	3.141972327456632E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999370526642777	WITHOUT_CLASSIFICATION	6.2947335722362E-5	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999355958470407	WITHOUT_CLASSIFICATION	6.440415295931062E-5	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9997341163281681	WITHOUT_CLASSIFICATION	2.658836718318344E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999892167534767	WITHOUT_CLASSIFICATION	1.0783246523265282E-5	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999642783215983	WITHOUT_CLASSIFICATION	3.572167840181785E-5	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9996508660874319	WITHOUT_CLASSIFICATION	3.491339125680674E-4	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999996153632285	WITHOUT_CLASSIFICATION	3.846367715055254E-6	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999327692016918	WITHOUT_CLASSIFICATION	6.723079830822129E-5	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998248412596006	WITHOUT_CLASSIFICATION	1.7515874039936776E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999983262380554	WITHOUT_CLASSIFICATION	1.6737619445473063E-6	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999936958188536	WITHOUT_CLASSIFICATION	6.304181146416682E-6	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9999208172194726	WITHOUT_CLASSIFICATION	7.91827805274341E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997890094546047	WITHOUT_CLASSIFICATION	2.1099054539527233E-4	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998987551327407	WITHOUT_CLASSIFICATION	1.0124486725926443E-4	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999570641431731	WITHOUT_CLASSIFICATION	4.293585682699032E-5	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995923151179935	WITHOUT_CLASSIFICATION	4.0768488200646673E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9996535563411447	WITHOUT_CLASSIFICATION	3.46443658855224E-4	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999196962103831	WITHOUT_CLASSIFICATION	8.030378961686329E-5	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9998156753986314	WITHOUT_CLASSIFICATION	1.843246013686973E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999111927304253	WITHOUT_CLASSIFICATION	8.880726957472451E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999960196356167	WITHOUT_CLASSIFICATION	3.980364383266966E-6	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996648609082939	WITHOUT_CLASSIFICATION	3.351390917061296E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9999339650124116	WITHOUT_CLASSIFICATION	6.603498758836216E-5	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999045425721637	WITHOUT_CLASSIFICATION	9.545742783630327E-5	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999565207222896	WITHOUT_CLASSIFICATION	4.347927771049092E-5	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998218272921875	WITHOUT_CLASSIFICATION	1.7817270781258316E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9936562032591187	WITHOUT_CLASSIFICATION	0.006343796740881276	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999563540827433	WITHOUT_CLASSIFICATION	4.3645917256716484E-5	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9845488830686521	WITHOUT_CLASSIFICATION	0.015451116931347835	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9845488830686521	WITHOUT_CLASSIFICATION	0.015451116931347835	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999918093852348	WITHOUT_CLASSIFICATION	8.19061476528599E-6	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9627572869365382	WITHOUT_CLASSIFICATION	0.03724271306346175	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999947236228703	WITHOUT_CLASSIFICATION	5.276377129653623E-6	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999718549012347	WITHOUT_CLASSIFICATION	2.8145098765219563E-5	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9996381369878772	WITHOUT_CLASSIFICATION	3.618630121228189E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999166742423731	WITHOUT_CLASSIFICATION	8.33257576269293E-5	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999785100243889	WITHOUT_CLASSIFICATION	2.1489975611071856E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999950381829676	WITHOUT_CLASSIFICATION	4.961817032388317E-5	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9989733769937787	WITHOUT_CLASSIFICATION	0.0010266230062212346	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998475110774259	WITHOUT_CLASSIFICATION	1.524889225740497E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999149931416559	WITHOUT_CLASSIFICATION	8.500685834412423E-5	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999360628520607	WITHOUT_CLASSIFICATION	6.3937147939291E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9997960551375841	WITHOUT_CLASSIFICATION	2.0394486241602635E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999707760834078	WITHOUT_CLASSIFICATION	2.922391659220096E-5	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9997842297497289	WITHOUT_CLASSIFICATION	2.15770250271057E-4	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999831268286565	WITHOUT_CLASSIFICATION	1.6873171343495945E-4	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999728645956711	WITHOUT_CLASSIFICATION	2.7135404328856312E-5	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9994601980157514	WITHOUT_CLASSIFICATION	5.398019842487254E-4	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9995193353925312	WITHOUT_CLASSIFICATION	4.806646074688261E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9983021600631821	WITHOUT_CLASSIFICATION	0.0016978399368179544	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9985534048943736	WITHOUT_CLASSIFICATION	0.0014465951056263728	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997987293168605	WITHOUT_CLASSIFICATION	2.0127068313944752E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999870263656437	WITHOUT_CLASSIFICATION	1.297363435632927E-5	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999894370383026	WITHOUT_CLASSIFICATION	1.0562961697402707E-5	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999638163477165	WITHOUT_CLASSIFICATION	3.618365228360952E-5	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998740517718953	WITHOUT_CLASSIFICATION	1.2594822810486987E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999949292020843	WITHOUT_CLASSIFICATION	5.070797915704142E-5	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9998567246430552	WITHOUT_CLASSIFICATION	1.4327535694478054E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9961772649713052	WITHOUT_CLASSIFICATION	0.003822735028694771	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999679384478969	WITHOUT_CLASSIFICATION	3.206155210313278E-5	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9995920094879152	WITHOUT_CLASSIFICATION	4.079905120848649E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999961082417765	WITHOUT_CLASSIFICATION	3.891758223396879E-6	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999898629857074	WITHOUT_CLASSIFICATION	1.0137014292605842E-5	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9996589202310958	WITHOUT_CLASSIFICATION	3.4107976890424176E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998302264469938	WITHOUT_CLASSIFICATION	1.6977355300615683E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998200861088106	WITHOUT_CLASSIFICATION	1.7991389118935278E-4	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9997176920476665	WITHOUT_CLASSIFICATION	2.823079523334963E-4	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9998578464421225	WITHOUT_CLASSIFICATION	1.4215355787763228E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998781779040924	WITHOUT_CLASSIFICATION	1.2182209590755158E-4	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999982926985775	WITHOUT_CLASSIFICATION	1.7073014224993088E-6	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999723819941174	WITHOUT_CLASSIFICATION	2.7618005882577424E-5	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999568666765797	WITHOUT_CLASSIFICATION	4.3133323420391544E-5	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9995799027740614	WITHOUT_CLASSIFICATION	4.200972259386641E-4	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9990740925886548	WITHOUT_CLASSIFICATION	9.259074113452427E-4	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999640728146827	WITHOUT_CLASSIFICATION	3.592718531733236E-5	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999952383775927	WITHOUT_CLASSIFICATION	4.7616224072869535E-6	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999988494525915	WITHOUT_CLASSIFICATION	1.1505474084313844E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9996307386826496	WITHOUT_CLASSIFICATION	3.6926131735031856E-4	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995773371605797	WITHOUT_CLASSIFICATION	4.226628394202442E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999995973396778	WITHOUT_CLASSIFICATION	4.026603221404928E-7	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9998174490393383	WITHOUT_CLASSIFICATION	1.8255096066175364E-4	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999939388541154	WITHOUT_CLASSIFICATION	6.061145884644033E-6	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998919856172912	WITHOUT_CLASSIFICATION	1.080143827087236E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999209723091795	WITHOUT_CLASSIFICATION	7.902769082050655E-5	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999987816345622	WITHOUT_CLASSIFICATION	1.2183654377247374E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997174804087835	WITHOUT_CLASSIFICATION	2.825195912165279E-4	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9991958242425306	WITHOUT_CLASSIFICATION	8.041757574693581E-4	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.967612358003654	WITHOUT_CLASSIFICATION	0.03238764199634596	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999894142580369	WITHOUT_CLASSIFICATION	1.0585741963169004E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996361563550867	WITHOUT_CLASSIFICATION	3.6384364491323716E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999991408829458	WITHOUT_CLASSIFICATION	8.591170540400217E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9979365680080119	WITHOUT_CLASSIFICATION	0.0020634319919881593	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9983287171144355	WITHOUT_CLASSIFICATION	0.001671282885564577	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999974575171942	WITHOUT_CLASSIFICATION	2.5424828057932413E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9985621400256558	WITHOUT_CLASSIFICATION	0.0014378599743441627	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998719151216767	WITHOUT_CLASSIFICATION	1.2808487832323707E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999521126427395	WITHOUT_CLASSIFICATION	4.788735726041064E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999981855738213	WITHOUT_CLASSIFICATION	1.8144261787308988E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997848426177838	WITHOUT_CLASSIFICATION	2.1515738221611995E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998719151216767	WITHOUT_CLASSIFICATION	1.2808487832323707E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9993064872054891	WITHOUT_CLASSIFICATION	6.935127945109434E-4	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9998617814083434	WITHOUT_CLASSIFICATION	1.3821859165660312E-4	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999926638638266	WITHOUT_CLASSIFICATION	7.336136173316748E-6	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9989505683063947	WITHOUT_CLASSIFICATION	0.001049431693605324	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999432776848199	WITHOUT_CLASSIFICATION	5.672231518010515E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9964656247084229	WITHOUT_CLASSIFICATION	0.003534375291577057	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999959580019453	WITHOUT_CLASSIFICATION	4.041998054765755E-6	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999166589842577	WITHOUT_CLASSIFICATION	8.334101574225181E-5	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999816161351274	WITHOUT_CLASSIFICATION	1.8383864872636365E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9796168756605073	WITHOUT_CLASSIFICATION	0.020383124339492766	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999798867936156	WITHOUT_CLASSIFICATION	2.011320638440536E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.998264265869537	WITHOUT_CLASSIFICATION	0.0017357341304630567	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9999258499769171	WITHOUT_CLASSIFICATION	7.415002308285549E-5	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999452218562498	WITHOUT_CLASSIFICATION	5.477814375025274E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999478591782915	WITHOUT_CLASSIFICATION	5.2140821708447405E-5	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997927064657636	WITHOUT_CLASSIFICATION	2.072935342364687E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9960463929984451	WITHOUT_CLASSIFICATION	0.003953607001554916	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9991957982912184	WITHOUT_CLASSIFICATION	8.042017087815393E-4	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999850502245741	WITHOUT_CLASSIFICATION	1.4949775426034972E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9990706480873436	WITHOUT_CLASSIFICATION	9.293519126564093E-4	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.99594869877383	WITHOUT_CLASSIFICATION	0.004051301226169963	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.99998967884744	WITHOUT_CLASSIFICATION	1.0321152559986642E-5	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9998551623037638	WITHOUT_CLASSIFICATION	1.4483769623612304E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9986553150151506	WITHOUT_CLASSIFICATION	0.001344684984849428	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999772947386	WITHOUT_CLASSIFICATION	2.2705261438655207E-8	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999971697683319	WITHOUT_CLASSIFICATION	2.8302316680592175E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999441319888723	WITHOUT_CLASSIFICATION	5.5868011127784364E-5	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9953448750645127	WITHOUT_CLASSIFICATION	0.004655124935487219	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999549291932635	WITHOUT_CLASSIFICATION	4.5070806736578535E-5	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9975640588701221	WITHOUT_CLASSIFICATION	0.0024359411298778867	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999911991912246	WITHOUT_CLASSIFICATION	8.80080877540446E-6	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9999556913021288	WITHOUT_CLASSIFICATION	4.430869787131E-5	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.999875037141589	WITHOUT_CLASSIFICATION	1.249628584109771E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9988511251086706	WITHOUT_CLASSIFICATION	0.001148874891329403	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999610604067733	WITHOUT_CLASSIFICATION	3.893959322661446E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999991549779699	WITHOUT_CLASSIFICATION	8.450220301336406E-7	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999994366127545	WITHOUT_CLASSIFICATION	5.633872454556903E-7	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997271829867344	WITHOUT_CLASSIFICATION	2.7281701326561047E-4	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999425399325441	WITHOUT_CLASSIFICATION	5.746006745586477E-5	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999759037723944	WITHOUT_CLASSIFICATION	2.4096227605591663E-5	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9998779697868548	WITHOUT_CLASSIFICATION	1.2203021314509682E-4	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999848417368816	WITHOUT_CLASSIFICATION	1.5158263118428136E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999848417368816	WITHOUT_CLASSIFICATION	1.5158263118428136E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9994874960188256	WITHOUT_CLASSIFICATION	5.125039811744515E-4	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999989155301378	WITHOUT_CLASSIFICATION	1.0844698621884162E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999509518667489	WITHOUT_CLASSIFICATION	4.904813325100916E-5	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999962624569184	WITHOUT_CLASSIFICATION	3.7375430816977537E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999965475808236	WITHOUT_CLASSIFICATION	3.452419176555447E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999965475808236	WITHOUT_CLASSIFICATION	3.452419176555447E-6	DEFECT
}	WITHOUT_CLASSIFICATION	0.9999925421820816	WITHOUT_CLASSIFICATION	7.457817918493856E-6	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999880489583186	WITHOUT_CLASSIFICATION	1.1951041681377962E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9995919217218783	WITHOUT_CLASSIFICATION	4.0807827812172176E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998263028368044	WITHOUT_CLASSIFICATION	1.736971631956675E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999912789073201	WITHOUT_CLASSIFICATION	8.721092679900501E-5	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999791439801436	WITHOUT_CLASSIFICATION	2.0856019856351106E-5	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.99998917863048	WITHOUT_CLASSIFICATION	1.0821369519961027E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9997610037177541	WITHOUT_CLASSIFICATION	2.3899628224584733E-4	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999838546993647	WITHOUT_CLASSIFICATION	1.6145300635290384E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999447533622906	WITHOUT_CLASSIFICATION	5.524663770949377E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999196905540999	WITHOUT_CLASSIFICATION	8.030944590003225E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999058440242579	WITHOUT_CLASSIFICATION	9.415597574223031E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999058440242579	WITHOUT_CLASSIFICATION	9.415597574223031E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997927064657636	WITHOUT_CLASSIFICATION	2.072935342364687E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999919789177644	WITHOUT_CLASSIFICATION	8.021082235726465E-6	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.9999926440474686	WITHOUT_CLASSIFICATION	7.355952531517823E-6	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999806017564228	WITHOUT_CLASSIFICATION	1.9398243577156024E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999810130312373	WITHOUT_CLASSIFICATION	1.898696876262359E-5	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998672166038721	WITHOUT_CLASSIFICATION	1.3278339612792238E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999507513761767	WITHOUT_CLASSIFICATION	4.9248623823244736E-5	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999748173803583	WITHOUT_CLASSIFICATION	2.518261964166933E-5	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999269365493122	WITHOUT_CLASSIFICATION	7.306345068779648E-5	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999786684612301	WITHOUT_CLASSIFICATION	2.1331538769946408E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9796168756605073	WITHOUT_CLASSIFICATION	0.020383124339492766	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999942339533422	WITHOUT_CLASSIFICATION	5.7660466578254265E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9989159703986115	WITHOUT_CLASSIFICATION	0.0010840296013886269	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999953929995263	WITHOUT_CLASSIFICATION	4.607000473681073E-6	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999172265964372	WITHOUT_CLASSIFICATION	8.277340356279519E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999303907391941	WITHOUT_CLASSIFICATION	6.960926080585345E-5	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9998870702647479	WITHOUT_CLASSIFICATION	1.1292973525209345E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999429533466045	WITHOUT_CLASSIFICATION	5.704665339539873E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999925493107038	WITHOUT_CLASSIFICATION	7.450689296101802E-6	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999116155698008	WITHOUT_CLASSIFICATION	8.838443019913658E-5	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9989321497967406	WITHOUT_CLASSIFICATION	0.001067850203259379	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9989321497967406	WITHOUT_CLASSIFICATION	0.001067850203259379	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999583489575405	WITHOUT_CLASSIFICATION	4.165104245952466E-5	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999998866900447	WITHOUT_CLASSIFICATION	1.133099552968389E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999947619294619	WITHOUT_CLASSIFICATION	5.238070538017523E-6	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999282246604743	WITHOUT_CLASSIFICATION	7.17753395258065E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999962520736136	WITHOUT_CLASSIFICATION	3.7479263864352656E-6	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9996312590768851	WITHOUT_CLASSIFICATION	3.687409231149408E-4	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9998569215566472	WITHOUT_CLASSIFICATION	1.430784433528496E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998508432772892	WITHOUT_CLASSIFICATION	1.4915672271075336E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999976964579439	WITHOUT_CLASSIFICATION	2.3035420561028543E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998525653335395	WITHOUT_CLASSIFICATION	1.4743466646040693E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999266039858857	WITHOUT_CLASSIFICATION	7.339601411429117E-5	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999427584008658	WITHOUT_CLASSIFICATION	5.7241599134170386E-5	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999896759860419	WITHOUT_CLASSIFICATION	1.0324013957969252E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.999985446704531	WITHOUT_CLASSIFICATION	1.45532954689705E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999898214877333	WITHOUT_CLASSIFICATION	1.017851226674613E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999797441533669	WITHOUT_CLASSIFICATION	2.0255846633180976E-5	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9981393300342984	WITHOUT_CLASSIFICATION	0.001860669965701505	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999441858150533	WITHOUT_CLASSIFICATION	5.5814184946745525E-5	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9993349299578039	WITHOUT_CLASSIFICATION	6.6507004219612E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9295447506145712	WITHOUT_CLASSIFICATION	0.0704552493854287	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998542630953025	WITHOUT_CLASSIFICATION	1.4573690469757444E-4	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997277708652	WITHOUT_CLASSIFICATION	2.722291347690015E-7	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999669910288821	WITHOUT_CLASSIFICATION	3.300897111785295E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998119101214	WITHOUT_CLASSIFICATION	1.880898785565795E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999902947264678	WITHOUT_CLASSIFICATION	9.70527353217474E-6	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999902947264678	WITHOUT_CLASSIFICATION	9.70527353217474E-6	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999730325172331	WITHOUT_CLASSIFICATION	2.6967482766768393E-5	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999411045244259	WITHOUT_CLASSIFICATION	5.889547557426518E-5	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999743556202862	WITHOUT_CLASSIFICATION	2.564437971374247E-5	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999257142554513	WITHOUT_CLASSIFICATION	7.428574454863418E-5	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999819163800309	WITHOUT_CLASSIFICATION	1.8083619969201844E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9760662186677835	WITHOUT_CLASSIFICATION	0.023933781332216443	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9921053413371739	WITHOUT_CLASSIFICATION	0.00789465866282619	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9998580365847012	WITHOUT_CLASSIFICATION	1.4196341529877453E-4	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.8869285497860906	DEFECT	0.11307145021390945	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.8895205020918499	WITHOUT_CLASSIFICATION	0.11047949790815015	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9996506818736665	WITHOUT_CLASSIFICATION	3.493181263335687E-4	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9994890027555323	WITHOUT_CLASSIFICATION	5.10997244467757E-4	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.9999802656255052	WITHOUT_CLASSIFICATION	1.9734374494735384E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.999657865712532	WITHOUT_CLASSIFICATION	3.421342874679523E-4	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.865039956068595	DEFECT	0.134960043931405	WITHOUT_CLASSIFICATION
TODO : should this be an error?	DEFECT	0.7842953770183667	WITHOUT_CLASSIFICATION	0.21570462298163337	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.8465525885930736	WITHOUT_CLASSIFICATION	0.15344741140692633	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.9009047692969911	DEFECT	0.09909523070300878	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.869105001589578	WITHOUT_CLASSIFICATION	0.13089499841042193	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.869105001589578	WITHOUT_CLASSIFICATION	0.13089499841042193	DEFECT
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9804722836319846	WITHOUT_CLASSIFICATION	0.019527716368015383	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999646862732814	WITHOUT_CLASSIFICATION	3.531372671855862E-5	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9095051966288225	DEFECT	0.09049480337117752	WITHOUT_CLASSIFICATION
this call is side-effecty	DEFECT	0.9997453335736981	WITHOUT_CLASSIFICATION	2.546664263019624E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9689522877183313	DEFECT	0.03104771228166864	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9170781674148897	WITHOUT_CLASSIFICATION	0.08292183258511035	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.91479678589327	WITHOUT_CLASSIFICATION	0.08520321410673007	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9505348347876718	WITHOUT_CLASSIFICATION	0.04946516521232815	DEFECT
TODO: is this completely correct?	DEFECT	0.6670217425675116	WITHOUT_CLASSIFICATION	0.3329782574324884	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.8777691224559222	WITHOUT_CLASSIFICATION	0.12223087754407785	DEFECT
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.8254794526212375	WITHOUT_CLASSIFICATION	0.1745205473787625	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9591902514645797	WITHOUT_CLASSIFICATION	0.040809748535420354	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.5332527225554814	DEFECT	0.46674727744451866	WITHOUT_CLASSIFICATION
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9999978049351809	DEFECT	2.195064819109006E-6	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6717095017395996	DEFECT	0.32829049826040024	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.9824767150834051	DEFECT	0.01752328491659495	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.8918722992258271	DEFECT	0.10812770077417282	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8534751189069348	DEFECT	0.14652488109306522	WITHOUT_CLASSIFICATION
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.541491561396566	WITHOUT_CLASSIFICATION	0.4585084386034341	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.869105001589578	WITHOUT_CLASSIFICATION	0.13089499841042193	DEFECT
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.982657706376876	DEFECT	0.017342293623124054	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.8953195728662421	DEFECT	0.10468042713375783	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.983008406702262	WITHOUT_CLASSIFICATION	0.01699159329773803	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9998865808315613	WITHOUT_CLASSIFICATION	1.1341916843873298E-4	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9936175279835207	WITHOUT_CLASSIFICATION	0.006382472016479403	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.9961777400325508	WITHOUT_CLASSIFICATION	0.0038222599674492207	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9983482114579713	WITHOUT_CLASSIFICATION	0.001651788542028768	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.6203741627421635	WITHOUT_CLASSIFICATION	0.37962583725783655	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.6084040562025657	WITHOUT_CLASSIFICATION	0.3915959437974344	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.9710484065120161	WITHOUT_CLASSIFICATION	0.02895159348798389	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.8894517018361384	WITHOUT_CLASSIFICATION	0.11054829816386152	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.7488404925709998	WITHOUT_CLASSIFICATION	0.25115950742900023	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9962795538754196	WITHOUT_CLASSIFICATION	0.003720446124580394	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9996718479777027	WITHOUT_CLASSIFICATION	3.2815202229724875E-4	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.6160052026760265	DEFECT	0.38399479732397357	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.7478832940611794	DEFECT	0.25211670593882063	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999864410506905	DEFECT	1.3558949309464503E-5	WITHOUT_CLASSIFICATION
