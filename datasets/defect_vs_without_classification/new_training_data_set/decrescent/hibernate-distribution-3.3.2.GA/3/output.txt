test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999443599965141	WITHOUT_CLASSIFICATION	5.5640003486003555E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9993028093139587	WITHOUT_CLASSIFICATION	6.971906860413841E-4	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998704677231833	WITHOUT_CLASSIFICATION	1.2953227681656082E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999007006438738	WITHOUT_CLASSIFICATION	9.929935612613092E-5	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999007006438738	WITHOUT_CLASSIFICATION	9.929935612613092E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999879029983397	WITHOUT_CLASSIFICATION	1.2097001660150339E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997809570624526	WITHOUT_CLASSIFICATION	2.190429375473958E-4	DEFECT
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998744723191011	WITHOUT_CLASSIFICATION	1.2552768089893232E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9998935355120528	WITHOUT_CLASSIFICATION	1.0646448794709343E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999878126470566	WITHOUT_CLASSIFICATION	1.21873529432409E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999878126470566	WITHOUT_CLASSIFICATION	1.21873529432409E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999740499707145	WITHOUT_CLASSIFICATION	2.5950029285527434E-5	DEFECT
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999030057833054	WITHOUT_CLASSIFICATION	9.699421669459877E-5	DEFECT
decode row selection...	WITHOUT_CLASSIFICATION	0.9998844045944821	WITHOUT_CLASSIFICATION	1.1559540551788194E-4	DEFECT
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9998871394092836	WITHOUT_CLASSIFICATION	1.1286059071633109E-4	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999824163028852	WITHOUT_CLASSIFICATION	1.7583697114800938E-4	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
ROW ID	WITHOUT_CLASSIFICATION	0.9999760516446362	WITHOUT_CLASSIFICATION	2.3948355363888898E-5	DEFECT
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998524261733376	WITHOUT_CLASSIFICATION	1.4757382666240906E-4	DEFECT
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999183363781206	WITHOUT_CLASSIFICATION	8.166362187940906E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9986729365918343	WITHOUT_CLASSIFICATION	0.0013270634081656426	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999760255520492	WITHOUT_CLASSIFICATION	2.397444795073196E-5	DEFECT
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999205491717319	WITHOUT_CLASSIFICATION	7.945082826806354E-5	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998880259306823	WITHOUT_CLASSIFICATION	1.1197406931778144E-4	DEFECT
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9398263836477774	WITHOUT_CLASSIFICATION	0.06017361635222259	DEFECT
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999985870450665	WITHOUT_CLASSIFICATION	1.4129549334455914E-6	DEFECT
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9997087622229697	WITHOUT_CLASSIFICATION	2.91237777030307E-4	DEFECT
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999850778341024	WITHOUT_CLASSIFICATION	1.4922165897696038E-5	DEFECT
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9987168053678093	WITHOUT_CLASSIFICATION	0.001283194632190729	DEFECT
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999098444694458	WITHOUT_CLASSIFICATION	9.015553055415632E-5	DEFECT
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9994928632274844	WITHOUT_CLASSIFICATION	5.071367725156306E-4	DEFECT
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9997419396446575	WITHOUT_CLASSIFICATION	2.580603553424129E-4	DEFECT
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9997464017794033	WITHOUT_CLASSIFICATION	2.5359822059669587E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999859580739707	WITHOUT_CLASSIFICATION	1.40419260293014E-4	DEFECT
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999895299029118	WITHOUT_CLASSIFICATION	1.0470097088200645E-4	DEFECT
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999658343300908	WITHOUT_CLASSIFICATION	3.4165669909208356E-4	DEFECT
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999017508647968	WITHOUT_CLASSIFICATION	9.824913520317278E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.6920907179875472	WITHOUT_CLASSIFICATION	0.3079092820124527	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999757168349044	WITHOUT_CLASSIFICATION	2.4283165095591492E-5	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999757168349044	WITHOUT_CLASSIFICATION	2.4283165095591492E-5	DEFECT
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999017508647968	WITHOUT_CLASSIFICATION	9.824913520317278E-5	DEFECT
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9877357389057861	WITHOUT_CLASSIFICATION	0.012264261094213877	DEFECT
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9997589394741576	WITHOUT_CLASSIFICATION	2.410605258423167E-4	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9990102433611991	WITHOUT_CLASSIFICATION	9.897566388007454E-4	DEFECT
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999724991919281	WITHOUT_CLASSIFICATION	2.750080807199805E-5	DEFECT
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999989707851558	WITHOUT_CLASSIFICATION	1.029214844234148E-6	DEFECT
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.96782718583254	WITHOUT_CLASSIFICATION	0.03217281416745992	DEFECT
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9993824921760984	WITHOUT_CLASSIFICATION	6.17507823901522E-4	DEFECT
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998508750192763	WITHOUT_CLASSIFICATION	1.4912498072378402E-4	DEFECT
Never evict this node	WITHOUT_CLASSIFICATION	0.9997932448019365	WITHOUT_CLASSIFICATION	2.067551980635085E-4	DEFECT
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999886808354753	WITHOUT_CLASSIFICATION	1.1319164524700472E-4	DEFECT
60 seconds	WITHOUT_CLASSIFICATION	0.9999757168349044	WITHOUT_CLASSIFICATION	2.4283165095591492E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999767626840925	WITHOUT_CLASSIFICATION	2.3237315907422473E-5	DEFECT
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999021897062466	WITHOUT_CLASSIFICATION	9.781029375339888E-4	DEFECT
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9899012513286943	WITHOUT_CLASSIFICATION	0.010098748671305679	DEFECT
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9920287188805431	WITHOUT_CLASSIFICATION	0.0079712811194569	DEFECT
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999050597945257	WITHOUT_CLASSIFICATION	9.494020547421828E-5	DEFECT
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9981416616956984	WITHOUT_CLASSIFICATION	0.0018583383043015392	DEFECT
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997202757061773	WITHOUT_CLASSIFICATION	2.797242938226925E-4	DEFECT
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997630058468326	WITHOUT_CLASSIFICATION	2.3699415316737202E-4	DEFECT
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999849772161405	WITHOUT_CLASSIFICATION	1.5022783859583438E-5	DEFECT
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999972296344388	WITHOUT_CLASSIFICATION	2.7703655610692264E-6	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998664407744976	WITHOUT_CLASSIFICATION	1.3355922550235385E-4	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997315692127785	WITHOUT_CLASSIFICATION	2.684307872215035E-4	DEFECT
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9974714083940474	WITHOUT_CLASSIFICATION	0.0025285916059525674	DEFECT
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998078539152893	WITHOUT_CLASSIFICATION	1.921460847106732E-4	DEFECT
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999350475154124	WITHOUT_CLASSIFICATION	6.49524845876625E-5	DEFECT
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999950955113012	WITHOUT_CLASSIFICATION	4.9044886988352445E-6	DEFECT
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9985286207464185	WITHOUT_CLASSIFICATION	0.0014713792535814697	DEFECT
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999911108701873	WITHOUT_CLASSIFICATION	8.889129812608388E-6	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999887677310467	WITHOUT_CLASSIFICATION	1.123226895328008E-5	DEFECT
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999690874092324	WITHOUT_CLASSIFICATION	3.091259076767315E-5	DEFECT
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998073306325788	WITHOUT_CLASSIFICATION	1.926693674212851E-4	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993258248685372	WITHOUT_CLASSIFICATION	6.741751314628137E-4	DEFECT
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9998535889881855	WITHOUT_CLASSIFICATION	1.4641101181435748E-4	DEFECT
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999206412350317	WITHOUT_CLASSIFICATION	7.935876496834101E-5	DEFECT
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993258248685372	WITHOUT_CLASSIFICATION	6.741751314628137E-4	DEFECT
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9989191926214871	WITHOUT_CLASSIFICATION	0.0010808073785129764	DEFECT
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9987016831778053	WITHOUT_CLASSIFICATION	0.001298316822194744	DEFECT
ignore!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999757504542144	WITHOUT_CLASSIFICATION	2.4249545785627618E-5	DEFECT
construct the cache	WITHOUT_CLASSIFICATION	0.9999149670739589	WITHOUT_CLASSIFICATION	8.503292604120695E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999968769819029	WITHOUT_CLASSIFICATION	3.1230180970954243E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999968769819029	WITHOUT_CLASSIFICATION	3.1230180970954243E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998097823356332	WITHOUT_CLASSIFICATION	1.9021766436671581E-4	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999986865921171	WITHOUT_CLASSIFICATION	1.3134078829024441E-6	DEFECT
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999341497484018	WITHOUT_CLASSIFICATION	6.585025159817396E-5	DEFECT
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999035765151402	WITHOUT_CLASSIFICATION	9.642348485986547E-5	DEFECT
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999677453448521	WITHOUT_CLASSIFICATION	3.225465514783608E-5	DEFECT
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998102564867554	WITHOUT_CLASSIFICATION	1.8974351324467522E-4	DEFECT
return the connection	WITHOUT_CLASSIFICATION	0.9999732571576192	WITHOUT_CLASSIFICATION	2.6742842380792358E-5	DEFECT
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998958652096064	WITHOUT_CLASSIFICATION	1.0413479039363367E-4	DEFECT
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999107611693012	WITHOUT_CLASSIFICATION	8.923883069878382E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808019756292	WITHOUT_CLASSIFICATION	1.9198024370816978E-5	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808019756292	WITHOUT_CLASSIFICATION	1.9198024370816978E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996839397256416	WITHOUT_CLASSIFICATION	3.160602743584132E-4	DEFECT
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999838555525785	WITHOUT_CLASSIFICATION	1.6144447421498952E-4	DEFECT
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998252272999776	WITHOUT_CLASSIFICATION	1.7477270002232064E-4	DEFECT
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999808019756292	WITHOUT_CLASSIFICATION	1.9198024370816978E-5	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996839397256416	WITHOUT_CLASSIFICATION	3.160602743584132E-4	DEFECT
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9996839397256416	WITHOUT_CLASSIFICATION	3.160602743584132E-4	DEFECT
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998517922474013	WITHOUT_CLASSIFICATION	1.4820775259870154E-4	DEFECT
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999124374913567	WITHOUT_CLASSIFICATION	8.756250864330838E-5	DEFECT
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999161623618704	WITHOUT_CLASSIFICATION	8.38376381295884E-5	DEFECT
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999585704079302	WITHOUT_CLASSIFICATION	4.142959206972481E-5	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9992757981512217	WITHOUT_CLASSIFICATION	7.242018487782837E-4	DEFECT
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9992757981512217	WITHOUT_CLASSIFICATION	7.242018487782837E-4	DEFECT
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9997544601483811	WITHOUT_CLASSIFICATION	2.4553985161891587E-4	DEFECT
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998558281934228	WITHOUT_CLASSIFICATION	1.441718065771333E-4	DEFECT
default is POJO	WITHOUT_CLASSIFICATION	0.9999570350153898	WITHOUT_CLASSIFICATION	4.296498461028441E-5	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999774871318817	WITHOUT_CLASSIFICATION	2.2512868118300156E-4	DEFECT
use setParameter for null values	WITHOUT_CLASSIFICATION	0.999774871318817	WITHOUT_CLASSIFICATION	2.2512868118300156E-4	DEFECT
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9997680459666314	WITHOUT_CLASSIFICATION	2.3195403336866258E-4	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988600122607385	WITHOUT_CLASSIFICATION	0.0011399877392615071	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997347612579573	WITHOUT_CLASSIFICATION	2.652387420426678E-4	DEFECT
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9998909694558102	WITHOUT_CLASSIFICATION	1.0903054418977468E-4	DEFECT
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.999972391480423	WITHOUT_CLASSIFICATION	2.7608519576991532E-5	DEFECT
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9997811652874996	WITHOUT_CLASSIFICATION	2.1883471250044246E-4	DEFECT
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9995226448994405	WITHOUT_CLASSIFICATION	4.773551005593557E-4	DEFECT
sort first by role name	WITHOUT_CLASSIFICATION	0.9999751887930842	WITHOUT_CLASSIFICATION	2.4811206915740296E-5	DEFECT
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997347612579573	WITHOUT_CLASSIFICATION	2.652387420426678E-4	DEFECT
then by fk	WITHOUT_CLASSIFICATION	0.9999864736502513	WITHOUT_CLASSIFICATION	1.352634974867299E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999122381226635	WITHOUT_CLASSIFICATION	8.776187733657751E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999122381226635	WITHOUT_CLASSIFICATION	8.776187733657751E-5	DEFECT
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999822439630125	WITHOUT_CLASSIFICATION	1.7756036987469816E-5	DEFECT
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999537346613068	WITHOUT_CLASSIFICATION	4.626533869319346E-5	DEFECT
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998495548034664	WITHOUT_CLASSIFICATION	1.5044519653368502E-4	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970774515086974	WITHOUT_CLASSIFICATION	0.00292254849130258	DEFECT
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9994707564168268	WITHOUT_CLASSIFICATION	5.292435831732459E-4	DEFECT
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999755833313273	WITHOUT_CLASSIFICATION	2.441666867271574E-5	DEFECT
then by id	WITHOUT_CLASSIFICATION	0.9999868771119816	WITHOUT_CLASSIFICATION	1.3122888018392287E-5	DEFECT
to be safe...	WITHOUT_CLASSIFICATION	0.9995417450978997	WITHOUT_CLASSIFICATION	4.582549021002329E-4	DEFECT
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999288575886118	WITHOUT_CLASSIFICATION	7.114241138811947E-5	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998908093540724	WITHOUT_CLASSIFICATION	1.0919064592758609E-4	DEFECT
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998908093540724	WITHOUT_CLASSIFICATION	1.0919064592758609E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999443599965141	WITHOUT_CLASSIFICATION	5.5640003486003555E-5	DEFECT
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999425047337456	WITHOUT_CLASSIFICATION	5.749526625445996E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
invokespecial	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9998262985330618	WITHOUT_CLASSIFICATION	1.737014669380639E-4	DEFECT
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9998312123296473	WITHOUT_CLASSIFICATION	1.6878767035268392E-4	DEFECT
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998510952655812	WITHOUT_CLASSIFICATION	1.489047344187235E-4	DEFECT
aload_2 args	WITHOUT_CLASSIFICATION	0.999590026129202	WITHOUT_CLASSIFICATION	4.0997387079797984E-4	DEFECT
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.998163660542547	WITHOUT_CLASSIFICATION	0.001836339457453	DEFECT
new	WITHOUT_CLASSIFICATION	0.9999845737388483	WITHOUT_CLASSIFICATION	1.542626115169799E-5	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999757183503631	WITHOUT_CLASSIFICATION	2.4281649636944933E-5	DEFECT
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999000062079101	WITHOUT_CLASSIFICATION	9.999379208984837E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
aastore args	WITHOUT_CLASSIFICATION	0.999590026129202	WITHOUT_CLASSIFICATION	4.0997387079797984E-4	DEFECT
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9980533310489587	WITHOUT_CLASSIFICATION	0.0019466689510413695	DEFECT
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9994072701288128	WITHOUT_CLASSIFICATION	5.927298711872527E-4	DEFECT
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998512847790747	WITHOUT_CLASSIFICATION	1.487152209253426E-4	DEFECT
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999027782980814	WITHOUT_CLASSIFICATION	9.722170191862016E-5	DEFECT
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9994175068536383	WITHOUT_CLASSIFICATION	5.824931463617128E-4	DEFECT
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999007006438738	WITHOUT_CLASSIFICATION	9.929935612613092E-5	DEFECT
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9991537491566094	WITHOUT_CLASSIFICATION	8.462508433907296E-4	DEFECT
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999857347574259	WITHOUT_CLASSIFICATION	1.426524257424325E-5	DEFECT
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9998488965499747	WITHOUT_CLASSIFICATION	1.5110345002543164E-4	DEFECT
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9997912558559491	WITHOUT_CLASSIFICATION	2.0874414405090992E-4	DEFECT
iconst_i	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aaload	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999756605687926	WITHOUT_CLASSIFICATION	2.433943120746344E-5	DEFECT
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998251335683211	WITHOUT_CLASSIFICATION	1.7486643167879373E-4	DEFECT
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998645783000829	WITHOUT_CLASSIFICATION	1.3542169991699E-4	DEFECT
current stack len = 2	WITHOUT_CLASSIFICATION	0.9986854412659844	WITHOUT_CLASSIFICATION	0.0013145587340156757	DEFECT
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9990972440299535	WITHOUT_CLASSIFICATION	9.027559700465343E-4	DEFECT
register in exception table	WITHOUT_CLASSIFICATION	0.9998859011577861	WITHOUT_CLASSIFICATION	1.1409884221385713E-4	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aload_0	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999757183503631	WITHOUT_CLASSIFICATION	2.4281649636944933E-5	DEFECT
invokevirtual	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999756605687926	WITHOUT_CLASSIFICATION	2.433943120746344E-5	DEFECT
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999879029983397	WITHOUT_CLASSIFICATION	1.2097001660150339E-5	DEFECT
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9997721508547895	WITHOUT_CLASSIFICATION	2.2784914521057742E-4	DEFECT
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999201453070627	WITHOUT_CLASSIFICATION	7.985469293728692E-5	DEFECT
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997342112019324	WITHOUT_CLASSIFICATION	2.6578879806769216E-4	DEFECT
iload_3 i	WITHOUT_CLASSIFICATION	0.9999756525560283	WITHOUT_CLASSIFICATION	2.4347443971767833E-5	DEFECT
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
athrow	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9954571650538856	WITHOUT_CLASSIFICATION	0.004542834946114402	DEFECT
swallow	WITHOUT_CLASSIFICATION	0.9999761365721399	WITHOUT_CLASSIFICATION	2.3863427860041432E-5	DEFECT
local variable | this |	WITHOUT_CLASSIFICATION	0.9999329897041573	WITHOUT_CLASSIFICATION	6.701029584265334E-5	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996211233039632	WITHOUT_CLASSIFICATION	3.7887669603677476E-4	DEFECT
aload_0 load this	WITHOUT_CLASSIFICATION	0.9996211233039632	WITHOUT_CLASSIFICATION	3.7887669603677476E-4	DEFECT
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999888982689743	WITHOUT_CLASSIFICATION	1.1101731025581785E-5	DEFECT
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999346323627316	WITHOUT_CLASSIFICATION	6.536763726836697E-5	DEFECT
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.999849638468255	WITHOUT_CLASSIFICATION	1.5036153174495816E-4	DEFECT
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9998876576828839	WITHOUT_CLASSIFICATION	1.1234231711606116E-4	DEFECT
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999823535177398	WITHOUT_CLASSIFICATION	1.7646482260246823E-5	DEFECT
case of non-static field	WITHOUT_CLASSIFICATION	0.999936000415835	WITHOUT_CLASSIFICATION	6.399958416504633E-5	DEFECT
getfield get each field	WITHOUT_CLASSIFICATION	0.99997025076131	WITHOUT_CLASSIFICATION	2.9749238690028147E-5	DEFECT
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997809570624526	WITHOUT_CLASSIFICATION	2.190429375473958E-4	DEFECT
ifnonnull	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999956846140007	WITHOUT_CLASSIFICATION	4.315385999299786E-5	DEFECT
return each type	WITHOUT_CLASSIFICATION	0.999956846140007	WITHOUT_CLASSIFICATION	4.315385999299786E-5	DEFECT
store_1 each type	WITHOUT_CLASSIFICATION	0.9998690413776797	WITHOUT_CLASSIFICATION	1.309586223203022E-4	DEFECT
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999335034724794	WITHOUT_CLASSIFICATION	6.649652752052164E-5	DEFECT
load_1 each type	WITHOUT_CLASSIFICATION	0.9998690413776797	WITHOUT_CLASSIFICATION	1.309586223203022E-4	DEFECT
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9998497842791477	WITHOUT_CLASSIFICATION	1.5021572085236948E-4	DEFECT
int	WITHOUT_CLASSIFICATION	0.9999788802799676	WITHOUT_CLASSIFICATION	2.111972003237731E-5	DEFECT
return	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
dup	WITHOUT_CLASSIFICATION	0.9999757183503631	WITHOUT_CLASSIFICATION	2.4281649636944933E-5	DEFECT
invokeinterface	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999756605687926	WITHOUT_CLASSIFICATION	2.433943120746344E-5	DEFECT
checkcast	WITHOUT_CLASSIFICATION	0.9999756605687926	WITHOUT_CLASSIFICATION	2.433943120746344E-5	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
load_1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
putfield	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
return ;	WITHOUT_CLASSIFICATION	0.9999919673093354	WITHOUT_CLASSIFICATION	8.032690664622157E-6	DEFECT
ldc field name	WITHOUT_CLASSIFICATION	0.9998969332046248	WITHOUT_CLASSIFICATION	1.0306679537519621E-4	DEFECT
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9998469359802603	WITHOUT_CLASSIFICATION	1.5306401973975062E-4	DEFECT
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9998935355120528	WITHOUT_CLASSIFICATION	1.0646448794709343E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9998935355120528	WITHOUT_CLASSIFICATION	1.0646448794709343E-4	DEFECT
not array	WITHOUT_CLASSIFICATION	0.9998307261104128	WITHOUT_CLASSIFICATION	1.6927388958715012E-4	DEFECT
array of reference type	WITHOUT_CLASSIFICATION	0.9999275886704216	WITHOUT_CLASSIFICATION	7.241132957834977E-5	DEFECT
boolean	WITHOUT_CLASSIFICATION	0.999984460444462	WITHOUT_CLASSIFICATION	1.553955553793688E-5	DEFECT
byte	WITHOUT_CLASSIFICATION	0.9999807097307867	WITHOUT_CLASSIFICATION	1.9290269213281818E-5	DEFECT
char	WITHOUT_CLASSIFICATION	0.9999798465384037	WITHOUT_CLASSIFICATION	2.015346159632765E-5	DEFECT
short	WITHOUT_CLASSIFICATION	0.9999782104576996	WITHOUT_CLASSIFICATION	2.1789542300337687E-5	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999878126470566	WITHOUT_CLASSIFICATION	1.21873529432409E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999767794561709	WITHOUT_CLASSIFICATION	2.3220543829075293E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999767794561709	WITHOUT_CLASSIFICATION	2.3220543829075293E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999740499707145	WITHOUT_CLASSIFICATION	2.5950029285527434E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999740499707145	WITHOUT_CLASSIFICATION	2.5950029285527434E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9997981841133446	WITHOUT_CLASSIFICATION	2.0181588665527518E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9997981841133446	WITHOUT_CLASSIFICATION	2.0181588665527518E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997870475612739	WITHOUT_CLASSIFICATION	2.1295243872606186E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997870475612739	WITHOUT_CLASSIFICATION	2.1295243872606186E-4	DEFECT
reference type	WITHOUT_CLASSIFICATION	0.9998935355120528	WITHOUT_CLASSIFICATION	1.0646448794709343E-4	DEFECT
double	WITHOUT_CLASSIFICATION	0.9999878126470566	WITHOUT_CLASSIFICATION	1.21873529432409E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999767794561709	WITHOUT_CLASSIFICATION	2.3220543829075293E-5	DEFECT
float	WITHOUT_CLASSIFICATION	0.9999767794561709	WITHOUT_CLASSIFICATION	2.3220543829075293E-5	DEFECT
long	WITHOUT_CLASSIFICATION	0.9999740499707145	WITHOUT_CLASSIFICATION	2.5950029285527434E-5	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9997981841133446	WITHOUT_CLASSIFICATION	2.0181588665527518E-4	DEFECT
bad type	WITHOUT_CLASSIFICATION	0.9997981841133446	WITHOUT_CLASSIFICATION	2.0181588665527518E-4	DEFECT
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9997870475612739	WITHOUT_CLASSIFICATION	2.1295243872606186E-4	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999619321931461	WITHOUT_CLASSIFICATION	3.806780685398297E-5	DEFECT
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9997717567245514	WITHOUT_CLASSIFICATION	2.2824327544861811E-4	DEFECT
decrement the lock	WITHOUT_CLASSIFICATION	0.9999095175838149	WITHOUT_CLASSIFICATION	9.048241618515594E-5	DEFECT
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999685250229032	WITHOUT_CLASSIFICATION	3.147497709680574E-5	DEFECT
recache the updated state	WITHOUT_CLASSIFICATION	0.9999193362551093	WITHOUT_CLASSIFICATION	8.066374489068552E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999975858537401	WITHOUT_CLASSIFICATION	2.414146259899729E-5	DEFECT
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.996118828321871	WITHOUT_CLASSIFICATION	0.003881171678128934	DEFECT
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9948240684995978	WITHOUT_CLASSIFICATION	0.005175931500402116	DEFECT
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.99993571271058	WITHOUT_CLASSIFICATION	6.42872894200711E-5	DEFECT
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9996386135686464	WITHOUT_CLASSIFICATION	3.613864313535547E-4	DEFECT
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9998024341356166	WITHOUT_CLASSIFICATION	1.9756586438338087E-4	DEFECT
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999268119600091	WITHOUT_CLASSIFICATION	7.318803999092548E-5	DEFECT
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998097823356332	WITHOUT_CLASSIFICATION	1.9021766436671581E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999975858537401	WITHOUT_CLASSIFICATION	2.414146259899729E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999975858537401	WITHOUT_CLASSIFICATION	2.414146259899729E-5	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999975858537401	WITHOUT_CLASSIFICATION	2.414146259899729E-5	DEFECT
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9994733838500413	WITHOUT_CLASSIFICATION	5.266161499586901E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998898576861808	WITHOUT_CLASSIFICATION	1.1014231381916905E-4	DEFECT
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998898576861808	WITHOUT_CLASSIFICATION	1.1014231381916905E-4	DEFECT
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9990597479076939	WITHOUT_CLASSIFICATION	9.402520923060318E-4	DEFECT
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999404680198121	WITHOUT_CLASSIFICATION	5.953198018798896E-5	DEFECT
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9984655656345038	WITHOUT_CLASSIFICATION	0.0015344343654960905	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9981962843375297	WITHOUT_CLASSIFICATION	0.0018037156624702863	DEFECT
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9981962843375297	WITHOUT_CLASSIFICATION	0.0018037156624702863	DEFECT
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.999824163028852	WITHOUT_CLASSIFICATION	1.7583697114800938E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996635327483029	WITHOUT_CLASSIFICATION	3.364672516971049E-4	DEFECT
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996635327483029	WITHOUT_CLASSIFICATION	3.364672516971049E-4	DEFECT
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9996445458112013	WITHOUT_CLASSIFICATION	3.5545418879868784E-4	DEFECT
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9998391438951224	WITHOUT_CLASSIFICATION	1.608561048776236E-4	DEFECT
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999183363781206	WITHOUT_CLASSIFICATION	8.166362187940906E-5	DEFECT
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
MUTABLE	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
WHERE	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9910673903820839	WITHOUT_CLASSIFICATION	0.008932609617916042	DEFECT
ID	WITHOUT_CLASSIFICATION	0.9999760516446362	WITHOUT_CLASSIFICATION	2.3948355363888898E-5	DEFECT
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998236709988595	WITHOUT_CLASSIFICATION	1.7632900114047866E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999192478356943	WITHOUT_CLASSIFICATION	8.075216430577789E-5	DEFECT
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9998781257448377	WITHOUT_CLASSIFICATION	1.2187425516232713E-4	DEFECT
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999068752063635	WITHOUT_CLASSIFICATION	9.31247936365273E-5	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9998880259306823	WITHOUT_CLASSIFICATION	1.1197406931778144E-4	DEFECT
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999969309870951	WITHOUT_CLASSIFICATION	3.069012904910037E-6	DEFECT
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
IMPORT	WITHOUT_CLASSIFICATION	0.9999756495624129	WITHOUT_CLASSIFICATION	2.435043758713665E-5	DEFECT
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
PERSISTER	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999757193040925	WITHOUT_CLASSIFICATION	2.4280695907539264E-5	DEFECT
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999183363781206	WITHOUT_CLASSIFICATION	8.166362187940906E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999508399660312	WITHOUT_CLASSIFICATION	4.916003396874164E-5	DEFECT
joined subclasses	WITHOUT_CLASSIFICATION	0.9998365750033174	WITHOUT_CLASSIFICATION	1.6342499668254554E-4	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999756735627819	WITHOUT_CLASSIFICATION	2.4326437218174385E-5	DEFECT
CHECK	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999757193040925	WITHOUT_CLASSIFICATION	2.4280695907539264E-5	DEFECT
properties	WITHOUT_CLASSIFICATION	0.9999508399660312	WITHOUT_CLASSIFICATION	4.916003396874164E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999756735627819	WITHOUT_CLASSIFICATION	2.4326437218174385E-5	DEFECT
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999619612927958	WITHOUT_CLASSIFICATION	3.803870720419486E-4	DEFECT
TABLENAME	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999619612927958	WITHOUT_CLASSIFICATION	3.803870720419486E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
column index	WITHOUT_CLASSIFICATION	0.9997558195217773	WITHOUT_CLASSIFICATION	2.4418047822265243E-4	DEFECT
column unique-key	WITHOUT_CLASSIFICATION	0.9998368893074783	WITHOUT_CLASSIFICATION	1.6311069252164745E-4	DEFECT
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999744116077306	WITHOUT_CLASSIFICATION	2.5588392269389425E-5	DEFECT
for an any	WITHOUT_CLASSIFICATION	0.9999929437416708	WITHOUT_CLASSIFICATION	7.0562583292528E-6	DEFECT
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9998238393775707	WITHOUT_CLASSIFICATION	1.7616062242929023E-4	DEFECT
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999890854250103	WITHOUT_CLASSIFICATION	1.0914574989693007E-4	DEFECT
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9985206968971707	WITHOUT_CLASSIFICATION	0.001479303102829266	DEFECT
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9995180333947555	WITHOUT_CLASSIFICATION	4.8196660524447326E-4	DEFECT
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999890854250103	WITHOUT_CLASSIFICATION	1.0914574989693007E-4	DEFECT
ROLENAME	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
TABLE	WITHOUT_CLASSIFICATION	0.9999760255520492	WITHOUT_CLASSIFICATION	2.397444795073196E-5	DEFECT
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9993988741043058	WITHOUT_CLASSIFICATION	6.011258956941713E-4	DEFECT
SORT	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999757193040925	WITHOUT_CLASSIFICATION	2.4280695907539264E-5	DEFECT
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9995407510572345	WITHOUT_CLASSIFICATION	4.5924894276554086E-4	DEFECT
set up second pass	WITHOUT_CLASSIFICATION	0.9996344816926561	WITHOUT_CLASSIFICATION	3.6551830734387497E-4	DEFECT
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9954572141905182	WITHOUT_CLASSIFICATION	0.004542785809481782	DEFECT
a nested composite element	WITHOUT_CLASSIFICATION	0.9998664713742493	WITHOUT_CLASSIFICATION	1.3352862575069022E-4	DEFECT
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.999527846891019	WITHOUT_CLASSIFICATION	4.721531089809918E-4	DEFECT
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999870954846011	WITHOUT_CLASSIFICATION	1.2904515398804768E-5	DEFECT
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9996788755566244	WITHOUT_CLASSIFICATION	3.211244433755532E-4	DEFECT
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998041082718291	WITHOUT_CLASSIFICATION	1.958917281709092E-4	DEFECT
GENERATOR	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998124045762895	WITHOUT_CLASSIFICATION	1.8759542371045952E-4	DEFECT
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9989624442192002	WITHOUT_CLASSIFICATION	0.001037555780799849	DEFECT
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998880259306823	WITHOUT_CLASSIFICATION	1.1197406931778144E-4	DEFECT
contained elements:	WITHOUT_CLASSIFICATION	0.999878035028208	WITHOUT_CLASSIFICATION	1.2196497179198691E-4	DEFECT
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9995513971003125	WITHOUT_CLASSIFICATION	4.4860289968758733E-4	DEFECT
Bind the where	WITHOUT_CLASSIFICATION	0.9999078254702976	WITHOUT_CLASSIFICATION	9.21745297024488E-5	DEFECT
Bind the order-by	WITHOUT_CLASSIFICATION	0.9998461765655899	WITHOUT_CLASSIFICATION	1.5382343440996702E-4	DEFECT
Bind the filters	WITHOUT_CLASSIFICATION	0.9998461765655899	WITHOUT_CLASSIFICATION	1.5382343440996702E-4	DEFECT
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998971075989463	WITHOUT_CLASSIFICATION	1.0289240105368966E-4	DEFECT
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999984386312183	WITHOUT_CLASSIFICATION	1.5613687817574043E-6	DEFECT
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999609431404131	WITHOUT_CLASSIFICATION	3.905685958693039E-5	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997408224744365	WITHOUT_CLASSIFICATION	2.5917752556347943E-4	DEFECT
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998527437180782	WITHOUT_CLASSIFICATION	1.472562819217148E-4	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999173964841229	WITHOUT_CLASSIFICATION	8.260351587711923E-5	DEFECT
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999173964841229	WITHOUT_CLASSIFICATION	8.260351587711923E-5	DEFECT
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9997722866947076	WITHOUT_CLASSIFICATION	2.2771330529237297E-4	DEFECT
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999582728561436	WITHOUT_CLASSIFICATION	4.172714385639571E-5	DEFECT
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998739995996202	WITHOUT_CLASSIFICATION	1.2600040037975002E-4	DEFECT
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998745317425091	WITHOUT_CLASSIFICATION	1.254682574909358E-4	DEFECT
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998546491434287	WITHOUT_CLASSIFICATION	1.4535085657125792E-4	DEFECT
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998844713272469	WITHOUT_CLASSIFICATION	1.1552867275315568E-4	DEFECT
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999828760913511	WITHOUT_CLASSIFICATION	1.7123908648944076E-5	DEFECT
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999044294457415	WITHOUT_CLASSIFICATION	9.55705542584924E-5	DEFECT
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998910481036449	WITHOUT_CLASSIFICATION	1.0895189635511027E-4	DEFECT
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
Schema export:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9991975873912768	WITHOUT_CLASSIFICATION	8.02412608723247E-4	DEFECT
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997979446539881	WITHOUT_CLASSIFICATION	2.02055346011871E-4	DEFECT
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998160961442099	WITHOUT_CLASSIFICATION	1.8390385579011577E-4	DEFECT
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9979543388529919	WITHOUT_CLASSIFICATION	0.0020456611470080674	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.998939529256891	WITHOUT_CLASSIFICATION	0.0010604707431090055	DEFECT
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998912555058751	WITHOUT_CLASSIFICATION	1.0874449412494792E-4	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999765900787257	WITHOUT_CLASSIFICATION	2.3409921274320516E-5	DEFECT
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998368578774115	WITHOUT_CLASSIFICATION	1.6314212258850826E-4	DEFECT
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9998475820711445	WITHOUT_CLASSIFICATION	1.5241792885538807E-4	DEFECT
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999778119441701	WITHOUT_CLASSIFICATION	2.218805582991703E-5	DEFECT
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9991141091220744	WITHOUT_CLASSIFICATION	8.858908779255478E-4	DEFECT
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.998939529256891	WITHOUT_CLASSIFICATION	0.0010604707431090055	DEFECT
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998900663751866	WITHOUT_CLASSIFICATION	1.0993362481339391E-4	DEFECT
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.99981192089733	WITHOUT_CLASSIFICATION	1.8807910267000326E-4	DEFECT
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.99981192089733	WITHOUT_CLASSIFICATION	1.8807910267000326E-4	DEFECT
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9996471685404789	WITHOUT_CLASSIFICATION	3.528314595212117E-4	DEFECT
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999699859616996	WITHOUT_CLASSIFICATION	3.0014038300347093E-5	DEFECT
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999765900787257	WITHOUT_CLASSIFICATION	2.3409921274320516E-5	DEFECT
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9983321856265435	WITHOUT_CLASSIFICATION	0.0016678143734564714	DEFECT
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997049789493297	WITHOUT_CLASSIFICATION	2.950210506703453E-4	DEFECT
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999869431244637	WITHOUT_CLASSIFICATION	1.3056875536383765E-5	DEFECT
found	WITHOUT_CLASSIFICATION	0.9999869431244637	WITHOUT_CLASSIFICATION	1.3056875536383765E-5	DEFECT
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9996735994571911	WITHOUT_CLASSIFICATION	3.2640054280887697E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998097337667479	WITHOUT_CLASSIFICATION	1.90266233252094E-4	DEFECT
<String, String>	WITHOUT_CLASSIFICATION	0.9998097337667479	WITHOUT_CLASSIFICATION	1.90266233252094E-4	DEFECT
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9997408224744365	WITHOUT_CLASSIFICATION	2.5917752556347943E-4	DEFECT
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9981168299279306	WITHOUT_CLASSIFICATION	0.0018831700720693693	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9970209511048683	WITHOUT_CLASSIFICATION	0.0029790488951317554	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994410234343891	WITHOUT_CLASSIFICATION	5.58976565610896E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9970209511048683	WITHOUT_CLASSIFICATION	0.0029790488951317554	DEFECT
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994410234343891	WITHOUT_CLASSIFICATION	5.58976565610896E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999040840514316	WITHOUT_CLASSIFICATION	9.591594856849108E-5	DEFECT
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9997006725510938	WITHOUT_CLASSIFICATION	2.993274489061184E-4	DEFECT
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998736248948996	WITHOUT_CLASSIFICATION	1.2637510510044383E-4	DEFECT
the element has changed	WITHOUT_CLASSIFICATION	0.9999684038508029	WITHOUT_CLASSIFICATION	3.159614919710318E-5	DEFECT
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997033475224268	WITHOUT_CLASSIFICATION	2.9665247757310514E-4	DEFECT
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999158070020765	WITHOUT_CLASSIFICATION	8.41929979235604E-5	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997357503835619	WITHOUT_CLASSIFICATION	2.642496164381421E-4	DEFECT
override on some subclasses	WITHOUT_CLASSIFICATION	0.9997357503835619	WITHOUT_CLASSIFICATION	2.642496164381421E-4	DEFECT
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998264656917509	WITHOUT_CLASSIFICATION	1.735343082491465E-4	DEFECT
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999934772631005	WITHOUT_CLASSIFICATION	6.522736899486757E-6	DEFECT
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999175009794701	WITHOUT_CLASSIFICATION	8.249902052993284E-5	DEFECT
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.99974443601515	WITHOUT_CLASSIFICATION	2.5556398485005746E-4	DEFECT
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999769419903611	WITHOUT_CLASSIFICATION	2.305800963890733E-5	DEFECT
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9996416088150955	WITHOUT_CLASSIFICATION	3.5839118490456925E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9996416088150955	WITHOUT_CLASSIFICATION	3.5839118490456925E-4	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9981505212430882	WITHOUT_CLASSIFICATION	0.0018494787569117632	DEFECT
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9981505212430882	WITHOUT_CLASSIFICATION	0.0018494787569117632	DEFECT
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9964154085731863	WITHOUT_CLASSIFICATION	0.0035845914268136363	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999040840514316	WITHOUT_CLASSIFICATION	9.591594856849108E-5	DEFECT
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997754050844159	WITHOUT_CLASSIFICATION	2.2459491558416125E-4	DEFECT
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9987504832623689	WITHOUT_CLASSIFICATION	0.0012495167376310793	DEFECT
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9991798017000302	WITHOUT_CLASSIFICATION	8.201982999698153E-4	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994773194002963	WITHOUT_CLASSIFICATION	5.226805997038136E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.997321567627186	WITHOUT_CLASSIFICATION	0.0026784323728139487	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999040840514316	WITHOUT_CLASSIFICATION	9.591594856849108E-5	DEFECT
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9994773194002963	WITHOUT_CLASSIFICATION	5.226805997038136E-4	DEFECT
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.997321567627186	WITHOUT_CLASSIFICATION	0.0026784323728139487	DEFECT
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999396204290495	WITHOUT_CLASSIFICATION	6.0379570950494984E-5	DEFECT
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998284656752345	WITHOUT_CLASSIFICATION	1.7153432476550083E-4	DEFECT
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998831742216414	WITHOUT_CLASSIFICATION	1.1682577835860425E-4	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999040840514316	WITHOUT_CLASSIFICATION	9.591594856849108E-5	DEFECT
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999040840514316	WITHOUT_CLASSIFICATION	9.591594856849108E-5	DEFECT
from Map	WITHOUT_CLASSIFICATION	0.9999726846106489	WITHOUT_CLASSIFICATION	2.7315389351123704E-5	DEFECT
from SortedMap	WITHOUT_CLASSIFICATION	0.9997526377888818	WITHOUT_CLASSIFICATION	2.473622111182469E-4	DEFECT
inject the data	WITHOUT_CLASSIFICATION	0.9996541734454625	WITHOUT_CLASSIFICATION	3.458265545374762E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999859580739707	WITHOUT_CLASSIFICATION	1.40419260293014E-4	DEFECT
default pool size 20	WITHOUT_CLASSIFICATION	0.9999798032051747	WITHOUT_CLASSIFICATION	2.0196794825337804E-5	DEFECT
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999505979539547	WITHOUT_CLASSIFICATION	4.940204604531828E-5	DEFECT
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999359438396278	WITHOUT_CLASSIFICATION	6.405616037220126E-5	DEFECT
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998925314756979	WITHOUT_CLASSIFICATION	1.0746852430211215E-4	DEFECT
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9996038837481722	WITHOUT_CLASSIFICATION	3.9611625182780954E-4	DEFECT
then bind it	WITHOUT_CLASSIFICATION	0.9998381672598393	WITHOUT_CLASSIFICATION	1.6183274016058147E-4	DEFECT
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999669761710578	WITHOUT_CLASSIFICATION	3.302382894220548E-4	DEFECT
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998154019619033	WITHOUT_CLASSIFICATION	1.8459803809679526E-4	DEFECT
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999659140580746	WITHOUT_CLASSIFICATION	3.408594192552206E-5	DEFECT
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9998487891753265	WITHOUT_CLASSIFICATION	1.512108246734369E-4	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997667534046872	WITHOUT_CLASSIFICATION	2.3324659531271972E-4	DEFECT
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.998144706997357	WITHOUT_CLASSIFICATION	0.001855293002642948	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999859580739707	WITHOUT_CLASSIFICATION	1.40419260293014E-4	DEFECT
private String propertyName;	WITHOUT_CLASSIFICATION	0.9998647235314033	WITHOUT_CLASSIFICATION	1.3527646859658513E-4	DEFECT
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9998906647195355	WITHOUT_CLASSIFICATION	1.0933528046453759E-4	DEFECT
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9992444830481696	WITHOUT_CLASSIFICATION	7.555169518304838E-4	DEFECT
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999420285468194	WITHOUT_CLASSIFICATION	5.797145318053718E-5	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998110715820752	WITHOUT_CLASSIFICATION	1.889284179247939E-4	DEFECT
unsupported	WITHOUT_CLASSIFICATION	0.9998110715820752	WITHOUT_CLASSIFICATION	1.889284179247939E-4	DEFECT
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999859580739707	WITHOUT_CLASSIFICATION	1.40419260293014E-4	DEFECT
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9512833156700147	WITHOUT_CLASSIFICATION	0.04871668432998532	DEFECT
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999932516267984	WITHOUT_CLASSIFICATION	6.748373201504365E-6	DEFECT
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9943139242261375	WITHOUT_CLASSIFICATION	0.005686075773862375	DEFECT
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999294182280956	WITHOUT_CLASSIFICATION	7.058177190434316E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999282455395752	WITHOUT_CLASSIFICATION	7.175446042487825E-5	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9972107238397921	WITHOUT_CLASSIFICATION	0.002789276160207878	DEFECT
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999618768468325	WITHOUT_CLASSIFICATION	3.812315316759261E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9996091338366646	WITHOUT_CLASSIFICATION	3.908661633354059E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996937259278063	WITHOUT_CLASSIFICATION	3.0627407219371795E-4	DEFECT
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9971914259153386	WITHOUT_CLASSIFICATION	0.002808574084661489	DEFECT
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9998950099850976	WITHOUT_CLASSIFICATION	1.0499001490232372E-4	DEFECT
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999889475582042	WITHOUT_CLASSIFICATION	1.1052441795762256E-5	DEFECT
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996448340144171	WITHOUT_CLASSIFICATION	3.551659855829658E-4	DEFECT
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994241519000395	WITHOUT_CLASSIFICATION	5.758480999605375E-4	DEFECT
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9991294780671711	WITHOUT_CLASSIFICATION	8.705219328288078E-4	DEFECT
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998704838075454	WITHOUT_CLASSIFICATION	1.2951619245470092E-4	DEFECT
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999169298012686	WITHOUT_CLASSIFICATION	8.307019873152787E-5	DEFECT
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9997404745059318	WITHOUT_CLASSIFICATION	2.595254940681124E-4	DEFECT
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9990645561566236	WITHOUT_CLASSIFICATION	9.35443843376403E-4	DEFECT
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999515898871603	WITHOUT_CLASSIFICATION	4.8410112839809964E-5	DEFECT
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996379571403217	WITHOUT_CLASSIFICATION	3.6204285967828844E-4	DEFECT
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996379571403217	WITHOUT_CLASSIFICATION	3.6204285967828844E-4	DEFECT
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997297618455215	WITHOUT_CLASSIFICATION	2.702381544784265E-4	DEFECT
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998249536344781	WITHOUT_CLASSIFICATION	1.7504636552180726E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
by default we report no support	WITHOUT_CLASSIFICATION	0.9999929893990962	WITHOUT_CLASSIFICATION	7.010600903751899E-6	DEFECT
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999912591380639	WITHOUT_CLASSIFICATION	8.740861936063213E-6	DEFECT
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998800032136006	WITHOUT_CLASSIFICATION	1.1999678639930124E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999263491060442	WITHOUT_CLASSIFICATION	7.365089395585768E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995580600734097	WITHOUT_CLASSIFICATION	4.419399265902053E-4	DEFECT
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99990828137968	WITHOUT_CLASSIFICATION	9.171862031997149E-5	DEFECT
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996928772812896	WITHOUT_CLASSIFICATION	3.0712271871029376E-4	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9997290165722763	WITHOUT_CLASSIFICATION	2.709834277237636E-4	DEFECT
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998620628996305	WITHOUT_CLASSIFICATION	1.379371003694007E-4	DEFECT
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997560457603468	WITHOUT_CLASSIFICATION	2.439542396532454E-4	DEFECT
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999786012185816	WITHOUT_CLASSIFICATION	2.1398781418391745E-5	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998887853037481	WITHOUT_CLASSIFICATION	1.1121469625187738E-4	DEFECT
" cascade";	WITHOUT_CLASSIFICATION	0.999838983619383	WITHOUT_CLASSIFICATION	1.6101638061716896E-4	DEFECT
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9998049961690534	WITHOUT_CLASSIFICATION	1.9500383094659535E-4	DEFECT
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999909638376409	WITHOUT_CLASSIFICATION	9.036162359126451E-6	DEFECT
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998740778502796	WITHOUT_CLASSIFICATION	1.2592214972040265E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998470182839853	WITHOUT_CLASSIFICATION	1.529817160148504E-4	DEFECT
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999756341962642	WITHOUT_CLASSIFICATION	2.436580373570276E-5	DEFECT
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998657706207241	WITHOUT_CLASSIFICATION	1.3422937927584218E-4	DEFECT
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9996287155895706	WITHOUT_CLASSIFICATION	3.712844104294194E-4	DEFECT
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.99794825147528	WITHOUT_CLASSIFICATION	0.0020517485247199293	DEFECT
HHH-2300	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.998709041418953	WITHOUT_CLASSIFICATION	0.0012909585810469777	DEFECT
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999855041546473	WITHOUT_CLASSIFICATION	1.4495845352704937E-4	DEFECT
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997891141384188	WITHOUT_CLASSIFICATION	2.1088586158123315E-4	DEFECT
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997751391337296	WITHOUT_CLASSIFICATION	2.248608662703254E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9931718197655443	WITHOUT_CLASSIFICATION	0.006828180234455779	DEFECT
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999479419878479	WITHOUT_CLASSIFICATION	5.205801215225826E-5	DEFECT
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999082010900918	WITHOUT_CLASSIFICATION	9.17989099081545E-5	DEFECT
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9924464588062868	WITHOUT_CLASSIFICATION	0.007553541193713214	DEFECT
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999239270232264	WITHOUT_CLASSIFICATION	7.607297677367018E-5	DEFECT
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996873334641446	WITHOUT_CLASSIFICATION	3.1266653585531955E-4	DEFECT
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999211240983106	WITHOUT_CLASSIFICATION	7.88759016893233E-5	DEFECT
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9997849463397764	WITHOUT_CLASSIFICATION	2.1505366022349687E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999113376469124	WITHOUT_CLASSIFICATION	8.866235308759083E-5	DEFECT
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999485134208325	WITHOUT_CLASSIFICATION	5.148657916751035E-4	DEFECT
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9991671792909093	WITHOUT_CLASSIFICATION	8.328207090907876E-4	DEFECT
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9990749330532431	WITHOUT_CLASSIFICATION	9.250669467567261E-4	DEFECT
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999168518054617	WITHOUT_CLASSIFICATION	8.314819453826261E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998887853037481	WITHOUT_CLASSIFICATION	1.1121469625187738E-4	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998022508422425	WITHOUT_CLASSIFICATION	1.9774915775757E-4	DEFECT
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9998317901121081	WITHOUT_CLASSIFICATION	1.6820988789180563E-4	DEFECT
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9998245061676224	WITHOUT_CLASSIFICATION	1.7549383237764512E-4	DEFECT
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997560457603468	WITHOUT_CLASSIFICATION	2.439542396532454E-4	DEFECT
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
function templates	WITHOUT_CLASSIFICATION	0.99977527733594	WITHOUT_CLASSIFICATION	2.2472266405997542E-4	DEFECT
not null is implicit	WITHOUT_CLASSIFICATION	0.9931718197655443	WITHOUT_CLASSIFICATION	0.006828180234455779	DEFECT
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9996909806483144	WITHOUT_CLASSIFICATION	3.09019351685561E-4	DEFECT
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9993609089589686	WITHOUT_CLASSIFICATION	6.39091041031443E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996840974634171	WITHOUT_CLASSIFICATION	3.1590253658286496E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997631882120953	WITHOUT_CLASSIFICATION	2.368117879046053E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999260491054291	WITHOUT_CLASSIFICATION	7.395089457086574E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988330859152437	WITHOUT_CLASSIFICATION	0.0011669140847563352	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999494167838315	WITHOUT_CLASSIFICATION	5.058321616841829E-5	DEFECT
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9989857005186475	WITHOUT_CLASSIFICATION	0.001014299481352454	DEFECT
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999544612086864	WITHOUT_CLASSIFICATION	4.55387913136311E-5	DEFECT
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999303043352595	WITHOUT_CLASSIFICATION	6.969566474052725E-5	DEFECT
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997560457603468	WITHOUT_CLASSIFICATION	2.439542396532454E-4	DEFECT
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9998071963310593	WITHOUT_CLASSIFICATION	1.928036689407095E-4	DEFECT
add new ordered map	WITHOUT_CLASSIFICATION	0.9992567724104132	WITHOUT_CLASSIFICATION	7.432275895868488E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9987615517056013	WITHOUT_CLASSIFICATION	0.001238448294398634	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999503615895426	WITHOUT_CLASSIFICATION	4.963841045732966E-5	DEFECT
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9998938950715734	WITHOUT_CLASSIFICATION	1.061049284266154E-4	DEFECT
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997192581016636	WITHOUT_CLASSIFICATION	2.807418983364411E-4	DEFECT
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.998643717487109	WITHOUT_CLASSIFICATION	0.001356282512890995	DEFECT
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9997435064793959	WITHOUT_CLASSIFICATION	2.564935206040489E-4	DEFECT
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997714169011341	WITHOUT_CLASSIFICATION	2.2858309886596192E-4	DEFECT
No batch statements	WITHOUT_CLASSIFICATION	0.9998769868990853	WITHOUT_CLASSIFICATION	1.2301310091464106E-4	DEFECT
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6384905855043616	WITHOUT_CLASSIFICATION	0.36150941449563834	DEFECT
no pointbase BIT	WITHOUT_CLASSIFICATION	0.999949738507523	WITHOUT_CLASSIFICATION	5.0261492476954696E-5	DEFECT
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999949738507523	WITHOUT_CLASSIFICATION	5.0261492476954696E-5	DEFECT
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997560457603468	WITHOUT_CLASSIFICATION	2.439542396532454E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998887853037481	WITHOUT_CLASSIFICATION	1.1121469625187738E-4	DEFECT
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9509470520240798	WITHOUT_CLASSIFICATION	0.04905294797592018	DEFECT
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.999716182829546	WITHOUT_CLASSIFICATION	2.838171704540184E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.8787124684477838	WITHOUT_CLASSIFICATION	0.12128753155221612	DEFECT
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999303045019094	WITHOUT_CLASSIFICATION	6.969549809059232E-4	DEFECT
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999303045019094	WITHOUT_CLASSIFICATION	6.969549809059232E-4	DEFECT
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999303045019094	WITHOUT_CLASSIFICATION	6.969549809059232E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998887853037481	WITHOUT_CLASSIFICATION	1.1121469625187738E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999813828482176	WITHOUT_CLASSIFICATION	1.8617151782391843E-4	DEFECT
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999503615895426	WITHOUT_CLASSIFICATION	4.963841045732966E-5	DEFECT
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9938632572658301	WITHOUT_CLASSIFICATION	0.0061367427341699095	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9987615517056013	WITHOUT_CLASSIFICATION	0.001238448294398634	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9935988656627541	WITHOUT_CLASSIFICATION	0.006401134337245907	DEFECT
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9811375511097822	WITHOUT_CLASSIFICATION	0.018862448890217886	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993383550969638	WITHOUT_CLASSIFICATION	6.616449030363228E-4	DEFECT
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9996840974634171	WITHOUT_CLASSIFICATION	3.1590253658286496E-4	DEFECT
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9997631882120953	WITHOUT_CLASSIFICATION	2.368117879046053E-4	DEFECT
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999520184902257	WITHOUT_CLASSIFICATION	4.798150977419842E-5	DEFECT
add the main query	WITHOUT_CLASSIFICATION	0.9998328067076245	WITHOUT_CLASSIFICATION	1.671932923754857E-4	DEFECT
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9994717478131627	WITHOUT_CLASSIFICATION	5.282521868372618E-4	DEFECT
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9987615517056013	WITHOUT_CLASSIFICATION	0.001238448294398634	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9935988656627541	WITHOUT_CLASSIFICATION	0.006401134337245907	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998887853037481	WITHOUT_CLASSIFICATION	1.1121469625187738E-4	DEFECT
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999260491054291	WITHOUT_CLASSIFICATION	7.395089457086574E-5	DEFECT
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9988330859152437	WITHOUT_CLASSIFICATION	0.0011669140847563352	DEFECT
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999494167838315	WITHOUT_CLASSIFICATION	5.058321616841829E-5	DEFECT
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745618540546	WITHOUT_CLASSIFICATION	2.543814594541684E-5	DEFECT
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998268362824264	WITHOUT_CLASSIFICATION	1.7316371757349587E-4	DEFECT
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9998825911995094	WITHOUT_CLASSIFICATION	1.174088004906121E-4	DEFECT
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9997397238995556	WITHOUT_CLASSIFICATION	2.602761004444438E-4	DEFECT
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9936505147726747	WITHOUT_CLASSIFICATION	0.006349485227325164	DEFECT
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9980082644944857	WITHOUT_CLASSIFICATION	0.0019917355055143852	DEFECT
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.999801184169898	WITHOUT_CLASSIFICATION	1.9881583010181105E-4	DEFECT
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9998170369004646	WITHOUT_CLASSIFICATION	1.8296309953541186E-4	DEFECT
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9998974849277461	WITHOUT_CLASSIFICATION	1.0251507225393111E-4	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999263491060442	WITHOUT_CLASSIFICATION	7.365089395585768E-5	DEFECT
identifier-commalist	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999371230873443	WITHOUT_CLASSIFICATION	6.287691265580871E-5	DEFECT
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9998519002470604	WITHOUT_CLASSIFICATION	1.4809975293963038E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998261113915337	WITHOUT_CLASSIFICATION	1.7388860846627186E-4	DEFECT
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9502218583529648	WITHOUT_CLASSIFICATION	0.04977814164703532	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
<String>	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995580600734097	WITHOUT_CLASSIFICATION	4.419399265902053E-4	DEFECT
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999691508902921	WITHOUT_CLASSIFICATION	3.084910970789881E-4	DEFECT
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999113376469124	WITHOUT_CLASSIFICATION	8.866235308759083E-5	DEFECT
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9977998521917403	WITHOUT_CLASSIFICATION	0.0022001478082596926	DEFECT
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9995274390800314	WITHOUT_CLASSIFICATION	4.7256091996855805E-4	DEFECT
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9994023206144602	WITHOUT_CLASSIFICATION	5.976793855397074E-4	DEFECT
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9998459513571359	WITHOUT_CLASSIFICATION	1.5404864286410296E-4	DEFECT
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999649263127748	WITHOUT_CLASSIFICATION	3.5073687225233305E-5	DEFECT
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999619612927958	WITHOUT_CLASSIFICATION	3.803870720419486E-4	DEFECT
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998649799196901	WITHOUT_CLASSIFICATION	1.3502008030988268E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999618768468325	WITHOUT_CLASSIFICATION	3.812315316759261E-5	DEFECT
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9998524728047924	WITHOUT_CLASSIFICATION	1.475271952075472E-4	DEFECT
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9995734832260825	WITHOUT_CLASSIFICATION	4.2651677391757786E-4	DEFECT
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9997975363091869	WITHOUT_CLASSIFICATION	2.0246369081312472E-4	DEFECT
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998466552890147	WITHOUT_CLASSIFICATION	1.533447109853056E-4	DEFECT
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998687214204749	WITHOUT_CLASSIFICATION	1.3127857952517337E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999166250077067	WITHOUT_CLASSIFICATION	8.33749922933504E-5	DEFECT
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998163174583813	WITHOUT_CLASSIFICATION	1.8368254161878664E-4	DEFECT
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997397242572327	WITHOUT_CLASSIFICATION	2.602757427673242E-4	DEFECT
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9989961743052111	WITHOUT_CLASSIFICATION	0.0010038256947888648	DEFECT
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9987429194822419	WITHOUT_CLASSIFICATION	0.001257080517758064	DEFECT
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9995581264873409	WITHOUT_CLASSIFICATION	4.4187351265918313E-4	DEFECT
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9986397380870333	WITHOUT_CLASSIFICATION	0.0013602619129666979	DEFECT
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9936775467562854	WITHOUT_CLASSIFICATION	0.006322453243714651	DEFECT
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997811022002162	WITHOUT_CLASSIFICATION	0.002188977997838033	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9983689475669961	WITHOUT_CLASSIFICATION	0.0016310524330038815	DEFECT
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9984721223860727	WITHOUT_CLASSIFICATION	0.0015278776139272738	DEFECT
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9997904002871485	WITHOUT_CLASSIFICATION	2.0959971285153863E-4	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997811022002162	WITHOUT_CLASSIFICATION	0.002188977997838033	DEFECT
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9997548715730462	WITHOUT_CLASSIFICATION	2.451284269537334E-4	DEFECT
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9987798660717347	WITHOUT_CLASSIFICATION	0.0012201339282652535	DEFECT
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999218509941968	WITHOUT_CLASSIFICATION	7.81490058031643E-5	DEFECT
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999837830134703	WITHOUT_CLASSIFICATION	1.6216986529701713E-4	DEFECT
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9934135855081129	WITHOUT_CLASSIFICATION	0.006586414491887194	DEFECT
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999306953201561	WITHOUT_CLASSIFICATION	6.930467984396334E-5	DEFECT
continue loop	WITHOUT_CLASSIFICATION	0.9998299635630988	WITHOUT_CLASSIFICATION	1.7003643690120747E-4	DEFECT
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999409684844679	WITHOUT_CLASSIFICATION	5.903151553213058E-5	DEFECT
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999409684844679	WITHOUT_CLASSIFICATION	5.903151553213058E-5	DEFECT
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999302362851861	WITHOUT_CLASSIFICATION	6.97637148139456E-5	DEFECT
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9996394482686333	WITHOUT_CLASSIFICATION	3.605517313667E-4	DEFECT
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998021118946977	WITHOUT_CLASSIFICATION	1.9788810530232801E-4	DEFECT
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9997817696008267	WITHOUT_CLASSIFICATION	2.182303991733638E-4	DEFECT
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9983869040834967	WITHOUT_CLASSIFICATION	0.0016130959165031986	DEFECT
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999413037746688	WITHOUT_CLASSIFICATION	5.869622533116368E-5	DEFECT
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999647263397821	WITHOUT_CLASSIFICATION	3.5273660218062904E-5	DEFECT
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999261620773523	WITHOUT_CLASSIFICATION	7.38379226477856E-5	DEFECT
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997489881237233	WITHOUT_CLASSIFICATION	2.5101187627670515E-4	DEFECT
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999967050075139	WITHOUT_CLASSIFICATION	3.294992486032237E-6	DEFECT
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999534499186279	WITHOUT_CLASSIFICATION	4.6550081372013037E-5	DEFECT
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998775218890368	WITHOUT_CLASSIFICATION	1.2247811096318612E-4	DEFECT
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999841223098259	WITHOUT_CLASSIFICATION	1.5877690174005414E-5	DEFECT
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9976339077527357	WITHOUT_CLASSIFICATION	0.002366092247264139	DEFECT
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999425704491902	WITHOUT_CLASSIFICATION	5.742955080972285E-5	DEFECT
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9981522052616202	WITHOUT_CLASSIFICATION	0.0018477947383797465	DEFECT
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9993949481620338	WITHOUT_CLASSIFICATION	6.050518379660868E-4	DEFECT
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9983583039413528	WITHOUT_CLASSIFICATION	0.0016416960586472446	DEFECT
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999569050777418	WITHOUT_CLASSIFICATION	4.309492225808166E-5	DEFECT
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9998025027347149	WITHOUT_CLASSIFICATION	1.9749726528500627E-4	DEFECT
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9998554411098006	WITHOUT_CLASSIFICATION	1.4455889019940294E-4	DEFECT
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999008710312669	WITHOUT_CLASSIFICATION	9.912896873308753E-5	DEFECT
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9998842078789946	WITHOUT_CLASSIFICATION	1.1579212100540302E-4	DEFECT
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999077787563732	WITHOUT_CLASSIFICATION	9.22212436269131E-5	DEFECT
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998506350218032	WITHOUT_CLASSIFICATION	1.4936497819690748E-4	DEFECT
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9987206411813657	WITHOUT_CLASSIFICATION	0.0012793588186342944	DEFECT
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9957190692052112	WITHOUT_CLASSIFICATION	0.00428093079478873	DEFECT
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9997159773129903	WITHOUT_CLASSIFICATION	2.840226870095761E-4	DEFECT
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9852947150098359	WITHOUT_CLASSIFICATION	0.014705284990164038	DEFECT
Downgrade locks	WITHOUT_CLASSIFICATION	0.9979263545190556	WITHOUT_CLASSIFICATION	0.0020736454809443137	DEFECT
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998893586004053	WITHOUT_CLASSIFICATION	1.1064139959477707E-4	DEFECT
unwrap the object	WITHOUT_CLASSIFICATION	0.999916481239425	WITHOUT_CLASSIFICATION	8.351876057500094E-5	DEFECT
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999594709550573	WITHOUT_CLASSIFICATION	4.0529044942689894E-5	DEFECT
return the proxied object	WITHOUT_CLASSIFICATION	0.9999810231739414	WITHOUT_CLASSIFICATION	1.89768260585569E-5	DEFECT
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999467298622865	WITHOUT_CLASSIFICATION	5.327013771349046E-5	DEFECT
early exit...	WITHOUT_CLASSIFICATION	0.9998053163970246	WITHOUT_CLASSIFICATION	1.9468360297541848E-4	DEFECT
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9955138193006041	WITHOUT_CLASSIFICATION	0.004486180699395891	DEFECT
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999687849418817	WITHOUT_CLASSIFICATION	3.1215058118309304E-5	DEFECT
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9265599408812969	WITHOUT_CLASSIFICATION	0.07344005911870319	DEFECT
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999948492375477	WITHOUT_CLASSIFICATION	5.1507624523064306E-5	DEFECT
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999027171395114	WITHOUT_CLASSIFICATION	9.728286048857455E-5	DEFECT
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999303043352595	WITHOUT_CLASSIFICATION	6.969566474052725E-5	DEFECT
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999303043352595	WITHOUT_CLASSIFICATION	6.969566474052725E-5	DEFECT
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997588037179657	WITHOUT_CLASSIFICATION	2.4119628203422605E-4	DEFECT
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997202845183836	WITHOUT_CLASSIFICATION	2.7971548161641996E-4	DEFECT
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999318313965472	WITHOUT_CLASSIFICATION	6.81686034527283E-5	DEFECT
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999675205660388	WITHOUT_CLASSIFICATION	3.247943396113613E-5	DEFECT
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997550438126627	WITHOUT_CLASSIFICATION	2.4495618733726094E-4	DEFECT
bad cast	WITHOUT_CLASSIFICATION	0.9998482902517027	WITHOUT_CLASSIFICATION	1.5170974829718207E-4	DEFECT
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999180894180989	WITHOUT_CLASSIFICATION	8.191058190111962E-5	DEFECT
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999711437271074	WITHOUT_CLASSIFICATION	2.885627289253415E-5	DEFECT
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999837203694634	WITHOUT_CLASSIFICATION	1.6279630536655252E-5	DEFECT
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999547090957873	WITHOUT_CLASSIFICATION	4.5290904212724E-5	DEFECT
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998739747616515	WITHOUT_CLASSIFICATION	1.2602523834851387E-4	DEFECT
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999719997593052	WITHOUT_CLASSIFICATION	2.80002406948119E-5	DEFECT
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997525033687986	WITHOUT_CLASSIFICATION	2.4749663120141605E-4	DEFECT
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999249768685516	WITHOUT_CLASSIFICATION	7.502313144837321E-5	DEFECT
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998686081199303	WITHOUT_CLASSIFICATION	1.3139188006963304E-4	DEFECT
take a snapshot	WITHOUT_CLASSIFICATION	0.9996551321597476	WITHOUT_CLASSIFICATION	3.448678402525341E-4	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999993855707563	WITHOUT_CLASSIFICATION	6.144292436855342E-6	DEFECT
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9996193001758732	WITHOUT_CLASSIFICATION	3.8069982412677325E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.998580629805362	WITHOUT_CLASSIFICATION	0.0014193701946379816	DEFECT
We've been here before	WITHOUT_CLASSIFICATION	0.9997598604223628	WITHOUT_CLASSIFICATION	2.4013957763719418E-4	DEFECT
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9997205022811789	WITHOUT_CLASSIFICATION	2.7949771882104904E-4	DEFECT
do the work	WITHOUT_CLASSIFICATION	0.998580629805362	WITHOUT_CLASSIFICATION	0.0014193701946379816	DEFECT
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999041054530969	WITHOUT_CLASSIFICATION	9.5894546903103E-5	DEFECT
or its key changed	WITHOUT_CLASSIFICATION	0.999952898729299	WITHOUT_CLASSIFICATION	4.710127070091886E-5	DEFECT
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998181383275696	WITHOUT_CLASSIFICATION	1.8186167243033885E-4	DEFECT
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9986371744987371	WITHOUT_CLASSIFICATION	0.0013628255012629314	DEFECT
force initialize!	WITHOUT_CLASSIFICATION	0.9998460116750791	WITHOUT_CLASSIFICATION	1.5398832492086292E-4	DEFECT
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999736590679658	WITHOUT_CLASSIFICATION	2.634093203421365E-5	DEFECT
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9998926654817378	WITHOUT_CLASSIFICATION	1.073345182622401E-4	DEFECT
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9995163548099684	WITHOUT_CLASSIFICATION	4.8364519003169475E-4	DEFECT
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997522848257153	WITHOUT_CLASSIFICATION	2.4771517428463595E-4	DEFECT
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9998291744575657	WITHOUT_CLASSIFICATION	1.7082554243426487E-4	DEFECT
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999769226046824	WITHOUT_CLASSIFICATION	2.3077395317626395E-5	DEFECT
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999236466753659	WITHOUT_CLASSIFICATION	7.635332463402393E-5	DEFECT
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998993258136762	WITHOUT_CLASSIFICATION	1.0067418632380021E-4	DEFECT
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996052931066324	WITHOUT_CLASSIFICATION	3.947068933676553E-4	DEFECT
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999932899996723	WITHOUT_CLASSIFICATION	6.71000032769958E-5	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9993292629763489	WITHOUT_CLASSIFICATION	6.707370236509973E-4	DEFECT
optimization	WITHOUT_CLASSIFICATION	0.9998514062168377	WITHOUT_CLASSIFICATION	1.4859378316231089E-4	DEFECT
optimization optimization	WITHOUT_CLASSIFICATION	0.9999018087802996	WITHOUT_CLASSIFICATION	9.819121970039946E-5	DEFECT
re-snapshot	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9993529323551821	WITHOUT_CLASSIFICATION	6.470676448178853E-4	DEFECT
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9921126113971859	WITHOUT_CLASSIFICATION	0.007887388602814044	DEFECT
memory optimization	WITHOUT_CLASSIFICATION	0.9987040025166296	WITHOUT_CLASSIFICATION	0.0012959974833704631	DEFECT
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999559779550742	WITHOUT_CLASSIFICATION	4.402204492584317E-5	DEFECT
copied from Session:	WITHOUT_CLASSIFICATION	0.9998026299029164	WITHOUT_CLASSIFICATION	1.9737009708359855E-4	DEFECT
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9964769811644031	WITHOUT_CLASSIFICATION	0.0035230188355969347	DEFECT
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9995252115906678	WITHOUT_CLASSIFICATION	4.747884093323225E-4	DEFECT
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999998196020258	WITHOUT_CLASSIFICATION	1.8039797411347394E-7	DEFECT
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999317759898985	WITHOUT_CLASSIFICATION	6.822401010157568E-5	DEFECT
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9991297049123437	WITHOUT_CLASSIFICATION	8.702950876563589E-4	DEFECT
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998986713554332	WITHOUT_CLASSIFICATION	1.0132864456680433E-4	DEFECT
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999166250077067	WITHOUT_CLASSIFICATION	8.33749922933504E-5	DEFECT
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9984703333175349	WITHOUT_CLASSIFICATION	0.0015296666824651125	DEFECT
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999303732806801	WITHOUT_CLASSIFICATION	6.962671931988167E-5	DEFECT
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999027737295294	WITHOUT_CLASSIFICATION	9.722627047064602E-5	DEFECT
do the test	WITHOUT_CLASSIFICATION	0.9999171986845102	WITHOUT_CLASSIFICATION	8.280131548977976E-5	DEFECT
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.999519749435972	WITHOUT_CLASSIFICATION	4.802505640279755E-4	DEFECT
unwrap it	WITHOUT_CLASSIFICATION	0.9999651736965735	WITHOUT_CLASSIFICATION	3.4826303426565715E-5	DEFECT
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9966745155461945	WITHOUT_CLASSIFICATION	0.003325484453805557	DEFECT
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999700115420995	WITHOUT_CLASSIFICATION	2.9988457900406267E-5	DEFECT
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998768453126359	WITHOUT_CLASSIFICATION	1.2315468736415826E-4	DEFECT
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9998787824579993	WITHOUT_CLASSIFICATION	1.2121754200057291E-4	DEFECT
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999159540279962	WITHOUT_CLASSIFICATION	8.40459720037917E-5	DEFECT
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999031317716847	WITHOUT_CLASSIFICATION	9.686822831534037E-5	DEFECT
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9974390955597103	WITHOUT_CLASSIFICATION	0.002560904440289647	DEFECT
int count = 0;	WITHOUT_CLASSIFICATION	0.9997598592599002	WITHOUT_CLASSIFICATION	2.4014074009972815E-4	DEFECT
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999921822862122	WITHOUT_CLASSIFICATION	7.817713787757436E-6	DEFECT
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998311369775406	WITHOUT_CLASSIFICATION	1.6886302245938336E-4	DEFECT
count++;	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998661159621495	WITHOUT_CLASSIFICATION	1.3388403785061695E-4	DEFECT
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999775031326565	WITHOUT_CLASSIFICATION	2.2496867343485343E-5	DEFECT
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999902469366528	WITHOUT_CLASSIFICATION	9.753063347284036E-6	DEFECT
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999891034036665	WITHOUT_CLASSIFICATION	1.0896596333540249E-5	DEFECT
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999773629025211	WITHOUT_CLASSIFICATION	2.2637097478844048E-5	DEFECT
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999265165606537	WITHOUT_CLASSIFICATION	7.348343934630314E-5	DEFECT
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9997185680580801	WITHOUT_CLASSIFICATION	2.814319419198621E-4	DEFECT
initialize this collection	WITHOUT_CLASSIFICATION	0.9998168940074694	WITHOUT_CLASSIFICATION	1.8310599253052264E-4	DEFECT
create one	WITHOUT_CLASSIFICATION	0.9999886401811847	WITHOUT_CLASSIFICATION	1.1359818815245195E-5	DEFECT
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9992426151125495	WITHOUT_CLASSIFICATION	7.573848874504628E-4	DEFECT
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999610423250849	WITHOUT_CLASSIFICATION	3.895767491520878E-5	DEFECT
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9940498640095475	WITHOUT_CLASSIFICATION	0.005950135990452418	DEFECT
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9996243416337275	WITHOUT_CLASSIFICATION	3.756583662724404E-4	DEFECT
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997329660433262	WITHOUT_CLASSIFICATION	2.670339566738301E-4	DEFECT
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997612527794433	WITHOUT_CLASSIFICATION	2.3874722055681872E-4	DEFECT
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998063110911906	WITHOUT_CLASSIFICATION	1.9368890880947152E-4	DEFECT
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9991390168755409	WITHOUT_CLASSIFICATION	8.609831244590657E-4	DEFECT
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999902871558905	WITHOUT_CLASSIFICATION	9.712844109501531E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999500499498989	WITHOUT_CLASSIFICATION	4.995005010102312E-5	DEFECT
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.998446975913483	WITHOUT_CLASSIFICATION	0.0015530240865170568	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9990222462185343	WITHOUT_CLASSIFICATION	9.777537814656938E-4	DEFECT
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997294127279668	WITHOUT_CLASSIFICATION	2.7058727203324573E-4	DEFECT
don't care...	WITHOUT_CLASSIFICATION	0.9990222462185343	WITHOUT_CLASSIFICATION	9.777537814656938E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995567965932449	WITHOUT_CLASSIFICATION	4.432034067550707E-4	DEFECT
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999910631268064	WITHOUT_CLASSIFICATION	8.936873193592546E-5	DEFECT
named parameter	WITHOUT_CLASSIFICATION	0.9998760695514	WITHOUT_CLASSIFICATION	1.2393044860007976E-4	DEFECT
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999975231207738	WITHOUT_CLASSIFICATION	2.476879226206518E-5	DEFECT
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.99991133236989	WITHOUT_CLASSIFICATION	8.866763010992075E-5	DEFECT
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997834787275882	WITHOUT_CLASSIFICATION	2.1652127241172695E-4	DEFECT
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999063037944625	WITHOUT_CLASSIFICATION	9.369620553740579E-5	DEFECT
perform the actual work	WITHOUT_CLASSIFICATION	0.9987621537618793	WITHOUT_CLASSIFICATION	0.0012378462381206993	DEFECT
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999728738916187	WITHOUT_CLASSIFICATION	2.7126108381193137E-5	DEFECT
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999820152185837	WITHOUT_CLASSIFICATION	1.7984781416386258E-5	DEFECT
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999018773345478	WITHOUT_CLASSIFICATION	9.812266545218131E-5	DEFECT
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9997038460538307	WITHOUT_CLASSIFICATION	2.9615394616926025E-4	DEFECT
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996717290706434	WITHOUT_CLASSIFICATION	3.2827092935657545E-4	DEFECT
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.6756686259092333	WITHOUT_CLASSIFICATION	0.32433137409076673	DEFECT
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999923444562834	WITHOUT_CLASSIFICATION	7.655543716689448E-6	DEFECT
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9993063278832617	WITHOUT_CLASSIFICATION	6.936721167382969E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999993540001114	WITHOUT_CLASSIFICATION	6.459998886119648E-6	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999993540001114	WITHOUT_CLASSIFICATION	6.459998886119648E-6	DEFECT
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998841173357975	WITHOUT_CLASSIFICATION	1.1588266420240901E-4	DEFECT
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9995283177240617	WITHOUT_CLASSIFICATION	4.7168227593829393E-4	DEFECT
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.999978110612773	WITHOUT_CLASSIFICATION	2.1889387227054332E-5	DEFECT
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9995950678488063	WITHOUT_CLASSIFICATION	4.04932151193709E-4	DEFECT
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9994409477681376	WITHOUT_CLASSIFICATION	5.590522318622768E-4	DEFECT
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9996846602678168	WITHOUT_CLASSIFICATION	3.1533973218316456E-4	DEFECT
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9599533145018075	WITHOUT_CLASSIFICATION	0.04004668549819233	DEFECT
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999254554552794	WITHOUT_CLASSIFICATION	7.45445447205731E-5	DEFECT
grab its current state	WITHOUT_CLASSIFICATION	0.9999836914226956	WITHOUT_CLASSIFICATION	1.630857730442239E-5	DEFECT
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.99992225689574	WITHOUT_CLASSIFICATION	7.774310426004021E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996887937070005	WITHOUT_CLASSIFICATION	3.1120629299948873E-4	DEFECT
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999354473960127	WITHOUT_CLASSIFICATION	6.455260398723085E-5	DEFECT
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998191000319536	WITHOUT_CLASSIFICATION	1.808999680463833E-4	DEFECT
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9995770160738888	WITHOUT_CLASSIFICATION	4.2298392611116154E-4	DEFECT
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9992268915859097	WITHOUT_CLASSIFICATION	7.731084140901914E-4	DEFECT
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9997612300276781	WITHOUT_CLASSIFICATION	2.387699723219324E-4	DEFECT
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998097943555827	WITHOUT_CLASSIFICATION	1.9020564441728284E-4	DEFECT
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9995560168644548	WITHOUT_CLASSIFICATION	4.4398313554512364E-4	DEFECT
use the current version	WITHOUT_CLASSIFICATION	0.9999292997449301	WITHOUT_CLASSIFICATION	7.070025506991762E-5	DEFECT
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9997803621279543	WITHOUT_CLASSIFICATION	2.19637872045632E-4	DEFECT
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999704186572704	WITHOUT_CLASSIFICATION	2.9581342729562036E-5	DEFECT
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999288288245226	WITHOUT_CLASSIFICATION	7.117117547749202E-5	DEFECT
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999349298699248	WITHOUT_CLASSIFICATION	6.507013007519993E-5	DEFECT
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999592041568768	WITHOUT_CLASSIFICATION	4.079584312326801E-5	DEFECT
even process null collections	WITHOUT_CLASSIFICATION	0.9999048510708626	WITHOUT_CLASSIFICATION	9.514892913742298E-5	DEFECT
get the id from the object	WITHOUT_CLASSIFICATION	0.9999638426513628	WITHOUT_CLASSIFICATION	3.615734863714776E-5	DEFECT
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9998506561893884	WITHOUT_CLASSIFICATION	1.4934381061168728E-4	DEFECT
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9984681568762612	WITHOUT_CLASSIFICATION	0.0015318431237387154	DEFECT
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999774901328234	WITHOUT_CLASSIFICATION	2.2509867176594507E-5	DEFECT
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996114975046427	WITHOUT_CLASSIFICATION	3.885024953572933E-4	DEFECT
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999029648244371	WITHOUT_CLASSIFICATION	9.703517556288448E-5	DEFECT
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999930664684143	WITHOUT_CLASSIFICATION	6.933531585684916E-6	DEFECT
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9962960063402706	WITHOUT_CLASSIFICATION	0.003703993659729372	DEFECT
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998171029530101	WITHOUT_CLASSIFICATION	1.828970469899679E-4	DEFECT
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999741577534259	WITHOUT_CLASSIFICATION	2.5842246574111573E-5	DEFECT
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999845883477553	WITHOUT_CLASSIFICATION	1.5411652244758385E-5	DEFECT
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999824455107359	WITHOUT_CLASSIFICATION	1.7554489264134596E-5	DEFECT
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999797246951517	WITHOUT_CLASSIFICATION	2.027530484828315E-5	DEFECT
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999223093575302	WITHOUT_CLASSIFICATION	7.769064246980202E-5	DEFECT
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9973113740029688	WITHOUT_CLASSIFICATION	0.002688625997031213	DEFECT
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999825899333563	WITHOUT_CLASSIFICATION	1.741006664369758E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725881258085	WITHOUT_CLASSIFICATION	2.274118741915168E-4	DEFECT
some statistics	WITHOUT_CLASSIFICATION	0.9996897654784368	WITHOUT_CLASSIFICATION	3.102345215632422E-4	DEFECT
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.969100729671984	WITHOUT_CLASSIFICATION	0.03089927032801598	DEFECT
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9994015104090158	WITHOUT_CLASSIFICATION	5.984895909841345E-4	DEFECT
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9744287815746041	WITHOUT_CLASSIFICATION	0.02557121842539584	DEFECT
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9471422944634991	WITHOUT_CLASSIFICATION	0.05285770553650104	DEFECT
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999979775849237	WITHOUT_CLASSIFICATION	2.02241507630014E-5	DEFECT
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996352601523077	WITHOUT_CLASSIFICATION	3.647398476922231E-4	DEFECT
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9997915237455797	WITHOUT_CLASSIFICATION	2.0847625442032937E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997725881258085	WITHOUT_CLASSIFICATION	2.274118741915168E-4	DEFECT
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999080992380797	WITHOUT_CLASSIFICATION	9.190076192028698E-5	DEFECT
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9976956087691374	WITHOUT_CLASSIFICATION	0.002304391230862472	DEFECT
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999577013358675	WITHOUT_CLASSIFICATION	4.2298664132559704E-5	DEFECT
get a snapshot	WITHOUT_CLASSIFICATION	0.9999002470832018	WITHOUT_CLASSIFICATION	9.975291679819096E-5	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999813828482176	WITHOUT_CLASSIFICATION	1.8617151782391843E-4	DEFECT
package-private	WITHOUT_CLASSIFICATION	0.999813828482176	WITHOUT_CLASSIFICATION	1.8617151782391843E-4	DEFECT
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999860673534398	WITHOUT_CLASSIFICATION	1.393264656020851E-5	DEFECT
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9996930258967772	WITHOUT_CLASSIFICATION	3.0697410322285155E-4	DEFECT
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999736631061412	WITHOUT_CLASSIFICATION	2.6336893858779623E-5	DEFECT
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9997783792106224	WITHOUT_CLASSIFICATION	2.2162078937760797E-4	DEFECT
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9993058847642231	WITHOUT_CLASSIFICATION	6.941152357767837E-4	DEFECT
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989814038350697	WITHOUT_CLASSIFICATION	0.0010185961649303362	DEFECT
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9997493864487722	WITHOUT_CLASSIFICATION	2.506135512278039E-4	DEFECT
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999523583888824	WITHOUT_CLASSIFICATION	4.7641611117522784E-5	DEFECT
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996731328156908	WITHOUT_CLASSIFICATION	3.2686718430922234E-4	DEFECT
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9984211834861089	WITHOUT_CLASSIFICATION	0.0015788165138911922	DEFECT
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9996203625925983	WITHOUT_CLASSIFICATION	3.796374074015788E-4	DEFECT
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999387702009195	WITHOUT_CLASSIFICATION	6.122979908054916E-5	DEFECT
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999841118084634	WITHOUT_CLASSIFICATION	1.5888191536602474E-4	DEFECT
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9998656085040906	WITHOUT_CLASSIFICATION	1.3439149590938315E-4	DEFECT
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9904105846630629	WITHOUT_CLASSIFICATION	0.0095894153369372	DEFECT
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9996114460651576	WITHOUT_CLASSIFICATION	3.8855393484233064E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9996385187434724	WITHOUT_CLASSIFICATION	3.614812565275511E-4	DEFECT
cachedState,	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9576327794542421	WITHOUT_CLASSIFICATION	0.042367220545757936	DEFECT
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998673787529879	WITHOUT_CLASSIFICATION	1.3262124701210226E-4	DEFECT
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.99983686812168	WITHOUT_CLASSIFICATION	1.6313187832000763E-4	DEFECT
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998290756360793	WITHOUT_CLASSIFICATION	1.7092436392067637E-4	DEFECT
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999947453577085	WITHOUT_CLASSIFICATION	5.254642291533625E-6	DEFECT
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9986855582620291	WITHOUT_CLASSIFICATION	0.001314441737970878	DEFECT
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9997872404999391	WITHOUT_CLASSIFICATION	2.1275950006102528E-4	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998744017825204	WITHOUT_CLASSIFICATION	1.2559821747954616E-4	DEFECT
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999769352456822	WITHOUT_CLASSIFICATION	2.3064754317830015E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9996428199532873	WITHOUT_CLASSIFICATION	3.571800467127741E-4	DEFECT
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999972271704424	WITHOUT_CLASSIFICATION	2.7728295576999286E-6	DEFECT
DELETED	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9996677922915452	WITHOUT_CLASSIFICATION	3.3220770845476664E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999691094637613	WITHOUT_CLASSIFICATION	3.0890536238728345E-5	DEFECT
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999001099185527	WITHOUT_CLASSIFICATION	9.98900814473916E-5	DEFECT
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9991039188732027	WITHOUT_CLASSIFICATION	8.960811267973209E-4	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999691094637613	WITHOUT_CLASSIFICATION	3.0890536238728345E-5	DEFECT
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999873977165041	WITHOUT_CLASSIFICATION	1.260228349589162E-4	DEFECT
before cascade!	WITHOUT_CLASSIFICATION	0.9996677922915452	WITHOUT_CLASSIFICATION	3.3220770845476664E-4	DEFECT
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999496339902086	WITHOUT_CLASSIFICATION	5.0366009791327836E-5	DEFECT
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999691094637613	WITHOUT_CLASSIFICATION	3.0890536238728345E-5	DEFECT
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999829206589002	WITHOUT_CLASSIFICATION	1.7079341099813342E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999960803664475	WITHOUT_CLASSIFICATION	3.919633552499041E-5	DEFECT
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996887937070005	WITHOUT_CLASSIFICATION	3.1120629299948873E-4	DEFECT
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9998673640883452	WITHOUT_CLASSIFICATION	1.3263591165484356E-4	DEFECT
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999619612927958	WITHOUT_CLASSIFICATION	3.803870720419486E-4	DEFECT
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9997634374793328	WITHOUT_CLASSIFICATION	2.365625206670955E-4	DEFECT
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995872358625101	WITHOUT_CLASSIFICATION	4.127641374899193E-4	DEFECT
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9998380742224776	WITHOUT_CLASSIFICATION	1.6192577752238767E-4	DEFECT
the object is persistent	WITHOUT_CLASSIFICATION	0.9999218194239814	WITHOUT_CLASSIFICATION	7.818057601854327E-5	DEFECT
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999729807908476	WITHOUT_CLASSIFICATION	2.701920915237716E-5	DEFECT
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999491508178165	WITHOUT_CLASSIFICATION	5.0849182183458065E-5	DEFECT
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999889619623732	WITHOUT_CLASSIFICATION	1.1038037626799157E-4	DEFECT
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998538944125291	WITHOUT_CLASSIFICATION	1.461055874709611E-4	DEFECT
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999020406742908	WITHOUT_CLASSIFICATION	9.79593257092485E-5	DEFECT
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999368633121162	WITHOUT_CLASSIFICATION	6.31366878837683E-5	DEFECT
eat it and try next	WITHOUT_CLASSIFICATION	0.999696616679175	WITHOUT_CLASSIFICATION	3.0338332082509756E-4	DEFECT
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999659059334769	WITHOUT_CLASSIFICATION	3.4094066522978474E-5	DEFECT
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9997453806485116	WITHOUT_CLASSIFICATION	2.546193514883793E-4	DEFECT
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9998579100503187	WITHOUT_CLASSIFICATION	1.4208994968136073E-4	DEFECT
remove initial ", "	WITHOUT_CLASSIFICATION	0.9998359258187618	WITHOUT_CLASSIFICATION	1.6407418123809945E-4	DEFECT
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999043511116652	WITHOUT_CLASSIFICATION	9.564888833481272E-5	DEFECT
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999539787830295	WITHOUT_CLASSIFICATION	4.602121697041796E-5	DEFECT
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998855580496766	WITHOUT_CLASSIFICATION	1.144419503233191E-4	DEFECT
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997578463140486	WITHOUT_CLASSIFICATION	2.4215368595136E-4	DEFECT
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9988654413815563	WITHOUT_CLASSIFICATION	0.001134558618443703	DEFECT
Note this!!	WITHOUT_CLASSIFICATION	0.9998298933087909	WITHOUT_CLASSIFICATION	1.7010669120901334E-4	DEFECT
Error message constants.	WITHOUT_CLASSIFICATION	0.9999334278663734	WITHOUT_CLASSIFICATION	6.657213362658514E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996224662998086	WITHOUT_CLASSIFICATION	3.775337001914338E-4	DEFECT
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999371684898153	WITHOUT_CLASSIFICATION	6.283151018471173E-4	DEFECT
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9951345673659765	WITHOUT_CLASSIFICATION	0.00486543263402354	DEFECT
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999455285945354	WITHOUT_CLASSIFICATION	5.447140546452016E-5	DEFECT
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9998862031311632	WITHOUT_CLASSIFICATION	1.1379686883679047E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999767974059056	WITHOUT_CLASSIFICATION	2.3202594094365753E-5	DEFECT
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994770520949012	WITHOUT_CLASSIFICATION	5.229479050988209E-4	DEFECT
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998067447977553	WITHOUT_CLASSIFICATION	1.9325520224470965E-4	DEFECT
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9996772872772344	WITHOUT_CLASSIFICATION	3.2271272276563424E-4	DEFECT
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9987172882504823	WITHOUT_CLASSIFICATION	0.0012827117495176797	DEFECT
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9985127208211239	WITHOUT_CLASSIFICATION	0.0014872791788760927	DEFECT
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999936698722143	WITHOUT_CLASSIFICATION	6.330127785730606E-6	DEFECT
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998943090120584	WITHOUT_CLASSIFICATION	1.0569098794151099E-4	DEFECT
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9998432821972216	WITHOUT_CLASSIFICATION	1.5671780277824775E-4	DEFECT
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999876324142783	WITHOUT_CLASSIFICATION	1.2367585721629268E-5	DEFECT
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9998798978508328	WITHOUT_CLASSIFICATION	1.2010214916728772E-4	DEFECT
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999936047248175	WITHOUT_CLASSIFICATION	6.395275182507098E-6	DEFECT
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9931454639249281	WITHOUT_CLASSIFICATION	0.006854536075071896	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999508341690189	WITHOUT_CLASSIFICATION	4.916583098110623E-4	DEFECT
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.999812398058566	WITHOUT_CLASSIFICATION	1.8760194143400716E-4	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991258935619526	WITHOUT_CLASSIFICATION	8.741064380475059E-4	DEFECT
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9984750572417563	WITHOUT_CLASSIFICATION	0.0015249427582437133	DEFECT
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9994942671790026	WITHOUT_CLASSIFICATION	5.057328209974528E-4	DEFECT
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996958986464882	WITHOUT_CLASSIFICATION	3.041013535117761E-4	DEFECT
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999788594423973	WITHOUT_CLASSIFICATION	2.1140557602752024E-5	DEFECT
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999691641299773	WITHOUT_CLASSIFICATION	3.083587002277806E-5	DEFECT
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996320075700279	WITHOUT_CLASSIFICATION	3.679924299721356E-4	DEFECT
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9985386187283566	WITHOUT_CLASSIFICATION	0.0014613812716434177	DEFECT
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999348662668003	WITHOUT_CLASSIFICATION	6.513373319971813E-5	DEFECT
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996224662998086	WITHOUT_CLASSIFICATION	3.775337001914338E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.99989966919175	WITHOUT_CLASSIFICATION	1.0033080824993733E-4	DEFECT
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9998880590077135	WITHOUT_CLASSIFICATION	1.1194099228654245E-4	DEFECT
switch	WITHOUT_CLASSIFICATION	0.999971984487993	WITHOUT_CLASSIFICATION	2.8015512007012327E-5	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9996981824694952	WITHOUT_CLASSIFICATION	3.0181753050482975E-4	DEFECT
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999929170545142	WITHOUT_CLASSIFICATION	7.0829454858870325E-6	DEFECT
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9983204450944739	WITHOUT_CLASSIFICATION	0.001679554905526075	DEFECT
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993262900907868	WITHOUT_CLASSIFICATION	6.737099092133007E-4	DEFECT
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999396482580128	WITHOUT_CLASSIFICATION	6.0351741987218376E-5	DEFECT
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9998644691850673	WITHOUT_CLASSIFICATION	1.3553081493264112E-4	DEFECT
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9995488683914555	WITHOUT_CLASSIFICATION	4.5113160854458426E-4	DEFECT
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9990510959557262	WITHOUT_CLASSIFICATION	9.48904044273831E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999774901328234	WITHOUT_CLASSIFICATION	2.2509867176594507E-5	DEFECT
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999855203570962	WITHOUT_CLASSIFICATION	1.4479642903653367E-5	DEFECT
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999577351618749	WITHOUT_CLASSIFICATION	4.226483812510607E-4	DEFECT
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995567965932449	WITHOUT_CLASSIFICATION	4.432034067550707E-4	DEFECT
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9994875304913887	WITHOUT_CLASSIFICATION	5.124695086113829E-4	DEFECT
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999406181581862	WITHOUT_CLASSIFICATION	5.938184181379821E-4	DEFECT
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9996535474487652	WITHOUT_CLASSIFICATION	3.4645255123485607E-4	DEFECT
all clear	WITHOUT_CLASSIFICATION	0.99998850207177	WITHOUT_CLASSIFICATION	1.149792822999799E-5	DEFECT
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999368747892148	WITHOUT_CLASSIFICATION	6.312521078527731E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999009228893946	WITHOUT_CLASSIFICATION	9.907711060538405E-5	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999009228893946	WITHOUT_CLASSIFICATION	9.907711060538405E-5	DEFECT
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999515937591512	WITHOUT_CLASSIFICATION	4.84062408488187E-5	DEFECT
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998611647659804	WITHOUT_CLASSIFICATION	1.3883523401965153E-4	DEFECT
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998693606249665	WITHOUT_CLASSIFICATION	1.306393750335357E-4	DEFECT
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998340404268964	WITHOUT_CLASSIFICATION	1.6595957310374133E-4	DEFECT
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9995740796855958	WITHOUT_CLASSIFICATION	4.259203144042223E-4	DEFECT
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9995683423292796	WITHOUT_CLASSIFICATION	4.3165767072037155E-4	DEFECT
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9998569727608436	WITHOUT_CLASSIFICATION	1.430272391564043E-4	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9985639168371229	WITHOUT_CLASSIFICATION	0.0014360831628771006	DEFECT
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9985639168371229	WITHOUT_CLASSIFICATION	0.0014360831628771006	DEFECT
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9990680361085986	WITHOUT_CLASSIFICATION	9.319638914014231E-4	DEFECT
Transform the tree.	WITHOUT_CLASSIFICATION	0.9998386266083139	WITHOUT_CLASSIFICATION	1.6137339168603964E-4	DEFECT
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9997426217354414	WITHOUT_CLASSIFICATION	2.57378264558602E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998152543277473	WITHOUT_CLASSIFICATION	1.8474567225263176E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998152543277473	WITHOUT_CLASSIFICATION	1.8474567225263176E-4	DEFECT
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9998152543277473	WITHOUT_CLASSIFICATION	1.8474567225263176E-4	DEFECT
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999515705579792	WITHOUT_CLASSIFICATION	4.842944202080654E-5	DEFECT
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9998745532635532	WITHOUT_CLASSIFICATION	1.2544673644685476E-4	DEFECT
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999875396170412	WITHOUT_CLASSIFICATION	1.2460382958632668E-5	DEFECT
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998332487682664	WITHOUT_CLASSIFICATION	1.6675123173363833E-4	DEFECT
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998139163360493	WITHOUT_CLASSIFICATION	1.8608366395072112E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999184486797176	WITHOUT_CLASSIFICATION	8.155132028235628E-5	DEFECT
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999695323297562	WITHOUT_CLASSIFICATION	3.0467670243846458E-5	DEFECT
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.8623767984819286	WITHOUT_CLASSIFICATION	0.13762320151807128	DEFECT
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9994725299767204	WITHOUT_CLASSIFICATION	5.274700232795005E-4	DEFECT
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999642071290858	WITHOUT_CLASSIFICATION	3.579287091421208E-5	DEFECT
igndore it...	WITHOUT_CLASSIFICATION	0.9997822261765301	WITHOUT_CLASSIFICATION	2.1777382346989168E-4	DEFECT
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999302654455864	WITHOUT_CLASSIFICATION	6.973455441352696E-5	DEFECT
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9990611214185315	WITHOUT_CLASSIFICATION	9.388785814683959E-4	DEFECT
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999303088188031	WITHOUT_CLASSIFICATION	6.969118119694091E-5	DEFECT
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999488608364114	WITHOUT_CLASSIFICATION	5.11391635884918E-5	DEFECT
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999803744886516	WITHOUT_CLASSIFICATION	1.9625511348340393E-5	DEFECT
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999337324704054	WITHOUT_CLASSIFICATION	6.626752959464644E-5	DEFECT
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997369994357146	WITHOUT_CLASSIFICATION	2.630005642854245E-4	DEFECT
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999009228893946	WITHOUT_CLASSIFICATION	9.907711060538405E-5	DEFECT
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998958290478261	WITHOUT_CLASSIFICATION	1.0417095217381908E-4	DEFECT
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9990530803321115	WITHOUT_CLASSIFICATION	9.469196678885789E-4	DEFECT
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998174217864849	WITHOUT_CLASSIFICATION	1.8257821351513838E-4	DEFECT
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998904551488338	WITHOUT_CLASSIFICATION	1.0954485116624494E-4	DEFECT
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998790850091615	WITHOUT_CLASSIFICATION	1.2091499083850559E-4	DEFECT
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999223527088275	WITHOUT_CLASSIFICATION	7.764729117257246E-5	DEFECT
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999523054387347	WITHOUT_CLASSIFICATION	4.7694561265243776E-5	DEFECT
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9996253141638223	WITHOUT_CLASSIFICATION	3.7468583617772833E-4	DEFECT
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996891838644031	WITHOUT_CLASSIFICATION	3.108161355969981E-4	DEFECT
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999054002758686	WITHOUT_CLASSIFICATION	9.459972413137333E-5	DEFECT
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9996811787760703	WITHOUT_CLASSIFICATION	3.1882122392972286E-4	DEFECT
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999125825281991	WITHOUT_CLASSIFICATION	8.741747180082643E-5	DEFECT
Set it!	WITHOUT_CLASSIFICATION	0.9999706973558802	WITHOUT_CLASSIFICATION	2.9302644119830452E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999837337396063	WITHOUT_CLASSIFICATION	1.626626039367791E-5	DEFECT
strip the " where "	WITHOUT_CLASSIFICATION	0.999920628000718	WITHOUT_CLASSIFICATION	7.937199928203679E-5	DEFECT
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9670045414963746	WITHOUT_CLASSIFICATION	0.0329954585036254	DEFECT
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9972579006016455	WITHOUT_CLASSIFICATION	0.002742099398354449	DEFECT
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.99997764193512	WITHOUT_CLASSIFICATION	2.2358064880080832E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999437794754547	WITHOUT_CLASSIFICATION	5.62205245454677E-5	DEFECT
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999437794754547	WITHOUT_CLASSIFICATION	5.62205245454677E-5	DEFECT
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999151107003902	WITHOUT_CLASSIFICATION	8.488929960982249E-5	DEFECT
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9998979188508661	WITHOUT_CLASSIFICATION	1.0208114913392202E-4	DEFECT
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9998996946890453	WITHOUT_CLASSIFICATION	1.0030531095476786E-4	DEFECT
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998988780102278	WITHOUT_CLASSIFICATION	1.0112198977221739E-4	DEFECT
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998494975012405	WITHOUT_CLASSIFICATION	1.5050249875950123E-4	DEFECT
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999272592722793	WITHOUT_CLASSIFICATION	7.274072772073068E-5	DEFECT
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999738532295486	WITHOUT_CLASSIFICATION	2.6146770451393594E-4	DEFECT
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999529226148913	WITHOUT_CLASSIFICATION	4.707738510870238E-4	DEFECT
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999867453362338	WITHOUT_CLASSIFICATION	1.325466376621038E-4	DEFECT
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999033502741718	WITHOUT_CLASSIFICATION	9.664972582819087E-5	DEFECT
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9987462967429237	WITHOUT_CLASSIFICATION	0.0012537032570763074	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999774901328234	WITHOUT_CLASSIFICATION	2.2509867176594507E-5	DEFECT
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999967871093141	WITHOUT_CLASSIFICATION	3.2128906859023884E-5	DEFECT
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9997473843417877	WITHOUT_CLASSIFICATION	2.5261565821239874E-4	DEFECT
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999740742419027	WITHOUT_CLASSIFICATION	2.5925758097363564E-5	DEFECT
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9993442697325682	WITHOUT_CLASSIFICATION	6.557302674317945E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998558022678931	WITHOUT_CLASSIFICATION	1.4419773210696128E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998558022678931	WITHOUT_CLASSIFICATION	1.4419773210696128E-4	DEFECT
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997129497730413	WITHOUT_CLASSIFICATION	2.8705022695866373E-4	DEFECT
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.998939976393917	WITHOUT_CLASSIFICATION	0.001060023606082957	DEFECT
The property is a collection...	WITHOUT_CLASSIFICATION	0.9993875863858452	WITHOUT_CLASSIFICATION	6.124136141546801E-4	DEFECT
The property is a component...	WITHOUT_CLASSIFICATION	0.9996890199704834	WITHOUT_CLASSIFICATION	3.1098002951662713E-4	DEFECT
The property is another class..	WITHOUT_CLASSIFICATION	0.9997542861282465	WITHOUT_CLASSIFICATION	2.457138717535532E-4	DEFECT
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9996764218646194	WITHOUT_CLASSIFICATION	3.2357813538058113E-4	DEFECT
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999464219800597	WITHOUT_CLASSIFICATION	5.357801994041755E-5	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988216619853754	WITHOUT_CLASSIFICATION	0.0011783380146246987	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996991386456078	WITHOUT_CLASSIFICATION	3.0086135439217666E-4	DEFECT
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9992480763977514	WITHOUT_CLASSIFICATION	7.519236022486317E-4	DEFECT
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998971493587382	WITHOUT_CLASSIFICATION	1.0285064126188164E-4	DEFECT
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9988216619853754	WITHOUT_CLASSIFICATION	0.0011783380146246987	DEFECT
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9898868386278861	WITHOUT_CLASSIFICATION	0.010113161372113851	DEFECT
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9996906180897158	WITHOUT_CLASSIFICATION	3.093819102841757E-4	DEFECT
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999132236129845	WITHOUT_CLASSIFICATION	8.677638701545008E-5	DEFECT
again, null != null here	WITHOUT_CLASSIFICATION	0.9995611103154762	WITHOUT_CLASSIFICATION	4.3888968452372577E-4	DEFECT
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9997752457124625	WITHOUT_CLASSIFICATION	2.2475428753754344E-4	DEFECT
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999636875436987	WITHOUT_CLASSIFICATION	3.631245630141676E-5	DEFECT
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999405138169247	WITHOUT_CLASSIFICATION	5.948618307524341E-5	DEFECT
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999812608046676	WITHOUT_CLASSIFICATION	1.8739195332399984E-4	DEFECT
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9996248594750664	WITHOUT_CLASSIFICATION	3.7514052493366266E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995371483545479	WITHOUT_CLASSIFICATION	4.628516454521113E-4	DEFECT
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998673910580709	WITHOUT_CLASSIFICATION	1.3260894192907853E-4	DEFECT
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996754575207815	WITHOUT_CLASSIFICATION	3.2454247921846925E-4	DEFECT
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997212238730613	WITHOUT_CLASSIFICATION	2.7877612693865154E-4	DEFECT
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999568506939054	WITHOUT_CLASSIFICATION	4.314930609449871E-5	DEFECT
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9998958738232889	WITHOUT_CLASSIFICATION	1.0412617671114067E-4	DEFECT
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999429086137628	WITHOUT_CLASSIFICATION	5.709138623716902E-5	DEFECT
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995954240471387	WITHOUT_CLASSIFICATION	4.0457595286125665E-4	DEFECT
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9995554057668166	WITHOUT_CLASSIFICATION	4.44594233183458E-4	DEFECT
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995554057668166	WITHOUT_CLASSIFICATION	4.44594233183458E-4	DEFECT
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999405138169247	WITHOUT_CLASSIFICATION	5.948618307524341E-5	DEFECT
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9986962069328554	WITHOUT_CLASSIFICATION	0.0013037930671445125	DEFECT
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9993491159328827	WITHOUT_CLASSIFICATION	6.508840671172883E-4	DEFECT
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9997701548014764	WITHOUT_CLASSIFICATION	2.2984519852360194E-4	DEFECT
#2	WITHOUT_CLASSIFICATION	0.9999757078765328	WITHOUT_CLASSIFICATION	2.429212346726025E-5	DEFECT
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999471439372138	WITHOUT_CLASSIFICATION	5.2856062786147975E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999122381226635	WITHOUT_CLASSIFICATION	8.776187733657751E-5	DEFECT
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999873406211739	WITHOUT_CLASSIFICATION	1.2659378826105301E-4	DEFECT
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9963053346405655	WITHOUT_CLASSIFICATION	0.00369466535943448	DEFECT
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999511332702709	WITHOUT_CLASSIFICATION	4.8866729729224376E-5	DEFECT
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.999529877589007	WITHOUT_CLASSIFICATION	4.701224109929266E-4	DEFECT
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999953384304335	WITHOUT_CLASSIFICATION	4.661569566513047E-5	DEFECT
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9985006622660446	WITHOUT_CLASSIFICATION	0.0014993377339554523	DEFECT
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9989347440353741	WITHOUT_CLASSIFICATION	0.001065255964625985	DEFECT
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.99999813746515	WITHOUT_CLASSIFICATION	1.8625348499592424E-6	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998574392358132	WITHOUT_CLASSIFICATION	1.4256076418685723E-4	DEFECT
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999439648629317	WITHOUT_CLASSIFICATION	5.603513706827253E-5	DEFECT
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999606149973921	WITHOUT_CLASSIFICATION	3.9385002607896175E-5	DEFECT
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9995268593857659	WITHOUT_CLASSIFICATION	4.731406142340695E-4	DEFECT
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999280034399035	WITHOUT_CLASSIFICATION	7.199656009649056E-5	DEFECT
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999732372933108	WITHOUT_CLASSIFICATION	2.6762706689243046E-5	DEFECT
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999138470256317	WITHOUT_CLASSIFICATION	8.6152974368375E-5	DEFECT
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999179436092811	WITHOUT_CLASSIFICATION	8.205639071885317E-5	DEFECT
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998945753123151	WITHOUT_CLASSIFICATION	1.0542468768494733E-4	DEFECT
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999967061930016	WITHOUT_CLASSIFICATION	3.293806998391226E-5	DEFECT
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999939955951238	WITHOUT_CLASSIFICATION	6.004404876124095E-6	DEFECT
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999195621559159	WITHOUT_CLASSIFICATION	8.043784408412728E-5	DEFECT
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996548454267028	WITHOUT_CLASSIFICATION	3.4515457329722964E-4	DEFECT
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998633430489531	WITHOUT_CLASSIFICATION	1.3665695104683365E-4	DEFECT
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999575460907268	WITHOUT_CLASSIFICATION	4.2453909273139355E-5	DEFECT
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.997645134389575	WITHOUT_CLASSIFICATION	0.0023548656104249335	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9998574392358132	WITHOUT_CLASSIFICATION	1.4256076418685723E-4	DEFECT
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999182739628553	WITHOUT_CLASSIFICATION	8.17260371447015E-5	DEFECT
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997921484266609	WITHOUT_CLASSIFICATION	2.0785157333907985E-4	DEFECT
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999799723315511	WITHOUT_CLASSIFICATION	2.0027668448973148E-5	DEFECT
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9997463217776533	WITHOUT_CLASSIFICATION	2.536782223466677E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9937591738419066	WITHOUT_CLASSIFICATION	0.006240826158093431	DEFECT
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996243506701072	WITHOUT_CLASSIFICATION	3.7564932989282896E-4	DEFECT
Collection of components.	WITHOUT_CLASSIFICATION	0.9998816154384693	WITHOUT_CLASSIFICATION	1.1838456153057533E-4	DEFECT
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9998121542757755	WITHOUT_CLASSIFICATION	1.8784572422446058E-4	DEFECT
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9923190455442078	WITHOUT_CLASSIFICATION	0.007680954455792154	DEFECT
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9998935194206005	WITHOUT_CLASSIFICATION	1.0648057939953457E-4	DEFECT
currently allowed...	WITHOUT_CLASSIFICATION	0.9996151178194241	WITHOUT_CLASSIFICATION	3.848821805758026E-4	DEFECT
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5731628952435707	WITHOUT_CLASSIFICATION	0.42683710475642944	DEFECT
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998916416349674	WITHOUT_CLASSIFICATION	1.0835836503268275E-4	DEFECT
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9992960075111157	WITHOUT_CLASSIFICATION	7.039924888843657E-4	DEFECT
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9997303254952553	WITHOUT_CLASSIFICATION	2.6967450474466866E-4	DEFECT
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9952226271916658	WITHOUT_CLASSIFICATION	0.004777372808334259	DEFECT
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9985205702819139	WITHOUT_CLASSIFICATION	0.0014794297180860576	DEFECT
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999842688644887	WITHOUT_CLASSIFICATION	1.5731135511297413E-5	DEFECT
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998458447287032	WITHOUT_CLASSIFICATION	1.5415527129681184E-4	DEFECT
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9996369600525062	WITHOUT_CLASSIFICATION	3.6303994749376666E-4	DEFECT
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996991386456078	WITHOUT_CLASSIFICATION	3.0086135439217666E-4	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999863251557323	WITHOUT_CLASSIFICATION	1.3674844267771106E-5	DEFECT
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998574392358132	WITHOUT_CLASSIFICATION	1.4256076418685723E-4	DEFECT
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9961005167138851	WITHOUT_CLASSIFICATION	0.0038994832861149516	DEFECT
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9996279516973035	WITHOUT_CLASSIFICATION	3.720483026965029E-4	DEFECT
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999278104556951	WITHOUT_CLASSIFICATION	7.218954430495671E-5	DEFECT
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999927620422545	WITHOUT_CLASSIFICATION	7.237957745496523E-5	DEFECT
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998794534695262	WITHOUT_CLASSIFICATION	1.2054653047386033E-4	DEFECT
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9999977157733934	WITHOUT_CLASSIFICATION	2.284226606645824E-6	DEFECT
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9922808641855133	WITHOUT_CLASSIFICATION	0.007719135814486689	DEFECT
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999520309104792	WITHOUT_CLASSIFICATION	4.796908952069494E-5	DEFECT
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.96590366435287	WITHOUT_CLASSIFICATION	0.034096335647129945	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997108164135482	WITHOUT_CLASSIFICATION	2.8918358645182995E-4	DEFECT
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999501933987104	WITHOUT_CLASSIFICATION	4.980660128971017E-5	DEFECT
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999934978527927	WITHOUT_CLASSIFICATION	6.502147207294412E-5	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9989012246613362	WITHOUT_CLASSIFICATION	0.0010987753386637177	DEFECT
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9989012246613362	WITHOUT_CLASSIFICATION	0.0010987753386637177	DEFECT
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999771183750801	WITHOUT_CLASSIFICATION	2.2881624919886587E-5	DEFECT
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9996782835120958	WITHOUT_CLASSIFICATION	3.2171648790422103E-4	DEFECT
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999333800315054	WITHOUT_CLASSIFICATION	6.661996849461967E-5	DEFECT
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999950160242183	WITHOUT_CLASSIFICATION	4.983975781750337E-6	DEFECT
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9997977620448717	WITHOUT_CLASSIFICATION	2.0223795512834018E-4	DEFECT
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999913717620221	WITHOUT_CLASSIFICATION	8.628237977903777E-5	DEFECT
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9996453979153829	WITHOUT_CLASSIFICATION	3.5460208461714985E-4	DEFECT
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9992431563704941	WITHOUT_CLASSIFICATION	7.568436295059667E-4	DEFECT
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999153073342879	WITHOUT_CLASSIFICATION	8.469266571219671E-5	DEFECT
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
A collection of entities...	WITHOUT_CLASSIFICATION	0.9998843083030736	WITHOUT_CLASSIFICATION	1.1569169692640943E-4	DEFECT
A collection of components...	WITHOUT_CLASSIFICATION	0.9998843083030736	WITHOUT_CLASSIFICATION	1.1569169692640943E-4	DEFECT
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9997721249537369	WITHOUT_CLASSIFICATION	2.2787504626314958E-4	DEFECT
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999115392620761	WITHOUT_CLASSIFICATION	8.846073792382157E-5	DEFECT
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998318768473444	WITHOUT_CLASSIFICATION	1.6812315265556603E-4	DEFECT
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994858649939413	WITHOUT_CLASSIFICATION	5.141350060586872E-4	DEFECT
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999295464546228	WITHOUT_CLASSIFICATION	7.045354537720653E-5	DEFECT
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9998041175422331	WITHOUT_CLASSIFICATION	1.958824577669192E-4	DEFECT
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999817541883649	WITHOUT_CLASSIFICATION	1.8245811635060425E-5	DEFECT
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9990733455264255	WITHOUT_CLASSIFICATION	9.266544735744953E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9997014845025153	WITHOUT_CLASSIFICATION	2.985154974847228E-4	DEFECT
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9988609673520177	WITHOUT_CLASSIFICATION	0.001139032647982337	DEFECT
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9996390481443506	WITHOUT_CLASSIFICATION	3.6095185564940136E-4	DEFECT
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9997752684620044	WITHOUT_CLASSIFICATION	2.2473153799562655E-4	DEFECT
implied	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999962137845347	WITHOUT_CLASSIFICATION	3.7862154653097224E-5	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997557368952403	WITHOUT_CLASSIFICATION	2.442631047596855E-4	DEFECT
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9996937259278063	WITHOUT_CLASSIFICATION	3.0627407219371795E-4	DEFECT
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9962437394531539	WITHOUT_CLASSIFICATION	0.0037562605468459903	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997680459666314	WITHOUT_CLASSIFICATION	2.3195403336866258E-4	DEFECT
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997560457603468	WITHOUT_CLASSIFICATION	2.439542396532454E-4	DEFECT
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9997984707278786	WITHOUT_CLASSIFICATION	2.015292721213574E-4	DEFECT
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9998906647195355	WITHOUT_CLASSIFICATION	1.0933528046453759E-4	DEFECT
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999319782463898	WITHOUT_CLASSIFICATION	6.802175361014227E-5	DEFECT
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999271339286829	WITHOUT_CLASSIFICATION	7.286607131703803E-5	DEFECT
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996891245859241	WITHOUT_CLASSIFICATION	3.1087541407599176E-4	DEFECT
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9995831809804083	WITHOUT_CLASSIFICATION	4.1681901959166214E-4	DEFECT
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998322141743888	WITHOUT_CLASSIFICATION	1.6778582561120667E-4	DEFECT
add the fetched entities	WITHOUT_CLASSIFICATION	0.9998459341396397	WITHOUT_CLASSIFICATION	1.540658603603415E-4	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996622395152457	WITHOUT_CLASSIFICATION	3.3776048475436446E-4	DEFECT
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996369815601583	WITHOUT_CLASSIFICATION	3.630184398416693E-4	DEFECT
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999278323869497	WITHOUT_CLASSIFICATION	7.216761305022589E-5	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998927549182672	WITHOUT_CLASSIFICATION	1.0724508173277243E-4	DEFECT
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997950803066573	WITHOUT_CLASSIFICATION	2.049196933427283E-4	DEFECT
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998261113915337	WITHOUT_CLASSIFICATION	1.7388860846627186E-4	DEFECT
TODO:	WITHOUT_CLASSIFICATION	0.9910673903820839	WITHOUT_CLASSIFICATION	0.008932609617916042	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998479294834637	WITHOUT_CLASSIFICATION	1.520705165363569E-4	DEFECT
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999974859527416	WITHOUT_CLASSIFICATION	2.514047258380464E-6	DEFECT
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996375525719928	WITHOUT_CLASSIFICATION	3.624474280071116E-4	DEFECT
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997938018401005	WITHOUT_CLASSIFICATION	2.0619815989961692E-4	DEFECT
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999997699851449	WITHOUT_CLASSIFICATION	2.30014855096423E-6	DEFECT
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9996993225703327	WITHOUT_CLASSIFICATION	3.006774296673573E-4	DEFECT
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9996766740889778	WITHOUT_CLASSIFICATION	3.23325911022248E-4	DEFECT
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999472390671367	WITHOUT_CLASSIFICATION	5.276093286342586E-5	DEFECT
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993941395021707	WITHOUT_CLASSIFICATION	6.058604978293588E-4	DEFECT
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9997709020992117	WITHOUT_CLASSIFICATION	2.2909790078838862E-4	DEFECT
Not elements(x)	WITHOUT_CLASSIFICATION	0.9993702495998138	WITHOUT_CLASSIFICATION	6.297504001862634E-4	DEFECT
Dialect function	WITHOUT_CLASSIFICATION	0.99977527733594	WITHOUT_CLASSIFICATION	2.2472266405997542E-4	DEFECT
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9998907559122979	WITHOUT_CLASSIFICATION	1.0924408770208489E-4	DEFECT
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997997772784873	WITHOUT_CLASSIFICATION	2.0022272151259303E-4	DEFECT
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9986451495494371	WITHOUT_CLASSIFICATION	0.0013548504505628502	DEFECT
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999232629012741	WITHOUT_CLASSIFICATION	7.673709872594969E-5	DEFECT
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998879164591441	WITHOUT_CLASSIFICATION	1.1208354085592463E-4	DEFECT
the name of an entity class	WITHOUT_CLASSIFICATION	0.9998808852776645	WITHOUT_CLASSIFICATION	1.1911472233545412E-4	DEFECT
the class discriminator value	WITHOUT_CLASSIFICATION	0.9995809837110953	WITHOUT_CLASSIFICATION	4.19016288904659E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999923641856663	WITHOUT_CLASSIFICATION	7.635814333697838E-5	DEFECT
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.999955188083436	WITHOUT_CLASSIFICATION	4.4811916563951745E-5	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999922821288676	WITHOUT_CLASSIFICATION	7.717871132396823E-5	DEFECT
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998636092155784	WITHOUT_CLASSIFICATION	1.3639078442170138E-4	DEFECT
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999922821288676	WITHOUT_CLASSIFICATION	7.717871132396823E-5	DEFECT
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9977081657653252	WITHOUT_CLASSIFICATION	0.002291834234674818	DEFECT
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.991822641485785	WITHOUT_CLASSIFICATION	0.008177358514214896	DEFECT
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998830997349165	WITHOUT_CLASSIFICATION	1.1690026508350054E-4	DEFECT
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999697808299913	WITHOUT_CLASSIFICATION	3.0219170008710085E-5	DEFECT
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9996962691195627	WITHOUT_CLASSIFICATION	3.0373088043732823E-4	DEFECT
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998830997349165	WITHOUT_CLASSIFICATION	1.1690026508350054E-4	DEFECT
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999930936509045	WITHOUT_CLASSIFICATION	6.906349095561872E-6	DEFECT
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9992752725308078	WITHOUT_CLASSIFICATION	7.247274691920817E-4	DEFECT
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999966275999513	WITHOUT_CLASSIFICATION	3.372400048702901E-5	DEFECT
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999765375270317	WITHOUT_CLASSIFICATION	2.3462472968293737E-4	DEFECT
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999658712322274	WITHOUT_CLASSIFICATION	3.412876777267552E-5	DEFECT
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999147825691898	WITHOUT_CLASSIFICATION	8.521743081030016E-5	DEFECT
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999908878200349	WITHOUT_CLASSIFICATION	9.112179965105528E-6	DEFECT
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.98586563491455	WITHOUT_CLASSIFICATION	0.014134365085450027	DEFECT
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999719278867761	WITHOUT_CLASSIFICATION	2.8072113223773895E-5	DEFECT
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999655621929803	WITHOUT_CLASSIFICATION	3.443780701969763E-4	DEFECT
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9980619167857483	WITHOUT_CLASSIFICATION	0.0019380832142516901	DEFECT
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9996819172978351	WITHOUT_CLASSIFICATION	3.1808270216496785E-4	DEFECT
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.99942131224198	WITHOUT_CLASSIFICATION	5.786877580199364E-4	DEFECT
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997417671781929	WITHOUT_CLASSIFICATION	2.58232821807127E-4	DEFECT
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998708929039285	WITHOUT_CLASSIFICATION	1.2910709607146556E-4	DEFECT
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998036366690527	WITHOUT_CLASSIFICATION	1.9636333094741535E-4	DEFECT
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9965260878918338	WITHOUT_CLASSIFICATION	0.003473912108166141	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9974041473590228	WITHOUT_CLASSIFICATION	0.0025958526409771967	DEFECT
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997785009896378	WITHOUT_CLASSIFICATION	2.2149901036223158E-4	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9954461361484422	WITHOUT_CLASSIFICATION	0.004553863851557814	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999188037054421	WITHOUT_CLASSIFICATION	8.119629455788274E-5	DEFECT
default mode	WITHOUT_CLASSIFICATION	0.9999071511229595	WITHOUT_CLASSIFICATION	9.284887704052267E-5	DEFECT
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997146334097302	WITHOUT_CLASSIFICATION	2.8536659026974276E-4	DEFECT
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9987182355175851	WITHOUT_CLASSIFICATION	0.0012817644824148263	DEFECT
after reset!	WITHOUT_CLASSIFICATION	0.9998815794262961	WITHOUT_CLASSIFICATION	1.1842057370393827E-4	DEFECT
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9561826596637653	WITHOUT_CLASSIFICATION	0.043817340336234724	DEFECT
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9866751839343763	WITHOUT_CLASSIFICATION	0.013324816065623827	DEFECT
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999733955652964	WITHOUT_CLASSIFICATION	2.660443470350598E-5	DEFECT
if its "id"	WITHOUT_CLASSIFICATION	0.999798813489781	WITHOUT_CLASSIFICATION	2.0118651021908016E-4	DEFECT
or its the id property name	WITHOUT_CLASSIFICATION	0.9999206182069211	WITHOUT_CLASSIFICATION	7.938179307885503E-5	DEFECT
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9997146334097302	WITHOUT_CLASSIFICATION	2.8536659026974276E-4	DEFECT
important!!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997305670305341	WITHOUT_CLASSIFICATION	2.6943296946593315E-4	DEFECT
an association	WITHOUT_CLASSIFICATION	0.999975914581486	WITHOUT_CLASSIFICATION	2.408541851395418E-5	DEFECT
allow index() function:	WITHOUT_CLASSIFICATION	0.9998791926496479	WITHOUT_CLASSIFICATION	1.2080735035211261E-4	DEFECT
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.8787124684477838	WITHOUT_CLASSIFICATION	0.12128753155221612	DEFECT
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9954461361484422	WITHOUT_CLASSIFICATION	0.004553863851557814	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
collections of values	WITHOUT_CLASSIFICATION	0.9999232955580688	WITHOUT_CLASSIFICATION	7.670444193119489E-5	DEFECT
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999821793117659	WITHOUT_CLASSIFICATION	1.7820688234116225E-4	DEFECT
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992956550227808	WITHOUT_CLASSIFICATION	7.043449772191192E-4	DEFECT
special case	WITHOUT_CLASSIFICATION	0.9998193065786689	WITHOUT_CLASSIFICATION	1.8069342133105248E-4	DEFECT
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999629802143971	WITHOUT_CLASSIFICATION	3.7019785602792704E-5	DEFECT
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999616211917978	WITHOUT_CLASSIFICATION	3.837880820213817E-5	DEFECT
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9905976173741328	WITHOUT_CLASSIFICATION	0.009402382625867225	DEFECT
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999777555827672	WITHOUT_CLASSIFICATION	2.2244417232811242E-4	DEFECT
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988252502329679	WITHOUT_CLASSIFICATION	0.0011747497670321278	DEFECT
register collection role	WITHOUT_CLASSIFICATION	0.9999281059116305	WITHOUT_CLASSIFICATION	7.189408836955932E-5	DEFECT
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999762010375559	WITHOUT_CLASSIFICATION	2.3798962443994484E-5	DEFECT
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999528986047238	WITHOUT_CLASSIFICATION	4.7101395276192225E-5	DEFECT
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997206356133034	WITHOUT_CLASSIFICATION	2.793643866965287E-4	DEFECT
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999389955768831	WITHOUT_CLASSIFICATION	6.100442311678074E-5	DEFECT
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998453849605484	WITHOUT_CLASSIFICATION	1.5461503945157423E-4	DEFECT
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9998180315634805	WITHOUT_CLASSIFICATION	1.819684365194308E-4	DEFECT
many-to-many	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9909769211224154	WITHOUT_CLASSIFICATION	0.009023078877584592	DEFECT
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9995639033314635	WITHOUT_CLASSIFICATION	4.3609666853655513E-4	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9975231645437029	WITHOUT_CLASSIFICATION	0.0024768354562970996	DEFECT
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9975516426828092	WITHOUT_CLASSIFICATION	0.0024483573171908	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998104245426744	WITHOUT_CLASSIFICATION	1.8957545732563384E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998104245426744	WITHOUT_CLASSIFICATION	1.8957545732563384E-4	DEFECT
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999282455395752	WITHOUT_CLASSIFICATION	7.175446042487819E-5	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998104245426744	WITHOUT_CLASSIFICATION	1.8957545732563384E-4	DEFECT
not known!	WITHOUT_CLASSIFICATION	0.9998104245426744	WITHOUT_CLASSIFICATION	1.8957545732563384E-4	DEFECT
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999371016453838	WITHOUT_CLASSIFICATION	6.289835461621118E-4	DEFECT
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997092768804847	WITHOUT_CLASSIFICATION	2.9072311951532613E-4	DEFECT
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997514976365386	WITHOUT_CLASSIFICATION	2.485023634613546E-4	DEFECT
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997514976365386	WITHOUT_CLASSIFICATION	2.485023634613546E-4	DEFECT
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9972107238397921	WITHOUT_CLASSIFICATION	0.002789276160207878	DEFECT
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999448844807549	WITHOUT_CLASSIFICATION	5.511551924507075E-5	DEFECT
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9996352081595706	WITHOUT_CLASSIFICATION	3.647918404293554E-4	DEFECT
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9995309712693242	WITHOUT_CLASSIFICATION	4.690287306757638E-4	DEFECT
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997993064494842	WITHOUT_CLASSIFICATION	2.0069355051572033E-4	DEFECT
Cope with [,]	WITHOUT_CLASSIFICATION	0.9998104956419506	WITHOUT_CLASSIFICATION	1.8950435804939044E-4	DEFECT
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998918300554394	WITHOUT_CLASSIFICATION	1.0816994456062752E-4	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999578064266786	WITHOUT_CLASSIFICATION	4.219357332141961E-5	DEFECT
Cope with a subselect	WITHOUT_CLASSIFICATION	0.999868392597908	WITHOUT_CLASSIFICATION	1.3160740209188982E-4	DEFECT
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997541454832266	WITHOUT_CLASSIFICATION	2.45854516773391E-4	DEFECT
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999231896129852	WITHOUT_CLASSIFICATION	7.681038701489465E-5	DEFECT
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9994960116072702	WITHOUT_CLASSIFICATION	5.039883927298737E-4	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999500499498989	WITHOUT_CLASSIFICATION	4.995005010102312E-5	DEFECT
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999893290561739	WITHOUT_CLASSIFICATION	1.0670943826100065E-4	DEFECT
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999615520833191	WITHOUT_CLASSIFICATION	3.8447916680886947E-4	DEFECT
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9996910913152448	WITHOUT_CLASSIFICATION	3.0890868475523905E-4	DEFECT
the next one up must also be	WITHOUT_CLASSIFICATION	0.9997871758473912	WITHOUT_CLASSIFICATION	2.1282415260888055E-4	DEFECT
Add any joins	WITHOUT_CLASSIFICATION	0.9999434690740211	WITHOUT_CLASSIFICATION	5.653092597904573E-5	DEFECT
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999500499498989	WITHOUT_CLASSIFICATION	4.995005010102312E-5	DEFECT
named query parameter	WITHOUT_CLASSIFICATION	0.9999188037054421	WITHOUT_CLASSIFICATION	8.119629455788274E-5	DEFECT
path expression	WITHOUT_CLASSIFICATION	0.999920315667857	WITHOUT_CLASSIFICATION	7.968433214301118E-5	DEFECT
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9983689475669961	WITHOUT_CLASSIFICATION	0.0016310524330038815	DEFECT
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.997811022002162	WITHOUT_CLASSIFICATION	0.002188977997838033	DEFECT
anything else	WITHOUT_CLASSIFICATION	0.9995724803467819	WITHOUT_CLASSIFICATION	4.2751965321799295E-4	DEFECT
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999435764240551	WITHOUT_CLASSIFICATION	5.642357594488229E-5	DEFECT
careful with this!	WITHOUT_CLASSIFICATION	0.9997951314169111	WITHOUT_CLASSIFICATION	2.0486858308893296E-4	DEFECT
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999226020478	WITHOUT_CLASSIFICATION	7.739795219997908E-5	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999116844761973	WITHOUT_CLASSIFICATION	8.831552380265213E-5	DEFECT
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999990097852549	WITHOUT_CLASSIFICATION	9.902147450177598E-7	DEFECT
cannot instantiate	WITHOUT_CLASSIFICATION	0.999858224008819	WITHOUT_CLASSIFICATION	1.4177599118104142E-4	DEFECT
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998288124698376	WITHOUT_CLASSIFICATION	1.7118753016237694E-4	DEFECT
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999618586960765	WITHOUT_CLASSIFICATION	3.8141303923508376E-4	DEFECT
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998051972123934	WITHOUT_CLASSIFICATION	1.9480278760663984E-4	DEFECT
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9950586675314681	WITHOUT_CLASSIFICATION	0.004941332468531883	DEFECT
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999819164363359	WITHOUT_CLASSIFICATION	1.8083563664078746E-5	DEFECT
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999132314031586	WITHOUT_CLASSIFICATION	8.676859684146368E-5	DEFECT
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999636907105033	WITHOUT_CLASSIFICATION	3.630928949676982E-5	DEFECT
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9994017902932769	WITHOUT_CLASSIFICATION	5.982097067230478E-4	DEFECT
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999011163296357	WITHOUT_CLASSIFICATION	9.888367036425019E-5	DEFECT
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998459558283658	WITHOUT_CLASSIFICATION	1.5404417163431764E-4	DEFECT
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998283462354157	WITHOUT_CLASSIFICATION	1.716537645843421E-4	DEFECT
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999978422632686	WITHOUT_CLASSIFICATION	2.1577367313927358E-6	DEFECT
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999116844761973	WITHOUT_CLASSIFICATION	8.831552380265213E-5	DEFECT
ignore whitespace	WITHOUT_CLASSIFICATION	0.9998928095648177	WITHOUT_CLASSIFICATION	1.0719043518221396E-4	DEFECT
do replacements	WITHOUT_CLASSIFICATION	0.9998933163291158	WITHOUT_CLASSIFICATION	1.0668367088422434E-4	DEFECT
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999683311121641	WITHOUT_CLASSIFICATION	3.1668887835881496E-5	DEFECT
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998790960227641	WITHOUT_CLASSIFICATION	1.209039772357725E-4	DEFECT
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
hilo params	WITHOUT_CLASSIFICATION	0.999814905149658	WITHOUT_CLASSIFICATION	1.8509485034199643E-4	DEFECT
sql = query;	WITHOUT_CLASSIFICATION	0.9997716613841314	WITHOUT_CLASSIFICATION	2.2833861586859153E-4	DEFECT
performance opt	WITHOUT_CLASSIFICATION	0.9996075330441381	WITHOUT_CLASSIFICATION	3.924669558619621E-4	DEFECT
sql = update;	WITHOUT_CLASSIFICATION	0.9997718814074275	WITHOUT_CLASSIFICATION	2.2811859257248213E-4	DEFECT
hilo config	WITHOUT_CLASSIFICATION	0.9998107763370685	WITHOUT_CLASSIFICATION	1.8922366293150892E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999759534426416	WITHOUT_CLASSIFICATION	2.4046557358488416E-5	DEFECT
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9996497801783095	WITHOUT_CLASSIFICATION	3.50219821690525E-4	DEFECT
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999592031498737	WITHOUT_CLASSIFICATION	4.0796850126340675E-5	DEFECT
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999703331045455	WITHOUT_CLASSIFICATION	2.9666895454500655E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999515360233189	WITHOUT_CLASSIFICATION	4.8463976681140694E-5	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997713697272325	WITHOUT_CLASSIFICATION	2.286302727675413E-4	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999759534426416	WITHOUT_CLASSIFICATION	2.4046557358488416E-5	DEFECT
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999811034138373	WITHOUT_CLASSIFICATION	1.889658616273541E-5	DEFECT
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9972716442177995	WITHOUT_CLASSIFICATION	0.0027283557822004893	DEFECT
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9998025027347149	WITHOUT_CLASSIFICATION	1.9749726528500627E-4	DEFECT
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998059972794295	WITHOUT_CLASSIFICATION	1.9400272057051385E-4	DEFECT
the default...	WITHOUT_CLASSIFICATION	0.9998385020937218	WITHOUT_CLASSIFICATION	1.614979062782622E-4	DEFECT
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9998875713136195	WITHOUT_CLASSIFICATION	1.1242868638060078E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9998220916143558	WITHOUT_CLASSIFICATION	1.7790838564428534E-4	DEFECT
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997711380649664	WITHOUT_CLASSIFICATION	2.2886193503346926E-4	DEFECT
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997977040786266	WITHOUT_CLASSIFICATION	2.0229592137353597E-4	DEFECT
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094283388119	WITHOUT_CLASSIFICATION	2.9057166118797123E-4	DEFECT
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094283388119	WITHOUT_CLASSIFICATION	2.9057166118797123E-4	DEFECT
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094283388119	WITHOUT_CLASSIFICATION	2.9057166118797123E-4	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999318259692046	WITHOUT_CLASSIFICATION	6.817403079546561E-5	DEFECT
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999318259692046	WITHOUT_CLASSIFICATION	6.817403079546561E-5	DEFECT
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999107570860818	WITHOUT_CLASSIFICATION	8.924291391809647E-5	DEFECT
we just hit the last position	WITHOUT_CLASSIFICATION	0.999990963361087	WITHOUT_CLASSIFICATION	9.03663891306257E-6	DEFECT
scroll ahead	WITHOUT_CLASSIFICATION	0.9994851618264183	WITHOUT_CLASSIFICATION	5.148381735816746E-4	DEFECT
scroll backward	WITHOUT_CLASSIFICATION	0.9995699870719275	WITHOUT_CLASSIFICATION	4.3001292807254353E-4	DEFECT
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9922582513199169	WITHOUT_CLASSIFICATION	0.007741748680083163	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551479838597	WITHOUT_CLASSIFICATION	2.448520161403684E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997848974615641	WITHOUT_CLASSIFICATION	2.1510253843592733E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9986409090190845	WITHOUT_CLASSIFICATION	0.0013590909809154462	DEFECT
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999099132866427	WITHOUT_CLASSIFICATION	9.008671335733803E-5	DEFECT
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551479838597	WITHOUT_CLASSIFICATION	2.448520161403684E-4	DEFECT
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997848974615641	WITHOUT_CLASSIFICATION	2.1510253843592733E-4	DEFECT
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
Caches	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
Generators:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999666308999224	WITHOUT_CLASSIFICATION	3.336910007760268E-5	DEFECT
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998754148250107	WITHOUT_CLASSIFICATION	1.245851749891969E-4	DEFECT
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999761154395861	WITHOUT_CLASSIFICATION	2.3884560413921778E-5	DEFECT
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9825184944299238	WITHOUT_CLASSIFICATION	0.017481505570076245	DEFECT
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998852579440417	WITHOUT_CLASSIFICATION	1.1474205595827822E-4	DEFECT
checking for named queries	WITHOUT_CLASSIFICATION	0.9998836751331603	WITHOUT_CLASSIFICATION	1.1632486683965281E-4	DEFECT
stats	WITHOUT_CLASSIFICATION	0.9999763463450353	WITHOUT_CLASSIFICATION	2.365365496462345E-5	DEFECT
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999675438058492	WITHOUT_CLASSIFICATION	3.2456194150881084E-5	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.997397256085051	WITHOUT_CLASSIFICATION	0.002602743914948994	DEFECT
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.991031890835353	WITHOUT_CLASSIFICATION	0.008968109164646928	DEFECT
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9996780455884682	WITHOUT_CLASSIFICATION	3.2195441153179497E-4	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999605606971448	WITHOUT_CLASSIFICATION	3.9439302855139E-5	DEFECT
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997601284269209	WITHOUT_CLASSIFICATION	2.3987157307912252E-4	DEFECT
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999776066278285	WITHOUT_CLASSIFICATION	2.2393372171505903E-4	DEFECT
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998538944125291	WITHOUT_CLASSIFICATION	1.461055874709611E-4	DEFECT
for backward-compatability	WITHOUT_CLASSIFICATION	0.9998491720802699	WITHOUT_CLASSIFICATION	1.5082791973015984E-4	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997105689873128	WITHOUT_CLASSIFICATION	2.894310126872476E-4	DEFECT
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9966117889975337	WITHOUT_CLASSIFICATION	0.0033882110024662697	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999960840684754	WITHOUT_CLASSIFICATION	3.915931524578469E-6	DEFECT
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998581247557372	WITHOUT_CLASSIFICATION	1.4187524426282808E-4	DEFECT
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999888208624967	WITHOUT_CLASSIFICATION	1.1179137503218834E-5	DEFECT
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999923331899627	WITHOUT_CLASSIFICATION	7.666810037299999E-6	DEFECT
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9925973700381489	WITHOUT_CLASSIFICATION	0.007402629961851182	DEFECT
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997521739268093	WITHOUT_CLASSIFICATION	2.478260731908264E-4	DEFECT
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999990337356915	WITHOUT_CLASSIFICATION	9.662643084254688E-7	DEFECT
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997896419525615	WITHOUT_CLASSIFICATION	2.1035804743850715E-4	DEFECT
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99971011325224	WITHOUT_CLASSIFICATION	2.8988674775997E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998739747616515	WITHOUT_CLASSIFICATION	1.2602523834851387E-4	DEFECT
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9998739747616515	WITHOUT_CLASSIFICATION	1.2602523834851387E-4	DEFECT
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997545240079655	WITHOUT_CLASSIFICATION	2.4547599203444644E-4	DEFECT
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.99149227798683	WITHOUT_CLASSIFICATION	0.00850772201317001	DEFECT
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998250570368351	WITHOUT_CLASSIFICATION	1.7494296316488396E-4	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999774901328234	WITHOUT_CLASSIFICATION	2.2509867176594507E-5	DEFECT
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998341321403689	WITHOUT_CLASSIFICATION	1.658678596312188E-4	DEFECT
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999465253007679	WITHOUT_CLASSIFICATION	5.347469923211876E-5	DEFECT
for EJB3	WITHOUT_CLASSIFICATION	0.999970861523035	WITHOUT_CLASSIFICATION	2.9138476964942078E-5	DEFECT
just ignore	WITHOUT_CLASSIFICATION	0.9999681787657269	WITHOUT_CLASSIFICATION	3.182123427315742E-5	DEFECT
do a check	WITHOUT_CLASSIFICATION	0.999993855707563	WITHOUT_CLASSIFICATION	6.144292436855342E-6	DEFECT
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997341828949746	WITHOUT_CLASSIFICATION	2.6581710502527586E-4	DEFECT
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729909877242	WITHOUT_CLASSIFICATION	2.700901227580988E-4	DEFECT
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997307801450913	WITHOUT_CLASSIFICATION	2.6921985490866227E-4	DEFECT
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.997899176792731	WITHOUT_CLASSIFICATION	0.002100823207269014	DEFECT
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9993581730757503	WITHOUT_CLASSIFICATION	6.418269242497517E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997454319552354	WITHOUT_CLASSIFICATION	2.545680447646629E-4	DEFECT
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9982818692511677	WITHOUT_CLASSIFICATION	0.0017181307488322772	DEFECT
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999475790278745	WITHOUT_CLASSIFICATION	5.242097212552067E-5	DEFECT
not for internal use:	WITHOUT_CLASSIFICATION	0.999089800045968	WITHOUT_CLASSIFICATION	9.101999540319239E-4	DEFECT
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999725120758686	WITHOUT_CLASSIFICATION	2.7487924131394523E-4	DEFECT
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9997073706755785	WITHOUT_CLASSIFICATION	2.92629324421504E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997454319552354	WITHOUT_CLASSIFICATION	2.545680447646629E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997454319552354	WITHOUT_CLASSIFICATION	2.545680447646629E-4	DEFECT
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.999957077288135	WITHOUT_CLASSIFICATION	4.292271186504888E-5	DEFECT
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999482253643076	WITHOUT_CLASSIFICATION	5.177463569231022E-5	DEFECT
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997030905110393	WITHOUT_CLASSIFICATION	2.9690948896060024E-4	DEFECT
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9998585816037556	WITHOUT_CLASSIFICATION	1.4141839624429617E-4	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999837337396063	WITHOUT_CLASSIFICATION	1.626626039367791E-5	DEFECT
ignore this error for now	WITHOUT_CLASSIFICATION	0.9997105689873128	WITHOUT_CLASSIFICATION	2.894310126872476E-4	DEFECT
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9997667082897411	WITHOUT_CLASSIFICATION	2.3329171025893657E-4	DEFECT
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999893115474448	WITHOUT_CLASSIFICATION	1.0688452555201776E-4	DEFECT
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999035145957695	WITHOUT_CLASSIFICATION	9.648540423043505E-5	DEFECT
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997776472258637	WITHOUT_CLASSIFICATION	2.2235277413639595E-4	DEFECT
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9994097355829482	WITHOUT_CLASSIFICATION	5.902644170517547E-4	DEFECT
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998801609072041	WITHOUT_CLASSIFICATION	1.1983909279581921E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996913279674006	WITHOUT_CLASSIFICATION	3.08672032599416E-4	DEFECT
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9996913279674006	WITHOUT_CLASSIFICATION	3.08672032599416E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996913279674006	WITHOUT_CLASSIFICATION	3.08672032599416E-4	DEFECT
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996913279674006	WITHOUT_CLASSIFICATION	3.08672032599416E-4	DEFECT
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998390572308227	WITHOUT_CLASSIFICATION	1.6094276917735545E-4	DEFECT
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9988931502230818	WITHOUT_CLASSIFICATION	0.0011068497769182405	DEFECT
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9785644862624703	WITHOUT_CLASSIFICATION	0.021435513737529655	DEFECT
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998433149436038	WITHOUT_CLASSIFICATION	1.5668505639634202E-4	DEFECT
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997576378115288	WITHOUT_CLASSIFICATION	2.4236218847124375E-4	DEFECT
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998394078012113	WITHOUT_CLASSIFICATION	1.6059219878872388E-4	DEFECT
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999341365365576	WITHOUT_CLASSIFICATION	6.586346344243279E-5	DEFECT
used from testsuite	WITHOUT_CLASSIFICATION	0.999938243300669	WITHOUT_CLASSIFICATION	6.175669933099782E-5	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999810612639104	WITHOUT_CLASSIFICATION	1.8938736089651262E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9998254690792007	WITHOUT_CLASSIFICATION	1.7453092079940282E-4	DEFECT
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999172160468008	WITHOUT_CLASSIFICATION	8.278395319916719E-5	DEFECT
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996433781983216	WITHOUT_CLASSIFICATION	3.5662180167842655E-4	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999555767950646	WITHOUT_CLASSIFICATION	4.4423204935249887E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999555767950646	WITHOUT_CLASSIFICATION	4.4423204935249887E-5	DEFECT
no big deal	WITHOUT_CLASSIFICATION	0.9999555767950646	WITHOUT_CLASSIFICATION	4.4423204935249887E-5	DEFECT
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999320304105946	WITHOUT_CLASSIFICATION	6.796958940536284E-5	DEFECT
see explanation above...	WITHOUT_CLASSIFICATION	0.9999450480301535	WITHOUT_CLASSIFICATION	5.4951969846555214E-5	DEFECT
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999860391753547	WITHOUT_CLASSIFICATION	1.3960824645376352E-5	DEFECT
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996542478768056	WITHOUT_CLASSIFICATION	3.4575212319443047E-4	DEFECT
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9993231197856636	WITHOUT_CLASSIFICATION	6.768802143363515E-4	DEFECT
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094283388119	WITHOUT_CLASSIFICATION	2.9057166118797123E-4	DEFECT
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9996622404341079	WITHOUT_CLASSIFICATION	3.377595658920378E-4	DEFECT
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999088505090923	WITHOUT_CLASSIFICATION	9.114949090774172E-5	DEFECT
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999783956799934	WITHOUT_CLASSIFICATION	2.1604320006618604E-5	DEFECT
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9866810918882654	WITHOUT_CLASSIFICATION	0.013318908111734702	DEFECT
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997667534046872	WITHOUT_CLASSIFICATION	2.3324659531271972E-4	DEFECT
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998129266449288	WITHOUT_CLASSIFICATION	1.8707335507122888E-4	DEFECT
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999610110406055	WITHOUT_CLASSIFICATION	3.898895939457574E-5	DEFECT
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9943794060990611	WITHOUT_CLASSIFICATION	0.005620593900938959	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998811317211526	WITHOUT_CLASSIFICATION	1.1886827884741842E-4	DEFECT
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.998561851503117	WITHOUT_CLASSIFICATION	0.0014381484968829636	DEFECT
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9990928213328892	WITHOUT_CLASSIFICATION	9.07178667110745E-4	DEFECT
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998226497134431	WITHOUT_CLASSIFICATION	1.7735028655677145E-4	DEFECT
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999990493865273	WITHOUT_CLASSIFICATION	9.506134727766062E-7	DEFECT
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999941843238139	WITHOUT_CLASSIFICATION	5.815676186121721E-6	DEFECT
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999951520794347	WITHOUT_CLASSIFICATION	4.847920565344686E-6	DEFECT
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999849884315287	WITHOUT_CLASSIFICATION	1.5011568471405575E-5	DEFECT
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9998972515460122	WITHOUT_CLASSIFICATION	1.0274845398787357E-4	DEFECT
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994455796178013	WITHOUT_CLASSIFICATION	5.544203821987589E-4	DEFECT
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.991171744995758	WITHOUT_CLASSIFICATION	0.008828255004241994	DEFECT
final String queryString,	WITHOUT_CLASSIFICATION	0.9999414679621884	WITHOUT_CLASSIFICATION	5.853203781150051E-5	DEFECT
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999321607911485	WITHOUT_CLASSIFICATION	6.783920885136692E-5	DEFECT
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998661159621495	WITHOUT_CLASSIFICATION	1.3388403785061695E-4	DEFECT
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999927605402097	WITHOUT_CLASSIFICATION	7.2394597903398E-6	DEFECT
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999945022721389	WITHOUT_CLASSIFICATION	5.4977278611032796E-5	DEFECT
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9992536126515795	WITHOUT_CLASSIFICATION	7.463873484204364E-4	DEFECT
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999789705604095	WITHOUT_CLASSIFICATION	2.102943959057784E-5	DEFECT
getResultList(results);	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9994346094274775	WITHOUT_CLASSIFICATION	5.653905725225031E-4	DEFECT
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9996385187434724	WITHOUT_CLASSIFICATION	3.614812565275511E-4	DEFECT
handle empty collection	WITHOUT_CLASSIFICATION	0.9999847557736136	WITHOUT_CLASSIFICATION	1.5244226386437776E-5	DEFECT
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999966487334035	WITHOUT_CLASSIFICATION	3.351266596498464E-5	DEFECT
handle empty collections	WITHOUT_CLASSIFICATION	0.9999814943759783	WITHOUT_CLASSIFICATION	1.850562402168141E-5	DEFECT
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9941950064893191	WITHOUT_CLASSIFICATION	0.005804993510680888	DEFECT
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9998148807479194	WITHOUT_CLASSIFICATION	1.8511925208066277E-4	DEFECT
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9997330335613355	WITHOUT_CLASSIFICATION	2.6696643866453215E-4	DEFECT
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9996878831206684	WITHOUT_CLASSIFICATION	3.121168793316878E-4	DEFECT
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998694477897309	WITHOUT_CLASSIFICATION	1.305522102690907E-4	DEFECT
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997029281357612	WITHOUT_CLASSIFICATION	2.970718642388197E-4	DEFECT
use the id passed in	WITHOUT_CLASSIFICATION	0.9998729172985954	WITHOUT_CLASSIFICATION	1.270827014045734E-4	DEFECT
do nothing	WITHOUT_CLASSIFICATION	0.999993540001114	WITHOUT_CLASSIFICATION	6.459998886119648E-6	DEFECT
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999713488855027	WITHOUT_CLASSIFICATION	2.865111449729695E-4	DEFECT
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999978950662476	WITHOUT_CLASSIFICATION	2.1049337524011552E-5	DEFECT
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999978656264445	WITHOUT_CLASSIFICATION	2.1343735554996068E-5	DEFECT
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998155264485702	WITHOUT_CLASSIFICATION	1.8447355142974593E-4	DEFECT
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9980001783352054	WITHOUT_CLASSIFICATION	0.0019998216647945885	DEFECT
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9976983054064879	WITHOUT_CLASSIFICATION	0.0023016945935121534	DEFECT
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9997014366149563	WITHOUT_CLASSIFICATION	2.9856338504373535E-4	DEFECT
look for a proxy	WITHOUT_CLASSIFICATION	0.9998643958657177	WITHOUT_CLASSIFICATION	1.3560413428225773E-4	DEFECT
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997183256863029	WITHOUT_CLASSIFICATION	2.816743136970231E-4	DEFECT
its the given optional object	WITHOUT_CLASSIFICATION	0.9999824116371099	WITHOUT_CLASSIFICATION	1.7588362890119072E-5	DEFECT
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999655423601934	WITHOUT_CLASSIFICATION	3.445763980663182E-5	DEFECT
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9997323834463968	WITHOUT_CLASSIFICATION	2.6761655360310946E-4	DEFECT
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999886454787466	WITHOUT_CLASSIFICATION	1.1354521253464533E-5	DEFECT
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9997720982574114	WITHOUT_CLASSIFICATION	2.279017425885134E-4	DEFECT
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999717549788301	WITHOUT_CLASSIFICATION	2.8245021169989303E-5	DEFECT
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999143693673678	WITHOUT_CLASSIFICATION	8.563063263223092E-5	DEFECT
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9998370421465796	WITHOUT_CLASSIFICATION	1.6295785342047833E-4	DEFECT
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998025489032347	WITHOUT_CLASSIFICATION	1.9745109676531992E-4	DEFECT
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9991246083920043	WITHOUT_CLASSIFICATION	8.753916079955365E-4	DEFECT
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9997812805516569	WITHOUT_CLASSIFICATION	2.1871944834295535E-4	DEFECT
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9977949421420396	WITHOUT_CLASSIFICATION	0.0022050578579605	DEFECT
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998559946640286	WITHOUT_CLASSIFICATION	1.440053359713814E-4	DEFECT
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998870868646459	WITHOUT_CLASSIFICATION	1.1291313535418422E-4	DEFECT
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999786130414902	WITHOUT_CLASSIFICATION	2.13869585099276E-5	DEFECT
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999309139164284	WITHOUT_CLASSIFICATION	6.908608357162925E-5	DEFECT
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.99997923017935	WITHOUT_CLASSIFICATION	2.0769820649992603E-5	DEFECT
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999657831635215	WITHOUT_CLASSIFICATION	3.421683647840056E-5	DEFECT
before adding to collection!	WITHOUT_CLASSIFICATION	0.9996070432712452	WITHOUT_CLASSIFICATION	3.929567287548923E-4	DEFECT
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999275808596777	WITHOUT_CLASSIFICATION	7.241914032222868E-5	DEFECT
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999854243061129	WITHOUT_CLASSIFICATION	1.4575693887115847E-5	DEFECT
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9997733819635782	WITHOUT_CLASSIFICATION	2.2661803642175894E-4	DEFECT
a composite key	WITHOUT_CLASSIFICATION	0.9999015261841452	WITHOUT_CLASSIFICATION	9.847381585479558E-5	DEFECT
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999854007499358	WITHOUT_CLASSIFICATION	1.4599250064206514E-4	DEFECT
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998712578973232	WITHOUT_CLASSIFICATION	1.287421026767647E-4	DEFECT
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999103324615857	WITHOUT_CLASSIFICATION	8.966753841438838E-5	DEFECT
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9997722602172108	WITHOUT_CLASSIFICATION	2.277397827892792E-4	DEFECT
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9995431403285612	WITHOUT_CLASSIFICATION	4.5685967143879405E-4	DEFECT
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8712183934729096	WITHOUT_CLASSIFICATION	0.12878160652709036	DEFECT
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9997977635631974	WITHOUT_CLASSIFICATION	2.0223643680257762E-4	DEFECT
we found it	WITHOUT_CLASSIFICATION	0.9999021600688345	WITHOUT_CLASSIFICATION	9.783993116543359E-5	DEFECT
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999623089871202	WITHOUT_CLASSIFICATION	3.769101287966615E-5	DEFECT
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9989796689877561	WITHOUT_CLASSIFICATION	0.0010203310122438376	DEFECT
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998509678377515	WITHOUT_CLASSIFICATION	1.4903216224844553E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9987811350227923	WITHOUT_CLASSIFICATION	0.0012188649772076731	DEFECT
root entity comes last	WITHOUT_CLASSIFICATION	0.9998562173593077	WITHOUT_CLASSIFICATION	1.4378264069231405E-4	DEFECT
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999525533815462	WITHOUT_CLASSIFICATION	4.74466184539025E-5	DEFECT
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.999571357351259	WITHOUT_CLASSIFICATION	4.2864264874101086E-4	DEFECT
if it is a compound path	WITHOUT_CLASSIFICATION	0.999820508617313	WITHOUT_CLASSIFICATION	1.7949138268708877E-4	DEFECT
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999295874606628	WITHOUT_CLASSIFICATION	7.041253933711657E-5	DEFECT
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999836143503131	WITHOUT_CLASSIFICATION	1.638564968696895E-5	DEFECT
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9998384729160742	WITHOUT_CLASSIFICATION	1.6152708392575725E-4	DEFECT
the criteria instance	WITHOUT_CLASSIFICATION	0.9999526043786469	WITHOUT_CLASSIFICATION	4.739562135315849E-5	DEFECT
the entity name	WITHOUT_CLASSIFICATION	0.9998955637732867	WITHOUT_CLASSIFICATION	1.0443622671327568E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996910376208247	WITHOUT_CLASSIFICATION	3.089623791752904E-4	DEFECT
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996910376208247	WITHOUT_CLASSIFICATION	3.089623791752904E-4	DEFECT
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997297209560535	WITHOUT_CLASSIFICATION	2.7027904394647103E-4	DEFECT
should never happen, i think	WITHOUT_CLASSIFICATION	0.9768835216794968	WITHOUT_CLASSIFICATION	0.023116478320503224	DEFECT
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998741361347256	WITHOUT_CLASSIFICATION	1.2586386527433364E-4	DEFECT
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9948493195243787	WITHOUT_CLASSIFICATION	0.005150680475621211	DEFECT
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9996923558262699	WITHOUT_CLASSIFICATION	3.076441737300156E-4	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9914798332472767	WITHOUT_CLASSIFICATION	0.00852016675272322	DEFECT
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998021861397508	WITHOUT_CLASSIFICATION	1.9781386024915094E-4	DEFECT
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9971784275631917	WITHOUT_CLASSIFICATION	0.002821572436808322	DEFECT
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9996705765165098	WITHOUT_CLASSIFICATION	3.2942348349023783E-4	DEFECT
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9978707934661191	WITHOUT_CLASSIFICATION	0.0021292065338808968	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99997084321058	WITHOUT_CLASSIFICATION	2.915678941991691E-5	DEFECT
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999880733685353	WITHOUT_CLASSIFICATION	1.1926631464692572E-4	DEFECT
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998732365665555	WITHOUT_CLASSIFICATION	1.267634334444758E-4	DEFECT
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999728839344072	WITHOUT_CLASSIFICATION	2.7116065592756317E-5	DEFECT
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9991767267911655	WITHOUT_CLASSIFICATION	8.232732088345194E-4	DEFECT
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998720295120647	WITHOUT_CLASSIFICATION	1.2797048793530407E-4	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9968297379877357	WITHOUT_CLASSIFICATION	0.0031702620122643246	DEFECT
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9968297379877357	WITHOUT_CLASSIFICATION	0.0031702620122643246	DEFECT
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9997886824276928	WITHOUT_CLASSIFICATION	2.113175723072163E-4	DEFECT
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996662581519247	WITHOUT_CLASSIFICATION	3.337418480752672E-4	DEFECT
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999726966894197	WITHOUT_CLASSIFICATION	2.7303310580286155E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997851956770412	WITHOUT_CLASSIFICATION	2.1480432295876268E-4	DEFECT
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997530099651698	WITHOUT_CLASSIFICATION	2.469900348302374E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998744017825204	WITHOUT_CLASSIFICATION	1.2559821747954616E-4	DEFECT
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997530099651698	WITHOUT_CLASSIFICATION	2.469900348302374E-4	DEFECT
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999618918031207	WITHOUT_CLASSIFICATION	3.81081968793922E-5	DEFECT
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996894754333585	WITHOUT_CLASSIFICATION	3.105245666414996E-4	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999817689853776	WITHOUT_CLASSIFICATION	1.823101462237255E-5	DEFECT
already been processed...	WITHOUT_CLASSIFICATION	0.9999817689853776	WITHOUT_CLASSIFICATION	1.823101462237255E-5	DEFECT
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9998876811457386	WITHOUT_CLASSIFICATION	1.1231885426141502E-4	DEFECT
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999070662032223	WITHOUT_CLASSIFICATION	9.29337967776728E-5	DEFECT
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999908027584627	WITHOUT_CLASSIFICATION	9.197241537292181E-5	DEFECT
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9993030043743562	WITHOUT_CLASSIFICATION	6.969956256439283E-4	DEFECT
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9925488857239164	WITHOUT_CLASSIFICATION	0.007451114276083523	DEFECT
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9993652672955258	WITHOUT_CLASSIFICATION	6.347327044742166E-4	DEFECT
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9997784419588057	WITHOUT_CLASSIFICATION	2.2155804119431883E-4	DEFECT
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9997369994357146	WITHOUT_CLASSIFICATION	2.630005642854245E-4	DEFECT
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998890353846793	WITHOUT_CLASSIFICATION	1.1096461532068404E-4	DEFECT
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9887914897784637	WITHOUT_CLASSIFICATION	0.011208510221536327	DEFECT
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991258935619526	WITHOUT_CLASSIFICATION	8.741064380475059E-4	DEFECT
make a new one	WITHOUT_CLASSIFICATION	0.9996981824694952	WITHOUT_CLASSIFICATION	3.0181753050482975E-4	DEFECT
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.999315087386475	WITHOUT_CLASSIFICATION	6.849126135250804E-4	DEFECT
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998963249766909	WITHOUT_CLASSIFICATION	1.0367502330903298E-4	DEFECT
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997680459666314	WITHOUT_CLASSIFICATION	2.3195403336866258E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995684693297372	WITHOUT_CLASSIFICATION	4.315306702628995E-4	DEFECT
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
by default	WITHOUT_CLASSIFICATION	0.999996690626744	WITHOUT_CLASSIFICATION	3.3093732560454793E-6	DEFECT
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9978828688336734	WITHOUT_CLASSIFICATION	0.0021171311663265853	DEFECT
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.999746502051436	WITHOUT_CLASSIFICATION	2.5349794856401335E-4	DEFECT
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9997831601606129	WITHOUT_CLASSIFICATION	2.1683983938719045E-4	DEFECT
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997957915159008	WITHOUT_CLASSIFICATION	2.0420848409918264E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9998248098252676	WITHOUT_CLASSIFICATION	1.7519017473245353E-4	DEFECT
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9998848873096856	WITHOUT_CLASSIFICATION	1.1511269031434619E-4	DEFECT
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998968632788627	WITHOUT_CLASSIFICATION	1.0313672113719256E-4	DEFECT
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996533745514685	WITHOUT_CLASSIFICATION	3.4662544853144683E-4	DEFECT
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9994150498618284	WITHOUT_CLASSIFICATION	5.849501381715356E-4	DEFECT
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999962728803958	WITHOUT_CLASSIFICATION	3.727119604248999E-6	DEFECT
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9993281657120474	WITHOUT_CLASSIFICATION	6.718342879526376E-4	DEFECT
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9998558022678931	WITHOUT_CLASSIFICATION	1.4419773210696128E-4	DEFECT
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999635638157818	WITHOUT_CLASSIFICATION	3.64361842182621E-5	DEFECT
usually useless	WITHOUT_CLASSIFICATION	0.9998433844815927	WITHOUT_CLASSIFICATION	1.5661551840729512E-4	DEFECT
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9902602770790101	WITHOUT_CLASSIFICATION	0.009739722920989907	DEFECT
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9947887516903846	WITHOUT_CLASSIFICATION	0.005211248309615338	DEFECT
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9998036666629332	WITHOUT_CLASSIFICATION	1.9633333706671046E-4	DEFECT
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9995273941862275	WITHOUT_CLASSIFICATION	4.7260581377247315E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.999636877468458	WITHOUT_CLASSIFICATION	3.631225315419489E-4	DEFECT
may be final	WITHOUT_CLASSIFICATION	0.999636877468458	WITHOUT_CLASSIFICATION	3.631225315419489E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.999975745292593	WITHOUT_CLASSIFICATION	2.4254707406998266E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999192478356943	WITHOUT_CLASSIFICATION	8.075216430577789E-5	DEFECT
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9996526735135387	WITHOUT_CLASSIFICATION	3.4732648646135044E-4	DEFECT
ignore it...	WITHOUT_CLASSIFICATION	0.9998546835374934	WITHOUT_CLASSIFICATION	1.4531646250659947E-4	DEFECT
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999507373071909	WITHOUT_CLASSIFICATION	4.92626928091086E-4	DEFECT
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9996519412289211	WITHOUT_CLASSIFICATION	3.4805877107889815E-4	DEFECT
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9993186180213521	WITHOUT_CLASSIFICATION	6.813819786479623E-4	DEFECT
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9969396796007179	WITHOUT_CLASSIFICATION	0.0030603203992820172	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.999975745292593	WITHOUT_CLASSIFICATION	2.4254707406998266E-5	DEFECT
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999192478356943	WITHOUT_CLASSIFICATION	8.075216430577789E-5	DEFECT
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998778273334217	WITHOUT_CLASSIFICATION	1.2217266657833643E-4	DEFECT
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998353976732449	WITHOUT_CLASSIFICATION	1.646023267551072E-4	DEFECT
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999937718619236	WITHOUT_CLASSIFICATION	6.228138076391759E-6	DEFECT
index should be last column listed	WITHOUT_CLASSIFICATION	0.9992196565405156	WITHOUT_CLASSIFICATION	7.803434594844726E-4	DEFECT
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9996875772866834	WITHOUT_CLASSIFICATION	3.1242271331655505E-4	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9989263379250999	WITHOUT_CLASSIFICATION	0.0010736620749000495	DEFECT
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999249912552208	WITHOUT_CLASSIFICATION	7.5008744779151E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.999980110973567	WITHOUT_CLASSIFICATION	1.988902643302199E-5	DEFECT
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999557805402972	WITHOUT_CLASSIFICATION	4.421945970271704E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9988788507608904	WITHOUT_CLASSIFICATION	0.0011211492391095294	DEFECT
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999951330617477	WITHOUT_CLASSIFICATION	4.8669382523020154E-5	DEFECT
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9988788507608904	WITHOUT_CLASSIFICATION	0.0011211492391095294	DEFECT
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9991270332176896	WITHOUT_CLASSIFICATION	8.729667823103427E-4	DEFECT
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997812805516569	WITHOUT_CLASSIFICATION	2.1871944834295535E-4	DEFECT
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9991270332176896	WITHOUT_CLASSIFICATION	8.729667823103427E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998481199008424	WITHOUT_CLASSIFICATION	1.5188009915753214E-4	DEFECT
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9922854271967427	WITHOUT_CLASSIFICATION	0.007714572803257357	DEFECT
}	WITHOUT_CLASSIFICATION	0.999980110973567	WITHOUT_CLASSIFICATION	1.988902643302199E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.999980110973567	WITHOUT_CLASSIFICATION	1.988902643302199E-5	DEFECT
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999180894180989	WITHOUT_CLASSIFICATION	8.191058190111962E-5	DEFECT
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999183412961377	WITHOUT_CLASSIFICATION	8.165870386234009E-5	DEFECT
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999180894180989	WITHOUT_CLASSIFICATION	8.191058190111962E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999825028065557	WITHOUT_CLASSIFICATION	1.749719344430173E-4	DEFECT
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999584171531438	WITHOUT_CLASSIFICATION	4.15828468561539E-5	DEFECT
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998780756175509	WITHOUT_CLASSIFICATION	1.2192438244902672E-4	DEFECT
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9998960289960674	WITHOUT_CLASSIFICATION	1.0397100393260581E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998230221503275	WITHOUT_CLASSIFICATION	1.7697784967243322E-4	DEFECT
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999303043352595	WITHOUT_CLASSIFICATION	6.969566474052725E-5	DEFECT
KEY	WITHOUT_CLASSIFICATION	0.9999756735627819	WITHOUT_CLASSIFICATION	2.4326437218174385E-5	DEFECT
columns	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
SQL statements	WITHOUT_CLASSIFICATION	0.9998093933417742	WITHOUT_CLASSIFICATION	1.9060665822568458E-4	DEFECT
extra information about the element type	WITHOUT_CLASSIFICATION	0.9980156749251956	WITHOUT_CLASSIFICATION	0.001984325074804366	DEFECT
types	WITHOUT_CLASSIFICATION	0.9999746339415305	WITHOUT_CLASSIFICATION	2.536605846946524E-5	DEFECT
custom sql	WITHOUT_CLASSIFICATION	0.9999762788733866	WITHOUT_CLASSIFICATION	2.3721126613388646E-5	DEFECT
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997880720990799	WITHOUT_CLASSIFICATION	2.1192790092020274E-4	DEFECT
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998446634389426	WITHOUT_CLASSIFICATION	1.5533656105741576E-4	DEFECT
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9998259397841451	WITHOUT_CLASSIFICATION	1.7406021585494215E-4	DEFECT
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998804929225952	WITHOUT_CLASSIFICATION	1.1950707740477346E-4	DEFECT
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
ELEMENT	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998848618912123	WITHOUT_CLASSIFICATION	1.1513810878764536E-4	DEFECT
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998149881993755	WITHOUT_CLASSIFICATION	1.850118006244371E-4	DEFECT
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997429832564119	WITHOUT_CLASSIFICATION	2.5701674358809864E-4	DEFECT
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9997133019616083	WITHOUT_CLASSIFICATION	2.8669803839165373E-4	DEFECT
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998102813133372	WITHOUT_CLASSIFICATION	1.8971868666278947E-4	DEFECT
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9982497533220545	WITHOUT_CLASSIFICATION	0.0017502466779455528	DEFECT
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9991784039743382	WITHOUT_CLASSIFICATION	8.215960256617468E-4	DEFECT
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9996490756434193	WITHOUT_CLASSIFICATION	3.5092435658075816E-4	DEFECT
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9995805828929208	WITHOUT_CLASSIFICATION	4.1941710707919057E-4	DEFECT
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9575340429168009	WITHOUT_CLASSIFICATION	0.042465957083199	DEFECT
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9996458671911954	WITHOUT_CLASSIFICATION	3.541328088045593E-4	DEFECT
strip leading ','	WITHOUT_CLASSIFICATION	0.9998230221503275	WITHOUT_CLASSIFICATION	1.7697784967243322E-4	DEFECT
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998787175020355	WITHOUT_CLASSIFICATION	1.2128249796450737E-4	DEFECT
needed by arrays	WITHOUT_CLASSIFICATION	0.9998957175709465	WITHOUT_CLASSIFICATION	1.0428242905344458E-4	DEFECT
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9467466091536316	WITHOUT_CLASSIFICATION	0.05325339084636844	DEFECT
an assertion	WITHOUT_CLASSIFICATION	0.9999318494235693	WITHOUT_CLASSIFICATION	6.815057643074242E-5	DEFECT
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999507524415828	WITHOUT_CLASSIFICATION	4.9247558417164646E-5	DEFECT
create all the new entries	WITHOUT_CLASSIFICATION	0.999976231884332	WITHOUT_CLASSIFICATION	2.376811566795926E-5	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999825028065557	WITHOUT_CLASSIFICATION	1.749719344430173E-4	DEFECT
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.999825028065557	WITHOUT_CLASSIFICATION	1.749719344430173E-4	DEFECT
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999111090966617	WITHOUT_CLASSIFICATION	8.889090333832151E-5	DEFECT
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999588022865965	WITHOUT_CLASSIFICATION	4.119771340351533E-5	DEFECT
==elementType ??	WITHOUT_CLASSIFICATION	0.9998093330790988	WITHOUT_CLASSIFICATION	1.906669209012963E-4	DEFECT
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999386146657502	WITHOUT_CLASSIFICATION	6.138533424976626E-5	DEFECT
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9963974880124921	WITHOUT_CLASSIFICATION	0.003602511987507899	DEFECT
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9987102339797843	WITHOUT_CLASSIFICATION	0.0012897660202156064	DEFECT
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9988972290275926	WITHOUT_CLASSIFICATION	0.0011027709724073752	DEFECT
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999406194972088	WITHOUT_CLASSIFICATION	5.938050279114689E-5	DEFECT
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999810171827158	WITHOUT_CLASSIFICATION	1.898281728419062E-4	DEFECT
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997643004742096	WITHOUT_CLASSIFICATION	2.356995257904495E-4	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996367273207829	WITHOUT_CLASSIFICATION	3.6327267921715896E-4	DEFECT
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997880720990799	WITHOUT_CLASSIFICATION	2.1192790092020274E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Custom SQL	WITHOUT_CLASSIFICATION	0.999975745292593	WITHOUT_CLASSIFICATION	2.4254707406998266E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996367273207829	WITHOUT_CLASSIFICATION	3.6327267921715896E-4	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998420281521779	WITHOUT_CLASSIFICATION	1.5797184782218867E-4	DEFECT
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999755633782661	WITHOUT_CLASSIFICATION	2.4436621733877748E-5	DEFECT
chop the last union (all)	WITHOUT_CLASSIFICATION	0.999901330602808	WITHOUT_CLASSIFICATION	9.866939719205166E-5	DEFECT
TODO: check this....	WITHOUT_CLASSIFICATION	0.9705983974279845	WITHOUT_CLASSIFICATION	0.029401602572015576	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9993165758056062	WITHOUT_CLASSIFICATION	6.834241943937521E-4	DEFECT
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9976750277581615	WITHOUT_CLASSIFICATION	0.002324972241838431	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998001977444065	WITHOUT_CLASSIFICATION	1.9980225559345394E-4	DEFECT
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.999650908528379	WITHOUT_CLASSIFICATION	3.490914716210392E-4	DEFECT
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.999975699796683	WITHOUT_CLASSIFICATION	2.4300203317075034E-5	DEFECT
subclass closure properties	WITHOUT_CLASSIFICATION	0.9998473054681545	WITHOUT_CLASSIFICATION	1.5269453184545644E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998880259306823	WITHOUT_CLASSIFICATION	1.1197406931778144E-4	DEFECT
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998880259306823	WITHOUT_CLASSIFICATION	1.1197406931778144E-4	DEFECT
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998488568727741	WITHOUT_CLASSIFICATION	1.5114312722591352E-4	DEFECT
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999517342713511	WITHOUT_CLASSIFICATION	4.8265728648952196E-5	DEFECT
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996367273207829	WITHOUT_CLASSIFICATION	3.6327267921715896E-4	DEFECT
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9993165758056062	WITHOUT_CLASSIFICATION	6.834241943937521E-4	DEFECT
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998001977444065	WITHOUT_CLASSIFICATION	1.9980225559345394E-4	DEFECT
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998607980228651	WITHOUT_CLASSIFICATION	1.392019771349382E-4	DEFECT
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999774644473326	WITHOUT_CLASSIFICATION	2.2535552667372157E-5	DEFECT
discriminator column	WITHOUT_CLASSIFICATION	0.9998373127637044	WITHOUT_CLASSIFICATION	1.6268723629570803E-4	DEFECT
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997621579201618	WITHOUT_CLASSIFICATION	2.3784207983824587E-4	DEFECT
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998329823444533	WITHOUT_CLASSIFICATION	1.670176555466474E-4	DEFECT
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998420281521779	WITHOUT_CLASSIFICATION	1.5797184782218867E-4	DEFECT
JOINS	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9993307363932241	WITHOUT_CLASSIFICATION	6.69263606775788E-4	DEFECT
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998473757974093	WITHOUT_CLASSIFICATION	1.5262420259068614E-4	DEFECT
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9998879409297513	WITHOUT_CLASSIFICATION	1.1205907024865259E-4	DEFECT
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999774230916264	WITHOUT_CLASSIFICATION	2.257690837353251E-5	DEFECT
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999774230916264	WITHOUT_CLASSIFICATION	2.257690837353251E-5	DEFECT
render the SQL	WITHOUT_CLASSIFICATION	0.999865052712111	WITHOUT_CLASSIFICATION	1.3494728788893503E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998481199008424	WITHOUT_CLASSIFICATION	1.5188009915753214E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996871636191468	WITHOUT_CLASSIFICATION	3.12836380853233E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999379855441461	WITHOUT_CLASSIFICATION	6.201445585380476E-5	DEFECT
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9598924131947608	WITHOUT_CLASSIFICATION	0.04010758680523923	DEFECT
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9804830341734321	WITHOUT_CLASSIFICATION	0.019516965826567922	DEFECT
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9902256032765987	WITHOUT_CLASSIFICATION	0.009774396723401163	DEFECT
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9987916902346189	WITHOUT_CLASSIFICATION	0.0012083097653811355	DEFECT
SQL strings	WITHOUT_CLASSIFICATION	0.9992411180548593	WITHOUT_CLASSIFICATION	7.588819451406027E-4	DEFECT
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9992404289528062	WITHOUT_CLASSIFICATION	7.595710471938608E-4	DEFECT
PROPERTIES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
VERSION	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
WHERE STRING	WITHOUT_CLASSIFICATION	0.999810090913639	WITHOUT_CLASSIFICATION	1.899090863610344E-4	DEFECT
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998742445389862	WITHOUT_CLASSIFICATION	1.257554610137008E-4	DEFECT
before add :-)	WITHOUT_CLASSIFICATION	0.9995189847678775	WITHOUT_CLASSIFICATION	4.810152321224035E-4	DEFECT
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9995153814047602	WITHOUT_CLASSIFICATION	4.84618595239901E-4	DEFECT
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9990711586270754	WITHOUT_CLASSIFICATION	9.288413729247001E-4	DEFECT
note early exit here:	WITHOUT_CLASSIFICATION	0.9997800858906195	WITHOUT_CLASSIFICATION	2.199141093805983E-4	DEFECT
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999569738102958	WITHOUT_CLASSIFICATION	4.3026189704152944E-5	DEFECT
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9949577074445158	WITHOUT_CLASSIFICATION	0.0050422925554840705	DEFECT
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998539589267771	WITHOUT_CLASSIFICATION	1.4604107322284914E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999590455848965	WITHOUT_CLASSIFICATION	4.0954415103615355E-5	DEFECT
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.999960621450229	WITHOUT_CLASSIFICATION	3.937854977092514E-5	DEFECT
null owner ok??	WITHOUT_CLASSIFICATION	0.9994951349666349	WITHOUT_CLASSIFICATION	5.048650333651097E-4	DEFECT
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999692690447208	WITHOUT_CLASSIFICATION	3.073095527919268E-5	DEFECT
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999333549183487	WITHOUT_CLASSIFICATION	6.664508165129297E-5	DEFECT
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9989840050651944	WITHOUT_CLASSIFICATION	0.0010159949348056932	DEFECT
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999112818813097	WITHOUT_CLASSIFICATION	8.87181186903022E-5	DEFECT
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999944166011622	WITHOUT_CLASSIFICATION	5.58339883781275E-5	DEFECT
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999632872172968	WITHOUT_CLASSIFICATION	3.6712782703197315E-4	DEFECT
ALIASES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999319914015119	WITHOUT_CLASSIFICATION	6.80085984881215E-5	DEFECT
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9998502410862327	WITHOUT_CLASSIFICATION	1.4975891376742536E-4	DEFECT
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997214989015889	WITHOUT_CLASSIFICATION	2.785010984110938E-4	DEFECT
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999342424024908	WITHOUT_CLASSIFICATION	6.5757597509147E-5	DEFECT
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.956855976450733	WITHOUT_CLASSIFICATION	0.04314402354926702	DEFECT
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9993436249851517	WITHOUT_CLASSIFICATION	6.563750148483277E-4	DEFECT
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9997004420811969	WITHOUT_CLASSIFICATION	2.9955791880310146E-4	DEFECT
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997684297394983	WITHOUT_CLASSIFICATION	2.3157026050163806E-4	DEFECT
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9554202766678878	WITHOUT_CLASSIFICATION	0.04457972333211235	DEFECT
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999801233166914	WITHOUT_CLASSIFICATION	1.987668330858562E-4	DEFECT
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9995371483545479	WITHOUT_CLASSIFICATION	4.628516454521113E-4	DEFECT
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999506254101818	WITHOUT_CLASSIFICATION	4.9374589818147494E-5	DEFECT
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999863251557323	WITHOUT_CLASSIFICATION	1.3674844267771106E-5	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9988748820184512	WITHOUT_CLASSIFICATION	0.0011251179815487291	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9995592793887327	WITHOUT_CLASSIFICATION	4.407206112673103E-4	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.999845624332576	WITHOUT_CLASSIFICATION	1.5437566742414576E-4	DEFECT
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.990796579287194	WITHOUT_CLASSIFICATION	0.009203420712806006	DEFECT
add normal properties	WITHOUT_CLASSIFICATION	0.9995592793887327	WITHOUT_CLASSIFICATION	4.407206112673103E-4	DEFECT
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9988748820184512	WITHOUT_CLASSIFICATION	0.0011251179815487291	DEFECT
add the discriminator	WITHOUT_CLASSIFICATION	0.999845624332576	WITHOUT_CLASSIFICATION	1.5437566742414576E-4	DEFECT
add the primary key	WITHOUT_CLASSIFICATION	0.9998805773152828	WITHOUT_CLASSIFICATION	1.1942268471721631E-4	DEFECT
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998810817710817	WITHOUT_CLASSIFICATION	1.1891822891831988E-4	DEFECT
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9985807452546689	WITHOUT_CLASSIFICATION	0.0014192547453311304	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998399273161331	WITHOUT_CLASSIFICATION	1.600726838669169E-4	DEFECT
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.999987376820614	WITHOUT_CLASSIFICATION	1.2623179386015544E-5	DEFECT
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9904194010928985	WITHOUT_CLASSIFICATION	0.00958059890710145	DEFECT
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9990082646196029	WITHOUT_CLASSIFICATION	9.917353803971071E-4	DEFECT
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9985836553690267	WITHOUT_CLASSIFICATION	0.001416344630973298	DEFECT
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999926714389025	WITHOUT_CLASSIFICATION	7.328561097549197E-6	DEFECT
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.997672492455187	WITHOUT_CLASSIFICATION	0.002327507544813031	DEFECT
starting index	WITHOUT_CLASSIFICATION	0.999824750111381	WITHOUT_CLASSIFICATION	1.752498886188829E-4	DEFECT
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998044247891674	WITHOUT_CLASSIFICATION	1.9557521083255977E-4	DEFECT
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997331735130448	WITHOUT_CLASSIFICATION	2.668264869552169E-4	DEFECT
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998399273161331	WITHOUT_CLASSIFICATION	1.600726838669169E-4	DEFECT
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999954326029372	WITHOUT_CLASSIFICATION	4.567397062791868E-6	DEFECT
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9998939667510718	WITHOUT_CLASSIFICATION	1.0603324892820642E-4	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9943912232456619	WITHOUT_CLASSIFICATION	0.005608776754338105	DEFECT
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999956339119837	WITHOUT_CLASSIFICATION	4.366088016374527E-6	DEFECT
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9979879713750878	WITHOUT_CLASSIFICATION	0.002012028624912126	DEFECT
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9997797375406201	WITHOUT_CLASSIFICATION	2.202624593798822E-4	DEFECT
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9968649506611017	WITHOUT_CLASSIFICATION	0.0031350493388983577	DEFECT
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999928478084277	WITHOUT_CLASSIFICATION	7.152191572314966E-6	DEFECT
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998334129831455	WITHOUT_CLASSIFICATION	1.6658701685448203E-4	DEFECT
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9993876121655948	WITHOUT_CLASSIFICATION	6.1238783440526E-4	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997797375406201	WITHOUT_CLASSIFICATION	2.202624593798822E-4	DEFECT
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997797375406201	WITHOUT_CLASSIFICATION	2.202624593798822E-4	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999949088930957	WITHOUT_CLASSIFICATION	5.091106904295277E-5	DEFECT
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999949088930957	WITHOUT_CLASSIFICATION	5.091106904295277E-5	DEFECT
not supported	WITHOUT_CLASSIFICATION	0.997670579259174	WITHOUT_CLASSIFICATION	0.002329420740825976	DEFECT
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9943912232456619	WITHOUT_CLASSIFICATION	0.005608776754338105	DEFECT
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998542804054876	WITHOUT_CLASSIFICATION	1.4571959451231215E-4	DEFECT
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998923461140486	WITHOUT_CLASSIFICATION	1.0765388595135818E-4	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999678119891583	WITHOUT_CLASSIFICATION	3.218801084167751E-5	DEFECT
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999678119891583	WITHOUT_CLASSIFICATION	3.218801084167751E-5	DEFECT
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9998823009435809	WITHOUT_CLASSIFICATION	1.1769905641919673E-4	DEFECT
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999157368376801	WITHOUT_CLASSIFICATION	8.426316231989922E-5	DEFECT
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998289100634655	WITHOUT_CLASSIFICATION	1.7108993653447343E-4	DEFECT
skip the driving table	WITHOUT_CLASSIFICATION	0.9999734554048209	WITHOUT_CLASSIFICATION	2.6544595179107068E-5	DEFECT
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9997753551242414	WITHOUT_CLASSIFICATION	2.246448757585657E-4	DEFECT
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995846915598753	WITHOUT_CLASSIFICATION	4.1530844012472576E-4	DEFECT
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998943504833315	WITHOUT_CLASSIFICATION	1.0564951666853392E-4	DEFECT
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999781930033513	WITHOUT_CLASSIFICATION	2.1806996648611487E-5	DEFECT
now render the joins	WITHOUT_CLASSIFICATION	0.9998857945483113	WITHOUT_CLASSIFICATION	1.1420545168879448E-4	DEFECT
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9948174284494549	WITHOUT_CLASSIFICATION	0.00518257155054511	DEFECT
now render the select clause	WITHOUT_CLASSIFICATION	0.999908403814395	WITHOUT_CLASSIFICATION	9.1596185605037E-5	DEFECT
now tie it all together	WITHOUT_CLASSIFICATION	0.9998984123863507	WITHOUT_CLASSIFICATION	1.0158761364936943E-4	DEFECT
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9998740447506425	WITHOUT_CLASSIFICATION	1.2595524935764962E-4	DEFECT
select SQL	WITHOUT_CLASSIFICATION	0.9999703267763337	WITHOUT_CLASSIFICATION	2.967322366631365E-5	DEFECT
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999640504389029	WITHOUT_CLASSIFICATION	3.594956109704579E-5	DEFECT
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997043887581751	WITHOUT_CLASSIFICATION	2.956112418248884E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474366604159	WITHOUT_CLASSIFICATION	1.525633395841452E-4	DEFECT
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9997844268270392	WITHOUT_CLASSIFICATION	2.1557317296092536E-4	DEFECT
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9979344439484258	WITHOUT_CLASSIFICATION	0.0020655560515741678	DEFECT
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.998699392967784	WITHOUT_CLASSIFICATION	0.001300607032216072	DEFECT
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998201817990499	WITHOUT_CLASSIFICATION	1.7981820095014115E-4	DEFECT
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9960151253808878	WITHOUT_CLASSIFICATION	0.003984874619112236	DEFECT
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999555134004581	WITHOUT_CLASSIFICATION	4.448659954195143E-5	DEFECT
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999021254367837	WITHOUT_CLASSIFICATION	9.787456321635835E-5	DEFECT
/	WITHOUT_CLASSIFICATION	0.9999774901328234	WITHOUT_CLASSIFICATION	2.2509867176594507E-5	DEFECT
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998377890109064	WITHOUT_CLASSIFICATION	1.6221098909354343E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999590455848965	WITHOUT_CLASSIFICATION	4.0954415103615355E-5	DEFECT
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998178638894242	WITHOUT_CLASSIFICATION	1.8213611057579375E-4	DEFECT
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9986025358932041	WITHOUT_CLASSIFICATION	0.0013974641067958729	DEFECT
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997525889992065	WITHOUT_CLASSIFICATION	2.4741100079350676E-4	DEFECT
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997515106678103	WITHOUT_CLASSIFICATION	2.484893321897086E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9998641407856191	WITHOUT_CLASSIFICATION	1.3585921438090198E-4	DEFECT
cannot occur	WITHOUT_CLASSIFICATION	0.9998641407856191	WITHOUT_CLASSIFICATION	1.3585921438090198E-4	DEFECT
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999151689226725	WITHOUT_CLASSIFICATION	8.483107732756694E-5	DEFECT
try "get"	WITHOUT_CLASSIFICATION	0.9999939880267521	WITHOUT_CLASSIFICATION	6.011973247861908E-6	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998932368651382	WITHOUT_CLASSIFICATION	1.0676313486186326E-4	DEFECT
do nothing...	WITHOUT_CLASSIFICATION	0.9998932368651382	WITHOUT_CLASSIFICATION	1.0676313486186326E-4	DEFECT
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9937591738419066	WITHOUT_CLASSIFICATION	0.006240826158093431	DEFECT
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999023750053393	WITHOUT_CLASSIFICATION	9.762499466070751E-4	DEFECT
do not do anything	WITHOUT_CLASSIFICATION	0.9980816128833897	WITHOUT_CLASSIFICATION	0.0019183871166104126	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999837337396063	WITHOUT_CLASSIFICATION	1.626626039367791E-5	DEFECT
cant instantiate	WITHOUT_CLASSIFICATION	0.9998237853961516	WITHOUT_CLASSIFICATION	1.7621460384847486E-4	DEFECT
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996186333914111	WITHOUT_CLASSIFICATION	3.8136660858882534E-4	DEFECT
otherwise:	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999619321931461	WITHOUT_CLASSIFICATION	3.806780685398297E-5	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998465347907349	WITHOUT_CLASSIFICATION	1.5346520926511572E-4	DEFECT
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998465347907349	WITHOUT_CLASSIFICATION	1.5346520926511572E-4	DEFECT
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9998352608587646	WITHOUT_CLASSIFICATION	1.6473914123539868E-4	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999634146961475	WITHOUT_CLASSIFICATION	3.6585303852512646E-5	DEFECT
while constructor is running	WITHOUT_CLASSIFICATION	0.9999634146961475	WITHOUT_CLASSIFICATION	3.6585303852512646E-5	DEFECT
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998819944631039	WITHOUT_CLASSIFICATION	1.1800553689610335E-4	DEFECT
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998675585888072	WITHOUT_CLASSIFICATION	1.3244141119280326E-4	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
Get the caller	WITHOUT_CLASSIFICATION	0.9998970974868215	WITHOUT_CLASSIFICATION	1.0290251317846652E-4	DEFECT
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999320027631964	WITHOUT_CLASSIFICATION	6.799723680363697E-5	DEFECT
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9998214735611126	WITHOUT_CLASSIFICATION	1.785264388874641E-4	DEFECT
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9991172838096195	WITHOUT_CLASSIFICATION	8.827161903804395E-4	DEFECT
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993458467402272	WITHOUT_CLASSIFICATION	6.541532597728174E-4	DEFECT
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999733563871507	WITHOUT_CLASSIFICATION	2.664361284930186E-4	DEFECT
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9989388067741526	WITHOUT_CLASSIFICATION	0.0010611932258473469	DEFECT
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.996956711161678	WITHOUT_CLASSIFICATION	0.0030432888383219166	DEFECT
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9997247193327294	WITHOUT_CLASSIFICATION	2.7528066727062665E-4	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999893274338795	WITHOUT_CLASSIFICATION	1.0672566120489576E-4	DEFECT
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9774036874613801	WITHOUT_CLASSIFICATION	0.02259631253862002	DEFECT
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
for MySQL	WITHOUT_CLASSIFICATION	0.999970861523035	WITHOUT_CLASSIFICATION	2.9138476964942078E-5	DEFECT
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998243572340482	WITHOUT_CLASSIFICATION	1.7564276595183724E-4	DEFECT
null caused some problems	WITHOUT_CLASSIFICATION	0.9988665273980664	WITHOUT_CLASSIFICATION	0.0011334726019336938	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9931117901810291	WITHOUT_CLASSIFICATION	0.006888209818970898	DEFECT
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9996625824383746	WITHOUT_CLASSIFICATION	3.37417561625447E-4	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999577949135418	WITHOUT_CLASSIFICATION	4.2205086458245734E-5	DEFECT
we only release the connection	WITHOUT_CLASSIFICATION	0.999841497519205	WITHOUT_CLASSIFICATION	1.5850248079493997E-4	DEFECT
deprecated option...	WITHOUT_CLASSIFICATION	0.9998652690449713	WITHOUT_CLASSIFICATION	1.3473095502870204E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997627441040486	WITHOUT_CLASSIFICATION	2.3725589595135097E-4	DEFECT
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995773867157446	WITHOUT_CLASSIFICATION	4.2261328425534866E-4	DEFECT
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9990866470978538	WITHOUT_CLASSIFICATION	9.133529021462957E-4	DEFECT
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999970806980186	WITHOUT_CLASSIFICATION	2.9193019813988957E-5	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997627441040486	WITHOUT_CLASSIFICATION	2.3725589595135097E-4	DEFECT
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9997192867515956	WITHOUT_CLASSIFICATION	2.807132484044402E-4	DEFECT
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999292167779506	WITHOUT_CLASSIFICATION	7.078322204940262E-4	DEFECT
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999876715071279	WITHOUT_CLASSIFICATION	1.2328492872203358E-5	DEFECT
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997709749890147	WITHOUT_CLASSIFICATION	2.290250109852768E-4	DEFECT
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999367492704923	WITHOUT_CLASSIFICATION	6.325072950775472E-5	DEFECT
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9972477904122378	WITHOUT_CLASSIFICATION	0.0027522095877622016	DEFECT
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999217102552073	WITHOUT_CLASSIFICATION	7.828974479277251E-5	DEFECT
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999259816951493	WITHOUT_CLASSIFICATION	7.401830485055686E-5	DEFECT
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637830977994	WITHOUT_CLASSIFICATION	3.621690220052592E-5	DEFECT
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998802041353684	WITHOUT_CLASSIFICATION	1.1979586463159252E-4	DEFECT
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999637830977994	WITHOUT_CLASSIFICATION	3.621690220052592E-5	DEFECT
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998692655290294	WITHOUT_CLASSIFICATION	1.307344709705921E-4	DEFECT
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9992547546968995	WITHOUT_CLASSIFICATION	7.452453031005996E-4	DEFECT
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9984655034117772	WITHOUT_CLASSIFICATION	0.0015344965882229042	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997387632053538	WITHOUT_CLASSIFICATION	2.612367946461448E-4	DEFECT
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997519268269134	WITHOUT_CLASSIFICATION	2.48073173086604E-4	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999599335545887	WITHOUT_CLASSIFICATION	4.006644541131612E-5	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998037284056246	WITHOUT_CLASSIFICATION	1.962715943754592E-4	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997834987643581	WITHOUT_CLASSIFICATION	2.16501235641867E-4	DEFECT
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998037284056246	WITHOUT_CLASSIFICATION	1.962715943754592E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996253722664161	WITHOUT_CLASSIFICATION	3.746277335839188E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999346326181513	WITHOUT_CLASSIFICATION	6.53673818486827E-5	DEFECT
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9996366342288877	WITHOUT_CLASSIFICATION	3.6336577111235104E-4	DEFECT
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9998772186871723	WITHOUT_CLASSIFICATION	1.2278131282778747E-4	DEFECT
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9999176032334708	WITHOUT_CLASSIFICATION	8.239676652926305E-5	DEFECT
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999619458123206	WITHOUT_CLASSIFICATION	3.8054187679515E-5	DEFECT
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999599335545887	WITHOUT_CLASSIFICATION	4.006644541131612E-5	DEFECT
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997834987643581	WITHOUT_CLASSIFICATION	2.16501235641867E-4	DEFECT
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996253722664161	WITHOUT_CLASSIFICATION	3.746277335839188E-4	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999651868169057	WITHOUT_CLASSIFICATION	3.481318309428483E-5	DEFECT
return currentId;	WITHOUT_CLASSIFICATION	0.9999370704211983	WITHOUT_CLASSIFICATION	6.292957880166939E-5	DEFECT
reset the id	WITHOUT_CLASSIFICATION	0.9997747031404154	WITHOUT_CLASSIFICATION	2.2529685958460203E-4	DEFECT
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9943815931208305	WITHOUT_CLASSIFICATION	0.005618406879169552	DEFECT
reset the version	WITHOUT_CLASSIFICATION	0.9994780927239445	WITHOUT_CLASSIFICATION	5.219072760555866E-4	DEFECT
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9990264380560946	WITHOUT_CLASSIFICATION	9.735619439055017E-4	DEFECT
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998975148215582	WITHOUT_CLASSIFICATION	1.0248517844174443E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474366604159	WITHOUT_CLASSIFICATION	1.525633395841452E-4	DEFECT
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999346326181513	WITHOUT_CLASSIFICATION	6.53673818486827E-5	DEFECT
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999673367544568	WITHOUT_CLASSIFICATION	3.2663245543241497E-5	DEFECT
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999180894180989	WITHOUT_CLASSIFICATION	8.191058190111962E-5	DEFECT
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9985391817777504	WITHOUT_CLASSIFICATION	0.0014608182222496193	DEFECT
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999322564982198	WITHOUT_CLASSIFICATION	6.774350178021738E-5	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474366604159	WITHOUT_CLASSIFICATION	1.525633395841452E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998792869656818	WITHOUT_CLASSIFICATION	1.2071303431821263E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474366604159	WITHOUT_CLASSIFICATION	1.525633395841452E-4	DEFECT
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999413633414843	WITHOUT_CLASSIFICATION	5.863665851571516E-5	DEFECT
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996622395152457	WITHOUT_CLASSIFICATION	3.3776048475436446E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998818384332548	WITHOUT_CLASSIFICATION	1.1816156674514094E-4	DEFECT
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9998474016104544	WITHOUT_CLASSIFICATION	1.525983895455603E-4	DEFECT
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998479294834637	WITHOUT_CLASSIFICATION	1.520705165363569E-4	DEFECT
Collection Types:	WITHOUT_CLASSIFICATION	0.9998346807359959	WITHOUT_CLASSIFICATION	1.6531926400414042E-4	DEFECT
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999776364427104	WITHOUT_CLASSIFICATION	2.2363557289608834E-4	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997434344632563	WITHOUT_CLASSIFICATION	2.5656553674368004E-4	DEFECT
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999618574318889	WITHOUT_CLASSIFICATION	3.814256811109675E-5	DEFECT
value is the entity name	WITHOUT_CLASSIFICATION	0.99990548286458	WITHOUT_CLASSIFICATION	9.451713541986373E-5	DEFECT
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999624896537693	WITHOUT_CLASSIFICATION	3.751034623061967E-5	DEFECT
TODO!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999062819979853	WITHOUT_CLASSIFICATION	9.371800201468434E-5	DEFECT
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.971165473522429	WITHOUT_CLASSIFICATION	0.028834526477570947	DEFECT
tolerates nulls	WITHOUT_CLASSIFICATION	0.9997213750525555	WITHOUT_CLASSIFICATION	2.786249474445023E-4	DEFECT
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9991117954078307	WITHOUT_CLASSIFICATION	8.882045921692565E-4	DEFECT
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999860689181473	WITHOUT_CLASSIFICATION	1.393108185258538E-5	DEFECT
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999279352779618	WITHOUT_CLASSIFICATION	7.206472203822127E-5	DEFECT
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9996195158112242	WITHOUT_CLASSIFICATION	3.804841887757671E-4	DEFECT
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999814470429471	WITHOUT_CLASSIFICATION	1.855295705289421E-5	DEFECT
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9995047985173379	WITHOUT_CLASSIFICATION	4.95201482662097E-4	DEFECT
TODO!!!	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9993655242703007	WITHOUT_CLASSIFICATION	6.344757296993582E-4	DEFECT
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9993655242703007	WITHOUT_CLASSIFICATION	6.344757296993582E-4	DEFECT
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999190189388243	WITHOUT_CLASSIFICATION	8.098106117567819E-5	DEFECT
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998785093096704	WITHOUT_CLASSIFICATION	1.2149069032959308E-4	DEFECT
noop	WITHOUT_CLASSIFICATION	0.999975858537401	WITHOUT_CLASSIFICATION	2.414146259899729E-5	DEFECT
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999513728958487	WITHOUT_CLASSIFICATION	4.862710415125414E-5	DEFECT
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997314273424651	WITHOUT_CLASSIFICATION	2.685726575348839E-4	DEFECT
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999418615266588	WITHOUT_CLASSIFICATION	5.81384733413927E-5	DEFECT
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998950099850976	WITHOUT_CLASSIFICATION	1.0499001490232372E-4	DEFECT
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9848473305782617	WITHOUT_CLASSIFICATION	0.015152669421738311	DEFECT
TODO	WITHOUT_CLASSIFICATION	0.9997967786645164	WITHOUT_CLASSIFICATION	2.0322133548366183E-4	DEFECT
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999923641856663	WITHOUT_CLASSIFICATION	7.635814333697838E-5	DEFECT
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997908770546057	WITHOUT_CLASSIFICATION	2.0912294539424814E-4	DEFECT
cache this	WITHOUT_CLASSIFICATION	0.9999689755850236	WITHOUT_CLASSIFICATION	3.102441497637488E-5	DEFECT
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9993180464298792	WITHOUT_CLASSIFICATION	6.819535701207775E-4	DEFECT
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9997743144723478	WITHOUT_CLASSIFICATION	2.2568552765229015E-4	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999697808299913	WITHOUT_CLASSIFICATION	3.0219170008710085E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998543785813658	WITHOUT_CLASSIFICATION	1.4562141863424472E-4	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999122381226635	WITHOUT_CLASSIFICATION	8.776187733657751E-5	DEFECT
nothing to do	WITHOUT_CLASSIFICATION	0.9999122381226635	WITHOUT_CLASSIFICATION	8.776187733657751E-5	DEFECT
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9986922392810793	WITHOUT_CLASSIFICATION	0.001307760718920778	DEFECT
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997434344632563	WITHOUT_CLASSIFICATION	2.5656553674368004E-4	DEFECT
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9892286557150287	WITHOUT_CLASSIFICATION	0.010771344284971155	DEFECT
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999726808558839	WITHOUT_CLASSIFICATION	2.7319144116040096E-5	DEFECT
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9991667569003747	WITHOUT_CLASSIFICATION	8.332430996251428E-4	DEFECT
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997435008938247	WITHOUT_CLASSIFICATION	2.564991061753943E-4	DEFECT
remember the uk value	WITHOUT_CLASSIFICATION	0.9999059197983465	WITHOUT_CLASSIFICATION	9.408020165349924E-5	DEFECT
NOOP	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9993715201762613	WITHOUT_CLASSIFICATION	6.284798237388021E-4	DEFECT
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9995728733649942	WITHOUT_CLASSIFICATION	4.2712663500580006E-4	DEFECT
return false;	WITHOUT_CLASSIFICATION	0.9999534637585531	WITHOUT_CLASSIFICATION	4.653624144693464E-5	DEFECT
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9991596014725164	WITHOUT_CLASSIFICATION	8.403985274836569E-4	DEFECT
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999689442654329	WITHOUT_CLASSIFICATION	3.1055734567067716E-5	DEFECT
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999971922744311	WITHOUT_CLASSIFICATION	2.807725568891973E-5	DEFECT
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999718518691553	WITHOUT_CLASSIFICATION	2.8148130844653514E-5	DEFECT
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999161897876611	WITHOUT_CLASSIFICATION	8.381021233893128E-5	DEFECT
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999926605871039	WITHOUT_CLASSIFICATION	7.339412896098307E-5	DEFECT
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999831278371301	WITHOUT_CLASSIFICATION	1.6872162869922336E-5	DEFECT
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9992098532552279	WITHOUT_CLASSIFICATION	7.901467447719385E-4	DEFECT
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999879776984789	WITHOUT_CLASSIFICATION	1.2022301521189279E-5	DEFECT
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997322162982146	WITHOUT_CLASSIFICATION	2.6778370178535705E-4	DEFECT
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999208208950693	WITHOUT_CLASSIFICATION	7.917910493069287E-5	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.998544018567459	WITHOUT_CLASSIFICATION	0.0014559814325409792	DEFECT
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999143457151919	WITHOUT_CLASSIFICATION	8.565428480803541E-5	DEFECT
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999355001728383	WITHOUT_CLASSIFICATION	6.449982716170071E-5	DEFECT
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9996710697512685	WITHOUT_CLASSIFICATION	3.2893024873144935E-4	DEFECT
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999029436057824	WITHOUT_CLASSIFICATION	9.705639421763811E-5	DEFECT
we already know current is not null...	WITHOUT_CLASSIFICATION	0.999842537373432	WITHOUT_CLASSIFICATION	1.5746262656806718E-4	DEFECT
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9998432569071513	WITHOUT_CLASSIFICATION	1.5674309284874363E-4	DEFECT
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9985143404712049	WITHOUT_CLASSIFICATION	0.001485659528795026	DEFECT
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9997551479838597	WITHOUT_CLASSIFICATION	2.448520161403684E-4	DEFECT
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999806128640387	WITHOUT_CLASSIFICATION	1.9387135961292389E-4	DEFECT
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999933486805945	WITHOUT_CLASSIFICATION	6.651319405433716E-6	DEFECT
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997832331965205	WITHOUT_CLASSIFICATION	2.1676680347952417E-4	DEFECT
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9994664986122084	WITHOUT_CLASSIFICATION	5.335013877916169E-4	DEFECT
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9967220827284132	WITHOUT_CLASSIFICATION	0.0032779172715866676	DEFECT
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.997985034763771	WITHOUT_CLASSIFICATION	0.002014965236229067	DEFECT
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9882637900162904	WITHOUT_CLASSIFICATION	0.011736209983709663	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9987469173085036	WITHOUT_CLASSIFICATION	0.001253082691496312	DEFECT
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9987469173085036	WITHOUT_CLASSIFICATION	0.001253082691496312	DEFECT
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999195431626461	WITHOUT_CLASSIFICATION	8.045683735400027E-5	DEFECT
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999189018585674	WITHOUT_CLASSIFICATION	8.109814143268631E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999528828741866	WITHOUT_CLASSIFICATION	4.711712581334964E-5	DEFECT
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999528828741866	WITHOUT_CLASSIFICATION	4.711712581334964E-5	DEFECT
use default behavior	WITHOUT_CLASSIFICATION	0.999980634503216	WITHOUT_CLASSIFICATION	1.936549678407531E-5	DEFECT
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999578064266786	WITHOUT_CLASSIFICATION	4.219357332141961E-5	DEFECT
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9998875810020599	WITHOUT_CLASSIFICATION	1.124189979400209E-4	DEFECT
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999269307117072	WITHOUT_CLASSIFICATION	7.306928829277037E-5	DEFECT
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997537105491971	WITHOUT_CLASSIFICATION	2.4628945080292E-4	DEFECT
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999130785132068	WITHOUT_CLASSIFICATION	8.692148679324569E-5	DEFECT
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999130785132068	WITHOUT_CLASSIFICATION	8.692148679324569E-5	DEFECT
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.999867515891941	WITHOUT_CLASSIFICATION	1.324841080589779E-4	DEFECT
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.999825028065557	WITHOUT_CLASSIFICATION	1.749719344430173E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998095349255238	WITHOUT_CLASSIFICATION	1.9046507447619188E-4	DEFECT
returnign null!	WITHOUT_CLASSIFICATION	0.9998095349255238	WITHOUT_CLASSIFICATION	1.9046507447619188E-4	DEFECT
includes last '.'	WITHOUT_CLASSIFICATION	0.9998585264482931	WITHOUT_CLASSIFICATION	1.414735517069303E-4	DEFECT
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998970981219959	WITHOUT_CLASSIFICATION	1.0290187800416401E-4	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999478070643619	WITHOUT_CLASSIFICATION	5.219293563797412E-5	DEFECT
first time we find match!	WITHOUT_CLASSIFICATION	0.9999851836794358	WITHOUT_CLASSIFICATION	1.4816320564252362E-5	DEFECT
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997609388631858	WITHOUT_CLASSIFICATION	2.3906113681422382E-4	DEFECT
wrapped iterators	WITHOUT_CLASSIFICATION	0.9998227529558252	WITHOUT_CLASSIFICATION	1.7724704417472297E-4	DEFECT
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998948874978144	WITHOUT_CLASSIFICATION	1.0511250218558366E-4	DEFECT
the current iterator	WITHOUT_CLASSIFICATION	0.9999522668278252	WITHOUT_CLASSIFICATION	4.77331721748633E-5	DEFECT
the last used iterator	WITHOUT_CLASSIFICATION	0.9999755491483715	WITHOUT_CLASSIFICATION	2.4450851628459937E-5	DEFECT
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999640310093707	WITHOUT_CLASSIFICATION	3.5968990629395035E-5	DEFECT
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9998824458205725	WITHOUT_CLASSIFICATION	1.1755417942754749E-4	DEFECT
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9997133042927685	WITHOUT_CLASSIFICATION	2.8669570723144285E-4	DEFECT
doable if needed	WITHOUT_CLASSIFICATION	0.9998534100806137	WITHOUT_CLASSIFICATION	1.4658991938629973E-4	DEFECT
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9996379280316918	WITHOUT_CLASSIFICATION	3.620719683081846E-4	DEFECT
peek ahead	WITHOUT_CLASSIFICATION	0.999975840976095	WITHOUT_CLASSIFICATION	2.415902390496985E-5	DEFECT
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.99941760293924	WITHOUT_CLASSIFICATION	5.823970607599931E-4	DEFECT
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999849750595707	WITHOUT_CLASSIFICATION	1.502494042930495E-4	DEFECT
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9990464933775802	WITHOUT_CLASSIFICATION	9.535066224198004E-4	DEFECT
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999335049320968	WITHOUT_CLASSIFICATION	6.649506790331312E-5	DEFECT
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9992736242343344	WITHOUT_CLASSIFICATION	7.263757656656748E-4	DEFECT
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9983315661222667	WITHOUT_CLASSIFICATION	0.0016684338777332326	DEFECT
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9998382568937353	WITHOUT_CLASSIFICATION	1.617431062646641E-4	DEFECT
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9992842562413312	WITHOUT_CLASSIFICATION	7.157437586686893E-4	DEFECT
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9995769826818371	WITHOUT_CLASSIFICATION	4.230173181629378E-4	DEFECT
faster?	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
the name of a class	WITHOUT_CLASSIFICATION	0.9994914635903105	WITHOUT_CLASSIFICATION	5.085364096894923E-4	DEFECT
Its the listener class name	WITHOUT_CLASSIFICATION	0.9998688402118137	WITHOUT_CLASSIFICATION	1.311597881863306E-4	DEFECT
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998791926496479	WITHOUT_CLASSIFICATION	1.2080735035211261E-4	DEFECT
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999921640629624	WITHOUT_CLASSIFICATION	7.83593703759037E-6	DEFECT
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999605606971448	WITHOUT_CLASSIFICATION	3.9439302855139E-5	DEFECT
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999960840684754	WITHOUT_CLASSIFICATION	3.915931524578469E-6	DEFECT
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998691971588433	WITHOUT_CLASSIFICATION	1.3080284115670843E-4	DEFECT
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999786338441166	WITHOUT_CLASSIFICATION	2.136615588353555E-5	DEFECT
entirely optional!!	WITHOUT_CLASSIFICATION	0.9996267810605145	WITHOUT_CLASSIFICATION	3.7321893948539945E-4	DEFECT
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999866257590682	WITHOUT_CLASSIFICATION	1.3374240931726656E-5	DEFECT
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999873808513416	WITHOUT_CLASSIFICATION	1.2619148658390693E-4	DEFECT
readResolveObject	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999400070629519	WITHOUT_CLASSIFICATION	5.99929370480344E-5	DEFECT
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998312482803589	WITHOUT_CLASSIFICATION	1.6875171964112666E-4	DEFECT
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999886650683664	WITHOUT_CLASSIFICATION	1.1334931633594595E-4	DEFECT
Begin unit of work	WITHOUT_CLASSIFICATION	0.997328900880223	WITHOUT_CLASSIFICATION	0.002671099119777073	DEFECT
Write HTML header	WITHOUT_CLASSIFICATION	0.9998222578106029	WITHOUT_CLASSIFICATION	1.7774218939713442E-4	DEFECT
Handle actions	WITHOUT_CLASSIFICATION	0.9998639330761787	WITHOUT_CLASSIFICATION	1.3606692382131703E-4	DEFECT
Print page	WITHOUT_CLASSIFICATION	0.9999623384954257	WITHOUT_CLASSIFICATION	3.766150457420822E-5	DEFECT
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998124678288165	WITHOUT_CLASSIFICATION	1.8753217118347594E-4	DEFECT
End unit of work	WITHOUT_CLASSIFICATION	0.9969339767657381	WITHOUT_CLASSIFICATION	0.003066023234261906	DEFECT
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9997116172921348	WITHOUT_CLASSIFICATION	2.883827078651667E-4	DEFECT
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999147227348771	WITHOUT_CLASSIFICATION	8.527726512289946E-4	DEFECT
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999641392774738	WITHOUT_CLASSIFICATION	3.5860722526205363E-4	DEFECT
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9992751719742191	WITHOUT_CLASSIFICATION	7.24828025780912E-4	DEFECT
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999719684987437	WITHOUT_CLASSIFICATION	2.803150125625733E-5	DEFECT
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999322635524129	WITHOUT_CLASSIFICATION	6.773644758713462E-5	DEFECT
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999374044128306	WITHOUT_CLASSIFICATION	6.259558716942116E-5	DEFECT
End of first unit of work	WITHOUT_CLASSIFICATION	0.9990677017935591	WITHOUT_CLASSIFICATION	9.322982064410117E-4	DEFECT
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999115255109632	WITHOUT_CLASSIFICATION	8.847448903681759E-5	DEFECT
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9973801426995157	WITHOUT_CLASSIFICATION	0.0026198573004842006	DEFECT
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9998545346751126	WITHOUT_CLASSIFICATION	1.4546532488728524E-4	DEFECT
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9985317711503442	WITHOUT_CLASSIFICATION	0.0014682288496557514	DEFECT
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9998051054616323	WITHOUT_CLASSIFICATION	1.948945383677032E-4	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999507367706617	WITHOUT_CLASSIFICATION	4.926322933826005E-5	DEFECT
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999507367706617	WITHOUT_CLASSIFICATION	4.926322933826005E-5	DEFECT
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999992694437953	WITHOUT_CLASSIFICATION	7.305562047030581E-6	DEFECT
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9983401088079605	WITHOUT_CLASSIFICATION	0.001659891192039469	DEFECT
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999371023147218	WITHOUT_CLASSIFICATION	6.289768527825368E-5	DEFECT
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998629471529645	WITHOUT_CLASSIFICATION	1.3705284703550204E-4	DEFECT
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9997456183065337	WITHOUT_CLASSIFICATION	2.543816934663414E-4	DEFECT
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9996631753847353	WITHOUT_CLASSIFICATION	3.3682461526468317E-4	DEFECT
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999918956824286	WITHOUT_CLASSIFICATION	8.104317571443567E-6	DEFECT
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9997161763584149	WITHOUT_CLASSIFICATION	2.8382364158512525E-4	DEFECT
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9997446288963856	WITHOUT_CLASSIFICATION	2.5537110361438997E-4	DEFECT
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999951189469111	WITHOUT_CLASSIFICATION	4.8810530889031475E-5	DEFECT
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999614109313266	WITHOUT_CLASSIFICATION	3.858906867339951E-5	DEFECT
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9989887967408672	WITHOUT_CLASSIFICATION	0.0010112032591327845	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999875645398202	WITHOUT_CLASSIFICATION	1.2435460179734862E-5	DEFECT
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999957015431459	WITHOUT_CLASSIFICATION	4.298456854046853E-6	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997713697272325	WITHOUT_CLASSIFICATION	2.286302727675413E-4	DEFECT
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997713697272325	WITHOUT_CLASSIFICATION	2.286302727675413E-4	DEFECT
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9998391438951224	WITHOUT_CLASSIFICATION	1.608561048776236E-4	DEFECT
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9991629661843894	WITHOUT_CLASSIFICATION	8.370338156105042E-4	DEFECT
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999588194829847	WITHOUT_CLASSIFICATION	4.118051701525623E-5	DEFECT
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999471430207644	WITHOUT_CLASSIFICATION	5.285697923550647E-5	DEFECT
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999759534426416	WITHOUT_CLASSIFICATION	2.4046557358488416E-5	DEFECT
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998926237956351	WITHOUT_CLASSIFICATION	1.0737620436490427E-4	DEFECT
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999846914046029	WITHOUT_CLASSIFICATION	1.5308595397100507E-4	DEFECT
element index -> id	WITHOUT_CLASSIFICATION	0.9999007712999443	WITHOUT_CLASSIFICATION	9.922870005562463E-5	DEFECT
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9969088967962241	WITHOUT_CLASSIFICATION	0.0030911032037760013	DEFECT
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999925284844217	WITHOUT_CLASSIFICATION	7.471515578333746E-6	DEFECT
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999933443166762	WITHOUT_CLASSIFICATION	6.655683323813763E-6	DEFECT
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999716941274823	WITHOUT_CLASSIFICATION	2.8305872517700577E-5	DEFECT
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9992673983805964	WITHOUT_CLASSIFICATION	7.326016194036268E-4	DEFECT
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999931873807233	WITHOUT_CLASSIFICATION	6.812619276628925E-6	DEFECT
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9992159115481672	WITHOUT_CLASSIFICATION	7.840884518326282E-4	DEFECT
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9998755599350991	WITHOUT_CLASSIFICATION	1.2444006490083573E-4	DEFECT
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9998022508422425	WITHOUT_CLASSIFICATION	1.9774915775757E-4	DEFECT
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9993383550969638	WITHOUT_CLASSIFICATION	6.616449030363228E-4	DEFECT
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9998454649057212	WITHOUT_CLASSIFICATION	1.545350942786885E-4	DEFECT
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9935988656627541	WITHOUT_CLASSIFICATION	0.006401134337245907	DEFECT
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999547946040291	WITHOUT_CLASSIFICATION	4.5205395970873676E-5	DEFECT
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9997405951157771	WITHOUT_CLASSIFICATION	2.5940488422292873E-4	DEFECT
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9990947033312776	WITHOUT_CLASSIFICATION	9.052966687224511E-4	DEFECT
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999763369889264	WITHOUT_CLASSIFICATION	2.3663011073551496E-5	DEFECT
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999786025490721	WITHOUT_CLASSIFICATION	2.139745092795089E-5	DEFECT
Named Queries:	WITHOUT_CLASSIFICATION	0.9998090358698032	WITHOUT_CLASSIFICATION	1.9096413019687431E-4	DEFECT
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.997397256085051	WITHOUT_CLASSIFICATION	0.002602743914948994	DEFECT
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999035746905245	WITHOUT_CLASSIFICATION	9.642530947547178E-5	DEFECT
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9998854068524425	WITHOUT_CLASSIFICATION	1.145931475574525E-4	DEFECT
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9994191817339266	WITHOUT_CLASSIFICATION	5.808182660734405E-4	DEFECT
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9971149198844789	WITHOUT_CLASSIFICATION	0.0028850801155211217	DEFECT
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998855734064946	WITHOUT_CLASSIFICATION	1.1442659350538322E-4	DEFECT
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9992863841704868	WITHOUT_CLASSIFICATION	7.136158295132301E-4	DEFECT
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999599277054074	WITHOUT_CLASSIFICATION	4.007229459255264E-5	DEFECT
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999855317447349	WITHOUT_CLASSIFICATION	1.446825526503344E-5	DEFECT
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999452444782731	WITHOUT_CLASSIFICATION	5.475552172689401E-4	DEFECT
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9991747440831057	WITHOUT_CLASSIFICATION	8.25255916894326E-4	DEFECT
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9979054429368435	WITHOUT_CLASSIFICATION	0.0020945570631565346	DEFECT
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997580498025056	WITHOUT_CLASSIFICATION	2.4195019749438418E-4	DEFECT
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9994614620174801	WITHOUT_CLASSIFICATION	5.385379825198995E-4	DEFECT
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9938269446951074	WITHOUT_CLASSIFICATION	0.00617305530489271	DEFECT
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9998730474862313	WITHOUT_CLASSIFICATION	1.2695251376876145E-4	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9957302917551832	WITHOUT_CLASSIFICATION	0.004269708244816736	DEFECT
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9957302917551832	WITHOUT_CLASSIFICATION	0.004269708244816736	DEFECT
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999102194609639	WITHOUT_CLASSIFICATION	8.97805390360284E-5	DEFECT
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.7832918900979942	WITHOUT_CLASSIFICATION	0.2167081099020059	DEFECT
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999821415239187	WITHOUT_CLASSIFICATION	1.7858476081245065E-5	DEFECT
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998807735778703	WITHOUT_CLASSIFICATION	1.1922642212968235E-4	DEFECT
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9992442025843935	WITHOUT_CLASSIFICATION	7.557974156064406E-4	DEFECT
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998448112461696	WITHOUT_CLASSIFICATION	1.5518875383036015E-4	DEFECT
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999215451532657	WITHOUT_CLASSIFICATION	7.845484673430685E-5	DEFECT
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9998977543411429	WITHOUT_CLASSIFICATION	1.0224565885702979E-4	DEFECT
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9956330793144421	WITHOUT_CLASSIFICATION	0.004366920685557839	DEFECT
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995191312945964	WITHOUT_CLASSIFICATION	4.808687054036193E-4	DEFECT
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999729618000725	WITHOUT_CLASSIFICATION	2.7038199927506025E-4	DEFECT
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9997454319552354	WITHOUT_CLASSIFICATION	2.545680447646629E-4	DEFECT
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9995731421254787	WITHOUT_CLASSIFICATION	4.268578745213442E-4	DEFECT
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9994973360111278	WITHOUT_CLASSIFICATION	5.026639888721447E-4	DEFECT
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9952542234119238	WITHOUT_CLASSIFICATION	0.004745776588076208	DEFECT
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9985329620268352	WITHOUT_CLASSIFICATION	0.0014670379731648035	DEFECT
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9998700190365849	WITHOUT_CLASSIFICATION	1.299809634151198E-4	DEFECT
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9862478678981926	WITHOUT_CLASSIFICATION	0.013752132101807417	DEFECT
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999768717631674	WITHOUT_CLASSIFICATION	2.312823683260935E-4	DEFECT
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9974329170604865	WITHOUT_CLASSIFICATION	0.0025670829395133864	DEFECT
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998079390689976	WITHOUT_CLASSIFICATION	1.9206093100241836E-4	DEFECT
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9997404489013367	WITHOUT_CLASSIFICATION	2.595510986632451E-4	DEFECT
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995117656477542	WITHOUT_CLASSIFICATION	4.8823435224584175E-4	DEFECT
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998131060622745	WITHOUT_CLASSIFICATION	1.8689393772548874E-4	DEFECT
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9998853302088944	WITHOUT_CLASSIFICATION	1.1466979110562567E-4	DEFECT
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997410010263847	WITHOUT_CLASSIFICATION	2.589989736152012E-4	DEFECT
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998193302555213	WITHOUT_CLASSIFICATION	1.8066974447873924E-4	DEFECT
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9993275074973273	WITHOUT_CLASSIFICATION	6.724925026727198E-4	DEFECT
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9991448483262191	WITHOUT_CLASSIFICATION	8.551516737809143E-4	DEFECT
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9996360364684728	WITHOUT_CLASSIFICATION	3.639635315272789E-4	DEFECT
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9991489715996799	WITHOUT_CLASSIFICATION	8.510284003201002E-4	DEFECT
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999633532673976	WITHOUT_CLASSIFICATION	3.6646732602354684E-5	DEFECT
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9997078380188182	WITHOUT_CLASSIFICATION	2.921619811816952E-4	DEFECT
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9991002049182661	WITHOUT_CLASSIFICATION	8.997950817339012E-4	DEFECT
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997108164135482	WITHOUT_CLASSIFICATION	2.8918358645182995E-4	DEFECT
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999824250219246	WITHOUT_CLASSIFICATION	1.757497807541016E-5	DEFECT
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9974041473590228	WITHOUT_CLASSIFICATION	0.0025958526409771967	DEFECT
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9997266761616981	WITHOUT_CLASSIFICATION	2.733238383019807E-4	DEFECT
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999019902726265	WITHOUT_CLASSIFICATION	9.800972737343719E-5	DEFECT
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999041940261789	WITHOUT_CLASSIFICATION	9.580597382116007E-5	DEFECT
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9994512321801997	WITHOUT_CLASSIFICATION	5.48767819800208E-4	DEFECT
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995877398939809	WITHOUT_CLASSIFICATION	4.122601060191392E-4	DEFECT
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9988034627525394	WITHOUT_CLASSIFICATION	0.0011965372474606756	DEFECT
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999117485608535	WITHOUT_CLASSIFICATION	8.825143914648635E-5	DEFECT
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9993462554037772	WITHOUT_CLASSIFICATION	6.537445962227743E-4	DEFECT
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9998487366628959	WITHOUT_CLASSIFICATION	1.5126333710419954E-4	DEFECT
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999909696424292	WITHOUT_CLASSIFICATION	9.030357570787012E-6	DEFECT
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9945380978845367	WITHOUT_CLASSIFICATION	0.005461902115463263	DEFECT
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9995514511837831	WITHOUT_CLASSIFICATION	4.485488162168641E-4	DEFECT
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999875645398202	WITHOUT_CLASSIFICATION	1.2435460179734862E-5	DEFECT
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9969928821287081	WITHOUT_CLASSIFICATION	0.003007117871292021	DEFECT
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999804207527289	WITHOUT_CLASSIFICATION	1.9579247271191895E-5	DEFECT
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997656773268572	WITHOUT_CLASSIFICATION	2.3432267314273353E-4	DEFECT
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.998344115569015	WITHOUT_CLASSIFICATION	0.0016558844309849693	DEFECT
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999998534971583	WITHOUT_CLASSIFICATION	1.4650284169579567E-6	DEFECT
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999050603595316	WITHOUT_CLASSIFICATION	9.493964046835254E-5	DEFECT
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9952792673320509	WITHOUT_CLASSIFICATION	0.004720732667949201	DEFECT
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.8247252790902592	WITHOUT_CLASSIFICATION	0.17527472090974092	DEFECT
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999810612639104	WITHOUT_CLASSIFICATION	1.8938736089651262E-5	DEFECT
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997268249855128	WITHOUT_CLASSIFICATION	2.731750144871579E-4	DEFECT
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999991613020339	WITHOUT_CLASSIFICATION	8.386979661765068E-7	DEFECT
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9975017469348598	WITHOUT_CLASSIFICATION	0.002498253065140209	DEFECT
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9975231645437029	WITHOUT_CLASSIFICATION	0.0024768354562970996	DEFECT
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999752634037478	WITHOUT_CLASSIFICATION	2.4736596252317642E-5	DEFECT
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.996993707361041	WITHOUT_CLASSIFICATION	0.0030062926389590643	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506922990581	WITHOUT_CLASSIFICATION	1.4930770094200927E-4	DEFECT
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999405114818328	WITHOUT_CLASSIFICATION	5.948851816707089E-5	DEFECT
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999920678395235	WITHOUT_CLASSIFICATION	7.932160476473206E-6	DEFECT
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9971393316006177	WITHOUT_CLASSIFICATION	0.0028606683993823126	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998506922990581	WITHOUT_CLASSIFICATION	1.4930770094200927E-4	DEFECT
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9926057857220281	WITHOUT_CLASSIFICATION	0.007394214277971938	DEFECT
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9989341133110708	WITHOUT_CLASSIFICATION	0.00106588668892908	DEFECT
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999877990509166	WITHOUT_CLASSIFICATION	1.2200949083396107E-5	DEFECT
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9958037380998461	WITHOUT_CLASSIFICATION	0.004196261900153797	DEFECT
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999939284764741	WITHOUT_CLASSIFICATION	6.07152352590848E-5	DEFECT
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9859126705640835	WITHOUT_CLASSIFICATION	0.014087329435916536	DEFECT
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999652375258493	WITHOUT_CLASSIFICATION	3.476247415058716E-5	DEFECT
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9983136015367714	WITHOUT_CLASSIFICATION	0.0016863984632285943	DEFECT
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999835389475077	WITHOUT_CLASSIFICATION	1.6461052492317964E-5	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.975792622938502	WITHOUT_CLASSIFICATION	0.024207377061497965	DEFECT
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9991877681374506	WITHOUT_CLASSIFICATION	8.122318625492899E-4	DEFECT
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9878253877336693	WITHOUT_CLASSIFICATION	0.012174612266330615	DEFECT
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999676925516789	WITHOUT_CLASSIFICATION	3.230744832110544E-4	DEFECT
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999448055100238	WITHOUT_CLASSIFICATION	5.5194489976189607E-5	DEFECT
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999903835044853	WITHOUT_CLASSIFICATION	9.616495514672142E-6	DEFECT
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9991666746375526	WITHOUT_CLASSIFICATION	8.333253624474457E-4	DEFECT
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.998544018567459	WITHOUT_CLASSIFICATION	0.0014559814325409792	DEFECT
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999308887965659	WITHOUT_CLASSIFICATION	6.911120343411104E-5	DEFECT
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999622054040531	WITHOUT_CLASSIFICATION	3.779459594695856E-5	DEFECT
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9970987475121137	WITHOUT_CLASSIFICATION	0.0029012524878862587	DEFECT
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9915231151649354	WITHOUT_CLASSIFICATION	0.008476884835064612	DEFECT
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999962005112337	WITHOUT_CLASSIFICATION	3.7994887661458675E-6	DEFECT
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9995682817768806	WITHOUT_CLASSIFICATION	4.317182231194016E-4	DEFECT
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9990555885661999	WITHOUT_CLASSIFICATION	9.444114337999554E-4	DEFECT
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999991237614533	WITHOUT_CLASSIFICATION	8.762385468342599E-7	DEFECT
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999957278532942	WITHOUT_CLASSIFICATION	4.272146705802858E-6	DEFECT
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999827725105778	WITHOUT_CLASSIFICATION	1.7227489422202833E-4	DEFECT
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9950181812781929	WITHOUT_CLASSIFICATION	0.004981818721807196	DEFECT
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998811317211526	WITHOUT_CLASSIFICATION	1.1886827884741842E-4	DEFECT
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9999858874876336	WITHOUT_CLASSIFICATION	1.4112512366502078E-5	DEFECT
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9999752753713808	WITHOUT_CLASSIFICATION	2.4724628619139804E-5	DEFECT
and perform the load	WITHOUT_CLASSIFICATION	0.9998634038929413	WITHOUT_CLASSIFICATION	1.3659610705872924E-4	DEFECT
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9995369276286493	WITHOUT_CLASSIFICATION	4.6307237135071366E-4	DEFECT
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9996671197286165	WITHOUT_CLASSIFICATION	3.328802713834229E-4	DEFECT
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999702390487188	WITHOUT_CLASSIFICATION	2.9760951281087583E-5	DEFECT
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999981152006856	WITHOUT_CLASSIFICATION	1.8847993144530864E-6	DEFECT
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999971527810383	WITHOUT_CLASSIFICATION	2.847218961606652E-6	DEFECT
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9980420511501628	WITHOUT_CLASSIFICATION	0.0019579488498372515	DEFECT
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9995432442835598	WITHOUT_CLASSIFICATION	4.567557164403074E-4	DEFECT
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9994482117739374	WITHOUT_CLASSIFICATION	5.517882260626413E-4	DEFECT
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9987811350227923	WITHOUT_CLASSIFICATION	0.0012188649772076731	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999024521955874	WITHOUT_CLASSIFICATION	9.754780441268655E-5	DEFECT
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999024521955874	WITHOUT_CLASSIFICATION	9.754780441268655E-5	DEFECT
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9914798332472767	WITHOUT_CLASSIFICATION	0.00852016675272322	DEFECT
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.99997084321058	WITHOUT_CLASSIFICATION	2.915678941991691E-5	DEFECT
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9997851956770412	WITHOUT_CLASSIFICATION	2.1480432295876268E-4	DEFECT
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999933421062004	WITHOUT_CLASSIFICATION	6.65789379955227E-6	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999837337396063	WITHOUT_CLASSIFICATION	1.626626039367791E-5	DEFECT
ignore	WITHOUT_CLASSIFICATION	0.9999837337396063	WITHOUT_CLASSIFICATION	1.626626039367791E-5	DEFECT
}	WITHOUT_CLASSIFICATION	0.999980110973567	WITHOUT_CLASSIFICATION	1.988902643302199E-5	DEFECT
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999884063497394	WITHOUT_CLASSIFICATION	1.1593650260572676E-5	DEFECT
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9992986146594675	WITHOUT_CLASSIFICATION	7.013853405325958E-4	DEFECT
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995684693297372	WITHOUT_CLASSIFICATION	4.315306702628995E-4	DEFECT
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997028040532201	WITHOUT_CLASSIFICATION	2.9719594677993564E-4	DEFECT
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9998248098252676	WITHOUT_CLASSIFICATION	1.7519017473245353E-4	DEFECT
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999485878273418	WITHOUT_CLASSIFICATION	5.1412172658323865E-5	DEFECT
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.998924408506199	WITHOUT_CLASSIFICATION	0.0010755914938009518	DEFECT
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9996653377071926	WITHOUT_CLASSIFICATION	3.346622928074723E-4	DEFECT
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999113255658655	WITHOUT_CLASSIFICATION	8.867443413440973E-5	DEFECT
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9995873340146617	WITHOUT_CLASSIFICATION	4.1266598533836195E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119330430715	WITHOUT_CLASSIFICATION	8.806695692863528E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999119330430715	WITHOUT_CLASSIFICATION	8.806695692863528E-5	DEFECT
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9991666746375526	WITHOUT_CLASSIFICATION	8.333253624474457E-4	DEFECT
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999975621525285	WITHOUT_CLASSIFICATION	2.4378474714983417E-5	DEFECT
Custom sql	WITHOUT_CLASSIFICATION	0.999975699796683	WITHOUT_CLASSIFICATION	2.4300203317075034E-5	DEFECT
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9999179536017085	WITHOUT_CLASSIFICATION	8.20463982914685E-5	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9997277207156858	WITHOUT_CLASSIFICATION	2.722792843141854E-4	DEFECT
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996871636191468	WITHOUT_CLASSIFICATION	3.12836380853233E-4	DEFECT
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999803123452142	WITHOUT_CLASSIFICATION	1.9687654785796038E-4	DEFECT
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998373436637574	WITHOUT_CLASSIFICATION	1.6265633624263357E-4	DEFECT
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9998560911341378	WITHOUT_CLASSIFICATION	1.4390886586220075E-4	DEFECT
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998552544547303	WITHOUT_CLASSIFICATION	1.447455452697302E-4	DEFECT
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.975792622938502	WITHOUT_CLASSIFICATION	0.024207377061497965	DEFECT
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9999921020284324	WITHOUT_CLASSIFICATION	7.897971567598308E-6	DEFECT
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9984256229530282	WITHOUT_CLASSIFICATION	0.0015743770469717876	DEFECT
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999810096460604	WITHOUT_CLASSIFICATION	1.899035393959186E-5	DEFECT
use the id column alias	WITHOUT_CLASSIFICATION	0.9999141814534042	WITHOUT_CLASSIFICATION	8.581854659578068E-5	DEFECT
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996916759541236	WITHOUT_CLASSIFICATION	3.083240458764104E-4	DEFECT
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9997514463111734	WITHOUT_CLASSIFICATION	2.4855368882659645E-4	DEFECT
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999344603284988	WITHOUT_CLASSIFICATION	6.553967150121402E-5	DEFECT
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999402506061178	WITHOUT_CLASSIFICATION	5.974939388229178E-5	DEFECT
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997857561306157	WITHOUT_CLASSIFICATION	2.142438693843351E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995899025844456	WITHOUT_CLASSIFICATION	4.10097415554469E-4	DEFECT
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995899025844456	WITHOUT_CLASSIFICATION	4.10097415554469E-4	DEFECT
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997627441040486	WITHOUT_CLASSIFICATION	2.3725589595135097E-4	DEFECT
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999950881689617	WITHOUT_CLASSIFICATION	4.9118310383802495E-6	DEFECT
package	WITHOUT_CLASSIFICATION	0.9999833401474275	WITHOUT_CLASSIFICATION	1.6659852572420212E-5	DEFECT
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9997574173600509	WITHOUT_CLASSIFICATION	2.425826399492404E-4	DEFECT
ignore it	WITHOUT_CLASSIFICATION	0.9999757504542144	WITHOUT_CLASSIFICATION	2.4249545785627618E-5	DEFECT
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999756374184305	WITHOUT_CLASSIFICATION	2.436258156949371E-5	DEFECT
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997387632053538	WITHOUT_CLASSIFICATION	2.612367946461448E-4	DEFECT
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999255599486722	WITHOUT_CLASSIFICATION	7.444005132790704E-5	DEFECT
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999651868169057	WITHOUT_CLASSIFICATION	3.481318309428483E-5	DEFECT
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9990102433611991	WITHOUT_CLASSIFICATION	9.897566388007454E-4	DEFECT
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998474366604159	WITHOUT_CLASSIFICATION	1.525633395841452E-4	DEFECT
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9958652947996647	WITHOUT_CLASSIFICATION	0.004134705200335411	DEFECT
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999050265503191	WITHOUT_CLASSIFICATION	9.497344968087851E-5	DEFECT
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999767626840925	WITHOUT_CLASSIFICATION	2.3237315907422473E-5	DEFECT
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999852039958661	WITHOUT_CLASSIFICATION	1.4796004134011217E-5	DEFECT
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998664407744976	WITHOUT_CLASSIFICATION	1.3355922550235385E-4	DEFECT
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9735595793283985	WITHOUT_CLASSIFICATION	0.026440420671601385	DEFECT
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997315692127785	WITHOUT_CLASSIFICATION	2.684307872215035E-4	DEFECT
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9992585227336123	WITHOUT_CLASSIFICATION	7.414772663877909E-4	DEFECT
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9904284131178487	WITHOUT_CLASSIFICATION	0.009571586882151267	DEFECT
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999315541900847	WITHOUT_CLASSIFICATION	6.844580991531735E-5	DEFECT
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999996766668232	WITHOUT_CLASSIFICATION	3.233331768115045E-7	DEFECT
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999478070643619	WITHOUT_CLASSIFICATION	5.219293563797412E-5	DEFECT
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999998996170809	WITHOUT_CLASSIFICATION	1.0038291916864552E-7	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999968769819029	WITHOUT_CLASSIFICATION	3.1230180970954243E-5	DEFECT
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999968769819029	WITHOUT_CLASSIFICATION	3.1230180970954243E-5	DEFECT
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9988600122607385	WITHOUT_CLASSIFICATION	0.0011399877392615071	DEFECT
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970774515086974	WITHOUT_CLASSIFICATION	0.00292254849130258	DEFECT
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9998002138207582	WITHOUT_CLASSIFICATION	1.9978617924168736E-4	DEFECT
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9995902113128656	WITHOUT_CLASSIFICATION	4.09788687134397E-4	DEFECT
intentionally empty	WITHOUT_CLASSIFICATION	0.9999215759343919	WITHOUT_CLASSIFICATION	7.842406560815288E-5	DEFECT
FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9947669999391604	WITHOUT_CLASSIFICATION	0.0052330000608396	DEFECT
For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9985842578114625	WITHOUT_CLASSIFICATION	0.0014157421885374482	DEFECT
RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9985243998693043	WITHOUT_CLASSIFICATION	0.0014756001306956538	DEFECT
The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.	DEFECT	0.6236227530233032	DEFECT	0.3763772469766969	WITHOUT_CLASSIFICATION
The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22	DEFECT	0.5816709543504536	WITHOUT_CLASSIFICATION	0.4183290456495465	DEFECT
note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9987347431325633	WITHOUT_CLASSIFICATION	0.001265256867436735	DEFECT
note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9988139844206794	WITHOUT_CLASSIFICATION	0.0011860155793206421	DEFECT
Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.	DEFECT	0.999957219638594	WITHOUT_CLASSIFICATION	4.2780361405995165E-5	DEFECT
Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2	DEFECT	0.998093231466645	WITHOUT_CLASSIFICATION	0.0019067685333550367	DEFECT
TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.8313796394655673	WITHOUT_CLASSIFICATION	0.16862036053443277	DEFECT
TODO : should this be an error?	DEFECT	0.983490903258325	WITHOUT_CLASSIFICATION	0.016509096741675056	DEFECT
TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...	DEFECT	0.9826180826694497	WITHOUT_CLASSIFICATION	0.017381917330550355	DEFECT
TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.	DEFECT	0.9341011638044986	DEFECT	0.06589883619550137	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5230891069814856	DEFECT	0.47691089301851436	WITHOUT_CLASSIFICATION
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5230891069814856	DEFECT	0.47691089301851436	WITHOUT_CLASSIFICATION
TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9449409210119738	WITHOUT_CLASSIFICATION	0.05505907898802633	DEFECT
starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999870610973989	WITHOUT_CLASSIFICATION	1.2938902601099605E-4	DEFECT
TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.7521289250144317	WITHOUT_CLASSIFICATION	0.24787107498556815	DEFECT
this call is side-effecty	DEFECT	0.9998739980281217	WITHOUT_CLASSIFICATION	1.260019718783168E-4	DEFECT
TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()	DEFECT	0.9338711119621477	DEFECT	0.06612888803785237	WITHOUT_CLASSIFICATION
TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.862201417701818	WITHOUT_CLASSIFICATION	0.13779858229818198	DEFECT
this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...	DEFECT	0.9475945367205149	WITHOUT_CLASSIFICATION	0.05240546327948507	DEFECT
TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)	DEFECT	0.9596396956194327	WITHOUT_CLASSIFICATION	0.04036030438056729	DEFECT
TODO: is this completely correct?	DEFECT	0.8019827735842479	WITHOUT_CLASSIFICATION	0.19801722641575217	DEFECT
three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!	DEFECT	0.9950467281519498	DEFECT	0.0049532718480502225	WITHOUT_CLASSIFICATION
TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.	DEFECT	0.9258818275622264	WITHOUT_CLASSIFICATION	0.07411817243777369	DEFECT
TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9789635380955711	WITHOUT_CLASSIFICATION	0.021036461904428854	DEFECT
todo : this call will not work for anything other than pojos!	DEFECT	0.6102327340745766	WITHOUT_CLASSIFICATION	0.3897672659254235	DEFECT
TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete	DEFECT	0.9967786750128614	DEFECT	0.003221324987138468	WITHOUT_CLASSIFICATION
TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.6319397306499022	WITHOUT_CLASSIFICATION	0.36806026935009784	DEFECT
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id	DEFECT	0.6802408499236036	DEFECT	0.3197591500763964	WITHOUT_CLASSIFICATION
TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.722917020858918	WITHOUT_CLASSIFICATION	0.27708297914108204	DEFECT
TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6018836204813314	WITHOUT_CLASSIFICATION	0.3981163795186686	DEFECT
TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7898538412986698	WITHOUT_CLASSIFICATION	0.21014615870133024	DEFECT
TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5230891069814856	DEFECT	0.47691089301851436	WITHOUT_CLASSIFICATION
TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9882409065227974	DEFECT	0.011759093477202543	WITHOUT_CLASSIFICATION
TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)	DEFECT	0.7296846197204006	DEFECT	0.27031538027959945	WITHOUT_CLASSIFICATION
TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state	DEFECT	0.985942844984543	WITHOUT_CLASSIFICATION	0.014057155015456948	DEFECT
could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514	DEFECT	0.9922838371050337	WITHOUT_CLASSIFICATION	0.00771616289496641	DEFECT
This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.	DEFECT	0.9184276815068664	WITHOUT_CLASSIFICATION	0.08157231849313368	DEFECT
note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)	DEFECT	0.999645039561853	WITHOUT_CLASSIFICATION	3.5496043814698677E-4	DEFECT
no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values	DEFECT	0.9976728269663325	WITHOUT_CLASSIFICATION	0.0023271730336674817	DEFECT
TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DEFECT	0.9928226643191275	WITHOUT_CLASSIFICATION	0.007177335680872495	DEFECT
First, validate all the enabled filters... TODO: this implementation has bad performance	DEFECT	0.5735027737269925	WITHOUT_CLASSIFICATION	0.42649722627300757	DEFECT
TODO: what if batchUpdate is a callablestatement ? calls executeBatch()	DEFECT	0.8738758926465338	WITHOUT_CLASSIFICATION	0.1261241073534662	DEFECT
assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert	DEFECT	0.9460510637554909	WITHOUT_CLASSIFICATION	0.05394893624450908	DEFECT
TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!	DEFECT	0.8970234040916202	WITHOUT_CLASSIFICATION	0.10297659590837982	DEFECT
note that this implementation is kinda broken for components with many-to-one associations	DEFECT	0.9948817383936618	WITHOUT_CLASSIFICATION	0.005118261606338319	DEFECT
TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values	DEFECT	0.9987816180550682	WITHOUT_CLASSIFICATION	0.0012183819449318007	DEFECT
TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");	DEFECT	0.573183622041651	DEFECT	0.42681637795834904	WITHOUT_CLASSIFICATION
This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };	DEFECT	0.8931879035218635	DEFECT	0.10681209647813648	WITHOUT_CLASSIFICATION
TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...	DEFECT	0.9999916351558104	DEFECT	8.364844189623269E-6	WITHOUT_CLASSIFICATION
