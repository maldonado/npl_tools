WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	Is this item a copy? @see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	once one criticism is found, exit
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	user interface
WITHOUT_CLASSIFICATION	criticism control
WITHOUT_CLASSIFICATION	issue resolutions
WITHOUT_CLASSIFICATION	criticism control
WITHOUT_CLASSIFICATION	critiquing
WITHOUT_CLASSIFICATION	design feedback
WITHOUT_CLASSIFICATION	the critiquing thread should wait if disabled.
WITHOUT_CLASSIFICATION	why?
WITHOUT_CLASSIFICATION	Performs critique asap. @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	critiquing
WITHOUT_CLASSIFICATION	constructor and singeton methods
WITHOUT_CLASSIFICATION	why?
WITHOUT_CLASSIFICATION	&& getAutoCritique()
WITHOUT_CLASSIFICATION	Don't clear everything here, breaks loading!
WITHOUT_CLASSIFICATION	v71
WITHOUT_CLASSIFICATION	Don't let a transient error kill the thread
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	clear out queues! @@@
WITHOUT_CLASSIFICATION	decision model listener
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	end class ChildGenDMElements
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	user interface
WITHOUT_CLASSIFICATION	issue resolution
WITHOUT_CLASSIFICATION	TODO: This should be the name of the designer that created the todoitem, not the current username!
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "predicate() returned true, creating ToDoItem");
WITHOUT_CLASSIFICATION	corrective automations, wizards
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	critiquing
WITHOUT_CLASSIFICATION	criticism control
WITHOUT_CLASSIFICATION	TODO: Make use of the constants defined in the ToDoItem class!
WITHOUT_CLASSIFICATION	if wizClass is not a subclass of Wizard, print a warning
WITHOUT_CLASSIFICATION	return getCriticName();
WITHOUT_CLASSIFICATION	criticism control
WITHOUT_CLASSIFICATION	design feedback
WITHOUT_CLASSIFICATION	issue resolution
WITHOUT_CLASSIFICATION	end interface Poster
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "Adding resolution for: " + c.getClass() + " " + canCreate);
WITHOUT_CLASSIFICATION	Use this for fast fail instead. Sacrificed for complete fail. d00mst throw new UnresolvableException( "Unable to create ItemUID for class: " + obj.getClass());
WITHOUT_CLASSIFICATION	TODO: values
WITHOUT_CLASSIFICATION	end class Goal
WITHOUT_CLASSIFICATION	check if we are using a supported java version
WITHOUT_CLASSIFICATION	implements java.io.Serialization
WITHOUT_CLASSIFICATION	end class CurDecisionCM
WITHOUT_CLASSIFICATION	end class StandardCM
WITHOUT_CLASSIFICATION	end class CompositeCM
WITHOUT_CLASSIFICATION	end class EnabledCM
WITHOUT_CLASSIFICATION	end class NotSnoozedCM
WITHOUT_CLASSIFICATION	end class AndCM
WITHOUT_CLASSIFICATION	end class DesignGoalsCM
WITHOUT_CLASSIFICATION	end class OrCM
WITHOUT_CLASSIFICATION	Register our last chance exception handler
WITHOUT_CLASSIFICATION	Get the splash screen up as early as possible
WITHOUT_CLASSIFICATION	We have to do this to set the LAF for the splash screen
WITHOUT_CLASSIFICATION	main initialization happens here
WITHOUT_CLASSIFICATION	ToolTipManager.sharedInstance().setInitialDelay(500);
WITHOUT_CLASSIFICATION	Force the configuration to load
WITHOUT_CLASSIFICATION	Synchronize the startup directory
WITHOUT_CLASSIFICATION	then, print out some version info for debuggers...
WITHOUT_CLASSIFICATION	Set the i18n locale
WITHOUT_CLASSIFICATION	set properties for application behaviour
WITHOUT_CLASSIFICATION	now, let's print it
WITHOUT_CLASSIFICATION	nothing else to do (?)
WITHOUT_CLASSIFICATION	We MUST have a project open before continuing. Create if necessary
WITHOUT_CLASSIFICATION	initPreinitialize(); initializeSubsystems(new SimpleTimer(), null); ArgoFrame.getInstance().setVisible(true);
WITHOUT_CLASSIFICATION	Perform one command.
WITHOUT_CLASSIFICATION	Now create a new object.
WITHOUT_CLASSIFICATION	initLogging();
WITHOUT_CLASSIFICATION	On uniprocessors wait until we're sure the splash screen has been painted so that we aren't competing for resources
WITHOUT_CLASSIFICATION	make the projectbrowser
WITHOUT_CLASSIFICATION	end Class Main
WITHOUT_CLASSIFICATION	end class PostLoad
WITHOUT_CLASSIFICATION	We don't care if optional modules aren't found.
WITHOUT_CLASSIFICATION	We don't care if optional modules aren't found.
WITHOUT_CLASSIFICATION	end class LoadModules
WITHOUT_CLASSIFICATION	All tabs are added at the end, except a TabToDoTarget:
WITHOUT_CLASSIFICATION	End interface GUISettingsTabInterface
WITHOUT_CLASSIFICATION	skip pos, we know it's not a valid char from above
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	Store in the user configuration, and let gef know also.
WITHOUT_CLASSIFICATION	Use the configuration if it exists, otherwise use what gef thinks.
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	actions
WITHOUT_CLASSIFICATION	failed to clone
WITHOUT_CLASSIFICATION	Remark: The code in ProjectSettings.init() currently presumes that nobody is using this event.
WITHOUT_CLASSIFICATION	NOTE: This is package scope to force callers to use ResourceLoaderWrapper
WITHOUT_CLASSIFICATION	Strip all characters out of <var>s</var> that could not be part of a valid Java identifier. Return either the given string (if all characters were valid), or a new string with all invalid characters stripped out. This allows automatic conversion of strings containing punctuation and spaces to a resource name that can be looked up.
WITHOUT_CLASSIFICATION	end class ResourceLoader
WITHOUT_CLASSIFICATION	the validity checking thread should wait if disabled.
WITHOUT_CLASSIFICATION	If element has been deleted, it's no longer valid
WITHOUT_CLASSIFICATION	History.TheHistory.addItemResolution(item, "no longer valid"); ((ToDoItem)item).resolve("no longer valid"); notifyObservers("removeElement", item);
WITHOUT_CLASSIFICATION	Notifications and Updates
WITHOUT_CLASSIFICATION	skip any identical items already on the list
WITHOUT_CLASSIFICATION	cat.debug("Checking for inhibitors " + rc);
WITHOUT_CLASSIFICATION	History.TheHistory.addItemResolution(item, reason);
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	end class ArgoJMenu
WITHOUT_CLASSIFICATION	Block added by BobTarling 8-Jan-2002 Set the checkbox on or off according to the SELECTED value of the action. If no SELECTED value is found then this defaults to true in order to remain compatible with previous versions of this code.
WITHOUT_CLASSIFICATION	EventListenerList.add() is synchronized, so we don't need to synchronize ourselves
WITHOUT_CLASSIFICATION	End of block
WITHOUT_CLASSIFICATION	end interface Clarifier
WITHOUT_CLASSIFICATION	Set the checkbox on or off according to the SELECTED value of the action. If no SELECTED value is found then this defaults to true.
WITHOUT_CLASSIFICATION	Extra care to be taken since allOffenders can be reset while this method is running.
WITHOUT_CLASSIFICATION	these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	Cached expansions
WITHOUT_CLASSIFICATION	these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	Extra care to be taken since allPosters can be reset while this method is running.
WITHOUT_CLASSIFICATION	set the icon for this poster
WITHOUT_CLASSIFICATION	EventListenerList.remove() is synchronized, so we don't need to synchronize ourselves
WITHOUT_CLASSIFICATION	MVW
WITHOUT_CLASSIFICATION	event related stuff
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	Enable buttons when selection made. @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	end class CheckManager
WITHOUT_CLASSIFICATION	Now lets search
WITHOUT_CLASSIFICATION	end class TabChecklist
WITHOUT_CLASSIFICATION	We found it!
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	Enter the class to speed up the next search.
WITHOUT_CLASSIFICATION	Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	Update our model with our saved target
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	instance varables
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	TableModel implemetation
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	criticism control
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	static accessors
WITHOUT_CLASSIFICATION	instance varables
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	TableModel implemetation
WITHOUT_CLASSIFICATION	in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT.
WITHOUT_CLASSIFICATION	in the past, 0 milliseconds after January 1, 1970, 00:00:00 GMT.
WITHOUT_CLASSIFICATION	by default, double the snooze interval each time
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	end class SnoozeOrder
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	wizard actions
WITHOUT_CLASSIFICATION	This changes the complete structure of the table, so we need to set the column widths again.
WITHOUT_CLASSIFICATION	TODO: do all following steps TODO: resolve item from ToDoList
WITHOUT_CLASSIFICATION	end class ActionOpenCritics
WITHOUT_CLASSIFICATION	Dialog box to list all critics and allow editing of some of their properties. <p> TODO: supported goals, critic network.
WITHOUT_CLASSIFICATION	Set initial sorting on Critic Headline
WITHOUT_CLASSIFICATION	Critics Table
WITHOUT_CLASSIFICATION	instead of making a new list, decrement index, return when found and index == 0
WITHOUT_CLASSIFICATION	Critic Details panel
WITHOUT_CLASSIFICATION	case 2
WITHOUT_CLASSIFICATION	TableModel implemetation
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	no maximum set, so it will stretch...
WITHOUT_CLASSIFICATION	and for advanced mode:
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	Set tableSP's preferred height to 0 so that details height is used in pack()
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 0; JLabel priLabel = new JLabel("Priority:"); gb.setConstraints(priLabel, c); _mainPanel.add(priLabel);
WITHOUT_CLASSIFICATION	fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 1; JLabel offLabel = new JLabel("Off"); gb.setConstraints(offLabel, c); _mainPanel.add(offLabel);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 2; JLabel lowLabel = new JLabel("Low"); gb.setConstraints(lowLabel, c); _mainPanel.add(lowLabel);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 3; JLabel twoLabel = new JLabel("ad"); gb.setConstraints(twoLabel, c); _mainPanel.add(twoLabel);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 4; JLabel threeLabel = new JLabel("asd"); gb.setConstraints(threeLabel, c); _mainPanel.add(threeLabel);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 5; JLabel fourLabel = new JLabel("asd"); gb.setConstraints(fourLabel, c); _mainPanel.add(fourLabel);
WITHOUT_CLASSIFICATION	c.gridy = 0; c.gridx = 6; JLabel highLabel = new JLabel("High"); gb.setConstraints(highLabel, c); _mainPanel.add(highLabel);
WITHOUT_CLASSIFICATION	------------ other methods ------------
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent( javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	TreeModel implementation - todo specific stuff
WITHOUT_CLASSIFICATION	class variables
WITHOUT_CLASSIFICATION	general icons for poster
WITHOUT_CLASSIFICATION	specialised icons for designer
WITHOUT_CLASSIFICATION	TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	end class ToDoTreeRenderer
WITHOUT_CLASSIFICATION	public static Decision decisionUNCATEGORIZED = new Decision("Uncategorized", 1);
WITHOUT_CLASSIFICATION	end class ToDoByDecision
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	instead of making a new list, decrement index, return when found and index == 0
WITHOUT_CLASSIFICATION	store wizard?
WITHOUT_CLASSIFICATION	c.gridx = 1; c.gridy = 3; c.gridheight = GridBagConstraints.REMAINDER; SpacerPanel spacer2 = new SpacerPanel(); gb.setConstraints(spacer2, c); _mainPanel.add(spacer2);
WITHOUT_CLASSIFICATION	image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	end class WizStepTextField
WITHOUT_CLASSIFICATION	store wizard?
WITHOUT_CLASSIFICATION	store wizard?
WITHOUT_CLASSIFICATION	end class WizDescription
WITHOUT_CLASSIFICATION	end class WizStepCue
WITHOUT_CLASSIFICATION	stop/start creating more critics
WITHOUT_CLASSIFICATION	end class ActionGoToCritique
WITHOUT_CLASSIFICATION	Correct lazy initialization of static field without further updates:
WITHOUT_CLASSIFICATION	does nothing
WITHOUT_CLASSIFICATION	end class ActionAutoCritique
WITHOUT_CLASSIFICATION	stop/start cleaning up invalid TodoItems.
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	end class ActionOpenGoals
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	? inform()
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Update our model with our saved target
WITHOUT_CLASSIFICATION	Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	instead of making a new list, decrement index, return when found and index == 0
WITHOUT_CLASSIFICATION	image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	store wizard?
WITHOUT_CLASSIFICATION	the target of description will always be set directly by tabtodo
WITHOUT_CLASSIFICATION	Request that we be made visible if we're not? topLevelTabbedPane.setSelectedComponent(t);
WITHOUT_CLASSIFICATION	------------- MouseListener implementation ---------------
WITHOUT_CLASSIFICATION	end class WizStepConfirm
WITHOUT_CLASSIFICATION	next line coming from projectbrowser
WITHOUT_CLASSIFICATION	------------ ItemListener implementation ----------------------
WITHOUT_CLASSIFICATION	-------------TreeSelectionListener implementation -----------
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	not needed in UML 1.x
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)
WITHOUT_CLASSIFICATION	Prepare for typing in rationale field when window is opened. @see java.awt.Component#setVisible(boolean)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	keep nagging until the user solves the problem: This seems a nice way to nag:
WITHOUT_CLASSIFICATION	Only interrupt for one todoitem
WITHOUT_CLASSIFICATION	end class ActionOpenDecisions
WITHOUT_CLASSIFICATION	blinks?
WITHOUT_CLASSIFICATION	end class ToDoByOffender
WITHOUT_CLASSIFICATION	add the perspectives to a list for the combobox
WITHOUT_CLASSIFICATION	decSlide.setPaintLabels(true);
WITHOUT_CLASSIFICATION	constants instance variables
WITHOUT_CLASSIFICATION	fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	TODO: This looks O(n^2)
WITHOUT_CLASSIFICATION	TODO: make a new history item
WITHOUT_CLASSIFICATION	cat.debug("bad decision");
WITHOUT_CLASSIFICATION	cat.debug("bad goal");
WITHOUT_CLASSIFICATION	end class DismissToDoItemDialog
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	store wizard?
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	fireTreeNodesChanged(this, path, childIndices, children);
WITHOUT_CLASSIFICATION	image.setMargin(new Insets(0, 0, 0, 0));
WITHOUT_CLASSIFICATION	otherwise parent must be an offending design material
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	end class WizStep
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	actions
WITHOUT_CLASSIFICATION	This is done for compatibility with previous version: Move the argo.user.properties written before 0.25.4 to the new location, if it exists.
WITHOUT_CLASSIFICATION	Don't allow instantiation
WITHOUT_CLASSIFICATION	ActionListener implementation
WITHOUT_CLASSIFICATION	DocumentListener implementation
WITHOUT_CLASSIFICATION	TargetListener implementation
WITHOUT_CLASSIFICATION	copy to new file and let the regular load code do the actual load
WITHOUT_CLASSIFICATION	Instance variables
WITHOUT_CLASSIFICATION	end class ConfigurationFactory
WITHOUT_CLASSIFICATION	LOG.log(Level.INFO, "Configuration saved to {0}\n", url);
WITHOUT_CLASSIFICATION	check for the older properties file and copy it over if possible
WITHOUT_CLASSIFICATION	Only allow one load
WITHOUT_CLASSIFICATION	add the first point twice
WITHOUT_CLASSIFICATION	add the first point twice
WITHOUT_CLASSIFICATION	Scale everything up
WITHOUT_CLASSIFICATION	Initialize band buffer bounds
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "getData Rectangle = " + clip);
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "getData returning raster = " + translatedRaster);
WITHOUT_CLASSIFICATION	Create a new graphics context so we start with fresh transforms
WITHOUT_CLASSIFICATION	Fill with our background color
WITHOUT_CLASSIFICATION	Translate & clip graphic to match region of interest
WITHOUT_CLASSIFICATION	Ask GEF to print a band of the diagram (translated & clipped)
WITHOUT_CLASSIFICATION	Make sure it isn't caching anything that should be written
WITHOUT_CLASSIFICATION	assert !initialized; GUITestActionOpenProject fails over this...
WITHOUT_CLASSIFICATION	Retain the original one:
WITHOUT_CLASSIFICATION	Retain the original one:
WITHOUT_CLASSIFICATION	Internal initialization method. Handles initialization which is common to both public methods.
WITHOUT_CLASSIFICATION	This is needed for the JUnit tests. Otherwise a "assert initialized" would suffice.
WITHOUT_CLASSIFICATION	This is needed for the JUnit tests. Otherwise a "assert initialized" would suffice.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Flag the command as to whether it is first in a chain
WITHOUT_CLASSIFICATION	end class DelayedChangeNotify
WITHOUT_CLASSIFICATION	Default diagram settings
WITHOUT_CLASSIFICATION	Default notation settings
WITHOUT_CLASSIFICATION	Generation preferences:
WITHOUT_CLASSIFICATION	The next one defaults to TRUE, to stay compatible with older ArgoUML versions that did not have this setting:
WITHOUT_CLASSIFICATION	The next ones defaults to TRUE, to stay compatible with older ArgoUML versions that did not have this setting:
WITHOUT_CLASSIFICATION	This Notation is not available!
WITHOUT_CLASSIFICATION	Always put the model at the top
WITHOUT_CLASSIFICATION	otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	otherwise add the diagram at the start
WITHOUT_CLASSIFICATION	finally, apply profile configuration to the model
WITHOUT_CLASSIFICATION	uri = PersistenceManager.getInstance().fixUriExtension(theProjectUri);
WITHOUT_CLASSIFICATION	Register with the save action with other subsystems so that any changes in those subsystems will enable the save button/menu item etc.
WITHOUT_CLASSIFICATION	not needed in UML 1.x
WITHOUT_CLASSIFICATION	end interface DelayedVChangeListener
WITHOUT_CLASSIFICATION	a profile initially has no applied profiles, we go bottom-up
WITHOUT_CLASSIFICATION	Skip leading underscores:
WITHOUT_CLASSIFICATION	TODO: should just be the directory to write.
WITHOUT_CLASSIFICATION	The preferences with project-scope:
WITHOUT_CLASSIFICATION	The ArgoUML version with which this project was last saved:
WITHOUT_CLASSIFICATION	if diagram added successfully, add the member too
WITHOUT_CLASSIFICATION	Adding a todo member removes any existing one.
WITHOUT_CLASSIFICATION	got past the veto, add the member
WITHOUT_CLASSIFICATION	send indeterminate new value instead of making copy of vector
WITHOUT_CLASSIFICATION	Remove the dependent modelelements, such as the statemachine for a statechartdiagram:
WITHOUT_CLASSIFICATION	Hence, a diagram name was saved in the project that we are loading. So, we use this name to retrieve any matching diagram.
WITHOUT_CLASSIFICATION	Use the first diagram.
WITHOUT_CLASSIFICATION	If there was no diagram at all, then use the (first) UML model.
WITHOUT_CLASSIFICATION	we don't need this HashMap anymore so free up the memory
WITHOUT_CLASSIFICATION	Can not delete the model
WITHOUT_CLASSIFICATION	Can not delete the profile
WITHOUT_CLASSIFICATION	@see java.lang.Object#finalize()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	Make the topmost diagram (that is not the one being deleted) current.
WITHOUT_CLASSIFICATION	trash related methods
WITHOUT_CLASSIFICATION	Fire an event some anyone who cares about diagrams being removed can listen for it
WITHOUT_CLASSIFICATION	If we delete a FigEdge or FigNode we actually call this method with the owner not the Fig itself. However, this method is called by ActionDeleteModelElements for primitive Figs (without owner).
WITHOUT_CLASSIFICATION	there's just one ProfileConfiguration in a project and there's no other way to add another one
WITHOUT_CLASSIFICATION	Tab for the settings dialog that makes it possible to select the modules that are to be enabled. TODO: Header for the table. @author Linus Tolke
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	Access methods for program infrastructure.
WITHOUT_CLASSIFICATION	@see java.io.FileFilter#accept(java.io.File)
WITHOUT_CLASSIFICATION	The creation of the actual GUI elements is deferred until they are actually needed. Otherwize we have problems with the initialization.
WITHOUT_CLASSIFICATION	Do nothing! The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	Access methods for modules that need to query about the status of other modules.
WITHOUT_CLASSIFICATION	Access methods for the GUI that the user uses to enable and disable modules.
WITHOUT_CLASSIFICATION	Access methods for the program infrastructure
WITHOUT_CLASSIFICATION	Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	TODO: huntForModulesFromJavaWebStart();
WITHOUT_CLASSIFICATION	Load modules specified by a System property. Modules specified by a system property is for running modules from within Eclipse and running from Java Web Start.
WITHOUT_CLASSIFICATION	Try-catch only the JarFile instantiation so we don't accidentally mask anything in ArgoJarClassLoader or processJarFile.
WITHOUT_CLASSIFICATION	We expect all extensions to have a manifest even though we can operate without one if necessary.
WITHOUT_CLASSIFICATION	Look for our specification
WITHOUT_CLASSIFICATION	Add this to search list for I18N properties (Done for both modules & localized property file sets)
WITHOUT_CLASSIFICATION	We havn't found it. Add it.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	Utility function to unregister all listeners registered through addElementListener. @see #addElementListener(Object, String)
WITHOUT_CLASSIFICATION	Called after the notation default property gets changed. @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	e.g. for an operation: if pce.getSource() == modelElement && event.propertyName = "parameter" if event instanceof AddAssociationEvent Get the parameter instance from event.newValue Call model to add listener on parameter on change of "name", "type" else if event instanceof RemoveAssociationEvent Get the parameter instance from event.oldValue Call model to remove listener on parameter on change of "name", "type" end if end if
WITHOUT_CLASSIFICATION	The following check should have been satisfied before we instantiated the module, but double check again
WITHOUT_CLASSIFICATION	If it didn't have a loadable module class and it doesn't look like a localized property set, warn the user that something funny is in their extension directory
WITHOUT_CLASSIFICATION	Since there is no way to compare the objects as equal, we have to search through the list at this point.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	Remark: There is also a java-like notation, which is also part of ArgoUML core distribution.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	This Notation is not available!
WITHOUT_CLASSIFICATION	This is needed for the case when the default notation is not loaded at this point.
WITHOUT_CLASSIFICATION	class accessors
WITHOUT_CLASSIFICATION	Static workers for dealing with notation names.
WITHOUT_CLASSIFICATION	No valid field for above notationLanguage. It's valid if not null.
WITHOUT_CLASSIFICATION	We also show stereotypes
WITHOUT_CLASSIFICATION	We also show stereotypes
WITHOUT_CLASSIFICATION	We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	We also show the type (of which e.g. the name may change)
WITHOUT_CLASSIFICATION	We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	and when the Operation is replaced:
WITHOUT_CLASSIFICATION	and when the class changes name:
WITHOUT_CLASSIFICATION	mvw: Indeed. The intention of the constructor parameter is to prove that there is a valid UML object to bind the notation to. So, the next statement should fail on a null parameter, and on anything that is not an object of which we can retrieve the multiplicity.
WITHOUT_CLASSIFICATION	We are not interested in the name.
WITHOUT_CLASSIFICATION	And the parameter names and values:
WITHOUT_CLASSIFICATION	And the arguments:
WITHOUT_CLASSIFICATION	We also show parameters
WITHOUT_CLASSIFICATION	We also show types of parameters
WITHOUT_CLASSIFICATION	Listen to the modelelement itself:
WITHOUT_CLASSIFICATION	We also show tagged values (the / for derived)
WITHOUT_CLASSIFICATION	If this fails, then there is a problem... dthompson 29/12/2008: It seems that the returned value is irrelevant here, so I assume that the purpose of this call is just to throw an exception in case of a problem.
WITHOUT_CLASSIFICATION	register for events from all modelelements that change the name and body text i.e. when the CallAction is replaced:
WITHOUT_CLASSIFICATION	and when the owner is replaced (unlikely for operations), and when the operation changes name:
WITHOUT_CLASSIFICATION	Listen to the modelelement itself:
WITHOUT_CLASSIFICATION	removed stereotype
WITHOUT_CLASSIFICATION	register for events from all modelelements that change the text i.e. when the Transition is replaced:
WITHOUT_CLASSIFICATION	new stereotype
WITHOUT_CLASSIFICATION	Listen to name changes in the path (useful for e.g. Package):
WITHOUT_CLASSIFICATION	register for the doActivity etc.
WITHOUT_CLASSIFICATION	register for internal transitions:
WITHOUT_CLASSIFICATION	return "parsing.java.help.attribute";
WITHOUT_CLASSIFICATION	TODO: The src_visibility tag doesn't appear to be created anywhere by ArgoUML currently
WITHOUT_CLASSIFICATION	return "parsing.help.fig-association-end-name";
WITHOUT_CLASSIFICATION	TODO: initial value
WITHOUT_CLASSIFICATION	skip spaces
WITHOUT_CLASSIFICATION	the name itself
WITHOUT_CLASSIFICATION	Check the name for validity:
WITHOUT_CLASSIFICATION	TODO: Check the name for validity.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	pick out return type
WITHOUT_CLASSIFICATION	handle multiplicity here since we need the type actually the API of generator is buggy since to generate multiplicity correctly we need the attribute too
WITHOUT_CLASSIFICATION	Build the final string
WITHOUT_CLASSIFICATION	TODO: qualifiers (e.g., const) TODO: stereotypes...
WITHOUT_CLASSIFICATION	name and params
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	constructor
WITHOUT_CLASSIFICATION	check for more attributes (';' separated):
WITHOUT_CLASSIFICATION	For Java notation, we also need to listen to "leaf" changes, since they are shown as "final" on the diagram.
WITHOUT_CLASSIFICATION	Remove bases that aren't there anymore
WITHOUT_CLASSIFICATION	Notation.findNotation("Java");
WITHOUT_CLASSIFICATION	Initialize the NotationUtilityUml:
WITHOUT_CLASSIFICATION	copy - can't iterate modify live collection while iterating it
WITHOUT_CLASSIFICATION	When nothing is generated: omit the space.
WITHOUT_CLASSIFICATION	Loop through all base classes, building a comma separated list
WITHOUT_CLASSIFICATION	yes, there are more:
WITHOUT_CLASSIFICATION	no text? remove attr!
WITHOUT_CLASSIFICATION	no non-whitechars in text? remove attr!
WITHOUT_CLASSIFICATION	We need to set the namespace/owner of the new attribute before parsing:
WITHOUT_CLASSIFICATION	If the 1st attribute is static, then the new ones, too.
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	yes, there are more:
WITHOUT_CLASSIFICATION	Generates a string representation for the provided attribute. The string representation will be of the form: visibility name [multiplicity] : type-expression = initial-value {property-string} Depending on settings in Notation, visibility, multiplicity, type-expression, initial value and properties are shown/not shown.
WITHOUT_CLASSIFICATION	Handle Derived:
WITHOUT_CLASSIFICATION	Handle Derived:
WITHOUT_CLASSIFICATION	Handle Visibility:
WITHOUT_CLASSIFICATION	fix for loading bad projects
WITHOUT_CLASSIFICATION	The "show types" defaults to TRUE, to stay compatible with older ArgoUML versions that did not have this setting:
WITHOUT_CLASSIFICATION	The element was deleted while we were processing it
WITHOUT_CLASSIFICATION	strip any trailing semi-colons
WITHOUT_CLASSIFICATION	construct bases string (comma separated)
WITHOUT_CLASSIFICATION	no text? remove op!
WITHOUT_CLASSIFICATION	no non-whitechars in text? remove op!
WITHOUT_CLASSIFICATION	check for more operations (';' separated):
WITHOUT_CLASSIFICATION	end while loop
WITHOUT_CLASSIFICATION	parameterlist is guaranteed to contain at least "("
WITHOUT_CLASSIFICATION	Don't create a stereotype for <<signal>> on a Reception but create any other parsed stereotypes as needed
WITHOUT_CLASSIFICATION	lets concatenate it to the resulting string (genStr)
WITHOUT_CLASSIFICATION	The "show types" defaults to TRUE, to stay compatible with older ArgoUML versions that did not have this setting:
WITHOUT_CLASSIFICATION	the parameters
WITHOUT_CLASSIFICATION	the returnparameters
WITHOUT_CLASSIFICATION	The model element was deleted while we were working on it
WITHOUT_CLASSIFICATION	else: we remove only the extra ","
WITHOUT_CLASSIFICATION	the query state
WITHOUT_CLASSIFICATION	Although Operation and Signal are peers in the UML type hierarchy they share the attributes isRoot, isLeaf, isAbstract, and specification. Concurrency is not shared and is specific to Operation.
WITHOUT_CLASSIFICATION	remove last ,
WITHOUT_CLASSIFICATION	end of block
WITHOUT_CLASSIFICATION	A string of the form "name:"
WITHOUT_CLASSIFICATION	this is a Message UML object
WITHOUT_CLASSIFICATION	Supported format: predecessors number ":" action The 3 parts of the string to generate:
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	This may return null:
WITHOUT_CLASSIFICATION	activatorIntNo is now guaranteed not null
WITHOUT_CLASSIFICATION	List<String> args = null;
WITHOUT_CLASSIFICATION	get the ordered list of immediate successors:
WITHOUT_CLASSIFICATION	the condition or iteration expression (recurrence):
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	Now apply the changes to the model:
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	If there are more than one suitable operation, then we pick the first one.
WITHOUT_CLASSIFICATION	Disconnect the message from the call graph Make copies of returned live collections since we're modifying
WITHOUT_CLASSIFICATION	Find the preceding message, if any, on either end of the association.
WITHOUT_CLASSIFICATION	MClassifierRole
WITHOUT_CLASSIFICATION	Connect the message at a new spot
WITHOUT_CLASSIFICATION	case 3 & 4
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	MClassifierRole
WITHOUT_CLASSIFICATION	If no variable name was given, then retain the one in the model.
WITHOUT_CLASSIFICATION	If no function-name was given, then retain the one in the model.
WITHOUT_CLASSIFICATION	Store the guard, i.e. condition or iteration expression, in the recurrence field of the Action:
WITHOUT_CLASSIFICATION	If there was no Action yet, create a CallAction:
WITHOUT_CLASSIFICATION	Things are strange if there are more than one candidate root, it has no obvious interpretation in terms of a call tree.
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	Jaap Branderhorst 2002-23-09 added next lines to link parameters and operations to the figs that represent them
WITHOUT_CLASSIFICATION	We can do nothing if we don't have both the use case and extension point.
WITHOUT_CLASSIFICATION	Parse the string to creat a new extension point.
WITHOUT_CLASSIFICATION	If we got back null we interpret this as meaning delete the reference to the extension point from the use case, otherwise we set the fields of the extension point to the values in newEp.
WITHOUT_CLASSIFICATION	Build a new extension point
WITHOUT_CLASSIFICATION	The empty string. Return null
WITHOUT_CLASSIFICATION	Handle Derived:
WITHOUT_CLASSIFICATION	If we are given the null string, return immediately, so that the extensionpoint is removed.
WITHOUT_CLASSIFICATION	A string of the form "location". This will be confused by the string ":", so we pick this out as an instruction to clear both name and location.
WITHOUT_CLASSIFICATION	A string of the form "name:location". Discard the middle token (":")
WITHOUT_CLASSIFICATION	Read past the colon.
WITHOUT_CLASSIFICATION	The string to build
WITHOUT_CLASSIFICATION	Get the fields we want
WITHOUT_CLASSIFICATION	Put in the name field if it's there
WITHOUT_CLASSIFICATION	Put in the location field if it's there
WITHOUT_CLASSIFICATION	First we decode the string:
WITHOUT_CLASSIFICATION	Secondly we check the previous model structure:
WITHOUT_CLASSIFICATION	And 3rd, we adapt the model:
WITHOUT_CLASSIFICATION	Same class, other operation
WITHOUT_CLASSIFICATION	Other class
WITHOUT_CLASSIFICATION	We found the classifier, now go find the operation:
WITHOUT_CLASSIFICATION	Here we located the new classifier with its operation.
WITHOUT_CLASSIFICATION	the text was: {frozen}
WITHOUT_CLASSIFICATION	the text was: {frozen = false}
WITHOUT_CLASSIFICATION	the text was: {frozen = true}
WITHOUT_CLASSIFICATION	Copy returned parameters because it will be a live collection for MDR
WITHOUT_CLASSIFICATION	Should we be getting this from the GUI? BT 11 aug 2002
WITHOUT_CLASSIFICATION	no type defined yet
WITHOUT_CLASSIFICATION	If the current property occurs a second time in the given list of properties, then skip it:
WITHOUT_CLASSIFICATION	This automatically pulls in a TagDefinition from the profile:
WITHOUT_CLASSIFICATION	The TV existed, but maybe it was not "true":
WITHOUT_CLASSIFICATION	TODO: For UML2: Check if the type of the TV is String.
WITHOUT_CLASSIFICATION	Generate all the existing internal transitions, so that we can compare them as text with the newly entered ones.
WITHOUT_CLASSIFICATION	strip any trailing semi-colons
WITHOUT_CLASSIFICATION	This would be solution (1): Model.getExtensionMechanismsHelper().setDataValues( taggedValue, new String[] {"false"});
WITHOUT_CLASSIFICATION	There are 2 possibilities: either (1) we follow the traditional notation philosophy, and set the tagged value to false, or (2) we restore to the pristine situation and delete the taggedValue (whatever the value was). I chose the latter (mvw).
WITHOUT_CLASSIFICATION	Allow concatenation order and separator to be localized
WITHOUT_CLASSIFICATION	Parameter etc.
WITHOUT_CLASSIFICATION	"in" is the default
WITHOUT_CLASSIFICATION	"in"
WITHOUT_CLASSIFICATION	return nothing
WITHOUT_CLASSIFICATION	it can still be null if the UML element did not have a multiplicity defined.
WITHOUT_CLASSIFICATION	Let's not be picky about the brackets - just remove them:
WITHOUT_CLASSIFICATION	get the classifier
WITHOUT_CLASSIFICATION	the State of a ClassifierInState is removed, so let's reduce it to a Classifier.
WITHOUT_CLASSIFICATION	the model is changed - job done
WITHOUT_CLASSIFICATION	Strings
WITHOUT_CLASSIFICATION	Remove the states that did not match.
WITHOUT_CLASSIFICATION	Now we have to see if any state in any statemachine of classifier is named [name]. If so, then we only have to link the state to c.
WITHOUT_CLASSIFICATION	the model is changed - our job is done
WITHOUT_CLASSIFICATION	the model is changed - our job is done
WITHOUT_CLASSIFICATION	no state named s is found, so we have to reject the user's input
WITHOUT_CLASSIFICATION	Finally, do the adaptations:
WITHOUT_CLASSIFICATION	then c is a "normal" Classifier UML states
WITHOUT_CLASSIFICATION	let's create a new ClassifierInState with the correct links
WITHOUT_CLASSIFICATION	This updates the diagram - hence as last statement:
WITHOUT_CLASSIFICATION	case 2
WITHOUT_CLASSIFICATION	case 3
WITHOUT_CLASSIFICATION	We can distinguish between 4 cases: 1. A trigger is given. None exists yet. 2. The trigger was present, and it is the same type, or a different type, and its text is changed, or the same. 3. A trigger is not given. None exists yet. 4. The name of the trigger was present, but is removed. The reaction in these cases should be: 1. Find the referred trigger (issue 5988) or create a new one, and hook it to the transition. 2. Rename the trigger. 3. Nop. 4. Unhook and erase the existing trigger.
WITHOUT_CLASSIFICATION	if no classifier has been set, then entering a state is not useful, so the user's input has to be rejected.
WITHOUT_CLASSIFICATION	TODO: If the next line trows an exception, then what do we do with the remainder of the parsed/to be parsed lines?
WITHOUT_CLASSIFICATION	Add this new one, and mark it to be retained:
WITHOUT_CLASSIFICATION	Process the final list of internal transitions, and hook it to the state:
WITHOUT_CLASSIFICATION	don't forget to remove old internals!
WITHOUT_CLASSIFICATION	Make next accesses to this instance predictable:
WITHOUT_CLASSIFICATION	and hook in the new ones:
WITHOUT_CLASSIFICATION	the ActionExpression
WITHOUT_CLASSIFICATION	let's look for a TimeEvent, ChangeEvent, CallEvent or SignalEvent
WITHOUT_CLASSIFICATION	operation(paramlist)
WITHOUT_CLASSIFICATION	the part after the || is for when there's nothing between the ()
WITHOUT_CLASSIFICATION	It is safe to give a null to the next function, since a statemachine is always composed by a model anyhow.
WITHOUT_CLASSIFICATION	else the empty s will do
WITHOUT_CLASSIFICATION	case 1 and 2
WITHOUT_CLASSIFICATION	language
WITHOUT_CLASSIFICATION	Do not set the name.
WITHOUT_CLASSIFICATION	Do not set the name.
WITHOUT_CLASSIFICATION	This case is a bit different, because of the parameters. If the event already exists, the parameters are ignored.
WITHOUT_CLASSIFICATION	when(...)
WITHOUT_CLASSIFICATION	signalname
WITHOUT_CLASSIFICATION	and parse the parameter list
WITHOUT_CLASSIFICATION	And hook it to the transition immediately, so that an exception can not cause it to remain dangling:
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	yes, there are more:
WITHOUT_CLASSIFICATION	strip any trailing semi-colons
WITHOUT_CLASSIFICATION	Parameter etc.
WITHOUT_CLASSIFICATION	"in" is the default
WITHOUT_CLASSIFICATION	"in"
WITHOUT_CLASSIFICATION	return nothing
WITHOUT_CLASSIFICATION	and parse the parameter list
WITHOUT_CLASSIFICATION	case 2
WITHOUT_CLASSIFICATION	Just change the time expression
WITHOUT_CLASSIFICATION	we have an event without expression
WITHOUT_CLASSIFICATION	It's a time-event now, but was of another type before!
WITHOUT_CLASSIFICATION	Just change the ChangeExpression
WITHOUT_CLASSIFICATION	Create a new expression:
WITHOUT_CLASSIFICATION	The parsed text describes a change-event, but the model contains another type!
WITHOUT_CLASSIFICATION	Just change the Name and linked operation
WITHOUT_CLASSIFICATION	TODO: Change the linked operation.
WITHOUT_CLASSIFICATION	Just change the Name and linked signal
WITHOUT_CLASSIFICATION	case 3 and 4
WITHOUT_CLASSIFICATION	case 3
WITHOUT_CLASSIFICATION	case 3
WITHOUT_CLASSIFICATION	case 4 erase it
WITHOUT_CLASSIFICATION	case 4 erase it
WITHOUT_CLASSIFICATION	Do not check if the parameters match.
WITHOUT_CLASSIFICATION	case 1
WITHOUT_CLASSIFICATION	NSUML does this (?) Model.getFacade().setGuard(trans, g);
WITHOUT_CLASSIFICATION	No text. We may remove the literal.
WITHOUT_CLASSIFICATION	No non-white chars in text? remove literal!
WITHOUT_CLASSIFICATION	Heuristic algorithm: do not show stereotypes if there is no name.
WITHOUT_CLASSIFICATION	@see javax.swing.JComponent#setVisible(boolean)
WITHOUT_CLASSIFICATION	strip any trailing semi-colons
WITHOUT_CLASSIFICATION	construct bases string (comma separated)
WITHOUT_CLASSIFICATION	Great! The class already existed - just use it.
WITHOUT_CLASSIFICATION	If no base was typed, then only set the name:
WITHOUT_CLASSIFICATION	Only set the name if the base was found:
WITHOUT_CLASSIFICATION	If the base was not changed, then only set the name:
WITHOUT_CLASSIFICATION	get the associationRole name
WITHOUT_CLASSIFICATION	Let's create a class with the given name, otherwise the user will not understand why we refuse his input!
WITHOUT_CLASSIFICATION	Only instantiate when we need it.
WITHOUT_CLASSIFICATION	If the base is already set to this assoc, then do not set it again. This check is needed, otherwise the setbase() below gives an exception.
WITHOUT_CLASSIFICATION	2002-07-31 Jaap Branderhorst from here made visibility etc. configurable
WITHOUT_CLASSIFICATION	get the base association name
WITHOUT_CLASSIFICATION	no instantiations
WITHOUT_CLASSIFICATION	The next one defaults to TRUE, to stay compatible with older ArgoUML versions that did not have this setting:
WITHOUT_CLASSIFICATION	end of OCLEvaluator
WITHOUT_CLASSIFICATION	look for associations
WITHOUT_CLASSIFICATION	look for associations
WITHOUT_CLASSIFICATION	MAssociationEnd
WITHOUT_CLASSIFICATION	MParameter
WITHOUT_CLASSIFICATION	MAssociationEnd
WITHOUT_CLASSIFICATION	The ocl toolkit does not like void return types
WITHOUT_CLASSIFICATION	MClassifiers cannot be Bag
WITHOUT_CLASSIFICATION	MClassifier
WITHOUT_CLASSIFICATION	first search for appropriate attributes
WITHOUT_CLASSIFICATION	first search for appropriate attributes
WITHOUT_CLASSIFICATION	MClassifier
WITHOUT_CLASSIFICATION	MOperation
WITHOUT_CLASSIFICATION	MOperation
WITHOUT_CLASSIFICATION	... and not incompletely imported
WITHOUT_CLASSIFICATION	Query checking added 05/21/01, sz9
WITHOUT_CLASSIFICATION	Query checking added 05/21/01, sz9
WITHOUT_CLASSIFICATION	end class OCLExpander
WITHOUT_CLASSIFICATION	skip first parameter == return type
WITHOUT_CLASSIFICATION	skip first parameter == return type
WITHOUT_CLASSIFICATION	Only look at classes...
WITHOUT_CLASSIFICATION	abstract classes are hardly ever singletons
WITHOUT_CLASSIFICATION	and not association classes
WITHOUT_CLASSIFICATION	with a name...
WITHOUT_CLASSIFICATION	If there is an attribute which is not static => no problem
WITHOUT_CLASSIFICATION	If there is an outgoing association => no problem
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	Only look at classes
WITHOUT_CLASSIFICATION	Only look at classes
WITHOUT_CLASSIFICATION	Check for Singleton stereotype, uninitialised instance variables and outgoing associations, as per JavaDoc above.
WITHOUT_CLASSIFICATION	Found no such attribute
WITHOUT_CLASSIFICATION	We only look at singletons
WITHOUT_CLASSIFICATION	We only look at singletons
WITHOUT_CLASSIFICATION	end class CrSingletonViolatedOnlyPrivateConstructors
WITHOUT_CLASSIFICATION	NOTE: For historical reasons true == hide, so we need to invert the sense of this
WITHOUT_CLASSIFICATION	end class CrEmptyPackage
WITHOUT_CLASSIFICATION	At this stage during loading, the diagrams are not created yet - so we have to store this name for later use.
WITHOUT_CLASSIFICATION	pw.close();
WITHOUT_CLASSIFICATION	Retain the previous project file even when the save operation crashes in the middle. Also create a backup file after saving.
WITHOUT_CLASSIFICATION	project.setFile(file);
WITHOUT_CLASSIFICATION	for AndroMDA profiles
WITHOUT_CLASSIFICATION	Retain the previous project file even when the save operation crashes in the middle. Also create a backup file after saving.
WITHOUT_CLASSIFICATION	Give the parser a map of model elements keyed by their UUID. This is used to allocate figs to their owner using the "href" attribute in PGML.
WITHOUT_CLASSIFICATION	if save did not raise an exception and name+"#" exists move name+"#" to name+"~" this is the correct backup file
WITHOUT_CLASSIFICATION	If we get a 2nd error, just ignore it
WITHOUT_CLASSIFICATION	frank: in case of exception delete name and mv name+"#" back to name if name+"#" exists this is the "rollback" to old file
WITHOUT_CLASSIFICATION	we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	Should never happen - something's really wrong
WITHOUT_CLASSIFICATION	main parsing methods
WITHOUT_CLASSIFICATION	@see java.io.InputStream#close()
WITHOUT_CLASSIFICATION	@see java.io.InputStream#read()
WITHOUT_CLASSIFICATION	@see java.io.InputStream#read(byte[], int, int)
WITHOUT_CLASSIFICATION	if save did not raise an exception and name+"#" exists move name+"#" to name+"~" this is the correct backup file
WITHOUT_CLASSIFICATION	frank: in case of exception delete name and mv name+"#" back to name if name+"#" exists this is the "rollback" to old file
WITHOUT_CLASSIFICATION	we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	boolean upgradeRequired = !checkVersion(fileVersion, releaseVersion)
WITHOUT_CLASSIFICATION	Upgrade is in the way for UML2 projects, so we turn it off in that case:
WITHOUT_CLASSIFICATION	Load .argo project descriptor
WITHOUT_CLASSIFICATION	Load the rest
WITHOUT_CLASSIFICATION	Copy the todo items after the model and diagrams so that any model elements or figs that the todo items refer to will exist before creating critics.
WITHOUT_CLASSIFICATION	first read the .argo file from Zip
WITHOUT_CLASSIFICATION	Keep reading till we hit the <argo> tag
WITHOUT_CLASSIFICATION	Get the version from the tag.
WITHOUT_CLASSIFICATION	Skip 1 lines
WITHOUT_CLASSIFICATION	Loop round loading the diagrams
WITHOUT_CLASSIFICATION	private EventListenerList listenerList = new EventListenerList();
WITHOUT_CLASSIFICATION	Skip the 2 lines <?xml version="1.0" encoding="UTF-8" ?> <!DOCTYPE todo SYSTEM "todo.dtd" >
WITHOUT_CLASSIFICATION	Keep reading till we get the left bracket of an opening tag
WITHOUT_CLASSIFICATION	Compare each following character to see that it matches the tag we want
WITHOUT_CLASSIFICATION	We also want to match with the right bracket of the tag or some other terminator
WITHOUT_CLASSIFICATION	We've found the matching tag but do we have the correct instance with matching attributes?
WITHOUT_CLASSIFICATION	Read the name of the child tag and then reset read position back to that child tag.
WITHOUT_CLASSIFICATION	Skip any whitespace till we should be on an equals sign.
WITHOUT_CLASSIFICATION	Skip any whitespace till we should be on a quote symbol.
WITHOUT_CLASSIFICATION	No other uses of string in PGMLHandler
WITHOUT_CLASSIFICATION	Handle other uses of <private> contents
WITHOUT_CLASSIFICATION	Sanity check - the returned path item placement strategy should match the one in the UML. If it doesn't, it could be that the UML was created with an older argo version, and the new argo version use a different placement strategy. If they don't match, just use the default.
WITHOUT_CLASSIFICATION	If any of the values are null, ignore the element.
WITHOUT_CLASSIFICATION	If the PathItemPlacement was unknown, leave the diagram with the default settings.
WITHOUT_CLASSIFICATION	For a match to be found, it has to have the same owner, and the same long class name.
WITHOUT_CLASSIFICATION	A list of the path item attributes for this container. The list is populated during parsing, them processed at endElement() private List<Hashtable<String, String>> pathItemAttrs = new ArrayList<Hashtable<String, String>>();
WITHOUT_CLASSIFICATION	This code has to go within the startElement block after the strings have been matched.
WITHOUT_CLASSIFICATION	Method 1: (collect data and assign later in endElement() method). Hashtable<String, String> ht = new Hashtable<String, String>(); ht.put("classname", classname); ht.put("figclassname", figclassname); ht.put("ownerhref", ownerhref); ht.put("angle", angle); ht.put("offset", offset); pathItemAttrs.add(ht);
WITHOUT_CLASSIFICATION	Create a new diagram wide settings block which is backed by the project-wide defaults that we were passed
WITHOUT_CLASSIFICATION	Ignore non-private elements within FigNode groups
WITHOUT_CLASSIFICATION	Handle ItemUID in container contents
WITHOUT_CLASSIFICATION	Discard class name, x y w h
WITHOUT_CLASSIFICATION	The owner should always have already been set in the constructor
WITHOUT_CLASSIFICATION	happens when 'is' comes from a zip file
WITHOUT_CLASSIFICATION	continue with null stream, readDiagram(...) will take care of it
WITHOUT_CLASSIFICATION	TODO: Localize these
WITHOUT_CLASSIFICATION	If the id does not look like a top-level Fig then we can assume that this is an id of a FigEdgePort inside some FigEdge. So extract the FigEdgePort from the FigEdge and return that as the FigNode.
WITHOUT_CLASSIFICATION	If there is no dot then this must be a top level Fig and can be assumed to be a FigNode.
WITHOUT_CLASSIFICATION	We are looking first to match with 3 different constructor types. We would not expect a Fig to have any mix of these. Any constructor other than these should be deprecated so we look for these first. Fig(DiagramEdgeSettings, DiagramSettings) Fig(Object, Rectangle, DiagramSettings) Fig(Rectangle, DiagramSettings)
WITHOUT_CLASSIFICATION	FigNodeModelElements should match here
WITHOUT_CLASSIFICATION	FigEdgeModelElements should match here (they have no bounds)
WITHOUT_CLASSIFICATION	Retain the previous project file even when the save operation crashes in the middle. Also create a backup file after saving.
WITHOUT_CLASSIFICATION	frank: in case of exception delete name and mv name+"#" back to name if name+"#" exists this is the "rollback" to old file
WITHOUT_CLASSIFICATION	Fall back to GEF's handling if we couldn't find an appropriate constructor
WITHOUT_CLASSIFICATION	myWriter,
WITHOUT_CLASSIFICATION	Empty constructor
WITHOUT_CLASSIFICATION	Empty constructor
WITHOUT_CLASSIFICATION	for compatibility with older format
WITHOUT_CLASSIFICATION	<model> is not used in current implementation
WITHOUT_CLASSIFICATION	<model> is not used in current implementation
WITHOUT_CLASSIFICATION	|| model == null
WITHOUT_CLASSIFICATION	|| model == null
WITHOUT_CLASSIFICATION	we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	Write out header section
WITHOUT_CLASSIFICATION	Note we assume members are ordered correctly already
WITHOUT_CLASSIFICATION	let's initialize the progressMgr
WITHOUT_CLASSIFICATION	Run through any stylesheet upgrades
WITHOUT_CLASSIFICATION	Don't use systemId here or it will get opened in preference to inputStream.
WITHOUT_CLASSIFICATION	UML 2.x files could also contain a profile model. Try again with uml:Profile as main tag.
WITHOUT_CLASSIFICATION	let's update the progress
WITHOUT_CLASSIFICATION	If we're trying to load a file from a future version complain and refuse.
WITHOUT_CLASSIFICATION	Empty constructor
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	No more we can do here on failure
WITHOUT_CLASSIFICATION	Buffer containing characters which have been decoded from the bytes in inBB.
WITHOUT_CLASSIFICATION	RegEx pattern for XML declaration and, optionally, DOCTYPE Backslashes are doubled up - one for Java, one for Regex
WITHOUT_CLASSIFICATION	Convert from bytes back to characters
WITHOUT_CLASSIFICATION	rewind our character buffer
WITHOUT_CLASSIFICATION	Remove anything that matches our pattern
WITHOUT_CLASSIFICATION	Remove null characters at the end
WITHOUT_CLASSIFICATION	Reencode the remaining characters as bytes again
WITHOUT_CLASSIFICATION	and write them to our output stream
WITHOUT_CLASSIFICATION	Skip the <?xml... first line
WITHOUT_CLASSIFICATION	cat.debug("NOTE: TodoParser handleStartTag:" + e.getName());
WITHOUT_CLASSIFICATION	NOP
WITHOUT_CLASSIFICATION	This is expected to be safe, don't add a try block here
WITHOUT_CLASSIFICATION	cat.debug("Added ToDoItem: " + _headline);
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	@see org.xml.sax.ContentHandler#startElement(java.lang.String, java.lang.String, java.lang.String, org.xml.sax.Attributes)
WITHOUT_CLASSIFICATION	@see org.xml.sax.ContentHandler#endElement(java.lang.String, java.lang.String, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.xml.sax.ContentHandler#characters(char[], int, int)
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	Retain the previous project file even when the save operation crashes in the middle. Also create a backup file after saving.
WITHOUT_CLASSIFICATION	These strings match the XML element names in the argo.tee exactly.
WITHOUT_CLASSIFICATION	The following is deprecated, but can never be removed to preserve backward compatibility with old project files
WITHOUT_CLASSIFICATION	protected methods
WITHOUT_CLASSIFICATION	empty constructor
WITHOUT_CLASSIFICATION	abstract methods
WITHOUT_CLASSIFICATION	non-abstract methods
WITHOUT_CLASSIFICATION	e.g:org.argouml.uml.generator.ui.ClassGenerationDialog -> poseidon.jar
WITHOUT_CLASSIFICATION	convenience methods
WITHOUT_CLASSIFICATION	end class SAXParserBase
WITHOUT_CLASSIFICATION	Stop UI interception
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#getDescription()
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	Retain the previous project file even when the save operation crashes in the middle. Also create a backup file after saving.
WITHOUT_CLASSIFICATION	if save did not raise an exception and name+"#" exists move name+"#" to name+"~" this is the correct backup file
WITHOUT_CLASSIFICATION	frank: in case of exception delete name and mv name+"#" back to name if name+"#" exists this is the "rollback" to old file
WITHOUT_CLASSIFICATION	we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	we have to give a message to user and set the system to unsaved!
WITHOUT_CLASSIFICATION	Make sure the file doesn't exist so the user will get prompted to choose a new name
WITHOUT_CLASSIFICATION	possibly use the following instead MemberFilePersister persister = new DiagramMemberFilePersister();
WITHOUT_CLASSIFICATION	class methods
WITHOUT_CLASSIFICATION	end class XMLTokenTableBase
WITHOUT_CLASSIFICATION	These are the file formats I know about:
WITHOUT_CLASSIFICATION	If anything goes wrong return the stack trace as a string so that we get some useful feedback.
WITHOUT_CLASSIFICATION	Return just the comment edges for a specific layer. TODO: Document: Diagram / layer? @param diagram The diagram. @return a {@link List} with the edges.
WITHOUT_CLASSIFICATION	make sure this setting exists in the configuration file to facilitate changing:
WITHOUT_CLASSIFICATION	Is row at top of screen?
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#getDescription()
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	FileFilter API
WITHOUT_CLASSIFICATION	this check for files without extension...
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	end class XMLElement
WITHOUT_CLASSIFICATION	for AndroMDA
WITHOUT_CLASSIFICATION	For some reason, this alleged directory is a single file This could be that there is some confusion or just the normal, that a single file was selected and is supposed to be imported.
WITHOUT_CLASSIFICATION	Get the contents of the directory
WITHOUT_CLASSIFICATION	The following test can cause trouble with links, because links are accepted as directories, even if they link files. Links could also result in infinite loops. For this reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	If this file is a directory
WITHOUT_CLASSIFICATION	load profile name
WITHOUT_CLASSIFICATION	Yes, scroll up one row
WITHOUT_CLASSIFICATION	Testing: Works Ok.
WITHOUT_CLASSIFICATION	if there is only one package in the model, we should suppose it's the profile model, if there is more than one, we take the ones marked as <<profile>>
WITHOUT_CLASSIFICATION	load profile dependencies
WITHOUT_CLASSIFICATION	Set up the property panels for critics:
WITHOUT_CLASSIFICATION	init profiles defined in jar files
WITHOUT_CLASSIFICATION	We have our own UML2 profile, but it is not used. Instead, by the following line the build-in eclipse UML2 standard profile and primitive types implementation are used.
WITHOUT_CLASSIFICATION	Missing WFRs
WITHOUT_CLASSIFICATION	Association Class 4.5.3.2 [1]
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	4.5.3.2 [2]
WITHOUT_CLASSIFICATION	Behavioral Feature 4.5.3.5 [2]
WITHOUT_CLASSIFICATION	TODO: Partly overlaps CrOppEndVsAttr.
WITHOUT_CLASSIFICATION	Tested with fabricated XMI - OK.
WITHOUT_CLASSIFICATION	Tested with fabricated XMI - OK.
WITHOUT_CLASSIFICATION	Tested with fabricated XMI - OK.
WITHOUT_CLASSIFICATION	4.5.3.20 [4]
WITHOUT_CLASSIFICATION	+ "a.allConnections->exists(r | r.type.oclIsKindOf(Actor)) and "
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAIfExpression(tudresden.ocl.parser.node.AIfExpression)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALogicalExpressionTail(tudresden.ocl.parser.node.ALogicalExpressionTail)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseARelationalExpressionTail(tudresden.ocl.parser.node.ARelationalExpressionTail)
WITHOUT_CLASSIFICATION	UseCase 4.11.3.5 [2]
WITHOUT_CLASSIFICATION	Classifier 4.5.3.8 [5]
WITHOUT_CLASSIFICATION	GeneralizableElement 4.5.3.20 [1]
WITHOUT_CLASSIFICATION	DataType 4.5.3.12 [1]
WITHOUT_CLASSIFICATION	Actor 4.11.3.1 [1]
WITHOUT_CLASSIFICATION	Namespace 4.5.3.26 [2]
WITHOUT_CLASSIFICATION	UseCase 4.11.3.5 [1]
WITHOUT_CLASSIFICATION	Actor 4.11.3.1 [2]
WITHOUT_CLASSIFICATION	Tested OK, except in some cases, depending on the sequence of the EPs. Probably the implementation of "forAll (x, y | ..." does not cover all combinations.
WITHOUT_CLASSIFICATION	UseCase 4.11.3.5 [4]
WITHOUT_CLASSIFICATION	UseCase 4.11.3.5 [3]
WITHOUT_CLASSIFICATION	ActionState 4.13.3.2 [3] Issue 715
WITHOUT_CLASSIFICATION	no default type for UML2
WITHOUT_CLASSIFICATION	the UML Profile is always present and default
WITHOUT_CLASSIFICATION	register the built-in profiles
WITHOUT_CLASSIFICATION	if an exception is raised file is unusable
WITHOUT_CLASSIFICATION	if the list does not exist add the code generation and good practices profiles as default
WITHOUT_CLASSIFICATION	this profile could have not been loaded when the default profile configuration was loaded at first, so we need to do it again
WITHOUT_CLASSIFICATION	We assume profile is contained in a single extent
WITHOUT_CLASSIFICATION	Nothing to delete if we couldn't get the packages
WITHOUT_CLASSIFICATION	If we found an old-style name, update it to the new package name
WITHOUT_CLASSIFICATION	Make sure the names didn't change again
WITHOUT_CLASSIFICATION	simply use name as it is
WITHOUT_CLASSIFICATION	if element is an AssociationEnd use the namespace of containing association
WITHOUT_CLASSIFICATION	if one side is null, compare with the equality operator
WITHOUT_CLASSIFICATION	XXX: hypotheses for AFeatureCall: fwd = op, val = head
WITHOUT_CLASSIFICATION	hypotheses no time expression (only invariants)
WITHOUT_CLASSIFICATION	For a iterator call we should provide: (a) the variables (b) the expression to be evaluated on each step (c) the lambda-evaluator to evaluate it
WITHOUT_CLASSIFICATION	XXX hypothesis: no time expression (inv)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAConstraint(tudresden.ocl.parser.node.AConstraint)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAClassifierContext(tudresden.ocl.parser.node.AClassifierContext)
WITHOUT_CLASSIFICATION	these operations are ok for lists too
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "OCL FEATURE CALL: " + subject + ""+ type +""+ feature + "" + parameters);
WITHOUT_CLASSIFICATION	XXX this should be done in CollectionsModelInterpreter but it can't trigger another invokeFeature...
WITHOUT_CLASSIFICATION	Logger. private static final Logger LOG = Logger.getLogger(DefaultOclEvaluator.class.getName());
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "OCL: " + ocl);
WITHOUT_CLASSIFICATION	propagate
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	if test fails this element should not be in the result set
WITHOUT_CLASSIFICATION	if test is ok this element should not be in the result set
WITHOUT_CLASSIFICATION	these operations are ok for bags too
WITHOUT_CLASSIFICATION	4.5.2.1 Abstraction
WITHOUT_CLASSIFICATION	4.5.2.3 Association
WITHOUT_CLASSIFICATION	Additional Operation 4.5.3.1 [1]
WITHOUT_CLASSIFICATION	4.5.2.5 AssociationEnd
WITHOUT_CLASSIFICATION	Additional Operation 4.5.3.3 [1]
WITHOUT_CLASSIFICATION	4.5.2.6 Attribute
WITHOUT_CLASSIFICATION	4.5.2.7 BehavioralFeature
WITHOUT_CLASSIFICATION	4.5.2.8 Binding
WITHOUT_CLASSIFICATION	4.5.2.9 Class
WITHOUT_CLASSIFICATION	4.5.2.10 Classifier
WITHOUT_CLASSIFICATION	TODO specifiedEnd??
WITHOUT_CLASSIFICATION	4.5.2.11 Comment
WITHOUT_CLASSIFICATION	4.5.2.12 Component
WITHOUT_CLASSIFICATION	Additional Operation in 4.5.3.9
WITHOUT_CLASSIFICATION	No, scroll down one row
WITHOUT_CLASSIFICATION	4.5.2.14 Dependency
WITHOUT_CLASSIFICATION	4.5.2.18 ElementOwnership
WITHOUT_CLASSIFICATION	4.5.2.19 Enumeration
WITHOUT_CLASSIFICATION	4.5.2.20 EnumerationLiteral
WITHOUT_CLASSIFICATION	4.5.2.21 Feature
WITHOUT_CLASSIFICATION	4.5.2.23 Generalizable Element
WITHOUT_CLASSIFICATION	Additional Operation in 4.5.3.20
WITHOUT_CLASSIFICATION	4.5.2.26 Method
WITHOUT_CLASSIFICATION	4.5.2.27 ModelElement
WITHOUT_CLASSIFICATION	avoiding null names
WITHOUT_CLASSIFICATION	As extended by 4.6.2.2
WITHOUT_CLASSIFICATION	Additional Operations in 4.5.3.25
WITHOUT_CLASSIFICATION	Additional Operations in 4.5.3.26
WITHOUT_CLASSIFICATION	4.5.2.29 Node
WITHOUT_CLASSIFICATION	4.5.2.30 Operation
WITHOUT_CLASSIFICATION	4.5.2.31 Parameter
WITHOUT_CLASSIFICATION	4.5.2.35 ProgrammingLanguageDataType
WITHOUT_CLASSIFICATION	Set the icon:
WITHOUT_CLASSIFICATION	@see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see java.awt.Component#getMinimumSize()
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	4.5.2.37 StructuralFeature
WITHOUT_CLASSIFICATION	4.5.2.38 TemplateArgument
WITHOUT_CLASSIFICATION	4.5.2.39 TemplateParameter
WITHOUT_CLASSIFICATION	4.11.3.5 UseCase
WITHOUT_CLASSIFICATION	The operation specificationPath results in a set containing all surrounding Namespaces that are not instances of Package. specificationPath : Set(Namespace) specificationPath = self.allSurroundingNamespaces->select(n | n.oclIsKindOf(Subsystem) or n.oclIsKindOf(Class))
WITHOUT_CLASSIFICATION	4.5.3.2 AssociationClass
WITHOUT_CLASSIFICATION	The operation allConnections results in the set of all AssociationEnds of the AssociationClass, including all connections defined by its parent (transitive closure).
WITHOUT_CLASSIFICATION	4.6.2.3 Stereotype
WITHOUT_CLASSIFICATION	stereotypeConstraint ?
WITHOUT_CLASSIFICATION	4.6.2.4 TagDefinition
WITHOUT_CLASSIFICATION	4.6.2.5 TaggedValue
WITHOUT_CLASSIFICATION	add adapters that do nothing for keyboard and mouse actions
WITHOUT_CLASSIFICATION	discard the event if its source is not from the correct type
WITHOUT_CLASSIFICATION	Guard against error conditions if climb search wasn't successful
WITHOUT_CLASSIFICATION	Sets the mouse cursor to hourglass mode
WITHOUT_CLASSIFICATION	Start receiving all events and consume them if necessary
WITHOUT_CLASSIFICATION	Activate the glass pane capabilities
WITHOUT_CLASSIFICATION	Stop receiving all events
WITHOUT_CLASSIFICATION	Deactivate the glass pane capabilities
WITHOUT_CLASSIFICATION	Sets the mouse cursor back to the regular pointer
WITHOUT_CLASSIFICATION	no initialization required
WITHOUT_CLASSIFICATION	end class SpacerPanel
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferData(java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferDataFlavors()
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#isDataFlavorSupported(java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	Called when the user has pressed Save. Performs "Save" in all Tabs.
WITHOUT_CLASSIFICATION	Climb the component hierarchy until a RootPaneContainer is found or until the very top
WITHOUT_CLASSIFICATION	end class SplashPanel
WITHOUT_CLASSIFICATION	Retrieve an existing GlassPane if old one already exist or create a new one, otherwise return null
WITHOUT_CLASSIFICATION	Add settings from the settings registry.
WITHOUT_CLASSIFICATION	keep track of the visible window associated w/the component useful during event filtering
WITHOUT_CLASSIFICATION	show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	If a toolbar was requested, create an empty one.
WITHOUT_CLASSIFICATION	Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	TODO: Localize
WITHOUT_CLASSIFICATION	TODO: Localize
WITHOUT_CLASSIFICATION	Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.
WITHOUT_CLASSIFICATION	end class TabText
WITHOUT_CLASSIFICATION	If a recursive call from setVisible(), just return
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	We have to tell the settings tab in which project the settings reside:
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	Use Case
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	savePosition(prpTodo, TabToDo.class); savePosition(prpProperties, TabProps.class); savePosition(prpDocumentation, TabDocumentation.class); savePosition(prpStyle, TabStyle.class); savePosition(prpSource, TabSrc.class); savePosition(prpConstraints, TabConstraints.class); savePosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	defer work until fetched/visible
WITHOUT_CLASSIFICATION	Actor
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	loadPosition(prpTodo, TabToDo.class); loadPosition(prpProperties, TabProps.class); loadPosition(prpDocumentation, TabDocumentation.class); loadPosition(prpStyle, TabStyle.class); loadPosition(prpSource, TabSrc.class); loadPosition(prpConstraints, TabConstraints.class); loadPosition(prpTaggedValues, TabTaggedValues.class);
WITHOUT_CLASSIFICATION	------------- Rule management --------------
WITHOUT_CLASSIFICATION	----------- name -------------------------
WITHOUT_CLASSIFICATION	------ all rules ----------
WITHOUT_CLASSIFICATION	TODO: factor out @param rule the rule to be added
WITHOUT_CLASSIFICATION	Put the current pane in a scroll pane.
WITHOUT_CLASSIFICATION	end class StylePanelFigText
WITHOUT_CLASSIFICATION	NOTE: These must stay in this order to match rendering styles
WITHOUT_CLASSIFICATION	The boundary box as held in the target fig, and as listed in the boundary box style field (null if we don't have anything valid)
WITHOUT_CLASSIFICATION	Only reset the text if the two are not the same (i.e the fig has moved, rather than we've just edited the text, when setTargetBBox() will have made them the same). Note that styleBounds could be null, so we do the test this way round.
WITHOUT_CLASSIFICATION	Change the fill colour
WITHOUT_CLASSIFICATION	Change the line colour
WITHOUT_CLASSIFICATION	Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	Parse the boundary box text. Null is returned if it is empty or invalid, which causes no change. Otherwise we tell GEF we are making a change, make the change and tell GEF we've finished.
WITHOUT_CLASSIFICATION	Get the text in the field, and don't do anything if the field is empty.
WITHOUT_CLASSIFICATION	Parse the string as if possible
WITHOUT_CLASSIFICATION	Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	Empty implementation - we only care about keyTyped
WITHOUT_CLASSIFICATION	ignored - will never be called
WITHOUT_CLASSIFICATION	add preloading progress bar?
WITHOUT_CLASSIFICATION	JasonsThemes
WITHOUT_CLASSIFICATION	TODO - lets pass in Project as a constructor argument
WITHOUT_CLASSIFICATION	Make up a default
WITHOUT_CLASSIFICATION	lafClass == null ||
WITHOUT_CLASSIFICATION	Set to the default LAF
WITHOUT_CLASSIFICATION	top, left, bottom, right
WITHOUT_CLASSIFICATION	If LAF is Metal (either set explicitly, or as the default)
WITHOUT_CLASSIFICATION	Set a custom LAF
WITHOUT_CLASSIFICATION	@see javax.swing.JTree#fireTreeCollapsed(javax.swing.tree.TreePath)
WITHOUT_CLASSIFICATION	@see javax.swing.JTree#setModel(javax.swing.tree.TreeModel)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getName()
WITHOUT_CLASSIFICATION	TODO: Localize
WITHOUT_CLASSIFICATION	TODO: Localize
WITHOUT_CLASSIFICATION	It looks better if the height increases, too
WITHOUT_CLASSIFICATION	TODO: 10 and 120 were found by trial and error. Calculate them.
WITHOUT_CLASSIFICATION	pack();
WITHOUT_CLASSIFICATION	Not localized:
WITHOUT_CLASSIFICATION	Alphabetic order!
WITHOUT_CLASSIFICATION	Alphabetic order!
WITHOUT_CLASSIFICATION	end class AboutBox
WITHOUT_CLASSIFICATION	Save project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	saves the project
WITHOUT_CLASSIFICATION	MVW: We should use default font sizes as much as possible. BTW, this impacts only the width, and reduces readibility:
WITHOUT_CLASSIFICATION	setFont(LookAndFeelMgr.getInstance().getSmallFont());
WITHOUT_CLASSIFICATION	This enables tooltips for tree; this one won't be shown:
WITHOUT_CLASSIFICATION	The default (16) puts the icons too close together:
WITHOUT_CLASSIFICATION	------------ methods that override JTree methods ---------
WITHOUT_CLASSIFICATION	If the name is too long or multi-line (e.g. for comments) then we reduce to the first line or 80 chars.
WITHOUT_CLASSIFICATION	Look for stereotype
WITHOUT_CLASSIFICATION	Use default formatting for any other type of UML element
WITHOUT_CLASSIFICATION	------------- other methods ------------------
WITHOUT_CLASSIFICATION	Labels at the left ...
WITHOUT_CLASSIFICATION	... and fields at the right.
WITHOUT_CLASSIFICATION	The user's full name:
WITHOUT_CLASSIFICATION	The user's email:
WITHOUT_CLASSIFICATION	The project description:
WITHOUT_CLASSIFICATION	This non-editable field shows the version of the ArgoUML that last saved this project:
WITHOUT_CLASSIFICATION	We need to fill the whole pane, so that the description field can take all available space:
WITHOUT_CLASSIFICATION	There is no default description.
WITHOUT_CLASSIFICATION	Defer all work until we're actually needed
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	ActionListener implementation
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary1()
WITHOUT_CLASSIFICATION	private JCheckBox jchbBold = null;
WITHOUT_CLASSIFICATION	find and add all subdirectories
WITHOUT_CLASSIFICATION	private JCheckBox jchbItalic = null;
WITHOUT_CLASSIFICATION	Initialize font faces list
WITHOUT_CLASSIFICATION	Most of this code originates from ActionOpenProject.
WITHOUT_CLASSIFICATION	Initialize font sizes list
WITHOUT_CLASSIFICATION	jContentPane.add(getJchbBold(), gridBagConstraints2); jContentPane.add(getJchbItalic(), gridBagConstraints3);
WITHOUT_CLASSIFICATION	Try adding the extension from the chosen filter.
WITHOUT_CLASSIFICATION	MouseListener implementation
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	these are blue in Metal Default Theme
WITHOUT_CLASSIFICATION	these are gray in Metal Default Theme
WITHOUT_CLASSIFICATION	KeyListener implementation
WITHOUT_CLASSIFICATION	ListSelectionListener implementation
WITHOUT_CLASSIFICATION	diagrams are not placed in search results
WITHOUT_CLASSIFICATION	Only return once per diagram so we don't, for example, find a class as a diagram element and also as a child of a package which is on the diagram
WITHOUT_CLASSIFICATION	no related
WITHOUT_CLASSIFICATION	TODO: tabs for class, state, usecase, help
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	TabResults has really large preferred height, so divide in half to reduce size of dialog which will be sized based on this preferred size.
WITHOUT_CLASSIFICATION	Load project at slightly lower priority to keep UI responsive
WITHOUT_CLASSIFICATION	JTabbedPane tabs = new JTabbedPane(); mainPanel.add(tabs, BorderLayout.CENTER); tabs.addTab("All Diagrams", allDiagrams);
WITHOUT_CLASSIFICATION	The south panel always has tabs - but they are added (later) elsewhere.
WITHOUT_CLASSIFICATION	loads the project
WITHOUT_CLASSIFICATION	default tab todo
WITHOUT_CLASSIFICATION	Special case for backward compatibility
WITHOUT_CLASSIFICATION	default tab todo
WITHOUT_CLASSIFICATION	Select prop panel if current panel is not appropriate for selected target
WITHOUT_CLASSIFICATION	not visible any more - so remove as listener
WITHOUT_CLASSIFICATION	Newly selected tab may have stale target info, so generate a new set target event for it to refresh it
WITHOUT_CLASSIFICATION	update the previously selected tab
WITHOUT_CLASSIFICATION	The other tabs need to be updated depending on the selection.
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	TODO: Quick return here for target == null? - tfm
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	---------------- listener management ----------------
WITHOUT_CLASSIFICATION	--------------- tree nodes -------------------------
WITHOUT_CLASSIFICATION	------------- tree structure -----------------
WITHOUT_CLASSIFICATION	see getValue(), setValue()
WITHOUT_CLASSIFICATION	Create a timer.
WITHOUT_CLASSIFICATION	Mount the glasspane on the component window
WITHOUT_CLASSIFICATION	keep track of the glasspane as an instance variable
WITHOUT_CLASSIFICATION	Start interception UI interactions
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	If action comes in with no modifiers, it is a pure keyboard event (e.g. spacebar), so do it. Anything else is probably a mouse event, so ignore it. Mouse events are dealt with by mousePressed() instead (see bottom of page).
WITHOUT_CLASSIFICATION	end class StylePanel
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	Make sure the correspondence that we depend on doesn't change
WITHOUT_CLASSIFICATION	getContentPane().add(_menuBar, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	allows me to ask "Do you want to save first?"
WITHOUT_CLASSIFICATION	Add listener for project changes
WITHOUT_CLASSIFICATION	add listener to get notified when active diagram changes
WITHOUT_CLASSIFICATION	Add a listener to focus changes. Rationale: reset the undo manager to start a new chain.
WITHOUT_CLASSIFICATION	We get many many events (why?), so let's filter:
WITHOUT_CLASSIFICATION	create the todopane
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.JFrame#getJMenuBar()
WITHOUT_CLASSIFICATION	@see java.awt.Component#setVisible(boolean)
WITHOUT_CLASSIFICATION	There are various details panes all of which could hold different tabs pages according to users settings. Place each pane in the required border area.
WITHOUT_CLASSIFICATION	Toolbar boundary is the area between the menu and the status bar. It contains the workarea at centre and the toolbar position north, south, east or west.
WITHOUT_CLASSIFICATION	Add target listeners for details panes
WITHOUT_CLASSIFICATION	Convenience methods to return saved width and height values
WITHOUT_CLASSIFICATION	In theory there can be multiple details pane (work in progress). It must first be determined which details page contains the properties tab. Bob Tarling 7 Dec 2002
WITHOUT_CLASSIFICATION	The trySave method results in the save taking place in another thread. If that completes without error the ProjectBrowser.exit() method will be called which will actually exist the system.
WITHOUT_CLASSIFICATION	end class WindowCloser
WITHOUT_CLASSIFICATION	the project changed
WITHOUT_CLASSIFICATION	Designer.TheDesigner.getToDoList().removeAllElements();
WITHOUT_CLASSIFICATION	update all panes
WITHOUT_CLASSIFICATION	/ TargetListener methods implemented so notified when selected diagram changes. Used to update the window title.
WITHOUT_CLASSIFICATION	this method is invoked from several places, so we have to check whether if the project uri is set or not
WITHOUT_CLASSIFICATION	does the file really exists?
WITHOUT_CLASSIFICATION	project file doesn't exist. let's pop up a message dialog..
WITHOUT_CLASSIFICATION	..and let's ask the user whether he wants to save the actual project into a new file or not
WITHOUT_CLASSIFICATION	save action has been cancelled
WITHOUT_CLASSIFICATION	Attempt to save this project under a new name.
WITHOUT_CLASSIFICATION	Prompt the user for the new name.
WITHOUT_CLASSIFICATION	let's call the real save method
WITHOUT_CLASSIFICATION	Repair any errors in the project
WITHOUT_CLASSIFICATION	notification of menu bar
WITHOUT_CLASSIFICATION	Simulate some errors to repair. Replace with junits - Bob
WITHOUT_CLASSIFICATION	Change to true to enable testing
WITHOUT_CLASSIFICATION	A Fig with a null owner
WITHOUT_CLASSIFICATION	A Fig with a null layer
WITHOUT_CLASSIFICATION	A Fig with a removed model element
WITHOUT_CLASSIFICATION	Remove the old project first. It's wasteful to create a temp empty project, but too much of ArgoUML depends on having a current project
WITHOUT_CLASSIFICATION	Let's save this project in the mru list
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	Let's save this project as the last used one in the configuration file
WITHOUT_CLASSIFICATION	an error that can be corrected by the user, so no stack trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	an error that can be corrected by the user, so no stack trace, but instead an explanation and a hint how to fix
WITHOUT_CLASSIFICATION	This is temporary. Load project should create a new project with its own UndoManager and so there should be no Command
WITHOUT_CLASSIFICATION	Make sure save action is always reinstated
WITHOUT_CLASSIFICATION	We clear the save-required flag on the Swing event thread in the hopes that it gets done after any other background work (listener updates) that is being done there
WITHOUT_CLASSIFICATION	adding project files icon
WITHOUT_CLASSIFICATION	end class ProjectBrowser
WITHOUT_CLASSIFICATION	Defer initialization until we're visible
WITHOUT_CLASSIFICATION	Make the result inmediately visible in case of apply:
WITHOUT_CLASSIFICATION	Disabled since it gives various problems: e.g. the toolbar icons get too wide. Also the default does not give the new java 5.0 looks. SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(this));
WITHOUT_CLASSIFICATION	filled in later
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	Create new menu item if it doesn't exist for this class.
WITHOUT_CLASSIFICATION	Make this change persistant
WITHOUT_CLASSIFICATION	If menus don't containt menu item necessary for this class, create it
WITHOUT_CLASSIFICATION	If visibility is already changed for this class, respect it.
WITHOUT_CLASSIFICATION	If there is persistant state for this toolbar, respect it, or add it to persistance data
WITHOUT_CLASSIFICATION	Queue to event thread to prevent race during close
WITHOUT_CLASSIFICATION	Add toolbar.
WITHOUT_CLASSIFICATION	Register popup menu with toolbar.
WITHOUT_CLASSIFICATION	these settings are needed to make the ProgressMonitor pop up early
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	Add settings from the settings registry.
WITHOUT_CLASSIFICATION	Increase width to accommodate all tabs on one row.
WITHOUT_CLASSIFICATION	windowOpen state will be changed when window is activated
WITHOUT_CLASSIFICATION	Called when the user has pressed Save. Performs "Save" in all Tabs.
WITHOUT_CLASSIFICATION	Called when the user has pressed Cancel. Performs "Cancel" in all Tabs.
WITHOUT_CLASSIFICATION	We only request focus the first time we become visible
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	ignored - we only care about open/closing
WITHOUT_CLASSIFICATION	Handle the same as an explicit cancel
WITHOUT_CLASSIFICATION	File load/save gets done on a background thread, so we'll probably have to queue this to the Swing event thread
WITHOUT_CLASSIFICATION	TODO: concatenate? - tfm overwrite for now
WITHOUT_CLASSIFICATION	end class StylePanelFigRRect
WITHOUT_CLASSIFICATION	Let the parent do its refresh.
WITHOUT_CLASSIFICATION	lets redraw the box
WITHOUT_CLASSIFICATION	@see java.awt.Component#getPreferredSize()
WITHOUT_CLASSIFICATION	@see java.awt.Component#getMinimumSize()
WITHOUT_CLASSIFICATION	Called when the user selects a tab, by clicking or otherwise. @see javax.swing.event.ChangeListener#stateChanged(javax.swing.event.ChangeEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	We don't know what thread events will be delivered on, so make sure we run Swing methods on the Swing thread
WITHOUT_CLASSIFICATION	This instead of the label ??? displayPane.setBorder(new TitledBorder( Translator.localize("Display: ")));
WITHOUT_CLASSIFICATION	add in front of the others add the label in front of the "pane"
WITHOUT_CLASSIFICATION	and finally, adjust the scrollbars to show the Fig
WITHOUT_CLASSIFICATION	% thresholds for bar color changes
WITHOUT_CLASSIFICATION	making it possible to jump to the modelroots
WITHOUT_CLASSIFICATION	org.argouml.ui.TabTable TabMetrics TabJavaSrc | TabSrc TabUMLDisplay TabHash
WITHOUT_CLASSIFICATION	Timer action method. Periodically update our stats and force a repaint.
WITHOUT_CLASSIFICATION	Virtual memory (heap) stats
WITHOUT_CLASSIFICATION	Thin bar to show current allocated heap size
WITHOUT_CLASSIFICATION	Thin bar to show current used
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	the introducing label
WITHOUT_CLASSIFICATION	how to handle empty target lists? probably the MultiEditorPane should only show an empty pane in that case
WITHOUT_CLASSIFICATION	private JPanel constraintsTab = new JPanel();
WITHOUT_CLASSIFICATION	The child is sometimes not found when the tree is being updated
WITHOUT_CLASSIFICATION	private JTabbedPane tabs = new JTabbedPane();
WITHOUT_CLASSIFICATION	tabs.setMinimumSize(new Dimension(300, 250));
WITHOUT_CLASSIFICATION	private JPanel modifiedTab = new JPanel();
WITHOUT_CLASSIFICATION	The ActivityGraph.
WITHOUT_CLASSIFICATION	private JPanel tagValsTab = new JPanel();
WITHOUT_CLASSIFICATION	open space at gridy = 2;
WITHOUT_CLASSIFICATION	mainPanel.add(north, BorderLayout.NORTH);
WITHOUT_CLASSIFICATION	Any type
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	TODO: Localize
WITHOUT_CLASSIFICATION	MouseListener implementation
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	empty implementation - we only handle mouseClicked
WITHOUT_CLASSIFICATION	This text is for the developers. It doesn't need to be localized.
WITHOUT_CLASSIFICATION	These shouldn't really be <br> instead of <p> elements, but the lines all get run together when pasted into a browser window.
WITHOUT_CLASSIFICATION	JPanel north = new JPanel(); north.setLayout(new BorderLayout()); north.add(tabs, BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	initConstraintsTab(); tabs.addTab(Translator.localize("tab.constraints"), constraintsTab); tabs.setEnabledAt(3, false);
WITHOUT_CLASSIFICATION	initTagValsTab(); tabs.addTab(Translator.localize("dialog.find.tab.tagged-values"), tagValsTab); tabs.setEnabledAt(2, false);
WITHOUT_CLASSIFICATION	end class FindDialog
WITHOUT_CLASSIFICATION	name += " in " + dName;
WITHOUT_CLASSIFICATION	Not in UML 2.x (or metatypes) type.addItem(PredicateMType.create( Model.getMetaTypes().getActivityGraph()));
WITHOUT_CLASSIFICATION	Set the name and icon:
WITHOUT_CLASSIFICATION	help tab is 0
WITHOUT_CLASSIFICATION	end runGC_actionPerformed()
WITHOUT_CLASSIFICATION	end class PredicateMType
WITHOUT_CLASSIFICATION	end updateInfo()
WITHOUT_CLASSIFICATION	end class NavigatorPane
WITHOUT_CLASSIFICATION	end copy_actionPerformed()
WITHOUT_CLASSIFICATION	end class ActionGotoDiagram
WITHOUT_CLASSIFICATION	end class SystemInfoDialog
WITHOUT_CLASSIFICATION	clean the history
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	But exclude elements that enclose others, since their algorithms to calculate the minimum size does not take enclosed objects into account:
WITHOUT_CLASSIFICATION	super(Translator.localize("action.size-to-fit-contents"));
WITHOUT_CLASSIFICATION	unsupported.
WITHOUT_CLASSIFICATION	Only resize elements which the user would also be able to resize:
WITHOUT_CLASSIFICATION	if a default action was voided then we have to save it
WITHOUT_CLASSIFICATION	Set the name:
WITHOUT_CLASSIFICATION	let's load the default shortcut for every action
WITHOUT_CLASSIFICATION	end class ActionFind
WITHOUT_CLASSIFICATION	let's load the current shortcut from the configuration (as a string)
WITHOUT_CLASSIFICATION	generate menu
WITHOUT_CLASSIFICATION	it should never go here!
WITHOUT_CLASSIFICATION	view menu
WITHOUT_CLASSIFICATION	file menu
WITHOUT_CLASSIFICATION	align submenu
WITHOUT_CLASSIFICATION	edit menu
WITHOUT_CLASSIFICATION	create menu
WITHOUT_CLASSIFICATION	arrange menu
WITHOUT_CLASSIFICATION	help menu
WITHOUT_CLASSIFICATION	help menu
WITHOUT_CLASSIFICATION	This ID is used as DEFAULT_ID !
WITHOUT_CLASSIFICATION	end class ActionAboutArgoUML
WITHOUT_CLASSIFICATION	distribute submenu
WITHOUT_CLASSIFICATION	end class ActionPageSetup
WITHOUT_CLASSIFICATION	trap focus traversal keys also
WITHOUT_CLASSIFICATION	let's add the key printing logic
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	The "Close window" shortcut (ALT+F4) actually can't be registered as a shortcut, because it closes the configuration dialog!
WITHOUT_CLASSIFICATION	if a not-default current shortcut was added, then we have to save it
WITHOUT_CLASSIFICATION	if the actual is not going to be saved, then try to remove it (as it could have been cancelled)
WITHOUT_CLASSIFICATION	no modifiers - let's check if the key is valid
WITHOUT_CLASSIFICATION	middle of shortcut
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	add last recently used list _before_ exit menu
WITHOUT_CLASSIFICATION	KeyStroke f7 = KeyStroke.getKeyStroke(KeyEvent.VK_F7, 0);
WITHOUT_CLASSIFICATION	and exit menu entry starting with separator.
WITHOUT_CLASSIFICATION	This used to be deferred, but it's only 30-40 msec of work.
WITHOUT_CLASSIFICATION	now, let's set up the "selected action" container
WITHOUT_CLASSIFICATION	generate.add(Actions.GenerateWeb);
WITHOUT_CLASSIFICATION	Add the help menu item.
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the name and icon:
WITHOUT_CLASSIFICATION	clean the history
WITHOUT_CLASSIFICATION	Comment out when we are ready to release undo/redo JMenuItem undoItem = edit.add( ProjectActions.getInstance().getUndoAction()); setMnemonic(undoItem, "Undo"); ShortcutMgr.assignAccelerator(undoItem, ShortcutMgr.ACTION_UNDO); JMenuItem redoItem = edit.add( ProjectActions.getInstance().getRedoAction()); setMnemonic(redoItem, "Redo"); ShortcutMgr.assignAccelerator(redoItem, ShortcutMgr.ACTION_REDO); edit.addSeparator();
WITHOUT_CLASSIFICATION	JMenuItem cutItem = edit.add(ActionCut.getInstance()); setMnemonic(cutItem, "Cut"); setAccelerator(cutItem, ctrlX); JMenuItem copyItem = edit.add(ActionCopy.getInstance()); setMnemonic(copyItem, "Copy"); setAccelerator(copyItem, ctrlC); JMenuItem pasteItem = edit.add(ActionPaste.getInstance()); setMnemonic(pasteItem, "Paste"); setAccelerator(pasteItem, ctrlV); edit.addSeparator();
WITHOUT_CLASSIFICATION	Create the edit toolbar based on the Menu. All menuItems that have an Icon are presumed to be based upon an Action, and these Actions are used in the toolbar.
WITHOUT_CLASSIFICATION	setHelpMenu(help);
WITHOUT_CLASSIFICATION	Component or Action
WITHOUT_CLASSIFICATION	set maximum length of menu entry
WITHOUT_CLASSIFICATION	JMenuItem item = _fileMenu.add(new ActionReopenProject(filename));
WITHOUT_CLASSIFICATION	the text is used by the event handler for opening the project
WITHOUT_CLASSIFICATION	create all nessessary configuration keys for lru
WITHOUT_CLASSIFICATION	holds file menu
WITHOUT_CLASSIFICATION	text is short, tooltip is long
WITHOUT_CLASSIFICATION	read existing file names from configuration
WITHOUT_CLASSIFICATION	empty entry stops reading --> last line!
WITHOUT_CLASSIFICATION	this is the recent count
WITHOUT_CLASSIFICATION	delete all existing entries
WITHOUT_CLASSIFICATION	add new entry as first entry
WITHOUT_CLASSIFICATION	add other existing entries, but filter the just added one
WITHOUT_CLASSIFICATION	save count
WITHOUT_CLASSIFICATION	and store configuration props
WITHOUT_CLASSIFICATION	end class ActionExit
WITHOUT_CLASSIFICATION	box.setLocationRelativeTo(jframe);
WITHOUT_CLASSIFICATION	end class ActionHelp
WITHOUT_CLASSIFICATION	instantiation not allowed
WITHOUT_CLASSIFICATION	end class ActionPrint
WITHOUT_CLASSIFICATION	let's add the table, inside a JScrollPane
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	Do nothing! The next time we refresh, we will fetch the values again.
WITHOUT_CLASSIFICATION	Do nothing - these buttons are not shown.
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	init from config read number, write result as new default and prepare keys
WITHOUT_CLASSIFICATION	get already existing names from menu actions real file names, not action names !
WITHOUT_CLASSIFICATION	let's enable the radiobuttons container
WITHOUT_CLASSIFICATION	updating the radiobuttons container's title
WITHOUT_CLASSIFICATION	let's select the correct radio button
WITHOUT_CLASSIFICATION	no shortcuts --> NONE
WITHOUT_CLASSIFICATION	current shortcut == default --> DEFAULT
WITHOUT_CLASSIFICATION	customized shortcut --> CUSTOM
WITHOUT_CLASSIFICATION	let's reload the shortcuts
WITHOUT_CLASSIFICATION	conflict detected: showing a warning to the user, instead of saving shortcuts
WITHOUT_CLASSIFICATION	saving shortcuts
WITHOUT_CLASSIFICATION	if a shortcut has been select then we have to check if the actual action is in conflict with other ones
WITHOUT_CLASSIFICATION	this shortcut was already been assigned to another action; let's pop-up a message for the user
WITHOUT_CLASSIFICATION	blanking the old action's shortcut.. and now refreshing the table.
WITHOUT_CLASSIFICATION	re-selecting the old row, without changing the target - and without throwing another ListSelectionEvent!
WITHOUT_CLASSIFICATION	let's change the target
WITHOUT_CLASSIFICATION	duplicate shortcut not found; let's check for duplicates
WITHOUT_CLASSIFICATION	there's a duplicate: let's recheck if there is a conflict
WITHOUT_CLASSIFICATION	updating the shortcut field
WITHOUT_CLASSIFICATION	updating the table data
WITHOUT_CLASSIFICATION	updating the actions
WITHOUT_CLASSIFICATION	the shortcut has already been assigned to another action!
WITHOUT_CLASSIFICATION	if the given object is a KeyStroke instance, then we ca
WITHOUT_CLASSIFICATION	let's update also the actions array
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	The default nr of rows is 8, but since we have 9 perspectives by default now, setting to 9 is nicer.
WITHOUT_CLASSIFICATION	Check if multiple items are selected.
WITHOUT_CLASSIFICATION	profile section: dealing with profiles in different states
WITHOUT_CLASSIFICATION	1. a noneditable applied profile
WITHOUT_CLASSIFICATION	just no item added in this case
WITHOUT_CLASSIFICATION	3. the editable unapplied profile
WITHOUT_CLASSIFICATION	end of profile section
WITHOUT_CLASSIFICATION	Can't delete last top level model
WITHOUT_CLASSIFICATION	Determine if only diagrams are in the target list.
WITHOUT_CLASSIFICATION	"x nodes and x edges"
WITHOUT_CLASSIFICATION	Check to see if all targets are classifiers before adding an option to create an association between them all
WITHOUT_CLASSIFICATION	test if this element can be contained by the target
WITHOUT_CLASSIFICATION	iterate through all possible model elements to determine which are valid to be contained by the selected target
WITHOUT_CLASSIFICATION	end class ActionAddExistingRelatedNode
WITHOUT_CLASSIFICATION	this element can be contained add a menu item that allows the user to take that action
WITHOUT_CLASSIFICATION	... otherwise we select the item below the mousepointer.
WITHOUT_CLASSIFICATION	We preserve the current (multiple) selection, if we are over part of it ...
WITHOUT_CLASSIFICATION	unimplemented - we only care about expanding
WITHOUT_CLASSIFICATION	end class ExplorerMouseListener
WITHOUT_CLASSIFICATION	does nothing.
WITHOUT_CLASSIFICATION	need to update the selection state.
WITHOUT_CLASSIFICATION	Perform recursive search of subtree rooted at 'node', selecting all nodes which have a userObject matching one of our targets.
WITHOUT_CLASSIFICATION	get the elements
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	target may appear multiple places in the tree, so we don't stop here (but it's expensive to search the whole tree) - tfm - 20070904 targets.remove(t); break;
WITHOUT_CLASSIFICATION	scan the visible rows for duplicates of this elem and select them
WITHOUT_CLASSIFICATION	check which targetmanager method to call
WITHOUT_CLASSIFICATION	we must call the correct method on targetmanager for each added or removed target
WITHOUT_CLASSIFICATION	we can't remove the targets in one go, we have to do it one by one.
WITHOUT_CLASSIFICATION	setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	setTargets(e.getNewTargets());
WITHOUT_CLASSIFICATION	at the top right bottom left bottom
WITHOUT_CLASSIFICATION	the dialog is modal
WITHOUT_CLASSIFICATION	sortJListModel(ruleLibraryList);
WITHOUT_CLASSIFICATION	disable the buttons for now, since no selection has been made yet
WITHOUT_CLASSIFICATION	the text will be set later
WITHOUT_CLASSIFICATION	the text will be set later
WITHOUT_CLASSIFICATION	remove the ones already selected (if a perspective is selected)
WITHOUT_CLASSIFICATION	add them
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	must add an editable list of new ExplorerPerspective's to the list model so that the original ones are not changed in the case of a cancel action by the user.
WITHOUT_CLASSIFICATION	set the newly selected item in the library list
WITHOUT_CLASSIFICATION	update the label (which shows the number of rules)
WITHOUT_CLASSIFICATION	set the newly selected item in the library list
WITHOUT_CLASSIFICATION	remove the rule from the library list
WITHOUT_CLASSIFICATION	The name of the UMLDiagram represented by this node has changed.
WITHOUT_CLASSIFICATION	uml model events
WITHOUT_CLASSIFICATION	notation events
WITHOUT_CLASSIFICATION	Handle remove for non-UML elements (e.g. diagrams)
WITHOUT_CLASSIFICATION	Get the selected targets (UML ModelElements) from the TargetManager.
WITHOUT_CLASSIFICATION	project events
WITHOUT_CLASSIFICATION	show a chooser dialog for the file name, only xmi is allowed
WITHOUT_CLASSIFICATION	get one of the default profile dirs, if available (as a default value for the following save dialog)
WITHOUT_CLASSIFICATION	save profile
WITHOUT_CLASSIFICATION	register it as a user profile
WITHOUT_CLASSIFICATION	this is safe because getName always returns a string of some type
WITHOUT_CLASSIFICATION	load user perspectives
WITHOUT_CLASSIFICATION	get the perspective name
WITHOUT_CLASSIFICATION	make sure there are some rules...
WITHOUT_CLASSIFICATION	get the rules
WITHOUT_CLASSIFICATION	get the rule name
WITHOUT_CLASSIFICATION	create the rule
WITHOUT_CLASSIFICATION	rule name but no rules
WITHOUT_CLASSIFICATION	add the perspective
WITHOUT_CLASSIFICATION	no user defined perspectives
WITHOUT_CLASSIFICATION	one last check that some loaded.
WITHOUT_CLASSIFICATION	works for both statediagram as activitygraph
WITHOUT_CLASSIFICATION	Enter here go rules only relevant for UML 2 empty for now
WITHOUT_CLASSIFICATION	The drag gesture recognizer fires events in response to drag gestures in a component.
WITHOUT_CLASSIFICATION	specifies valid actions
WITHOUT_CLASSIFICATION	Eliminates right mouse clicks as valid actions
WITHOUT_CLASSIFICATION	First argument: Component to associate the target with Second argument: DropTargetListener
WITHOUT_CLASSIFICATION	Get the cell renderer (which is a JLabel) for the path being dragged.
WITHOUT_CLASSIFICATION	The layout manager would normally do this:
WITHOUT_CLASSIFICATION	Get a buffered image of the selection for dragging a ghost image
WITHOUT_CLASSIFICATION	Ask the cell renderer to paint itself into the BufferedImage. Make the image ghostlike.
WITHOUT_CLASSIFICATION	Now paint a gradient UNDER the ghosted JLabel text (but not under the icon if any).
WITHOUT_CLASSIFICATION	Make the gradient ghostlike:
WITHOUT_CLASSIFICATION	Remember the path being dragged (because if it is being moved, we will have to delete it later).
WITHOUT_CLASSIFICATION	We pass our drag image just in case it IS supported by the platform.
WITHOUT_CLASSIFICATION	If the destination is not a NameSpace, then abort:
WITHOUT_CLASSIFICATION	If the destination is a DataType, then abort:
WITHOUT_CLASSIFICATION	We are sure "dest" is a Namespace now.
WITHOUT_CLASSIFICATION	MVW: These are the WFRs for DataType: [1] A DataType can only contain Operations, which all must be queries. self.allFeatures->forAll(f | f.oclIsKindOf(Operation) and f.oclAsType(Operation).isQuery) [2] A DataType cannot contain any other ModelElements. self.allContents->isEmpty IMHO we should enforce these WFRs here. ... so it is still possible to copy or move query operations, hence we should allow this.
WITHOUT_CLASSIFICATION	Let's check all dragged elements - if one of these may be dropped, then the drag is valid. The others will be ignored when dropping.
WITHOUT_CLASSIFICATION	empty implementation - not used.
WITHOUT_CLASSIFICATION	empty implementation - not used.
WITHOUT_CLASSIFICATION	empty implementation - not used.
WITHOUT_CLASSIFICATION	Figure out which row we're on.
WITHOUT_CLASSIFICATION	If we are not on a row then ignore this autoscroll request
WITHOUT_CLASSIFICATION	We are sure "dest" is a Namespace now.
WITHOUT_CLASSIFICATION	Autoscroll Interface... The following code was borrowed from the book: Java Swing By Robert Eckstein, Marc Loy & Dave Wood Paperback - 1221 pages 1 Ed edition (September 1998) O'Reilly & Associates; ISBN: 156592455X The relevant chapter of which can be found at: http:www.oreilly.com/catalog/jswing/chapter/dnd.beta.pdf
WITHOUT_CLASSIFICATION	Now decide if the row is at the top of the screen or at the bottom. We do this to make the previous row (or the next row) visible as appropriate. If were at the absolute top or bottom, just return the first or last row respectively.
WITHOUT_CLASSIFICATION	Set up a hover timer, so that a node will be automatically expanded or collapsed if the user lingers on it for more than a short time.
WITHOUT_CLASSIFICATION	isRootPath
WITHOUT_CLASSIFICATION	Set timer to one-shot mode
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "dragOver");
WITHOUT_CLASSIFICATION	The next condition becomes false when dragging in something from another application.
WITHOUT_CLASSIFICATION	If a drag image is not supported by the platform, then draw my own drag image.
WITHOUT_CLASSIFICATION	Rub out the last ghost image and cue line:
WITHOUT_CLASSIFICATION	And remember where we are about to draw the new ghost image:
WITHOUT_CLASSIFICATION	Just rub out the last cue line
WITHOUT_CLASSIFICATION	In any case draw (over the ghost image if necessary) a cue line indicating where a drop will occur.
WITHOUT_CLASSIFICATION	And include the cue line in the area to be rubbed out next time
WITHOUT_CLASSIFICATION	Testcase: drag something from another application into ArgoUML, and the explorer shows the drop icon, instead of the noDrop.
WITHOUT_CLASSIFICATION	to prohibit dropping onto the drag source:
WITHOUT_CLASSIFICATION	If the destination is not a NameSpace, then reject:
WITHOUT_CLASSIFICATION	If the destination is a DataType, then reject:
WITHOUT_CLASSIFICATION	Prevent hover timer from doing an unwanted expandPath or collapsePath:
WITHOUT_CLASSIFICATION	Clear the ghost image:
WITHOUT_CLASSIFICATION	get new parent node
WITHOUT_CLASSIFICATION	get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	The user-DropActions are: Ctrl + Shift -> ACTION_LINK Ctrl -> ACTION_COPY Shift -> ACTION_MOVE (none) -> ACTION_MOVE
WITHOUT_CLASSIFICATION	Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	Only accept COPY or MOVE gestures (ie LINK is not supported)
WITHOUT_CLASSIFICATION	Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	Do this if you want to prohibit dropping onto the drag source...
WITHOUT_CLASSIFICATION	end class
WITHOUT_CLASSIFICATION	remove references for gc
WITHOUT_CLASSIFICATION	This should only be helpful for old garbage collectors.
WITHOUT_CLASSIFICATION	Avoid doing this too early in the initialization process
WITHOUT_CLASSIFICATION	Avoid recursively updating the same child
WITHOUT_CLASSIFICATION	@see javax.swing.tree.DefaultTreeModel#insertNodeInto(javax.swing.tree.MutableTreeNode, javax.swing.tree.MutableTreeNode, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.DefaultTreeModel#removeNodeFromParent(javax.swing.tree.MutableTreeNode)
WITHOUT_CLASSIFICATION	This is somewhat inconsistent with the design of the constructor that receives the root object by argument. If this is okay then there may be no need for a constructor with that argument.
WITHOUT_CLASSIFICATION	Enumerate the current children of node to find out which now sorts in different order, since these must be moved
WITHOUT_CLASSIFICATION	Avoid our deinitialization here The node will be added back to the tree again
WITHOUT_CLASSIFICATION	For each reordered node, find it's new position among the current children and move it there
WITHOUT_CLASSIFICATION	Avoid our initialization here
WITHOUT_CLASSIFICATION	Collect the current set of objects that should be children to this node
WITHOUT_CLASSIFICATION	Handle WeakExplorerNodes
WITHOUT_CLASSIFICATION	Remove the node from removeSet
WITHOUT_CLASSIFICATION	Remove obj3 from weakNodes and newChildren
WITHOUT_CLASSIFICATION	Remember that children are not TreeNodes but UserObjects
WITHOUT_CLASSIFICATION	Add any remaining nodes
WITHOUT_CLASSIFICATION	it is the combo for "order"
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Order the new children, the dependencies cannot and need not be ordered
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	Sequence diagrams are not shown as children of the collaboration that they show but as children of the classifier/operation the collaboration represents. Statediagrams and activitydiagrams are shown as children of the statemachine or activitygraph they belong to.
WITHOUT_CLASSIFICATION	was ""
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	abstractions are represented in the Inheritance Node.
WITHOUT_CLASSIFICATION	the name of this instance of diagram
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	Also show unattached sequence diagrams:
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	in UML2, we don't want to see element imports in profiles
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	Rule for Project->Root (Top level) Elements. TODO: As currently implemented it returns all top level elements in the model repository, not just those in a given project. Since we only support a single project at a time currently, these are equivalent but this will need to be enhanced with additional bookkeeping in Project when we support multiple open projects - tfm. TODO: I changed it to get the roots from the project. It was showing the profiles that were loaded but were not applied to the current project - maurelio1234. @author Tom Morris <tfmorris@gmail.com>
WITHOUT_CLASSIFICATION	in UML2, some elements are not to be shown
WITHOUT_CLASSIFICATION	don't show a profile application
WITHOUT_CLASSIFICATION	don't show element imports in profiles
WITHOUT_CLASSIFICATION	don't show extensions in profiles
WITHOUT_CLASSIFICATION	&& Model.getFacade().isAProperty(o)
WITHOUT_CLASSIFICATION	don't show base_... properties in stereotypes
WITHOUT_CLASSIFICATION	"N/A" or "x nodes and x edges"
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	Transition
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: what?
WITHOUT_CLASSIFICATION	Todo: What?
WITHOUT_CLASSIFICATION	First get the collection of ElementResidence
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	TODO: What?
WITHOUT_CLASSIFICATION	TODO: what?
WITHOUT_CLASSIFICATION	only targets we didn't have allready count
WITHOUT_CLASSIFICATION	If nothing selected, go to last selected target
WITHOUT_CLASSIFICATION	Needed for Argo startup :-(
WITHOUT_CLASSIFICATION	Remove duplicates and take care of getOwner() and remove nulls:
WITHOUT_CLASSIFICATION	|| !targets.contains(target)
WITHOUT_CLASSIFICATION	targets.remove(target);
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	implement set-like behaviour. The same element may not be added more then once.
WITHOUT_CLASSIFICATION	we put the targets 'backwards' in the history since the first target in the addedTargets array is the first one selected.
WITHOUT_CLASSIFICATION	cannot break here since an object can be multiple times in history
WITHOUT_CLASSIFICATION	CommentEdge - the owner of a FigEdgeNote
WITHOUT_CLASSIFICATION	check if there are new elements in the list if the old and new list are of the same size set the oldTargets to the correct selection
WITHOUT_CLASSIFICATION	If not found, try the parent namespace
WITHOUT_CLASSIFICATION	Listen for the removal of diagrams from project
WITHOUT_CLASSIFICATION	give priority to standard documentation tag
WITHOUT_CLASSIFICATION	Figs on a diagram without an owning model element
WITHOUT_CLASSIFICATION	end class DocumentationManager
WITHOUT_CLASSIFICATION	TODO: Needs localization
WITHOUT_CLASSIFICATION	end class ChildGenRelated
WITHOUT_CLASSIFICATION	Convert the string (e.g. "aaa,bbb,ccc") into separate stereotype-names (e.g. "aaa", "bbb", "ccc").
WITHOUT_CLASSIFICATION	adds all stereotypes defined at the top level namespaces
WITHOUT_CLASSIFICATION	and now remove them
WITHOUT_CLASSIFICATION	collect the to be removed stereotypes
WITHOUT_CLASSIFICATION	the name of this type of diagram
WITHOUT_CLASSIFICATION	add stereotypes
WITHOUT_CLASSIFICATION	Loop through each element in the namespace, recursing.
WITHOUT_CLASSIFICATION	end class UUIDManager
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)
WITHOUT_CLASSIFICATION	Instance
WITHOUT_CLASSIFICATION	comments
WITHOUT_CLASSIFICATION	For all other model elements, return any elements associated in any way
WITHOUT_CLASSIFICATION	adds all stereotypes defined at the profiles applied to the current namespace
WITHOUT_CLASSIFICATION	adds all stereotypes defined at the profiles applied to the current project
WITHOUT_CLASSIFICATION	TableModel implementation
WITHOUT_CLASSIFICATION	the name of this type of ModelElement
WITHOUT_CLASSIFICATION	the name of this instance of ModelElement
WITHOUT_CLASSIFICATION	the name of the parent diagram instance
WITHOUT_CLASSIFICATION	the name of this type of Object
WITHOUT_CLASSIFICATION	not safe to presume the destination is the comment
WITHOUT_CLASSIFICATION	this also sets the target as a convenient side effect
WITHOUT_CLASSIFICATION	This is the tooltip of a comment link
WITHOUT_CLASSIFICATION	Class
WITHOUT_CLASSIFICATION	end class ProjectMemberModel
WITHOUT_CLASSIFICATION	??
WITHOUT_CLASSIFICATION	??
WITHOUT_CLASSIFICATION	??
WITHOUT_CLASSIFICATION	Association
WITHOUT_CLASSIFICATION	Attribute
WITHOUT_CLASSIFICATION	State
WITHOUT_CLASSIFICATION	Operation
WITHOUT_CLASSIFICATION	Interface
WITHOUT_CLASSIFICATION	Link
WITHOUT_CLASSIFICATION	This function will, by design, contain long lists of i18n keys. It might be tempting to shorten these by constructing them from the parts but please then consider that we might loose the possibility to build tools to statically check the property files against this file.
WITHOUT_CLASSIFICATION	umlReserved.add("document");
WITHOUT_CLASSIFICATION	replace all occurances of OFFENDER with the name of the first offender
WITHOUT_CLASSIFICATION	check for all uppercase and/or mixed with underscores
WITHOUT_CLASSIFICATION	umlReserved.add("file");
WITHOUT_CLASSIFICATION	umlReserved.add("node");
WITHOUT_CLASSIFICATION	umlReserved.add("send");
WITHOUT_CLASSIFICATION	The modelelement must have been deleted - ignore this - it will pass.
WITHOUT_CLASSIFICATION	TODO: This could just work off the names in the UML profile TODO: It doesn't look like it matches what's in the UML 1.4 spec
WITHOUT_CLASSIFICATION	umlReserved.add("destroy");
WITHOUT_CLASSIFICATION	self.allConnections->forAll(ar|ar.participant <> self)
WITHOUT_CLASSIFICATION	end class CrCircularAssocClass
WITHOUT_CLASSIFICATION	(MAttribute)
WITHOUT_CLASSIFICATION	If the name is only underscores
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconWidth()
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconHeight()
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconWidth()
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconHeight()
WITHOUT_CLASSIFICATION	umlReserved.add("initial"); umlReserved.add("final"); umlReserved.add("fork"); umlReserved.add("join"); umlReserved.add("history");
WITHOUT_CLASSIFICATION	umlReserved.add("copy"); umlReserved.add("create");
WITHOUT_CLASSIFICATION	Types can probably have associations, but we should not nag at them not having any. utility is a namespace collection - also not strictly required to have associations.
WITHOUT_CLASSIFICATION	end class ClAttributeCompartment
WITHOUT_CLASSIFICATION	check whether constant, constants are often weird and thus not a problem
WITHOUT_CLASSIFICATION	why are we here?
WITHOUT_CLASSIFICATION	If the classifier does not have a name, then no problem - the model is not finished anyhow.
WITHOUT_CLASSIFICATION	added by Eric Lefevre 13 Mar 1999: we must check if the FigText for attributes is drawn before drawing things over it
WITHOUT_CLASSIFICATION	Abstract elements do not necessarily require associations
WITHOUT_CLASSIFICATION	TODO: different critic or special message for classes that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	added by Eric Lefevre 13 Mar 1999: we must check if the FigText for operations is drawn before drawing things over it
WITHOUT_CLASSIFICATION	special cases for use cases Extending use cases and use case that are being included are not required to have associations.
WITHOUT_CLASSIFICATION	for use cases we need to check for extend/includes actors cannot have them, so no need to check
WITHOUT_CLASSIFICATION	Get the ends from the association (we know there are two), and the types associated with them.
WITHOUT_CLASSIFICATION	The association that triggered the critic. Its just possible the association is no longer there, in which case we return null
WITHOUT_CLASSIFICATION	end class ClOperationCompartment
WITHOUT_CLASSIFICATION	First step. Create the panel if not already done and options are available. Otherwise it retains its default value of null.
WITHOUT_CLASSIFICATION	Now create the five options
WITHOUT_CLASSIFICATION	Get the names of the two ends. If there are none (i.e they are currently anonymous), use the ArgoUML convention of "(anon)" for the names
WITHOUT_CLASSIFICATION	Default (any other step) is to return nothing
WITHOUT_CLASSIFICATION	Just completed the first step where we make our choices. First see if we have a choice. We always should, so print a rude message if we don't
WITHOUT_CLASSIFICATION	Set the appropriate aggregation on each end
WITHOUT_CLASSIFICATION	It is quite possible that the cause of the problem has by now been deleted, in which case we will throw an exception if we try to change things. Catch this tidily.
WITHOUT_CLASSIFICATION	Start is a composite aggregation of end
WITHOUT_CLASSIFICATION	Start is a shared aggregation of end
WITHOUT_CLASSIFICATION	End is a composite aggregation of start
WITHOUT_CLASSIFICATION	End is a shared aggregation of start
WITHOUT_CLASSIFICATION	No aggregation
WITHOUT_CLASSIFICATION	Someone took our association away.
WITHOUT_CLASSIFICATION	Can't finish if our parent can't
WITHOUT_CLASSIFICATION	Can finish if it's step 0
WITHOUT_CLASSIFICATION	Can finish if we're on step1 and have actually made a choice
WITHOUT_CLASSIFICATION	Otherwise we can't finish
WITHOUT_CLASSIFICATION	TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	TODO: The WFR doesn't restrict this to Classifiers - tfm
WITHOUT_CLASSIFICATION	Model.getFacade().getModelElement(
WITHOUT_CLASSIFICATION	)
WITHOUT_CLASSIFICATION	replace all occurances of OFFENDER with the name of the first offender
WITHOUT_CLASSIFICATION	check if there is no OCL_END; if so, the critic expression is not correct and can not be expanded
WITHOUT_CLASSIFICATION	Get the Association and its connections. Iterate over all the AssociationEnds and check that each connected classifier is in the same sub-system or model
WITHOUT_CLASSIFICATION	display related methods
WITHOUT_CLASSIFICATION	end class CrInterfaceAllPublic
WITHOUT_CLASSIFICATION	return original string if no replacements made
WITHOUT_CLASSIFICATION	If we drop out there is no problem
WITHOUT_CLASSIFICATION	Only look at associations
WITHOUT_CLASSIFICATION	end class CrCrossNamespaceAssoc
WITHOUT_CLASSIFICATION	TODO: different critic for packages consisting only of references to elements of other packages?
WITHOUT_CLASSIFICATION	The next AssociationEnd, and its classifier. Check the classifier is in the namespace of the association. If not we have a problem.
WITHOUT_CLASSIFICATION	original class was not abstract
WITHOUT_CLASSIFICATION	theStereotype.setStereotype(???);
WITHOUT_CLASSIFICATION	found a concrete subclass
WITHOUT_CLASSIFICATION	Nothing to do.
WITHOUT_CLASSIFICATION	no concrete subclasses defined, this class is "useless"
WITHOUT_CLASSIFICATION	see if there is already an element with the same name
WITHOUT_CLASSIFICATION	end class CrClassMustBeAbstract
WITHOUT_CLASSIFICATION	end class CrUselessAbstract
WITHOUT_CLASSIFICATION	(MClassifier)
WITHOUT_CLASSIFICATION	Only look at classes
WITHOUT_CLASSIFICATION	TODO: different critic or special message for classes that inherit all ops but define none of their own.
WITHOUT_CLASSIFICATION	utility is a namespace collection - also not strictly required to have operations.
WITHOUT_CLASSIFICATION	end class CrTooManyAssoc
WITHOUT_CLASSIFICATION	end class CrUselessInterface
WITHOUT_CLASSIFICATION	end class CrComponentInstanceWithoutClassifier
WITHOUT_CLASSIFICATION	end class CrTooManyClasses
WITHOUT_CLASSIFICATION	We don't consider secondary stuff.
WITHOUT_CLASSIFICATION	if the object does not have a name, than no problem
WITHOUT_CLASSIFICATION	types can probably contain operations, but we should not nag at them not having any.
WITHOUT_CLASSIFICATION	Types don't need a constructor.
WITHOUT_CLASSIFICATION	Utilities usually do not require a constructor either
WITHOUT_CLASSIFICATION	Check for uninitialised instance variables and constructor.
WITHOUT_CLASSIFICATION	Get all the features (giving up if there are none). Then loop through finding all operations. Each time we find one, we compare its signature with all previous (held in collection operSeen), and then if it doesn't match add it to the collection.
WITHOUT_CLASSIFICATION	There is a constructor.
WITHOUT_CLASSIFICATION	end class CrTooManyStates
WITHOUT_CLASSIFICATION	We have found a non-static one that is not initialized.
WITHOUT_CLASSIFICATION	Compare against all earlier operations. If there's a match we've found the problem
WITHOUT_CLASSIFICATION	Check that the parameter lists match.
WITHOUT_CLASSIFICATION	Add to the collection and round to look at the next one
WITHOUT_CLASSIFICATION	yeah right...we don't have an operation (and thus no
WITHOUT_CLASSIFICATION	This pair of params where the same. Lets check the next pair.
WITHOUT_CLASSIFICATION	Only do this for classifiers
WITHOUT_CLASSIFICATION	Get the next non-return parameter. Null if non left.
WITHOUT_CLASSIFICATION	If we drop out here, there was no match and we have no problem
WITHOUT_CLASSIFICATION	Check that the names match.
WITHOUT_CLASSIFICATION	Both lists have the same length
WITHOUT_CLASSIFICATION	Both lists have the same length.
WITHOUT_CLASSIFICATION	Different lengths:
WITHOUT_CLASSIFICATION	end class CrMultiComposite
WITHOUT_CLASSIFICATION	Compare the type of the parameters. If any of the types is null, then we have a match.
WITHOUT_CLASSIFICATION	normal model elements are not allowed to have spaces, but for States we make an exception
WITHOUT_CLASSIFICATION	initialize test data
WITHOUT_CLASSIFICATION	end class CrIllegalName
WITHOUT_CLASSIFICATION	dm is a transition
WITHOUT_CLASSIFICATION	initialize new ToDoItem
WITHOUT_CLASSIFICATION	the source of the transition is a pseudostate
WITHOUT_CLASSIFICATION	the source of the transition is a choice
WITHOUT_CLASSIFICATION	end class CrTooManyAttr
WITHOUT_CLASSIFICATION	critiquing API
WITHOUT_CLASSIFICATION	end class CrZeroLengthEdge
WITHOUT_CLASSIFICATION	(MStateVertex)
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	only classes with name need a constructor
WITHOUT_CLASSIFICATION	Forks have their own outgoing transitions critic
WITHOUT_CLASSIFICATION	types can probably have variables, but we should not nag at them not having any.
WITHOUT_CLASSIFICATION	code generation
WITHOUT_CLASSIFICATION	utility is a namespace collection - also not strictly required to have variables.
WITHOUT_CLASSIFICATION	If we find an instance variable that is not a constant we have succeeded
WITHOUT_CLASSIFICATION	I am only prepared to go this far.
WITHOUT_CLASSIFICATION	(Classifier)
WITHOUT_CLASSIFICATION	first element is e.g. the class, but we need to have its namespace to recompute the offenders.
WITHOUT_CLASSIFICATION	Compound critics
WITHOUT_CLASSIFICATION	warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	warn about inherited name conflicts, different critic?
WITHOUT_CLASSIFICATION	(MAssociation)
WITHOUT_CLASSIFICATION	Only look at Associations
WITHOUT_CLASSIFICATION	container state / composite state
WITHOUT_CLASSIFICATION	Iterate over all the AssociationEnds. We only have a problem if 1) there is an end connected to an Interface and 2) an end other than that end is navigable.
WITHOUT_CLASSIFICATION	both ends must be classes, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	We can give up looking if we've hit both criteria
WITHOUT_CLASSIFICATION	both ends must be navigable, otherwise there is nothing to merge
WITHOUT_CLASSIFICATION	End at an Interface? Navigable other end?
WITHOUT_CLASSIFICATION	end class CrMergeClasses
WITHOUT_CLASSIFICATION	Specify design issue category and knowledge type
WITHOUT_CLASSIFICATION	If we drop out we didn't meet both criteria, and all is well.
WITHOUT_CLASSIFICATION	The next AssociationEnd
WITHOUT_CLASSIFICATION	If its an interface we have an interface end, otherwise its something else and we should see if it is navigable. We don't check that the end is a Classifier, rather than its child ClassifierRole, since we have effectively eliminated that possiblity in rejecting AssociationRoles above.
WITHOUT_CLASSIFICATION	end class CrNavFromInterface
WITHOUT_CLASSIFICATION	(MCompositeState)
WITHOUT_CLASSIFICATION	end class CrNoInitialState
WITHOUT_CLASSIFICATION	critiquing API
WITHOUT_CLASSIFICATION	end class CrInstanceWithoutClassifier
WITHOUT_CLASSIFICATION	Now we are sure dm is a Composite State.
WITHOUT_CLASSIFICATION	In DeploymentDiagrams the situation is not the same as in other diagrams only classes, interfaces and objects can intersect each other while they are not the EnclosingFig, so you have to prouve only these elements.
WITHOUT_CLASSIFICATION	Now we are sure dm is a StateVertex.
WITHOUT_CLASSIFICATION	Now we are sure dm is a State.
WITHOUT_CLASSIFICATION	If dm is the top state of the statemachine, then it is not supposed to have incoming transitions.
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	(MAssociation)
WITHOUT_CLASSIFICATION	container state / composite state
WITHOUT_CLASSIFICATION	end class CrInvalidSynch
WITHOUT_CLASSIFICATION	no good trigger
WITHOUT_CLASSIFICATION	end class CrConflictingComposites
WITHOUT_CLASSIFICATION	end class CrAlreadyRealizes
WITHOUT_CLASSIFICATION	end class CrUnnavigableAssoc
WITHOUT_CLASSIFICATION	TODO: GenNavigableClasses?
WITHOUT_CLASSIFICATION	end class CrDisambigStateName
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	(MAssociation)
WITHOUT_CLASSIFICATION	end class WizMEName
WITHOUT_CLASSIFICATION	Only for associations
WITHOUT_CLASSIFICATION	Get the assocations and connections. No problem (there is a separate critic) if this is not a binary association or is an association role.
WITHOUT_CLASSIFICATION	Loop through the associations, counting the ends with aggregations
WITHOUT_CLASSIFICATION	A problem if we found more than 1 aggregation
WITHOUT_CLASSIFICATION	end class CrMultipleAgg
WITHOUT_CLASSIFICATION	end class CrNameConflictAC
WITHOUT_CLASSIFICATION	end class WizNavigable
WITHOUT_CLASSIFICATION	end class CrFinalSubclassed
WITHOUT_CLASSIFICATION	no good trigger
WITHOUT_CLASSIFICATION	TODO: AssociationRole
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "Finding children for " + o.getClass());
WITHOUT_CLASSIFICATION	argument can be an instanceof a Fig which we ignore
WITHOUT_CLASSIFICATION	no need for trigger on "specialization"
WITHOUT_CLASSIFICATION	end class CrCircularInheritance
WITHOUT_CLASSIFICATION	end class CrNonAggDataType
WITHOUT_CLASSIFICATION	test an unknown file
WITHOUT_CLASSIFICATION	container state / composite state
WITHOUT_CLASSIFICATION	no good trigger
WITHOUT_CLASSIFICATION	(MTransition)
WITHOUT_CLASSIFICATION	WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	Only work for associations
WITHOUT_CLASSIFICATION	WFR Transitions, OMG UML 1.3
WITHOUT_CLASSIFICATION	No problem if this is an association role.
WITHOUT_CLASSIFICATION	Loop through all the ends, comparing the name against those already seen (ignoring any with no name). No problem if there are no connections defined, we will fall through immediately.
WITHOUT_CLASSIFICATION	end class CrInterfaceOperOnly
WITHOUT_CLASSIFICATION	Ignore non-existent and empty names
WITHOUT_CLASSIFICATION	Is the name already in the list of those seen, if not add it and go on round.
WITHOUT_CLASSIFICATION	Only work for associatins
WITHOUT_CLASSIFICATION	If we drop out there were no clashes
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#paintIcon(java.awt.Component, java.awt.Graphics, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconWidth()
WITHOUT_CLASSIFICATION	@see javax.swing.Icon#getIconHeight()
WITHOUT_CLASSIFICATION	(MAssociationEnd)
WITHOUT_CLASSIFICATION	(MAssociation)
WITHOUT_CLASSIFICATION	Now we are sure dm is a StateVertex.
WITHOUT_CLASSIFICATION	Now we are sure dm is a State.
WITHOUT_CLASSIFICATION	Now we are sure dm is a Composite State.
WITHOUT_CLASSIFICATION	end class ClClassName
WITHOUT_CLASSIFICATION	If dm is the top state of the statemachine, then it is not supposed to have outgoing transitions.
WITHOUT_CLASSIFICATION	end class CrTooManyOper
WITHOUT_CLASSIFICATION	end class CrTooManyTransitions
WITHOUT_CLASSIFICATION	general
WITHOUT_CLASSIFICATION	Loop through the associations, looking for one with aggregation
WITHOUT_CLASSIFICATION	If drop out, we're OK
WITHOUT_CLASSIFICATION	end class CrNWayAgg.java
WITHOUT_CLASSIFICATION	end class CrOppEndConflict
WITHOUT_CLASSIFICATION	we could check for base class of the stereotype but the condition normally covers it all.
WITHOUT_CLASSIFICATION	intentional: if there is nonsense in the field, we return false
WITHOUT_CLASSIFICATION	intentional: if there is nonsense in the field, we do not set the value
WITHOUT_CLASSIFICATION	fireNodeRemoved(node);
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Diagram#setName(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#containsNode(java.lang.Object)
WITHOUT_CLASSIFICATION	newEdge.setDiElement( GraphChangeAdapter.getInstance().createElement(gm, edge));
WITHOUT_CLASSIFICATION	/ End GEF methods
WITHOUT_CLASSIFICATION	not allowed
WITHOUT_CLASSIFICATION	return;
WITHOUT_CLASSIFICATION	TODO: Comments are on Element in UML 2.x
WITHOUT_CLASSIFICATION	Create a diagram. This 4-arg version is only for internal use. The 'namespace' argument is deprecated and not used in the new APIs.
WITHOUT_CLASSIFICATION	This shouldn't be possible, but just in case
WITHOUT_CLASSIFICATION	fail silently as we expect users to accidentally drop on to wrong component
WITHOUT_CLASSIFICATION	Create the UML connection of the given type between the given model elements. default aggregation (none)
WITHOUT_CLASSIFICATION	Commentlinks for comments. Iterate over all the comment links to find the comment and annotated elements.
WITHOUT_CLASSIFICATION	The connection is not valid unless both nodes are in this graph model.
WITHOUT_CLASSIFICATION	The diagram are always owned by the model in this first implementation.
WITHOUT_CLASSIFICATION	IMPORTANT - These MUST remain in order!
WITHOUT_CLASSIFICATION	singleton, no instantiation
WITHOUT_CLASSIFICATION	The special value <code>null</code> is used internally to indicate that the default value should be inherited from the next level of settings.
WITHOUT_CLASSIFICATION	Repeat until no faults are fixed
WITHOUT_CLASSIFICATION	Diagram appearance settings with project scope:
WITHOUT_CLASSIFICATION	We can not remove this and have the application manage things directly based on the font, since only the names should be bold.
WITHOUT_CLASSIFICATION	Some cached fonts based on the above settings
WITHOUT_CLASSIFICATION	Since body ever looks at the type of the diagram appearance event, we can simplify from sending every existing event to one event only. But since there is no catch-all event defined, we just use one. Rationale: reduce the number of total refreshes of the drawing.
WITHOUT_CLASSIFICATION	If we've got a local (uninherited) font name or size or if we've got no parent to inherit from recompute our cached fonts
WITHOUT_CLASSIFICATION	This class is a temporary wrapper around the GEF UndoManager. This will be changed when GEF is modified to create commands and provide an observer interface for ArgoUML to receive them. <p> TODO: How does this relate to {@link org.argouml.kernel.DefaultUndoManager}? @author Bob Tarling
WITHOUT_CLASSIFICATION	Listen for name changes so we can veto them if we don't like them
WITHOUT_CLASSIFICATION	get all the classes from the diagram
WITHOUT_CLASSIFICATION	The fix
WITHOUT_CLASSIFICATION	The report
WITHOUT_CLASSIFICATION	The report
WITHOUT_CLASSIFICATION	The fix
WITHOUT_CLASSIFICATION	The fix
WITHOUT_CLASSIFICATION	The fix
WITHOUT_CLASSIFICATION	2. Make sure that all Figs are visible
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	TODO: These should get replaced immediately by the creating initialization code, but make sure we've got a default just in case.
WITHOUT_CLASSIFICATION	1. Make sure all Figs in the Diagrams layer refer back to that layer.
WITHOUT_CLASSIFICATION	maybe we have a modelelement that is part of some other fig
WITHOUT_CLASSIFICATION	Register for notification of any global changes that would affect our rendering
WITHOUT_CLASSIFICATION	Add the diagram as a listener to the namespace so that when the namespace is removed the diagram is deleted also.
WITHOUT_CLASSIFICATION	4. Make sure all FigNodes and FigEdges have an owner The report
WITHOUT_CLASSIFICATION	3. Make sure all FigEdges are attached to a valid FigNode The report
WITHOUT_CLASSIFICATION	5. Make sure all FigNodes and FigEdges have a valid owner The report
WITHOUT_CLASSIFICATION	4. Make sure the only FigGroups on a diagram are also FigNodes The report
WITHOUT_CLASSIFICATION	Do nothing, override in subclass.
WITHOUT_CLASSIFICATION	If we haven't succeeded in getting a namespace then abort
WITHOUT_CLASSIFICATION	This should always be true, but just in case...
WITHOUT_CLASSIFICATION	The diagram to be laid out.
WITHOUT_CLASSIFICATION	List of objects. NOTE: This methods which read/write this don't appear to be used.
WITHOUT_CLASSIFICATION	Point at which to start layout (initial state goes here). The X coordinate must be greater than half the width of the widest figure to be placed (because figures are centered on this location).
WITHOUT_CLASSIFICATION	Amount to increment Y position by for each node placed. We pack them densely on the assumption that the user is going to split them into at least two swimlanes.
WITHOUT_CLASSIFICATION	FinalState element for ActivityDiagram
WITHOUT_CLASSIFICATION	Find our Initial State
WITHOUT_CLASSIFICATION	Place all the nodes
WITHOUT_CLASSIFICATION	Place the final state last with a little separation
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	If we're trying to set the namespace to the existing value then don't do any more work.
WITHOUT_CLASSIFICATION	Recursively place all nodes pointed to by outgoing transitions. Because of the recursive algorithm multiple outgoing transitions will end up very lopsided because one entire subgraph will be done before dealing with the other transition(s). @param seen set of nodes seen so far @param node the node to collect neighbors for
WITHOUT_CLASSIFICATION	figClone.seperator = (FigLine) it.next();
WITHOUT_CLASSIFICATION	Needed for project deletion
WITHOUT_CLASSIFICATION	we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	TODO: midpoints for side handles
WITHOUT_CLASSIFICATION	We removed the last partition, so now remove the pool, too:
WITHOUT_CLASSIFICATION	no action required in case of veto on setName
WITHOUT_CLASSIFICATION	This test needed for project deletion
WITHOUT_CLASSIFICATION	TODO: side handles
WITHOUT_CLASSIFICATION	Listen to activitygraph deletion, delete this diagram.
WITHOUT_CLASSIFICATION	actions for toolbar
WITHOUT_CLASSIFICATION	no action required
WITHOUT_CLASSIFICATION	The namespace of the activitygraph is changed!
WITHOUT_CLASSIFICATION	getActionSubactivityState()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	The space between the 2 text figs is: PADDING. @see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	we want to maintain a minimum size for the partition
WITHOUT_CLASSIFICATION	Class to display graphics for a UML ObjectFlowState in a diagram.<p> The Fig of this modelElement may either represent the following UMLelements: <p> (1) an ObjectFlowState with a Classifier as type, or <p> (2) an ObjectFlowState with a ClassifierInState as type. <p> In both cases (1) and (2), the Fig shows the underlined name of the Classifier, and in the latter case (2), it shows also the names of the states of the ClassifierInState. <p> In the examples in the UML standard, this is written like<pre> PurchaseOrder [approved] </pre> i.e. in 2 lines. The first line is underlined, to indicate that it is an instance (object).<p> The fact that the first line is underlined, and the 2nd not, is the reason to implement them in 2 separate Figs.<p> TODO: Allow stereotypes to be shown. @author mvw
WITHOUT_CLASSIFICATION	Model.getActivityGraphsHelper() .isAddingActivityGraphAllowed(base);
WITHOUT_CLASSIFICATION	TODO: We may return the following when the relocate() has been implemented.
WITHOUT_CLASSIFICATION	TODO: We may return something useful when the relocate() has been implemented.
WITHOUT_CLASSIFICATION	register for events from the type
WITHOUT_CLASSIFICATION	Create a map of partitions keyed by x coordinate
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	Sort the x coordinates into order
WITHOUT_CLASSIFICATION	the state name
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	Don't listen to all property names We only need to listen to its "type", and "remove".
WITHOUT_CLASSIFICATION	the height of the blank space above and below the text figs:
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	and listen to name changes of the submachine
WITHOUT_CLASSIFICATION	both have the same settings
WITHOUT_CLASSIFICATION	both have the same owner
WITHOUT_CLASSIFICATION	add them back to front
WITHOUT_CLASSIFICATION	Let our superclass sort itself out first
WITHOUT_CLASSIFICATION	add the listeners to the newOwner
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.SelectionButtons#getNewNode(int)
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	MutableGraphModel implementation
WITHOUT_CLASSIFICATION	Set up the property panels for activity diagrams:
WITHOUT_CLASSIFICATION	overrule the single-line name-fig created by the parent
WITHOUT_CLASSIFICATION	A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	setBlinkPorts(false); make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	TODO: Do we need to clone the stereotype(s)?
WITHOUT_CLASSIFICATION	(MGeneralization)
WITHOUT_CLASSIFICATION	The stereoDim has height=2, even if it is empty, hence the -2 below:
WITHOUT_CLASSIFICATION	the width needs to be > the height
WITHOUT_CLASSIFICATION	Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	GraphModel implementation
WITHOUT_CLASSIFICATION	TODO:?
WITHOUT_CLASSIFICATION	((MClassifier)node).setNamespace(_collab.getNamespace());
WITHOUT_CLASSIFICATION	TODO: assumes public, user pref for default visibility?
WITHOUT_CLASSIFICATION	Add the given edge to the graph, if valid. @see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	TODO: We may return the following when the relocate() has been implemented.
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	The NotationProvider for the ClassifierRole. <p> The syntax is for UML is: <pre> baselist := [base] [, base] classifierRole := [name] [/ role] [: baselist] </pre></p> The <code>name</code> is the Instance name, not used currently. See ClassifierRoleNotationUml for details.<p> This syntax is compatible with the UML 1.4 specification.
WITHOUT_CLASSIFICATION	TODO: assumes public
WITHOUT_CLASSIFICATION	The stereotype. Width is the same as the cover, height is its default (since the font is not yet set). The text should be centered.
WITHOUT_CLASSIFICATION	throws PropertyVetoException
WITHOUT_CLASSIFICATION	(MElementImport)
WITHOUT_CLASSIFICATION	getStereotypeFig().setFilled(false);
WITHOUT_CLASSIFICATION	end class CollabDiagramGraphModel
WITHOUT_CLASSIFICATION	In the rather unlikely case that we have no name, we give up.
WITHOUT_CLASSIFICATION	The big port. Color of the big port is irrelevant
WITHOUT_CLASSIFICATION	The name. Width is the same as the cover, height is the default. The text of the name will be centered by default. In the same place as the stereotype, since at this stage the stereotype is not displayed. Being a classifier role it is underlined
WITHOUT_CLASSIFICATION	The cover.
WITHOUT_CLASSIFICATION	At least one stereotype is visible
WITHOUT_CLASSIFICATION	Remember where we are at present, so we can tell GEF later. Then check we are as big as the minimum size
WITHOUT_CLASSIFICATION	Set the bounds of the bigPort and cover
WITHOUT_CLASSIFICATION	Work out the padding each side, depending on whether the stereotype is displayed and set bounds accordingly
WITHOUT_CLASSIFICATION	Record the changes in the instance variables of our parent, tell GEF and trigger the edges to reconsider themselves.
WITHOUT_CLASSIFICATION	singleton
WITHOUT_CLASSIFICATION	this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	this one behaves differently, hence seperated:
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#calcBounds()
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	TODO: We may return something useful when the relocate() has been implemented.
WITHOUT_CLASSIFICATION	GraphModel implementation
WITHOUT_CLASSIFICATION	TODO:?
WITHOUT_CLASSIFICATION	A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	end class FigAssociationRole
WITHOUT_CLASSIFICATION	If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	TODO -> settings
WITHOUT_CLASSIFICATION	the figs that make up this group
WITHOUT_CLASSIFICATION	the figs that make up this group
WITHOUT_CLASSIFICATION	_x = first.getX(); _y = first.getY();
WITHOUT_CLASSIFICATION	_x = first.getX(); _y = first.getY();
WITHOUT_CLASSIFICATION	Set up the property panels for collaboration diagrams:
WITHOUT_CLASSIFICATION	this is neat...
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	TODO: assumes public
WITHOUT_CLASSIFICATION	Modifiers ...
WITHOUT_CLASSIFICATION	TODO: assumes public, user pref for default visibility? do I have to check the namespace here? (Toby)
WITHOUT_CLASSIFICATION	elementOrdering(figures);
WITHOUT_CLASSIFICATION	elementOrdering(figures);
WITHOUT_CLASSIFICATION	Set up the property panels for deployment diagrams:
WITHOUT_CLASSIFICATION	actions for toolbar
WITHOUT_CLASSIFICATION	Getters for plugin modules:
WITHOUT_CLASSIFICATION	so it still looks like a cube
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add the listeners to the newOwner
WITHOUT_CLASSIFICATION	elementOrdering(figures);
WITHOUT_CLASSIFICATION	elementOrdering(figures);
WITHOUT_CLASSIFICATION	Modifiers ...
WITHOUT_CLASSIFICATION	_bigPort.setBounds(x+1, y+1, w-2, h-2);
WITHOUT_CLASSIFICATION	nothing extra to do currently
WITHOUT_CLASSIFICATION	North, South, West, East, South-West
WITHOUT_CLASSIFICATION	end class PredIsStartpackage
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	If the layer is null, then most likely we are being deleted.
WITHOUT_CLASSIFICATION	GraphModel implementation
WITHOUT_CLASSIFICATION	MutableGraphModel implementation
WITHOUT_CLASSIFICATION	Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	throws PropertyVetoException
WITHOUT_CLASSIFICATION	singleton
WITHOUT_CLASSIFICATION	end class StateDiagramGraphModel
WITHOUT_CLASSIFICATION	Don't do it for comment.
WITHOUT_CLASSIFICATION	(MElementImport)
WITHOUT_CLASSIFICATION	(MTransition)
WITHOUT_CLASSIFICATION	prevent no changes...
WITHOUT_CLASSIFICATION	If a UML object is found, you can not remove selected elms.
WITHOUT_CLASSIFICATION	check parameter types:
WITHOUT_CLASSIFICATION	If nothing is selected, then not allowed to remove it.
WITHOUT_CLASSIFICATION	If only Figs without owner are selected, then you can remove them!
WITHOUT_CLASSIFICATION	end class PredIsFinalState
WITHOUT_CLASSIFICATION	This presumes that the layer is set after the owner:
WITHOUT_CLASSIFICATION	If it is concurrent and contains concurrent regions, the bottom region has a minimum height
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	The purpose of this method is not explained and it give give NPE depending on z order of figs as they are read. For now ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	We only handle the case where a region has been removed:
WITHOUT_CLASSIFICATION	Check if multiple items are selected:
WITHOUT_CLASSIFICATION	Check if multiple items are selected:
WITHOUT_CLASSIFICATION	If it is concurrent and contains concurrent regions, the regions are resized
WITHOUT_CLASSIFICATION	None of the menu-items below apply when multiple modelelements are selected:
WITHOUT_CLASSIFICATION	do we need to
WITHOUT_CLASSIFICATION	The returned list of Figs is sorted according layout: from top to bottom.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	This makes dragging connected edges very smooth. @see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	The event source is the owner stub state
WITHOUT_CLASSIFICATION	event processing
WITHOUT_CLASSIFICATION	end class FigCompositeState
WITHOUT_CLASSIFICATION	The event source is the submachine state
WITHOUT_CLASSIFICATION	TargetManager.getInstance().addTargetListener(this);
WITHOUT_CLASSIFICATION	ignored - fixed rendering
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	Event handlers
WITHOUT_CLASSIFICATION	Cmd API
WITHOUT_CLASSIFICATION	end class ActionCreatePseudostate
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	event processing
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	The submachine has got a new name
WITHOUT_CLASSIFICATION	The event source is the stub state's referenced state or one of the referenced state's path.
WITHOUT_CLASSIFICATION	This indicates a change in association, not name - tfm
WITHOUT_CLASSIFICATION	All states in the new reference state's path are added as listeners
WITHOUT_CLASSIFICATION	The source was the referenced state that has got a new name.
WITHOUT_CLASSIFICATION	ignored - rendering is fixed
WITHOUT_CLASSIFICATION	The source was one of the referenced state's path which has got a new name.
WITHOUT_CLASSIFICATION	The old submachine container is deleted as listener
WITHOUT_CLASSIFICATION	The Referenced State or one of his path's states has got a new name
WITHOUT_CLASSIFICATION	The new submachine container is added as listener
WITHOUT_CLASSIFICATION	All states in the old reference state's path are deleted as listeners
WITHOUT_CLASSIFICATION	Translate any old style sequence diagrams
WITHOUT_CLASSIFICATION	Just swap order of arguments to get to new form
WITHOUT_CLASSIFICATION	Translate any sequence diagrams create with any previous svn work in progress
WITHOUT_CLASSIFICATION	Get the first existing FigNode and if it exists set the y position and height of _pers to be the same as it.
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	ignored - rendering is fixed
WITHOUT_CLASSIFICATION	ignore mouse clicks
WITHOUT_CLASSIFICATION	ignore mouse clicks
WITHOUT_CLASSIFICATION	The Machine State has got a new name
WITHOUT_CLASSIFICATION	This assert fails for the TestPropertyPanels, file GUITestPropertyPanels.zargo:
WITHOUT_CLASSIFICATION	assert w == h;
WITHOUT_CLASSIFICATION	The Machine State has been deleted from model
WITHOUT_CLASSIFICATION	Ignore w and h from here on.
WITHOUT_CLASSIFICATION	keep d even or odd, just like the line width:
WITHOUT_CLASSIFICATION	leave some space below the "include"
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	both have the same settings
WITHOUT_CLASSIFICATION	both have the same owner
WITHOUT_CLASSIFICATION	TODO -> settings
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	There are one or more regions so find the one that the vertex was dropped in
WITHOUT_CLASSIFICATION	The vertex was dropped onto the diagram. Get the region as the first Region in the StateMachine. If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders (java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	noop - fixed rendering
WITHOUT_CLASSIFICATION	There are no regions so create one and place the vertex there.
WITHOUT_CLASSIFICATION	Temporary start private static final Color[] COLOR_ARRAY = { Color.RED, Color.BLUE, Color.CYAN, Color.YELLOW, Color.GREEN}; private int nextColor = 0; Temporary end
WITHOUT_CLASSIFICATION	setBlinkPorts(false); make port invisble unless mouse enters
WITHOUT_CLASSIFICATION	there can only be one
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getUseTrapRect()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	We aren't able to resize neither the top bound from the first region nor the bottom bound from the last region.
WITHOUT_CLASSIFICATION	The group must be resized if a text field exceed the bounds
WITHOUT_CLASSIFICATION	if curHandle.index is 0 or 2, the adjacent region is the previous region but if it is 5 or 7, the adjacent region is the next region. curHandle.index show which corner of the bound we are dragging.
WITHOUT_CLASSIFICATION	A Concurrent region cannot have incoming or outgoing transitions so incoming or outgoing transitions are redirected to its concurrent composite state container.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	singleton
WITHOUT_CLASSIFICATION	event processing
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	/ event handlers - MouseListener and MouseMotionListener implementation
WITHOUT_CLASSIFICATION	or just the owner?
WITHOUT_CLASSIFICATION	Listen to machine deletion, to delete the diagram.
WITHOUT_CLASSIFICATION	this in case we are being deleted
WITHOUT_CLASSIFICATION	The namespace of the statemachine is changed!
WITHOUT_CLASSIFICATION	return;
WITHOUT_CLASSIFICATION	return;
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	throws PropertyVetoException
WITHOUT_CLASSIFICATION	If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	prevent no changes...
WITHOUT_CLASSIFICATION	check parameter types:
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	Model.getStateMachinesHelper() .isAddingStatemachineAllowed(base);
WITHOUT_CLASSIFICATION	Set up the property panels for statechart diagrams:
WITHOUT_CLASSIFICATION	if location is null here the position of the new figNode is set after in org.tigris.gef.base.ModePlace.mousePressed(MouseEvent e)
WITHOUT_CLASSIFICATION	MModelElement modelElement = elementImport.getModelElement();
WITHOUT_CLASSIFICATION	top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	top of the hierarchy is ME:
WITHOUT_CLASSIFICATION	then Generalizable Element
WITHOUT_CLASSIFICATION	then Generalizable Element
WITHOUT_CLASSIFICATION	then Classifier & Package
WITHOUT_CLASSIFICATION	navigable.... only want incoming
WITHOUT_CLASSIFICATION	then Classifier
WITHOUT_CLASSIFICATION	MutableGraphModel implementation
WITHOUT_CLASSIFICATION	VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	cast the params
WITHOUT_CLASSIFICATION	N.B. A node which is an Association is either a n-ary association or the Class part of an AssociationClass
WITHOUT_CLASSIFICATION	check param types: only some connections are legal uml connections:
WITHOUT_CLASSIFICATION	set the new end type!
WITHOUT_CLASSIFICATION	rerouting the destination:
WITHOUT_CLASSIFICATION	rerouting the source:
WITHOUT_CLASSIFICATION	empty at the moment
WITHOUT_CLASSIFICATION	move down
WITHOUT_CLASSIFICATION	empty at the moment
WITHOUT_CLASSIFICATION	empty at the moment
WITHOUT_CLASSIFICATION	move more right
WITHOUT_CLASSIFICATION	move left
WITHOUT_CLASSIFICATION	use left and right, up and down
WITHOUT_CLASSIFICATION	calculate the higher and lower Figs
WITHOUT_CLASSIFICATION	the amount of the "sidestep"
WITHOUT_CLASSIFICATION	If center points are "close enough" we just adjust the endpoints of the line a little bit. Otherwise we add a jog in the middle to deal with the offset. TODO: Epsilon is currently fixed, but could probably be computed dynamically as 10% of the width of the narrowest figure or some other value which is visually not noticeable.
WITHOUT_CLASSIFICATION	currentEdge.setBetweenNearestPoints(false);
WITHOUT_CLASSIFICATION	LOG.debug(result + " node1: " + this + ", node2 " + node);
WITHOUT_CLASSIFICATION	split = (split == null || split.isStandalone()) ? node : split;
WITHOUT_CLASSIFICATION	(xOffset - curW) / 2;
WITHOUT_CLASSIFICATION	Element is allowed, but only NamedElement can return nonempty list
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	self associations are special cases. No need to let the maze runner find the way.
WITHOUT_CLASSIFICATION	Link does not exist in UML2
WITHOUT_CLASSIFICATION	now we construct the zig zag inheritance line getUnderlyingFig()
WITHOUT_CLASSIFICATION	Class to display graphics for a UML Link in a diagram. <p> The underlined association name is shown next to the middle of the path. TODO: Show more notation as described in the standard: "A rolename may be shown at each end of the link. An association name may be shown near the path. If present, it is underlined to indicate an instance. Links do not have instance names, they take their identity from the instances that they relate. Multiplicity is not shown for links because they are instances. Other association adornments (aggregation, composition, navigation) may be shown on the link ends."
WITHOUT_CLASSIFICATION	Text group to contain name & stereotype
WITHOUT_CLASSIFICATION	end class FigLink
WITHOUT_CLASSIFICATION	The next line is needed so that we have the right dimension when drawing this Fig on the diagram by pressing down the mouse button, even before releasing the mouse button:
WITHOUT_CLASSIFICATION	Stereotype covers NameFig:
WITHOUT_CLASSIFICATION	Compartments from top to bottom:
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	by default, do not show operations nor attributes:
WITHOUT_CLASSIFICATION	We're going to change the name immediately, so just use ""
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	actions for toolbar
WITHOUT_CLASSIFICATION	TODO: place comments near connected classes TODO: place from middle towards outer edges? (or place largest groups first)
WITHOUT_CLASSIFICATION	boolean hasPackages = false; TODO: move "package in row" to NodeRow
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	This calls the getters to fetch actions even though the action variables are defined is instances of this class. This is because any number of action getters could have been overridden in a descendant and it is the action from that overridden method that should be returned in the array.
WITHOUT_CLASSIFICATION	since UML2, this must appear before the isAClass clause
WITHOUT_CLASSIFICATION	this rectangle marks the operation section; all operations are inside it
WITHOUT_CLASSIFICATION	2nd compartment, so adjust Y appropriately
WITHOUT_CLASSIFICATION	TODO: We should be able to just call renderingChanged on the child figs here instead of doing an updateOperations...
WITHOUT_CLASSIFICATION	TODO: We just need to get someone to re-render a single line of text which represents the element here, but I'm not sure how to do that. - tfm TODO: Bob replies - we shouldn't be interested in this event here. The FigFeature (or its notation) should be listen for change and the FigFeature should be update from that.
WITHOUT_CLASSIFICATION	Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#translate(int, int)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	add the listeners to the newOwner
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	check if any stereotype is defined
WITHOUT_CLASSIFICATION	and the stereotypes of its features
WITHOUT_CLASSIFICATION	and its features
WITHOUT_CLASSIFICATION	and the parameter of its operations
WITHOUT_CLASSIFICATION	Update the listeners to match the desired set using the minimal update facility
WITHOUT_CLASSIFICATION	Modifier ...
WITHOUT_CLASSIFICATION	Create a Body that reacts to double-clicks and jumps to a diagram.
WITHOUT_CLASSIFICATION	Add ...
WITHOUT_CLASSIFICATION	Visibility ...
WITHOUT_CLASSIFICATION	Set properties of the stereotype box. Initially not set to be displayed, but this will be changed when we try to render it, if we find we have a stereotype.
WITHOUT_CLASSIFICATION	There are 2 boxes showing lines: the tab and the body.
WITHOUT_CLASSIFICATION	This populates the stereotypes area:
WITHOUT_CLASSIFICATION	else nothing changed
WITHOUT_CLASSIFICATION	else nothing changed
WITHOUT_CLASSIFICATION	we got at least one stereotype
WITHOUT_CLASSIFICATION	the user wants to hide them
WITHOUT_CLASSIFICATION	Modifier ...
WITHOUT_CLASSIFICATION	Visibility ...
WITHOUT_CLASSIFICATION	The figPoly is located at the right of the name text. The nameFig size is increased, so that it fits its text, and the figPoly next to the text, all within the boundaries of the nameFig.
WITHOUT_CLASSIFICATION	If we have any number of stereotypes displayed, then allow some space for that (only width, height is included in nameFig):
WITHOUT_CLASSIFICATION	take into account the tab is not as wide as the body:
WITHOUT_CLASSIFICATION	we want at least some of the package body to be displayed
WITHOUT_CLASSIFICATION	And now aSize has the answer
WITHOUT_CLASSIFICATION	Save our old boundaries (needed later), and get minimum size info. "aSize" will be used to maintain a running calculation of our size at various points.
WITHOUT_CLASSIFICATION	The new size can not be smaller than the minimum.
WITHOUT_CLASSIFICATION	Now resize all sub-figs, including not displayed figs. Start by the name. We override the getMinimumSize if it is less than our view (21 pixels hardcoded!). Add in the shared extra, plus in this case the correction.
WITHOUT_CLASSIFICATION	Now sort out the stereotype display. If the stereotype is displayed, move the upper boundary of the name compartment up and set new bounds for the name and the stereotype compartments and the stereoLineBlinder that blanks out the line between the two
WITHOUT_CLASSIFICATION	Advance currentY to where the start of the body box is, remembering that it overlaps the next box by 1 pixel. Calculate the size of the body box, and update the Y pointer past it if it is displayed.
WITHOUT_CLASSIFICATION	-1 for 1 pixel overlap
WITHOUT_CLASSIFICATION	set bounds of big box
WITHOUT_CLASSIFICATION	The figPoly is located at the right edge of the nameFig. The nameFig size is such that it at least fits its text, and the figPoly next to the text. Making the package bigger, causes the figPoly to stick to the right edge.
WITHOUT_CLASSIFICATION	Now force calculation of the bounds of the figure, update the edges and trigger anyone who's listening to see if the "bounds" property has changed.
WITHOUT_CLASSIFICATION	Only show the menuitems if they make sense:
WITHOUT_CLASSIFICATION	save first
WITHOUT_CLASSIFICATION	while
WITHOUT_CLASSIFICATION	If we get here then we didn't get the default diagram.
WITHOUT_CLASSIFICATION	Try to create a new class diagram.
WITHOUT_CLASSIFICATION	if package
WITHOUT_CLASSIFICATION	if doubleclicks
WITHOUT_CLASSIFICATION	change prefix
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	add the listeners to the newOwner
WITHOUT_CLASSIFICATION	and its features
WITHOUT_CLASSIFICATION	end class FigPackage
WITHOUT_CLASSIFICATION	Readonly class: no generalization, no association to self
WITHOUT_CLASSIFICATION	end class StylePanelFigPackage
WITHOUT_CLASSIFICATION	In the DeploymentDiagram there are no Generalizations
WITHOUT_CLASSIFICATION	Self-association isn't draggable
WITHOUT_CLASSIFICATION	end class StylePanelFigInterface
WITHOUT_CLASSIFICATION	No Generalizations on Deployment Diagram
WITHOUT_CLASSIFICATION	and its stereotypes
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	add the listeners to the newOwner
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	Stereotype covers NameFig:
WITHOUT_CLASSIFICATION	Compartments from top to bottom:
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	Collect the set of model elements that we want to listen to
WITHOUT_CLASSIFICATION	and its features
WITHOUT_CLASSIFICATION	and the stereotypes of its features
WITHOUT_CLASSIFICATION	and the parameter of its operations
WITHOUT_CLASSIFICATION	Use super because not fully init'd
WITHOUT_CLASSIFICATION	and its enumerationLiterals
WITHOUT_CLASSIFICATION	And now add listeners to them all:
WITHOUT_CLASSIFICATION	Put all the bits together, suppressing bounds calculations until we're all done for efficiency.
WITHOUT_CLASSIFICATION	The next line is needed so that we have the right dimension when drawing this Fig on the diagram by pressing down the mouse button, even before releasing the mouse button:
WITHOUT_CLASSIFICATION	stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	Set the bounds of the figure to the total of the above
WITHOUT_CLASSIFICATION	If moved into an Package
WITHOUT_CLASSIFICATION	If default Namespace is not already set
WITHOUT_CLASSIFICATION	The next if-clause is important for the Deployment-diagram it detects if the enclosing fig is a component, in this case the container will be set for the owning Interface
WITHOUT_CLASSIFICATION	Testing: Add a parameter to an operation on an Interface. Does the Interface Fig adapt its width?
WITHOUT_CLASSIFICATION	Set up the property panels for class diagrams:
WITHOUT_CLASSIFICATION	The figure that holds the text of the note.
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	Update the listeners to match the desired set using the minimal update facility
WITHOUT_CLASSIFICATION	Get the size of the text field.
WITHOUT_CLASSIFICATION	Mark this as newly created. This is to get round the problem with creating figs for loaded comments that had stereotypes. They are saved with their dimensions INCLUDING the stereotype, but since we pretend the stereotype is not visible, we add height the first time we render such a comment. This is a complete fudge, and really we ought to address how comment objects with stereotypes are saved. But that will be hard work.
WITHOUT_CLASSIFICATION	update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	parse the text that was edited
WITHOUT_CLASSIFICATION	Resize the text figure
WITHOUT_CLASSIFICATION	resize the FigNode to accomodate the new text
WITHOUT_CLASSIFICATION	Not used, do nothing.
WITHOUT_CLASSIFICATION	Not used, do nothing.
WITHOUT_CLASSIFICATION	Resize the big port around the figure
WITHOUT_CLASSIFICATION	The text element has no border, so the line color doesn't matter.
WITHOUT_CLASSIFICATION	The text is always opaque.
WITHOUT_CLASSIFICATION	? 2LINE_WIDTH?
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	Make a seamless integration of the text in the note figure.
WITHOUT_CLASSIFICATION	user interaction methods
WITHOUT_CLASSIFICATION	accessor methods
WITHOUT_CLASSIFICATION	If we have a stereotype displayed, then allow some space for that (width and height)
WITHOUT_CLASSIFICATION	And add the gaps around the textfield to get the minimum size of the note.
WITHOUT_CLASSIFICATION	Since this is a complex polygon, there's no easy way to resize it.
WITHOUT_CLASSIFICATION	Just move the corner to it's new position.
WITHOUT_CLASSIFICATION	/ Internal methods
WITHOUT_CLASSIFICATION	Remove the commentedge. If there are more then one comment-edges between the 2 objects, then delete them all.
WITHOUT_CLASSIFICATION	all connected edges
WITHOUT_CLASSIFICATION	Only adjust the stereotype height if we are not newly created. This gets round the problem of loading classes with stereotypes defined, which have the height already including the stereotype.
WITHOUT_CLASSIFICATION	Whatever happened we are no longer newly created, so clear the flag. Then set the bounds for the rectangle we have defined.
WITHOUT_CLASSIFICATION	end class StylePanelFigClass
WITHOUT_CLASSIFICATION	TODO: get tip string from comment
WITHOUT_CLASSIFICATION	This one is still usable, so let's retain it,
WITHOUT_CLASSIFICATION	the last one needs extra space below it
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setDestFigNode(org.tigris.gef.presentation.FigNode)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setSourceFigNode(org.tigris.gef.presentation.FigNode)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	contructors
WITHOUT_CLASSIFICATION	Modifiers ...
WITHOUT_CLASSIFICATION	The next line is needed so that we have the right dimension when drawing this Fig on the diagram by pressing down the mouse button, even before releasing the mouse button:
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	Visibility ...
WITHOUT_CLASSIFICATION	stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	element will normally be null when called from PGML parser It will get it's source & destination set later in attachEdges
WITHOUT_CLASSIFICATION	Unfortunately the Fig and it's associated CommentEdge will not be fully initialized yet here if we're being loaded from a PGML file. The remainder of the initialization will happen when set{Dest|Source}FigNode are called from PGMLStackParser.attachEdges()
WITHOUT_CLASSIFICATION	unimplemented
WITHOUT_CLASSIFICATION	Alternatively, we could just return null here, so that you can not create a comment just linked to a comment this way - which is a bit uncommon, but not illegal, so for consistency, we better allow it.
WITHOUT_CLASSIFICATION	return null;
WITHOUT_CLASSIFICATION	Class to display a Stereotype declaration figure using Classifier box notation.<p> TODO: This is just a place-holder right now! - tfm This needs to show tags and constraints.
WITHOUT_CLASSIFICATION	Add...
WITHOUT_CLASSIFICATION	Show ...
WITHOUT_CLASSIFICATION	register for tagDefinitions:
WITHOUT_CLASSIFICATION	TODO: constraints, ...
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractAction#isEnabled()
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	Put all the bits together, suppressing bounds calculations until we're all done for efficiency.
WITHOUT_CLASSIFICATION	The next line is needed so that we have the right dimension when drawing this Fig on the diagram by pressing down the mouse button, even before releasing the mouse button:
WITHOUT_CLASSIFICATION	TODO: Need named Tags and Constraints compartments here addFig(tagsFig); addFig(constraintsFig);
WITHOUT_CLASSIFICATION	If moved into an Package
WITHOUT_CLASSIFICATION	If default Namespace is not already set
WITHOUT_CLASSIFICATION	When this is called from PGMLStackParser.attachEdges, we finished the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	If the Operation/Reception is abstract, then the text will be set to italics.
WITHOUT_CLASSIFICATION	avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	TODO: Add Tags & Constraints addMenu.add(TargetManager.getInstance().getAddAttributeAction()); addMenu.add(TargetManager.getInstance().getAddOperationAction());
WITHOUT_CLASSIFICATION	avoid GEF calcDrawingArea bug when nothing in a diagram.
WITHOUT_CLASSIFICATION	No generalizations in Deployment Diagrams
WITHOUT_CLASSIFICATION	the diagram image data
WITHOUT_CLASSIFICATION	copy the gif image to the clipboard
WITHOUT_CLASSIFICATION	the diagram image data
WITHOUT_CLASSIFICATION	hide grid, otherwise can't see anything
WITHOUT_CLASSIFICATION	bigPort.setFilled(f);
WITHOUT_CLASSIFICATION	background color.
WITHOUT_CLASSIFICATION	2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	Set up hide all / show all
WITHOUT_CLASSIFICATION	Perform the action
WITHOUT_CLASSIFICATION	Only the bigPort may be filled
WITHOUT_CLASSIFICATION	?LINE_WIDTH?
WITHOUT_CLASSIFICATION	see parent
WITHOUT_CLASSIFICATION	?LINE_WIDTH?
WITHOUT_CLASSIFICATION	We remove all of them:
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.undo.UndoableAction#isEnabled()
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	?LINE_WIDTH?
WITHOUT_CLASSIFICATION	If we don't have a fig for this UML object, we'll need to add one. We set the bounds, but they will be reset later.
WITHOUT_CLASSIFICATION	but its position may have been changed:
WITHOUT_CLASSIFICATION	bounds not relevant here, but I am perfectionist...
WITHOUT_CLASSIFICATION	We need to set a new notationprovider, since the Notation language may have been changed:
WITHOUT_CLASSIFICATION	add it again (but now in the right sequence)
WITHOUT_CLASSIFICATION	Now put the text in We must handle the case where the text is null
WITHOUT_CLASSIFICATION	No longer abstract to allow subclasses to remove, so we provide a null default implementation
WITHOUT_CLASSIFICATION	If this is not overridden it will revert to the old behavior All internal subclasses have been updated, but this if for compatibility of non-ArgoUML extensions.
WITHOUT_CLASSIFICATION	Find the compartment fig for this umlObject:
WITHOUT_CLASSIFICATION	Override superclass to do nothing. Fill property cannot be changed.
WITHOUT_CLASSIFICATION	Override superclass to do nothing. Line width cannot be changed.
WITHOUT_CLASSIFICATION	Override superclass to do nothing. Line width property cannot be changed.
WITHOUT_CLASSIFICATION	aggregation
WITHOUT_CLASSIFICATION	end class ActionSrcMultOneToMany
WITHOUT_CLASSIFICATION	TODO: set font?
WITHOUT_CLASSIFICATION	to circumvent too many registered listeners
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Calling connect() will add the edge to the GraphModel and any LayerPersectives on that GraphModel will get a edgeAdded event and will add an appropriate FigEdge (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	ending editing
WITHOUT_CLASSIFICATION	USED BY PGML.tee
WITHOUT_CLASSIFICATION	Actually return the FigEdge that the FigEdgePort is part of.
WITHOUT_CLASSIFICATION	throw new IllegalArgumentException();
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	If the user selects an Action that is already selected in sticky mode (double clicked) then we turn off sticky mode and make sure no action is selected.
WITHOUT_CLASSIFICATION	Here the actions to divide a region
WITHOUT_CLASSIFICATION	The 1st region has an invisible divider line (the box is always invisible):
WITHOUT_CLASSIFICATION	Throw out any previous elements that were enclosed but are not a concurrent region; let's move them onto the first region:
WITHOUT_CLASSIFICATION	linewidth?
WITHOUT_CLASSIFICATION	The divider line should be visible, so no need to change its color.
WITHOUT_CLASSIFICATION	Make the composite state 1 region higher:
WITHOUT_CLASSIFICATION	TODO: Verify this. IIUC, then this triggers the CompountStateFig to draw itself correctly. Hence, there was a reason to wait this long to make the state concurrent.
WITHOUT_CLASSIFICATION	Look for the dashed edge
WITHOUT_CLASSIFICATION	We have the dashed edge now find the opposite FigNode
WITHOUT_CLASSIFICATION	Prevent triggering too many events by setName().
WITHOUT_CLASSIFICATION	not???
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	Consume to stop other modes from trying to take over
WITHOUT_CLASSIFICATION	marker interface only
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	Only reset the text if the two are not the same (i.e the fig has moved, rather than we've just edited the text, when setTargetBBox() will have made them the same). Note that styleBounds could be null, so we do the test this way round.
WITHOUT_CLASSIFICATION	Can't do anything if we don't have a fig.
WITHOUT_CLASSIFICATION	2 Pixel padding after compartment
WITHOUT_CLASSIFICATION	or vice versa?
WITHOUT_CLASSIFICATION	Provide feedback to the user that their name was not accepted
WITHOUT_CLASSIFICATION	Subtract the the offset of the click, to take account of user having not initially clicked in the centre.
WITHOUT_CLASSIFICATION	super returns -1 if any of GEFs buttons was hit (but maybe one of the not-GEF-buttons)
WITHOUT_CLASSIFICATION	Do not show border line, make transparent:
WITHOUT_CLASSIFICATION	cleanup of unused FigText's
WITHOUT_CLASSIFICATION	TODO: This doesn't do anything special with keywords. They should probably go first.
WITHOUT_CLASSIFICATION	There is one fig more in the group than (stereotypes + keyword):
WITHOUT_CLASSIFICATION	The keyword fig already exists.
WITHOUT_CLASSIFICATION	This will contain the Figs that we do not need anymore:
WITHOUT_CLASSIFICATION	bounds not relevant here
WITHOUT_CLASSIFICATION	bounds not relevant here
WITHOUT_CLASSIFICATION	The stereotype fig already exists.
WITHOUT_CLASSIFICATION	The boundary box as held in the target fig, and as listed in the boundary box style field (null if we don't have anything valid)
WITHOUT_CLASSIFICATION	remove all stereotypes that have a graphical icon
WITHOUT_CLASSIFICATION	TODO: check!
WITHOUT_CLASSIFICATION	set new bounds for all included figs
WITHOUT_CLASSIFICATION	StylePanelFigClass relies on getPanelTarget() to return a FigCompartmentBox
WITHOUT_CLASSIFICATION	Get class box, because we will set it's bounding box
WITHOUT_CLASSIFICATION	Get class box, because we will set it's bounding box in text field
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Calling connect() will add the edge to the GraphModel and any LayerPersectives on that GraphModel will get a edgeAdded event and will add an appropriate FigEdge (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	The keyword fig does not exist yet. Let's create one:
WITHOUT_CLASSIFICATION	keywords which look like a stereotype (e.g. <<interface>>) have no owner
WITHOUT_CLASSIFICATION	if there are no stereotypes, we return (0,0), preventing double lines in the class (see issue 4939)
WITHOUT_CLASSIFICATION	end class StylePanelFigAssociationClass
WITHOUT_CLASSIFICATION	/ Constructors /
WITHOUT_CLASSIFICATION	/ Main methods /
WITHOUT_CLASSIFICATION	Create the singleton if it does not exist, and then return it
WITHOUT_CLASSIFICATION	When a new target is selected, we have to check if it 's a use case. Then, the icone "add extension point" have to become enabled.
WITHOUT_CLASSIFICATION	Find the target in the project browser. We can only do anything if its a use case.
WITHOUT_CLASSIFICATION	Create a new extension point and make it the browser target. Then invoke the superclass action method.
WITHOUT_CLASSIFICATION	end class ActionAddExtensionPoint
WITHOUT_CLASSIFICATION	We have already confirmed the connection is valid
WITHOUT_CLASSIFICATION	Detach any edges (such as comment edges) already attached to the FigAssociation before the FigAssociation is removed. They'll later be re-attached to the new FigNodeAssociation
WITHOUT_CLASSIFICATION	If there are bits of an association class then remember their location and path.
WITHOUT_CLASSIFICATION	Create the new FigNodeAssociation and locate it.
WITHOUT_CLASSIFICATION	Add the association ends to the graph model
WITHOUT_CLASSIFICATION	Add the edges (such as comment edges) that were on the old FigAssociation to our new FigNodeAssociation and make sure they are positioned correctly.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dragEnter( java.awt.dnd.DropTargetDragEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dragOver( java.awt.dnd.DropTargetDragEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dropActionChanged( java.awt.dnd.DropTargetDragEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	get the model elements that are being transfered.
WITHOUT_CLASSIFICATION	multiplicity
WITHOUT_CLASSIFICATION	end class ModeCreateAssociation
WITHOUT_CLASSIFICATION	&& ((UMLDiagram) dia).doesAccept(dtde.getSource())
WITHOUT_CLASSIFICATION	Create a new FigText instance based on the given mouse down event and the state of the parent Editor.
WITHOUT_CLASSIFICATION	System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	end class SPFigEdgeModelElement
WITHOUT_CLASSIFICATION	System.err.println("NullPointerException ignored.");
WITHOUT_CLASSIFICATION	Get all our sub Figs and hit them with the big stick too
WITHOUT_CLASSIFICATION	Only show the path item when there is an owning namespace.
WITHOUT_CLASSIFICATION	Only show the path item when there is an owning namespace.
WITHOUT_CLASSIFICATION	enumerate all selected figures and update their path accordingly
WITHOUT_CLASSIFICATION	Force the line-width to 0, since the FigGroup that contains the stereotype may want to show a border, but we don't.
WITHOUT_CLASSIFICATION	compartments
WITHOUT_CLASSIFICATION	TODO: Support commentEdges. TODO: Support associations to self. @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	add
WITHOUT_CLASSIFICATION	20 = height of name fig ?
WITHOUT_CLASSIFICATION	Now force calculation of the bounds of the figure, update the edges and trigger anyone who's listening to see if the "bounds" property has changed.
WITHOUT_CLASSIFICATION	2LINE_WIDTH? or extra padding?
WITHOUT_CLASSIFICATION	Set properties of the stereotype box.
WITHOUT_CLASSIFICATION	The nameFig is transparent, since this is a box and the fill color is drawn by the bigPort.
WITHOUT_CLASSIFICATION	Use "aSize" to build up the minimum size. Start with the size of the name compartment and build up.
WITHOUT_CLASSIFICATION	Only take into account the stereotype width, not the height, since the height is included in the name fig:
WITHOUT_CLASSIFICATION	Add the height of all the compartments (if there are any), and check their minimum width:
WITHOUT_CLASSIFICATION	Save our old boundaries so it can be used in property message later
WITHOUT_CLASSIFICATION	Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	The box for the compartments is somewhere inside the outside bounds:
WITHOUT_CLASSIFICATION	Now the new nameFig height will include the stereotype height:
WITHOUT_CLASSIFICATION	The new height can not be less than the name height:
WITHOUT_CLASSIFICATION	Calculate the minimum needed height for all the compartments:
WITHOUT_CLASSIFICATION	Distribute the extra height over the visible compartments:
WITHOUT_CLASSIFICATION	Increase the height of the fig:
WITHOUT_CLASSIFICATION	Finally set the bounds of the big box and the border fig:
WITHOUT_CLASSIFICATION	hide compartment
WITHOUT_CLASSIFICATION	Hiding one compartment means that the Fig returns to minimal dimensions:
WITHOUT_CLASSIFICATION	@see javax.swing.JComponent#setVisible(boolean)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.PathConv#stuffPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.PathConv#setClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.PathConv#applyOffsetAmount(java.awt.Point, java.awt.Point, int, java.awt.Point)
WITHOUT_CLASSIFICATION	Alternatively, we could reduce the height of the Fig by the height of this one hidden compartment. But that would not be possible for the width - so we better return to minimal dimensions overall.
WITHOUT_CLASSIFICATION	show compartment
WITHOUT_CLASSIFICATION	This sets the lineWidth of all in the group:
WITHOUT_CLASSIFICATION	NameFig and StereotypeFig are handled by parent.
WITHOUT_CLASSIFICATION	forceRepaintShadow();
WITHOUT_CLASSIFICATION	Update the diagram, and other users of these settings:
WITHOUT_CLASSIFICATION	@jve:decl-index=0:visual-constraint="10,10"
WITHOUT_CLASSIFICATION	find the point offset on the line that gives a correct offset
WITHOUT_CLASSIFICATION	default angle is 90 deg.
WITHOUT_CLASSIFICATION	Boundary condition in GEF, make sure this is LESS THAN, not equal
WITHOUT_CLASSIFICATION	If we're using a fixed offset, just add it and return No collision detection is done in this case
WITHOUT_CLASSIFICATION	Check for a collision between our computed position and the edge
WITHOUT_CLASSIFICATION	increase offset by 2px at a time
WITHOUT_CLASSIFICATION	Get the points representing the poly line for our edge
WITHOUT_CLASSIFICATION	increase offset by increments until we're clear
WITHOUT_CLASSIFICATION	limit our retries in case its too hard to get free
WITHOUT_CLASSIFICATION	If we timed out, give it one more try on the other side
WITHOUT_CLASSIFICATION	count >= limit
WITHOUT_CLASSIFICATION	Force the line-width to 0, since the FigGroup that contains the stereotype may want to show a border, but we don't.
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "Final point #" + count + " " + result + " offset of " + scaledOffset);
WITHOUT_CLASSIFICATION	segment size for computing slope
WITHOUT_CLASSIFICATION	Two points for line segment used to compute slope of path here NOTE that this is the average slope, not instantaneous, so it will give screwy results near bends in the path
WITHOUT_CLASSIFICATION	If our position was clamped, try to make it up on the other end
WITHOUT_CLASSIFICATION	Can't get the slope of a point. Just return an arbitrary point.
WITHOUT_CLASSIFICATION	Our angle theta is arctan(opposite/adjacent) Because y increases going down the screen, positive angles are clockwise rather than counterclockwise
WITHOUT_CLASSIFICATION	This shouldn't happen, because of our line segment size check
WITHOUT_CLASSIFICATION	"We're going vertical!" - Goose in "Top Gun"
WITHOUT_CLASSIFICATION	Arctan only returns -PI/2 to PI/2 Handle the other two quadrants and normalize to 0 - 2PI
WITHOUT_CLASSIFICATION	Quadrant II & III
WITHOUT_CLASSIFICATION	Quadrant IV
WITHOUT_CLASSIFICATION	Set the following for some backward compatibility with old algorithm
WITHOUT_CLASSIFICATION	Add displacement angle to slope
WITHOUT_CLASSIFICATION	Transform to 0 - 2PI range if we've gone all the way around circle
WITHOUT_CLASSIFICATION	Compute our deltas
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE,result.x + ", " + result.y + " theta = " + theta 180 / Math.PI + " dx = " + dx + " dy = " + dy);
WITHOUT_CLASSIFICATION	Load the standard colour, just add an alpha channel.
WITHOUT_CLASSIFICATION	Should never get here. If we do, return the inner point.
WITHOUT_CLASSIFICATION	Called by propertyChange
WITHOUT_CLASSIFICATION	this does a calcBounds()
WITHOUT_CLASSIFICATION	NOTE: This listener needs to always be active even if this tab isn't visible
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Diagram#getClassAndModelID()
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	The clone method that should clone the JGraph with it's contents and the toolbar with it's contents. Since both JGraph as the toolbar are coming from the GEF framework, cloning them will be hard work and should actually not be placed here but in a clone method of the JGraph and the Toolbar. @see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see java.awt.Component#setVisible(boolean)
WITHOUT_CLASSIFICATION	If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	The following is the default implementation for diagrams of which the owner is a namespace.
WITHOUT_CLASSIFICATION	source source position destination destination position number of objects to be copied
WITHOUT_CLASSIFICATION	"unnamed " +
WITHOUT_CLASSIFICATION	TODO: should update to size of diagram contents
WITHOUT_CLASSIFICATION	This should not be needed if the above is correct, but let's be sure:
WITHOUT_CLASSIFICATION	This should not be needed if the above is correct, but let's be sure:
WITHOUT_CLASSIFICATION	ActionPaste.getInstance().setEnabled( Globals.clipBoard != null && !Globals.clipBoard.isEmpty());
WITHOUT_CLASSIFICATION	next statement gives us a clone JGraph but not a cloned Toolbar
WITHOUT_CLASSIFICATION	@see org.tigris.gef.event.ModeChangeListener#modeChange(org.tigris.gef.event.ModeChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	remains selected
WITHOUT_CLASSIFICATION	the old selection
WITHOUT_CLASSIFICATION	Target might not have been initialised yet.
WITHOUT_CLASSIFICATION	add to selection
WITHOUT_CLASSIFICATION	Optimize for the normal case to minimize target changes
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	Assuming the target is some model element.
WITHOUT_CLASSIFICATION	how to handle empty target lists? probably the TabDiagram should only show an empty pane in that case
WITHOUT_CLASSIFICATION	Assuming the target is some model element.
WITHOUT_CLASSIFICATION	was ""
WITHOUT_CLASSIFICATION	Although we register for notification of diagrams being deleted, we currently depend on the TargetManager to assign a new target when this happens When we implement MDI and have our own list of open diagrams we can ressurect the use of this
WITHOUT_CLASSIFICATION	Any Swing work done here needs to be queued to the AWT thread since we don't know what thread our event will arrive on
WITHOUT_CLASSIFICATION	- RedrawManager.lock();
WITHOUT_CLASSIFICATION	- RedrawManager.lock();
WITHOUT_CLASSIFICATION	getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	- RedrawManager.unlock(); - _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	getLayerManager().getActiveLayer().paint(g);
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.swing.Action#getValue(java.lang.String)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	This makes the text not touch the text-border line:
WITHOUT_CLASSIFICATION	TODO: We don't currently have any settings that can change on a per-fig basis, so we can just use the project/diagram defaults settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	Certain types of fixed text (e.g. a FigStereotype with a keyword) may not have an owner
WITHOUT_CLASSIFICATION	Now, we link it to the modelelements which are represented by FigNode
WITHOUT_CLASSIFICATION	update all tools' enabled status
WITHOUT_CLASSIFICATION	remember the fig for later
WITHOUT_CLASSIFICATION	Let's build the comment first, unlinked.
WITHOUT_CLASSIFICATION	Prevent e.g. AssociationClasses from being added trice:
WITHOUT_CLASSIFICATION	Select the new comment as target
WITHOUT_CLASSIFICATION	Create the Node Fig for the comment itself and draw it
WITHOUT_CLASSIFICATION	Create the comment links and draw them
WITHOUT_CLASSIFICATION	Place the comment Fig on the nicest spot on the diagram
WITHOUT_CLASSIFICATION	If we're drawing from an edge
WITHOUT_CLASSIFICATION	$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	$NON-NLS-<n>$
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.undo.UndoableAction#isEnabled()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Calling connect() will add the edge to the GraphModel and any LayerPersectives on that GraphModel will get a edgeAdded event and will add an appropriate FigEdge (determined by the GraphEdgeRenderer).
WITHOUT_CLASSIFICATION	user made a false start
WITHOUT_CLASSIFICATION	So, the target is a MAssociationRole
WITHOUT_CLASSIFICATION	MVW This is not the correct way, but it allows connecting a CommentEdge to it! See e.g. ActionAddNote for the correct way. Testcase: 1. Select the message. 2. Click the Comment tool.
WITHOUT_CLASSIFICATION	end class ActionAddMessage
WITHOUT_CLASSIFICATION	let's use groups to construct the different text sections at the association
WITHOUT_CLASSIFICATION	No further listeners required in this case - the rest is handled by the notationProvider and sub-Figs.
WITHOUT_CLASSIFICATION	This only happens if model-change events arrive before we are completely constructed.
WITHOUT_CLASSIFICATION	x^2 + y^2 = r^2 (equation of a circle)
WITHOUT_CLASSIFICATION	max distance is set at 100 pixels, (rSquared = 100^2)
WITHOUT_CLASSIFICATION	east
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	end class FigAssociation
WITHOUT_CLASSIFICATION	Note that "multiplicity" is what is the notation is listening for in UML1.4 "uppervalue" are listened to in UML2. It is not currently why it is not required to register for "lowerValue" also.
WITHOUT_CLASSIFICATION	no need to listen to these property changes - the notationProvider takes care of this.
WITHOUT_CLASSIFICATION	no need to listen to these property changes - the notationProvider takes care of this.
WITHOUT_CLASSIFICATION	, new String[] {"name", "visibility", "stereotype"}
WITHOUT_CLASSIFICATION	, new String[] {"name", "visibility", "stereotype"}
WITHOUT_CLASSIFICATION	These are a list of arrow types.
WITHOUT_CLASSIFICATION	Added to the arrow type for navigable
WITHOUT_CLASSIFICATION	Finished editing. Parse the text that was edited. Only the role is editable, hence:
WITHOUT_CLASSIFICATION	figEdge.showHelp(role.getParsingHelp()); role.setText();
WITHOUT_CLASSIFICATION	Pass everything else to superclass
WITHOUT_CLASSIFICATION	end class ActionNavigability
WITHOUT_CLASSIFICATION	Nothing yet. Later maybe something like:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	putNotationArgument("showAssociationName", getSettings().isShowAssociationNames());
WITHOUT_CLASSIFICATION	The text the user has filled in the textfield is first checked to see if it's a valid multiplicity. If so then that is the multiplicity to be set. If not the input is rejected.
WITHOUT_CLASSIFICATION	Fonts and colors should get updated automatically for contained figs
WITHOUT_CLASSIFICATION	There is none...
WITHOUT_CLASSIFICATION	only initialized to prevent warning
WITHOUT_CLASSIFICATION	not supported for this target
WITHOUT_CLASSIFICATION	make space for the clarifier margin between text and border
WITHOUT_CLASSIFICATION	This next line presumes that the 1st fig with this owner is the previous port - and consequently nullifies the owner of this 1st fig.
WITHOUT_CLASSIFICATION	Add a listener for changes to any property
WITHOUT_CLASSIFICATION	Check if multiple items are selected:
WITHOUT_CLASSIFICATION	Show ...
WITHOUT_CLASSIFICATION	popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	TODO: The following is carried over from setOwner, but probably isn't needed renderingChanged(); It does the following (add as needed): updateNameText(); updateStereotypeText(); updateStereotypeIcon(); updateBounds(); damage();
WITHOUT_CLASSIFICATION	Be careful here since subclasses could have overridden this with the assumption that it wouldn't be called before the constructors finished
WITHOUT_CLASSIFICATION	TODO: MVW: I think this has to be: clone.nameFig = (FigSingleLineText) cloneFig; but have not the means to investigate, since this code is not yet used. Enable the menu-items for Copy/Paste to test... BTW: In some other FigNodeModelElement classes I see the same mistake.
WITHOUT_CLASSIFICATION	this rectangle marks the whole modelelement figure; everything is inside it:
WITHOUT_CLASSIFICATION	Clone this figure. After the base clone method has been called determine which child figs of the clone represent the name, stereotype and port. <p> TODO: enclosedFigs, encloser and eventSenders may also need to be cloned. @see java.lang.Object#clone() @return the cloned figure
WITHOUT_CLASSIFICATION	Idem here: clone.stereotypeFig = (FigStereotypesGroup) cloneFig;
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getEnclosingFig()
WITHOUT_CLASSIFICATION	update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	parse the text that was edited
WITHOUT_CLASSIFICATION	add stereotype view submenu
WITHOUT_CLASSIFICATION	The node's been placed on the diagram
WITHOUT_CLASSIFICATION	Add stereotypes submenu
WITHOUT_CLASSIFICATION	Set the namespace of the enclosed model element to the namespace of the encloser.
WITHOUT_CLASSIFICATION	Find all ElementResidences between the class and the component:
WITHOUT_CLASSIFICATION	There was no ElementResidence yet, so let's create one:
WITHOUT_CLASSIFICATION	The node's been placed within some Fig
WITHOUT_CLASSIFICATION	There were 2 ElementResidences .. strange case.
WITHOUT_CLASSIFICATION	There is already a correct ElementResidence
WITHOUT_CLASSIFICATION	The owner is already linked to the component
WITHOUT_CLASSIFICATION	We are getting events we don't want. Filter them out.
WITHOUT_CLASSIFICATION	Only update the bounds if they change:
WITHOUT_CLASSIFICATION	We handle and consume editing events
WITHOUT_CLASSIFICATION	resize the FigNode to accommodate the new text
WITHOUT_CLASSIFICATION	If the source of the event is an UML object, e.g. the owner of this Fig (but not always only the owner is shown, e.g. for a class, also its attributes are shown), then the UML model has been changed.
WITHOUT_CLASSIFICATION	TODO: Should this not be an assert?
WITHOUT_CLASSIFICATION	west
WITHOUT_CLASSIFICATION	If the user double clicks on any part of this FigNode, pass it down to one of the internal Figs. This allows the user to initiate direct text editing. @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	south
WITHOUT_CLASSIFICATION	event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	Convert null to empty string and clear help message
WITHOUT_CLASSIFICATION	it is done
WITHOUT_CLASSIFICATION	this enables direct text editing for sub figs of a FigGroup object:
WITHOUT_CLASSIFICATION	either layer or owner was null
WITHOUT_CLASSIFICATION	Default is to do nothing
WITHOUT_CLASSIFICATION	Default is to do nothing
WITHOUT_CLASSIFICATION	Default is to do nothing
WITHOUT_CLASSIFICATION	Default is to do nothing
WITHOUT_CLASSIFICATION	This test needed for a FigPool
WITHOUT_CLASSIFICATION	Get model listeners removed:
WITHOUT_CLASSIFICATION	is used as InstanceSpecification, see UMLDeploymentDiagram
WITHOUT_CLASSIFICATION	TODO: what about ObjectNode? return org.eclipse.uml2.uml.ObjectNode.class;
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	TODO: State & Vertex are independent classes in UML 2.1
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	only initialized to prevent warning
WITHOUT_CLASSIFICATION	not supported for this target
WITHOUT_CLASSIFICATION	internal methods
WITHOUT_CLASSIFICATION	TODO assert modelElement != null???
WITHOUT_CLASSIFICATION	Default for name and stereotype is no border
WITHOUT_CLASSIFICATION	Override FigNode implementation to keep setOwner from getting called.
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	Use DiagramInterface to add classes to diagram
WITHOUT_CLASSIFICATION	ActionAddAllClassesFromModel
WITHOUT_CLASSIFICATION	we have an edge (the UML modelelement!)
WITHOUT_CLASSIFICATION	situation 1
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	Text group to contain name & stereotype
WITHOUT_CLASSIFICATION	computeRoute(); this recomputes the route if you reload the diagram.
WITHOUT_CLASSIFICATION	in case someone turns it on
WITHOUT_CLASSIFICATION	Do not allow fill to change. We should see through the text to the color of the main FIg background.
WITHOUT_CLASSIFICATION	Now force minimum dimensions for the text:
WITHOUT_CLASSIFICATION	Now add the areas around the text to return the complete size:
WITHOUT_CLASSIFICATION	calculate the source and dest figs for to self assoc
WITHOUT_CLASSIFICATION	reset the pointIndex
WITHOUT_CLASSIFICATION	check pre-conds
WITHOUT_CLASSIFICATION	Set-up:
WITHOUT_CLASSIFICATION	the fig that was under the mouse when it was released
WITHOUT_CLASSIFICATION	make a nice little target area:
WITHOUT_CLASSIFICATION	and find the Fig:
WITHOUT_CLASSIFICATION	last is the top fig.
WITHOUT_CLASSIFICATION	check intermediate post-condition.
WITHOUT_CLASSIFICATION	delegate the re-routing to graphmodels.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	set it to an invalid number by default to make sure it is set correctly.
WITHOUT_CLASSIFICATION	figPoly.setFillColor(col);
WITHOUT_CLASSIFICATION	figClone._polygon = (Polygon) _polygon.clone();
WITHOUT_CLASSIFICATION	north
WITHOUT_CLASSIFICATION	Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	TODO: Do nothing until code is reviewed
WITHOUT_CLASSIFICATION	Message
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Crazy numbering scheme at work here. Here's how the handle numbers are laid out. Values 0-7 are defined by GEF and go left to right, top to bottom (ie not clockwise or counterclockwise). Values 10-14 zigzag North, South, West, East, Southwest. If you can correctly guess where 15 will go, you should buy a lottery ticket immediately. <pre> 10 0-------1-------2 | | 12 3 4 13 | | 14 5-------6-------7 11 </pre>
WITHOUT_CLASSIFICATION	ClassifierRole ClassifierRole
WITHOUT_CLASSIFICATION	Simulate a press of the mouse above the calculated point:
WITHOUT_CLASSIFICATION	Calculate the drop location, and place every n-th element at an offset proportional to n.
WITHOUT_CLASSIFICATION	super implementation found a hit
WITHOUT_CLASSIFICATION	Take canvas scrolling into account. The implementation below does place the element correctly when the canvas has been scrolled.
WITHOUT_CLASSIFICATION	Simulate a release of the mouse:
WITHOUT_CLASSIFICATION	Overridden in order to implement PathCompartmentContainer.
WITHOUT_CLASSIFICATION	do nothing by default
WITHOUT_CLASSIFICATION	Don't allow drag outside of bounds of diagram
WITHOUT_CLASSIFICATION	Overridden in order to implement PathCompartmentContainer.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#calcBounds()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	If the user has selected ModePlace either by a diagram tool or AddToDiagram then we don't want to show the clarifiers.
WITHOUT_CLASSIFICATION	If the user has selected ModePlace either by a diagram tool or AddToDiagram then we don't want to show the toolbelt items.
WITHOUT_CLASSIFICATION	Remember what handle was clicked for the case where the drag is released over empty space
WITHOUT_CLASSIFICATION	transparent cyan
WITHOUT_CLASSIFICATION	yellow
WITHOUT_CLASSIFICATION	translucent green
WITHOUT_CLASSIFICATION	super(ModeCreatePolyEdge.class, "edgeClass", Model.getMetaTypes().getAssociation(), name);
WITHOUT_CLASSIFICATION	set this to true on to enable debugging figs
WITHOUT_CLASSIFICATION	anchor position
WITHOUT_CLASSIFICATION	The EnumerationLiteral uses a dedicated notation that supports parsing "name1;name2;name3" and stereotypes. Also supports deleting a literal by erasing text.
WITHOUT_CLASSIFICATION	TODO: The UML does not seem to define this name. Or is it?
WITHOUT_CLASSIFICATION	The serialVersionUID (generated by Eclipse)
WITHOUT_CLASSIFICATION	UML spec for Generalizations doesn't call for name
WITHOUT_CLASSIFICATION	Name & stereotypes get updated by superclass
WITHOUT_CLASSIFICATION	Update the discriminator if it changed
WITHOUT_CLASSIFICATION	show it
WITHOUT_CLASSIFICATION	fig.calcBounds();
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	we only take the filename, not the whole system path
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	make port invisible unless mouse enters
WITHOUT_CLASSIFICATION	event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	The following does not seem to work - centered the Fig instead. getNameFig().setJustificationByName("center");
WITHOUT_CLASSIFICATION	get the widest of all textfigs calculate the total height
WITHOUT_CLASSIFICATION	Create the new FigAssociation edge to replace the node
WITHOUT_CLASSIFICATION	Center the NameFig, since center justification does not seem to work.
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	Do nothing, this rect will always be transparent
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	update any text, colors, fonts, etc.
WITHOUT_CLASSIFICATION	update the relative sizes and positions of internel Figs
WITHOUT_CLASSIFICATION	popupAddOffset should be equal to the number of items added here:
WITHOUT_CLASSIFICATION	Add stereotypes submenu
WITHOUT_CLASSIFICATION	We handle and consume editing events
WITHOUT_CLASSIFICATION	Detach any non-associationend edges (such as comment edges) already attached before this association node is removed. They'll later be re-attached to the new FigAssociation
WITHOUT_CLASSIFICATION	Now we can remove ourself (which will also remove the attached association ends edges)
WITHOUT_CLASSIFICATION	Add the non-associationend edges (such as comment edges) that were originally attached to this and attach them to the new FigAssociation and make sure they are positioned correctly.
WITHOUT_CLASSIFICATION	List of model element listeners we've registered.
WITHOUT_CLASSIFICATION	Added this part to load the extra menu content
WITHOUT_CLASSIFICATION	Owner related todo items:
WITHOUT_CLASSIFICATION	Fig related todo items:
WITHOUT_CLASSIFICATION	parse the text that was edited
WITHOUT_CLASSIFICATION	Pass everything except editing events to superclass
WITHOUT_CLASSIFICATION	If the source of the event is an UML object, then the UML model has been changed.
WITHOUT_CLASSIFICATION	The following is a possible future improvement of the modelChanged() function. Michiel: Propose not to do this to keep architecture stable.
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	TODO: Update setting
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	We moused over an object just as it was deleted transient condition - doesn't require I18N
WITHOUT_CLASSIFICATION	TODO: We don't have any settings that can change per-fig currently so we can just use the default settings; settings = new DiagramSettings(renderSettings);
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	Required for MouseListener interface, but we only care about clicks
WITHOUT_CLASSIFICATION	No need to update if model element went away
WITHOUT_CLASSIFICATION	Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	Required for KeyListener interface, but not used
WITHOUT_CLASSIFICATION	Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	internal methods
WITHOUT_CLASSIFICATION	If the edge is from a circle to a circle (e.g. between use cases) we have our own implementation overriding GEF. Which attempts to keep the edges perpendicular if the edge is already close to perpendicular.
WITHOUT_CLASSIFICATION	newFC = _content;
WITHOUT_CLASSIFICATION	GEF sets a different Fig than the one that we had at construction time, so we need to set its color and width
WITHOUT_CLASSIFICATION	place the edge on the layer and update the diagram
WITHOUT_CLASSIFICATION	end computeRoute
WITHOUT_CLASSIFICATION	TODO: Does this help?
WITHOUT_CLASSIFICATION	If this is not a circle to circle edge we default to let GEF calculate edge route.
WITHOUT_CLASSIFICATION	? two iterations of refinement, maybe should be a for-loop
WITHOUT_CLASSIFICATION	Give up if the assocation ends don't have a type defined
WITHOUT_CLASSIFICATION	Get the two ends of any valid edge
WITHOUT_CLASSIFICATION	Only allow binary associations
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	TODO: assumes public
WITHOUT_CLASSIFICATION	(MElementImport)
WITHOUT_CLASSIFICATION	Modifiers ...
WITHOUT_CLASSIFICATION	This sets the lineWidth of all in the group:
WITHOUT_CLASSIFICATION	NameFig and StereotypeFig are handled by parent.
WITHOUT_CLASSIFICATION	If the line angle is less than 3 degrees then snap the line straight
WITHOUT_CLASSIFICATION	/ Methods that implement the MutableGraphModel interface /
WITHOUT_CLASSIFICATION	A dependency potentially has many clients and suppliers. We only consider the first of each (not clear that we should really accept the case where there is more than one of either)
WITHOUT_CLASSIFICATION	Add the node, check that it is an actor or use case and add it to the model namespace.
WITHOUT_CLASSIFICATION	Tell GEF its changed
WITHOUT_CLASSIFICATION	Add the element and place it in the namespace of the model
WITHOUT_CLASSIFICATION	Tell GEF
WITHOUT_CLASSIFICATION	Suggest that actors may not connect (see JavaDoc comment about this).
WITHOUT_CLASSIFICATION	Everything else is OK
WITHOUT_CLASSIFICATION	Remove a node
WITHOUT_CLASSIFICATION	Remove an edge
WITHOUT_CLASSIFICATION	Something was added - nothing for us to worry about
WITHOUT_CLASSIFICATION	Invoke the parent constructor first
WITHOUT_CLASSIFICATION	Invoke the parent refresh first
WITHOUT_CLASSIFICATION	end class StylePanelFigUseCase
WITHOUT_CLASSIFICATION	initialize any other Figs here
WITHOUT_CLASSIFICATION	Only the head should be filled (not the text)
WITHOUT_CLASSIFICATION	Accumulate a bounding box for all the Figs in the group.
WITHOUT_CLASSIFICATION	name updating
WITHOUT_CLASSIFICATION	Text fig to hold the <<include>> label
WITHOUT_CLASSIFICATION	The <<include>> label. It's not a true stereotype, so don't use the stereotype support
WITHOUT_CLASSIFICATION	TRY SOME ACTION ERRORS
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order
WITHOUT_CLASSIFICATION	Set the drop location in the case of D&D:
WITHOUT_CLASSIFICATION	Check if multiple items are selected:
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	If the element import is in the old owned, it means it must have been removed. Make sure the associated model element is removed.
WITHOUT_CLASSIFICATION	By default we don't show the attribute check box. Mark this object as a listener for the check box.
WITHOUT_CLASSIFICATION	These are the positions of child figs inside this fig They must be added in the constructor in this order. For now the name must not be last as this would force zero width lines (until GEF is fixed)
WITHOUT_CLASSIFICATION	add Figs to the FigNode in back-to-front order Put this rectangle behind the rest, so it goes first
WITHOUT_CLASSIFICATION	Make the line dashed
WITHOUT_CLASSIFICATION	Add an arrow with an open arrow head
WITHOUT_CLASSIFICATION	Make the edge go between nearest points
WITHOUT_CLASSIFICATION	Create a new version of the relevant fig
WITHOUT_CLASSIFICATION	The nodes at the two ends
WITHOUT_CLASSIFICATION	The figs for the two end nodes
WITHOUT_CLASSIFICATION	Link the new include relationship in to the ends
WITHOUT_CLASSIFICATION	Link the new dependency in to the ends
WITHOUT_CLASSIFICATION	Side effect: This creates the fig:
WITHOUT_CLASSIFICATION	A use case has an external separator. External means external to the compartment box. This horizontal line sticks out of the box, and touches the ellipse edge.
WITHOUT_CLASSIFICATION	by default, do not show extension points:
WITHOUT_CLASSIFICATION	Use arbitrary dimensions for now.
WITHOUT_CLASSIFICATION	Get the parent vector first
WITHOUT_CLASSIFICATION	Formula for a is described in the overall class description.
WITHOUT_CLASSIFICATION	For an ellipse, we can put the box in the middle:
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	Make the edge go between nearest points
WITHOUT_CLASSIFICATION	Add menu to add an extension point or note. Placed one before last, so the "Properties" entry is always last.
WITHOUT_CLASSIFICATION	Where there is more than one supplier or client, take the first element in each case. There really ought to be a check that there are some here for safety.
WITHOUT_CLASSIFICATION	Modifier menu. Placed one before last, so the "Properties" entry is always last.
WITHOUT_CLASSIFICATION	Work out the radii of the ellipse, a and b. The top right corner of the ellipse (Cartesian coordinates, centered on the origin) will be at (x,y)
WITHOUT_CLASSIFICATION	Result as integers, rounded up. We ensure that the radii are integers for convenience.
WITHOUT_CLASSIFICATION	Use the code from the FigCircle, not the one from Fig.
WITHOUT_CLASSIFICATION	Let's register for events from all modelelements that change the name or body text:
WITHOUT_CLASSIFICATION	Register for name changes, added extensionPoints and abstract makes the text italic. All Figs need to listen to "remove", too:
WITHOUT_CLASSIFICATION	register for extension points:
WITHOUT_CLASSIFICATION	Set bounds will be called from our superclass constructor before our constructor has run, so make sure this gets set up if needed.
WITHOUT_CLASSIFICATION	Set up FigText to hold the condition.
WITHOUT_CLASSIFICATION	Join all into a group
WITHOUT_CLASSIFICATION	UML spec for Extend doesn't call for name nor stereotype
WITHOUT_CLASSIFICATION	Make sure the line is dashed
WITHOUT_CLASSIFICATION	Set up the property panels for use case diagrams:
WITHOUT_CLASSIFICATION	Actions specific to the use case diagram toolbar
WITHOUT_CLASSIFICATION	The renderer should be a singleton
WITHOUT_CLASSIFICATION	Allow all Packages and Classifiers..
WITHOUT_CLASSIFICATION	TRY THE PREDECESSORS
WITHOUT_CLASSIFICATION	If location is non-null, convert to a rectangle that we can use
WITHOUT_CLASSIFICATION	TODO: This is using the default platform character encoding specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	The <<extend>> label. It's not a true stereotype, so don't use the stereotype support int y = getNameFig().getBounds().height;
WITHOUT_CLASSIFICATION	Place in the middle of the line and ensure the line is dashed. Add an arrow with an open arrow head. Remember that for an extends relationship, the arrow points to the base use case, but because of the way we draw it, that is still the destination end.
WITHOUT_CLASSIFICATION	Let the group recalculate its bounds and then tell GEF we've finished.
WITHOUT_CLASSIFICATION	We accept a Package, but not a Model or a Subsystem.
WITHOUT_CLASSIFICATION	If we do not exclude a Model here, then dropping the Model on a UseCase diagram causes a package to be drawn.
WITHOUT_CLASSIFICATION	empty list
WITHOUT_CLASSIFICATION	private constructor to enforce singleton
WITHOUT_CLASSIFICATION	some convenience methods
WITHOUT_CLASSIFICATION	read until the end section is found, discard generated content
WITHOUT_CLASSIFICATION	Constructor. <p> TODO: Correct? @param nodes The UML elements, typically classifiers, to generate. @param inModel <code>true</code> if the path is in the model.
WITHOUT_CLASSIFICATION	Class Table
WITHOUT_CLASSIFICATION	Select Buttons
WITHOUT_CLASSIFICATION	Output Directory
WITHOUT_CLASSIFICATION	Compile Checkbox
WITHOUT_CLASSIFICATION	TODO: the last argument (recursive flag) should be a selectable option
WITHOUT_CLASSIFICATION	skip backup files. This is actually a workaround for the cpp generator, which always creates backup files (it's a bug).
WITHOUT_CLASSIFICATION	TODO: Should be improved so that it's recognized whether there is something selected that can actually be generated Nothing selected in the diagram
WITHOUT_CLASSIFICATION	TODO: This is using the default platform character encoding. Specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	TODO: Get saved default directory outputDirectoryComboBox.getModel().setSelectedItem(savedDir);
WITHOUT_CLASSIFICATION	TODO: Get default output directory from user settings Project p = ProjectManager.getManager().getCurrentProject(); p.getProjectSettings().setGenerationOutputDir(path);
WITHOUT_CLASSIFICATION	Generate Button --------------------------------------
WITHOUT_CLASSIFICATION	remove trailing /
WITHOUT_CLASSIFICATION	classify nodes by base path
WITHOUT_CLASSIFICATION	else ignore
WITHOUT_CLASSIFICATION	generate the files
WITHOUT_CLASSIFICATION	Doesn't really matter what set we use.
WITHOUT_CLASSIFICATION	Show Filechooser to select OutputDirectory
WITHOUT_CLASSIFICATION	end class ClassGenerationDialog
WITHOUT_CLASSIFICATION	end class TableModelClassChecks
WITHOUT_CLASSIFICATION	Try Changing the direction of m7
WITHOUT_CLASSIFICATION	private constructor to enforce singleton
WITHOUT_CLASSIFICATION	The diagram already exists in this project. Select it as the current target.
WITHOUT_CLASSIFICATION	TableModel implementation
WITHOUT_CLASSIFICATION	ArgoEventPump.fireEvent( new ArgoImporterEvent(ArgoEventTypes.IMPORTER_ADDED, gen));
WITHOUT_CLASSIFICATION	Check if this diagram already exists in the project
WITHOUT_CLASSIFICATION	Otherwise create a new classdiagram for the package.
WITHOUT_CLASSIFICATION	if the classifier is not in the current diagram, add it:
WITHOUT_CLASSIFICATION	The following calls are ORDER DEPENDENT. Not sure why, but the layer add must come before the model add or we'll end up with duplicate figures in the diagram. - tfm
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	the class is in the diagram so we are on a second pass, find the fig for this class can update its visible state.
WITHOUT_CLASSIFICATION	add edges for a 2-pass r.e. process we might have already added the class but not its edges
WITHOUT_CLASSIFICATION	"Java" is the default module for historical reasons, but it's not required to be there
WITHOUT_CLASSIFICATION	the previous line helps, but we better check again:
WITHOUT_CLASSIFICATION	not a SuffixFilter selected, so we take all
WITHOUT_CLASSIFICATION	filter out all unchanged files
WITHOUT_CLASSIFICATION	set the lastModified value
WITHOUT_CLASSIFICATION	return Arrays.copyOf(selectedFiles, selectedFiles.length);
WITHOUT_CLASSIFICATION	iss.setValue(countFiles + (i + 1) / 10);
WITHOUT_CLASSIFICATION	Roughly equivalent to and derived from old Import.doFile()
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.JFileChooser#approveSelection()
WITHOUT_CLASSIFICATION	@see javax.swing.JFileChooser#cancelSelection()
WITHOUT_CLASSIFICATION	New style importers don't create diagrams, so we'll do it based on the list of newElements that they created
WITHOUT_CLASSIFICATION	Do layout even if problems occurred during import
WITHOUT_CLASSIFICATION	Add messages from caught exceptions
WITHOUT_CLASSIFICATION	Select the correct diagram (implicitly creates it)
WITHOUT_CLASSIFICATION	Add the element to the diagram
WITHOUT_CLASSIFICATION	Print an exception trace to a string buffer
WITHOUT_CLASSIFICATION	TODO: Get the list of extended settings from the current language importer and add those too
WITHOUT_CLASSIFICATION	level 0 import detail
WITHOUT_CLASSIFICATION	level 1 import detail
WITHOUT_CLASSIFICATION	level 2 import detail
WITHOUT_CLASSIFICATION	build the configPanel:
WITHOUT_CLASSIFICATION	de-selects the fig minimising & layout if we are not creating diagrams
WITHOUT_CLASSIFICATION	select the level of import 0 - classifiers only 1 - classifiers plus feature specifications 2 - full import, feature detail
WITHOUT_CLASSIFICATION	cp1252 is often the default, but windows-1252 is the name listed by Charset.availableCharsets
WITHOUT_CLASSIFICATION	Get the extension panel for the configuration settings.
WITHOUT_CLASSIFICATION	ExplorerEventAdaptor.getInstance().structureChanged(); ProjectBrowser.getInstance().getStatusBar().showProgress(0);
WITHOUT_CLASSIFICATION	Create chooser for objects we are to import. Old style modules get to provide their own (although I don't believe any of them do), while new style modules get the a chooser provided by us (which matches what the abstract class FileImportSupport used to provide).
WITHOUT_CLASSIFICATION	this is because of the (senseless?) "All files" FileFilter
WITHOUT_CLASSIFICATION	Parsing file x of z.
WITHOUT_CLASSIFICATION	progress bar
WITHOUT_CLASSIFICATION	For some reason, this alleged directory is a single file This could be that there is some confusion or just the normal, that a single file was selected and is supposed to be imported.
WITHOUT_CLASSIFICATION	Get the contents of the directory
WITHOUT_CLASSIFICATION	The following test can cause trouble with links, because links are accepted as directories, even if they link files. Links could also result in infinite loops. For this reason we don't do this traversing recursively.
WITHOUT_CLASSIFICATION	If this file is a directory
WITHOUT_CLASSIFICATION	TODO: Add filename ?
WITHOUT_CLASSIFICATION	can't remove the last file
WITHOUT_CLASSIFICATION	can't remove from existing one so create new one.
WITHOUT_CLASSIFICATION	Error/warning messageArea
WITHOUT_CLASSIFICATION	gbc.gridheight = 10;
WITHOUT_CLASSIFICATION	cancel/close button
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	the introducing label
WITHOUT_CLASSIFICATION	User closing the progress window is interpreted as cancel request
WITHOUT_CLASSIFICATION	panel for controls
WITHOUT_CLASSIFICATION	This method can be called only if there's a valid selection so go ahead and remove whatever's selected.
WITHOUT_CLASSIFICATION	nothings left, disable firing.
WITHOUT_CLASSIFICATION	Select an index.
WITHOUT_CLASSIFICATION	removed item in last position
WITHOUT_CLASSIFICATION	Just quit
WITHOUT_CLASSIFICATION	the text box containing the problem messages
WITHOUT_CLASSIFICATION	continue and abort buttons
WITHOUT_CLASSIFICATION	listeners
WITHOUT_CLASSIFICATION	stores the action command into the UMLPlainTextDocument class which is also used for setProperty and getProperty
WITHOUT_CLASSIFICATION	TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	Add an invisible button to be used when everything is off
WITHOUT_CLASSIFICATION	| removed to workaround problems with autosplit OCLEditor.OPTIONMASK_AUTOSPLIT
WITHOUT_CLASSIFICATION	TabModelTarget interface methods
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Update our model with our saved target
WITHOUT_CLASSIFICATION	There is no need to test if classes is empty because the shouldBeEnabled mechanism blanks out the possibility to choose this alternative in this case.
WITHOUT_CLASSIFICATION	List classes = getCandidates(); return classes.size() > 0;
WITHOUT_CLASSIFICATION	Our first button is invisible. Selecting it deselects all visible buttons.
WITHOUT_CLASSIFICATION	Set editor's model
WITHOUT_CLASSIFICATION	check ocl parsing constraints
WITHOUT_CLASSIFICATION	do not create a constraint:
WITHOUT_CLASSIFICATION	Parse and check specified constraint.
WITHOUT_CLASSIFICATION	Ignored: Highly unlikely, and what would we do anyway? log it
WITHOUT_CLASSIFICATION	Split constraint body, if user wants us to
WITHOUT_CLASSIFICATION	the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	the constraint _must_ be owned by a namespace
WITHOUT_CLASSIFICATION	Store constraint body
WITHOUT_CLASSIFICATION	New constraint, first time setData is called
WITHOUT_CLASSIFICATION	a runtime exception that occurs when some internal test fails
WITHOUT_CLASSIFICATION	Check name for consistency with spec
WITHOUT_CLASSIFICATION	Set name
WITHOUT_CLASSIFICATION	Also set name in constraint body -- Added 03/14/2001
WITHOUT_CLASSIFICATION	replace name
WITHOUT_CLASSIFICATION	OK, so that didn't work out... Just ignore any problems and don't set the name in the constraint body better had log it.
WITHOUT_CLASSIFICATION	TODO: Why is this ignored? - tfm - 20070110
WITHOUT_CLASSIFICATION	TRY PREDECESSORS
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	We have no model event listeners, so no need to do anything
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	TODO: I18N Don't use the empty string for this or it won't show in the list
WITHOUT_CLASSIFICATION	It would be better if we didn't need the container to get the target. This constructor can have zero parameters as soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	TODO: Here too?
WITHOUT_CLASSIFICATION	TODO: Here too?
WITHOUT_CLASSIFICATION	This should not be necessary, but let's be sure:
WITHOUT_CLASSIFICATION	end of interval
WITHOUT_CLASSIFICATION	start of interval
WITHOUT_CLASSIFICATION	Remove old listeners:
WITHOUT_CLASSIFICATION	in middle of interval
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	Add new listeners:
WITHOUT_CLASSIFICATION	MVW: This can never happen, isn't it?
WITHOUT_CLASSIFICATION	makes sure we can select 'none'
WITHOUT_CLASSIFICATION	TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	Object[] args = { newValue };
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalRemoved( Object, int, int)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	if one or the other is null or they are not equal
WITHOUT_CLASSIFICATION	Do not set buildingModel = false here, otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	as long as they aren't both null (or a really rare identical string pointer)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	TODO: this seems to be called at startup only so no check so far
WITHOUT_CLASSIFICATION	may only occur as child of the model or in a package
WITHOUT_CLASSIFICATION	to rupdate the diagram set the stimulus name again TODO: Explain that this really works also in the MDR case. Linus is a sceptic.
WITHOUT_CLASSIFICATION	if event source is unknown or the event source is the container's target then update the field
WITHOUT_CLASSIFICATION	check the possibility that this is a promiscuous event
WITHOUT_CLASSIFICATION	a deployment diagram shows something about the whole model according to the UML spec, but we rely on the caller to enforce that if desired.
WITHOUT_CLASSIFICATION	a deployment diagram shows something about the whole model according to the uml spec
WITHOUT_CLASSIFICATION	For a deployment diagram, not just any namespace will do - we need a package.
WITHOUT_CLASSIFICATION	ns is a namespace, but not a package
WITHOUT_CLASSIFICATION	ommit root package name; it's the model's root
WITHOUT_CLASSIFICATION	there is a selection
WITHOUT_CLASSIFICATION	end class ActionCopy
WITHOUT_CLASSIFICATION	Add a predicate for ArgoUML's default capabilities:
WITHOUT_CLASSIFICATION	Parser.ParseAndUpdate(modelObject, s);
WITHOUT_CLASSIFICATION	remove from the model
WITHOUT_CLASSIFICATION	It is a UML element that is not a ModelElement
WITHOUT_CLASSIFICATION	lets see if this diagram has some figs on it
WITHOUT_CLASSIFICATION	no content of diagram
WITHOUT_CLASSIFICATION	we can delete figs like figrects now too
WITHOUT_CLASSIFICATION	TODO: If a namespace with sub-classdiagrams is deleted, then { confirmStr += Translator.localize( "optionpane.remove-from-model-will-remove-subdiagram"); doAsk = true; }
WITHOUT_CLASSIFICATION	we cannot delete the last diagram
WITHOUT_CLASSIFICATION	we cannot delete the model itself
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#remove(int, int)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	ArgoDiagram activeDiagram = DiagramUtils.getActiveDiagram(); return (activeDiagram instanceof UMLClassDiagram);
WITHOUT_CLASSIFICATION	TODO: Probably really want to cancel editing ((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	usage of other sureRemove method is legacy. They should be integrated.
WITHOUT_CLASSIFICATION	the diagram contains figs so lets ask the user if he/she is sure
WITHOUT_CLASSIFICATION	TODO: This catch block needs to be narrower and do something with the caught exception - tfm 20071120 Ignore
WITHOUT_CLASSIFICATION	TODO: All of the following can be broken if we have multiple targets selected
WITHOUT_CLASSIFICATION	OK Button ------------------------------------------
WITHOUT_CLASSIFICATION	Delete Button
WITHOUT_CLASSIFICATION	confirm with the user that he wants to delete, presenting the list of settings to delete
WITHOUT_CLASSIFICATION	procede with the deletion in the model
WITHOUT_CLASSIFICATION	disable the button since no row will be selected now
WITHOUT_CLASSIFICATION	end class SourcePathDialog
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread-safe
WITHOUT_CLASSIFICATION	The user cancelled!
WITHOUT_CLASSIFICATION	Custom button text:
WITHOUT_CLASSIFICATION	0
WITHOUT_CLASSIFICATION	1
WITHOUT_CLASSIFICATION	2
WITHOUT_CLASSIFICATION	3
WITHOUT_CLASSIFICATION	TRY SOME PREDECESSOR ERRORS
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#remove(int, int)
WITHOUT_CLASSIFICATION	Try adding the extension from the chosen filter.
WITHOUT_CLASSIFICATION	adding project files icon
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	do not use a custom Icon the titles of buttons default button title
WITHOUT_CLASSIFICATION	NOTE: This may be called from a different thread, so we need to be careful of the threading restrictions imposed by AbstractDocument for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	end class ActionOpenProject
WITHOUT_CLASSIFICATION	TODO: see if the new target has a TV that we can proxy
WITHOUT_CLASSIFICATION	Try adding the default extension.
WITHOUT_CLASSIFICATION	LOG.debug("is a Base or Multiplicity");
WITHOUT_CLASSIFICATION	end class ActionSaveProjectAs
WITHOUT_CLASSIFICATION	only need to this from super()
WITHOUT_CLASSIFICATION	--------------------------------------------------------
WITHOUT_CLASSIFICATION	----- setup similar to the super() implementation -----
WITHOUT_CLASSIFICATION	This action performs the layout and triggers a redraw of the editor pane. @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	/ Proxy methods for real UMLModelElementTaggedValue /
WITHOUT_CLASSIFICATION	load of the new project just reuse of the ActionOpen object
WITHOUT_CLASSIFICATION	Rearrange the diagram layout
WITHOUT_CLASSIFICATION	Leave logging commented out by default for efficiency LOG.debug("determine rendering for: " + value); LOG.debug("show icon: " + showIcon);
WITHOUT_CLASSIFICATION	targets ought to be UML objects or diagrams
WITHOUT_CLASSIFICATION	TODO: We shouldn't need this as well as the above.
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	end class TabProps
WITHOUT_CLASSIFICATION	If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	See if there's a pair in this list that match the given model elements
WITHOUT_CLASSIFICATION	@see TargettableModelView#getTargettableModel()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	put everything together
WITHOUT_CLASSIFICATION	no title looks better
WITHOUT_CLASSIFICATION	now remove the ones already applied.
WITHOUT_CLASSIFICATION	make lists
WITHOUT_CLASSIFICATION	make buttons
WITHOUT_CLASSIFICATION	ignored this event
WITHOUT_CLASSIFICATION	make buttons layout
WITHOUT_CLASSIFICATION	make listeners
WITHOUT_CLASSIFICATION	Remove the element from Available List
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#setItem(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getEditorComponent()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Implements the source path controller. NOTE: If requested in the future this could be returned from the language modules. TODO: Update this to use the UML 1.4 TagDefinition mechanism instead of UML 1.3 String type tag types. The TagDefinition can be made more specific so that it just applies to Components with a <<sourceModule>> stereotype or something similar. - tfm @author euluis @since 0.17.1
WITHOUT_CLASSIFICATION	end of SourcePathControllerImpl class definition
WITHOUT_CLASSIFICATION	sb.append(Model.getFacade().getName(c));
WITHOUT_CLASSIFICATION	sb.append((String) Model.getFacade().getBody(c));
WITHOUT_CLASSIFICATION	MModelElement
WITHOUT_CLASSIFICATION	next statement is necessary to update the textfield if the selection is equal to what was allready selected
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#selectAll()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getItem()
WITHOUT_CLASSIFICATION	@see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	necessary to create distance between the textfield and the icon.
WITHOUT_CLASSIFICATION	make new column with LabelledLayout
WITHOUT_CLASSIFICATION	Comment.name text field - editing disabled
WITHOUT_CLASSIFICATION	Comment.body text field - editing disabled
WITHOUT_CLASSIFICATION	Since there are no buttons on this panel, we have to set the size of the buttonpanel, otherwise the title would not be aligned right.
WITHOUT_CLASSIFICATION	Only change the background colour if it is supplied by the LAF. Otherwise leave look and feel to handle this itself.
WITHOUT_CLASSIFICATION	In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	In this case, the bounds are determined by the FigEdge
WITHOUT_CLASSIFICATION	In this case, the bounds (of the box) are determined by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	In this case, the bounds (of the box) are determined by the FigClassAssociationClass
WITHOUT_CLASSIFICATION	A newly created AssociationClass may not have all its parts created by the time we are called
WITHOUT_CLASSIFICATION	A newly created AssociationClass may not have all its parts created by the time we are called
WITHOUT_CLASSIFICATION	TODO: Defer most of this work if the panel isn't visible - tfm
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	how to handle empty target lists? probably the TabProps should only show an empty pane in that case
WITHOUT_CLASSIFICATION	chooser.setSelectedFile(new File(fileName));
WITHOUT_CLASSIFICATION	So, let's do it the hard way:
WITHOUT_CLASSIFICATION	TODO: The following can be used when we drop Java 5 support or when an ImageIO GIF writer plugin is bundled cmd = new SaveGIFAction2(Translator.localize("action.save-gif"));
WITHOUT_CLASSIFICATION	If the diagram is empty, GEF won't write anything, leaving us with an empty (and invalid) file. Handle this case ourselves to prevent this from happening.
WITHOUT_CLASSIFICATION	Anything else is handled the normal way
WITHOUT_CLASSIFICATION	Create an image which will do deferred rendering of the GEF diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	Action to save a diagram as a GIF image in a supplied OutputStream. TODO: This requires Java 6 in its current state, so don't use. @author Tom Morris <tfmorris@gmail.com>
WITHOUT_CLASSIFICATION	NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that saves a copy of the entire image in an internal buffer before starting work, defeating the whole purpose of our incremental rendering.
WITHOUT_CLASSIFICATION	Java SE 6 has a native GIF writer, but it's not in Java 5. One is available in the JAI-ImageIO library, but we don't currently bundle that and at 6+ MB it seems like a heavyweight solution, but I don't have time to produce a stripped down version right now - tfm https:jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	Anything else is handled the normal way
WITHOUT_CLASSIFICATION	Create an image which will do deferred rendering of the GEF diagram on demand as data is pulled from it
WITHOUT_CLASSIFICATION	Action to save a diagram as a GIF image in a supplied OutputStream. TODO: This requires Java 6 in its current state, so don't use. @author Tom Morris <tfmorris@gmail.com>
WITHOUT_CLASSIFICATION	we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	Convert max x/y to width/height
WITHOUT_CLASSIFICATION	Get a DOMImplementation
WITHOUT_CLASSIFICATION	Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	LayerPerspective layer = DiagramUtils.getActiveDiagram().getLayer();
WITHOUT_CLASSIFICATION	we actually are computing max x & max y, not width & height
WITHOUT_CLASSIFICATION	Convert max x/y to width/height
WITHOUT_CLASSIFICATION	Get a DOMImplementation
WITHOUT_CLASSIFICATION	Create an instance of org.w3c.dom.Document
WITHOUT_CLASSIFICATION	Create an instance of the SVG Generator
WITHOUT_CLASSIFICATION	make it stretch vertically
WITHOUT_CLASSIFICATION	"org.argouml.cognitive.critics",
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	handle multivalued tagged value
WITHOUT_CLASSIFICATION	handle multivalued tagged value
WITHOUT_CLASSIFICATION	Target has been deleted
WITHOUT_CLASSIFICATION	If the row is past the end of our current collection, return an empty string so they can add a new value
WITHOUT_CLASSIFICATION	tagValue = true;
WITHOUT_CLASSIFICATION	for debugging
WITHOUT_CLASSIFICATION	Return the ith element from a Collection. @param collection collection to get element from @param index index of the element to be returned @return the object
WITHOUT_CLASSIFICATION	We really shouldn't add it until after it is set up, but we need it to have an owner for the following method calls
WITHOUT_CLASSIFICATION	Since we aren't sure of ordering, fire event for whole table
WITHOUT_CLASSIFICATION	no way, we have to give up
WITHOUT_CLASSIFICATION	Do nothing during the deprecation period, then it can be removed.
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#contains(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#addElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireContentsChanged( Object, int, int)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	get the first editable extent (which is OK unless there is more than one editable extent)
WITHOUT_CLASSIFICATION	This can throw an exception if the target has been deleted. We don't want to try locking the repository because this is called from the event delivery thread and could cause a deadlock. Instead catch the exception and leave the model empty.
WITHOUT_CLASSIFICATION	end class ActionImportFromSources
WITHOUT_CLASSIFICATION	Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	this is never downlighted...
WITHOUT_CLASSIFICATION	Only specified format are allowed.
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentMoved(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentResized(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Guaranteed to return a non-null array
WITHOUT_CLASSIFICATION	Add stereotypes submenu
WITHOUT_CLASSIFICATION	Set up the target and its model element variant.
WITHOUT_CLASSIFICATION	Set the tooltip of the arrow to open combined tools:
WITHOUT_CLASSIFICATION	If the target has changed notify the third party listener if it exists and dispatch a new element event listener to ourself. Otherwise dispatch a target reasserted to ourself.
WITHOUT_CLASSIFICATION	Set the minimum and preferred equal, so that the size is fixed for the labelledlayout.
WITHOUT_CLASSIFICATION	This will add a new ModelElement event listener after update is complete
WITHOUT_CLASSIFICATION	We presume that the container equals this PropPanel.
WITHOUT_CLASSIFICATION	Refresh the target for all our children which weren't getting while not visible
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	This works - we do get an event - and now refresh the UI:
WITHOUT_CLASSIFICATION	to manage the case there are no label/component pairs but just one component
WITHOUT_CLASSIFICATION	If the component is a JLabel which has another component assigned then position/size the label and calculate the size of the registered component
WITHOUT_CLASSIFICATION	Assumes the next child is the labelled component
WITHOUT_CLASSIFICATION	Make sure the component width isn't any greater than its maximum allowed width
WITHOUT_CLASSIFICATION	If the child component is resizable then we don't know it's actual size yet. It will be calculated later as a proportion of the available left over space. For now this is flagged as zero.
WITHOUT_CLASSIFICATION	If a preferred height is not given or is the same as the minimum height then fix the height of this row.
WITHOUT_CLASSIFICATION	Project p = ProjectManager.getManager().getCurrentProject(); Collection elems = ModelManagementHelper.getHelper() .getAllModelElementsOfKind(MClassifier.class);
WITHOUT_CLASSIFICATION	Expressions are DataTypes, not independent model elements be careful not to reuse them
WITHOUT_CLASSIFICATION	Allow listening to other elements: removeOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	setDoubleBuffered(true);
WITHOUT_CLASSIFICATION	TRY SOME MORE COMPLEX MOVING
WITHOUT_CLASSIFICATION	Implements backspace functionality
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	there is a selection
WITHOUT_CLASSIFICATION	This can throw an exception if the target has been deleted. We don't want to try locking the repository because this is called from the event delivery thread and could cause a deadlock. Instead catch the exception and leave the model empty.
WITHOUT_CLASSIFICATION	Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	end class ActionCut
WITHOUT_CLASSIFICATION	Allow listening to other elements: addOtherModelEventListeners(listTarget);
WITHOUT_CLASSIFICATION	if there is a selection on the clipboard
WITHOUT_CLASSIFICATION	get localised strings once only
WITHOUT_CLASSIFICATION	setting the icon
WITHOUT_CLASSIFICATION	setting the tooltip to type and name
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentShown(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Update our model with our saved target
WITHOUT_CLASSIFICATION	Stop updating model when we're not visible
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	in UML2, a td is a property of a stereotype in a profile
WITHOUT_CLASSIFICATION	Only update our model if we're visible
WITHOUT_CLASSIFICATION	Most likely cause of this is that someone deleted our target with the event pump turned off so we didn't get notification. Nothing we can do about it now and we are changing targets anyway, so just log it.
WITHOUT_CLASSIFICATION	This target is a statemachine, for which no diagram exists yet, so, let's use it.
WITHOUT_CLASSIFICATION	end class TabTaggedValues
WITHOUT_CLASSIFICATION	setEnabled((Globals.clipBoard != null && !Globals.clipBoard.isEmpty()) || !isSystemClipBoardEmpty());
WITHOUT_CLASSIFICATION	end class ActionPaste
WITHOUT_CLASSIFICATION	The target is a valid context.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Let's just build a Statemachine, and put it in a suitable namespace.
WITHOUT_CLASSIFICATION	Follow well-formedness rule for a Class [2]. Determine the owning namespace for the statemachine:
WITHOUT_CLASSIFICATION	upperPanel.setBorder(BorderFactory.createEtchedBorder());
WITHOUT_CLASSIFICATION	buttonBox.add(Box.createRigidArea(new Dimension(0, 20)));
WITHOUT_CLASSIFICATION	String title = getUI().getDialogTitle(this);
WITHOUT_CLASSIFICATION	Test if the given namespace is a valid namespace to add the diagram to. TODO: This method was created to facilitate the merge of this class with ActionAddDiagram. @param ns the namespace to check @return Returns <code>true</code> if valid.
WITHOUT_CLASSIFICATION	TODO: Since there may be multiple top level elements in a project, this should be using the default Namespace (currently undefined) or something similar
WITHOUT_CLASSIFICATION	button action:
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	select.setText(Translator.localize("action.select"));
WITHOUT_CLASSIFICATION	select.add(ActionAddEventAsDeferrableEvent.SINGLETON);
WITHOUT_CLASSIFICATION	newMenu.setText(Translator.localize("action.new"));
WITHOUT_CLASSIFICATION	(MExtend)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	repair action for possible NP after load
WITHOUT_CLASSIFICATION	(MClassifier)
WITHOUT_CLASSIFICATION	TRY SOME MORE ERRORS
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	(MModelElement)
WITHOUT_CLASSIFICATION	to be able to remove dep's later
WITHOUT_CLASSIFICATION	to be able to remove dependencies later
WITHOUT_CLASSIFICATION	ADDONLY_COMMAND determines a changeability kind. TODO: Removed from UML 2.x. Phase out of UI - tfm - 20070529
WITHOUT_CLASSIFICATION	TODO: Removed from UML 2.x - phase out usage - tfm 20070530
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	because we're listening for stereotypes being added and removed but we're really interested in their owned tag definitions, the default implementation won't work for us
WITHOUT_CLASSIFICATION	end class ActionAddAttribute
WITHOUT_CLASSIFICATION	Ask to be notified of any changes to TagDefinitions so that we can track new ones, name changes, etc
WITHOUT_CLASSIFICATION	since UML2 it's easier: TDs only via stereotypes
WITHOUT_CLASSIFICATION	Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	A stereotype got applied or removed Just mark for rebuild next time since we use lazy loading
WITHOUT_CLASSIFICATION	@see Namespace#pushNamespaceElement(NamespaceElement)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Dialog#nameButtons()
WITHOUT_CLASSIFICATION	All strings collate before all UML elements
WITHOUT_CLASSIFICATION	All strings collate before all UML elements
WITHOUT_CLASSIFICATION	Compare path of two elements in reverse order (inner to outer) using a primary strength text collator. This will collate e, E, �, � together, but not eliminate non-identical strings which collate in the same place. @return equivalent of list1.compareTo(list2)
WITHOUT_CLASSIFICATION	and then by their enclosing path to fully distinguish them
WITHOUT_CLASSIFICATION	Elements are collated first by name hoping for a quick solution
WITHOUT_CLASSIFICATION	Keep track of first non-equal comparison to use in case the case-insensitive comparisons all end up equal
WITHOUT_CLASSIFICATION	Add the action to the component
WITHOUT_CLASSIFICATION	It's illegal in UML to have multiple elements in a namespace with the same name, but if it happens, keep them distinct so the user has a chance of catching the error. Pick an arbitrary, but stable, collating order. We don't call them equal because otherwise one will get eliminated from the TreeSet where this comparator is used.
WITHOUT_CLASSIFICATION	If the strings differed only in non-primary characteristics at some point (case, accent, etc) pick an arbitrary, but stable, collating order.
WITHOUT_CLASSIFICATION	{transient=false, volatile=false}
WITHOUT_CLASSIFICATION	Argo customization
WITHOUT_CLASSIFICATION	prohibit instantiation
WITHOUT_CLASSIFICATION	KeyEvent.isActionKey() method
WITHOUT_CLASSIFICATION	Apparently this object had no getItemUID
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	Apparently this object had no getUUID
WITHOUT_CLASSIFICATION	Apparently it had a getItemUID, but we're not allowed to call it
WITHOUT_CLASSIFICATION	Apparently it had a getItemUID, but we're not allowed to call it
WITHOUT_CLASSIFICATION	Apparently it had a getItemUID, but we're not allowed to call it
WITHOUT_CLASSIFICATION	Apparently this object had no setItemUID
WITHOUT_CLASSIFICATION	Apparently it had a setItemUID, but we're not allowed to call it
WITHOUT_CLASSIFICATION	Apparently it had a setItemUID, but we're not allowed to call it
WITHOUT_CLASSIFICATION	class preloading, so packages are there...
WITHOUT_CLASSIFICATION	...getPackage() can return null's, so we have to cater for this:
WITHOUT_CLASSIFICATION	make this thread interruptible, if called from SwingWorker
WITHOUT_CLASSIFICATION	Switch the value back off, so that we will get notified again next time.
WITHOUT_CLASSIFICATION	Ignore any nested exceptions. We don't want infinite loop.
WITHOUT_CLASSIFICATION	Didn't work.
WITHOUT_CLASSIFICATION	Create a proxy object around this handler that can be reflectively added as an Apple ApplicationListener
WITHOUT_CLASSIFICATION	Likely a NoSuchMethodException or an IllegalAccessException loading/invoking eawt.Application methods
WITHOUT_CLASSIFICATION	All of the ApplicationListener methods are void; return null regardless of what happens
WITHOUT_CLASSIFICATION	If the target method returns a boolean, use that as a hint
WITHOUT_CLASSIFICATION	For eclipse setup
WITHOUT_CLASSIFICATION	For ant setup
WITHOUT_CLASSIFICATION	When running from maven
WITHOUT_CLASSIFICATION	If we're setting a handler, enable the About menu item by calling com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	If we're setting a handler, enable the Preferences menu item by calling com.apple.eawt.Application reflectively
WITHOUT_CLASSIFICATION	Override OSXAdapter.callTarget to send information on the file to be opened
WITHOUT_CLASSIFICATION	Ignore if the directory does not exist. This error will throw when running from the ant setup.
WITHOUT_CLASSIFICATION	Ignore if the directory does not exist. This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	Ignore if the directory does not exist. This error will throw when running from the Eclipse setup.
WITHOUT_CLASSIFICATION	"org.argouml.notation.providers",fails because sub-packages fail (?) "org.argouml.notation.providers.java", "org.argouml.notation.providers.uml", "org.argouml.notation",fails because sub-packages fail (?) "org.argouml.notation.ui",
WITHOUT_CLASSIFICATION	There was a comment saying that the below has no cycles, but Classycle thinks there's a cycle here too, so I believe there really is one - tfm 20070702 "org.argouml.uml.cognitive.critics",
WITHOUT_CLASSIFICATION	TODO:{"org.argouml.ui", "org.argouml.cognitive.ui"},fails due to subpackages TODO:{"org.argouml.cognitive", "org.argouml.cognitive.critics"},
WITHOUT_CLASSIFICATION	{"org.argouml.kernel", "org.argouml.uml.diagram.ui"},why does this fail?
WITHOUT_CLASSIFICATION	do nothing by design
WITHOUT_CLASSIFICATION	These 3 steps are only needed for the 2 cases indicated with a X below.
WITHOUT_CLASSIFICATION	Obey the contract ourselves!
WITHOUT_CLASSIFICATION	register all of the event listener trackers
WITHOUT_CLASSIFICATION	remove all of the listeners
WITHOUT_CLASSIFICATION	fire all of the diagram events
WITHOUT_CLASSIFICATION	fire all of the generator events
WITHOUT_CLASSIFICATION	fire all of the help events
WITHOUT_CLASSIFICATION	fire all of the notation events
WITHOUT_CLASSIFICATION	verify all events were fired correctly
WITHOUT_CLASSIFICATION	keep track of total events fired
WITHOUT_CLASSIFICATION	keep track of which events fired
WITHOUT_CLASSIFICATION	X X
WITHOUT_CLASSIFICATION	initialize the event listener trackers which verify that all of the proper events were fired
WITHOUT_CLASSIFICATION	Display events are fired on the Swing event thread. We need to wait for them to be dispatched NOTE: if more display events are added to this test, this one needs to be last
WITHOUT_CLASSIFICATION	Notation events are fired on the Swing event thread. We assume that serializing on the final call is sufficient
WITHOUT_CLASSIFICATION	counts each bit that has been fired
WITHOUT_CLASSIFICATION	ResolvedCritic(String, List)
WITHOUT_CLASSIFICATION	ResolvedCritic(Critic, ListSet)
WITHOUT_CLASSIFICATION	ResolvedCritic(Critic, ListSet, boolean)
WITHOUT_CLASSIFICATION	testmc should now have an ItemUID so we should be able to create without adding a new ItemUID
WITHOUT_CLASSIFICATION	EnabledCM isRelevant checks if the critic is enabled initialize this to true to verify isRelevant returns true
WITHOUT_CLASSIFICATION	verify isRelevant returns true
WITHOUT_CLASSIFICATION	set enabled to false and check the opposite condition
WITHOUT_CLASSIFICATION	verify isRelevant not is false
WITHOUT_CLASSIFICATION	NotSnoozedCM isRelevant checks if the critic is snoozed snooze the critic to verify isRelevant returns false
WITHOUT_CLASSIFICATION	unsnooze the critic to verify the critic is not relevant
WITHOUT_CLASSIFICATION	verify isRelevant is true
WITHOUT_CLASSIFICATION	CurDecisionCM isRelevant checks to see if the critic has any decisions that have a priority > 0 and less than the priority of the critic. By default the critic has no decisions so isRelevant should return false.
WITHOUT_CLASSIFICATION	verify isRelevant is still false
WITHOUT_CLASSIFICATION	isRelevant should now be true
WITHOUT_CLASSIFICATION	isRelevant should still be true
WITHOUT_CLASSIFICATION	initialize test data
WITHOUT_CLASSIFICATION	initialize the ToDoList
WITHOUT_CLASSIFICATION	add a ToDoItem
WITHOUT_CLASSIFICATION	redundantly add item again which should be ignored
WITHOUT_CLASSIFICATION	size should be 1 since addition of second item would have been ignored
WITHOUT_CLASSIFICATION	retrieve item
WITHOUT_CLASSIFICATION	remove item
WITHOUT_CLASSIFICATION	size should be 0 since item was removed
WITHOUT_CLASSIFICATION	initialize the GoalModel
WITHOUT_CLASSIFICATION	check that the model was initialized with the unspecified goal
WITHOUT_CLASSIFICATION	change priority of unspecified goal so we can verify it was updated
WITHOUT_CLASSIFICATION	first verify that the set goal priority did not add an extra goal
WITHOUT_CLASSIFICATION	check that the model correctly updates a goal's priority
WITHOUT_CLASSIFICATION	test the removal of a goal
WITHOUT_CLASSIFICATION	number of goals should now be 0
WITHOUT_CLASSIFICATION	start desiring a goal which should add a goal and bump the size to 1
WITHOUT_CLASSIFICATION	number of goals should now be 1
WITHOUT_CLASSIFICATION	stop desiring the goal which should remove it from the model
WITHOUT_CLASSIFICATION	UMLSequenceDiagram seqdiag = new UMLSequenceDiagram();
WITHOUT_CLASSIFICATION	initialize test data
WITHOUT_CLASSIFICATION	This test calls ToDoList.addElement which requires the Model. We are able to get away with using the Mock model.
WITHOUT_CLASSIFICATION	checkAssignIDToObject(seqdiag, true, true);
WITHOUT_CLASSIFICATION	FigEdgeNote has no UUID
WITHOUT_CLASSIFICATION	checkAssignIDToObject(figassociationrole, true, true);
WITHOUT_CLASSIFICATION	checkAssignIDToObject(fighistorystate, true, true);
WITHOUT_CLASSIFICATION	checkAssignIDToObject(figstate, true, true);
WITHOUT_CLASSIFICATION	initialize basic parameters that are different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	initialize a decision object with parameters
WITHOUT_CLASSIFICATION	initialize a decision object with parameters
WITHOUT_CLASSIFICATION	verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	set the priority to a different value
WITHOUT_CLASSIFICATION	set the priority to a different value
WITHOUT_CLASSIFICATION	verify the priority was correctly updated
WITHOUT_CLASSIFICATION	verify the priority was correctly updated
WITHOUT_CLASSIFICATION	set the name to a different value
WITHOUT_CLASSIFICATION	set the name to a different value
WITHOUT_CLASSIFICATION	verify the name property was correctly updated
WITHOUT_CLASSIFICATION	following the update the priority should be equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	test that properties were correctly initialized by the constructor
WITHOUT_CLASSIFICATION	initialize the Checklist
WITHOUT_CLASSIFICATION	add some test data
WITHOUT_CLASSIFICATION	add some test data
WITHOUT_CLASSIFICATION	verify the size of the list
WITHOUT_CLASSIFICATION	verify the size of the list
WITHOUT_CLASSIFICATION	verify the items were correctly added
WITHOUT_CLASSIFICATION	verify the items were correctly added
WITHOUT_CLASSIFICATION	test that the category and description are correct
WITHOUT_CLASSIFICATION	create a new list to test the addAll
WITHOUT_CLASSIFICATION	create a new list to test the addAll
WITHOUT_CLASSIFICATION	add all of the test items from the first list
WITHOUT_CLASSIFICATION	add all of the test items from the first list
WITHOUT_CLASSIFICATION	verify the size of the new list
WITHOUT_CLASSIFICATION	verify the size of the new list
WITHOUT_CLASSIFICATION	initialize the ChecklistStatus
WITHOUT_CLASSIFICATION	Construct a CheckItem
WITHOUT_CLASSIFICATION	(1) test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	reset the values to something different
WITHOUT_CLASSIFICATION	(2) Construct another CheckItem
WITHOUT_CLASSIFICATION	test that the properties were correctly initialized
WITHOUT_CLASSIFICATION	verify that the equivalence test works
WITHOUT_CLASSIFICATION	initialize SnoozeOrder
WITHOUT_CLASSIFICATION	snooze and verify its been enabled
WITHOUT_CLASSIFICATION	unsnooze and verify its been disabled
WITHOUT_CLASSIFICATION	maybe next test is going to change in future
WITHOUT_CLASSIFICATION	test with a class in a package
WITHOUT_CLASSIFICATION	Let's make it a bit more difficult by setting the target:
WITHOUT_CLASSIFICATION	test with a class and an inner class
WITHOUT_CLASSIFICATION	test with a class and an inner class
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	try with Statediagram
WITHOUT_CLASSIFICATION	try with Statediagram
WITHOUT_CLASSIFICATION	try with Statediagram
WITHOUT_CLASSIFICATION	try with Statediagram
WITHOUT_CLASSIFICATION	Put the statemachine in the namespace of the class:
WITHOUT_CLASSIFICATION	test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	test with a package and a class and activity diagram
WITHOUT_CLASSIFICATION	build the Activity Diagram
WITHOUT_CLASSIFICATION	build the Activity Diagram
WITHOUT_CLASSIFICATION	In the next line, replacing makeEmptyProject by getCurrentProject fails the test, except when run in Eclipse. MVW: I have no idea why.
WITHOUT_CLASSIFICATION	We no longer send individual events, so next code is obsolete:
WITHOUT_CLASSIFICATION	We initialised Java Notation, so let's activate it:
WITHOUT_CLASSIFICATION	Needed for initialisations:
WITHOUT_CLASSIFICATION	set MetaProfile as a default profile
WITHOUT_CLASSIFICATION	create a dependency from the project's model to the MetaProfile
WITHOUT_CLASSIFICATION	remove the MetaProfile from the project's profile configuration
WITHOUT_CLASSIFICATION	save the project into a new file
WITHOUT_CLASSIFICATION	setup a user defined profile
WITHOUT_CLASSIFICATION	TRY GUARD/ITERATOR SYNTAX
WITHOUT_CLASSIFICATION	create a new project and assert that it has the MetaProfile as part of the project's profile configuration
WITHOUT_CLASSIFICATION	assert that the project's model element that had a dependency to the MetaProfile doesn't get inconsistent
WITHOUT_CLASSIFICATION	reopen the project and assert that the MetaProfile isn't part of the profile configuration, including the fact that the stereotype <<Critic>> isn't found
WITHOUT_CLASSIFICATION	assert that the project's model elements that had a dependency to the UML profile for Java are consistent
WITHOUT_CLASSIFICATION	add it to the project configuration
WITHOUT_CLASSIFICATION	add it to the project configuration
WITHOUT_CLASSIFICATION	create a dependency between the project's model and the user defined profile
WITHOUT_CLASSIFICATION	create a dependency between the project's model and the user defined profile
WITHOUT_CLASSIFICATION	save the project
WITHOUT_CLASSIFICATION	save the project
WITHOUT_CLASSIFICATION	load the project
WITHOUT_CLASSIFICATION	assert that the model element that depends on the profile is consistent
WITHOUT_CLASSIFICATION	remove the user defined profile and the directory where it is
WITHOUT_CLASSIFICATION	Success - expected exception
WITHOUT_CLASSIFICATION	Clean up after ourselves by deleting profile model
WITHOUT_CLASSIFICATION	Test both forms of addBaseClass
WITHOUT_CLASSIFICATION	Test remaining form of removeBaseClass
WITHOUT_CLASSIFICATION	by default the build already builds one default EP
WITHOUT_CLASSIFICATION	$JUnit-BEGIN$
WITHOUT_CLASSIFICATION	$JUnit-END$
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Flag to enable performance testing - off by default
WITHOUT_CLASSIFICATION	initialize the model and profile subsystems to simulate a fresh ArgoUML session
WITHOUT_CLASSIFICATION	20 sec.
WITHOUT_CLASSIFICATION	Add one child.
WITHOUT_CLASSIFICATION	Performance testing parameters
WITHOUT_CLASSIFICATION	Add grandchild.
WITHOUT_CLASSIFICATION	Create a generalizable element with an element without children.
WITHOUT_CLASSIFICATION	Check periodically to see if we've exceeded time limit
WITHOUT_CLASSIFICATION	Add another child.
WITHOUT_CLASSIFICATION	Tree is created depth first, so this should be at the bottom
WITHOUT_CLASSIFICATION	Try changing namespace of element and make sure results track
WITHOUT_CLASSIFICATION	Populate our namespace hierarchy to the requested depth. Total number of created elements is children^maxLevel, so be careful not to increase parameters too much.
WITHOUT_CLASSIFICATION	TRY SOME GUARD/ITERATOR ERRORS
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#TestCase(String)
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Make sure we have a root model for TagDefinitions to get put in.
WITHOUT_CLASSIFICATION	create the tree of objects
WITHOUT_CLASSIFICATION	copy package p1 into p2 package
WITHOUT_CLASSIFICATION	change the structure in p1 package
WITHOUT_CLASSIFICATION	verify the copied package
WITHOUT_CLASSIFICATION	verify the copied class
WITHOUT_CLASSIFICATION	verify the copied nested package and the copied interface
WITHOUT_CLASSIFICATION	verify the copied attribute
WITHOUT_CLASSIFICATION	See if we can copy a class right off
WITHOUT_CLASSIFICATION	Change things
WITHOUT_CLASSIFICATION	Change things
WITHOUT_CLASSIFICATION	Change things
WITHOUT_CLASSIFICATION	Change things
WITHOUT_CLASSIFICATION	Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	See if the other copy was just a lucky shot
WITHOUT_CLASSIFICATION	See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	See if two copies look like copies of eachother
WITHOUT_CLASSIFICATION	See if we can copy a datatype right off
WITHOUT_CLASSIFICATION	See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	See if two copies look like copies of each other
WITHOUT_CLASSIFICATION	See if we can copy an interface right off
WITHOUT_CLASSIFICATION	Create a new tagged value with the given type and value and add it to a ModelElement.
WITHOUT_CLASSIFICATION	Update an existing tagged value on a model element.
WITHOUT_CLASSIFICATION	See if we can copy a package right off
WITHOUT_CLASSIFICATION	See if we can copy a stereotype right off
WITHOUT_CLASSIFICATION	Expected
WITHOUT_CLASSIFICATION	"Permission",
WITHOUT_CLASSIFICATION	Check to see if association still exists
WITHOUT_CLASSIFICATION	Expected IllegalArgumentException seen
WITHOUT_CLASSIFICATION	A parameterized class can only be the client of a single binding
WITHOUT_CLASSIFICATION	exception expected - test success
WITHOUT_CLASSIFICATION	expected - test success
WITHOUT_CLASSIFICATION	expected - test success
WITHOUT_CLASSIFICATION	Create a new arg list with a different set of args (but same types)
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	not static
WITHOUT_CLASSIFICATION	Test passed
WITHOUT_CLASSIFICATION	Test passed
WITHOUT_CLASSIFICATION	NOT UML1.4
WITHOUT_CLASSIFICATION	non existent in UML1
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	not in UML1.4
WITHOUT_CLASSIFICATION	This is not a well formed model in a strict sense. See the multiplicity in UML 1.3 Figure 2-5.
WITHOUT_CLASSIFICATION	returns List
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Deleting the stereotype should cascade to the TagDefinition, then the TaggedValue
WITHOUT_CLASSIFICATION	TODO: constraints TODO: required tags
WITHOUT_CLASSIFICATION	Enumerate declaring class
WITHOUT_CLASSIFICATION	NOTE: Although it's not shown in the UML 1.4 spec, a TemplateArgument appears to be a datavalue (like MultiplicityRange) and can not be reused in multiple instances. The UML diagrams don't show it as a composition, but it effectively is.
WITHOUT_CLASSIFICATION	Must be called after setImplementation.
WITHOUT_CLASSIFICATION	Enumerate fields
WITHOUT_CLASSIFICATION	Enumerate constructors
WITHOUT_CLASSIFICATION	Indicate that the test was validated
WITHOUT_CLASSIFICATION	TODO: Look up class in truth table
WITHOUT_CLASSIFICATION	Check superclass. Make sure this class does not extend or reference non-ArgoUML classes
WITHOUT_CLASSIFICATION	Enumerate methods Enumerate method arguments
WITHOUT_CLASSIFICATION	Not currently present as token in Model.getFacade(). NIF: runTruthTest(Model.getFacade().isAElement(o), Model.getFacade().ELEMENT); NIF: runTruthTest(Model.getFacade().isAExpression(o), Model.getFacade().EXPRESSION); NIF: runTruthTest(Model.getFacade().isAExtensionPoint(o), Model.getFacade().EXTENSION_POINT); NIF: runTruthTest(Model.getFacade().isAFeature(o), Model.getFacade().FEATURE);
WITHOUT_CLASSIFICATION	NIF: runTruthTest(Model.getFacade().isAInteraction(o), Model.getFacade().INTERACTION);
WITHOUT_CLASSIFICATION	NIF: unTruthTest(Model.getFacade().isAMethod(o), Model.getMetaTypes().getMethod());
WITHOUT_CLASSIFICATION	runTruthTest(Model.getFacade().isARelationship(o), Model.getMetaTypes().getRelationship());
WITHOUT_CLASSIFICATION	NIF: runTruthTest(Model.getFacade().isAStructuralFeature(o), Model.getMetaTypes().getStructuralFeature()); NIF: runTruthTest(Model.getFacade().isATaggedValue(o), Model.getMetaTypes().getTaggedValue());
WITHOUT_CLASSIFICATION	Call methods that exists for all objects and that always return something meaningful
WITHOUT_CLASSIFICATION	Call methods that exists for all objects and that always return something meaningful
WITHOUT_CLASSIFICATION	Multiplicity, MultiplicityRange, and all Expression subtypes don't have 0-argument create methods, so we special case them.
WITHOUT_CLASSIFICATION	Find the create method in the offical API
WITHOUT_CLASSIFICATION	Now get the factory implementation method to be invoked
WITHOUT_CLASSIFICATION	Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	Here it is another object sent to the test.
WITHOUT_CLASSIFICATION	abstract
WITHOUT_CLASSIFICATION	abstract
WITHOUT_CLASSIFICATION	abstract
WITHOUT_CLASSIFICATION	Make sure we start off clean
WITHOUT_CLASSIFICATION	Delete the model and make sure everything inside goes with it
WITHOUT_CLASSIFICATION	The association should have same namespace as from class
WITHOUT_CLASSIFICATION	Only one end should be navigable
WITHOUT_CLASSIFICATION	"UseCaseInstance", Gone in UML 2.x & unused by ArgoUML
WITHOUT_CLASSIFICATION	Set namespace so buildAssocationRole works
WITHOUT_CLASSIFICATION	Correct Exception was thrown.
WITHOUT_CLASSIFICATION	Correct Exception was thrown.
WITHOUT_CLASSIFICATION	Correct Exception was thrown.
WITHOUT_CLASSIFICATION	Correct Exception was thrown.
WITHOUT_CLASSIFICATION	Build an activity graph with a single action state the way the GUI would
WITHOUT_CLASSIFICATION	This is a private method in Model.
WITHOUT_CLASSIFICATION	Handling methods that doesn't return
WITHOUT_CLASSIFICATION	Handling the isInitiated method
WITHOUT_CLASSIFICATION	Handling the initialise method
WITHOUT_CLASSIFICATION	Handle methods which return opaque objects
WITHOUT_CLASSIFICATION	one of the expected errors, just ignore
WITHOUT_CLASSIFICATION	Could not find model.
WITHOUT_CLASSIFICATION	Could not find model.
WITHOUT_CLASSIFICATION	Handle UML 1.4 metamodel which is a MOF 1.3 model
WITHOUT_CLASSIFICATION	Get a node's name along with the name of its parent (which we'll use to find the factory to create it with.
WITHOUT_CLASSIFICATION	UML 1.4
WITHOUT_CLASSIFICATION	UML 2.x
WITHOUT_CLASSIFICATION	XMI 2.1
WITHOUT_CLASSIFICATION	XMI 1.1
WITHOUT_CLASSIFICATION	Remap specific classes
WITHOUT_CLASSIFICATION	Only remap package if we didn't remap specific class
WITHOUT_CLASSIFICATION	The following UML 1.4 elements have been removed from UML 2.x, so we don't bother testing them.
WITHOUT_CLASSIFICATION	A few of our factories are slightly different than as declared in the UML 1.4 metamodel, so we remap them here. <metamodel, argouml>
WITHOUT_CLASSIFICATION	Packages to be remapped
WITHOUT_CLASSIFICATION	For those things which we've already migrated to UML 2.x syntax we need to map them back to their UML 1.4 equivalents during the migration period.
WITHOUT_CLASSIFICATION	Subsystem has been removed from UML 2.x
WITHOUT_CLASSIFICATION	TRY THE ACTIONS
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	abstract
WITHOUT_CLASSIFICATION	abstract
WITHOUT_CLASSIFICATION	This is the XMI version used to encode the metamodel. We could parse deeper to pull out the actual UML version. The UML 1.4 version is at XMI/XMI.header/XMI.model[@xmi.version]. The UML 2.1.1 metamodel doesn't actually seem to contain its version.
WITHOUT_CLASSIFICATION	Because UML 1.4 & 2.1 metamodels are organized differently we need to traverse the hierarchy looking for our owning Package.
WITHOUT_CLASSIFICATION	Specific classes to be remapped remap.put("", "");
WITHOUT_CLASSIFICATION	Go the other way to lookup an element by path
WITHOUT_CLASSIFICATION	...
WITHOUT_CLASSIFICATION	...
WITHOUT_CLASSIFICATION	...
WITHOUT_CLASSIFICATION	ActivityGraphs
WITHOUT_CLASSIFICATION	Instance (in UML 1.4) and Classifier are abstract and not tested
WITHOUT_CLASSIFICATION	Extend, Include, UseCaseInstance & ExtensionPoint not implemented
WITHOUT_CLASSIFICATION	assertNotNull(Model.getUmlFactory().buildNode( Model.getMetaTypes().getExtend())); assertNotNull(Model.getUmlFactory().buildNode( Model.getMetaTypes().getInclude())); assertNotNull(Model.getUmlFactory().buildNode( Model.getMetaTypes().getUseCaseInstance())); assertNotNull(Model.getUmlFactory().buildNode( Model.getMetaTypes().getExtensionPoint())); ...
WITHOUT_CLASSIFICATION	State is concrete in UML 1.3, but becomes abstract in UML 1.4, so we never allow it to be created (and don't test creation)
WITHOUT_CLASSIFICATION	new InitProfileSubsystem().init();
WITHOUT_CLASSIFICATION	This should work now that they both have names
WITHOUT_CLASSIFICATION	this call could easily fall if there is e.g. no public default constructor. If it fails tweak the if/else tree above to accommodate the parameter or check if we need to test the particular method at all.
WITHOUT_CLASSIFICATION	If method not supported ignore failure
WITHOUT_CLASSIFICATION	Fine!
WITHOUT_CLASSIFICATION	Fine!
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	assertNotNull(Model.getUmlFactory().buildNode( Model.getMetaTypes().getState()));
WITHOUT_CLASSIFICATION	CommonBehaviorFactory DataTypesFactory ExtensionMechanismsFactory ModelManagementFactory
WITHOUT_CLASSIFICATION	set up all parameters. Some methods are invoked with primitives or collections, so we need to create them accordingly
WITHOUT_CLASSIFICATION	The following should fail
WITHOUT_CLASSIFICATION	and leave things unchanged
WITHOUT_CLASSIFICATION	This one should work except Java is not registered by default assertTrue(settings.setNotationLanguage("Java")); assertEquals("Java", settings.getNotationLanguage());
WITHOUT_CLASSIFICATION	NotationProviderFactory2.getInstance().addNotationProvider(1234, name, MyNP.class); NotationProvider notationProvider = NotationProviderFactory2.getInstance().getNotationProvider( 1234, new Object()); assertTrue("Test notation provider for 1234 not found", notationProvider != null);
WITHOUT_CLASSIFICATION	Constructor.
WITHOUT_CLASSIFICATION	Constructor. @param me an Object
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	reuse signal event:
WITHOUT_CLASSIFICATION	reuse call event:
WITHOUT_CLASSIFICATION	reuse time event:
WITHOUT_CLASSIFICATION	reuse change event:
WITHOUT_CLASSIFICATION	try creating a string from the generated modelelements:
WITHOUT_CLASSIFICATION	try creating a TimeEvent
WITHOUT_CLASSIFICATION	try changing the triggertype to ChangeEvent
WITHOUT_CLASSIFICATION	nested class:
WITHOUT_CLASSIFICATION	nested class:
WITHOUT_CLASSIFICATION	No need to check any further if we fail the 1st part.
WITHOUT_CLASSIFICATION	START TESTING STUFF
WITHOUT_CLASSIFICATION	TRY MOVING IN A SIMPLE MANER
WITHOUT_CLASSIFICATION	TRY SOME ERRORS
WITHOUT_CLASSIFICATION	For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	If we can't find a model, return the outermost containing model element
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	This swaps the direction of m3:
WITHOUT_CLASSIFICATION	This swaps the direction of m3 back: the colon is obliged, but the / not and the 2nd dot also not
WITHOUT_CLASSIFICATION	Notation allows to add or modify things, not remove. Hence, this does nothing:
WITHOUT_CLASSIFICATION	The expected exception is thrown.
WITHOUT_CLASSIFICATION	Both diagram types shall show sequence numbers when requested:
WITHOUT_CLASSIFICATION	But the collaboration diagram refuses to leave them out:
WITHOUT_CLASSIFICATION	If the message has a name, but no action, then show the name:
WITHOUT_CLASSIFICATION	If a message has a name and a named operation, then show the operation:
WITHOUT_CLASSIFICATION	If a message has a name and a named operation and a script, then show the script:
WITHOUT_CLASSIFICATION	TODO: Should there really be () here?
WITHOUT_CLASSIFICATION	If a message has a name and a named operation and an empty script, then show the operation:
WITHOUT_CLASSIFICATION	If a message has a name and a named operation and an expression with no script, then show the operation:
WITHOUT_CLASSIFICATION	If a message has a name and a named operation and a named script with parameters, then show the script:
WITHOUT_CLASSIFICATION	TODO: Why is there a space before the ( here, and not in case of the operation name?
WITHOUT_CLASSIFICATION	The action still has the argument from above.
WITHOUT_CLASSIFICATION	If a message has a name and a named operation and a script with parameters but without name, then show the operation name:
WITHOUT_CLASSIFICATION	this is not a very useful transition
WITHOUT_CLASSIFICATION	One of everything
WITHOUT_CLASSIFICATION	Upper / Lower case
WITHOUT_CLASSIFICATION	Mixed case
WITHOUT_CLASSIFICATION	A complex internal transition
WITHOUT_CLASSIFICATION	These are NOT entry/exit/do activities!
WITHOUT_CLASSIFICATION	Long list of internals
WITHOUT_CLASSIFICATION	or should the 1 be 0 ?
WITHOUT_CLASSIFICATION	deleting it all
WITHOUT_CLASSIFICATION	we want the b: Foo attribute, that is the second in the list
WITHOUT_CLASSIFICATION	If there is no script, then the language should not be maintained.
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	ignored
WITHOUT_CLASSIFICATION	Success - expected exception
WITHOUT_CLASSIFICATION	Everything fine...
WITHOUT_CLASSIFICATION	Create file
WITHOUT_CLASSIFICATION	This is the normal case.
WITHOUT_CLASSIFICATION	Load a project which contains links to it
WITHOUT_CLASSIFICATION	test project readable files
WITHOUT_CLASSIFICATION	Standard UML 1.4 profile
WITHOUT_CLASSIFICATION	Create a default profile and record its contents
WITHOUT_CLASSIFICATION	Write the profile out to a temp file
WITHOUT_CLASSIFICATION	Read it back in to a new empty project
WITHOUT_CLASSIFICATION	Clean up our two models and the extent that we read profile in to
WITHOUT_CLASSIFICATION	setting up the dependent profile creation
WITHOUT_CLASSIFICATION	actual call that executes everything
WITHOUT_CLASSIFICATION	verifications
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	TODO: the following cleans up left overs from previous tests, but, preferably we shouldn't have to do this...
WITHOUT_CLASSIFICATION	create profile model
WITHOUT_CLASSIFICATION	create profile model
WITHOUT_CLASSIFICATION	save the profile into a xmi file
WITHOUT_CLASSIFICATION	save the profile into a xmi file
WITHOUT_CLASSIFICATION	Called during teardown
WITHOUT_CLASSIFICATION	Called during teardown
WITHOUT_CLASSIFICATION	remove leftovers from other tests
WITHOUT_CLASSIFICATION	TODO: User defined profile support untested currently + "\t\t<userDefined>\n" + "\t\t\t<filename>\n" + "foo.profile\n" + "</filename>\n" + "\t\t\t<model>\n" + "foo.profile.package\n" + "\t\t\t</model>\n" + "\t\t</userDefined>\n"
WITHOUT_CLASSIFICATION	There seems to be cases where we don't erase the profile. Let's make sure it is deleted.
WITHOUT_CLASSIFICATION	[euluis] Using Windows style initial path, don't know if this fails in nixes.
WITHOUT_CLASSIFICATION	ensure that model subsystem implementation doesn't remember the profiles by changing their names and directories
WITHOUT_CLASSIFICATION	but, lookout, it doesn't work both ways
WITHOUT_CLASSIFICATION	assertEquals(DefaultOclEvaluator.getInstance().evaluate(vt, mi, "x.oclIsKindOf(Classifier)"), true);
WITHOUT_CLASSIFICATION	on a headless system (without display) this will crash
WITHOUT_CLASSIFICATION	private JPanel propertyPane;
WITHOUT_CLASSIFICATION	contains instances of each modelelement used for testing so that we only use each modelelement once
WITHOUT_CLASSIFICATION	propertyPane = TabProps
WITHOUT_CLASSIFICATION	theDetailsPane.getNamedTab(Translator.localize("tab.properties"));
WITHOUT_CLASSIFICATION	currently this is in this try block as it does not work _propertyPanel always has size 0,0
WITHOUT_CLASSIFICATION	ProjectBrowser exposes functionality, not components. assertNotNull(pb.getTabProps()); assertNotNull(pb.getStatusBar());
WITHOUT_CLASSIFICATION	Make sure this test happens on the AWT event thread
WITHOUT_CLASSIFICATION	JPanel docPane = pane.getTab(TabDocumentation.class);
WITHOUT_CLASSIFICATION	The target list is empty, re-emptying it again should not generate any events:
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	new target is of type object, refresh should not be called
WITHOUT_CLASSIFICATION	commented out next piece to remove failure of testcase. The testcase is probably correct but the implementation of DetailsPane is not pane.getTabs().setSelectedComponent(docPane); pane.targetSet(e); assertEquals(docPane, pane.getTabs().getSelectedComponent());
WITHOUT_CLASSIFICATION	new target is a fig, refresh should be called
WITHOUT_CLASSIFICATION	Setting one target should generate one event:
WITHOUT_CLASSIFICATION	new target is of type UMLClassDiagram, refresh should not be called
WITHOUT_CLASSIFICATION	TODO: We could check that the contents of the files differ.
WITHOUT_CLASSIFICATION	new target is a modelelement, refresh should not be called
WITHOUT_CLASSIFICATION	testing with subset of targets
WITHOUT_CLASSIFICATION	set same target again should not generate new events:
WITHOUT_CLASSIFICATION	TabProps gets selected! So, 2nd time right
WITHOUT_CLASSIFICATION	adding same targets list again should not generate new events:
WITHOUT_CLASSIFICATION	adding same target again should not generate new events:
WITHOUT_CLASSIFICATION	reverse order
WITHOUT_CLASSIFICATION	now remove one target by setting subset:
WITHOUT_CLASSIFICATION	TODO: the following fails due to the XMI writing saving all top level model elements and because even if there was no empty project, by creating a class, the undo mechanism in the project manager will force the creation of an empty project. assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	NOTE: we have to do this due to leftovers from other tests being causing strange errors when running in Eclipse.
WITHOUT_CLASSIFICATION	all tests should consider the threshold as inclusive value
WITHOUT_CLASSIFICATION	this test is a bit stupid, but nevertheless...
WITHOUT_CLASSIFICATION	{A, A} are offenders
WITHOUT_CLASSIFICATION	everything ok
WITHOUT_CLASSIFICATION	everything ok
WITHOUT_CLASSIFICATION	same name, same participants, two offenders
WITHOUT_CLASSIFICATION	same name, different classes, everything ok
WITHOUT_CLASSIFICATION	same name, different classes, everything ok
WITHOUT_CLASSIFICATION	same name, same participants, two offenders
WITHOUT_CLASSIFICATION	{A,A,B,B} are offenders
WITHOUT_CLASSIFICATION	{} no offenders
WITHOUT_CLASSIFICATION	simply create 3 usecases and an actor in a package with individual names
WITHOUT_CLASSIFICATION	generalizations are not required to have unique names within a namespace
WITHOUT_CLASSIFICATION	All use cases and actors require associations hence all predicates evalulate to true
WITHOUT_CLASSIFICATION	build association build association between actor and top use case.
WITHOUT_CLASSIFICATION	test for return parameters. they can ALSO fail!
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	the graph should stay the same.
WITHOUT_CLASSIFICATION	build extend these parameters seem to be in correct order add an extend. We do not need an assoc on the extending use case
WITHOUT_CLASSIFICATION	build include it seems that the parameters for build include are just the other way round add an include: we do not need to have associtions on one
WITHOUT_CLASSIFICATION	setup
WITHOUT_CLASSIFICATION	Handle the simple cases Anything very exotic will fail, but that will be our clue that the test needs to be extended
WITHOUT_CLASSIFICATION	real test
WITHOUT_CLASSIFICATION	Some arbitrary bounds and settings - unused in test
WITHOUT_CLASSIFICATION	Make sure everything created gets deleted
WITHOUT_CLASSIFICATION	This needs to be a concrete metatype, so we can't use the general, but abstract, Classifier. Replace with its concrete subtypes.
WITHOUT_CLASSIFICATION	This needs to be a concrete metatype, so we can't use the general, but abstract, Classifier. Replace with its concrete subtypes.
WITHOUT_CLASSIFICATION	setup the Project due to its use in SourcePathTableModel ctor
WITHOUT_CLASSIFICATION	create a class model element
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see AbstractTestActionAddDiagram#getValidNamespaceClasses()
WITHOUT_CLASSIFICATION	@see TestCase#setUp()
WITHOUT_CLASSIFICATION	@see TestCase#setUp()
WITHOUT_CLASSIFICATION	save the project
WITHOUT_CLASSIFICATION	Tests used to be coded to assume immediate event delivery. They've been modified to use flush() where needed. - tfm oldEventPolicy = MFactoryImpl.getEventPolicy(); MFactoryImpl.setEventPolicy(MFactoryImpl.EVENT_POLICY_IMMEDIATE);
WITHOUT_CLASSIFICATION	Return a package to use as the Namespace.
WITHOUT_CLASSIFICATION	restore original event policy - not supported by MDR - tfm MFactoryImpl.setEventPolicy(oldEventPolicy);
WITHOUT_CLASSIFICATION	assertNotNull(actionSupplier.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	cont.setTarget(elem);
WITHOUT_CLASSIFICATION	Testing with more than one, since it failed with a manual test I made.
WITHOUT_CLASSIFICATION	assertNotNull(actionClient.getValue(Action.SMALL_ICON));
WITHOUT_CLASSIFICATION	The following will bring up a dialog box, so can't be run headless actionSupplier.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	The following will bring up a dialog box, so can't be run headless actionClient.actionPerformed(new ActionEvent(this, 0, "foo"));
WITHOUT_CLASSIFICATION	create a new empty project
WITHOUT_CLASSIFICATION	Inconclusive
WITHOUT_CLASSIFICATION	Inconclusive
WITHOUT_CLASSIFICATION	setup a user defined profile which isn't loaded by the model subsystem and contains a stereotype and this contains a tag definition
WITHOUT_CLASSIFICATION	add the profile stereotype to the class
WITHOUT_CLASSIFICATION	add the profile to the project configuration
WITHOUT_CLASSIFICATION	This works when running the test from within Eclipse. Apparently Eclipse runs the tests using a class-loader that has the tests Folder among the URL:s.
WITHOUT_CLASSIFICATION	create a class in the project model
WITHOUT_CLASSIFICATION	check that the tag definition is returned by {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	If no project was entered on the command line, try to reload the most recent project if that option is true
WITHOUT_CLASSIFICATION	Set the screen layout to what the user left it before, or to reasonable defaults.
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	case 4 erase it
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	TreeModel implementation
WITHOUT_CLASSIFICATION	ToDoListListener implementation
WITHOUT_CLASSIFICATION	case 1 after(...)
WITHOUT_CLASSIFICATION	initialize the model and profile subsystems to simulate a fresh ArgoUML session
WITHOUT_CLASSIFICATION	We have the path provided from the build script.
WITHOUT_CLASSIFICATION	Check the localized parts.
WITHOUT_CLASSIFICATION	Wait for all Model subsystem events to be delivered
WITHOUT_CLASSIFICATION	Wait for all AWT events to be dispatched and processed
WITHOUT_CLASSIFICATION	Check here if there are no incoming call actions if not then create an activation at the top of the lifeline
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)
WITHOUT_CLASSIFICATION	if save did not raise an exception and name+"#" exists move name+"#" to name+"~" this is the correct backup file
WITHOUT_CLASSIFICATION	calcBounds();
WITHOUT_CLASSIFICATION	For classifiers
WITHOUT_CLASSIFICATION	This is null as until the first stereotype declaration is seen. After that it is non-null.
WITHOUT_CLASSIFICATION	newOp.setOwnerScope(op.getOwnerScope()); not needed in case of operation
WITHOUT_CLASSIFICATION	includes the "/" the "seq_expr" from the header javadoc the ":" is not included in "number" - it is always present
WITHOUT_CLASSIFICATION	Model.getExtensionMechanismsFactory().buildTaggedValue( tagName, new String[] {"true"}, Model.getFacade().getRoot(umlObject));
WITHOUT_CLASSIFICATION	MClassifiers cannot be Bag
WITHOUT_CLASSIFICATION	If the model repository doesn't manage a DI model then we must generate our Figs by inspecting PGML
WITHOUT_CLASSIFICATION	Read xsltStream into a temporary file Get url for temp file. openStream from url and wrap in StreamSource
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	instance variables
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	main methods
WITHOUT_CLASSIFICATION	if the object does not have a name, than no problem
WITHOUT_CLASSIFICATION	tree value isSelected(dont want a colored background) isExpanded isLeaf row(not important for rendering) hasFocus (dont want a focus rectangle)
WITHOUT_CLASSIFICATION	If we don't have it, find the trigger. If this fails it will keep its default value of null
WITHOUT_CLASSIFICATION	@Override public final void setHeadline(String s) { setupHeadAndDesc(); }
WITHOUT_CLASSIFICATION	We need to find the stereotype with the name "create" and the base class BehavioralFeature in the model. If there is none then we create one and put it there.
WITHOUT_CLASSIFICATION	first element is e.g. the class, but we need to have its namespace to recompute the offenders.
WITHOUT_CLASSIFICATION	- RedrawManager.unlock(); - _redrawer.repairDamage();
WITHOUT_CLASSIFICATION	if this composite state is not attached to a statemachine it is not the toplevel composite state.
WITHOUT_CLASSIFICATION	Get the assocations and connections. No problem (there is a separate critic) if this is a binary association or is an association role.
WITHOUT_CLASSIFICATION	If this was an association then there will be relevant information to fetch out of the mode arguments. If it not an association then these will be passed forward harmlessly as null.
WITHOUT_CLASSIFICATION	find selected rows and make a list of the model elements that are selected
WITHOUT_CLASSIFICATION	TreeCellRenderer implementation
WITHOUT_CLASSIFICATION	Build namespace hierarchy like this: g a /\ b c /\ d e f
WITHOUT_CLASSIFICATION	private PropertyprpTodo; private PropertyprpProperties; private PropertyprpDocumentation; private PropertyprpStyle; private PropertyprpSource; private PropertyprpConstraints; private PropertyprpTaggedValues;
WITHOUT_CLASSIFICATION	always fire changes in the case something has changed in the composition of the taggedValues collection.
WITHOUT_CLASSIFICATION	Build up an array list of the heights of each label/component pair. Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	CmdPaste cmd = new CmdPaste(); cmd.doIt();
WITHOUT_CLASSIFICATION	stereotypes applied to the target mostly control which TDs (but see below for other listeners too)
WITHOUT_CLASSIFICATION	TODO: Add referenceValue for tagged values which have a non-primitive type
WITHOUT_CLASSIFICATION	add a decision but set the critic priority to 0 so isRelevant should still be false
WITHOUT_CLASSIFICATION	TODO: We should also test that the object have been removed from their namespace. Collection c = Model.getFacade().getOwnedElements(p.getRoot());
WITHOUT_CLASSIFICATION	Because the notation events get dispatched on the Swing event thread, we need to use invokeAndWait to make sure that we don't return until they've been delivered
WITHOUT_CLASSIFICATION	Parent is Element, but it has no attributes or associations to check checkElementCopy(e1, e2);
WITHOUT_CLASSIFICATION	Extra careful now, not to keep any references to the second argument.
WITHOUT_CLASSIFICATION	Auto-create a return message for a call message
WITHOUT_CLASSIFICATION	get the source of the return message
WITHOUT_CLASSIFICATION	get the dest of the return message
WITHOUT_CLASSIFICATION	GridBagConstraints gridBagConstraints3 = new GridBagConstraints(); gridBagConstraints3.gridx = 2; gridBagConstraints3.anchor = GridBagConstraints.NORTHWEST; gridBagConstraints3.insets = new Insets(5, 5, 0, 0); gridBagConstraints3.gridy = 3; GridBagConstraints gridBagConstraints2 = new GridBagConstraints(); gridBagConstraints2.gridx = 0; gridBagConstraints2.anchor = GridBagConstraints.NORTHWEST; gridBagConstraints2.insets = new Insets(5, 5, 0, 0); gridBagConstraints2.gridy = 3;
WITHOUT_CLASSIFICATION	Fig spf = null; Fig dpf = null; FigNode sfn = null; FigNode dfn = null;
WITHOUT_CLASSIFICATION	If the event originated from the window w/glass pane, consume the event
WITHOUT_CLASSIFICATION	Add GUI-internal stuff. GUI-internal stuff is panes, tabs, menu items that are part of the GUI subsystem i.e. a class in the org.argouml.ui-package. Things that are not part of the GUI, like everything that has any knowledge about UML, Diagrams, Code Generation, Reverse Engineering, creates and registers itself when that subsystem or module is loaded.
WITHOUT_CLASSIFICATION	The workarea is all the visible space except the menu, toolbar and status bar. Workarea is laid out as a BorderSplitPane where the various components that make up the argo application can be positioned.
WITHOUT_CLASSIFICATION	iterate through the tabbed panels to determine whether they should be enabled.
WITHOUT_CLASSIFICATION	Always select properties panel if defaultToProperties is true, and if properties panel is appropriate for selected perspective
WITHOUT_CLASSIFICATION	tabs.addTab(Translator.localize("dialog.find.tab.name-and-location"), nameLocTab);
WITHOUT_CLASSIFICATION	_tableModel.setTarget(_target); _table.setModel(_tableModel);
WITHOUT_CLASSIFICATION	if the current shortcut has not been set, then the actual shortcut value is the default one
WITHOUT_CLASSIFICATION	if the user cancelled the operation, we don't have to save anything
WITHOUT_CLASSIFICATION	create the return message modelelement with the interaction and the collaboration
WITHOUT_CLASSIFICATION	Generate and register the OSXAdapter, passing the methods we wish to use as delegates for various com.apple.eawt.ApplicationListener methods
WITHOUT_CLASSIFICATION	TODO: no Links in UML 2
WITHOUT_CLASSIFICATION	nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	event handling
WITHOUT_CLASSIFICATION	event handlers
WITHOUT_CLASSIFICATION	Fig accessors
WITHOUT_CLASSIFICATION	event handlers - MouseListener implementation
WITHOUT_CLASSIFICATION	the UML object wrong end of the edge
WITHOUT_CLASSIFICATION	We are going to add the ones still valid & new ones in the right sequence:
WITHOUT_CLASSIFICATION	This is perfectly normal and happens among other things within the call to setDiagram (below).
WITHOUT_CLASSIFICATION	events
WITHOUT_CLASSIFICATION	if the new edge implements the MouseListener interface it has to receive the mouseReleased() event
WITHOUT_CLASSIFICATION	user feedback
WITHOUT_CLASSIFICATION	needs to be updated for changes in Notation subsystem - tfm String nameStr = Notation.generate(this, getOwner()).trim(); getNameFig().setText(nameStr);
WITHOUT_CLASSIFICATION	GraphFactory implementation
WITHOUT_CLASSIFICATION	adapted from SelectionWButtons from line 280 calls a helper method to avoid this edge disappearing if the new source and dest are the same node.
WITHOUT_CLASSIFICATION	Give up if we are already on the graph. This is a bit inconistent with canAddNode above.
WITHOUT_CLASSIFICATION	Link the new extend relationship in to the ends. Remember we draw from the extension use case to the base use case.
WITHOUT_CLASSIFICATION	TODO: This is using the default platform character encoding specifying an encoding will produce more predictable results
WITHOUT_CLASSIFICATION	Check against "" is needed for backward compatibility. Don't remove without checking subclasses and warning downstream developers - tfm - 20081211
WITHOUT_CLASSIFICATION	next line does give user.home back but this is not compliant with how the project.uri works and therefore open and save project as give different starting directories. String directory = Globals.getLastDirectory();
WITHOUT_CLASSIFICATION	Correct the activator value
WITHOUT_CLASSIFICATION	We know this is a return action now. It must be pointing the opposite way to the activator.
WITHOUT_CLASSIFICATION	Java SE 6 has a native GIF writer, but it's not in Java 5. One is available in the JAI-ImageIO library, but we don't currently bundle that and at 6+ MB it seems like a heavyweight solution, but I don't have time to produce a stripped down version right now - tfm https:jai-imageio.dev.java.net/
WITHOUT_CLASSIFICATION	we don't want to show some nasty gray background color, now do we?
WITHOUT_CLASSIFICATION	Although we've historically written out the DOCTYPE, the DTD doesn't actually exist and this line will get stripped by the .uml file persister + "<!DOCTYPE profile SYSTEM \"profile.dtd\" >\n"
WITHOUT_CLASSIFICATION	check that the tag definition is returned by {@link UMLTagDefinitionComboBoxModel#getApplicableTagDefinitions(Object)}
WITHOUT_CLASSIFICATION	TODO real numbers not yet supported assertEquals(DefaultOclEvaluator.getInstance() .evaluate(null, null, "1.5"), 1.5);
WITHOUT_CLASSIFICATION	REMEMBER to change this if you change the number of MEs with source path settings
WITHOUT_CLASSIFICATION	put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	Make sure there is the minimum gap above the message being drawn
WITHOUT_CLASSIFICATION	Make sure there is the minimum gap below the message being drawn
WITHOUT_CLASSIFICATION	The FigMessage that triggered this FigActivation into existence
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	This module will still register as enabled for UML1.4 but it won't actually do anything.
WITHOUT_CLASSIFICATION	Get the region as the first Region in the State. If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	Create the layer
WITHOUT_CLASSIFICATION	Create the renderer
WITHOUT_CLASSIFICATION	If we're not provided a namespace then get it from the diagram or the root
WITHOUT_CLASSIFICATION	Link the previous/next reference of the swimlanes according to the x order.
WITHOUT_CLASSIFICATION	GraphModel implementation
WITHOUT_CLASSIFICATION	make space for the clarifier for vertical symmetry margin between text and border
WITHOUT_CLASSIFICATION	MutableGraphModel implementation
WITHOUT_CLASSIFICATION	actions for toolbar
WITHOUT_CLASSIFICATION	VetoableChangeListener implementation
WITHOUT_CLASSIFICATION	contructors
WITHOUT_CLASSIFICATION	event processing
WITHOUT_CLASSIFICATION	The purpose of this method is not explained and it give give NPE depending on z order of figs as they are read. For now ignore if null but for future lets delete this.
WITHOUT_CLASSIFICATION	Fig accessors
WITHOUT_CLASSIFICATION	fig accessors
WITHOUT_CLASSIFICATION	can't have a connection between 2 interfaces: get the 'other' end type
WITHOUT_CLASSIFICATION	If there's only a single child (and we're it's only parent), set a hint for where to place it when we get to its row
WITHOUT_CLASSIFICATION	Use "aSize" to build up the minimum size. Start with the size of the name fig and build up.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	Both ends must be defined and nodes that are on the graph already.
WITHOUT_CLASSIFICATION	if we are the dest and is a call action, create the activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	if we are the dest and is a call action, create the activation, but don't add it until the height is set.
WITHOUT_CLASSIFICATION	if we are the destination of a create action, create the entire activation
WITHOUT_CLASSIFICATION	if we are the target of a destroy action the figlifeline ends here and we add the activation
WITHOUT_CLASSIFICATION	if we are the source of a return action the activation ends here.
WITHOUT_CLASSIFICATION	If we have a currentAct object that means have reached the end of the lifeline with a call or a create not returned. Add the activation to the list after setting its height to end at the end of the lifeline.
WITHOUT_CLASSIFICATION	we do nothing. No call to the parent
WITHOUT_CLASSIFICATION	we don't recalculate activations, just move them
WITHOUT_CLASSIFICATION	if is a classifier role, it must return all the related messages.
WITHOUT_CLASSIFICATION	if is a message, it must return the sender and the receiver of the message.
WITHOUT_CLASSIFICATION	Comments from anywhere in the model are allowed
WITHOUT_CLASSIFICATION	All other types of elements must be in this namespace
WITHOUT_CLASSIFICATION	we initialize the coordinates.
WITHOUT_CLASSIFICATION	we do nothing
WITHOUT_CLASSIFICATION	manage if cursor x is less than lastX1
WITHOUT_CLASSIFICATION	manage if cursor x is more than lastX2
WITHOUT_CLASSIFICATION	manage changes of direction...
WITHOUT_CLASSIFICATION	I have no direction yet
WITHOUT_CLASSIFICATION	we move down or up the messages that are downward the broom
WITHOUT_CLASSIFICATION	we recalculate all the activations
WITHOUT_CLASSIFICATION	we draw a cross
WITHOUT_CLASSIFICATION	we don't let the user move the messages horizontally.
WITHOUT_CLASSIFICATION	if the edge is near the bottom of the classifier roles, we enlarge all the FigClassifierRoles in the diagram.
WITHOUT_CLASSIFICATION	super(Model.getFacade().getName(op), null);
WITHOUT_CLASSIFICATION	we need the edge to be complete
WITHOUT_CLASSIFICATION	if the added edge is a Create Message it will affect the position of the ClassifierRole so it should be repositioned
WITHOUT_CLASSIFICATION	the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	the initial x is the left side of the activation
WITHOUT_CLASSIFICATION	put the x at the right side of the activation if needed
WITHOUT_CLASSIFICATION	if the y coordinate is before the classifier role y, we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	if the y coordinate is inside the head, the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders (java.lang.Object)
WITHOUT_CLASSIFICATION	if the y coordinate is before the classifier role y, we place the start in the corner of the fighead.
WITHOUT_CLASSIFICATION	if the y coordinate is inside the head, the x must be in the border of the headFig.
WITHOUT_CLASSIFICATION	Use a different notation as Messages on a collaboration diagram:
WITHOUT_CLASSIFICATION	This next argument may be used to switch off the generation of sequence numbers - this is still to be implemented. They are less desired in sequence diagrams, since they do not add any information. In collaboration diagrams they are needed, and they are still optional in sequence diagrams.
WITHOUT_CLASSIFICATION	Operations ...
WITHOUT_CLASSIFICATION	TODO: add logging, but this will never happen and is handled
WITHOUT_CLASSIFICATION	If possible we determine this by checking the destination and source Figs are the same. If this is not possible because the edge is not yet connected then we check the model.
WITHOUT_CLASSIFICATION	we update the activations...
WITHOUT_CLASSIFICATION	for performance, we check if this is a selfmessage if it is, we have just updated the activations
WITHOUT_CLASSIFICATION	This call seems not very robust. Yet to determine cause.
WITHOUT_CLASSIFICATION	this constructor is needed for PGMLStackParser to load saved diagrams. It does nothing, because PGMLStackParser will call setPoints later.
WITHOUT_CLASSIFICATION	vertical resizing
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	This module will still register as enabled for UML1.4 but it won't actually do anything.
WITHOUT_CLASSIFICATION	Get the region as the first Region in the State. If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	There are no regions so create one and place the vertex there.
WITHOUT_CLASSIFICATION	There are one or more regions so find the one that the vertex was dropped in
WITHOUT_CLASSIFICATION	The vertex was dropped onto the diagram. Get the region as the first Region in the StateMachine. If there is no region in the StateMachine then create one.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()
WITHOUT_CLASSIFICATION	_x = x; _y = y; _w = w; _h = h;
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.PopupGenerator#getPopUpActions(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Create the layer
WITHOUT_CLASSIFICATION	nothing we can do about veto, so just ignore it
WITHOUT_CLASSIFICATION	Create the renderer
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	in this event we do nothing, only stop drawing the broom.
WITHOUT_CLASSIFICATION	There is a bug in GEF where positioning nodes can affect edge positions. We need to do 3 iterations to protect against that.
WITHOUT_CLASSIFICATION	1. Remember current message paths
WITHOUT_CLASSIFICATION	2. Reposition and resize nodes
WITHOUT_CLASSIFICATION	3. Now reposition messages based on their original position
WITHOUT_CLASSIFICATION	Compute the initial center position of the CR
WITHOUT_CLASSIFICATION	horizontal resizing
WITHOUT_CLASSIFICATION	Compute the final center position of the CR
WITHOUT_CLASSIFICATION	Self messages act differently so it is needed to move them separetly. Only self messages of selected CR should be horizontally translated.
WITHOUT_CLASSIFICATION	Create the graph model
WITHOUT_CLASSIFICATION	Y position of the new CR should match existing CRs Y position
WITHOUT_CLASSIFICATION	Init the sequence diagrams from the module
WITHOUT_CLASSIFICATION	debugging and looking at fig.headFig.figs[1]._currText I can see that it's working, but how to test it?
WITHOUT_CLASSIFICATION	Operations that work on elements:
WITHOUT_CLASSIFICATION	Operations that work on classes of objects:
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Object getImportedPackage(Object element);
WITHOUT_CLASSIFICATION	Object getIncludingCase(Object handle);
WITHOUT_CLASSIFICATION	Javadoc reviewed above this point - tfm /
WITHOUT_CLASSIFICATION	Object getImportingNamespace(Object element);
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Object createStereotype();
WITHOUT_CLASSIFICATION	Implementation Note: Unlike many of the interfaces to the model there is no control to force a single instance of an XmiReader. This is to allow work objects generated by the implementation to be garbage collected when an XmiReader instance falls out of scope.
WITHOUT_CLASSIFICATION	ADiagramElementProperty delegate methods
WITHOUT_CLASSIFICATION	@see org.omg.uml.diagraminterchange.ADiagramElementProperty#add( org.omg.uml.diagraminterchange.DiagramElement, org.omg.uml.diagraminterchange.Property)
WITHOUT_CLASSIFICATION	@see org.omg.uml.diagraminterchange.ADiagramElementProperty#exists( org.omg.uml.diagraminterchange.DiagramElement, org.omg.uml.diagraminterchange.Property)
WITHOUT_CLASSIFICATION	@see org.omg.uml.diagraminterchange.ADiagramElementProperty#getProperty( org.omg.uml.diagraminterchange.DiagramElement)
WITHOUT_CLASSIFICATION	easy interface to properties
WITHOUT_CLASSIFICATION	Here follows the interfaces that contain the enums of different kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	Flow is not in UML 2.x - don't implement
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	additional support for tagged values
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	Here follows the interfaces that contain the enums of different kinds in the UML meta-model.
WITHOUT_CLASSIFICATION	static variables
WITHOUT_CLASSIFICATION	constructors
WITHOUT_CLASSIFICATION	public methods
WITHOUT_CLASSIFICATION	end class UUIDManager
WITHOUT_CLASSIFICATION	Write out something for us to read back in
WITHOUT_CLASSIFICATION	Now read it and check the results.
WITHOUT_CLASSIFICATION	Create an empty file and try to read it
WITHOUT_CLASSIFICATION	Depends on implementation:
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	Construct an exception with a message and a causing exception. @param message the message @param c the cause of the exception public XmiReferenceException(String message, Throwable c) { super(message, c); }
WITHOUT_CLASSIFICATION	The netbeans SAXParser sets line number and column number to -1.
WITHOUT_CLASSIFICATION	The xerces SAXParser sets line number and column number to 1.
WITHOUT_CLASSIFICATION	Not true in general, but should be true for our test models
WITHOUT_CLASSIFICATION	This throws org.argouml.model.XmiException: Unknown element in XMI file : Model because the UML 1.3->1.4 converter can only handle XMI 1.0, not 1.1
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	If the region is changed to another region then we make sure that a delete event is not fired as a result. $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	In this case, either the container was not set, or it was not contained in a statemachine.
WITHOUT_CLASSIFICATION	The only way a region is set to null is if we're deleting the vertex in which case we do nothing special so that the removal of the state triggers a delete event.
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	In UML a message could have an Action. In UML2 it never does.
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	No body found.
WITHOUT_CLASSIFICATION	oops we already have the body
WITHOUT_CLASSIFICATION	return handle.stringValue();
WITHOUT_CLASSIFICATION	public Collection<Element> getExtendedElements(Object handle) {
WITHOUT_CLASSIFICATION	For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	Gone from UML 2.x throw new NotImplementedException();
WITHOUT_CLASSIFICATION	Get all the relationships, that this model element has. and filter everything, that is not an import.
WITHOUT_CLASSIFICATION	Can't be done in the general case of federated repositories, but at least get what we can find for the current resource set
WITHOUT_CLASSIFICATION	MultiplicityElement is now an interface implemented by element types that support multiplicities - tfm
WITHOUT_CLASSIFICATION	should be Element not EObject really
WITHOUT_CLASSIFICATION	Classifier powerType =
WITHOUT_CLASSIFICATION	TODO: Signal -> Receptions association not navigable in this direction
WITHOUT_CLASSIFICATION	in UML2, the tag definition is the attribute itself
WITHOUT_CLASSIFICATION	usage differs from UML1
WITHOUT_CLASSIFICATION	usage differs from UML1
WITHOUT_CLASSIFICATION	Transitions can have multiple Triggers now
WITHOUT_CLASSIFICATION	Gone in UML 2.x
WITHOUT_CLASSIFICATION	ActionState, CallState, and SubactivityState have been replaced in UML 2.0 by explicitly modeled Actions
WITHOUT_CLASSIFICATION	TODO: Double check - tfm
WITHOUT_CLASSIFICATION	TODO: gone in UML 2
WITHOUT_CLASSIFICATION	TODO: Gone in UML 2
WITHOUT_CLASSIFICATION	TODO: Double check - tfm
WITHOUT_CLASSIFICATION	TODO: double check - tfm
WITHOUT_CLASSIFICATION	below for UML 1.4 compatibility
WITHOUT_CLASSIFICATION	TODO: double check - tfm
WITHOUT_CLASSIFICATION	TODO: Changed from UML 1.4
WITHOUT_CLASSIFICATION	TODO: gone in UML 2
WITHOUT_CLASSIFICATION	TODO: changed for UML 2.x
WITHOUT_CLASSIFICATION	TODO: gone from UML 2
WITHOUT_CLASSIFICATION	has <<subsystem>> stereotype
WITHOUT_CLASSIFICATION	TODO: Not exact, but close
WITHOUT_CLASSIFICATION	&& ((Action) handle).get
WITHOUT_CLASSIFICATION	Not in UML2
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	Even though this is not relevant for UML2 we have code calling this that expects it for UML1.4 and we must handle it gracefully.
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	return ((RedefinableElement) handle).isRoot(); TODO: One part of UML 2.1.1 spec says that this is as above, but it appears to be gone - tfm
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	lifeline.setRepresents(prop);
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	A composite state contains at least one region
WITHOUT_CLASSIFICATION	an AssociationEnd is now a Property owned by an Association
WITHOUT_CLASSIFICATION	throw new NotImplementedException( "This is not a UML2 element"); $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	TODO: Exception has been removed for UML 2.x just return Signal for now - tfm
WITHOUT_CLASSIFICATION	Gone in UML 2.x - just Classifier now
WITHOUT_CLASSIFICATION	TODO: Not really the same thing, but close
WITHOUT_CLASSIFICATION	The name of the meta type is the class name (after the last .) and before the "Impl" or end of class name.
WITHOUT_CLASSIFICATION	TODO: Gone in UML 2.x Return place holder for now
WITHOUT_CLASSIFICATION	TODO: no separate SyncState in UML 2.1 - tfm
WITHOUT_CLASSIFICATION	ActionSequence.class
WITHOUT_CLASSIFICATION	ClassifierInState.class
WITHOUT_CLASSIFICATION	Argument.class
WITHOUT_CLASSIFICATION	AttributeLink.class
WITHOUT_CLASSIFICATION	UninterpretedAction.class
WITHOUT_CLASSIFICATION	Access should be fast
WITHOUT_CLASSIFICATION	Iteration should be fast
WITHOUT_CLASSIFICATION	LiteralSpecification
WITHOUT_CLASSIFICATION	i.e. eventType == Notification.REMOVE
WITHOUT_CLASSIFICATION	implements CommandStack
WITHOUT_CLASSIFICATION	list.add("OpaqueExpression");
WITHOUT_CLASSIFICATION	LiteralSpecification list.add("LiteralNull");When other ok
WITHOUT_CLASSIFICATION	list.add("LiteralInteger");When other ok
WITHOUT_CLASSIFICATION	list.add("LiteralUnlimitedNatural");When other ok
WITHOUT_CLASSIFICATION	list.add("InstanceValue");
WITHOUT_CLASSIFICATION	TODO else => Exception !
WITHOUT_CLASSIFICATION	Can't be changed
WITHOUT_CLASSIFICATION	rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	as write in UML specification, we have size(bodies)==size(langs) we must have tabValues.length%2==0
WITHOUT_CLASSIFICATION	LiteralSpecification
WITHOUT_CLASSIFICATION	Can't be set
WITHOUT_CLASSIFICATION	rewrite it after change setExpression ?
WITHOUT_CLASSIFICATION	as write in UML specification, we have size(bodies)==size(langs) we must have tabValues.length%2==0
WITHOUT_CLASSIFICATION	A Link is an Assocation in UML2.x
WITHOUT_CLASSIFICATION	Link does not exist in UML2, a link is represented just as an association
WITHOUT_CLASSIFICATION	must not be used in UML2; we model a method as a OpaqueBehavior object that already has a body, so there is no need to have an intermediate expression object
WITHOUT_CLASSIFICATION	We need a method (operation implementation) to store the method body.
WITHOUT_CLASSIFICATION	Maybe this operation already has a method, that fits our purpose? In this case, try to reuse it, instead of creating a new implementation.
WITHOUT_CLASSIFICATION	Check, if we have to create a new implementation.
WITHOUT_CLASSIFICATION	Create a new implementation.
WITHOUT_CLASSIFICATION	And set the specification to the current operation.
WITHOUT_CLASSIFICATION	Add it to the operation's methods.
WITHOUT_CLASSIFICATION	Look, if there's already a java implementation
WITHOUT_CLASSIFICATION	Try to get the corresponding body and set it to the current body This _should_ work, if all the bodies were stored with their corresponding languages.
WITHOUT_CLASSIFICATION	Job done.
WITHOUT_CLASSIFICATION	It seems, there was no implementation of our current target language, so we just add one.
WITHOUT_CLASSIFICATION	We cannot set the body of this model element type.
WITHOUT_CLASSIFICATION	Removed from UML 2.x
WITHOUT_CLASSIFICATION	also parse 1_ or 0_N etc.
WITHOUT_CLASSIFICATION	WARNING - This has containment side effects! Eclipse UML2 will move the Property from the Classifier to the Association when the navigability is changed.
WITHOUT_CLASSIFICATION	$NON-NLS-1$$NON-NLS-2$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	for other xmi files with further namespaces:
WITHOUT_CLASSIFICATION	eclipse namespaces:
WITHOUT_CLASSIFICATION	For the .uml files in the eclipse jar files, we need this:
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Not needed currently for UML 2
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	final Object scope,
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	The attribute 'targetScope' of an AssociationEnd in UML1.x is no longer supported in UML2.x
WITHOUT_CLASSIFICATION	Nothing to do
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#getSource(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#getDestination(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	in UML2, we model a method as a Behavior (initially OpaqueBehavior)
WITHOUT_CLASSIFICATION	The interface realization will be created in the client namespace (client is a namespace)
WITHOUT_CLASSIFICATION	Extent ignored for eUML2 implementation (required for NetBeans MDR)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()
WITHOUT_CLASSIFICATION	cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	maybe UML2 has these as constants somewhere
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	also apply subprofiles:
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Sets the value of an element#s property (tagged value). This method makes sure that a Collection of values is set if and only if the property is multivalued (upper multiplicity value greater 1), so passing a collection is safe. @see org.argouml.model.ExtensionMechanismsHelper#setValueOfTag(java.lang.Object, java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	commonTaggedValueTypes.add(org.eclipse.uml2.uml.resource.UMLResource.)
WITHOUT_CLASSIFICATION	remove base class by destroying the extension
WITHOUT_CLASSIFICATION	consider the property multiplicity
WITHOUT_CLASSIFICATION	or getDefaultValueFor(prop)?
WITHOUT_CLASSIFICATION	too bad, we choose to take the first value
WITHOUT_CLASSIFICATION	ready to set the value finally
WITHOUT_CLASSIFICATION	in case of a tagged value, the type shouldn't be set here
WITHOUT_CLASSIFICATION	not implementable in UML2, because property is missing
WITHOUT_CLASSIFICATION	also unapply subprofiles:
WITHOUT_CLASSIFICATION	also define subprofiles:
WITHOUT_CLASSIFICATION	{AssociationRole.class, ClassifierRole.class, },
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	{Link.class, Instance.class, }, {Transition.class, StateVertex.class, },
WITHOUT_CLASSIFICATION	{Message.class, ClassifierRole.class },
WITHOUT_CLASSIFICATION	Note for UML2 the aggregation ends are swapped
WITHOUT_CLASSIFICATION	Extend, but only between two use cases. Remember we draw from the extension port to the base port.
WITHOUT_CLASSIFICATION	in UML2 subsystem is a Component with <<subsystem>> stereotype so this must occur after the metaTypes.getComponent() case
WITHOUT_CLASSIFICATION	find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	UML 1.4.2 Spec section 4.5.3.20 [5] A GeneralizableElement may only be a child of GeneralizableElement of the same kind.
WITHOUT_CLASSIFICATION	specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Region to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	valid elements for a Profile to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	$NON-NLS-1$$NON-NLS-2$
WITHOUT_CLASSIFICATION	A list of valid connections between elements, the connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	If there isn't a 3rd column then this represents a connection of elements of the same type.
WITHOUT_CLASSIFICATION	If there is a 3rd column then this represents a connection of between 2 different types of element.
WITHOUT_CLASSIFICATION	If the array hasn't been flagged to indicate otherwise swap elements the elemnts and add again.
WITHOUT_CLASSIFICATION	specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Operation to contain
WITHOUT_CLASSIFICATION	valid elements for a Stereotype to contain
WITHOUT_CLASSIFICATION	valid elements for an Action to contain
WITHOUT_CLASSIFICATION	trying to get a built-in standard profile from eclipse UML2
WITHOUT_CLASSIFICATION	Removed from UML 2
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Roll back transaction to remove any partial results read
WITHOUT_CLASSIFICATION	We shouldn't get here, but just in case... We want a wide exception catcher to make sure our transaction always gets ended
WITHOUT_CLASSIFICATION	If we can find a nested SAX exception, it will have information on the line number, etc.
WITHOUT_CLASSIFICATION	Ignore if the extent never got created or has been deleted
WITHOUT_CLASSIFICATION	InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	InputSource xformedInput = chainedTransform(transformFiles, pIs);
WITHOUT_CLASSIFICATION	@see org.argouml.model.XmiReader#getXMIUUIDToObjectMap()
WITHOUT_CLASSIFICATION	Set up reader to be first filter in chain
WITHOUT_CLASSIFICATION	Set up source for style sheet
WITHOUT_CLASSIFICATION	Create & set up temporary output file
WITHOUT_CLASSIFICATION	In UML2.x there is no metaclass named Method, but we use the 'method' association of BehavioralFeature
WITHOUT_CLASSIFICATION	ret.setIsLeaf(false); ret.setIsRoot(false);
WITHOUT_CLASSIFICATION	Create filter for each style sheet and chain to previous filter/reader
WITHOUT_CLASSIFICATION	Create transformer and do transformation
WITHOUT_CLASSIFICATION	Set up for next iteration
WITHOUT_CLASSIFICATION	Create & set up temporary output file
WITHOUT_CLASSIFICATION	Silently ignore anything specified by caller attempt to continue
WITHOUT_CLASSIFICATION	we presume the stream is encoded using the default char encoding
WITHOUT_CLASSIFICATION	Delete the old extent first
WITHOUT_CLASSIFICATION	LOG.log(Level.WARNING, "Unable to find extent " + extent);
WITHOUT_CLASSIFICATION	Set the storage id for our repository so that MofIds will be unique (they are composed as "storageId":"serialNumber"). NOTE: The storage manager only looks for a few property names such as the StorageFactoryClassName. Everything else needs to be prefixed with "MDRStorageProperty." which gets deleted from the property name before it and its associated value are copied to an internal property table separate from the system property table.
WITHOUT_CLASSIFICATION	Connect to the repository
WITHOUT_CLASSIFICATION	Create an extent and read in our metamodel (M2 model)
WITHOUT_CLASSIFICATION	Create and start event pump first so it's available for all others
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getFacade()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelEventPump()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getActivityGraphsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getActivityGraphsHelper()
WITHOUT_CLASSIFICATION	handles all children of relationship including extend and include which are not members of core
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	Disable event delivery during model load
WITHOUT_CLASSIFICATION	If we've got a streaming input, copy it to make sure we'll be able to rewind it if necessary
WITHOUT_CLASSIFICATION	Use a transaction to avoid the performance penalty (3x) of MDR's autocommit mode
WITHOUT_CLASSIFICATION	If a UML 1.3 file, attempt to upgrade it to UML 1.4
WITHOUT_CLASSIFICATION	Roll back transaction from first attempt & start new one
WITHOUT_CLASSIFICATION	Clear the associated ID maps & reset starting collection
WITHOUT_CLASSIFICATION	Make sure we always have a default extent. The old extent will get deleted as part of creating the new extent.
WITHOUT_CLASSIFICATION	DataTypes is next so it's available for Kinds, ModelManagement, & Extensions
WITHOUT_CLASSIFICATION	Initialize remaining factories and helpers (but defer heavyweight ones until needed)
WITHOUT_CLASSIFICATION	Create a default extent for the user UML model. This will get replaced if a new model is read in from an XMI file.
WITHOUT_CLASSIFICATION	NOTE: If we switch to a persistent repository like the b-tree repository we'll want to keep the old extent(s) around
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCollaborationsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCopyHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCoreFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCoreHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDataTypesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDataTypesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelManagementFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelManagementHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getStateMachinesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getStateMachinesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUmlFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUmlHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUseCasesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUseCasesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getChangeableKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getAggregationKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getPseudostateKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getScopeKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getConcurrencyKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDirectionKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getOrderingKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.CommonBehaviorHelper#setNodeInstance(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	Elements created after file load won't have index entries
WITHOUT_CLASSIFICATION	Normally the extent should exist already, but in the case of making an empty project, we may not have an extent yet, so create a default extent
WITHOUT_CLASSIFICATION	Private constructor for common work needed by both public constructors.
WITHOUT_CLASSIFICATION	end our transaction
WITHOUT_CLASSIFICATION	@see org.argouml.model.ExtensionMechanismsHelper#getAllPossibleStereotypes(java.util.Collection, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ExtensionMechanismsHelper#getCommonTaggedValueTypes()
WITHOUT_CLASSIFICATION	there is nothing to do in UML1.4
WITHOUT_CLASSIFICATION	forbid instantiation
WITHOUT_CLASSIFICATION	MDR classes may have a UML or Uml prefix which should be removed.
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	@see org.argouml.model.MetaTypes#getAbstraction()
WITHOUT_CLASSIFICATION	Delete Stimulii which have this as their dispatchAction
WITHOUT_CLASSIFICATION	Delete Messages which have this as their action
WITHOUT_CLASSIFICATION	Delete LinkEnds
WITHOUT_CLASSIFICATION	Delete AttributeLinks where this is the value
WITHOUT_CLASSIFICATION	Delete Stimuli which have this as a Sender or Receiver
WITHOUT_CLASSIFICATION	binary link
WITHOUT_CLASSIFICATION	Delete all SendActions which have this as signal
WITHOUT_CLASSIFICATION	Delete all SignalEvents which have this as the signal
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#deleteCollection(java.util.Collection)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#getSource(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#getDestination(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)
WITHOUT_CLASSIFICATION	Text was stored in name in UML 1.3
WITHOUT_CLASSIFICATION	The name of the meta type is the class name (after the last .) and before the next $ or end of class name.
WITHOUT_CLASSIFICATION	Delete CollaborationInstanceSets where this is the last participatingInstance
WITHOUT_CLASSIFICATION	Delete InteractionInstanceSets where this is the last participatingStimulus
WITHOUT_CLASSIFICATION	handles all children of relationship including extend and include which are not members of core
WITHOUT_CLASSIFICATION	this doesn't support I18N or multiple states, but it's just a default
WITHOUT_CLASSIFICATION	Partitions are composite elements and will get deleted implicitly Partition contents don't need to be deleted or checked
WITHOUT_CLASSIFICATION	@see org.netbeans.api.xmi.XMIReferenceProvider#getReference(javax.jmi.reflect.RefObject)
WITHOUT_CLASSIFICATION	Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	probably redundant - just in case
WITHOUT_CLASSIFICATION	delete Messages which have this as sender or receiver
WITHOUT_CLASSIFICATION	Helper interfaces and methods.
WITHOUT_CLASSIFICATION	CHECKSTYLE:OFF - ignore too many parameters since API is fixed by MDR
WITHOUT_CLASSIFICATION	CHECKSTYLE:ON
WITHOUT_CLASSIFICATION	Shorthand notation for convenience
WITHOUT_CLASSIFICATION	Quick exit if it's a transaction event (we get a lot of them and they are all ignored)
WITHOUT_CLASSIFICATION	The 4-arg version of this method depends on this ordering. Don't change it!
WITHOUT_CLASSIFICATION	InteractionInstanceSets will get deleted automatically because they are associated by composition
WITHOUT_CLASSIFICATION	If this is the only message contained in the Interaction we delete the Interaction
WITHOUT_CLASSIFICATION	Object from a different file, register with superclass so it can resolve all references
WITHOUT_CLASSIFICATION	@see org.netbeans.lib.jmi.xmi.XmiContext#getReference(java.lang.String, java.lang.String)
WITHOUT_CLASSIFICATION	/ Begin AndroMDA Code /
WITHOUT_CLASSIFICATION	if the model URL has a suffix of '.zip' or '.jar', get the suffix without it and store it in the urlMap
WITHOUT_CLASSIFICATION	Several tries to construct a URL that really exists.
WITHOUT_CLASSIFICATION	If systemId is publicId previously mapped from a systemId, try to use the systemId.
WITHOUT_CLASSIFICATION	Try to find suffix in module list.
WITHOUT_CLASSIFICATION	search the classpath
WITHOUT_CLASSIFICATION	Give up and let superclass deal with it.
WITHOUT_CLASSIFICATION	remove the first prefix because it may be an archive (like magicdraw)
WITHOUT_CLASSIFICATION	We've got a profile read pending - handle it ourselves now
WITHOUT_CLASSIFICATION	shouldn't happen
WITHOUT_CLASSIFICATION	Otherwise if it's not something we've already read, just punt to the super class.
WITHOUT_CLASSIFICATION	Unfortunately the MDR super implementation throws DebugException with just the message from the causing exception rather than nesting the exception itself, so we don't have all the information we'd like
WITHOUT_CLASSIFICATION	Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	Only add MOF elements, not primitive datatypes
WITHOUT_CLASSIFICATION	For Transition use indirection through target StateVertex
WITHOUT_CLASSIFICATION	Look for an existing reference matching our MofID
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Get all (UML) metaclasses
WITHOUT_CLASSIFICATION	Object[] args = { typeName, elemName }; misc.name.element-import = Imported {0}: {1} return Translator .localize("misc.name.element-import", args);
WITHOUT_CLASSIFICATION	Although this only handles one level of package, it is OK for UML 1.4 because of clustering Get the right UML package in the extent
WITHOUT_CLASSIFICATION	Return the metatype proxy
WITHOUT_CLASSIFICATION	we must find out if the activator itself does not have message as it's activator
WITHOUT_CLASSIFICATION	An activator can't also be a predecessor of a message
WITHOUT_CLASSIFICATION	This double 'for' loop may be optimised as follows: - Use arrays in stead of a Set for bases - Have the second loop start from the element after base1 ... but I chose not to do this, since the gain is small, and this is only used for a lazily filled combo. BTW: This is also used by Notation.
WITHOUT_CLASSIFICATION	An Association can only have a single unnamed ClassifierRole, so
WITHOUT_CLASSIFICATION	if we are unnamed eliminate all classifiers which are already the base of some role
WITHOUT_CLASSIFICATION	eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	WFR 2.10.3.3 #4
WITHOUT_CLASSIFICATION	eliminate Classifiers which already have an unnamed role
WITHOUT_CLASSIFICATION	We need to verify that ns is a Package, if not - find its parent package! Otherwise this causes an exception when creating a sequence diagram for a ClassifierRole.
WITHOUT_CLASSIFICATION	No initialization currently
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	if we are unnamed eliminate all classifiers which are already the base of some role
WITHOUT_CLASSIFICATION	|| context instanceof Collaboration || context instanceof Model
WITHOUT_CLASSIFICATION	@see org.netbeans.lib.jmi.xmi.XMIHeaderProvider#writeHeader(java.io.Writer)
WITHOUT_CLASSIFICATION	NOTE: The <XMI.header></XMI.header> is provided for us
WITHOUT_CLASSIFICATION	Not implemented in MDR
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#removeModelEventListener(java.beans.PropertyChangeListener, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#addClassModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	Clean up index entries
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Create a change event for the corresponding property
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Create an event for the other end of the association
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	and a change event for that end
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Create a change event for the associated property
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Create an event for the other end of the association
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Create a change event for the associated property
WITHOUT_CLASSIFICATION	will always be null
WITHOUT_CLASSIFICATION	Cut down on debugging noise
WITHOUT_CLASSIFICATION	Unregister deleted instances after all events have been delivered
WITHOUT_CLASSIFICATION	Any given listener is only called once even if it is registered for multiple relevant matches
WITHOUT_CLASSIFICATION	This will include all subtypes registered
WITHOUT_CLASSIFICATION	(LOG.isDebugEnabled()
WITHOUT_CLASSIFICATION	For debugging you probably want either this OR the logging for every event which is fired - not both
WITHOUT_CLASSIFICATION	LOG.isDebugEnabled()
WITHOUT_CLASSIFICATION	Fetch the key before going in synchronized mode
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, " Class " + name + " has subtypes : " + names.get(name));
WITHOUT_CLASSIFICATION	convert classname to RefObject
WITHOUT_CLASSIFICATION	If we don't have a MofClass, see if we can get one from the instance
WITHOUT_CLASSIFICATION	If we still don't have a MofClass, something's wrong
WITHOUT_CLASSIFICATION	throw new IllegalArgumentException("Property '" + attribute + "' doesn't exist in metamodel");
WITHOUT_CLASSIFICATION	If there isn't a 3rd column then this represents a connection of elements of the same type.
WITHOUT_CLASSIFICATION	Save the model (current)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ChangeableKind#getAddOnly()
WITHOUT_CLASSIFICATION	Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	Lookup primary key, creating new entry if needed
WITHOUT_CLASSIFICATION	If there are no subkeys, register using our special value to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	UML 2.x only
WITHOUT_CLASSIFICATION	UML 2.x only
WITHOUT_CLASSIFICATION	UML 2.x only
WITHOUT_CLASSIFICATION	Look for a TagDefinition matching the given name
WITHOUT_CLASSIFICATION	Create a new TagDefinition if none found
WITHOUT_CLASSIFICATION	only add all if there are some to add.
WITHOUT_CLASSIFICATION	Clear target so that multiple copies have no effect (other than inefficiency)
WITHOUT_CLASSIFICATION	Delete all TaggedValues with this type
WITHOUT_CLASSIFICATION	Used by the copy functions. Do not call this function directly. @param source The stereotype to copy from. @param target The object becoming a copy.
WITHOUT_CLASSIFICATION	"Element");
WITHOUT_CLASSIFICATION	Well formedness rule 4.12.3.1 CompositeState [4] There have to be at least two composite substates in a concurrent composite state. If this is broken by deletion of substate then we delete the other remaining substates.
WITHOUT_CLASSIFICATION	The effect will get deleted automatically by MDR, unlike the Guard.
WITHOUT_CLASSIFICATION	Although Usage & Permission are Dependencies, they need to be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	The following is specifically for Realizations
WITHOUT_CLASSIFICATION	The next 3 restrictions for Abstraction seem to be Argo specific not something the UML spec requires - tfm - 20070215
WITHOUT_CLASSIFICATION	A list of valid connections between elements, the connection type first and then the elements to be connected
WITHOUT_CLASSIFICATION	TODO: constraints TODO: required tags
WITHOUT_CLASSIFICATION	specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Model to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Package to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a classifier to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Interface to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Signal to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Actor to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Use Case to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Node to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a DataType to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Operation to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an Event to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an State to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an CallState to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an SubactivityState to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an ActionState to contain
WITHOUT_CLASSIFICATION	supports implementation of some special elements not supported by buildNode
WITHOUT_CLASSIFICATION	the list of namespaces to return
WITHOUT_CLASSIFICATION	If our map has any entries for this type, it's a connection type
WITHOUT_CLASSIFICATION	Get the list of valid model item pairs for the given connection type
WITHOUT_CLASSIFICATION	See if there's a pair in this list that match the given model elements
WITHOUT_CLASSIFICATION	find the passed in container in validContainmentMap
WITHOUT_CLASSIFICATION	determine if metaType is a valid element for container
WITHOUT_CLASSIFICATION	UML 1.4.2 Spec section 4.5.3.20 [5] A GeneralizableElement may only be a child of GeneralizableElement of the same kind.
WITHOUT_CLASSIFICATION	Begin a transaction - we'll do a bunch of reads first to collect a set of elements to delete - then delete them all
WITHOUT_CLASSIFICATION	no else here to make sure Classifier with its double inheritance goes ok
WITHOUT_CLASSIFICATION	no else here to make sure AssociationClass goes ok
WITHOUT_CLASSIFICATION	no else to handle multiple inheritance of linkobject
WITHOUT_CLASSIFICATION	If we get this with the repository locked, it means our root model element was already deleted. Nothing to do...
WITHOUT_CLASSIFICATION	Our wrapped version of the same error
WITHOUT_CLASSIFICATION	end our transaction
WITHOUT_CLASSIFICATION	if there are no owned elements then return empty list
WITHOUT_CLASSIFICATION	This enforces the following well-formedness rule. <p>Well formedness rule 4.12.3.1 CompositeState [4] There have to be at least two composite substates in a concurrent composite state.<p> If this is broken by deletion of substate then we change the parent composite substate to be not concurrent.
WITHOUT_CLASSIFICATION	We don't care about the value - just want to see if it throws
WITHOUT_CLASSIFICATION	Recurse into ourself for each parent
WITHOUT_CLASSIFICATION	the following should always be true
WITHOUT_CLASSIFICATION	If we were handed a Classifier to start, this must be a Classifier
WITHOUT_CLASSIFICATION	we have to follow the arrows..
WITHOUT_CLASSIFICATION	|| ns instanceof UseCase see comment below
WITHOUT_CLASSIFICATION	NOTE: Although WFR #3 in section 2.11.3.5 UseCase of the UML 1.4 spec says "A UseCase cannot contain any Classifiers," the OCL is actually self.contents->isEmpty which would seem to imply it can't contain any elements - tfm - 20060416
WITHOUT_CLASSIFICATION	Made following changes from OCL in UML 1.4 section 2.9.3.16: CollaborationInstance -> CollaborationInstanceSet Stimuli -> Stimulus
WITHOUT_CLASSIFICATION	A Profile is a special package having the <<profile>> stereotype which can only contain the following types
WITHOUT_CLASSIFICATION	|| modelElement instanceof StateMachine
WITHOUT_CLASSIFICATION	A Profile is a special package having the <<profile>> stereotype
WITHOUT_CLASSIFICATION	There actually don't appear to be any restrictions on the namespace for a Generalization. The UML 1.4 WFR 2.5.3.20 #3 refers to GeneralizableElements, not Generalizations - tfm
WITHOUT_CLASSIFICATION	only build a namepace if needed, with
WITHOUT_CLASSIFICATION	return struc.getOwner().getNamespace().getOwnedElement().contains( struc.getType());
WITHOUT_CLASSIFICATION	self.allConnections->forAll(r | self.namespace.allContents->includes(r.participant) )
WITHOUT_CLASSIFICATION	d.supplier.oclAsType(GeneralizableElement). allParents.oclAsType(Namespace).ownedElement->select (e | e. elementOwnership.visibility = #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	d.supplier.oclAsType(Namespace).ownedElement->select (e | e.elementOwnership.visibility = #public)->includes (r.participant) or
WITHOUT_CLASSIFICATION	d.supplier.oclAsType(Package).allImportedElements->select ( e | e. elementImport.visibility = #public) ->includes (r.participant) ) )
WITHOUT_CLASSIFICATION	Get the namespace hierarchy for each element
WITHOUT_CLASSIFICATION	Traverse the lists looking for the last (innermost) match
WITHOUT_CLASSIFICATION	This is an expensive method that we should ensure is called rarely. Hence info level to track easily.
WITHOUT_CLASSIFICATION	UML 1.4 WFR 2.5.3.1 #3
WITHOUT_CLASSIFICATION	UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	We silently ignore requests which conflict with UML 1.4 WFR 2.5.3.1 #3 - no aggregation for n-ary associations
WITHOUT_CLASSIFICATION	If we made something aggregate, make sure the other ends conform to UML 1.4 WFR 2.5.3.1 #2 - no more than one aggregate end
WITHOUT_CLASSIFICATION	UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	<em>Warning: when changing the implementation of this method be warned that the sequence of the if then else tree DOES matter.</em> Most notably, do not move the setNamespace method any level up in the tree.<p>
WITHOUT_CLASSIFICATION	All text was stored in name field in UML 1.3
WITHOUT_CLASSIFICATION	Returns nothing
WITHOUT_CLASSIFICATION	Boolean, String, Integer, Long, Float, Double, etc
WITHOUT_CLASSIFICATION	This method is CPU intensive and therefore needs to be as efficient as possible.
WITHOUT_CLASSIFICATION	Because we get the metatype class stripped of its reflective proxies, we need to jump through a hoop or two to find it in the metamodel, then work from there to get its proxy.
WITHOUT_CLASSIFICATION	Remove any elements not in requested namespace
WITHOUT_CLASSIFICATION	Check whether model element is contained in given namespace/container.
WITHOUT_CLASSIFICATION	Get Classifiers in Namespace
WITHOUT_CLASSIFICATION	Get Features owned by those Classifiers
WITHOUT_CLASSIFICATION	Select those Features which are BehavioralFeatures
WITHOUT_CLASSIFICATION	Should these also be deleted?
WITHOUT_CLASSIFICATION	This is silly, but for backward compatibility
WITHOUT_CLASSIFICATION	TODO: This is the 2nd part of this method:
WITHOUT_CLASSIFICATION	For a Classifier: <pre> [10] The operation allContents returns a Set containing all ModelElements contained in the Classifier together with the contents inherited from its parents. allContents : Set(ModelElement); allContents = self.contents->union( self.parent.allContents->select(e | e.elementOwnership.visibility = #public or e.elementOwnership.visibility = #protected)) where parent is defined for GeneralizableElement as: [1] The operation parent returns a Set containing all direct parents parent : Set(GeneralizableElement); parent = self.generalization.parent </pre><p>
WITHOUT_CLASSIFICATION	For a Collaboration: <pre> [1 ] The operation allContents results in the set of all ModelElements contained in the Collaboration together with those contained in the parents except those that have been specialized. allContents : Set(ModelElement); allContents = self.contents->union ( self.parent.allContents->reject ( e | self.contents.name->include (e.name) )) parent here is the GeneralizableElement definition </pre>
WITHOUT_CLASSIFICATION	wellformednessrules and preconditions
WITHOUT_CLASSIFICATION	UML 1.4 WFR 2.5.3.1 #3 - no aggregation for N-ary associations
WITHOUT_CLASSIFICATION	equal
WITHOUT_CLASSIFICATION	greater
WITHOUT_CLASSIFICATION	less than
WITHOUT_CLASSIFICATION	binary association
WITHOUT_CLASSIFICATION	delete LinkEnds which have this as their associationEnd
WITHOUT_CLASSIFICATION	delete AttributeLinks where this is the Attribute
WITHOUT_CLASSIFICATION	delete CreateActions which have this as their instantiation
WITHOUT_CLASSIFICATION	@see org.argouml.model.ActivityGraphsHelper#findClassifierByName( java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	Delete dependencies where this is the only client
WITHOUT_CLASSIFICATION	Delete dependencies where this is the only supplier
WITHOUT_CLASSIFICATION	delete CallActions which have this as their operation
WITHOUT_CLASSIFICATION	delete CallEvents which have this as their operation
WITHOUT_CLASSIFICATION	TODO: All the ToDos in the doCopyFoo methods below are inherited from the NSUML implementation and do not reflect new issues. One additional thing which does need to be dealt with is the copying of any attributes which have been added since this code was implemented for UML 1.3.
WITHOUT_CLASSIFICATION	Nothing more to do.
WITHOUT_CLASSIFICATION	Used by the copy functions. Do not call this function directly. TODO: actions? instances? collaborations etc? @param source the source classifier @param target the target classifier
WITHOUT_CLASSIFICATION	Copy all the Features
WITHOUT_CLASSIFICATION	Used by the copy functions. Do not call this function directly. TODO: generalizations, specializations? @param source the source generalizable element @param target the target generalizable element
WITHOUT_CLASSIFICATION	Used by the copy functions. Do not call this function directly. TODO: template parameters, default type TODO: constraining elements TODO: flows, dependencies, comments, bindings, contexts ??? TODO: contents, residences ??? @param source the source me @param target the target me
WITHOUT_CLASSIFICATION	Nothing more to do, don't copy owned elements.
WITHOUT_CLASSIFICATION	copy raised signals:
WITHOUT_CLASSIFICATION	Set the name so that superclasses can find the newly created element in the model, if necessary.
WITHOUT_CLASSIFICATION	Note that if we're copying this element then we must also be allowed to copy other necessary objects.
WITHOUT_CLASSIFICATION	Don't explicitly check if element is null
WITHOUT_CLASSIFICATION	Return 1..1 multiplicity for empty string
WITHOUT_CLASSIFICATION	Convert "" to "0.." instead of ".."
WITHOUT_CLASSIFICATION	In this case, either the container was not set, or it was not contained in a statemachine.
WITHOUT_CLASSIFICATION	according WFR: in case of ActivityGraph only.
WITHOUT_CLASSIFICATION	For consistency with attribute and operation, give it a default name and location
WITHOUT_CLASSIFICATION	Delete Extends which have this as their only ExtensionPoint
WITHOUT_CLASSIFICATION	delete Extends where this is the base
WITHOUT_CLASSIFICATION	delete Includes where this is the addition
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Test multipe items registered for single key set
WITHOUT_CLASSIFICATION	Remove with null item should remove all entries for key
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	Need to copy the lists since we will be moving the elements one by one:
WITHOUT_CLASSIFICATION	Deleting "source" here would probably delete the parameters...
WITHOUT_CLASSIFICATION	Only set the name if it differs from the text.
WITHOUT_CLASSIFICATION	Need to copy the lists since we will be moving the elements:
WITHOUT_CLASSIFICATION	This is not necessarily the current diagram!
WITHOUT_CLASSIFICATION	Remove the old fig from the diagram, so we can draw the new one in its place:
WITHOUT_CLASSIFICATION	p.moveToTrash(source);
WITHOUT_CLASSIFICATION	As soon as we've created a notation and have registered it listener force an event to go to the listener so it draws for the first time.
WITHOUT_CLASSIFICATION	If there are no subkeys, register using our special value to indicate that this is a primary key only registration
WITHOUT_CLASSIFICATION	Made following change from OCL in UML 1.4 section 2.9.3.22: CollaborationInstance -> CollaborationInstanceSet
WITHOUT_CLASSIFICATION	If there is a 3rd column then this represents a connection of between 2 different types of element.
WITHOUT_CLASSIFICATION	Elements which will be deleted when their container is deleted don't get added to the list of elements to be deleted (but we still want to traverse them looking for other elements to be deleted)
WITHOUT_CLASSIFICATION	Technically this is legal, but a StructuralFeature should probably only ever have an owner instead of a namespace. - tfm
WITHOUT_CLASSIFICATION	We'll put the association in the namespace of whichever end is not navigable and is writeable. If they both are, we'll use the namepace of c1.
WITHOUT_CLASSIFICATION	EnumerationLiterals should get deleted implicitly since they are associated by composition
WITHOUT_CLASSIFICATION	Set the namespace to that of the base as first choice, or that of the addition as second choice.
WITHOUT_CLASSIFICATION	UML2 only
WITHOUT_CLASSIFICATION	Editor editor = Globals.curEditor(); GraphModel gm = editor.getGraphModel(); LayerDiagram lay = ((LayerDiagram) editor.getLayerManager().getActiveLayer());
WITHOUT_CLASSIFICATION	Have we handled UML2 here?
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	We got passed an unmodifiable List. Copy it and sort the result
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased( java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Set up the property panels for UML elements:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Build up an array list of the heights of each label/component pair. Heights of zero indicate a proportional height.
WITHOUT_CLASSIFICATION	Make sure the component width isn't any greater than its maximum allowed width
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	If we do not set it to null first, then we get a MDR DebugException:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#addElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	This can throw an exception if the target has been deleted. We don't want to try locking the repository because this is called from the event delivery thread and could cause a deadlock. Instead catch the exception and leave the model empty.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#contains(java.lang.Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	Don't test changed element if it was deleted
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireContentsChanged( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalAdded( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalRemoved( Object, int, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	Do nothing by design.
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Allow null
WITHOUT_CLASSIFICATION	This is explained by WFR 2 of a StructuralFeature: The type of a StructuralFeature must be a Class, DataType, or Interface. @see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	restricting types for tagged values
WITHOUT_CLASSIFICATION	classifier is way too much in UML 2.x
WITHOUT_CLASSIFICATION	the minimum set of standard types
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	keep them sorted
WITHOUT_CLASSIFICATION	We got passed an unmodifiable List. Copy it and sort the result
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#addOtherModelEventListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	Make a copy of the modelelements:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()
WITHOUT_CLASSIFICATION	Add stereotypes submenu
WITHOUT_CLASSIFICATION	the method
WITHOUT_CLASSIFICATION	the selected operation
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#removeOtherModelEventListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	base is already set to this assoc...
WITHOUT_CLASSIFICATION	This check is needed, otherwise the setbase() below gives an exception.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Just in case the existing selected element is from elsewhere make sure it is in the list
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	The selected value may be "" to clear the represented classifier.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	private boolean mustRefresh;
WITHOUT_CLASSIFICATION	mustRefresh = true;
WITHOUT_CLASSIFICATION	This should not happen.
WITHOUT_CLASSIFICATION	if it has no language, then we assume it is not an instance of OpaqueExpression, so we leave it null and handle elsewhere
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	/ Build the field /
WITHOUT_CLASSIFICATION	/ Add field(s) to panel /
WITHOUT_CLASSIFICATION	click on the already selected value must not call setValue
WITHOUT_CLASSIFICATION	The 2 Radios have only one information.
WITHOUT_CLASSIFICATION	Update the model, and then notify
WITHOUT_CLASSIFICATION	When call by contructor : no one is selected
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	private boolean mustRefresh;
WITHOUT_CLASSIFICATION	mustRefresh = true;
WITHOUT_CLASSIFICATION	This should not happen.
WITHOUT_CLASSIFICATION	If we do not set it to null first, then we get a MDR DebugException:
WITHOUT_CLASSIFICATION	Expressions are DataTypes, not independent model elements be careful not to reuse them
WITHOUT_CLASSIFICATION	We need to to this otherwise there is no notification and diagram isn't change
WITHOUT_CLASSIFICATION	needed for notification
WITHOUT_CLASSIFICATION	if the control is a panel, add it
WITHOUT_CLASSIFICATION	To be really sure, let's add the operation that is linked to the action in the model, too - if it is not listed yet. We need this, incase an operation is moved out of the package, or maybe with imported XMI...
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	fill the list with items
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	in UML2, the target is already the "expression" (Opaque...)
WITHOUT_CLASSIFICATION	reuse Opaque..., just set it's attributes
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	Expressions are DataTypes, not independent model elements be careful not to reuse them
WITHOUT_CLASSIFICATION	make it stretch vertically
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event. DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	If we do not set it to null first, then we get a MDR DebugException:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	make it stretch vertically
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBox#doIt(ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	p = new UMLValueSpecificationPanel(model, propertyName);
WITHOUT_CLASSIFICATION	MModelElement
WITHOUT_CLASSIFICATION	if not, it is a control and must be labeled...
WITHOUT_CLASSIFICATION	only association end has an aggregation option box
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Create it [Here, OpaqueExpression which is the first choice] Note that if we edit the Initial value in the diagram (double clic) it was replaced by an OpaqueExpression
WITHOUT_CLASSIFICATION	Destroy it
WITHOUT_CLASSIFICATION	title = "" because already done for Optional
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	We got passed an unmodifiable List. Copy it and sort the result
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Force the parent to redraw
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	Do not set buildingModel = false here, otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	Add new listeners:
WITHOUT_CLASSIFICATION	makes sure we can select 'none'
WITHOUT_CLASSIFICATION	TODO: For large lists, this is doing a linear search of literally thousands of elements
WITHOUT_CLASSIFICATION	TODO: Here too?
WITHOUT_CLASSIFICATION	Check against "" is needed for backward compatibility. Don't remove without checking subclasses and warning downstream developers - tfm - 20081211
WITHOUT_CLASSIFICATION	start of interval
WITHOUT_CLASSIFICATION	end of interval
WITHOUT_CLASSIFICATION	in middle of interval
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	makes sure we can select 'none'
WITHOUT_CLASSIFICATION	Add new listeners:
WITHOUT_CLASSIFICATION	Don't try to test this if we're removing the element
WITHOUT_CLASSIFICATION	we tried to remove a value
WITHOUT_CLASSIFICATION	It would be better if we didn't need the container to get the target. This constructor can have zero parameters as soon as we improve targetChanged.
WITHOUT_CLASSIFICATION	Allow listening to other elements:
WITHOUT_CLASSIFICATION	@see javax.swing.ListModel#getElementAt(int)
WITHOUT_CLASSIFICATION	@see javax.swing.ListModel#getSize()
WITHOUT_CLASSIFICATION	catch callers attempting to use one without other
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxModel#getSelectedItem()
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireContentsChanged( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalAdded( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalRemoved( Object, int, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#remove(int, int)
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread-safe
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	Do nothing by design.
WITHOUT_CLASSIFICATION	NOTE: This may be called from a different thread, so we need to be careful of the threading restrictions imposed by AbstractDocument for mutators to be sure we don't deadlock.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox#buildModel()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	super(new LabelledLayout());
WITHOUT_CLASSIFICATION	c.insets = new Insets(1, 1, 1, 1);
WITHOUT_CLASSIFICATION	Get the list: OpaqueExpression, LiteralString,...
WITHOUT_CLASSIFICATION	By default, the first value of the combobox is selected.
WITHOUT_CLASSIFICATION	Get current InitialValue
WITHOUT_CLASSIFICATION	Select the Current type in the combobox
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	default : 0 => OpaqueExpression set to 1 for test
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	If we do not set it to null first, then we get a MDR DebugException:
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	Create the body and language Field
WITHOUT_CLASSIFICATION	Create other panel element
WITHOUT_CLASSIFICATION	create Panel containing the previous field
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	Our comparator will throw an InvalidElementException if the old list contains deleted elements (eg after a new project is loaded) so remove all the old contents first
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	make it stretch vertically
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	There are no composite states, so this will work:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	Allow null
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	make sure we know it when a classifier is added as a base
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	make it stretch vertically
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	Get all classifiers in our model TODO: We need the property panels to have some reference to the project they belong to instead of using deprecated functionality
WITHOUT_CLASSIFICATION	Get all classifiers in all top level packages of all profiles
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	The selected value may be "" to clear the represented operation.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	ignored - we just skipped inserting it in our document
WITHOUT_CLASSIFICATION	Allow null
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#buildModelList()
WITHOUT_CLASSIFICATION	Make sure it's parseable as an number
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#setItem(java.lang.Object)
WITHOUT_CLASSIFICATION	we don't want to show some nasty gray background color, now do we?
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getEditorComponent()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#selectAll()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getItem()
WITHOUT_CLASSIFICATION	we don't want to show some nasty gray background color, now do we?
WITHOUT_CLASSIFICATION	we don't want to show some nasty gray background color, now do we?
WITHOUT_CLASSIFICATION	necessary to create distance between the textfield and the icon.
WITHOUT_CLASSIFICATION	necessary to create distance between the textfield and the icon.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel, Action)
WITHOUT_CLASSIFICATION	next statement is necessary to update the textfield if the selection is equal to what was allready selected
WITHOUT_CLASSIFICATION	@see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#setItem(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getEditorComponent()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#addActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#removeActionListener(java.awt.event.ActionListener)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#selectAll()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxEditor#getItem()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	Temporary until SimpleListModel is used for all
WITHOUT_CLASSIFICATION	Create popup tool if we have a single row
WITHOUT_CLASSIFICATION	Create add and remove buttons if needed first
WITHOUT_CLASSIFICATION	then any new buttons
WITHOUT_CLASSIFICATION	Pushing this to the end of the AWT thread seems to be the only way to get this to update correctly
WITHOUT_CLASSIFICATION	button action:
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	TODO: Probably really want to cancel editing ((FigTextEditor) focusOwner).cancelEditing();
WITHOUT_CLASSIFICATION	The 5 main component : 2 label, a panel for langage , a panel with button, a textarea
WITHOUT_CLASSIFICATION	Translator.localize("button.delete")
WITHOUT_CLASSIFICATION	Copy previous element
WITHOUT_CLASSIFICATION	Copy next element
WITHOUT_CLASSIFICATION	Translator.localize("button.move-up")
WITHOUT_CLASSIFICATION	Copy in memory the current
WITHOUT_CLASSIFICATION	Copy the previous value in the current
WITHOUT_CLASSIFICATION	Copy the current in the previous
WITHOUT_CLASSIFICATION	Copy in memory the current
WITHOUT_CLASSIFICATION	Copy the next value in the current
WITHOUT_CLASSIFICATION	Copy the current in the next
WITHOUT_CLASSIFICATION	Layout
WITHOUT_CLASSIFICATION	The 2 component: a textField and a list
WITHOUT_CLASSIFICATION	Layout
WITHOUT_CLASSIFICATION	Extract the icon that is used by the tree control for the current look and feel
WITHOUT_CLASSIFICATION	Add a new entry in the list and select it. Translator.localize("button.add") +
WITHOUT_CLASSIFICATION	necessary to create distance between the textfield and the icon.
WITHOUT_CLASSIFICATION	Eclipse UML2 implementation classes often start with "UML" $NON-NLS-1$
WITHOUT_CLASSIFICATION	Eclipse UML2 implementation classes end with "Impl" $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$ Make sure we have a recognized file extension $NON-NLS-1$
WITHOUT_CLASSIFICATION	If the eUML.resources system property is defined then we are in a stand alone application, else we're in an Eclipse plug in. The eUML.resource should contain the path to the org.eclipse.uml2.uml.resource jar plugin. $NON-NLS-1$
WITHOUT_CLASSIFICATION	slope of the line we're finding the normal to is slope, and the normal is the negative reciprocal slope is (p1.y - p2.y) / (p1.x - p2.x) so recip is - (p1.x - p2.x) / (p1.y - p2.y)
WITHOUT_CLASSIFICATION	UML1.4 only
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	Set the child components to the heights in the array list calculating the height of any proportional component on the fly.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionSetMultiplicity#setSelectedItem( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	If we have a model but no list then build the list with preferred constructor. Eventually all lists should be built this way.
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#addElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent )
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#removeOtherModelEventListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange( java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	If the component is a JLabel which has another component assigned then position/size the label and calculate the size of the registered component
WITHOUT_CLASSIFICATION	If the child component is resizable then we don't know it's actual size yet. It will be calculated later as a proportion of the available left over space. For now this is flagged as zero.
WITHOUT_CLASSIFICATION	If a preferred height is not given or is the same as the minimum height then fix the height of this row.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event. DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	We only have this here until we have stereotypes list on property panel
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	The property value has changed so rebuild our view. @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel#isValidElement(java.lang.Object)
WITHOUT_CLASSIFICATION	So, we found a Classifier that is not a ClassifierInState. And at least one state has been selected. Well, let's correct that:
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel#getSelectedModelElement()
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	Not in UML1.4
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBox#UMLComboBox( UMLComboBoxModel, Action, boolean)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	Layout
WITHOUT_CLASSIFICATION	Language has changed
WITHOUT_CLASSIFICATION	Translator.localize("button.move-down")
WITHOUT_CLASSIFICATION	Object icon = ResourceLoaderWrapper.lookupIcon(s); putValue(Action.NAME, Translator.localize(s)); putValue(Action.SMALL_ICON, icon); Set the tooltip string: putValue(Action.SHORT_DESCRIPTION, Translator.localize(s));
WITHOUT_CLASSIFICATION	MDR has a hardcoded printStackTrace on all exceptions, even if they're caught, which is unsightly, so we handle unknown elements ourselves rather than letting MDR throw an exception for us to catch. org/netbeans/lib/jmi/util/Logger.java This can be uses to disable logging. Default output is System.err setProperty("org.netbeans.lib.jmi.Logger.fileName", "") org.netbeans.mdr.Logger The property org.netbeans.lib.jmi.Logger controls the minimum severity level for logging
WITHOUT_CLASSIFICATION	Commit our transaction
WITHOUT_CLASSIFICATION	not in UML1.4
WITHOUT_CLASSIFICATION	Ignore any error. The transaction may already have been unwound as part of exception processing by MDR
WITHOUT_CLASSIFICATION	Give the resolver.getIdToObjectMap() entries priority over entries with the same UUID from resolver.getIdToObjectMaps() because entries in resolver.getIdToObjectMaps() are historic.
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCollaborationsHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getMetaTypes()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getMessageSort()
WITHOUT_CLASSIFICATION	@see org.argouml.model.CommonBehaviorHelper#setReceiver(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	Nothing to do - we get all events automatically
WITHOUT_CLASSIFICATION	handles all children of relationship including extend and include which are not members of core
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)
WITHOUT_CLASSIFICATION	Remember the system id of our root document so that we can write out profiles and linked models to a different file if requested
WITHOUT_CLASSIFICATION	For now just skip registering this and ignore the request, but the real issue is that MagicDraw serializes the same object in two different composition associations, first in the referencing file and second in the referenced file
WITHOUT_CLASSIFICATION	if we've found the module model, log it and place it in the map so we don't have to find it if we need it again.
WITHOUT_CLASSIFICATION	/ End AndroMDA Code /
WITHOUT_CLASSIFICATION	returns a List
WITHOUT_CLASSIFICATION	Simulates UML2 getting the aggregation from the opposite end
WITHOUT_CLASSIFICATION	find the bases of the connected classifierroles so that we can see what associations are between them. If there are bases then the associations between those bases form the possible bases. Otherwise the bases are formed by all associations in the namespace of the collaboration
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#addModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#critique(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getSupportedDecisions()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#addSupportedDecision(org.argouml.cognitive.Decision)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getSupportedGoals()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#addSupportedGoal(org.argouml.cognitive.Goal)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#addKnowledgeType(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#isActive()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#isEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getSupportedDecisions()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getSupportedGoals()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)
WITHOUT_CLASSIFICATION	Just returns the descr param. @see org.argouml.cognitive.Poster#expand(java.lang.String, ListSet)
WITHOUT_CLASSIFICATION	Get the generic clarifier for this designer/poster. @see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#snooze()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#unsnooze()
WITHOUT_CLASSIFICATION	Does not do anything. @see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)
WITHOUT_CLASSIFICATION	Just returns false. @see org.argouml.cognitive.Poster#canFixIt(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Decision)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#supports(org.argouml.cognitive.Goal)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#containsKnowledgeType(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#expand(java.lang.String, org.argouml.cognitive.ListSet)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#fixIt(org.argouml.cognitive.ToDoItem, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.ControlMech#isRelevant(org.argouml.cognitive.critics.Critic, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.WizStep#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsAdded(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoItemsRemoved(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoListListener#toDoListChanged(org.argouml.cognitive.ToDoListEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoGeneratorEventListener#generatorChanged(org.argouml.application.events.ArgoGeneratorEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoGeneratorEventListener#generatorAdded(org.argouml.application.events.ArgoGeneratorEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoGeneratorEventListener#generatorRemoved(org.argouml.application.events.ArgoGeneratorEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.NotationName#getConfigurationValue()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.NotationName#sameNotationAs(org.argouml.notation.NotationName)
WITHOUT_CLASSIFICATION	Add an element listener and remember the registration. @param element element to listen for changes on @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)
WITHOUT_CLASSIFICATION	Utility function to add a listener for a given property name and remember the registration. @param element element to listen for changes on @param property name of property to listen for changes of @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)
WITHOUT_CLASSIFICATION	Utility function to add a listener for an array of property names and remember the registration. @param element element to listen for changes on @param property array of property names (Strings) to listen for changes of @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	Utility function to remove an element listener and adapt the remembered list of registration. @param element element to listen for changes on @see org.argouml.model.ModelEventPump#addModelEventListener(PropertyChangeListener, Object, String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#updateListener(java.beans.PropertyChangeListener, java.lang.Object, java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse( java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.notation.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.notation.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.notation.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoNotationEventListener#notationChanged(org.argouml.application.events.ArgoNotationEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoNotationEventListener#notationAdded(org.argouml.application.events.ArgoNotationEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoNotationEventListener#notationRemoved(org.argouml.application.events.ArgoNotationEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoNotationEventListener#notationProviderAdded(org.argouml.application.events.ArgoNotationEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.application.events.ArgoNotationEventListener#notationProviderRemoved(org.argouml.application.events.ArgoNotationEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.SAXParserBase#handleStartElement( org.argouml.persistence.XMLElement)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.SAXParserBase#handleEndElement( org.argouml.persistence.XMLElement)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.SAXParserBase#isElementOfInterest(String)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.MemberFilePersister#getMainTag()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getDesc()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.XmiFilePersister#isSaveEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.MemberFilePersister#getMainTag()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getDesc()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.XMLTokenTableBase#setupTokens()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.MemberFilePersister#getMainTag()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.MemberFilePersister#load(org.argouml.kernel.Project, java.io.InputStream)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.MemberFilePersister#save(org.argouml.kernel.ProjectMember, java.io.OutputStream)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getDesc()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.XMLTokenTableBase#setupTokens()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getDesc()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#getDesc()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.AbstractFilePersister#isSaveEnabled()
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.ProjectFilePersister#doLoad(java.io.File)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.ProfileManager#lookForRegisteredProfile(java.lang.String)
WITHOUT_CLASSIFICATION	@param pc @see org.argouml.profile.ProfileManager#applyConfiguration(org.argouml.kernel.ProfileConfiguration)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap, java.lang.Object, java.lang.String, java.lang.String, java.lang.Object[])
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Critic#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.OclExpressionEvaluator#evaluate(java.util.HashMap, org.argouml.profile.internal.ocl.ModelInterpreter, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.HashMap, java.lang.Object, java.lang.String, java.lang.String, java.lang.Object[])
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.uml14.Bag#count(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#setMaximumProgress(int)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#getBuiltInSymbol(java.lang.String)
WITHOUT_CLASSIFICATION	Returns the target of this tab. @see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	Refresh the text of the tab. @see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.AbstractArgoJPanel#spawn()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	Style panels only apply when a Fig is selected. @see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	Report a progress to the ProgressMonitor window. @see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)
WITHOUT_CLASSIFICATION	Report a progress to the ProgressMonitor window. @see org.argouml.application.api.ProgressMonitor#updateProgress(int)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#isCanceled()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#close()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#notifyNullAction()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.PerspectiveManagerListener#addPerspective(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.PerspectiveManagerListener#removePerspective(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementChanged(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementAdded(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.TreeModelUMLEventListener#modelElementRemoved(java.lang.Object)
WITHOUT_CLASSIFICATION	the model structure has changed significantly, eg a new project. @see org.argouml.ui.explorer.TreeModelUMLEventListener#structureChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	NOTE: No longer a separate type in UML 2.1
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.WeakExplorerNode#subsumes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.AbstractPerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getRuleName()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getChildren(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.rules.PerspectiveRule#getDependencies(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getType()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoItem#deselect()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ToDoItem#select()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getType()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.checklist.CheckItem#expand(java.lang.String, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#hit(int, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#hit(int, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#predicate( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(Object, Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.UMLWizard#getNumSteps()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.WizMEName#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.WizMEName#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.profile.Profile#getProfileIdentifier()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.AbstractCrUnconventionalName#computeSuggestion(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedMetatypes()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#canFinish()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.UMLWizard#setSuggestion(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#getNumSteps()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#getNumSteps()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#canGoNext()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#canFinish()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#setToDoItem(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.Clarifier#hit(int, int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2(java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#getNumSteps()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#makePanel(int)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#canFinish()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.ui.Wizard#doAction(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#predicate2( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#toDoItem( java.lang.Object, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#stillValid( org.argouml.cognitive.ToDoItem, org.argouml.cognitive.Designer)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.Poster#getClarifier()
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#initWizard( org.argouml.cognitive.ui.Wizard)
WITHOUT_CLASSIFICATION	@see org.argouml.cognitive.critics.Critic#getWizardClass(org.argouml.cognitive.ToDoItem)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.cognitive.critics.CrUML#getCriticizedDesignMaterials()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getType()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.AbstractProjectMember#getZipFileExtension()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.ProjectMember#repair()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#add(org.argouml.uml.diagram.layout.LayoutedObject)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#remove(org.argouml.uml.diagram.layout.LayoutedObject)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#getObjects()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#getObject(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#layout()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.Layouter#getMinimumDiagramSize()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getOwner()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.activity.ui.FigActionState#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigStateVertex#makeSelection()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#initNotationProviders(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateNameText()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#clone()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#addEnclosedFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.activity.ui.SelectionActionState#getNewNodeType(int)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	If the new encloser is null, and the old one is a Component, then the "enclosed" Fig has been moved on the diagram. This causes the model to be adapted as follows: remove the elementResidence between the "enclosed" and the oldEncloser. @see org.argouml.ui.ArgoDiagram#changeFigEncloser(org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode, org.tigris.gef.presentation.FigNode)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.UMLMutableGraphSupport#isRemoveFromDiagramAllowed(Collection)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()
WITHOUT_CLASSIFICATION	The Transition has a name text box. It contains: <ul> <li>The event-signature <li>The guard condition between [] <li>The action expression </ul><p> The content of the text box is generated by its own notationProvider. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialX()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialY()
WITHOUT_CLASSIFICATION	Update the text labels. @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	Update the text labels and listeners. @see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialX()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialY()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigStateVertex#initNotationProviders(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#removeFromDiagramImpl()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialX()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialY()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialHeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialWidth()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialX()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigState#getInitialY()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.state.ui.FigHistoryState#getH()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getDependentElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.layout.LayoutedEdge#layout()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getTypeOrderNumer()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#calculateWeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getRank()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#getWeight()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.static_structure.layout.ClassdiagramNode#isStandalone()
WITHOUT_CLASSIFICATION	Nothing is editable, since a Link takes its identity from the Association. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit( org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	Listen also to the association, of which the link is an instantiation, since we want to update the rendering when the association name changes. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getDestination()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getSource()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#setNamespace(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettings#getImportLevel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.StereotypeContainer#isStereotypeVisible()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.StereotypeContainer#setStereotypeVisible(boolean)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.VisibilityContainer#isVisibilityVisible()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.VisibilityContainer#setVisibilityVisible(boolean)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEdited(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateStereotypeText()
WITHOUT_CLASSIFICATION	Only refresh the tab if the bounds propertyChange event arrives. @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	Listen for a RemoveAssociationEvent between the comment and the annotated element. When recieved delete the CommentEdge and this FigEdgeNote. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigSingleLineText#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	If we're drawing to an edge then only allow if the start is a comment @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.StylePanelFig#setTargetBBox()
WITHOUT_CLASSIFICATION	Only refresh the tab if the bounds propertyChange event arrives. @see org.argouml.ui.StylePanel#refresh(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.StylePanelFig#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	If we're drawing to an edge then only allow if the start is a comment @see org.argouml.uml.diagram.ui.ModeCreateGraphEdge#isConnectionValid(org.tigris.gef.presentation.Fig, org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#handleResetToDefault()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.Relocatable#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.explorer.Relocatable#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionCheckBoxMenuItem#valueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEdited(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#textEditStarted(org.tigris.gef.presentation.FigText)
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.PathContainer#isPathVisible()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.PathContainer#setPathVisible(boolean)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.AbstractActionRadioMenuItem#toggleValueOfTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigSingleLineText#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#getNotationProviderType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#updateListeners( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameFig()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#getNameBounds()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getUmlCollection()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEditableCompartment#getNotationType()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#canEdit(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	The only thing we need to deal with is updating is the condition text. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#modelChanged(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getUmlActions()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#getLabelName()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettings#isCreateDiagramsSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettings#isMinimiseFigsSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettingsInternal#isDiagramLayoutSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettingsInternal#isDescendSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettingsInternal#isChangedOnlySelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettings#getInputSourceEncoding()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#getImportLevel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#isCreateDiagramsChecked()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#isMinimiseFigsChecked()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#isDiagramLayoutSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#isDescendSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportCommon#isChangedOnlySelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#isSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.SettingsTypes.BooleanSelection#getDefaultValue()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#getDefaultSelection()
WITHOUT_CLASSIFICATION	We return a new List with the options instead of the options themself because we don't want the user to be able to change the options. @see org.argouml.uml.reveng.SettingsTypes.UniqueSelection#getOptions()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.reveng.ImportSettingTypes.UniqueSelection#setSelection(int)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#close()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#isCanceled()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#notifyMessage(java.lang.String, java.lang.String, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#notifyNullAction()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#updateMainTask(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.ProgressMonitor#updateSubTask(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.persistence.ProgressListener#progress(org.argouml.persistence.ProgressEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionNewDiagram#createDiagram()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#getSourcePath(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#getSourcePathSettings()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#setSourcePath(org.argouml.uml.ui.SourcePathTableModel)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#setSourcePath( java.lang.Object, java.io.File)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#deleteSourcePath(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.SourcePathController#getAllModelElementsWithSourcePath()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBox2#UMLComboBox2( UMLComboBoxModel2, Action, boolean)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.PropPanel#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceComponent#targetReasserted()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceContainer#getProfile()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceContainer#getModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceContainer#formatElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceContainer#formatNamespace(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLUserInterfaceContainer#formatCollection(java.util.Iterator)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildPopup(javax.swing.JPopupMenu, int)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet(org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#setTarget(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#getTarget()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#shouldBeEnabled(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetAdded( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetRemoved( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargetListener#targetSet( org.argouml.ui.targetmanager.TargetEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionNavigate#navigateTo(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.targetmanager.TargettableModelView#getTargettableModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#createDiagram(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.ActionAddDiagram#isValidNamespace(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.common_behavior.ActionNewAction#createAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#getExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#setExpression(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLExpressionModel2#newExpression()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.behavior.state_machines.ActionNewEvent#createEvent( java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getChoices()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getDialogTitle()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractActionAddModelElement#getSelected()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#setProperty(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLPlainTextDocument#getProperty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLCheckBox2#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLRadioButtonPanel#buildModel()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#setSelectedItem(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLComboBoxModel2#getSelectedModelElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#buildModelList()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.UMLModelElementListModel2#isValidElement(Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#peekNamespaceElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#popNamespaceElement()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#getBaseNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#getCommonNamespace( org.argouml.uml.util.namespace.Namespace)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#iterator()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#isEmpty()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.Namespace#setDefaultScopeToken(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.util.namespace.NamespaceElement#getNamespaceElement()
WITHOUT_CLASSIFICATION	@see org.argouml.application.api.CommandLineInterface#doCommand(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getFacade()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDiagramInterchangeModel()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelEventPump()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getActivityGraphsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getActivityGraphsHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCollaborationsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCollaborationsHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCommonBehaviorFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCommonBehaviorHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCoreFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCoreHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDataTypesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDataTypesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getExtensionMechanismsFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getExtensionMechanismsHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelManagementFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getModelManagementHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getStateMachinesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getStateMachinesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUmlFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUmlHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUseCasesFactory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getUseCasesHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getMessageSort()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getMetaTypes()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getChangeableKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getAggregationKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getPseudostateKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getScopeKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getConcurrencyKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getDirectionKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getOrderingKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getVisibilityKind()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getXmiReader()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getXmiWriter(java.lang.Object, java.io.Writer, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelImplementation#getCopyHelper()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#getParsingHelp()
WITHOUT_CLASSIFICATION	@see org.argouml.notation.providers.NotationProvider#parse(java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.ui.TabTarget#refresh()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui. AbstractTestActionAddDiagram#getValidNamespaceClasses()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getAction()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.ui.AbstractTestActionAddDiagram#getNamespace()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#isRelocationAllowed(java.lang.Object)
WITHOUT_CLASSIFICATION	Overridden purely to keep our superclass from removing the listener that we just added. @see org.argouml.uml.diagram.ui.FigEdgeModelElement#updateListeners(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.FigNodeModelElement#renderingChanged()
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.uml.diagram.ui.UMLDiagram#relocate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.StateMachinesHelper#getSource(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UseCasesHelper#getAllUseCases(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#addListenersToModel(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object, org.argouml.model.UmlHelper.Direction)
WITHOUT_CLASSIFICATION	@see org.argouml.model.UmlHelper#move(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeClassModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addModelEventListener( java.beans.PropertyChangeListener, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeModelEventListener( java.beans.PropertyChangeListener, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addClassModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#addClassModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#removeClassModelEventListener( java.beans.PropertyChangeListener, java.lang.Object, java.lang.String)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ExtensionMechanismsHelper#getStereotypes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object) All methods below similarly override methods in CoreHelper.
WITHOUT_CLASSIFICATION	@see org.argouml.model.CollaborationsHelper#getAllClassifierRoles(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.CommonBehaviorHelper#getSource(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.ActivityGraphsHelper#findClassifierByName(java.lang.Object, java.lang.String) all methods below similarly implement methods from ActivityGraphsHelper
WITHOUT_CLASSIFICATION	Returns the value of an element's property (tagged value). This method makes sure that a Collection of values is returned if and only if the property is multivalued (upper multiplicity value greater 1). @see org.argouml.model.Facade#getValueOfTag(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.AbstractModelEventPump#removeClassModelEventListener(java.beans.PropertyChangeListener, java.lang.Object, java.lang.String[])
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#startPumpingEvents()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#stopPumpingEvents()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ModelEventPump#flushModelEvents()
WITHOUT_CLASSIFICATION	@see org.argouml.model.AggregationKind#getAggregate()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getChoice()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ChangeableKind#getChangeable()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ScopeKind#getClassifier()
WITHOUT_CLASSIFICATION	@see org.argouml.model.AggregationKind#getComposite()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ConcurrencyKind#getConcurrent()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getDeepHistory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getFork()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ChangeableKind#getFrozen()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ConcurrencyKind#getGuarded()
WITHOUT_CLASSIFICATION	@see org.argouml.model.DirectionKind#getInParameter()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getInitial()
WITHOUT_CLASSIFICATION	@see org.argouml.model.DirectionKind#getInOutParameter()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ScopeKind#getInstance()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getJoin()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getJunction()
WITHOUT_CLASSIFICATION	@see org.argouml.model.AggregationKind#getNone()
WITHOUT_CLASSIFICATION	@see org.argouml.model.OrderingKind#getOrdered()
WITHOUT_CLASSIFICATION	@see org.argouml.model.DirectionKind#getOutParameter()
WITHOUT_CLASSIFICATION	@see org.argouml.model.VisibilityKind#getPackage()
WITHOUT_CLASSIFICATION	@see org.argouml.model.VisibilityKind#getPrivate()
WITHOUT_CLASSIFICATION	@see org.argouml.model.VisibilityKind#getProtected()
WITHOUT_CLASSIFICATION	@see org.argouml.model.VisibilityKind#getPublic()
WITHOUT_CLASSIFICATION	@see org.argouml.model.DirectionKind#getReturnParameter()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ConcurrencyKind#getSequential()
WITHOUT_CLASSIFICATION	@see org.argouml.model.PseudostateKind#getShallowHistory()
WITHOUT_CLASSIFICATION	@see org.argouml.model.OrderingKind#getUnordered()
WITHOUT_CLASSIFICATION	@see org.argouml.model.ExtensionMechanismsFactory#createTaggedValue()
WITHOUT_CLASSIFICATION	@see org.argouml.model.CoreHelper#clearStereotypes(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.argouml.model.CopyHelper#copy(java.lang.Object, java.lang.Object) Make a copy of element in the given namespace.<p> This function is a dispatcher that calls the copyElement(Element,Namespace) function from XXXFactory.<p> This function may fail and return null for any of the following reasons: <ol> <li>No copy function is known for element's type. <li>The copy function fails or throws. </ol> @param anelement is the element to copy. @param ans the namespace @return a copy of element, or null. @throws IllegalArgumentException if element is null.
WITHOUT_CLASSIFICATION	Because we map both ends of an association we'll see many names twice LOG.log(Level.FINE, "Duplicate property name found - {0}:{1}", new Object[]{typeName, propertyName});
WITHOUT_CLASSIFICATION	Builds an initialized stereotype with no namespace. A stereotype must have a namespace so this method is unsafe. Use buildStereotype(String, Object). @param text is the name of the stereotype @return an initialized stereotype.
WITHOUT_CLASSIFICATION	Used by the copy functions. Do not call this function directly. @param source The stereotype to copy from. @param target The object becoming a copy.
WITHOUT_CLASSIFICATION	If the array hasn't been flagged to indicate otherwise swap elements the elements and add again.
WITHOUT_CLASSIFICATION	specifies valid elements for a class to contain
WITHOUT_CLASSIFICATION	specifies valid elements for a Component to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an ObjectFlowState to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an AssociationRole to contain
WITHOUT_CLASSIFICATION	specifies valid elements for an SimpleState to contain
WITHOUT_CLASSIFICATION	Extend, but only between two use cases. Remember we draw from the extension port to the base port.
WITHOUT_CLASSIFICATION	default parameter name
WITHOUT_CLASSIFICATION	build all other elements using existing buildNode
WITHOUT_CLASSIFICATION	There is a bug in the version of MDR (20050711) that we use that causes it to fail to delete aggregate elements which are single valued and where the aggregate end is listed second in the association defined in the metamodel. For the UML 1.4 metamodel, this affects a StateMachine's top StateVertex and a Transition's Guard. See issue 4948 & 5227 - tfm 20080713
WITHOUT_CLASSIFICATION	In UML 1.3, the name is the only place to store text. In UML 1.4, there is a body as well, but some tools still seem to use name.
WITHOUT_CLASSIFICATION	Although not represented in the OCL (or our Java), the English text of WFR #4 of Section 2.10.3.4 in the UML 1.4 spec is more restrictive - "[4] A Collaboration may only contain ClassifierRoles and AssociationRoles, the Generalizations and the Constraints between them, and Actions used in the Collaboration's Interactions."
WITHOUT_CLASSIFICATION	The following from the original NSUML implemenetation was attempting to implement WFR #1 from section 2.5.3.32 of the UML 1.4 spec, but if there is an owner set, no namespace is valid. The checks for this WFR, if desired, need to go in setOwner() and setType() - tfm
WITHOUT_CLASSIFICATION	or self.allConnections->forAll( r | self.namespace.allContents->excludes (r.participant) implies self.namespace.clientDependency->exists (d | d.oclIsTypeOf(Permission) and d.stereotype.name = 'access' and
WITHOUT_CLASSIFICATION	Return a list of namespaces enclosing this element. The list is ordered outer to inner. i.e. it starts at the root model.
WITHOUT_CLASSIFICATION	ScopeKind, VisibilityKind, PseudostateKind, etc Doesn't include Boolean though, despite what UML 1.4 spec says
WITHOUT_CLASSIFICATION	For a Namespace: <pre> [2] The operation allContents results in a Set containing all ModelElements contained by the Namespace. allContents : Set(ModelElement); allContents = self.contents where contents = self.ownedElement -> union(self.namespace, contents) </pre><p>
WITHOUT_CLASSIFICATION	For a Package: <pre> [3] The operation allContents results in a Set containing the ModelElements owned by or imported by the Package or one of its ancestors. allContents : Set(ModelElement); allContents = self.contents->union( self.parent.allContents->select(e | e.elementOwnership.visibility = #public or e.elementOwnership.visibility = #protected)) where the required operations are defined as : [1] The operation contents results in a Set containing the ModelElements owned by or imported by the Package. contents : Set(ModelElement) contents = self.ownedElement->union(self.importedElement) [2] The operation allImportedElements results in a Set containing the ModelElements imported by the Package or one of its parents. allImportedElements : Set(ModelElement) allImportedElements = self.importedElement->union( self.parent.oclAsType(Package).allImportedElements->select( re | re.elementImport.visibility = #public or re.elementImport.visibility = #protected)) </pre>
WITHOUT_CLASSIFICATION	Get the implementations of this operations and look for an OpaqueBehavior.
WITHOUT_CLASSIFICATION	TODO: In UML 2.0, ClassifierRole, AssociationRole, and AssociationEndRole have been replaced by the internal structure of the Collaboration
WITHOUT_CLASSIFICATION	For a Transition use indirection through source StateVertex
WITHOUT_CLASSIFICATION	TODO: unimplemented return ((Property) handle).gets
WITHOUT_CLASSIFICATION	Removed from UML 2.x and deprecated in Model API so we won't implement it throw new NotImplementedException(); we do not throw an exception because ArgoUML still uses this
WITHOUT_CLASSIFICATION	This doesn't work in UML2: both owner and property needed!
WITHOUT_CLASSIFICATION	TODO: Restructured in UML 2
WITHOUT_CLASSIFICATION	TODO: Gone in UML 2.1 It is now an InstanceSpecification with an Association as its classifier
WITHOUT_CLASSIFICATION	list.add("LiteralReal");UML 2.4 End LiteralSpecification
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	Link does not exist in UML2, a link is represented just as an association
WITHOUT_CLASSIFICATION	Search for our current target language.
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	The attribute 'targetScope' of an AssociationEnd in UML1.x is no longer supported in UML2.x
WITHOUT_CLASSIFICATION	cmd.setObjects(run.getParams().get(0));
WITHOUT_CLASSIFICATION	handles all children of relationship including extend and include which are not members of core
WITHOUT_CLASSIFICATION	Although Usage & Permission are Dependencies, they need to be include separately because of the way lookup works
WITHOUT_CLASSIFICATION	The next 3 restrictions for Abstraction seem to be Argo specific not something the UML spec requires - tfm - 20070215 There is no need for these because they arn't used by buildConnection() - b00__1 {Abstraction.class, org.eclipse.uml2.uml.Class.class, org.eclipse.uml2.uml.Class.class, null, }, {Abstraction.class, org.eclipse.uml2.uml.Package.class,org.eclipse.uml2.uml.Package.class, null, }, {Abstraction.class, Component.class, Interface.class, null, },
WITHOUT_CLASSIFICATION	specifies valid elements for a Enumeration to contain
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	Do nothing.
WITHOUT_CLASSIFICATION	@see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	This module will still register as enabled for UML1.4 but it won't actually do anything.
WITHOUT_CLASSIFICATION	@see java.util.Collection#remove(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.Collection#contains(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode() This will result in rather bad performance but at least we will not violate the contract together with {@link #equals(Object)}.
WITHOUT_CLASSIFICATION	@see java.util.Collection#size()
WITHOUT_CLASSIFICATION	@see java.util.Collection#isEmpty()
WITHOUT_CLASSIFICATION	@see java.util.Collection#iterator()
WITHOUT_CLASSIFICATION	@see java.util.Collection#toArray()
WITHOUT_CLASSIFICATION	@see java.util.Collection#toArray(java.lang.Object[])
WITHOUT_CLASSIFICATION	@see java.util.Collection#add(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.Collection#containsAll(java.util.Collection)
WITHOUT_CLASSIFICATION	@see java.util.Collection#addAll(java.util.Collection)
WITHOUT_CLASSIFICATION	@see java.util.Collection#retainAll(java.util.Collection)
WITHOUT_CLASSIFICATION	@see java.util.Collection#removeAll(java.util.Collection)
WITHOUT_CLASSIFICATION	@see java.util.Collection#clear()
WITHOUT_CLASSIFICATION	@see java.util.List#addAll(int, java.util.Collection)
WITHOUT_CLASSIFICATION	@see java.util.List#get(int)
WITHOUT_CLASSIFICATION	@see java.util.List#set(int, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.List#add(int, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.List#remove(int)
WITHOUT_CLASSIFICATION	@see java.util.List#indexOf(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.List#lastIndexOf(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.util.List#listIterator()
WITHOUT_CLASSIFICATION	@see java.util.List#listIterator(int)
WITHOUT_CLASSIFICATION	@see java.util.List#subList(int, int)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode() This is a rather bad hash solution but with the {@link #equals(Object)} defined as below, it is not possible to do better.
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Orientable#setOrientation(Orientation)
WITHOUT_CLASSIFICATION	@see java.util.Observable#notifyObservers(java.lang.Object)
WITHOUT_CLASSIFICATION	@see Observable#notifyObservers()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getName()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary1()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getControlTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getUserTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSubTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see java.awt.event.ComponentListener#componentHidden(java.awt.event.ComponentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	Updates the button if the current row changes @see javax.swing.event.TableModelListener#tableChanged(javax.swing.event.TableModelEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	Refresh the table when a critique is enabled/disabled @see java.util.Observer#update(java.util.Observable, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getRoot()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild( java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged( javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#addTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#removeTreeModelListener(javax.swing.event.TreeModelListener)
WITHOUT_CLASSIFICATION	@see javax.swing.event.TreeSelectionListener#valueChanged(javax.swing.event.TreeSelectionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.ModeCreateFigPoly#createNewItem(java.awt.event.MouseEvent, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt( java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.ModelFacade#getClassifier(java.lang.String)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#navigateQualified( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type2#navigateParameterizedQuery( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#navigateParameterized( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)
WITHOUT_CLASSIFICATION	@see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#navigateQualified( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type2#navigateParameterizedQuery( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#navigateParameterized( java.lang.String, tudresden.ocl.check.types.Type[])
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#conformsTo(tudresden.ocl.check.types.Type)
WITHOUT_CLASSIFICATION	@see java.lang.Object#equals(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.lang.Object#hashCode()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.persistence.pgml.HandlerFactory#getHandler( HandlerStack, Object, String, String, String, Attributes)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.persistence.pgml.PGMLStackParser#setAttrs( org.tigris.gef.presentation.Fig, org.xml.sax.Attributes)
WITHOUT_CLASSIFICATION	@see org.xml.sax.EntityResolver#resolveEntity(java.lang.String, java.lang.String)
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#getDescription()
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#accept(java.io.File)
WITHOUT_CLASSIFICATION	@see java.io.InputStream#read()
WITHOUT_CLASSIFICATION	@see java.io.InputStream#read(byte[], int, int)
WITHOUT_CLASSIFICATION	@see java.lang.Throwable#printStackTrace()
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#hasState(java.lang.String)
WITHOUT_CLASSIFICATION	@see java.lang.Throwable#printStackTrace(java.io.PrintStream)
WITHOUT_CLASSIFICATION	@see java.lang.Throwable#printStackTrace(java.io.PrintWriter)
WITHOUT_CLASSIFICATION	@see ProfileModelLoader#loadModel(ProfileReference)
WITHOUT_CLASSIFICATION	@see java.io.FileFilter#accept(java.io.File)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAAdditiveExpressionTail(tudresden.ocl.parser.node.AAdditiveExpressionTail)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAMultiplicativeExpressionTail(tudresden.ocl.parser.node.AMultiplicativeExpressionTail)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAUnaryUnaryExpression(tudresden.ocl.parser.node.AUnaryUnaryExpression)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAPostfixExpressionTail(tudresden.ocl.parser.node.APostfixExpressionTail)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeaturePrimaryExpression(tudresden.ocl.parser.node.AFeaturePrimaryExpression)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEmptyFeatureCallParameters(tudresden.ocl.parser.node.AEmptyFeatureCallParameters)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCallParameters(tudresden.ocl.parser.node.AFeatureCallParameters)
WITHOUT_CLASSIFICATION	@param node @see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAStandardDeclarator(tudresden.ocl.parser.node.AStandardDeclarator)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALetExpression(tudresden.ocl.parser.node.ALetExpression)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAStringLiteral(tudresden.ocl.parser.node.AStringLiteral)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outARealLiteral(tudresden.ocl.parser.node.ARealLiteral)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAIntegerLiteral(tudresden.ocl.parser.node.AIntegerLiteral)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outABooleanLiteral(tudresden.ocl.parser.node.ABooleanLiteral)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#outAEnumLiteral(tudresden.ocl.parser.node.AEnumLiteral)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseALiteralCollection(tudresden.ocl.parser.node.ALiteralCollection)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAExpressionListOrRange(tudresden.ocl.parser.node.AExpressionListOrRange)
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAListExpressionListOrRangeTail(tudresden.ocl.parser.node.AListExpressionListOrRangeTail)
WITHOUT_CLASSIFICATION	@see java.awt.Component#getPreferredSize()
WITHOUT_CLASSIFICATION	@see java.awt.Component#getSize()
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowActivated(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowDeiconified(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowIconified(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	Tests if enter is pressed in the _bbodField so we need to set the target bounds. @see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.ui.IStatusBar#showStatus(java.lang.String)
WITHOUT_CLASSIFICATION	Override paint so we can set a flag the first time we're called and notify any waiting threads that the splash screen has been painted. @see java.awt.Component#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary1()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getControlTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getUserTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSubTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractAction.AbstractAction()
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractAction.AbstractAction(java.lang.String)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractAction.AbstractAction( java.lang.String, javax.swing.Icon)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getName()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary1()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary2()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSecondary3()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getControlTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSystemTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getUserTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getMenuTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getSubTextFont()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getWindowTitleFont()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Dialog#nameButtons()
WITHOUT_CLASSIFICATION	@see java.awt.Component#getMinimumSize()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.Component#getLocale()
WITHOUT_CLASSIFICATION	@see java.awt.Window#dispose()
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange( java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowClosed(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt( java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowDeactivated(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.ListCellRenderer#getListCellRendererComponent( javax.swing.JList, java.lang.Object, int, boolean, boolean)
WITHOUT_CLASSIFICATION	@see javax.swing.JComponent#paintComponent(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowOpened(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.WindowListener#windowClosing(java.awt.event.WindowEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Catches a mouseevent and calls mySingleClick and myDoubleClick if a tab is clicked which is selected. @see java.awt.event.MouseListener#mouseClicked(MouseEvent)
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabRefresh()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabSave()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#handleSettingsTabCancel()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getRoot()
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChild(java.lang.Object, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getChildCount(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#getIndexOfChild(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#valueForPathChanged(javax.swing.tree.TreePath, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Dialog#nameButtons()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.Component#getMinimumSize() sets minimum size to 120,100
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.MenuListener#menuSelected(javax.swing.event.MenuEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.MenuListener#menuDeselected(javax.swing.event.MenuEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.MenuListener#menuCanceled(javax.swing.event.MenuEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Cmd#undoIt()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabKey()
WITHOUT_CLASSIFICATION	@see GUISettingsTabInterface#getTabPanel()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	Compares obj1 and obj2 sorting by user object type, then name. Diagrams are sorted first, then packages, then other types. sorts by name within type groups. Nulls are sorted first for names. @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.event.TreeWillExpandListener#treeWillCollapse(javax.swing .event.TreeExpansionEvent)
WITHOUT_CLASSIFICATION	Updates stereotype setting, adds all children per treemodel 'build on demand' design. @see javax.swing.event.TreeWillExpandListener#treeWillExpand(javax.swing .event.TreeExpansionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.TreeExpansionListener#treeCollapsed( javax.swing.event.TreeExpansionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.TreeExpansionListener#treeExpanded( javax.swing.event.TreeExpansionEvent) Updates the selection state.
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeNode#isLeaf()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	Do string compare of names of UML objects. Comparison is case insensitive using a primary strength collator in the user's locale. @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DragSourceListener#dragDropEnd(java.awt.dnd.DragSourceDropEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DragSourceListener#dragEnter(java.awt.dnd.DragSourceDragEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DragSourceListener#dragExit(java.awt.dnd.DragSourceEvent)
WITHOUT_CLASSIFICATION	This is not the correct location to set the cursor. The commented out code illustrates the calculation of coordinates. @see java.awt.dnd.DragSourceListener#dragOver(java.awt.dnd.DragSourceDragEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DragSourceListener#dropActionChanged(java.awt.dnd.DragSourceDragEvent)
WITHOUT_CLASSIFICATION	Ok, we've been told to scroll because the mouse cursor is in our scroll zone. @see java.awt.dnd.Autoscroll#autoscroll(java.awt.Point)
WITHOUT_CLASSIFICATION	Calculate the insets for the JTREE, not the viewport the tree is in. This makes it a bit messy. @see java.awt.dnd.Autoscroll#getAutoscrollInsets()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dragEnter(java.awt.dnd.DropTargetDragEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dragExit(java.awt.dnd.DropTargetEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dropActionChanged(java.awt.dnd.DropTargetDragEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationListener#handleNotification(javax.management.Notification, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#getValue(java.lang.String)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.util.ChildGenerator#gen(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphListener#nodeAdded(org.tigris.gef.graph.GraphEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphListener#edgeAdded(org.tigris.gef.graph.GraphEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphListener#nodeRemoved(org.tigris.gef.graph.GraphEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphListener#edgeRemoved(org.tigris.gef.graph.GraphEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphListener#graphChanged(org.tigris.gef.graph.GraphEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Diagram#initialize(java.lang.Object)
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. The classifier and state Figs are nicely centered vertically, and stretched out over the full width, to allow easy selection with the mouse. The Fig can only be shrunk to half its original size - so that it is not reducible to a few pixels only. @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int) Override setBounds to keep shapes looking right.
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	Return all ports on node or edge. @see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)
WITHOUT_CLASSIFICATION	Return the node or edge that owns the given port. @see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)
WITHOUT_CLASSIFICATION	Return all edges going to given port. @see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	Return all edges going from given port. @see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	Return true if the given object is a valid node in this graph. @see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	Return true if the given object is a valid edge in this graph. @see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	Add the given node to the graph, if valid. @see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	Return true if the two given ports can be connected by a kind of edge to be determined by the ports. @see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphFactory#makeNode()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigGroup#addFig(Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#calcBounds()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigGroup#addFig(Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.util.Predicate#predicate(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getInEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNodeRelatedEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canConnect(java.lang.Object, java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#connect(java.lang.Object, java.lang.Object, java.lang.Class)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.util.Predicate#predicate(java.lang.Object)
WITHOUT_CLASSIFICATION	Overridden to make it possible to include a stateVertex in a composite state. @see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getUseTrapRect()
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getUseTrapRect()
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. @see org.tigris.gef.presentation.Fig#setBoundsImpl(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	This function only sets the color of the divider line (since that is the only visible part), and can be used to make the divider line invisible for the top region in a composite state. @see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getPorts(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.BaseGraphModel#getOwner(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphModel#getOutEdges(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getUseTrapRect()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getClosestPoint(java.awt.Point)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getUseTrapRect()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigText#setTextFilled(boolean)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.ClipboardOwner#lostOwnership( java.awt.datatransfer.Clipboard, java.awt.datatransfer.Transferable)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferDataFlavors()
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#isDataFlavorSupported( java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferData( java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferDataFlavors()
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#isDataFlavorSupported( java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see java.awt.datatransfer.Transferable#getTransferData( java.awt.datatransfer.DataFlavor)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#classNameAndBounds()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigNode#hitPort(int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigGroup#hitFig(java.awt.Rectangle)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#isSelectable()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigNode#getPortFig(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigEdge#setFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#dragExit( java.awt.dnd.DropTargetEvent)
WITHOUT_CLASSIFICATION	@see java.awt.dnd.DropTargetListener#drop( java.awt.dnd.DropTargetDropEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#translate(int, int)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Overridden to set Argo-specific RenderingHints to determine whether or not antialiasing should be turned on. @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseMotionListener#mouseMoved(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Overridden to set Argo-specific RenderingHints to determine whether or not antialiasing should be turned on. @see org.tigris.gef.base.Editor#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationEmitter#removeNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#addNotificationListener(javax.management.NotificationListener, javax.management.NotificationFilter, java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#getNotificationInfo()
WITHOUT_CLASSIFICATION	@see javax.management.NotificationBroadcaster#removeNotificationListener(javax.management.NotificationListener)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.ModeCreatePolyEdge#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	Updates the modelelement container if the fig is moved in or out another fig. If this fig doesn't have an enclosing fig anymore, the namespace of the diagram will be the owning modelelement. If this fig is moved inside another FigNodeModelElement the owner of that fignodemodelelement will be the owning modelelement. @see org.tigris.gef.presentation.FigNode#setEnclosingFig(org.tigris.gef.presentation.Fig)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getEnclosedFigs()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#makeSelection()
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#classNameAndBounds()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#calcBounds()
WITHOUT_CLASSIFICATION	Necessary since GEF contains some errors regarding the hit subject. @see org.tigris.gef.presentation.Fig#hit(Rectangle)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.FigNode#isDragConnectable()
WITHOUT_CLASSIFICATION	Need to 'arm' the rerouting capability with mouseDragged(). <p> Don't arm if the edtior's current mode is a figedge create mode, because once a new edge has been created it is not deselected, therefore on the next create an unwanted reroute is performed. @see java.awt.event.MouseMotionListener#mouseDragged(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getMinimumSize()
WITHOUT_CLASSIFICATION	Override setBounds to keep shapes looking right. @see org.tigris.gef.presentation.Fig#setBounds(int, int, int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Command#execute()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphFactory#makeGraphModel()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphFactory#makeEdge()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphFactory#makeNode()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.SelectionButtons#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.SelectionButtons#paintButtons(Graphics)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.SelectionButtons#getNewNode(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.base.Selection#dragHandle(int, int, int, int, org.tigris.gef.presentation.Handle)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Object#clone()
WITHOUT_CLASSIFICATION	Makes sure that the edges stick to the outline of the fig. @see org.tigris.gef.presentation.Fig#getGravityPoints()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFillColor(java.awt.Color)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getFillColor()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setFilled(boolean)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLineWidth(int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#getLineWidth()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#damage()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	If the user double clicks on any part of this FigNode, pass it down to one of the internal Figs. This allows the user to initiate direct text editing. @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyPressed(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyReleased(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.KeyListener#keyTyped(java.awt.event.KeyEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#setLayer(org.tigris.gef.base.Layer)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#deleteFromModel()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#hit(java.awt.Rectangle)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#removeFromDiagram()
WITHOUT_CLASSIFICATION	Makes sure that the edges stick to the outline of the fig. @see org.tigris.gef.presentation.Fig#getGravityPoints()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.presentation.Fig#paint(java.awt.Graphics)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event. ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event. ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event. ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Dialog#nameButtons()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnName(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getColumnClass(int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt( java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.ListModel#getElementAt(int)
WITHOUT_CLASSIFICATION	@see javax.swing.ListModel#getSize()
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxModel#setSelectedItem(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.ComboBoxModel#getSelectedItem()
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireContentsChanged( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalAdded( Object, int, int)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	The property value has changed so rebuild our view. @see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.Action#isEnabled()
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseClicked( java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.MouseListener#mouseReleased( java.awt.event.MouseEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#changedUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ItemListener#itemStateChanged(java.awt.event.ItemEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.ListCellRenderer#getListCellRendererComponent( javax.swing.JList, java.lang.Object, int, boolean, boolean)
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#getDefaultRootElement()
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#getLength()
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#render(Runnable r)
WITHOUT_CLASSIFICATION	@see javax.swing.text.Document#getText(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.ListCellRenderer#getListCellRendererComponent(javax.swing.JList, java.lang.Object, int, boolean, boolean)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.ListSelectionListener#valueChanged(javax.swing.event.ListSelectionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.lang.Runnable#run()
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#removeUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.DocumentListener#insertUpdate(javax.swing.event.DocumentEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#isCellEditable(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getRowCount()
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#getValueAt(int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.table.TableModel#setValueAt(java.lang.Object, int, int)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans. PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.beans.VetoableChangeListener#vetoableChange(java.beans. PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see org.argouml.kernel.DelayedVChangeListener#delayedVetoableChange(java. beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalAdded( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalRemoved( Object, int, int)
WITHOUT_CLASSIFICATION	@see AbstractAction#actionPerformed(ActionEvent)
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange(java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see org.tigris.swidgets.Orientable#setOrientation(org.tigris.swidgets.Orientation)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#contains(java.lang.Object)
WITHOUT_CLASSIFICATION	@see javax.swing.DefaultListModel#addElement(java.lang.Object)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireContentsChanged( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalAdded( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.AbstractListModel#fireIntervalRemoved( Object, int, int)
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeCellRenderer#getTreeCellRendererComponent( javax.swing.JTree, java.lang.Object, boolean, boolean, boolean, int, boolean)
WITHOUT_CLASSIFICATION	@see java.awt.event.FocusListener#focusLost(java.awt.event.FocusEvent)
WITHOUT_CLASSIFICATION	@see javax.swing.event.CaretListener#caretUpdate(javax.swing.event.CaretEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.FocusListener#focusGained(java.awt.event.FocusEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed( java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#accept(java.io.File)
WITHOUT_CLASSIFICATION	@see javax.swing.filechooser.FileFilter#getDescription()
WITHOUT_CLASSIFICATION	@see java.beans.PropertyChangeListener#propertyChange( java.beans.PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see java.util.Enumeration#hasMoreElements()
WITHOUT_CLASSIFICATION	@see java.util.Enumeration#nextElement()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see PropertyChangeListener#propertyChange(PropertyChangeEvent)
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	Here we are actually violating the test independance since we keep the DetailsPane from test to test. The reason to do this is to make it possible to run the tests with less memory requirements. Hopefully someone might eventually fix the DetailsPane so that it is garbage collected properly and this is no longer needed. @see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#runTest()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetAdded(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetRemoved(TargetEvent)
WITHOUT_CLASSIFICATION	@see TargetListener#targetSet(TargetEvent)
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see AbstractTestActionAddDiagram#getValidNamespaceClasses()
WITHOUT_CLASSIFICATION	@see AbstractTestActionAddDiagram#getValidNamespaceClasses()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see AbstractTestActionAddDiagram#getValidNamespaceClasses()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#tearDown()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#canAddEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addNode(java.lang.Object)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.MutableGraphModel#addEdge(java.lang.Object)
WITHOUT_CLASSIFICATION	@see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
WITHOUT_CLASSIFICATION	This method is overridden in order to ignore change of the y coordinate during dragging. @see org.tigris.gef.presentation.FigNode#superTranslate(int, int)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphFactory#makeNode()
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphNodeRenderer#getFigNodeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see org.tigris.gef.graph.GraphEdgeRenderer#getFigEdgeFor( org.tigris.gef.graph.GraphModel, org.tigris.gef.base.Layer, java.lang.Object, java.util.Map)
WITHOUT_CLASSIFICATION	@see junit.framework.TestCase#setUp()
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	Although not generally true for GEF, for Argo we know that the layer is a LayerPerspective which knows the associated diagram
WITHOUT_CLASSIFICATION	Do nothing
WITHOUT_CLASSIFICATION	end class StartCritics
WITHOUT_CLASSIFICATION	initialized in static initializer block below
WITHOUT_CLASSIFICATION	Needs to happen after initialization is done & modules loaded
WITHOUT_CLASSIFICATION	create an anonymous class as a kind of adaptor for the cognitive System to provide proper translation/i18n.
WITHOUT_CLASSIFICATION	The reason the gui is initialized before the commands are run is that some of the commands will use the projectbrowser.
WITHOUT_CLASSIFICATION	Initialize the module loader. At least the plug-ins that provide profiles need to be initialized before the project is loaded, because some of these profile may have been set as default profiles and need to be applied to the project as soon as it has been created or loaded. The first instance of a Project is needed during the GUI initialization.
WITHOUT_CLASSIFICATION	The string <code>log4j.configuration</code> is the same string found in {@link org.apache.log4j.Configuration.DEFAULT_CONFIGURATION_FILE} but if we use the reference, then log4j configures itself and clears the system property and we never know if it was set. If it is set, then we let the static initializer in {@link Argo} perform the initialization.
WITHOUT_CLASSIFICATION	A subclass of JPanel that can act as a tab in the DetailsPane or MultiEditorPane. Added functionality:<p> Spawning: When the tab is double-clicked, this JPanel will generate a separate window of the same size and with the same contents. This is almost like "tearing off" a tab.<p> TODO: Spawning of windows disabled in spawn()<p> Title: This JPanel keeps track of its own title.<p> Icon: This JPanel keeps track of its own icon; i.e. an arrow pointing to the panel that it gives details of.<p> Orientation: This JPanel is Orientable.<p> Cloning: This JPanel may be cloned.<p> This class used to be named TabSpawnable. Renamed since it is not a Tab, but a Panel, and being spawnable is not any more its main purpose.
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	accessors
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	Notation events are likely to cause GEF/Swing operations, so we dispatch them on the Swing event thread as a convenience so that the receiving notationChanged() methods don't need to deal with it
WITHOUT_CLASSIFICATION	@param item the todo item @param reason the reason TODO: Use it! @return <code>true</code> if the argument was a component of this list; <code>false</code> otherwise @throws UnresolvableException unable to resolve
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	Process the listeners last to first, notifying those that are interested in this event
WITHOUT_CLASSIFICATION	issue resolution
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	Lazily create the event:
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	constants
WITHOUT_CLASSIFICATION	static accessors
WITHOUT_CLASSIFICATION	Set the tooltip string:
WITHOUT_CLASSIFICATION	@see javax.swing.tree.TreeModel#isLeaf(java.lang.Object)
WITHOUT_CLASSIFICATION	This needs to iterate to fill entire output raster if implemented return image.copyData(outRaster);
WITHOUT_CLASSIFICATION	Catch all exceptions and errors, however severe
WITHOUT_CLASSIFICATION	Notify the user that the modules in the list that are selected but not enabled were not possible to enable and that are not selected that we cannot disable. Currently we just log this. TODO: We could eventually pop up some warning window.
WITHOUT_CLASSIFICATION	if we have only one return value and without type, the return param string is ": ,", we remove it
WITHOUT_CLASSIFICATION	If the script of the Action is empty, (or only specifies arguments and no method name) then we generate a string based on a different model element:
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	MMessage
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	(MMessage)
WITHOUT_CLASSIFICATION	no state with the given name is found, so we have to reject the complete user's input
WITHOUT_CLASSIFICATION	Now let's check if the new line is already present in the old list of internal transitions; if it is, then mark the old one to be retained (i.e. do not create a new one), if it isn't, continue with parsing:
WITHOUT_CLASSIFICATION	case 1
WITHOUT_CLASSIFICATION	check for more literals (';' separated):
WITHOUT_CLASSIFICATION	@see tudresden.ocl.check.types.Type#hasState(java.lang.String)
WITHOUT_CLASSIFICATION	if save did not raise an exception and name+"#" exists move name+"#" to name+"~" this is the correct backup file
WITHOUT_CLASSIFICATION	frank: in case of exception delete name and mv name+"#" back to name if name+"#" exists this is the "rollback" to old file
WITHOUT_CLASSIFICATION	Skip the 2 lines <?xml version="1.0" encoding="UTF-8" ?> <!DOCTYPE pgml SYSTEM "pgml.dtd">
WITHOUT_CLASSIFICATION	Search all attributes found to those expected. If any don't match then turn off the found flag so that we search for the next matching tag.
WITHOUT_CLASSIFICATION	Now we're into processing each specific path item strategy. At the moment, we only know PathItemPlacement
WITHOUT_CLASSIFICATION	for compatibility with older format
WITHOUT_CLASSIFICATION	If we're about to upgrade the file lets take an archive of it first.
WITHOUT_CLASSIFICATION	No more we can do here on failure
WITHOUT_CLASSIFICATION	Write any left over bytes in the input buffer (perhaps from a partially decoded character)
WITHOUT_CLASSIFICATION	NOP
WITHOUT_CLASSIFICATION	To persist to and from zargo (zipped file) storage containing seperate xmi, argo, plgml and todo zip entries. @author Bob Tarling TODO: Review use of this against ZargoFilePersister - Bob
WITHOUT_CLASSIFICATION	Add the path of the model to the search path, so we can read dependent models
WITHOUT_CLASSIFICATION	we only need to add the classloader once and if and only if there is at least a profile in the JAR
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	Testing: does not fire.
WITHOUT_CLASSIFICATION	@see tudresden.ocl.parser.analysis.DepthFirstAdapter#caseAFeatureCall(tudresden.ocl.parser.node.AFeatureCall)
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map, java.lang.Object, java.lang.String, java.lang.String, java.lang.Object[])
WITHOUT_CLASSIFICATION	@see org.argouml.profile.internal.ocl.ModelInterpreter#invokeFeature(java.util.Map, java.lang.Object, java.lang.String, java.lang.String, java.lang.Object[])
WITHOUT_CLASSIFICATION	TODO: isStatic in UML 2.x
WITHOUT_CLASSIFICATION	Additional Operations in 4.5.3.8
WITHOUT_CLASSIFICATION	4.5.2.13 Constraint
WITHOUT_CLASSIFICATION	4.5.2.24 Generalization
WITHOUT_CLASSIFICATION	4.5.2.28 Namespace
WITHOUT_CLASSIFICATION	Do not set buildingModel = false here, otherwise the action for selection is performed.
WITHOUT_CLASSIFICATION	prpTodo = createProperty("label.todo-pane", positions, TabToDo.class); prpProperties = createProperty("label.properties-pane", positions, TabProps.class); prpDocumentation = createProperty("label.documentation-pane", positions, TabDocumentation.class); prpStyle = createProperty("label.style-pane", positions, TabStyle.class); prpSource = createProperty("label.source-pane", positions, TabSrc.class); prpConstraints = createProperty("label.constraints-pane", positions, TabConstraints.class); prpTaggedValues = createProperty("label.tagged-values-pane", positions, TabTaggedValues.class); Property[] propertyList = new Property[] { prpTodo, prpProperties, prpDocumentation, prpStyle, prpSource, prpConstraints, prpTaggedValues, }; Arrays.sort(propertyList); top.add(new JScrollPane(new PropertyTable( propertyList, paneColumnHeader, positionColumnHeader)), BorderLayout.CENTER);
WITHOUT_CLASSIFICATION	Parse the boundary box text. Null is returned if it is empty or invalid, which causes no change. Otherwise we tell GEF we are making a change, make the change and tell GEF we've finished.
WITHOUT_CLASSIFICATION	TODO: Add double click listener
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary1()
WITHOUT_CLASSIFICATION	@see javax.swing.plaf.metal.MetalTheme#getPrimary1()
WITHOUT_CLASSIFICATION	if the current shortcut has been set but is void, then the current shortcut is not set --> then the default value does not change
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	Only show actions for associations not already on diagram
WITHOUT_CLASSIFICATION	2. the profile configuration, holding noneditable applied profiles
WITHOUT_CLASSIFICATION	the text will be set later
WITHOUT_CLASSIFICATION	private static final StereotypeView[] stereotypeViewMap; static { stereotypeViewMap = new StereotypeView[3]; StereotypeView. stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_TEXTUAL] = StereotypeView.TEXTUAL; stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_BIG_ICON] = StereotypeView.BIG_ICON; stereotypeViewMap[DiagramAppearance.STEREOTYPE_VIEW_SMALL_ICON] = StereotypeView.SMALL_ICON; }
WITHOUT_CLASSIFICATION	This class represents all Diagrams within ArgoUML. It is based upon the GEF Diagram.<p> It adds a namespace, and the capability to delete itself when its namespace is deleted. <p> TODO: MVW: I am not sure of the following:<p> The "namespace" of the diagram is e.g. used when creating new elements that are shown on the diagram; they will have their namespace set according this. It is NOT necessarily equal to the "owner". <p> MVW: I doubt all following: The "namespace" of the diagram is e.g. used to register a listener to the UML model, to be notified if this element is removed; which will imply that this diagram has to be deleted, too. <p> Hence the namespace of e.g. a collaboration diagram should be the represented classifier or, in case of a represented operation, the classifier that owns this operation. And the namespace of the statechart diagram should be the namespace of its statemachine.
WITHOUT_CLASSIFICATION	The fix
WITHOUT_CLASSIFICATION	A binary association is not a node so reject.
WITHOUT_CLASSIFICATION	Make all the parts match the main fig
WITHOUT_CLASSIFICATION	and the stereotypes of its features
WITHOUT_CLASSIFICATION	stereotype fig covers the name fig:
WITHOUT_CLASSIFICATION	Notation settings are different since, we know that, at a minimum, the isShowPath() setting can change because with implement PathContainer, so we make sure that we have a private copy of the notation settings.
WITHOUT_CLASSIFICATION	null elements represent new constraints, which will be added to the target the first time any actual editing takes place. This is done to ensure syntactical correctness of constraints stored with the target.
WITHOUT_CLASSIFICATION	Mutators hold write lock & will deadlock if use is not thread safe
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	Constructor for a {@link FigClass} during file load.<p> Parent {@link org.argouml.uml.diagram.ui.FigNodeModelElement} will have created the main box {@link #getBigPort()} and its name {@link #getNameFig()} and stereotype (@link #getStereotypeFig()}. This constructor creates a box for the attributes and operations.<p> The properties of all these graphic elements are adjusted appropriately. The main boxes are all filled and have outlines. TODO: which is wrong, since the bigPort is filled, too. @param element model element to be represented by this fig. @param bounds rectangle describing bounds @param settings rendering settings
WITHOUT_CLASSIFICATION	When this is called from PGMLStackParser.attachEdges, we finished the initialization of owning pseudo element (CommentEdge)
WITHOUT_CLASSIFICATION	Do nothing by default.
WITHOUT_CLASSIFICATION	Override superclass to do nothing. Fill property cannot be changed.
WITHOUT_CLASSIFICATION	Override superclass to do nothing. Fill property cannot be changed.
WITHOUT_CLASSIFICATION	A Fig designed to be the child of some FigNode or FigEdge to display the stereotypes of the model element represented by the parent Fig. Currently, multiple stereotypes are shown stacked one on top of the other, each enclosed by guillemets.<p> The minimum width of this fig is the largest minimum width of its child figs. The minimum height of this fig is the total minimum height of its child figs.<p> The owner of this Fig is the UML element that is extended with the stereotypes. We are listening to changes to the model: addition and removal of stereotypes. <p> This fig supports showing one keyword as the first "stereotype" in the list. <p> There is no way to remove a keyword fig, once added. <p> TODO: Allow for UML2 style display where all stereotypes are displayed in the same guillemet pair and are delimited by commas. The style should be changeable by calling getOrientation(Orientation). The swidget Orientation class can be used for this. @author Bob Tarling
WITHOUT_CLASSIFICATION	The source of an association end should not be the classifier. If it is the user has drawn the wrong way round so we swap here.
WITHOUT_CLASSIFICATION	We want to maintain a minimum width for the fig. Also, add the border dimensions to the minimum space required for its contents:
WITHOUT_CLASSIFICATION	Make sure we don't try to set things smaller than the minimum
WITHOUT_CLASSIFICATION	If requested height equals needed height then do nothing; it fits exactly.
WITHOUT_CLASSIFICATION	LOG.log(Level.FINE, "Slope = " + theta / Math.PI + "PI " + theta / Math.PI 180.0);
WITHOUT_CLASSIFICATION	Test-case for the above code: Draw a class. Create a stereotype for it by clicking on the prop-panel tool, and name it. Remove the class from the diagram. Drag the class from the explorer on the diagram. Select the stereotype in the explorer, and change its name in the prop-panel to something longer. The longer name does not make the class Fig wider unless the above code is added.
WITHOUT_CLASSIFICATION	If we have no source and dest connector then we assume this is load of an old UML1.4 diagram from before this data was saved in PGML. For UML1.4 we can assume the source is first connection and destination is last connection stored in repository for this association.
WITHOUT_CLASSIFICATION	Note that "multiplicity" is what is the notation is listening for in UML1.4 "uppervalue" are listened to in UML2. It is not currently why it is not required to register for "lowerValue" also.
WITHOUT_CLASSIFICATION	Some subclasses will try to use this
WITHOUT_CLASSIFICATION	FigClass calls setBoundsImpl before we set the stereotypeFigProfileIcon
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	TODO: Use per-project undo manager, not global
WITHOUT_CLASSIFICATION	Perhaps something like the following would workd. If not, then traverse up the component hierarchy to a MultEditorPane Rectangle drawingArea = Globals.curEditor().getJComponent().getVisibleRect();
WITHOUT_CLASSIFICATION	Default implementation is to do nothing
WITHOUT_CLASSIFICATION	/ Methods that implement the GraphModel itself /
WITHOUT_CLASSIFICATION	/ Methods that implement the VetoableChangeListener interface /
WITHOUT_CLASSIFICATION	Only interested in the "ownedElement" property. Either something has been added to the namespace for this model, or removed. In the latter case the "something" will be in the old value of the property, which is the collection of owned elements, and the new value will be the element import describing the model element and the model from which it was removed
WITHOUT_CLASSIFICATION	The figs for the two end nodes
WITHOUT_CLASSIFICATION	The figs for the two end nodes
WITHOUT_CLASSIFICATION	Private utility routine to work out the (positive) x coordinate of a point on an oval, given the radii and y coordinate.<p> TODO: Use this to calculate the separator lines! @param a radius in X direction @param b radius in Y direction @param y Y coordinate @return Positive X coordinate for the given Y coordinate
WITHOUT_CLASSIFICATION	the responsibility of determining if the given target is a correct one for this tab has been moved from the DetailsPane to the member tabs of the details pane. Reason for this is that the details pane is configurable and cannot know what's the correct target for some tab.
WITHOUT_CLASSIFICATION	If the diagram is empty, GEF won't write anything, leaving us with an empty (and invalid) file. Handle this case ourselves to prevent this from happening.
WITHOUT_CLASSIFICATION	NOTE: GEF's GIF writer uses Jeff Poskanzer's GIF encoder, but that saves a copy of the entire image in an internal buffer before starting work, defeating the whole purpose of our incremental rendering.
WITHOUT_CLASSIFICATION	Expressions are DataTypes, not independent model elements be careful not to reuse them
WITHOUT_CLASSIFICATION	TODO: The next text was copied - to adapt. Sets the target. If the old target is an UML Element, it also removes the model from the element listener list of the target. If the new target is an UML Element, the model is added as element listener to the new target. <p> This function is called when the user changes the target. Hence, this shall not result in any UML model changes.<p> This function looks a lot like the one in UMLComboBoxModel2. <p> As a possible future extension, we could allow listening to other model elements. @param theNewTarget the new target
WITHOUT_CLASSIFICATION	fire all of the status events
WITHOUT_CLASSIFICATION	fire all of the profile events
WITHOUT_CLASSIFICATION	verify isRelevant returns true
WITHOUT_CLASSIFICATION	DesignGoalsCM checks if the critic isRelevantToGoals of the Designer this value is always true for the Critic base class so DesignerGoal should always return true in this condition
WITHOUT_CLASSIFICATION	update the priority of the critic to be the same priority as the decision
WITHOUT_CLASSIFICATION	check that the model was initialized with one goal
WITHOUT_CLASSIFICATION	number of goals should now be 0
WITHOUT_CLASSIFICATION	Arbitrary settings - not used used for testing
WITHOUT_CLASSIFICATION	FigAssociationRole figassociationrole = new FigAssociationRole();
WITHOUT_CLASSIFICATION	initialize basic parameters that are different from Decision.UNSPEC
WITHOUT_CLASSIFICATION	verify parameters were initialized correctly by the constructor
WITHOUT_CLASSIFICATION	verify the name property was correctly updated
WITHOUT_CLASSIFICATION	following the update the priority should be equivalent to Decision.UNSPEC
WITHOUT_CLASSIFICATION	test that the category and description are correct
WITHOUT_CLASSIFICATION	update the values
WITHOUT_CLASSIFICATION	verify SnoozeOrder starts off not snoozed
WITHOUT_CLASSIFICATION	snooze and verify its been enabled
WITHOUT_CLASSIFICATION	snooze and verify its been enabled
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	test with a class and class diagram
WITHOUT_CLASSIFICATION	pce = (PropertyChangeEvent) rxdEvent.getSource(); assertTrue("Wrong event name", pce.getPropertyName().equals( DiagramAppearance.KEY_DEFAULT_SHADOW_WIDTH.getKey())); String value = (String) pce.getOldValue(); int i = Integer.parseInt(value); assertTrue("Wrong old event value", i == 4); assertTrue("Wrong new event value", ((String) pce.getNewValue()).equals("2"));
WITHOUT_CLASSIFICATION	Change things
WITHOUT_CLASSIFICATION	Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	Assert that the copy isn't modified when the source changes
WITHOUT_CLASSIFICATION	Create a different client to bind to the same supplier
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	success
WITHOUT_CLASSIFICATION	This comment was included in a previous version (before 1/2005) of the test which had this assertion commented out: ------ Interaction should not be removed when removing ClassifierRole... maybe if the last message is removed from the interaction but even then it's doubtfull since it will probably lead to backward compatibility problems in save formats. ------ but my reading of the UML 1.4 specification is that an Interaction without at least one message is definitely illegal, so MDR is doing the right thing by removing it in this case where we only have a single message, which then gets deleted. - tfm
WITHOUT_CLASSIFICATION	Get a list of UML metaclass names from the XMI document. <p> Though some of the DOM methods such as getAttributes may return null values under other conditions, in the context of this test and assuming a valid XMI file none should occur. <p> Hence there is no special checking for those abnormal cases, allowing the test to fail simply with a NullPointerException, with this comment indicating that either the input data is incorrect or the test needs to be improved.
WITHOUT_CLASSIFICATION	Test creating modelelements from a given notation, and then re-generate the notation-string again, and check if they are equal. Some of these tests are not very usefulll, since they may fail on white space differences. TODO: White space should best be ignored.
WITHOUT_CLASSIFICATION	changing the sequence only
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	ok
WITHOUT_CLASSIFICATION	Make sure the contents match what we expect
WITHOUT_CLASSIFICATION	Make sure we got what we started with
WITHOUT_CLASSIFICATION	Clean up our model and the extent that we read profile in to
WITHOUT_CLASSIFICATION	expected
WITHOUT_CLASSIFICATION	TODO: the following fails due to the XMI writing saving all top level model elements and because even if there was no empty project, by creating a class, the undo mechanism in the project manager will force the creation of an empty project. assertEquals(1, profileModels.size());
WITHOUT_CLASSIFICATION	we recalculate all the activations
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$ $NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
WITHOUT_CLASSIFICATION	$NON-NLS-1$
DEFECT	TODO: Huge side effect. Hoist out of parse - tfm let's load the project
DEFECT	TODO: This should only be building list up to 'index'
DEFECT	FIXME: Boundary condition at end of image for non-integral multiples of BUFFER_HEIGHT
DEFECT	TODO: We don't really want to do the following, but I'm not sure what depends on it - tfm - 20070725
DEFECT	TODO: We can't have a global "current" language NotationProviderFactory2.setCurrentLanguage(oldLanguage);
DEFECT	TODO: Use Model.getModelManagementHelper().getPathList(modelElement); TODO: This will fail with nested Models
DEFECT	TODO: We should have all the information that is required in the NotationSettings object
DEFECT	TODO: This whole block can be deleted when issue 6266 is resolved
DEFECT	Dirty fix for issue 1758 (Needs to be amended when we start supporting parameters):
DEFECT	TODO: This does not work! (MVW) Model.getFacade().setBody(expr,guard); Model.getFacade().setExpression(g,expr);
DEFECT	TODO: In this case, the properties panel is not updated with the changed expression!
DEFECT	WARNING: the OutputStream version of this doesn't work! - tfm
DEFECT	WARNING: The GEF implementation of the OutputStream version of this method doesn't work - tfm - 20070531
DEFECT	TODO: Not implemented by eUML
DEFECT	TODO: The below is not strictly correct, but should cover the case we deal with. Using a real XML parser would be better. Look for XML document has just a single root element
DEFECT	This will have problems if the smallest possible data segment is smaller than the size of the buffer needed for regex matching
DEFECT	TODO: Why is this throwing a generic runtime exception?!?!
DEFECT	TODO: This exception will be thrown during autoscrolling when the edge of the canvas is reached causing either the width or height to be "adjusted" to a negative value
DEFECT	TODO: This exception will be thrown during autoscrolling when the edge of the canvas is reached causing either the width or height to be "adjusted" to a negative value
DEFECT	Disabled since it gives various problems: e.g. the toolbar icons get too wide. Also the default does not give the new java 5.0 looks. Component tree = ProjectBrowser.getInstance(); SwingUtilities.updateComponentTreeUI(SwingUtilities.getRootPane(tree));
DEFECT	TODO: This error needs to be reported!
DEFECT	TODO: - should save and restore the last positions of the toolbars
DEFECT	TODO: Does anyone use command line? If so, localization is needed - tfm
DEFECT	TODO: We should be giving the user more direct feedback
DEFECT	TODO: Allow adding models to a diagram - issue 4172.
DEFECT	TODO: The following can be removed if selectAll gets fixed
DEFECT	TODO: Update the old and new node above this! This is issue 5079. The old and new UML namespaces are in the event, but how do we know which nodes to refresh? And how to refresh? Not necessarily the namespaces, depending on the perspective.
DEFECT	Many many of these events .. this slows things down:
DEFECT	TODO: The following rather than the above is probably the correct way to search stereo = findStereotype(obj, null, name);
DEFECT	Really ought to have a CriticException to throw here.
DEFECT	Really ought to have a CriticException to throw here.
DEFECT	TODO: This is only checking immediate siblings when it needs to be checking all imported elements both here and by our parents and also taking into account visibility
DEFECT	There is a possibility that the next step forward takes another path in this wizard. To allow for this we must destroy the path already traveled by. <p> TODO: I (Linus) would say that this is really a problem with the Wizard implementation since I believe it should be possible to explore a path in the wizard and then go back. {@inheritDoc}
DEFECT	TODO: {name} is not expanded for diagram objects
DEFECT	TODO: {name} is not expanded for diagram objects
DEFECT	TODO: algorithm is n^2 in number of nodes
DEFECT	A critic to detect when a classifier has to many operations). <p> TODO: exclude getter and setter operations from count
DEFECT	TODO: This is never executed as Ludos DI work was never finished.
DEFECT	Offset in x & y for depth perspective lines of cube. TODO: This is the same value as the member 'D'in {@link org.tigris.gef.presentation.FigCube}, but there is nothing enforcing that correspondence. Things will probably break if they don't match.
DEFECT	Class to display graphics for a UML SynchState in a diagram. <p> TODO: If the font increases, the circle should grow, too. @author pepargouml@yahoo.es
DEFECT	TODO: This is probably an undesirable side effect unless the user confirms it. Placing an element on a second diagram is going to potentially change its namespace. - tfm 20061208
DEFECT	TODO: assumes public TODO: This is probably an undesirable side effect unless the user confirms it. Placing an element on a second diagram is going to potentially change its namespace. - tfm 20061208
DEFECT	Rank the nodes depending on their level (position in hierarchy) and set their weight to achieve a proper node-sequence for the layout. Rows exceeding the maximum row width are split, if standalone nodes are available. <p> Weight the other nodes to determine their columns. <p> TODO: Weighting doesn't appear to be working as intended because multiple groups of children/specializations get intermixed in name order rather than being grouped by their parent/generalization. - tfm - 20070314
DEFECT	Status as of Nov. 2008 - Figs created, property panels exist, more work required on explorer and assumptions about models not being nested - tfm
DEFECT	TODO: This code doesn't look like it will get reached because any abstraction/realization is going to take the isAAbstraction leg of the if before it gets to this more general case. - tfm 20080508
DEFECT	TODO: make setBounds, calcBounds and updateBounds consistent
DEFECT	A Mode to interpret user input while creating a permission edge. The permission can connect any model elements including those represented by edges as well as nodes. <p> TODO: In UML 2.x, Permission becomes PackageImport and the class hierarchy has changed so that it is no longer a subtype of Dependency, so this may need to be refactored to work correctly.
DEFECT	TODO: The size of text figs, which is what we care about most, isn't computed correctly by GEF. If we got ambitious, we could recompute a proper size ourselves.
DEFECT	TODO: Why isn't this calculation for location working?
DEFECT	TODO: This should probably only update the project when the user presses Return or focus is lost
DEFECT	TODO: If ActionCopy is no longer a singleton, how shall this work?
DEFECT	TODO: Support navigability. The code below causes and exception in FigAssociationEndAnnotation.
DEFECT	TODO: We currently don't support per-fig settings for most stuff, so we can just use the defaults that we were given. settings = new DiagramSettings(renderSettings);
DEFECT	Utility function to localize the given string with help text, and show it in the status bar of the ArgoUML window. This function is used in favour of the inline call to enable later improvements; e.g. it would be possible to show a help-balloon. <p> TODO: Work this out. One matter to possibly improve: show multiple lines. @param s the given string to be localized and shown
DEFECT	TODO: Why is this clearing the name?!?! - tfm
DEFECT	TODO: The code implementing this method is from 2003 (see issue 2171) - mechanically integrated by tfmorris in May 2007. Needs to be reviewed/updated. @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement method for changing text of Message
DEFECT	TODO: The code implementing this method is from 2003 (see issue 2171) - mechanically integrated by tfmorris in May 2007. Needs to be reviewed/updated. @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement method for changing text of Message @param newOwner @param parameter
DEFECT	TODO: We should warn the user we have removed something - tfm
DEFECT	TODO: We don't really want this to be filled, but if it's not then the user can't double click in the compartment to add a new literal Apparently GEF thinks unfilled figs are only selectable by border setFilled(false);
DEFECT	Update attached node figures TODO: Presumably this should only happen on a add or remove event
DEFECT	TODO: Shouldn't we throw an exception here?!?!
DEFECT	TODO: Not yet working for UML2
DEFECT	TODO: Monitor is getting dismissed before layout is complete
DEFECT	TODO: This appears to expect that the UML 1.3 tag name will appear as a property name in an event, but with the UML 1.4 switch to TagDefinitions, this won't work
DEFECT	This does not work (anymore/yet?), since we never have a FigText here:
DEFECT	The next line does not work:
DEFECT	TODO: This does not work - no event arrives.
DEFECT	TODO: If this is an ordered list, then you have to add in the right location!
DEFECT	TODO: Considering all delete events to be valid like below is going to cause lots of unecessary work and some problems
DEFECT	Set the child components to the heights in the array list calculating the height of any proportional component on the fly. FIXME - This assumes that the JLabel and the component it labels have been added to the parent component consecutively.
DEFECT	TODO: The above statement also refreshes when we are not shown (to be verified) - hence not entirely correct.
DEFECT	TODO: If this is an ordered list, then you have to add in the right location!
DEFECT	TODO: Considering all delete events to be valid like below is going to cause lots of unecessary work and some problems
DEFECT	TODO: This is a tagged value name which will never trigger an event
DEFECT	TODO: correctly implement next function in the model subsystem for issue 1942:
DEFECT	Tests CopyHelper without using stereotypes. <p> The test is using the tree of objects: <pre> model / \ p1 p2 / \ class_ nestedPackage \ interface_ \ attribute </pre> TODO: This test doesn't match the MDR implementation because it expects the contents of a namespace to be copied. It is disabled until it can be fixed to run with both MDR and eUML. - tfm 20070820 @author Bogdan
DEFECT	TODO: This doesn't work, but should Collection elements = Model.getFacade().getRootElements(); Model.getUmlHelper().deleteCollection(elements); elements = Model.getFacade().getRootElements(); assertTrue("Failed to create clean environment", elements.isEmpty());
DEFECT	TODO: Except this won't work because the names are different which will cause a test in CheckUMLModelHelper to fail remap.put("Core:Permission", "Core:PackageImport");
DEFECT	TODO: Why does the next part not work?
DEFECT	FIXME: fails here. The current behavior appears intentional (ie the test is wrong) - tfm assertNull("The profile stereotype named \"" + ProfileMother.STEREOTYPE_NAME_ST + "\" shouldn't be found.", findModelElementFromNamespace( StereotypeUtility.getAvailableStereotypes(aClass), ProfileMother.STEREOTYPE_NAME_ST, profileModel));
DEFECT	FIXME: the following throws: org.argouml.model.InvalidElementException: javax.jmi.reflect.InvalidObjectException: Object with MOFID 127-0-1-1-(...)000E75 no longer exists. applicableTagDefs = tagDefCBModel.getApplicableTagDefinitions(aClass); assertNotNull("Tag Definition wasn't found in return value of " + "tagDefCBModel.getApplicableTagDefinitions(aClass), " + "after loading the project.", TestStereotypeUtility.findModelElementNamed( ProfileMother.TAG_DEFINITION_NAME_TD, applicableTagDefs));
DEFECT	TODO: Something might go wrong during processing. We don't really want to create the model element until the user releases the mouse in the place expected.
DEFECT	TODO: We can't have a global "current" language NotationProviderFactory2.setCurrentLanguage(newLanguage);
DEFECT	TODO: This works for 90 degree angles, but is suboptimal for other angles. It should reflect the angle, rather than just using a negative offset along the same vector
DEFECT	If we are not visible most likely we're being deleted. TODO: This indicates a more fundamental problem that should be investigated - tfm - 20061230
DEFECT	TODO i18n: GEF needs to pass us back the description of what is being done.
DEFECT	TODO: synchronized is required here as there can be some concurrent modification problems when drawing a call message and having that automatically draw the reply. Maybe fixing the TODO below will resolve this and the synch can go.
DEFECT	TODO: Is this next line safe? What happens if there is just one comment edge or a comment edge and a single message?
DEFECT	else if the y coordinate is outside of the classifier role, we fix the y in the max y of the classifier role. FIXME: We should increase the height of the classifier role, don't???
DEFECT	TODO: not in UML 2
DEFECT	TODO: Only occurrence of isConcurrent in UML 2.1.1 is in index it's not on the page that is indexed
DEFECT	TODO: map UML2 names to UML1.x names $NON-NLS-1$ $NON-NLS-1$
DEFECT	TODO: In UML2.x Event has no parameters. TODO: Treat ObjectFlowState (this doesn't exist anymore in UML2) and Classifier
DEFECT	Appears to be gone from UML 2.x
DEFECT	This doesn't work in UML2: both owner and property needed!
DEFECT	This triggers some warnings (in logs) because some elements are created without an owner (and eResource is null) TODO: fix this The warning log (if we would not add the EObject to a resource) would looks like this: "...WARN [AWT-EventQueue-0] Encountered deleted object during delete of..."
DEFECT	FIXME: depends on internal behavior of XmiReaderImpl. Needed for solving issue 5017.
DEFECT	TODO: This looks backwards. Left over from issue 2034?
DEFECT	if this is a feature get the owner of that feature TODO: Does anything actually make use of this? It can cause unexpected behaviour.
DEFECT	TODO: This should be using internalGetAllRealizedInterfaces()
DEFECT	TODO: Issue 6144. It is proposed to allow any paclage to return as a potential namespace. Commenting out until this is reviewed and clearly accepted by all.
DEFECT	Strange, but the Link.getConnection() returns a Collection, not a List! This is a bug, compared to the UML standard (IMHO, mvw). Hence, the LinkEnd is added to the end instead...
DEFECT	TODO: uncomment the following to get the failure. assertLoadModel(ISSUE5946_BASE_DIR + "zipped-uml14" + "/andromda-profile-datatype/3.3/andromda-profile-datatype-3.3.xml.zip", null, "testReadCompressedAndroMDAProfileFileIssue5946");
DEFECT	if we have anything or multiple elements selected, we don't do anything TODO: We need to support multiple selection. See issue 2552: http:argouml.tigris.org/issues/show_bug.cgi?id=2552
DEFECT	These next lines for the case that the current namespace is not a valid one... Which of course should not happen, but it does - see the project attached to issue 3772.
DEFECT	make it stretch vertically TODO: The curBody must notify modification
DEFECT	TODO: Removed from UML2 $NON-NLS-1$
DEFECT	TODO: Considering all delete events to be valid like below is going to cause lots of unecessary work and some problems
DEFECT	TODO: When the attribute isn't in the diagram , for exemple: select attribut by Explorer Then, the refresh isn't auto: we had to click !!
DEFECT	Builds a message within some interaction related to some assocationrole. The message is added as the last in the interaction sequence. Furthermore, the message is added as the last to the list of messages already attached to the role. Effectively, the already attached messages become predecessors of this message. TODO: This sets the activator as a side effect. However it is impossible to determine the activator at this stage as we don't yet know what the action will be of the message we're creating. See issue 5692. @param inter The Interaction. @param role The Association Role. @return The newly created Message.
DEFECT	XXX this seems to be a bug of the parser, it always requires a context
DEFECT	If we are not visible most likely we're being deleted. TODO: This indicates a more fundamental problem that should be investigated - tfm - 20061230
DEFECT	TODO: This brute force approach of updating listeners on each and every event, without checking the event type or any other information is going to cause lots of InvalidElementExceptions in subclasses implementations of updateListeners (and they won't have the event information to make their own decisions)
DEFECT	else if the y coordinate is outside of the classifier role, we fix the y in the max y of the classifier role. FIXME: We should increase the height of the classifier role, don't???
DEFECT	TODO: This doesn't perform well enough with large models to have it enabled by default. If the performance can't be improved, perhaps we can introduce a manual "find in explorer tree" action. selectAll(targets);
DEFECT	TODO: This only works if the item is visible (all its parents are expanded) getExpandedDescendants, makeVisible
DEFECT	TODO: Make the tree refresh and expand really work in all cases!
DEFECT	TODO: The code implementing this method is from 2003 (see issue 2171) - mechanically integrated by tfmorris in May 2007. Needs to be reviewed/updated. @author Decki,Endi,Yayan, Politechnic of Bandung. Computer Departement method for changing text of Message @param newOwner model element which should now be listened to
DEFECT	TODO do tests for allInstances (8.5.11), even though it is not yet supported
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	TODO: not in UML 2
DEFECT	Parse a transition description line of the form:<pre> "event-signature [guard-condition] / action-expression". </pre> A ";" is not interpreted as having any special meaning. <p> The "event-signature" may be one of the 4 formats:<ul> <li> ChangeEvent: "when(condition)" <li> TimeEvent: "after(duration)" <li> CallEvent: "a(parameter-list)". <li> SignalEvent: any string without (). </ul> Remark: The UML standard does not make a distinction between the syntax of a CallEvent and SignalEvent: both may have parameters between (). For simplicity and user-friendliness, we chose for this distinction. If a user wants parameters for a SignalEvent, then he may add them in the properties panels, but not on the diagram. <p> An alternative solution would be to create a CallEvent by default, and when editing an existing event, do not change the type.<p> TODO: This function fails when the event-signature contains a "[" or a "/". See issue 5983 for other cases that were a problem in the past. @param trans the transition object to which this string applies @param s the string to be parsed @return the transition object @throws ParseException when no matching [] are found
WITHOUT_CLASSIFICATION	test out the optimizer:
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	| this | bean | args | raw bean |
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	astore 4 store the raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	invokeinterface invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	putfield new value of the field
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	just decrement the lock, don't recache (we don't know which transaction won)
WITHOUT_CLASSIFICATION	decode row selection...
WITHOUT_CLASSIFICATION	disassembled state gets put in a new array (we write to cache by value!)
WITHOUT_CLASSIFICATION	again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	CHECK
WITHOUT_CLASSIFICATION	ROW ID
WITHOUT_CLASSIFICATION	COMPOSITE-ID
WITHOUT_CLASSIFICATION	DISCRIMINATOR
WITHOUT_CLASSIFICATION	Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);
WITHOUT_CLASSIFICATION	DYNAMIC INSERT
WITHOUT_CLASSIFICATION	PERSISTER
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	PROPERTIES
WITHOUT_CLASSIFICATION	PROPERTIES
WITHOUT_CLASSIFICATION	generated properties can never be insertable...
WITHOUT_CLASSIFICATION	TABLE
WITHOUT_CLASSIFICATION	by default, natural-ids are "immutable" (constant)
WITHOUT_CLASSIFICATION	( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);
WITHOUT_CLASSIFICATION	we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result
WITHOUT_CLASSIFICATION	Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...
WITHOUT_CLASSIFICATION	private boolean showSql; private boolean formatSql;
WITHOUT_CLASSIFICATION	public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }
WITHOUT_CLASSIFICATION	Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use
WITHOUT_CLASSIFICATION	final List extendsQueue,
WITHOUT_CLASSIFICATION	If close() is called, guarantee unbind()
WITHOUT_CLASSIFICATION	if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.
WITHOUT_CLASSIFICATION	on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	60 second lock timeout
WITHOUT_CLASSIFICATION	OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	option.setDataVersion( NonLockingDataVersion.INSTANCE );
WITHOUT_CLASSIFICATION	do the put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	do the failfast put outside the scope of the JTA txn
WITHOUT_CLASSIFICATION	NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated
WITHOUT_CLASSIFICATION	protected RegionRootListener listener;
WITHOUT_CLASSIFICATION	Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)
WITHOUT_CLASSIFICATION	For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)
WITHOUT_CLASSIFICATION	The rest only matters for optimistic locking, where we need to establish the proper data version on the region root
WITHOUT_CLASSIFICATION	Don't hold a transactional lock for this
WITHOUT_CLASSIFICATION	Make sure the root node for the region exists and has a DataVersion that never complains
WITHOUT_CLASSIFICATION	Never evict this node
WITHOUT_CLASSIFICATION	Fix up the resident flag
WITHOUT_CLASSIFICATION	60 seconds
WITHOUT_CLASSIFICATION	We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	no-op. We don't own the cache so we shouldn't stop it.
WITHOUT_CLASSIFICATION	This should only be possible if the caches are constructor injected
WITHOUT_CLASSIFICATION	We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted
WITHOUT_CLASSIFICATION	Set up the cache factory
WITHOUT_CLASSIFICATION	See if the user configured a multiplexer stack
WITHOUT_CLASSIFICATION	Default to collections sharing entity cache if there is one
WITHOUT_CLASSIFICATION	Default to sharing the entity cache if there is one
WITHOUT_CLASSIFICATION	For Timestamps, we default to a separate config
WITHOUT_CLASSIFICATION	We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that
WITHOUT_CLASSIFICATION	Configure the cache to use our TM
WITHOUT_CLASSIFICATION	Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start
WITHOUT_CLASSIFICATION	Make sure we don't re-release the same cache
WITHOUT_CLASSIFICATION	We use a different delegate than the non-optimistic superclass default
WITHOUT_CLASSIFICATION	Following methods we don't delegate since they have so little logic it's clearer to just implement them here
WITHOUT_CLASSIFICATION	If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation
WITHOUT_CLASSIFICATION	We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication
WITHOUT_CLASSIFICATION	Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit
WITHOUT_CLASSIFICATION	Double check the distributed cache
WITHOUT_CLASSIFICATION	Get an exclusive right to update JBC for this key from this node.
WITHOUT_CLASSIFICATION	We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	Initial load from JBC
WITHOUT_CLASSIFICATION	See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase
WITHOUT_CLASSIFICATION	We ensure ASYNC semantics (JBCACHE-1175)
WITHOUT_CLASSIFICATION	If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer
WITHOUT_CLASSIFICATION	The standard comparator types are not Serializable but are singletons
WITHOUT_CLASSIFICATION	ignore!
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	construct the cache
WITHOUT_CLASSIFICATION	local cache, so we use synchronization
WITHOUT_CLASSIFICATION	local cache, so we use synchronization
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.
WITHOUT_CLASSIFICATION	DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));
WITHOUT_CLASSIFICATION	TRUE if the pool is borrowed from the outside, FALSE if we used to create it
WITHOUT_CLASSIFICATION	get a connection from the pool (thru DriverManager, cfr. Proxool doc)
WITHOUT_CLASSIFICATION	set the Transaction Isolation if defined
WITHOUT_CLASSIFICATION	toggle autoCommit to false if set
WITHOUT_CLASSIFICATION	return the connection
WITHOUT_CLASSIFICATION	Get the configurator files (if available)
WITHOUT_CLASSIFICATION	Default the Proxool alias setting
WITHOUT_CLASSIFICATION	Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	Set the existing pool flag to true
WITHOUT_CLASSIFICATION	Configured using the JAXP Configurator
WITHOUT_CLASSIFICATION	Validate that an alias name was provided to determine which pool to use
WITHOUT_CLASSIFICATION	Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	Append the stem to the proxool pool alias
WITHOUT_CLASSIFICATION	Configured using the Properties File Configurator
WITHOUT_CLASSIFICATION	Remember Isolation level
WITHOUT_CLASSIFICATION	If the provider was leeching off an existing pool don't close it
WITHOUT_CLASSIFICATION	We have created the pool ourselves, so shut it down
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	not really a many-to-one association necessarily
WITHOUT_CLASSIFICATION	always overwrite nonversioned data
WITHOUT_CLASSIFICATION	public Currency getCurrency(int col) throws HibernateException;
WITHOUT_CLASSIFICATION	default is POJO
WITHOUT_CLASSIFICATION	use setParameter for null values
WITHOUT_CLASSIFICATION	use setParameter for null values
WITHOUT_CLASSIFICATION	private CacheEntry cacheEntry;
WITHOUT_CLASSIFICATION	Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array
WITHOUT_CLASSIFICATION	this entity defines proeprty generation, so process those generated values...
WITHOUT_CLASSIFICATION	have the entity entry perform post-update processing, passing it the update state and the new version (if one).
WITHOUT_CLASSIFICATION	!persister.isCacheInvalidationRequired()
WITHOUT_CLASSIFICATION	need to look it up from the persistence-context
WITHOUT_CLASSIFICATION	sort first by role name
WITHOUT_CLASSIFICATION	Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!
WITHOUT_CLASSIFICATION	then by fk
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)
WITHOUT_CLASSIFICATION	this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner
WITHOUT_CLASSIFICATION	boolean put = persister.getCache().insert(ck, cacheEntry);
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	do nothing - we only need to notify the cache...
WITHOUT_CLASSIFICATION	sort first by entity name
WITHOUT_CLASSIFICATION	then by id
WITHOUT_CLASSIFICATION	to be safe...
WITHOUT_CLASSIFICATION	no transformations took place, so handle it as we would a non-instrumented class
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	see if the entry represents a class file
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	test out the optimizer:
WITHOUT_CLASSIFICATION	set the name of bulk accessor.
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	invokespecial
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	aload_1 load bean
WITHOUT_CLASSIFICATION	checkcast cast bean
WITHOUT_CLASSIFICATION	astore_3 store bean
WITHOUT_CLASSIFICATION	aload_2 args
WITHOUT_CLASSIFICATION	iconst_i continue to aastore growing stack is 1
WITHOUT_CLASSIFICATION	new
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	aload_3 load the raw bean
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	aastore args
WITHOUT_CLASSIFICATION	| this | bean | args | i | raw bean | exception |
WITHOUT_CLASSIFICATION	required to exception table iconst_0 i
WITHOUT_CLASSIFICATION	istore_3 store i
WITHOUT_CLASSIFICATION	aload_1 load the bean
WITHOUT_CLASSIFICATION	checkcast cast the bean into a raw bean
WITHOUT_CLASSIFICATION	current stack len = 0
WITHOUT_CLASSIFICATION	start region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	iinc 3, 1
WITHOUT_CLASSIFICATION	aload 4 load the raw bean
WITHOUT_CLASSIFICATION	aload_2 load the args
WITHOUT_CLASSIFICATION	iconst_i
WITHOUT_CLASSIFICATION	aaload
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast (case of primitive type) invokevirtual (case of primitive type)
WITHOUT_CLASSIFICATION	checkcast (case of reference type)
WITHOUT_CLASSIFICATION	current stack len = 2
WITHOUT_CLASSIFICATION	end region to handling exception (BulkAccessorException)
WITHOUT_CLASSIFICATION	register in exception table
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	aload_0
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokevirtual
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	local variables | target obj | each oldvalue |
WITHOUT_CLASSIFICATION	astore 5 store exception
WITHOUT_CLASSIFICATION	new BulkAccessorException
WITHOUT_CLASSIFICATION	aload 5 load exception
WITHOUT_CLASSIFICATION	iload_3 i
WITHOUT_CLASSIFICATION	invokespecial BulkAccessorException.<init>
WITHOUT_CLASSIFICATION	athrow
WITHOUT_CLASSIFICATION	WARNING: classfile only
WITHOUT_CLASSIFICATION	swallow
WITHOUT_CLASSIFICATION	local variable | this |
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	aload_0 load this
WITHOUT_CLASSIFICATION	getfield get field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	areturn return the value of the field
WITHOUT_CLASSIFICATION	local variables | this | callback |
WITHOUT_CLASSIFICATION	aload_1 load callback
WITHOUT_CLASSIFICATION	putfield put field "$JAVASSIST_CALLBACK" defined already
WITHOUT_CLASSIFICATION	case of non-static field
WITHOUT_CLASSIFICATION	getfield get each field
WITHOUT_CLASSIFICATION	invokeinterface invoke Enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	ifnonnull
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	return each type
WITHOUT_CLASSIFICATION	store_1 each type
WITHOUT_CLASSIFICATION	ldc name of the field
WITHOUT_CLASSIFICATION	load_1 each type
WITHOUT_CLASSIFICATION	invokeinterface invoke Callback.read() each type
WITHOUT_CLASSIFICATION	int
WITHOUT_CLASSIFICATION	return
WITHOUT_CLASSIFICATION	dup
WITHOUT_CLASSIFICATION	invokeinterface
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	checkcast
WITHOUT_CLASSIFICATION	invokeinterface enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	invokeinterface enabled.getInterceptFieldCallback()
WITHOUT_CLASSIFICATION	ifnonnull (label1)
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	load_1
WITHOUT_CLASSIFICATION	putfield
WITHOUT_CLASSIFICATION	return ;
WITHOUT_CLASSIFICATION	ldc field name
WITHOUT_CLASSIFICATION	getfield old value of the field
WITHOUT_CLASSIFICATION	invokeinterface callback.write(..)
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	not array
WITHOUT_CLASSIFICATION	array of reference type
WITHOUT_CLASSIFICATION	boolean
WITHOUT_CLASSIFICATION	byte
WITHOUT_CLASSIFICATION	char
WITHOUT_CLASSIFICATION	short
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	reference type
WITHOUT_CLASSIFICATION	double
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	float
WITHOUT_CLASSIFICATION	long
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	bad type
WITHOUT_CLASSIFICATION	boolean, byte, char, int, short
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	Mainly for OSCache
WITHOUT_CLASSIFICATION	decrement the lock
WITHOUT_CLASSIFICATION	create new lock that times out immediately
WITHOUT_CLASSIFICATION	recache the updated state
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	null clientLock is remotely possible but will never happen in practice
WITHOUT_CLASSIFICATION	we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp
WITHOUT_CLASSIFICATION	by requiring <, we rely on lock timeout in the case of an unsuccessful update!
WITHOUT_CLASSIFICATION	the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.
WITHOUT_CLASSIFICATION	disassemble positional parameters
WITHOUT_CLASSIFICATION	disassemble named parameters
WITHOUT_CLASSIFICATION	ie. 60 seconds
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	this is called from SettingsFactory irregardless; trivial to simply disregard
WITHOUT_CLASSIFICATION	Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	Do nothing; subclasses may override.
WITHOUT_CLASSIFICATION	throw new UnsupportedOperationException("Can't write to a readonly object");
WITHOUT_CLASSIFICATION	assembled state gets put in a new array (we read from cache by value!)
WITHOUT_CLASSIFICATION	persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load
WITHOUT_CLASSIFICATION	no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	no-op; CCS did not have such a concept
WITHOUT_CLASSIFICATION	again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.
WITHOUT_CLASSIFICATION	again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction
WITHOUT_CLASSIFICATION	classes mentioned in extends not available - so put it in queue
WITHOUT_CLASSIFICATION	get meta's from <hibernate-mapping>
WITHOUT_CLASSIFICATION	get meta's from <class>
WITHOUT_CLASSIFICATION	DB-OBJECTNAME
WITHOUT_CLASSIFICATION	MUTABLE
WITHOUT_CLASSIFICATION	WHERE
WITHOUT_CLASSIFICATION	CHECK
WITHOUT_CLASSIFICATION	POLYMORPHISM
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	ID
WITHOUT_CLASSIFICATION	VERSION / TIMESTAMP
WITHOUT_CLASSIFICATION	DISCRIMINATOR
WITHOUT_CLASSIFICATION	Primary key constraint
WITHOUT_CLASSIFICATION	this is either a <version/> tag with no type attribute, or a <timestamp/> tag
WITHOUT_CLASSIFICATION	for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...
WITHOUT_CLASSIFICATION	DISCRIMINATOR
WITHOUT_CLASSIFICATION	( (Column) discrim.getColumnIterator().next() ).setType(type);
WITHOUT_CLASSIFICATION	go ahead and set the lazy here, since pojo.proxy can override it.
WITHOUT_CLASSIFICATION	DYNAMIC UPDATE
WITHOUT_CLASSIFICATION	IMPORT
WITHOUT_CLASSIFICATION	BATCH SIZE
WITHOUT_CLASSIFICATION	SELECT BEFORE UPDATE
WITHOUT_CLASSIFICATION	OPTIMISTIC LOCK MODE
WITHOUT_CLASSIFICATION	PERSISTER
WITHOUT_CLASSIFICATION	CUSTOM SQL
WITHOUT_CLASSIFICATION	get meta's from <subclass>
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	joined subclasses
WITHOUT_CLASSIFICATION	KEY
WITHOUT_CLASSIFICATION	CHECK
WITHOUT_CLASSIFICATION	CUSTOM SQL
WITHOUT_CLASSIFICATION	properties
WITHOUT_CLASSIFICATION	KEY
WITHOUT_CLASSIFICATION	model.getKey().setType( new Type( model.getIdentifier() ) );
WITHOUT_CLASSIFICATION	TABLENAME
WITHOUT_CLASSIFICATION	join.getKey().setType( new Type( lazz.getIdentifier() ) );
WITHOUT_CLASSIFICATION	PROPERTIES
WITHOUT_CLASSIFICATION	COLUMN(S)
WITHOUT_CLASSIFICATION	column index
WITHOUT_CLASSIFICATION	column unique-key
WITHOUT_CLASSIFICATION	automatically makes a column with the default name if none is specifed by XML
WITHOUT_CLASSIFICATION	for an any
WITHOUT_CLASSIFICATION	insertable simply because that is the user did not specify anything; just override it
WITHOUT_CLASSIFICATION	the user specifically supplied insert="true", which constitutes an illegal combo
WITHOUT_CLASSIFICATION	properties generated on update can never be updateable...
WITHOUT_CLASSIFICATION	updateable only because the user did not specify anything; just override it
WITHOUT_CLASSIFICATION	the user specifically supplied update="true", which constitutes an illegal combo
WITHOUT_CLASSIFICATION	ROLENAME
WITHOUT_CLASSIFICATION	FETCH STRATEGY
WITHOUT_CLASSIFICATION	TABLE
WITHOUT_CLASSIFICATION	tableName = mappings.getNamingStrategy().propertyToTableName( className, path );
WITHOUT_CLASSIFICATION	SORT
WITHOUT_CLASSIFICATION	CUSTOM SQL
WITHOUT_CLASSIFICATION	unsorted, natural, comparator.class.name
WITHOUT_CLASSIFICATION	ORPHAN DELETE (used for programmer error detection)
WITHOUT_CLASSIFICATION	set up second pass
WITHOUT_CLASSIFICATION	an "embedded" component (composite ids and unique) note that this does not handle nested components
WITHOUT_CLASSIFICATION	a nested composite element
WITHOUT_CLASSIFICATION	for an any we will have to use reflection
WITHOUT_CLASSIFICATION	NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy
WITHOUT_CLASSIFICATION	use old (HB 2.1) defaults if outer-join is specified
WITHOUT_CLASSIFICATION	lazy = !join;
WITHOUT_CLASSIFICATION	GENERATOR
WITHOUT_CLASSIFICATION	ID UNSAVED-VALUE
WITHOUT_CLASSIFICATION	VERSION UNSAVED-VALUE
WITHOUT_CLASSIFICATION	not necessarily a unique property reference
WITHOUT_CLASSIFICATION	( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);
WITHOUT_CLASSIFICATION	contained elements:
WITHOUT_CLASSIFICATION	for non-inverse one-to-many, with a not-null fk, add a backref!
WITHOUT_CLASSIFICATION	Bind the where
WITHOUT_CLASSIFICATION	Bind the order-by
WITHOUT_CLASSIFICATION	Bind the filters
WITHOUT_CLASSIFICATION	overriding inherited meta attribute. HBX-621 & HBX-793
WITHOUT_CLASSIFICATION	first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.
WITHOUT_CLASSIFICATION	mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).
WITHOUT_CLASSIFICATION	+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	SessionFactory name:
WITHOUT_CLASSIFICATION	JDBC and connection settings:
WITHOUT_CLASSIFICATION	JDBC and connection settings:
WITHOUT_CLASSIFICATION	Interrogate JDBC metadata
WITHOUT_CLASSIFICATION	user supplied JDBC connections
WITHOUT_CLASSIFICATION	use dialect default properties
WITHOUT_CLASSIFICATION	Transaction settings:
WITHOUT_CLASSIFICATION	SQL Generation settings:
WITHOUT_CLASSIFICATION	Query parser settings:
WITHOUT_CLASSIFICATION	Second-level / query cache:
WITHOUT_CLASSIFICATION	The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default
WITHOUT_CLASSIFICATION	SQL Exception converter:
WITHOUT_CLASSIFICATION	Statistics and logging:
WITHOUT_CLASSIFICATION	settings.setShowSqlEnabled(showSql);
WITHOUT_CLASSIFICATION	settings.setFormatSqlEnabled(formatSql);
WITHOUT_CLASSIFICATION	Schema export:
WITHOUT_CLASSIFICATION	String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );
WITHOUT_CLASSIFICATION	legacy behavior, apply the bridge...
WITHOUT_CLASSIFICATION	maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment
WITHOUT_CLASSIFICATION	if dotted and not load-collection nor return-join regular property
WITHOUT_CLASSIFICATION	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;
WITHOUT_CLASSIFICATION	public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }
WITHOUT_CLASSIFICATION	package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }
WITHOUT_CLASSIFICATION	public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }
WITHOUT_CLASSIFICATION	using local since the inheritedMetas at this point is not the correct map since it is always the empty map
WITHOUT_CLASSIFICATION	private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907
WITHOUT_CLASSIFICATION	protected List extendsQueue;
WITHOUT_CLASSIFICATION	extendsQueue = new ArrayList();
WITHOUT_CLASSIFICATION	componentTuplizerFactory = new ComponentTuplizerFactory();
WITHOUT_CLASSIFICATION	if doc is null, then for whatever reason, the cached file cannot be used...
WITHOUT_CLASSIFICATION	drop them in reverse order in case db needs it done that way...
WITHOUT_CLASSIFICATION	public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }
WITHOUT_CLASSIFICATION	This method may be called many times!!
WITHOUT_CLASSIFICATION	Iterator iterator = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	Iterator iter = extendsQueue.iterator();
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	found
WITHOUT_CLASSIFICATION	settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );
WITHOUT_CLASSIFICATION	private final List extendsQueue;
WITHOUT_CLASSIFICATION	<String, String>
WITHOUT_CLASSIFICATION	<String, String>
WITHOUT_CLASSIFICATION	+ "_" + referencedColumnName not used for backward compatibility
WITHOUT_CLASSIFICATION	Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227
WITHOUT_CLASSIFICATION	orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	orphan delete not supported for EntityMode.DOM4J
WITHOUT_CLASSIFICATION	element = XMLHelper.generateDom4jElement( persister.getNodeName() );
WITHOUT_CLASSIFICATION	needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	maintain correct duplication if loaded in a cartesian product
WITHOUT_CLASSIFICATION	the element has been removed from the set
WITHOUT_CLASSIFICATION	the element has changed
WITHOUT_CLASSIFICATION	Careful: these methods do not initialize the collection.
WITHOUT_CLASSIFICATION	needed so that we remove this collection from the second-level cache
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	override on some subclasses
WITHOUT_CLASSIFICATION	do this bit after setting initialized to true or it will recurse
WITHOUT_CLASSIFICATION	short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither
WITHOUT_CLASSIFICATION	create the collection holding the Orphans
WITHOUT_CLASSIFICATION	collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access
WITHOUT_CLASSIFICATION	iterate over the old list
WITHOUT_CLASSIFICATION	(array==null) ? tempList.size() :
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	(array==null) ? tempList.get(i) :
WITHOUT_CLASSIFICATION	write(); -- doesn't
WITHOUT_CLASSIFICATION	write(); -- doesn't
WITHOUT_CLASSIFICATION	amazingly, these two will work because AbstractCollection uses iterator() to fill the array
WITHOUT_CLASSIFICATION	needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	finally, what it's all about...
WITHOUT_CLASSIFICATION	note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead
WITHOUT_CLASSIFICATION	Anyway, here we implement <set> semantics for a <one-to-many> <bag>!
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	a shortcut if its location didn't change!
WITHOUT_CLASSIFICATION	search for it note that this code is incorrect for other than one-to-many
WITHOUT_CLASSIFICATION	public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}
WITHOUT_CLASSIFICATION	List OPERATIONS:
WITHOUT_CLASSIFICATION	pad with nulls from the current last element up to the new index
WITHOUT_CLASSIFICATION	needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	needed for SOAP libraries, etc
WITHOUT_CLASSIFICATION	from Map
WITHOUT_CLASSIFICATION	from SortedMap
WITHOUT_CLASSIFICATION	inject the data
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	default pool size 20
WITHOUT_CLASSIFICATION	trying via forName() first to be as close to DriverManager's semantics
WITHOUT_CLASSIFICATION	if debug level is enabled, then log the password, otherwise mask it
WITHOUT_CLASSIFICATION	register a cleanup synch
WITHOUT_CLASSIFICATION	wrap the session in the transaction-protection proxy
WITHOUT_CLASSIFICATION	then bind it
WITHOUT_CLASSIFICATION	try to make sure we don't wrap and already wrapped session
WITHOUT_CLASSIFICATION	allow these to go through the the real session no matter what
WITHOUT_CLASSIFICATION	limit the methods available if no transaction is active
WITHOUT_CLASSIFICATION	allow these (deprecated) methods to pass through
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	private String propertyName;
WITHOUT_CLASSIFICATION	public PropertyProjection project() {return Projections.property(getPropertyName());}
WITHOUT_CLASSIFICATION	String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );
WITHOUT_CLASSIFICATION	" collection_ where " +
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	unsupported
WITHOUT_CLASSIFICATION	cannot be instantiated
WITHOUT_CLASSIFICATION	the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries
WITHOUT_CLASSIFICATION	with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set
WITHOUT_CLASSIFICATION	implicit polymorphism not supported (would need a union)
WITHOUT_CLASSIFICATION	pull off the last ", "
WITHOUT_CLASSIFICATION	$NON-NLS-1
WITHOUT_CLASSIFICATION	we have the form: trim(trimSource) so we trim leading and trailing spaces
WITHOUT_CLASSIFICATION	we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)
WITHOUT_CLASSIFICATION	NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method
WITHOUT_CLASSIFICATION	potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Oracle did add support for ANSI CASE statements in 9i
WITHOUT_CLASSIFICATION	the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	Informix doesn't have a bit type
WITHOUT_CLASSIFICATION	or BYTE or TEXT? or MONEY
WITHOUT_CLASSIFICATION	strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"
WITHOUT_CLASSIFICATION	build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	pre H3.2 behavior: super.getReturnType(ct, m);
WITHOUT_CLASSIFICATION	finally use the sqltype if == on Hibernate types did not find a match.
WITHOUT_CLASSIFICATION	because numeric can be anything
WITHOUT_CLASSIFICATION	constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	standard sql92 functions (can be overridden by subclasses)
WITHOUT_CLASSIFICATION	map second/minute/hour/day/month/year to ANSI extract(), override on subclasses
WITHOUT_CLASSIFICATION	register hibernate types for default use in scalar sqlquery type auto detection
WITHOUT_CLASSIFICATION	database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	by default we report no support
WITHOUT_CLASSIFICATION	by default we report no support for NOWAIT lock semantics
WITHOUT_CLASSIFICATION	table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	grrr... for differentiation of mysql storage engines
WITHOUT_CLASSIFICATION	Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	return false here, as most databases do not properly support this construct...
WITHOUT_CLASSIFICATION	Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time
WITHOUT_CLASSIFICATION	starts with 1, implicitly
WITHOUT_CLASSIFICATION	" cascade";
WITHOUT_CLASSIFICATION	trim off the length/precision/scale
WITHOUT_CLASSIFICATION	public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}
WITHOUT_CLASSIFICATION	CHECK VIOLATION
WITHOUT_CLASSIFICATION	UNIQUE VIOLATION
WITHOUT_CLASSIFICATION	FOREIGN KEY VIOLATION
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	NOT NULL VIOLATION
WITHOUT_CLASSIFICATION	ALL OTHER
WITHOUT_CLASSIFICATION	Register the type of the out param - PostgreSQL uses Types.OTHER
WITHOUT_CLASSIFICATION	seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }
WITHOUT_CLASSIFICATION	seems to have spotty LOB suppport
WITHOUT_CLASSIFICATION	HHH-2300
WITHOUT_CLASSIFICATION	ignore (probably H2 not in the classpath)
WITHOUT_CLASSIFICATION	Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}
WITHOUT_CLASSIFICATION	Display the dialect version.
WITHOUT_CLASSIFICATION	The RDMS concat() function only supports 2 parameters
WITHOUT_CLASSIFICATION	Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Original Dialect.java returns " for update";
WITHOUT_CLASSIFICATION	Verify the state of this new method in Hibernate 3.0 Dialect.java
WITHOUT_CLASSIFICATION	Origial Dialect.java returns true;
WITHOUT_CLASSIFICATION	The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	Sequence methods - start. The RDMS dialect needs these
WITHOUT_CLASSIFICATION	methods to make it possible to use the Native Id generator
WITHOUT_CLASSIFICATION	The where clause was added to eliminate this statement from Brute Force Searches.
WITHOUT_CLASSIFICATION	Sequence methods - end
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1, implicitly
WITHOUT_CLASSIFICATION	We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400
WITHOUT_CLASSIFICATION	Used with DROP TABLE to delete all records in the table.
WITHOUT_CLASSIFICATION	RDMS supports the UNION ALL clause.
WITHOUT_CLASSIFICATION	RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	Multi-param dialect functions...
WITHOUT_CLASSIFICATION	function templates
WITHOUT_CLASSIFICATION	not null is implicit
WITHOUT_CLASSIFICATION	this assumes schema support, which is present in 1.8.0 and later...
WITHOUT_CLASSIFICATION	HSQLDB only supports READ_UNCOMMITTED transaction isolation
WITHOUT_CLASSIFICATION	Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.
WITHOUT_CLASSIFICATION	new methods in dialect3
WITHOUT_CLASSIFICATION	public boolean supportsForUpdateNowait() {return false;}
WITHOUT_CLASSIFICATION	TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	iterate entries ordered by capacity to find first fit
WITHOUT_CLASSIFICATION	add new ordered map
WITHOUT_CLASSIFICATION	registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	return "select CURRENT_TIMESTAMP from RDB$DATABASE";
WITHOUT_CLASSIFICATION	registerColumnType data types
WITHOUT_CLASSIFICATION	hibernate seems to ignore this type...
WITHOUT_CLASSIFICATION	IBID for current_time and current_date
WITHOUT_CLASSIFICATION	Tell hibernate to use getBytes instead of getBinaryStream
WITHOUT_CLASSIFICATION	No batch statements
WITHOUT_CLASSIFICATION	We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1
WITHOUT_CLASSIFICATION	no pointbase BIT
WITHOUT_CLASSIFICATION	no pointbase TINYINT
WITHOUT_CLASSIFICATION	Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	starts with 1, implicitly
WITHOUT_CLASSIFICATION	The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)
WITHOUT_CLASSIFICATION	SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table
WITHOUT_CLASSIFICATION	here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );
WITHOUT_CLASSIFICATION	registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );
WITHOUT_CLASSIFICATION	registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );
WITHOUT_CLASSIFICATION	starts with 1, implicitly
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	sql server just returns automatically
WITHOUT_CLASSIFICATION	Sybase BIT type does not support null values
WITHOUT_CLASSIFICATION	This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	not null ... (start with 1) is implicit
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	Multi-param string dialect functions...
WITHOUT_CLASSIFICATION	Multi-param numeric dialect functions...
WITHOUT_CLASSIFICATION	Multi-param date dialect functions...
WITHOUT_CLASSIFICATION	add another (inner) nested select add the main query close off the inner nested select
WITHOUT_CLASSIFICATION	add the main query
WITHOUT_CLASSIFICATION	add the restriction to the outer select
WITHOUT_CLASSIFICATION	This assumes you will want to ignore any update counts
WITHOUT_CLASSIFICATION	You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	starts with 1, implicitly
WITHOUT_CLASSIFICATION	simple nullability constraint
WITHOUT_CLASSIFICATION	not final-static to avoid possible classcast exceptions if using different oracle drivers.
WITHOUT_CLASSIFICATION	register the type of the out param - an Oracle specific type
WITHOUT_CLASSIFICATION	features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	binary %Stream character %Stream
WITHOUT_CLASSIFICATION	getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);
WITHOUT_CLASSIFICATION	hibernate impelemnts cast in Dialect.java
WITHOUT_CLASSIFICATION	aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list
WITHOUT_CLASSIFICATION	DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	below is for Cache' that don't have str in 2007.1 there is str and we register str directly
WITHOUT_CLASSIFICATION	note that %string is deprecated
WITHOUT_CLASSIFICATION	%upper is deprecated
WITHOUT_CLASSIFICATION	The syntax used to add a foreign key constraint to a table.
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	identifier-commalist
WITHOUT_CLASSIFICATION	The syntax used to add a column to a table
WITHOUT_CLASSIFICATION	Completely optional cascading drop clause.
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	<String>
WITHOUT_CLASSIFICATION	callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	The keyword used to specify a nullable column.
WITHOUT_CLASSIFICATION	Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?
WITHOUT_CLASSIFICATION	Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?
WITHOUT_CLASSIFICATION	The name of the SQL function that transforms a string to lowercase
WITHOUT_CLASSIFICATION	Create an OuterJoinGenerator for this dialect.
WITHOUT_CLASSIFICATION	The keyword used to insert a row without specifying any column values
WITHOUT_CLASSIFICATION	registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );
WITHOUT_CLASSIFICATION	skip the FROM keyword in params
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly
WITHOUT_CLASSIFICATION	SQLFunction implementation
WITHOUT_CLASSIFICATION	conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap
WITHOUT_CLASSIFICATION	register the standard dialect resolver
WITHOUT_CLASSIFICATION	register resolvers set via Environment property
WITHOUT_CLASSIFICATION	kept for backward compatibility until after the 3.1beta5 release of HA
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during delete
WITHOUT_CLASSIFICATION	(LockMode) anything
WITHOUT_CLASSIFICATION	lock doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	refresh doesn't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	evicts don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	orphans should be deleted during save/update
WITHOUT_CLASSIFICATION	for deprecated saveOrUpdateCopy()
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	a proxy cannot be transient and it breaks ForeignKeys.isTransient
WITHOUT_CLASSIFICATION	replicate does cascade to uninitialized collections
WITHOUT_CLASSIFICATION	static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	handles arrays and newly instantiated collections
WITHOUT_CLASSIFICATION	Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.
WITHOUT_CLASSIFICATION	Add these directly to the executions queue
WITHOUT_CLASSIFICATION	continue loop
WITHOUT_CLASSIFICATION	sort the updates by fk
WITHOUT_CLASSIFICATION	sort the updates by pk
WITHOUT_CLASSIFICATION	the mapping of entity names to their latest batch numbers.
WITHOUT_CLASSIFICATION	the map of batch numbers to EntityInsertAction lists
WITHOUT_CLASSIFICATION	optimize the hash size to eliminate a rehash.
WITHOUT_CLASSIFICATION	the list of entity names that indicate the batch number
WITHOUT_CLASSIFICATION	remove the current element from insertions. It will be added back later.
WITHOUT_CLASSIFICATION	the entity associated with the current action.
WITHOUT_CLASSIFICATION	There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.
WITHOUT_CLASSIFICATION	now rebuild the insertions list. There is a batch for each entry in the name list.
WITHOUT_CLASSIFICATION	the current batch number is the latest batch for this entity type.
WITHOUT_CLASSIFICATION	loop through all the associations of the current entity and make sure that they are processed before the current batch number
WITHOUT_CLASSIFICATION	find the batch number associated with the current association, if any.
WITHOUT_CLASSIFICATION	create a new batch for this type. The batch number is the number of current batches.
WITHOUT_CLASSIFICATION	loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.
WITHOUT_CLASSIFICATION	since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.
WITHOUT_CLASSIFICATION	cascade to current collection elements
WITHOUT_CLASSIFICATION	not really necessary, but good for consistency...
WITHOUT_CLASSIFICATION	we can't cascade to non-embedded elements
WITHOUT_CLASSIFICATION	a newly instantiated collection can't have orphans
WITHOUT_CLASSIFICATION	handle orphaned entities!!
WITHOUT_CLASSIFICATION	Loaded entity instances, by EntityUniqueKey
WITHOUT_CLASSIFICATION	Identity map of EntityEntry instances, by the entity instance
WITHOUT_CLASSIFICATION	Entity proxies, by EntityKey
WITHOUT_CLASSIFICATION	Snapshots of current database state for entities that have not been loaded
WITHOUT_CLASSIFICATION	Identity map of array holder ArrayHolder instances, by the array instance
WITHOUT_CLASSIFICATION	Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection
WITHOUT_CLASSIFICATION	Set of EntityKeys of deleted objects
WITHOUT_CLASSIFICATION	properties that we have tried to load, and not found in the database
WITHOUT_CLASSIFICATION	A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query
WITHOUT_CLASSIFICATION	A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!
WITHOUT_CLASSIFICATION	Downgrade locks
WITHOUT_CLASSIFICATION	any earlier proxy takes precedence
WITHOUT_CLASSIFICATION	unwrap the object
WITHOUT_CLASSIFICATION	initialize + unwrap the object
WITHOUT_CLASSIFICATION	return the proxied object
WITHOUT_CLASSIFICATION	overwrite old proxy
WITHOUT_CLASSIFICATION	early exit...
WITHOUT_CLASSIFICATION	or should it actually throw an exception?
WITHOUT_CLASSIFICATION	treat it just like a new collection
WITHOUT_CLASSIFICATION	do this work only at the very highest level of the load don't let this method be called recursively
WITHOUT_CLASSIFICATION	note that each iteration of the loop may add new elements
WITHOUT_CLASSIFICATION	it might be an unwrapped collection reference! try to find a wrapper (slowish)
WITHOUT_CLASSIFICATION	public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}
WITHOUT_CLASSIFICATION	public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}
WITHOUT_CLASSIFICATION	iterate all the entities currently associated with the persistence context.
WITHOUT_CLASSIFICATION	does this entity entry pertain to the entity persister in which we are interested (owner)?
WITHOUT_CLASSIFICATION	check if the managed object is the parent
WITHOUT_CLASSIFICATION	otherwise, the proxy was pruned during the serialization process
WITHOUT_CLASSIFICATION	adds remove as a sort-of alias for delete...
WITHOUT_CLASSIFICATION	bad cast
WITHOUT_CLASSIFICATION	return lhsPersister.getSubclassPropertyColumnNames(property);
WITHOUT_CLASSIFICATION	property-refs for associations defined on a component are not supported, so no need to slice
WITHOUT_CLASSIFICATION	if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)
WITHOUT_CLASSIFICATION	handle a property-ref
WITHOUT_CLASSIFICATION	NativeSQLQueryReturn
WITHOUT_CLASSIFICATION	final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	why is all others non final ?
WITHOUT_CLASSIFICATION	this.forceCacheRefresh = forceCacheRefresh;
WITHOUT_CLASSIFICATION	HELLA IMPORTANT OPTIMIZATION!!!
WITHOUT_CLASSIFICATION	return that.type.equals(type) && EqualsHelper.equals(that.value, value);
WITHOUT_CLASSIFICATION	Must occur after resolving identifiers!
WITHOUT_CLASSIFICATION	take a snapshot
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	We've been here before
WITHOUT_CLASSIFICATION	it is or was referenced _somewhere_
WITHOUT_CLASSIFICATION	do the work
WITHOUT_CLASSIFICATION	if either its role changed,
WITHOUT_CLASSIFICATION	or its key changed
WITHOUT_CLASSIFICATION	we will need to create new entries
WITHOUT_CLASSIFICATION	we will need to remove ye olde entries
WITHOUT_CLASSIFICATION	force initialize!
WITHOUT_CLASSIFICATION	else if it's elements changed
WITHOUT_CLASSIFICATION	ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES
WITHOUT_CLASSIFICATION	session-start/post-flush persistent state
WITHOUT_CLASSIFICATION	allow the CollectionSnapshot to be serialized
WITHOUT_CLASSIFICATION	ATTRIBUTES USED ONLY DURING FLUSH CYCLE
WITHOUT_CLASSIFICATION	"current" means the reference that was found during flush()
WITHOUT_CLASSIFICATION	"loaded" means the reference that is consistent with the current database state
WITHOUT_CLASSIFICATION	during flush, we navigate the object graph to collections and decide what to do with them
WITHOUT_CLASSIFICATION	if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()
WITHOUT_CLASSIFICATION	new collections that get found + wrapped during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	a newly wrapped collection is NOT dirty (or we get unnecessary version updates)
WITHOUT_CLASSIFICATION	collection.clearDirty()
WITHOUT_CLASSIFICATION	collection.clearDirty()
WITHOUT_CLASSIFICATION	detached collections that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	optimization
WITHOUT_CLASSIFICATION	optimization optimization
WITHOUT_CLASSIFICATION	re-snapshot
WITHOUT_CLASSIFICATION	for convenience to save some lookups
WITHOUT_CLASSIFICATION	NOTE: this is not updated when properties are fetched lazily!
WITHOUT_CLASSIFICATION	memory optimization
WITHOUT_CLASSIFICATION	use the id value of a newly instantiated instance as the unsaved-value
WITHOUT_CLASSIFICATION	copied from Session:
WITHOUT_CLASSIFICATION	this should not happen since the DTD prevents it
WITHOUT_CLASSIFICATION	JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.
WITHOUT_CLASSIFICATION	the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many
WITHOUT_CLASSIFICATION	check basic level one nullablilty
WITHOUT_CLASSIFICATION	values is not null and is checkable, we'll look deeper
WITHOUT_CLASSIFICATION	for non null args, check for components and elements containing components
WITHOUT_CLASSIFICATION	cache the hashcode
WITHOUT_CLASSIFICATION	persistent collections may have components
WITHOUT_CLASSIFICATION	check for all components values in the collection
WITHOUT_CLASSIFICATION	will check current level if some of them are not null or sublevels if they exist
WITHOUT_CLASSIFICATION	do the test
WITHOUT_CLASSIFICATION	if its an uninitialized proxy it can't be transient
WITHOUT_CLASSIFICATION	unwrap it
WITHOUT_CLASSIFICATION	See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)
WITHOUT_CLASSIFICATION	an unfetched association can only point to an entity that already exists in the db
WITHOUT_CLASSIFICATION	let the interceptor inspect the instance to decide
WITHOUT_CLASSIFICATION	let the persister inspect the instance to decide
WITHOUT_CLASSIFICATION	we use the assumed value, if there is one, to avoid hitting the database
WITHOUT_CLASSIFICATION	hit the database, after checking the session cache for a snapshot
WITHOUT_CLASSIFICATION	context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...
WITHOUT_CLASSIFICATION	int count = 0;
WITHOUT_CLASSIFICATION	the first key found after the given key
WITHOUT_CLASSIFICATION	checkForEnd = false;
WITHOUT_CLASSIFICATION	count++;
WITHOUT_CLASSIFICATION	end of array, start filling again from start
WITHOUT_CLASSIFICATION	we ran out of keys to try
WITHOUT_CLASSIFICATION	first element of array is reserved for the actual instance we are loading!
WITHOUT_CLASSIFICATION	the first id found after the given id
WITHOUT_CLASSIFICATION	we ran out of ids to try
WITHOUT_CLASSIFICATION	look for existing collection as part of the persistence context
WITHOUT_CLASSIFICATION	ignore this row of results! Note the early exit
WITHOUT_CLASSIFICATION	initialize this collection
WITHOUT_CLASSIFICATION	create one
WITHOUT_CLASSIFICATION	warning: can cause a recursive calls! (proxy initialization)
WITHOUT_CLASSIFICATION	there were no queued additions and the role has a cache
WITHOUT_CLASSIFICATION	and this is not a forced initialization during flush
WITHOUT_CLASSIFICATION	some filters affecting the collection are enabled on the session, so do not do the put into the cache.
WITHOUT_CLASSIFICATION	cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...
WITHOUT_CLASSIFICATION	the cache of the actual plans...
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful
WITHOUT_CLASSIFICATION	don't care...
WITHOUT_CLASSIFICATION	Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	don't care...
WITHOUT_CLASSIFICATION	NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	break the outer loop !!!
WITHOUT_CLASSIFICATION	named parameter
WITHOUT_CLASSIFICATION	could be either an ordinal or JPA-positional parameter
WITHOUT_CLASSIFICATION	a peek ahead showed this as an JPA-positional parameter
WITHOUT_CLASSIFICATION	make sure this "name" is an integral
WITHOUT_CLASSIFICATION	pre-determine and cache the hashcode
WITHOUT_CLASSIFICATION	perform the actual work
WITHOUT_CLASSIFICATION	if everything went ok, commit the transaction and close the obtained connection handle...
WITHOUT_CLASSIFICATION	at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible
WITHOUT_CLASSIFICATION	finally handle the exception
WITHOUT_CLASSIFICATION	a "detached" collection that belonged to a different entity
WITHOUT_CLASSIFICATION	saveOrUpdateCopy() is deprecated!
WITHOUT_CLASSIFICATION	collectionPersister should not be null, but we don't want to throw an exception if it is null
WITHOUT_CLASSIFICATION	otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);
WITHOUT_CLASSIFICATION	a "detached" collection that originally belonged to the same entity
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	Force a substitution!
WITHOUT_CLASSIFICATION	The user requested a "greater" (i.e. more restrictive) form of pessimistic lock
WITHOUT_CLASSIFICATION	the database now holds a lock + the object is flushed from the cache, so release the soft lock
WITHOUT_CLASSIFICATION	now update the object .. has to be outside the main if block above (because of collections)
WITHOUT_CLASSIFICATION	Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object
WITHOUT_CLASSIFICATION	this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed
WITHOUT_CLASSIFICATION	NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections
WITHOUT_CLASSIFICATION	grab its state saved at deletion
WITHOUT_CLASSIFICATION	grab its current state
WITHOUT_CLASSIFICATION	schedule the update note that we intentionally do _not_ pass in currentPersistentState!
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object
WITHOUT_CLASSIFICATION	compare to cached state (ignoring collections unless versioned)
WITHOUT_CLASSIFICATION	if it was dirtied by a collection only
WITHOUT_CLASSIFICATION	increment the version number (if necessary)
WITHOUT_CLASSIFICATION	check nullability but do not perform command execute we'll use scheduled updates for that.
WITHOUT_CLASSIFICATION	give the Interceptor a chance to modify property values
WITHOUT_CLASSIFICATION	now we might need to recalculate the dirtyProperties array
WITHOUT_CLASSIFICATION	use the current version
WITHOUT_CLASSIFICATION	Interceptor returned null, so do the dirtycheck ourself, if possible
WITHOUT_CLASSIFICATION	object loaded by update()
WITHOUT_CLASSIFICATION	dirty check against the usual snapshot of the entity
WITHOUT_CLASSIFICATION	dirty check against the database snapshot, if possible/necessary
WITHOUT_CLASSIFICATION	the Interceptor handled the dirty checking
WITHOUT_CLASSIFICATION	even process null collections
WITHOUT_CLASSIFICATION	get the id from the object
WITHOUT_CLASSIFICATION	always do an INSERT, and let it fail by constraint violation
WITHOUT_CLASSIFICATION	what is the version on the database?
WITHOUT_CLASSIFICATION	/ HHH-2378
WITHOUT_CLASSIFICATION	will result in a SQL UPDATE:
WITHOUT_CLASSIFICATION	else do nothing (don't even reassociate object!)
WITHOUT_CLASSIFICATION	no existing row - do an insert
WITHOUT_CLASSIFICATION	refresh() does not pass an entityName
WITHOUT_CLASSIFICATION	do not return a proxy! (this option indicates we are initializing a proxy)
WITHOUT_CLASSIFICATION	return a proxy if appropriate
WITHOUT_CLASSIFICATION	return existing object or initialized proxy (unless deleted)
WITHOUT_CLASSIFICATION	return new uninitialized proxy
WITHOUT_CLASSIFICATION	this object was already loaded
WITHOUT_CLASSIFICATION	Entity was found in second-level cache...
WITHOUT_CLASSIFICATION	make it circular-reference safe
WITHOUT_CLASSIFICATION	intializes result by side-effect
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	some statistics
WITHOUT_CLASSIFICATION	safe from concurrent modification because of how entryList() is implemented on IdentityMap
WITHOUT_CLASSIFICATION	Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.
WITHOUT_CLASSIFICATION	Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.
WITHOUT_CLASSIFICATION	So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()
WITHOUT_CLASSIFICATION	Update the status of the object and if necessary, schedule an update
WITHOUT_CLASSIFICATION	Schedule updates to collections:
WITHOUT_CLASSIFICATION	we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the database has changed now, so the subselect results need to be invalidated
WITHOUT_CLASSIFICATION	if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set
WITHOUT_CLASSIFICATION	otherwise recreate the mapping between the collection and its key
WITHOUT_CLASSIFICATION	get a snapshot
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	package-private
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity
WITHOUT_CLASSIFICATION	EARLY EXIT!!!
WITHOUT_CLASSIFICATION	ie. the entity came in from update()
WITHOUT_CLASSIFICATION	before any callbacks, etc, so subdeletions see that this deletion happened first
WITHOUT_CLASSIFICATION	Ensures that containing deletions happen before sub-deletions
WITHOUT_CLASSIFICATION	TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );
WITHOUT_CLASSIFICATION	cascade-delete to collections BEFORE the collection owner is deleted
WITHOUT_CLASSIFICATION	cascade-delete to many-to-one AFTER the parent was deleted
WITHOUT_CLASSIFICATION	if it is an initialized proxy, let cascade handle it later on
WITHOUT_CLASSIFICATION	assign the requested id to the proxy, before reassociating the proxy
WITHOUT_CLASSIFICATION	an uninitialized proxy, noop, don't even need to return an id, since it is never a save()
WITHOUT_CLASSIFICATION	initialize properties of the event:
WITHOUT_CLASSIFICATION	return the id in the event object
WITHOUT_CLASSIFICATION	TRANSIENT or DELETED
WITHOUT_CLASSIFICATION	use the id assigned to the instance
WITHOUT_CLASSIFICATION	assume this is a newly instantiated transient object which should be saved rather than updated
WITHOUT_CLASSIFICATION	this is a transient object with existing persistent state not loaded by the session
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	cachedState,
WITHOUT_CLASSIFICATION	assume true, since we don't really know, and it doesn't matter
WITHOUT_CLASSIFICATION	a "detached" collection!
WITHOUT_CLASSIFICATION	if the collection belonged to a different entity, clean up the existing state of the collection
WITHOUT_CLASSIFICATION	log.debug( "calling onLoad()" );
WITHOUT_CLASSIFICATION	EARLY EXIT!
WITHOUT_CLASSIFICATION	note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session
WITHOUT_CLASSIFICATION	if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);
WITHOUT_CLASSIFICATION	if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );
WITHOUT_CLASSIFICATION	we need to check even if it was not initialized, because of delayed adds!
WITHOUT_CLASSIFICATION	NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	find any entities that are still transient after retry
WITHOUT_CLASSIFICATION	EARLY EXIT!
WITHOUT_CLASSIFICATION	Check the persistence context for an entry relating to this entity to be merged...
WITHOUT_CLASSIFICATION	we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance
WITHOUT_CLASSIFICATION	DELETED
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);
WITHOUT_CLASSIFICATION	this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness
WITHOUT_CLASSIFICATION	continue...; we'll find out if it ends up not getting saved later
WITHOUT_CLASSIFICATION	cascade first, so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	check that entity id = requestedId
WITHOUT_CLASSIFICATION	before cascade!
WITHOUT_CLASSIFICATION	we got here because we assumed that an instance with an assigned id was detached, when it was really persistent
WITHOUT_CLASSIFICATION	cascade first, so that all unsaved objects get their copy created before we actually copy
WITHOUT_CLASSIFICATION	copyValues works by reflection, so explicitly mark the entity instance dirty
WITHOUT_CLASSIFICATION	EARLY EXIT
WITHOUT_CLASSIFICATION	source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed
WITHOUT_CLASSIFICATION	substitutes into values by side-effect
WITHOUT_CLASSIFICATION	now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );
WITHOUT_CLASSIFICATION	source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );
WITHOUT_CLASSIFICATION	keep the existing version number in the case of replicate!
WITHOUT_CLASSIFICATION	cascade-save to many-to-one BEFORE the parent is saved
WITHOUT_CLASSIFICATION	pass this as an argument only to avoid double looking
WITHOUT_CLASSIFICATION	the object is persistent
WITHOUT_CLASSIFICATION	the entity is associated with the session, so check its status
WITHOUT_CLASSIFICATION	do nothing for persistent instances
WITHOUT_CLASSIFICATION	ie. e.status==DELETED
WITHOUT_CLASSIFICATION	the object is transient or detached
WITHOUT_CLASSIFICATION	NOTE EARLY EXIT!
WITHOUT_CLASSIFICATION	Private constructor - stops checkstyle from complaining.
WITHOUT_CLASSIFICATION	First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...
WITHOUT_CLASSIFICATION	eat it and try next
WITHOUT_CLASSIFICATION	Otherwise, try to use the no-arg constructor
WITHOUT_CLASSIFICATION	oracle sql-state code for deadlock
WITHOUT_CLASSIFICATION	CollectionPropertyMapping processes everything except 'index'.
WITHOUT_CLASSIFICATION	remove initial ", "
WITHOUT_CLASSIFICATION	remove initial " and "
WITHOUT_CLASSIFICATION	beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!
WITHOUT_CLASSIFICATION	notAfterClassTokens.add(",");
WITHOUT_CLASSIFICATION	just especially for the trivial collection filter
WITHOUT_CLASSIFICATION	update last non-whitespace token, if necessary
WITHOUT_CLASSIFICATION	select-range is terminated by declaration of "from"
WITHOUT_CLASSIFICATION	scan for next non-whitespace token
WITHOUT_CLASSIFICATION	Note this!!
WITHOUT_CLASSIFICATION	Error message constants.
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!
WITHOUT_CLASSIFICATION	Show the modified AST.
WITHOUT_CLASSIFICATION	Create a parameter specification for the collection filter...
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	Get the names of the columns used to link between the collection owner and the collection elements.
WITHOUT_CLASSIFICATION	The path AST should be a DotNode, and it should have been evaluated already.
WITHOUT_CLASSIFICATION	Tell the dot node about the join type.
WITHOUT_CLASSIFICATION	Re-arrange the tree so that the collection function is the root and the lhs is the path.
WITHOUT_CLASSIFICATION	Don't forget to resolve the argument! Resolve the collection function now.
WITHOUT_CLASSIFICATION	Resolve everything up to this dot, but don't resolve the placeholders yet.
WITHOUT_CLASSIFICATION	Should mean that no such property was found
WITHOUT_CLASSIFICATION	Was there an explicit select expression?
WITHOUT_CLASSIFICATION	Attach any mapping-defined "ORDER BY" fragments
WITHOUT_CLASSIFICATION	Use the explicitly declared select expression; determine the return types indicated by each select token
WITHOUT_CLASSIFICATION	After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.
WITHOUT_CLASSIFICATION	Make #@%$^#^&# sure no alias is applied to the table name
WITHOUT_CLASSIFICATION	We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	We need to seed the version value as part of this bulk insert
WITHOUT_CLASSIFICATION	we need to wrtap the param in a cast()
WITHOUT_CLASSIFICATION	This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	Generate implicit joins, only if necessary.
WITHOUT_CLASSIFICATION	Notify the FROM element that it is being referenced by the select.
WITHOUT_CLASSIFICATION	Turn off includeSubclasses on all FromElements.
WITHOUT_CLASSIFICATION	create the node initially with the param name so that it shows appropriately in the "original text" attribute
WITHOUT_CLASSIFICATION	Use the delegate, resolve identifiers as FROM element aliases.
WITHOUT_CLASSIFICATION	select clauses for insert statements should alwasy be treated as shallow
WITHOUT_CLASSIFICATION	no need to even collect this information if the persister is considered multi-table
WITHOUT_CLASSIFICATION	Make sure that the persister is versioned
WITHOUT_CLASSIFICATION	handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();
WITHOUT_CLASSIFICATION	Alias references and identifiers use the same node class.
WITHOUT_CLASSIFICATION	switch
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.
WITHOUT_CLASSIFICATION	Initialize SQL nodes here.
WITHOUT_CLASSIFICATION	semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if template is null we just write the function out as it appears in the hql statement
WITHOUT_CLASSIFICATION	this function has a template -> redirect output and catch the arguments
WITHOUT_CLASSIFICATION	--- Inner classes (moved here from sql-gen.g) ---
WITHOUT_CLASSIFICATION	check two "adjecent" nodes at the top of the from-clause tree
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	these are just two unrelated table references
WITHOUT_CLASSIFICATION	again, both should be FromElements
WITHOUT_CLASSIFICATION	NOTE : firstRow is zero-based
WITHOUT_CLASSIFICATION	right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement
WITHOUT_CLASSIFICATION	check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them
WITHOUT_CLASSIFICATION	right represents a joins originating from left...
WITHOUT_CLASSIFICATION	all clear
WITHOUT_CLASSIFICATION	Ignore the token class name parameter, and use a specific token class.
WITHOUT_CLASSIFICATION	overriden to avoid System.exit
WITHOUT_CLASSIFICATION	overriden to avoid System.exit
WITHOUT_CLASSIFICATION	remember that ordinal parameters numbers are 1-based!!!
WITHOUT_CLASSIFICATION	don't care about other param types here, just those explicitly user-defined...
WITHOUT_CLASSIFICATION	If the query is already compiled, skip the compilation.
WITHOUT_CLASSIFICATION	Remember the parameters for the compilation.
WITHOUT_CLASSIFICATION	PHASE 1 : Parse the HQL into an AST.
WITHOUT_CLASSIFICATION	PHASE 2 : Analyze the HQL AST, and produce an SQL AST.
WITHOUT_CLASSIFICATION	PHASE 3 : Generate the SQL.
WITHOUT_CLASSIFICATION	we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes
WITHOUT_CLASSIFICATION	only needed during compilation phase...
WITHOUT_CLASSIFICATION	Transform the tree.
WITHOUT_CLASSIFICATION	Parse the query string into an HQL AST.
WITHOUT_CLASSIFICATION	Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	Delegate to the QueryLoader...
WITHOUT_CLASSIFICATION	NOTE : ( max - 1 ) because first is zero-based while max is not...
WITHOUT_CLASSIFICATION	-- Package local methods for the QueryLoader delegate --
WITHOUT_CLASSIFICATION	If there are no collection fetches, then no further checks are needed
WITHOUT_CLASSIFICATION	A shallow query is ok (although technically there should be no fetching here...)
WITHOUT_CLASSIFICATION	should be the first, but just to be safe...
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return
WITHOUT_CLASSIFICATION	Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)
WITHOUT_CLASSIFICATION	This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...
WITHOUT_CLASSIFICATION	paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );
WITHOUT_CLASSIFICATION	we are already processing a dot-structure
WITHOUT_CLASSIFICATION	igndore it...
WITHOUT_CLASSIFICATION	we are now at a new tree level
WITHOUT_CLASSIFICATION	[jsd] The fix for HHH-558...
WITHOUT_CLASSIFICATION	If the token can tell us if it could be an identifier...
WITHOUT_CLASSIFICATION	... and the expected token type was an identifier, then:
WITHOUT_CLASSIFICATION	Use the token as an identifier.
WITHOUT_CLASSIFICATION	Add the token to the AST.
WITHOUT_CLASSIFICATION	(NOT (EQ a b) ) => (NE a b)
WITHOUT_CLASSIFICATION	(NOT (NE a b) ) => (EQ a b)
WITHOUT_CLASSIFICATION	(NOT (LT a b) ) => (GE a b)
WITHOUT_CLASSIFICATION	(NOT (GE a b) ) => (LT a b)
WITHOUT_CLASSIFICATION	(NOT (LE a b) ) => (GT a b)
WITHOUT_CLASSIFICATION	(NOT (LIKE a b) ) => (NOT_LIKE a b)
WITHOUT_CLASSIFICATION	(NOT (NOT_LIKE a b) ) => (LIKE a b)
WITHOUT_CLASSIFICATION	(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)
WITHOUT_CLASSIFICATION	(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)
WITHOUT_CLASSIFICATION	Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	overriden to avoid System.exit
WITHOUT_CLASSIFICATION	if if Otherwise, handle the error normally.
WITHOUT_CLASSIFICATION	(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)
WITHOUT_CLASSIFICATION	This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)
WITHOUT_CLASSIFICATION	Just add a 'not' parent.
WITHOUT_CLASSIFICATION	(EQ NULL b) => (IS_NULL b)
WITHOUT_CLASSIFICATION	(EQ a NULL) => (IS_NULL a)
WITHOUT_CLASSIFICATION	NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )
WITHOUT_CLASSIFICATION	Add NOT if it's negated.
WITHOUT_CLASSIFICATION	Create nodes that track line and column number.
WITHOUT_CLASSIFICATION	Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.
WITHOUT_CLASSIFICATION	Case 2: The current token is after FROM and before '.'.
WITHOUT_CLASSIFICATION	This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...
WITHOUT_CLASSIFICATION	See if the second lookahed token can be an identifier.
WITHOUT_CLASSIFICATION	Set it!
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	strip the " where "
WITHOUT_CLASSIFICATION	Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail
WITHOUT_CLASSIFICATION	at the very least cleanup the data :)
WITHOUT_CLASSIFICATION	First, save off the pertinent ids, as the return value
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	jdbc params are 1-based
WITHOUT_CLASSIFICATION	Start performing the updates
WITHOUT_CLASSIFICATION	First, save off the pertinent ids, saving the number of pertinent ids for return
WITHOUT_CLASSIFICATION	Start performing the deletes
WITHOUT_CLASSIFICATION	otherwise, everything ok.
WITHOUT_CLASSIFICATION	visit width-first, then depth
WITHOUT_CLASSIFICATION	if the types report logical equivalence, return true...
WITHOUT_CLASSIFICATION	otherwise, perform a "deep equivalence" check...
WITHOUT_CLASSIFICATION	If there is no WHERE node, make one.
WITHOUT_CLASSIFICATION	inject the WHERE after the parent
WITHOUT_CLASSIFICATION	Never include subclasses for implied from elements.
WITHOUT_CLASSIFICATION	Moved here from SelectClause [jsd]
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	Use the table fromElement and the property name to get the array of column names.
WITHOUT_CLASSIFICATION	Set the attributes of the property reference expression.
WITHOUT_CLASSIFICATION	If the uresolved property path isn't set yet, just use the property name.
WITHOUT_CLASSIFICATION	The 'from element' that the property is in.
WITHOUT_CLASSIFICATION	Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	If this dot has already been resolved, stop now.
WITHOUT_CLASSIFICATION	If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.
WITHOUT_CLASSIFICATION	The property is a collection...
WITHOUT_CLASSIFICATION	The property is a component...
WITHOUT_CLASSIFICATION	The property is another class..
WITHOUT_CLASSIFICATION	Otherwise, this is a primitive type.
WITHOUT_CLASSIFICATION	foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)
WITHOUT_CLASSIFICATION	This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	in non-select queries, the only time we should need to join is if we are in a subquery from clause
WITHOUT_CLASSIFICATION	this is the regression style determination which matches the logic of the classic translator
WITHOUT_CLASSIFICATION	This 'dot' expression now refers to the resulting from element.
WITHOUT_CLASSIFICATION	even though we might find a pre-existing element by join path, we may not be able to reuse it...
WITHOUT_CLASSIFICATION	NOTE : addDuplicateAlias() already performs nullness checks on the alias.
WITHOUT_CLASSIFICATION	if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse
WITHOUT_CLASSIFICATION	again, null != null here
WITHOUT_CLASSIFICATION	If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).
WITHOUT_CLASSIFICATION	otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery
WITHOUT_CLASSIFICATION	we know only the lhs-hand type, so use that
WITHOUT_CLASSIFICATION	the referenced node text is the special 'id'
WITHOUT_CLASSIFICATION	only the identifier property field name can be a reference to the associated entity's PK...
WITHOUT_CLASSIFICATION	special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	Append the new property name onto the unresolved path.
WITHOUT_CLASSIFICATION	If the lhs is a collection, use CollectionPropertyMapping
WITHOUT_CLASSIFICATION	Tell the destination fromElement to 'includeSubclasses'.
WITHOUT_CLASSIFICATION	Use theta style (for regression) Move the node up, after the origin node.
WITHOUT_CLASSIFICATION	Don't resolve the node again.
WITHOUT_CLASSIFICATION	for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.
WITHOUT_CLASSIFICATION	we need to strip off the embedded parens so that sql-gen does not double these up
WITHOUT_CLASSIFICATION	we have something like : "? [op] rhs"
WITHOUT_CLASSIFICATION	we have something like : "lhs [op] ?"
WITHOUT_CLASSIFICATION	we know only the rhs-hand type, so use that
WITHOUT_CLASSIFICATION	handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)
WITHOUT_CLASSIFICATION	one or the other needs to be a datetime for us to get into this method in the first place...
WITHOUT_CLASSIFICATION	#3 - note that this is also true of "datetime - :param"...
WITHOUT_CLASSIFICATION	#2
WITHOUT_CLASSIFICATION	Generate the inner join -- The elements need to be joined to the collection they are in.
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	The 'from element' that represents the elements of the collection.
WITHOUT_CLASSIFICATION	Add the condition to the join sequence that qualifies the indexed element.
WITHOUT_CLASSIFICATION	Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)
WITHOUT_CLASSIFICATION	Now, set the text for this node. It should be the element columns.
WITHOUT_CLASSIFICATION	Get the function return value type, based on the type of the first argument.
WITHOUT_CLASSIFICATION	This will call initialize(tok)!
WITHOUT_CLASSIFICATION	mutation depends on the types of nodes invloved...
WITHOUT_CLASSIFICATION	"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	Generated select expressions are already resolved, nothing to do.
WITHOUT_CLASSIFICATION	The path may be a reference to an alias defined in the parent query.
WITHOUT_CLASSIFICATION	The HQL class alias refers to the class name.
WITHOUT_CLASSIFICATION	Associate the table alias with the element.
WITHOUT_CLASSIFICATION	try the parent FromClause...
WITHOUT_CLASSIFICATION	Add the new node to the map so that we don't create it twice.
WITHOUT_CLASSIFICATION	Make sure that all from elements registered with this FROM clause are actually in the AST.
WITHOUT_CLASSIFICATION	Invoke setScalarColumnText on each constructor argument.
WITHOUT_CLASSIFICATION	Collect the select expressions, skip the first child because it is the class name.
WITHOUT_CLASSIFICATION	return an empty Type array
WITHOUT_CLASSIFICATION	Constructors are always considered scalar results.
WITHOUT_CLASSIFICATION	this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor
WITHOUT_CLASSIFICATION	if there is no order by, make one
WITHOUT_CLASSIFICATION	Find the WHERE; if there is no WHERE, find the FROM...
WITHOUT_CLASSIFICATION	Now, inject the newly built ORDER BY into the tree
WITHOUT_CLASSIFICATION	ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	logic operators by definition resolve to boolean.
WITHOUT_CLASSIFICATION	Render the identifier select fragment using the table alias.
WITHOUT_CLASSIFICATION	Class names in the FROM clause result in a JoinSequence (the old FromParser does this).
WITHOUT_CLASSIFICATION	For many-to-many joins, use the tablename from the queryable collection for the default text.
WITHOUT_CLASSIFICATION	Otherwise, use the property mapping.
WITHOUT_CLASSIFICATION	should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	If the property is a special collection property name, return a CollectionPropertyMapping.
WITHOUT_CLASSIFICATION	Collection of components.
WITHOUT_CLASSIFICATION	make sure the lhs is "assignable"...
WITHOUT_CLASSIFICATION	false indicates to not generate parens around the assignment
WITHOUT_CLASSIFICATION	Register the FromElement with the FROM clause, now that we have the names and aliases.
WITHOUT_CLASSIFICATION	currently allowed...
WITHOUT_CLASSIFICATION	HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.
WITHOUT_CLASSIFICATION	return classAlias == null ? className : classAlias;
WITHOUT_CLASSIFICATION	This is an explicit FROM element.
WITHOUT_CLASSIFICATION	ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Fetch can't be used with scroll() or iterate().
WITHOUT_CLASSIFICATION	If it's not implied or it is implied and it's a many to many join where the target wasn't found.
WITHOUT_CLASSIFICATION	Since this is an explicit FROM element, it can't be implied in the FROM clause.
WITHOUT_CLASSIFICATION	Do nothing, eplicit from elements are always in the projection list.
WITHOUT_CLASSIFICATION	propertyName refers to something like collection.size...
WITHOUT_CLASSIFICATION	property name is a sub-path of a component...
WITHOUT_CLASSIFICATION	Always add the collection's query spaces.
WITHOUT_CLASSIFICATION	nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	logic operators by definition resolve to booleans
WITHOUT_CLASSIFICATION	DotNode uses null here...
WITHOUT_CLASSIFICATION	We represent a from-clause alias
WITHOUT_CLASSIFICATION	we are the LHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we are the RHS of the DOT representing a naked comp-prop-ref
WITHOUT_CLASSIFICATION	we represent a naked (simple) prop-ref
WITHOUT_CLASSIFICATION	EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...
WITHOUT_CLASSIFICATION	assume this ident's text does not refer to a property on the given persister
WITHOUT_CLASSIFICATION	just ignore it for now, it'll get resolved later...
WITHOUT_CLASSIFICATION	This is not actually a constant, but a reference to FROM element.
WITHOUT_CLASSIFICATION	check to see if our "propPath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	these pieces are needed for usage in select clause
WITHOUT_CLASSIFICATION	used to set the type of the parent dot node
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	assume we do not refer to a property on the given persister
WITHOUT_CLASSIFICATION	naked property-refs cannot be used with an aliased from element
WITHOUT_CLASSIFICATION	this piece is needed for usage in select clause
WITHOUT_CLASSIFICATION	do not over-write the column text, as that has already been "rendered" during resolve
WITHOUT_CLASSIFICATION	for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string
WITHOUT_CLASSIFICATION	Look up class name using the first identifier in the path.
WITHOUT_CLASSIFICATION	Add to the query spaces.
WITHOUT_CLASSIFICATION	If the from element isn't in the same clause, create a new from element.
WITHOUT_CLASSIFICATION	This is the root level node. Generate an explicit from clause at the root.
WITHOUT_CLASSIFICATION	Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join
WITHOUT_CLASSIFICATION	super-duper-classic-parser-regression-testing-mojo-magic...
WITHOUT_CLASSIFICATION	A collection of entities...
WITHOUT_CLASSIFICATION	A collection of components...
WITHOUT_CLASSIFICATION	A collection of scalar elements...
WITHOUT_CLASSIFICATION	according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	Don't include sub-classes for implied collection joins or subquery joins.
WITHOUT_CLASSIFICATION	Treat explict from elements in sub-queries properly.
WITHOUT_CLASSIFICATION	( implied && DotNode.useThetaStyleImplicitJoins ) ) {
WITHOUT_CLASSIFICATION	the "root from-element" in correlated subqueries do need this piece
WITHOUT_CLASSIFICATION	Create the FROM element for the target (the elements of the collection).
WITHOUT_CLASSIFICATION	If the join is implied, then don't include sub-classes on the element.
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	The associated entity is implied, but it must be included in the FROM. The collection alias is the role.
WITHOUT_CLASSIFICATION	Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.
WITHOUT_CLASSIFICATION	Get the class name of the associated entity.
WITHOUT_CLASSIFICATION	origin, path, implied, columns, classAlias,
WITHOUT_CLASSIFICATION	implied
WITHOUT_CLASSIFICATION	For implied many-to-many, just add the end join.
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	the standard SQL function name is current_timestamp...
WITHOUT_CLASSIFICATION	This causes the factory to instantiate the desired class.
WITHOUT_CLASSIFICATION	private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...
WITHOUT_CLASSIFICATION	The types represented in the SQL result set. @return The types represented in the SQL result set.
WITHOUT_CLASSIFICATION	public Type[] getSqlResultTypes() {return sqlResultTypes;}
WITHOUT_CLASSIFICATION	First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!
WITHOUT_CLASSIFICATION	First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)
WITHOUT_CLASSIFICATION	sqlResultTypeList.addAll( constructorArgumentTypeList );
WITHOUT_CLASSIFICATION	If the data type is not an association type, it could not have been in the FROM clause.
WITHOUT_CLASSIFICATION	sqlResultTypeList.add( type );
WITHOUT_CLASSIFICATION	Always add the type to the return type list.
WITHOUT_CLASSIFICATION	add the fetched entities
WITHOUT_CLASSIFICATION	Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	If there are any scalars (non-entities) selected, render the select column aliases.
WITHOUT_CLASSIFICATION	sqlResultTypeList,
WITHOUT_CLASSIFICATION	ArrayList sqlResultTypeList,
WITHOUT_CLASSIFICATION	sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );
WITHOUT_CLASSIFICATION	lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	TODO:
WITHOUT_CLASSIFICATION	Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.
WITHOUT_CLASSIFICATION	Generate the select expression.
WITHOUT_CLASSIFICATION	union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Skip 'DISTINCT' and 'ALL', so we return the first expression node.
WITHOUT_CLASSIFICATION	Create SQL_TOKEN nodes for the columns.
WITHOUT_CLASSIFICATION	Generate the property select tokens.
WITHOUT_CLASSIFICATION	Get the function name node.
WITHOUT_CLASSIFICATION	Method expressions in a SELECT should always be considered scalar.
WITHOUT_CLASSIFICATION	If this is 'elements' then create a new FROM element.
WITHOUT_CLASSIFICATION	Not elements(x)
WITHOUT_CLASSIFICATION	Dialect function
WITHOUT_CLASSIFICATION	Collection 'property function'
WITHOUT_CLASSIFICATION	If the constant is an IDENT, figure out what it means...
WITHOUT_CLASSIFICATION	IDENT is a class alias in the FROM.
WITHOUT_CLASSIFICATION	Resolve to an identity column.
WITHOUT_CLASSIFICATION	Otherwise, it's a literal.
WITHOUT_CLASSIFICATION	the name of an entity class
WITHOUT_CLASSIFICATION	the class discriminator value
WITHOUT_CLASSIFICATION	Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	Add a space before the display text.
WITHOUT_CLASSIFICATION	Find or create the WHERE clause
WITHOUT_CLASSIFICATION	child == parent.getFirstChild()
WITHOUT_CLASSIFICATION	Find or create the WHERE clause
WITHOUT_CLASSIFICATION	Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().
WITHOUT_CLASSIFICATION	Put the FILTERS node before the HQL condition and theta joins
WITHOUT_CLASSIFICATION	add the current fragment to the FILTERS node
WITHOUT_CLASSIFICATION	Create a new THETA_JOINS node as a parent of all filters
WITHOUT_CLASSIFICATION	Put the THETA_JOINS node before the HQL condition, after the filters.
WITHOUT_CLASSIFICATION	add the current fragment to the THETA_JOINS node
WITHOUT_CLASSIFICATION	First, try to get the persister using the given name directly.
WITHOUT_CLASSIFICATION	unable to locate it using this name
WITHOUT_CLASSIFICATION	If that didn't work, try using the 'import' name.
WITHOUT_CLASSIFICATION	Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)
WITHOUT_CLASSIFICATION	locate the registered function by the given name
WITHOUT_CLASSIFICATION	determine the type of the first argument...
WITHOUT_CLASSIFICATION	Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.
WITHOUT_CLASSIFICATION	Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.
WITHOUT_CLASSIFICATION	Append the text of the current node.
WITHOUT_CLASSIFICATION	If the node has a first child, recurse into the first child.
WITHOUT_CLASSIFICATION	If there is a second child (RHS), recurse into that child.
WITHOUT_CLASSIFICATION	Iterate through the alias,JoinSequence pairs and generate SQL token nodes.
WITHOUT_CLASSIFICATION	If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT
WITHOUT_CLASSIFICATION	this is used during SqlGenerator processing
WITHOUT_CLASSIFICATION	If there is a FROM fragment and the FROM element is an explicit, then add the from part.
WITHOUT_CLASSIFICATION	&& StringHelper.isNotEmpty( frag )
WITHOUT_CLASSIFICATION	The FROM fragment will probably begin with ', '. Remove this if it is present.
WITHOUT_CLASSIFICATION	This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:
WITHOUT_CLASSIFICATION	SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	default mode
WITHOUT_CLASSIFICATION	QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	reset the dotcount (but not the path) after reset!
WITHOUT_CLASSIFICATION	after reset!
WITHOUT_CLASSIFICATION	we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query
WITHOUT_CLASSIFICATION	bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22
WITHOUT_CLASSIFICATION	dotcount>=2
WITHOUT_CLASSIFICATION	Do the corresponding RHS
WITHOUT_CLASSIFICATION	if its "id"
WITHOUT_CLASSIFICATION	or its the id property name
WITHOUT_CLASSIFICATION	join = q.createJoinFragment(useThetaStyleJoin);
WITHOUT_CLASSIFICATION	important!!
WITHOUT_CLASSIFICATION	String[] keyCols = collPersister.getKeyColumnNames();
WITHOUT_CLASSIFICATION	an association
WITHOUT_CLASSIFICATION	allow index() function:
WITHOUT_CLASSIFICATION	here assume SQLServer2005 using snapshot isolation, which does not have this problem
WITHOUT_CLASSIFICATION	The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	collections of values
WITHOUT_CLASSIFICATION	opening paren in new Foo ( ... )
WITHOUT_CLASSIFICATION	if we are inside a new Result(), but not inside a nested function
WITHOUT_CLASSIFICATION	special case
WITHOUT_CLASSIFICATION	the name of an SQL function
WITHOUT_CLASSIFICATION	null child could occur for no from clause in a filter
WITHOUT_CLASSIFICATION	this is basically a copy/paste of OrderByParser ... might be worth refactoring
WITHOUT_CLASSIFICATION	SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p
WITHOUT_CLASSIFICATION	return aliases not supported in classic translator!
WITHOUT_CLASSIFICATION	register collection role
WITHOUT_CLASSIFICATION	The keyword used to specify an identity column, if identity column key generation is supported.
WITHOUT_CLASSIFICATION	.getElementPropertyMapping();
WITHOUT_CLASSIFICATION	crossJoins.add(name);
WITHOUT_CLASSIFICATION	ie no select clause in HQL
WITHOUT_CLASSIFICATION	initialize the Set of queried identifier spaces (ie. tables)
WITHOUT_CLASSIFICATION	ie. no select clause
WITHOUT_CLASSIFICATION	there _was_ a select clause
WITHOUT_CLASSIFICATION	return the concrete type, or the underlying type if a concrete type was not specified
WITHOUT_CLASSIFICATION	many-to-many
WITHOUT_CLASSIFICATION	q.addCollection(collectionName, collectionRole);
WITHOUT_CLASSIFICATION	classic parser does not support bulk manipulation statements
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation)
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance
WITHOUT_CLASSIFICATION	This is the legacy behaviour for HQL queries...
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	not known!
WITHOUT_CLASSIFICATION	Need this, since join condition can appear inside parens!
WITHOUT_CLASSIFICATION	tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression
WITHOUT_CLASSIFICATION	expressionTerminators.add(","); deliberately excluded
WITHOUT_CLASSIFICATION	expressionOpeners.add(","); deliberately excluded
WITHOUT_CLASSIFICATION	we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)
WITHOUT_CLASSIFICATION	Inside a BETWEEN ... AND ... expression
WITHOUT_CLASSIFICATION	were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean
WITHOUT_CLASSIFICATION	ie. a many-to-many
WITHOUT_CLASSIFICATION	Cope with [,]
WITHOUT_CLASSIFICATION	Cope with a continued path expression (ie. ].baz)
WITHOUT_CLASSIFICATION	NOTE: early return
WITHOUT_CLASSIFICATION	Cope with a subselect
WITHOUT_CLASSIFICATION	Cope with special cases of AND, NOT, ()
WITHOUT_CLASSIFICATION	Close extra brackets we opened
WITHOUT_CLASSIFICATION	take note when this is a boolean expression
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	process a token, mapping OO path expressions to SQL expressions
WITHOUT_CLASSIFICATION	Open any extra brackets we might need.
WITHOUT_CLASSIFICATION	Cope with special cases of AND, NOT, )
WITHOUT_CLASSIFICATION	the next one up must also be
WITHOUT_CLASSIFICATION	Add any joins
WITHOUT_CLASSIFICATION	assumes that types are all of span 1
WITHOUT_CLASSIFICATION	named query parameter
WITHOUT_CLASSIFICATION	path expression
WITHOUT_CLASSIFICATION	saves / updates don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	persists don't cascade to uninitialized collections
WITHOUT_CLASSIFICATION	anything else
WITHOUT_CLASSIFICATION	the path expression continues after a ]
WITHOUT_CLASSIFICATION	careful with this!
WITHOUT_CLASSIFICATION	the path expression ends at the ]
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	NOTICE: no " or . since they are part of (compound) identifiers
WITHOUT_CLASSIFICATION	cannot instantiate
WITHOUT_CLASSIFICATION	start by looking for HQL keywords...
WITHOUT_CLASSIFICATION	inner joins can be abbreviated to 'join'
WITHOUT_CLASSIFICATION	'outer' is optional and is ignored
WITHOUT_CLASSIFICATION	now anything that is not a HQL keyword
WITHOUT_CLASSIFICATION	process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions
WITHOUT_CLASSIFICATION	treat it as a classname
WITHOUT_CLASSIFICATION	treat it as a path expression
WITHOUT_CLASSIFICATION	starts with the name of a mapped class (new style)
WITHOUT_CLASSIFICATION	starts with a path expression (new style)
WITHOUT_CLASSIFICATION	allow ODMG OQL style: from Person p, p.cars c
WITHOUT_CLASSIFICATION	handle quoted strings
WITHOUT_CLASSIFICATION	Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity
WITHOUT_CLASSIFICATION	"finish off" the join
WITHOUT_CLASSIFICATION	ignore whitespace
WITHOUT_CLASSIFICATION	do replacements
WITHOUT_CLASSIFICATION	handle HQL2 collection syntax
WITHOUT_CLASSIFICATION	uuid.hex is deprecated
WITHOUT_CLASSIFICATION	AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	hilo params
WITHOUT_CLASSIFICATION	sql = query;
WITHOUT_CLASSIFICATION	performance opt
WITHOUT_CLASSIFICATION	sql = update;
WITHOUT_CLASSIFICATION	hilo config
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(
WITHOUT_CLASSIFICATION	abort the save (the object is already saved by a circular cascade)
WITHOUT_CLASSIFICATION	throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	do nothing to avoid a lazy property initialization
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	do nothing until we hit the rsult set containing the generated id
WITHOUT_CLASSIFICATION	COLUMN and TABLE should be renamed but it would break the public API
WITHOUT_CLASSIFICATION	Loaded entity instances, by EntityKey
WITHOUT_CLASSIFICATION	if the given name is un-qualified we may neen to qualify it
WITHOUT_CLASSIFICATION	the default...
WITHOUT_CLASSIFICATION	unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...
WITHOUT_CLASSIFICATION	intentionally empty
WITHOUT_CLASSIFICATION	Identity map of CollectionEntry instances, by the collection wrapper
WITHOUT_CLASSIFICATION	general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	prepare and execute the insert
WITHOUT_CLASSIFICATION	fetch the generated id in a separate query
WITHOUT_CLASSIFICATION	we just hit the last position
WITHOUT_CLASSIFICATION	scroll ahead
WITHOUT_CLASSIFICATION	scroll backward
WITHOUT_CLASSIFICATION	we have not yet hit the last result...
WITHOUT_CLASSIFICATION	Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.
WITHOUT_CLASSIFICATION	Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Caches
WITHOUT_CLASSIFICATION	Generators:
WITHOUT_CLASSIFICATION	cache region is defined by the root-class in the hierarchy...
WITHOUT_CLASSIFICATION	check if the detached object being merged is the parent
WITHOUT_CLASSIFICATION	after all persisters and named queries are registered
WITHOUT_CLASSIFICATION	if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'
WITHOUT_CLASSIFICATION	JNDI + Serialization:
WITHOUT_CLASSIFICATION	checking for named queries
WITHOUT_CLASSIFICATION	stats
WITHOUT_CLASSIFICATION	EntityNotFoundDelegate
WITHOUT_CLASSIFICATION	Check named HQL queries
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	prevents this session from adding things to cache
WITHOUT_CLASSIFICATION	from javax.naming.Referenceable
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	for a dynamic-class
WITHOUT_CLASSIFICATION	test this entity to see if we must query it
WITHOUT_CLASSIFICATION	NOTE EARLY EXIT
WITHOUT_CLASSIFICATION	for backward-compatability
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	to stop the class from being unloaded
WITHOUT_CLASSIFICATION	in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization
WITHOUT_CLASSIFICATION	Make sure this is a defined parameter and check the incoming value type
WITHOUT_CLASSIFICATION	for each of the defined parameters, make sure its value has been set
WITHOUT_CLASSIFICATION	we never need to apply locks to the SQL
WITHOUT_CLASSIFICATION	inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.
WITHOUT_CLASSIFICATION	updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	final boolean forceCacheRefresh,
WITHOUT_CLASSIFICATION	first, try to load it from the temp PC associated to this SS
WITHOUT_CLASSIFICATION	if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy
WITHOUT_CLASSIFICATION	otherwise immediately materialize it
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	no auto-flushing to support in stateless session
WITHOUT_CLASSIFICATION	after setting values to object, entityMode
WITHOUT_CLASSIFICATION	for EJB3
WITHOUT_CLASSIFICATION	just ignore
WITHOUT_CLASSIFICATION	do a check
WITHOUT_CLASSIFICATION	saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	do not auto-flush while outside a transaction
WITHOUT_CLASSIFICATION	this is an internal error of some sort...
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete
WITHOUT_CLASSIFICATION	if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query
WITHOUT_CLASSIFICATION	not for internal use:
WITHOUT_CLASSIFICATION	otherwise, we only need to flush if there are in-memory changes to the queried tables
WITHOUT_CLASSIFICATION	might need to run a different filter entirely after the flush because the collection role may have changed
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted
WITHOUT_CLASSIFICATION	basically just an adapted copy of find(CriteriaImpl)
WITHOUT_CLASSIFICATION	it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy
WITHOUT_CLASSIFICATION	nothing to do in a stateful session
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore this error for now
WITHOUT_CLASSIFICATION	we need to writeObject() on this since interceptor is user defined
WITHOUT_CLASSIFICATION	the old-time stand-by...
WITHOUT_CLASSIFICATION	parameter bind values...
WITHOUT_CLASSIFICATION	Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	prepend value and type list with null for any positions before the wanted position.
WITHOUT_CLASSIFICATION	Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	we have a CGLIB enhanced entity
WITHOUT_CLASSIFICATION	we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	we have a Javassist enhanced entity
WITHOUT_CLASSIFICATION	FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	let's assume that there is only one lazy fetch group, for now!
WITHOUT_CLASSIFICATION	FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	should not need to grow beyond the size of the total number of columns in the rs
WITHOUT_CLASSIFICATION	should probably no-op commit/rollback here, at least in JTA scenarios
WITHOUT_CLASSIFICATION	Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	explicitly perform no checking...
WITHOUT_CLASSIFICATION	used from testsuite
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	register synch; stats.connect()
WITHOUT_CLASSIFICATION	noncritical, swallow and let the other propagate!
WITHOUT_CLASSIFICATION	calls executeBatch()
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	no big deal
WITHOUT_CLASSIFICATION	sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case
WITHOUT_CLASSIFICATION	see explanation above...
WITHOUT_CLASSIFICATION	If we are in the process of releasing, no sense checking for aggressive-release possibility.
WITHOUT_CLASSIFICATION	EARLY EXIT!!!!
WITHOUT_CLASSIFICATION	ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	refer to comment in StatefulPersistenceContext.addCollection()
WITHOUT_CLASSIFICATION	ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Note : success = false, because we don't know the outcome of the transaction
WITHOUT_CLASSIFICATION	we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.
WITHOUT_CLASSIFICATION	the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization
WITHOUT_CLASSIFICATION	transactions marked for rollback-only cause some TM impls to throw exceptions
WITHOUT_CLASSIFICATION	serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	postInitialize() will be called after initialization
WITHOUT_CLASSIFICATION	cannot handle single quotes
WITHOUT_CLASSIFICATION	todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...
WITHOUT_CLASSIFICATION	note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	don't even bother trying to read further
WITHOUT_CLASSIFICATION	don't even bother trying to read any further
WITHOUT_CLASSIFICATION	position cursor to the last row
WITHOUT_CLASSIFICATION	sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing
WITHOUT_CLASSIFICATION	Read backwards until we read past the first physical sequential row with the key we are interested in loading
WITHOUT_CLASSIFICATION	Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading
WITHOUT_CLASSIFICATION	now get an existing proxy for each row element (if there is one)
WITHOUT_CLASSIFICATION	force the proxy to resolve itself
WITHOUT_CLASSIFICATION	this is equivalent to the old behavior...
WITHOUT_CLASSIFICATION	if null, owner will be retrieved from session
WITHOUT_CLASSIFICATION	final String queryString,
WITHOUT_CLASSIFICATION	if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify
WITHOUT_CLASSIFICATION	end of array, start filling again from start
WITHOUT_CLASSIFICATION	in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.
WITHOUT_CLASSIFICATION	we can reuse it for each row
WITHOUT_CLASSIFICATION	can't reuse in this case
WITHOUT_CLASSIFICATION	First we need to suspend any current JTA transaction and obtain a JDBC connection
WITHOUT_CLASSIFICATION	getResultList(results);
WITHOUT_CLASSIFICATION	if we only returned one entity, query by key is more efficient
WITHOUT_CLASSIFICATION	a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()
WITHOUT_CLASSIFICATION	handle empty collection
WITHOUT_CLASSIFICATION	else no collection element, but also no owner
WITHOUT_CLASSIFICATION	handle empty collections
WITHOUT_CLASSIFICATION	else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)
WITHOUT_CLASSIFICATION	validate() instances of Validatable
WITHOUT_CLASSIFICATION	if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>
WITHOUT_CLASSIFICATION	remove all collections for the entity from the session-level cache
WITHOUT_CLASSIFICATION	null version means the object is in the process of being loaded somewhere else in the ResultSet
WITHOUT_CLASSIFICATION	problematic for <key-many-to-one>!
WITHOUT_CLASSIFICATION	use the id passed in
WITHOUT_CLASSIFICATION	do nothing
WITHOUT_CLASSIFICATION	prefer re-generation of identity!
WITHOUT_CLASSIFICATION	no point doing this if NONE was requested
WITHOUT_CLASSIFICATION	If the object is already loaded, return the loaded one
WITHOUT_CLASSIFICATION	its already loaded so don't need to hydrate it
WITHOUT_CLASSIFICATION	cascade the refresh prior to refreshing this entity
WITHOUT_CLASSIFICATION	the load() which takes an entity does not pass an entityName
WITHOUT_CLASSIFICATION	we only check the version when _upgrading_ lock modes
WITHOUT_CLASSIFICATION	look for a proxy
WITHOUT_CLASSIFICATION	we need to upgrade the lock mode to the mode requested
WITHOUT_CLASSIFICATION	its the given optional object
WITHOUT_CLASSIFICATION	instantiate a new instance
WITHOUT_CLASSIFICATION	need to hydrate it.
WITHOUT_CLASSIFICATION	return a newly loaded object
WITHOUT_CLASSIFICATION	will be ignored, using the existing Entry instead
WITHOUT_CLASSIFICATION	key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself
WITHOUT_CLASSIFICATION	materialize associations (and initialize the object) later
WITHOUT_CLASSIFICATION	Get the persister for the _subclass_
WITHOUT_CLASSIFICATION	ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior
WITHOUT_CLASSIFICATION	the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	addInitializedCollection(collection, persister, id);
WITHOUT_CLASSIFICATION	EARLY EXIT!
WITHOUT_CLASSIFICATION	EARLY EXIT!
WITHOUT_CLASSIFICATION	|| oj.getJoinable().consumesCollectionAlias()
WITHOUT_CLASSIFICATION	here we do not bother with the discriminator.
WITHOUT_CLASSIFICATION	Code to handle subclasses of topClass
WITHOUT_CLASSIFICATION	woops we got an instance of another class hierarchy branch
WITHOUT_CLASSIFICATION	we can go straight to the first required row
WITHOUT_CLASSIFICATION	we need to step through the rows one row at a time (slow)
WITHOUT_CLASSIFICATION	synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.
WITHOUT_CLASSIFICATION	Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.
WITHOUT_CLASSIFICATION	before adding to collection!
WITHOUT_CLASSIFICATION	if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...
WITHOUT_CLASSIFICATION	operations which cascade as far as the collection also cascade to collection elements
WITHOUT_CLASSIFICATION	simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:
WITHOUT_CLASSIFICATION	a composite key
WITHOUT_CLASSIFICATION	if no batch, use "foo = ? and bar = ?"
WITHOUT_CLASSIFICATION	it must be a collection fetch
WITHOUT_CLASSIFICATION	needed later for many-to-many/filter application
WITHOUT_CLASSIFICATION	&& etype.isReferenceToPrimaryKey()
WITHOUT_CLASSIFICATION	it might still need to apply a collection ordering based on a many-to-many defined order-by...
WITHOUT_CLASSIFICATION	if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins
WITHOUT_CLASSIFICATION	belong to other persister belong to other persister
WITHOUT_CLASSIFICATION	we found it
WITHOUT_CLASSIFICATION	we can use an inner join for the many-to-many
WITHOUT_CLASSIFICATION	disable a join back to this same association
WITHOUT_CLASSIFICATION	NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!
WITHOUT_CLASSIFICATION	the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	root entity comes last
WITHOUT_CLASSIFICATION	deliberately ignore return value!
WITHOUT_CLASSIFICATION	alias may be null EARLY EXIT
WITHOUT_CLASSIFICATION	if it is a compound path
WITHOUT_CLASSIFICATION	otherwise assume the parent is the the criteria that created us
WITHOUT_CLASSIFICATION	if its the root criteria, we are done
WITHOUT_CLASSIFICATION	otherwise, recurse
WITHOUT_CLASSIFICATION	the criteria instance
WITHOUT_CLASSIFICATION	the entity name
WITHOUT_CLASSIFICATION	not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	not found in inner query , try the outer query
WITHOUT_CLASSIFICATION	it refers to an alias of a projection
WITHOUT_CLASSIFICATION	should never happen, i think
WITHOUT_CLASSIFICATION	Detect discriminator values...
WITHOUT_CLASSIFICATION	Convert the string value into the proper type.
WITHOUT_CLASSIFICATION	and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection, look for a property
WITHOUT_CLASSIFICATION	Otherwise, this is an ordinary value.
WITHOUT_CLASSIFICATION	Currently not cachable if autodiscover types is in effect (e.g. "select ...")
WITHOUT_CLASSIFICATION	private final String[] sqlAliases; private final String[] sqlAliasSuffixes;
WITHOUT_CLASSIFICATION	this is only needed (afaict) for ResultTransformer processing...
WITHOUT_CLASSIFICATION	determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)
WITHOUT_CLASSIFICATION	replace {....} with corresponding column aliases
WITHOUT_CLASSIFICATION	No additional open braces found in the string, append the rest of the string in its entirty and quit this loop
WITHOUT_CLASSIFICATION	apend everything up until the next encountered open brace
WITHOUT_CLASSIFICATION	it is a simple table alias {foo}
WITHOUT_CLASSIFICATION	passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	passing through anything we do not know : to support jdbc escape sequences HB-898
WITHOUT_CLASSIFICATION	The current alias is referencing the collection to be eagerly fetched
WITHOUT_CLASSIFICATION	it is a property reference {foo.bar}
WITHOUT_CLASSIFICATION	Possibly handle :something parameters for the query ?
WITHOUT_CLASSIFICATION	Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	private final List persisters = new ArrayList();
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	NOTE: EARLY EXIT!
WITHOUT_CLASSIFICATION	private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();
WITHOUT_CLASSIFICATION	Now, process the returns
WITHOUT_CLASSIFICATION	private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();
WITHOUT_CLASSIFICATION	already been processed...
WITHOUT_CLASSIFICATION	already been processed...
WITHOUT_CLASSIFICATION	Make sure the owner alias is known...
WITHOUT_CLASSIFICATION	first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners
WITHOUT_CLASSIFICATION	scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );
WITHOUT_CLASSIFICATION	If this return's alias has not been processed yet, do so b4 further processing of this return
WITHOUT_CLASSIFICATION	collectionOwnerAliases.add( ownerAlias );
WITHOUT_CLASSIFICATION	for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved
WITHOUT_CLASSIFICATION	this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)
WITHOUT_CLASSIFICATION	EARLY EXIT
WITHOUT_CLASSIFICATION	cascade-save to collections AFTER the collection owner was saved
WITHOUT_CLASSIFICATION	Initialize the error handling delegate.
WITHOUT_CLASSIFICATION	Use the delegate.
WITHOUT_CLASSIFICATION	currently only the Hibernate-supplied DbTimestampType is supported here
WITHOUT_CLASSIFICATION	This is called when it's time to fully resolve a path expression.
WITHOUT_CLASSIFICATION	make a new one
WITHOUT_CLASSIFICATION	not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...
WITHOUT_CLASSIFICATION	(NOT (GT a b) ) => (LE a b)
WITHOUT_CLASSIFICATION	private Type[] sqlResultTypes;
WITHOUT_CLASSIFICATION	include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	sqlResultTypes = selectClause.getSqlResultTypes();
WITHOUT_CLASSIFICATION	by default
WITHOUT_CLASSIFICATION	This is now handled earlier in this method.
WITHOUT_CLASSIFICATION	-- Loader implementation --
WITHOUT_CLASSIFICATION	-- Loader overrides --
WITHOUT_CLASSIFICATION	(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)
WITHOUT_CLASSIFICATION	NONE, because its the requested lock mode, not the actual!
WITHOUT_CLASSIFICATION	meant to handle dynamic instantiation queries...
WITHOUT_CLASSIFICATION	--- Query translator methods ---
WITHOUT_CLASSIFICATION	-- Implementation private methods --
WITHOUT_CLASSIFICATION	deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user
WITHOUT_CLASSIFICATION	Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used
WITHOUT_CLASSIFICATION	to support dialects that have their own identity data type
WITHOUT_CLASSIFICATION	Prepare the left hand side and get the data type.
WITHOUT_CLASSIFICATION	used also for generation of FK names!
WITHOUT_CLASSIFICATION	usually useless
WITHOUT_CLASSIFICATION	added this caching as I noticed that getType() is being called multiple times...
WITHOUT_CLASSIFICATION	do not add unique constraint on DB not supporting unique and nullable columns
WITHOUT_CLASSIFICATION	for backward compatibility, disable this:
WITHOUT_CLASSIFICATION	may be final may be final may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	may be final
WITHOUT_CLASSIFICATION	Custom SQL
WITHOUT_CLASSIFICATION	Primary key constraint
WITHOUT_CLASSIFICATION	the root of the incoming property path matched one of the embedded composite identifier properties
WITHOUT_CLASSIFICATION	ignore it...
WITHOUT_CLASSIFICATION	flat recursive algorithm
WITHOUT_CLASSIFICATION	an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded
WITHOUT_CLASSIFICATION	if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)
WITHOUT_CLASSIFICATION	pass the entity-name, if not a collection-id
WITHOUT_CLASSIFICATION	Custom SQL
WITHOUT_CLASSIFICATION	Primary key constraint
WITHOUT_CLASSIFICATION	pass the column name (a generated id almost always has a single column)
WITHOUT_CLASSIFICATION	needed to satisfy KeyValue
WITHOUT_CLASSIFICATION	empty means no scoping
WITHOUT_CLASSIFICATION	index should be last column listed
WITHOUT_CLASSIFICATION	if it is a formula index, use the element columns in the PK
WITHOUT_CLASSIFICATION	don't create a unique key, 'cos some databases don't like a UK on nullable columns
WITHOUT_CLASSIFICATION	ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	no foreign key element of for a one-to-many
WITHOUT_CLASSIFICATION	TODO: we could just return all false...
WITHOUT_CLASSIFICATION	the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints
WITHOUT_CLASSIFICATION	TODO: we could just return all false...
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas, make it non-updateable
WITHOUT_CLASSIFICATION	columnUpdateability.length==0 ||
WITHOUT_CLASSIFICATION	if the property mapping consists of all formulas, make it insertable
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	expected type is intrinsic here...
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	return memberPersister.getPropertyType(propertyName);
WITHOUT_CLASSIFICATION	return memberPersister.toColumns(alias, propertyName);
WITHOUT_CLASSIFICATION	return memberPersister.getType();
WITHOUT_CLASSIFICATION	&& !indexIsFormula
WITHOUT_CLASSIFICATION	return !isOneToMany();
WITHOUT_CLASSIFICATION	instanceof AssociationType;
WITHOUT_CLASSIFICATION	we need to determine the best way to know that two joinables represent a single many-to-many...
WITHOUT_CLASSIFICATION	strip leading ','
WITHOUT_CLASSIFICATION	public boolean isSubselectLoadable();
WITHOUT_CLASSIFICATION	KEY
WITHOUT_CLASSIFICATION	columns
WITHOUT_CLASSIFICATION	SQL statements
WITHOUT_CLASSIFICATION	extra information about the element type
WITHOUT_CLASSIFICATION	types
WITHOUT_CLASSIFICATION	custom sql
WITHOUT_CLASSIFICATION	private final String unquotedIdentifierColumnName;
WITHOUT_CLASSIFICATION	dynamic filters specifically for many-to-many inside the collection
WITHOUT_CLASSIFICATION	dynamic filters for the collection
WITHOUT_CLASSIFICATION	NativeSQL: collect key column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);
WITHOUT_CLASSIFICATION	ELEMENT
WITHOUT_CLASSIFICATION	NativeSQL: collect element column and auto-aliases
WITHOUT_CLASSIFICATION	INDEX AND ROW SELECT
WITHOUT_CLASSIFICATION	NativeSQL: collect index column and auto-aliases
WITHOUT_CLASSIFICATION	unquotedIdentifierColumnName = identifierColumnAlias;
WITHOUT_CLASSIFICATION	unquotedIdentifierColumnName = null;
WITHOUT_CLASSIFICATION	GENERATE THE SQL:
WITHOUT_CLASSIFICATION	for non-arrays, we don't need to know the element class elementType.returnedClass();
WITHOUT_CLASSIFICATION	not all classpersisters implement PropertyMapping!
WITHOUT_CLASSIFICATION	Handle any filters applied to this collection
WITHOUT_CLASSIFICATION	Handle any filters applied to this collection for many-to-many
WITHOUT_CLASSIFICATION	if there is a user-specified loader, return that TODO: filters!?
WITHOUT_CLASSIFICATION	Take care of any entities that might have been evicted!
WITHOUT_CLASSIFICATION	strip leading ','
WITHOUT_CLASSIFICATION	Run a subquery loader
WITHOUT_CLASSIFICATION	needed by arrays
WITHOUT_CLASSIFICATION	TODO: something with formulas...
WITHOUT_CLASSIFICATION	an assertion
WITHOUT_CLASSIFICATION	Remove all the old entries
WITHOUT_CLASSIFICATION	create all the new entries
WITHOUT_CLASSIFICATION	&& !indexIsFormula
WITHOUT_CLASSIFICATION	&& !indexIsFormula
WITHOUT_CLASSIFICATION	delete all the deleted entries
WITHOUT_CLASSIFICATION	insert all the new entries
WITHOUT_CLASSIFICATION	==elementType ??
WITHOUT_CLASSIFICATION	update all the modified entries
WITHOUT_CLASSIFICATION	identifier collections not supported for 1-to-many
WITHOUT_CLASSIFICATION	update removed rows fks to null
WITHOUT_CLASSIFICATION	will still be issued when it used to be null
WITHOUT_CLASSIFICATION	now update all changed or added rows fks
WITHOUT_CLASSIFICATION	buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!
WITHOUT_CLASSIFICATION	use suffix for the entity columns
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	private final String rootTableName;
WITHOUT_CLASSIFICATION	INITIALIZATION:
WITHOUT_CLASSIFICATION	Custom SQL
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	Execute the SQL:
WITHOUT_CLASSIFICATION	This could also just be true all the time...
WITHOUT_CLASSIFICATION	chop the last union (all)
WITHOUT_CLASSIFICATION	TODO: check this....
WITHOUT_CLASSIFICATION	INITIALIZATION:
WITHOUT_CLASSIFICATION	properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	the closure of all properties in the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE
WITHOUT_CLASSIFICATION	MULTITABLES
WITHOUT_CLASSIFICATION	Custom sql
WITHOUT_CLASSIFICATION	subclass closure properties
WITHOUT_CLASSIFICATION	SUBCLASSES
WITHOUT_CLASSIFICATION	( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();
WITHOUT_CLASSIFICATION	don't need subclass tables, because they can't appear in conditions
WITHOUT_CLASSIFICATION	special case where we need to force incloude all subclass joins
WITHOUT_CLASSIFICATION	the class hierarchy structure
WITHOUT_CLASSIFICATION	properties of this class, including inherited properties
WITHOUT_CLASSIFICATION	the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class
WITHOUT_CLASSIFICATION	get em on the second pass!
WITHOUT_CLASSIFICATION	now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)
WITHOUT_CLASSIFICATION	discriminator column
WITHOUT_CLASSIFICATION	INITIALIZATION:
WITHOUT_CLASSIFICATION	private final Map propertyTableNumbersByName = new HashMap();
WITHOUT_CLASSIFICATION	CLASS + TABLE
WITHOUT_CLASSIFICATION	DISCRIMINATOR
WITHOUT_CLASSIFICATION	PROPERTIES
WITHOUT_CLASSIFICATION	SUBCLASSES
WITHOUT_CLASSIFICATION	Execute the SQL:
WITHOUT_CLASSIFICATION	JOINS
WITHOUT_CLASSIFICATION	propertyTableNumbersByName.put( prop.getName(), join );
WITHOUT_CLASSIFICATION	Access cached SQL
WITHOUT_CLASSIFICATION	figure out which tables need to be fetched
WITHOUT_CLASSIFICATION	figure out which columns are needed
WITHOUT_CLASSIFICATION	figure out which formulas are needed
WITHOUT_CLASSIFICATION	render the SQL
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	The optional SQL string defined in the where attribute
WITHOUT_CLASSIFICATION	information about lazy properties of this class
WITHOUT_CLASSIFICATION	information about all properties in class hierarchy
WITHOUT_CLASSIFICATION	information about all columns/formulas in class hierarchy
WITHOUT_CLASSIFICATION	dynamic filters attached to the class-level
WITHOUT_CLASSIFICATION	SQL strings
WITHOUT_CLASSIFICATION	for objects that came in via update()
WITHOUT_CLASSIFICATION	PROPERTIES
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	IDENTIFIER
WITHOUT_CLASSIFICATION	VERSION
WITHOUT_CLASSIFICATION	WHERE STRING
WITHOUT_CLASSIFICATION	SUBCLASS PROPERTY CLOSURE
WITHOUT_CLASSIFICATION	before add :-)
WITHOUT_CLASSIFICATION	Handle any filters applied to the class level
WITHOUT_CLASSIFICATION	only one-to-one is lazy fetched
WITHOUT_CLASSIFICATION	note early exit here:
WITHOUT_CLASSIFICATION	object have been loaded with setReadOnly(true); HHH-2236
WITHOUT_CLASSIFICATION	NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!
WITHOUT_CLASSIFICATION	strip leading ", "
WITHOUT_CLASSIFICATION	if there is no resulting row, return null
WITHOUT_CLASSIFICATION	otherwise return the "hydrated" state (ie. associations are not resolved)
WITHOUT_CLASSIFICATION	null owner ok??
WITHOUT_CLASSIFICATION	null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...
WITHOUT_CLASSIFICATION	Create a new FROM node for the referenced class.
WITHOUT_CLASSIFICATION	the difficulty here is exactly what do we update in order to force the version to be incremented in the db...
WITHOUT_CLASSIFICATION	performance op to avoid the array search
WITHOUT_CLASSIFICATION	properly handle property-ref-based associations
WITHOUT_CLASSIFICATION	Enable for HHH-440, which we don't like:
WITHOUT_CLASSIFICATION	ALIASES
WITHOUT_CLASSIFICATION	aliases named identifier ( alias.idname )
WITHOUT_CLASSIFICATION	aliases for composite-id's
WITHOUT_CLASSIFICATION	Fetch embedded identifiers propertynames from the "virtual" identifier component
WITHOUT_CLASSIFICATION	embedded composite ids ( alias.idname1, alias.idname2 )
WITHOUT_CLASSIFICATION	TODO: skip formulas?
WITHOUT_CLASSIFICATION	don't need filters for the static loaders
WITHOUT_CLASSIFICATION	do two passes, for collection property-ref!
WITHOUT_CLASSIFICATION	select the correct row by either pk or rowid
WITHOUT_CLASSIFICATION	TODO: eventually, rowIdName[j]
WITHOUT_CLASSIFICATION	this is a property of the table, which we are updating
WITHOUT_CLASSIFICATION	special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression
WITHOUT_CLASSIFICATION	we are using "all" or "dirty" property-based optimistic locking
WITHOUT_CLASSIFICATION	nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	add normal properties
WITHOUT_CLASSIFICATION	this property belongs on the table and is to be inserted
WITHOUT_CLASSIFICATION	add the discriminator
WITHOUT_CLASSIFICATION	add the primary key
WITHOUT_CLASSIFICATION	delegate already handles PK columns
WITHOUT_CLASSIFICATION	we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param
WITHOUT_CLASSIFICATION	Render the SQL query
WITHOUT_CLASSIFICATION	Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state
WITHOUT_CLASSIFICATION	TODO : shouldnt inserts be Expectations.NONE?
WITHOUT_CLASSIFICATION	don't bother trying to update, we know there is no row there yet
WITHOUT_CLASSIFICATION	if all fields are null, we might need to delete existing row
WITHOUT_CLASSIFICATION	there is probably a row there, so try to update if no rows were updated, we will find out
WITHOUT_CLASSIFICATION	note: updates to joined tables can't be batched...
WITHOUT_CLASSIFICATION	starting index
WITHOUT_CLASSIFICATION	Now write the values of fields onto the prepared statement
WITHOUT_CLASSIFICATION	Write any appropriate versioning conditional parameters
WITHOUT_CLASSIFICATION	Render the SQL query
WITHOUT_CLASSIFICATION	Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued
WITHOUT_CLASSIFICATION	We should use the _current_ object state (ie. after any updates that occurred during flush)
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)
WITHOUT_CLASSIFICATION	more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type
WITHOUT_CLASSIFICATION	For the case of dynamic-update="true", we need to generate the UPDATE SQL
WITHOUT_CLASSIFICATION	don't need to check laziness (dirty checking algorithm handles that)
WITHOUT_CLASSIFICATION	For the case of dynamic-update="false", or no snapshot, we use the static SQL
WITHOUT_CLASSIFICATION	if not "get", then try "is"
WITHOUT_CLASSIFICATION	Now update only the tables with dirty properties (and the table with the version number)
WITHOUT_CLASSIFICATION	For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	For the case of dynamic-insert="true", we need to generate the INSERT SQL
WITHOUT_CLASSIFICATION	For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	For the case of dynamic-insert="false", use the static SQL
WITHOUT_CLASSIFICATION	not supported
WITHOUT_CLASSIFICATION	this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	we need to utilize dynamic delete statements
WITHOUT_CLASSIFICATION	otherwise, utilize the static delete statements
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	just a performance opt!
WITHOUT_CLASSIFICATION	all joins join to the pk of the driving table
WITHOUT_CLASSIFICATION	notice that we skip the first table; it is the driving table!
WITHOUT_CLASSIFICATION	we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables
WITHOUT_CLASSIFICATION	skip the driving table
WITHOUT_CLASSIFICATION	get 'em in the right order (not that it really matters)
WITHOUT_CLASSIFICATION	here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases
WITHOUT_CLASSIFICATION	render the where and from parts
WITHOUT_CLASSIFICATION	we could regerate this inside each called method!
WITHOUT_CLASSIFICATION	now render the joins
WITHOUT_CLASSIFICATION	This will add the new from element to the origin.
WITHOUT_CLASSIFICATION	now render the select clause
WITHOUT_CLASSIFICATION	now tie it all together
WITHOUT_CLASSIFICATION	insert/update/delete SQL
WITHOUT_CLASSIFICATION	select SQL
WITHOUT_CLASSIFICATION	no need to check laziness, dirty checking handles that
WITHOUT_CLASSIFICATION	Fully resolve the map reference, create implicit joins.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	The basic implementation is to simply use the node's text
WITHOUT_CLASSIFICATION	for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.
WITHOUT_CLASSIFICATION	Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.
WITHOUT_CLASSIFICATION	check the version unsaved-value, if appropriate
WITHOUT_CLASSIFICATION	let this take precedence if defined, since it works for assigned identifiers
WITHOUT_CLASSIFICATION	check the id unsaved-value
WITHOUT_CLASSIFICATION	check to see if it is in the second-level cache
WITHOUT_CLASSIFICATION	/
WITHOUT_CLASSIFICATION	For property references generate <tablealias>.<columnname> as <projectionalias>
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	if there is no resulting row, return null
WITHOUT_CLASSIFICATION	force immediate execution of the insert
WITHOUT_CLASSIFICATION	If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.
WITHOUT_CLASSIFICATION	entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	cannot occur
WITHOUT_CLASSIFICATION	only carry on if the method has no parameters
WITHOUT_CLASSIFICATION	try "get"
WITHOUT_CLASSIFICATION	do nothing...
WITHOUT_CLASSIFICATION	do nothing...
WITHOUT_CLASSIFICATION	should be safe to only ever expect EntityPersister references here
WITHOUT_CLASSIFICATION	this page intentionally left blank :)
WITHOUT_CLASSIFICATION	do not do anything
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	cant instantiate
WITHOUT_CLASSIFICATION	if it is a property of an embedded component, invoke on the "identifier"
WITHOUT_CLASSIFICATION	otherwise:
WITHOUT_CLASSIFICATION	skip finalize methods
WITHOUT_CLASSIFICATION	note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	note: interfaces is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	while constructor is running
WITHOUT_CLASSIFICATION	note: interface is assumed to already contain HibernateProxy.class
WITHOUT_CLASSIFICATION	interfaces arguments
WITHOUT_CLASSIFICATION	TODO!
WITHOUT_CLASSIFICATION	Get the caller
WITHOUT_CLASSIFICATION	Get the caller principals
WITHOUT_CLASSIFICATION	private static final Alias DEFAULT_ALIAS = new Alias(10, null);
WITHOUT_CLASSIFICATION	Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally
WITHOUT_CLASSIFICATION	if the identifier is quoted, remove the quotes
WITHOUT_CLASSIFICATION	truncate the identifier to the max alias length, less the suffix length
WITHOUT_CLASSIFICATION	full joins are not supported.. yet!
WITHOUT_CLASSIFICATION	null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1
WITHOUT_CLASSIFICATION	the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters
WITHOUT_CLASSIFICATION	$NON-NLS-1
WITHOUT_CLASSIFICATION	$NON-NLS-1
WITHOUT_CLASSIFICATION	$NON-NLS-1
WITHOUT_CLASSIFICATION	$NON-NLS-1
WITHOUT_CLASSIFICATION	strip off any leading 'and' token
WITHOUT_CLASSIFICATION	if the condition is not already there...
WITHOUT_CLASSIFICATION	dontSpace.add("'");
WITHOUT_CLASSIFICATION	for MySQL
WITHOUT_CLASSIFICATION	HashMap columnsUnique = new HashMap();
WITHOUT_CLASSIFICATION	null caused some problems
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	not sure if this would ever be null but wanted to be careful
WITHOUT_CLASSIFICATION	even on inverse="true"
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	If true then execute db updates, otherwise just generate and display updates
WITHOUT_CLASSIFICATION	we only release the connection
WITHOUT_CLASSIFICATION	deprecated option...
WITHOUT_CLASSIFICATION	if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback
WITHOUT_CLASSIFICATION	this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)
WITHOUT_CLASSIFICATION	Create an DotNode AST for the path and resolve it.
WITHOUT_CLASSIFICATION	if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)
WITHOUT_CLASSIFICATION	swallow it, and continue to roll back JTA transaction
WITHOUT_CLASSIFICATION	so the transaction is already rolled back, by JTA spec
WITHOUT_CLASSIFICATION	this method is a noop if there is a Synchronization!
WITHOUT_CLASSIFICATION	two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join
WITHOUT_CLASSIFICATION	WebSphere, however, is not a sane JEE/JTA container...
WITHOUT_CLASSIFICATION	for sane JEE/JTA containers, the transaction itself functions as its identifier...
WITHOUT_CLASSIFICATION	swallow, the transaction was finished
WITHOUT_CLASSIFICATION	all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Create the join element under the from element.
WITHOUT_CLASSIFICATION	all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~
WITHOUT_CLASSIFICATION	map of EntityMode -> Tuplizer
WITHOUT_CLASSIFICATION	this is a virtual id property...
WITHOUT_CLASSIFICATION	this one needed only for guessEntityMode()
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel
WITHOUT_CLASSIFICATION	then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	Build the dynamic-map tuplizer...
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	private final SessionFactoryImplementor sessionFactory;
WITHOUT_CLASSIFICATION	cached for efficiency...
WITHOUT_CLASSIFICATION	public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {
WITHOUT_CLASSIFICATION	this.sessionFactory = sessionFactory;
WITHOUT_CLASSIFICATION	it was not embedded, so the argument is just an id
WITHOUT_CLASSIFICATION	then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available
WITHOUT_CLASSIFICATION	then dom4j tuplizer, if dom4j representation is available
WITHOUT_CLASSIFICATION	put the "standard" tuplizers into the tuplizer map first
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	return currentId;
WITHOUT_CLASSIFICATION	reset the id
WITHOUT_CLASSIFICATION	origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)
WITHOUT_CLASSIFICATION	reset the version
WITHOUT_CLASSIFICATION	the default is to simply not lazy fetch properties for now...
WITHOUT_CLASSIFICATION	Add the second join, the one that ends in the destination table.
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	found a ctor, but it was not publicly accessible so try to request accessibility
WITHOUT_CLASSIFICATION	determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy
WITHOUT_CLASSIFICATION	return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();
WITHOUT_CLASSIFICATION	not final because proxy factory creation can fail
WITHOUT_CLASSIFICATION	superclass entity-name
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	init the aliases, after initing the constructornode
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	legacy behavior (with no abstract attribute specified)
WITHOUT_CLASSIFICATION	Get ready to start adding nodes.
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	note: this affects the return value!
WITHOUT_CLASSIFICATION	Need to account for allowable '_' within the variant
WITHOUT_CLASSIFICATION	Add the type to the list of returned sqlResultTypes.
WITHOUT_CLASSIFICATION	Collection Types:
WITHOUT_CLASSIFICATION	convenience methods relating to operations across arrays of types...
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	Blobs are ignored by merge()
WITHOUT_CLASSIFICATION	value is the entity name
WITHOUT_CLASSIFICATION	EARLY EXIT!
WITHOUT_CLASSIFICATION	generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().
WITHOUT_CLASSIFICATION	TODO!
WITHOUT_CLASSIFICATION	xml is the entity name
WITHOUT_CLASSIFICATION	special case ... this is the leaf of the containment graph, even though not immutable
WITHOUT_CLASSIFICATION	tolerates nulls
WITHOUT_CLASSIFICATION	sqlResultTypeList,
WITHOUT_CLASSIFICATION	metaType is assumed to be single-column type
WITHOUT_CLASSIFICATION	Get all the select expressions (that we just generated) and render the select.
WITHOUT_CLASSIFICATION	Look through the FromElement's children to find any collections of values that should be fetched...
WITHOUT_CLASSIFICATION	return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...
WITHOUT_CLASSIFICATION	Use the lower case function name. Remember whether we're in a SELECT clause or not.
WITHOUT_CLASSIFICATION	IDENT might be the name of a class.
WITHOUT_CLASSIFICATION	TODO!!!
WITHOUT_CLASSIFICATION	st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only
WITHOUT_CLASSIFICATION	st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only
WITHOUT_CLASSIFICATION	both are Timestamps
WITHOUT_CLASSIFICATION	at least one is a plain old Date
WITHOUT_CLASSIFICATION	noop
WITHOUT_CLASSIFICATION	if the corresponding SQL value is NULL, the reader we got is NULL as well
WITHOUT_CLASSIFICATION	Fetch Reader content up to the end - and put characters in a StringBuffer
WITHOUT_CLASSIFICATION	Return StringBuffer content as a large String
WITHOUT_CLASSIFICATION	or Types.LONGVARCHAR?
WITHOUT_CLASSIFICATION	Not called at runtime so doesn't matter if its slow :)
WITHOUT_CLASSIFICATION	TODO
WITHOUT_CLASSIFICATION	Chop off the rest of the tree.
WITHOUT_CLASSIFICATION	different nullability rules for pk/fk
WITHOUT_CLASSIFICATION	cache this
WITHOUT_CLASSIFICATION	only really need new array during semiresolve!
WITHOUT_CLASSIFICATION	Forcefully remove leading ands from where fragments; the grammar will handle adding them
WITHOUT_CLASSIFICATION	TODO!!!!!!!
WITHOUT_CLASSIFICATION	Create a new FILTERS node as a parent of all filters
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	nothing to do
WITHOUT_CLASSIFICATION	VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...
WITHOUT_CLASSIFICATION	lobs cannot be compared
WITHOUT_CLASSIFICATION	not really necessary, I guess...
WITHOUT_CLASSIFICATION	Clobs are ignored by merge() operation
WITHOUT_CLASSIFICATION	we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!
WITHOUT_CLASSIFICATION	collections cannot be compared
WITHOUT_CLASSIFICATION	remember the uk value
WITHOUT_CLASSIFICATION	NOOP
WITHOUT_CLASSIFICATION	processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);
WITHOUT_CLASSIFICATION	we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly
WITHOUT_CLASSIFICATION	collections don't dirty an unversioned parent entity
WITHOUT_CLASSIFICATION	return false;
WITHOUT_CLASSIFICATION	This just handles a particular case of component projection, perhaps get rid of it and throw an exception
WITHOUT_CLASSIFICATION	NOTE: we avoid joining to the next table if the named property is just the foreign key value
WITHOUT_CLASSIFICATION	the key is the owning entity itself, so get the ID from the key
WITHOUT_CLASSIFICATION	if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...
WITHOUT_CLASSIFICATION	ignore subselect keywords
WITHOUT_CLASSIFICATION	copy elements into newly empty target collection
WITHOUT_CLASSIFICATION	for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection
WITHOUT_CLASSIFICATION	by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...
WITHOUT_CLASSIFICATION	get the elements back into the target making sure to handle dirty flag
WITHOUT_CLASSIFICATION	check if collection is currently being loaded
WITHOUT_CLASSIFICATION	check if it is already completely loaded, but unowned
WITHOUT_CLASSIFICATION	cache the actual id of the object, not the value of the property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	TODO!!!!!!!
WITHOUT_CLASSIFICATION	create a new collection wrapper, to be initialized later
WITHOUT_CLASSIFICATION	Some JDBC drivers erroneously return an empty array here for a null DB value :/
WITHOUT_CLASSIFICATION	our column span is the number of columns in the PK
WITHOUT_CLASSIFICATION	cannot batch fetch by unique key (property-ref associations)
WITHOUT_CLASSIFICATION	we already know current is not null...
WITHOUT_CLASSIFICATION	the ids are fully resolved, so compare them with isDirty(), not isModified()
WITHOUT_CLASSIFICATION	the owner of the association is not the owner of the id
WITHOUT_CLASSIFICATION	----------------------------------------------------------- Constructors
WITHOUT_CLASSIFICATION	----------------------------------------------------- Instance Variables
WITHOUT_CLASSIFICATION	public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }
WITHOUT_CLASSIFICATION	--------------------------------------------------------- Public Methods
WITHOUT_CLASSIFICATION	Compare the two maps for equality
WITHOUT_CLASSIFICATION	Simple tests that require no synchronization
WITHOUT_CLASSIFICATION	Sybase fail if we don't do that, sigh...
WITHOUT_CLASSIFICATION	Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders
WITHOUT_CLASSIFICATION	try to "pretty print" it
WITHOUT_CLASSIFICATION	otherwise, just dump it
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	its an interface so we can't really tell anything...
WITHOUT_CLASSIFICATION	use default behavior
WITHOUT_CLASSIFICATION	NOTE: early return
WITHOUT_CLASSIFICATION	the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries
WITHOUT_CLASSIFICATION	we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere
WITHOUT_CLASSIFICATION	Clone -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	Serialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	stream closed in the finally
WITHOUT_CLASSIFICATION	Deserialize -----------------------------------------------------------------------
WITHOUT_CLASSIFICATION	static methods only - hide constructor
WITHOUT_CLASSIFICATION	&& !('_'==character)
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	returnign null!
WITHOUT_CLASSIFICATION	includes last '.'
WITHOUT_CLASSIFICATION	+1 to include the following '.'
WITHOUT_CLASSIFICATION	Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	first time we find match!
WITHOUT_CLASSIFICATION	entityNames may now include slashes for the representations classname may be an inner class
WITHOUT_CLASSIFICATION	wrapped iterators
WITHOUT_CLASSIFICATION	index of current iterator in the wrapped iterators array
WITHOUT_CLASSIFICATION	the current iterator
WITHOUT_CLASSIFICATION	the last used iterator
WITHOUT_CLASSIFICATION	it was a boolean expression
WITHOUT_CLASSIFICATION	public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}
WITHOUT_CLASSIFICATION	call this before any Iterator method to make sure that the current Iterator is not exhausted
WITHOUT_CLASSIFICATION	doable if needed
WITHOUT_CLASSIFICATION	set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)
WITHOUT_CLASSIFICATION	peek ahead
WITHOUT_CLASSIFICATION	if we reach the end of the string w/o finding the matching end, that is an exception
WITHOUT_CLASSIFICATION	we have a placeholder, spin forward till we find the end
WITHOUT_CLASSIFICATION	make sure spinning forward did not put us past the end of the buffer...
WITHOUT_CLASSIFICATION	First, try to locate this resource through the current context classloader.
WITHOUT_CLASSIFICATION	Next, try to locate this resource through this class's classloader
WITHOUT_CLASSIFICATION	Next, try to locate this resource through the system classloader
WITHOUT_CLASSIFICATION	Anywhere else we should look?
WITHOUT_CLASSIFICATION	would need an IdentitySet for this!
WITHOUT_CLASSIFICATION	Arrays.asList doesn't do primitive arrays
WITHOUT_CLASSIFICATION	faster?
WITHOUT_CLASSIFICATION	the name of a class
WITHOUT_CLASSIFICATION	Its the listener class name
WITHOUT_CLASSIFICATION	allow 9,8,7,6,5,4,3,2,1
WITHOUT_CLASSIFICATION	default to element set if no elements() specified
WITHOUT_CLASSIFICATION	look for the instance by uuid
WITHOUT_CLASSIFICATION	in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)
WITHOUT_CLASSIFICATION	first, lets determine whether to apply cglib or javassist based instrumentation...
WITHOUT_CLASSIFICATION	Make sure we don't override previous set values
WITHOUT_CLASSIFICATION	entirely optional!!
WITHOUT_CLASSIFICATION	Its the listener instance (or better be)
WITHOUT_CLASSIFICATION	context.unbind(boundName);
WITHOUT_CLASSIFICATION	readResolveObject
WITHOUT_CLASSIFICATION	cfg.setProperty("hibernate.show_sql", "true");
WITHOUT_CLASSIFICATION	Defensive, convenience methods
WITHOUT_CLASSIFICATION	Create the SessionFactory from hibernate.cfg.xml
WITHOUT_CLASSIFICATION	Make sure you log the exception, as it might be swallowed
WITHOUT_CLASSIFICATION	Begin unit of work
WITHOUT_CLASSIFICATION	Write HTML header
WITHOUT_CLASSIFICATION	Handle actions
WITHOUT_CLASSIFICATION	Print page
WITHOUT_CLASSIFICATION	Write HTML footer
WITHOUT_CLASSIFICATION	End unit of work
WITHOUT_CLASSIFICATION	Start the session to be used for this request
WITHOUT_CLASSIFICATION	make the session available to the session factory's "current context"
WITHOUT_CLASSIFICATION	pass control along to the rest of the processing chain
WITHOUT_CLASSIFICATION	remove session from "current context"
WITHOUT_CLASSIFICATION	Eager fetch the collection so we can use it detached
WITHOUT_CLASSIFICATION	If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:
WITHOUT_CLASSIFICATION	Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached
WITHOUT_CLASSIFICATION	End of first unit of work
WITHOUT_CLASSIFICATION	or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);
WITHOUT_CLASSIFICATION	Begin second unit of work
WITHOUT_CLASSIFICATION	Reattachment of aPerson
WITHOUT_CLASSIFICATION	The getEmailAddresses() might trigger a lazy load of the collection
WITHOUT_CLASSIFICATION	We need our tm, so get it now and avoid doing other work if there is a problem
WITHOUT_CLASSIFICATION	Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates
WITHOUT_CLASSIFICATION	Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates
WITHOUT_CLASSIFICATION	JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened
WITHOUT_CLASSIFICATION	swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations
WITHOUT_CLASSIFICATION	Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.
WITHOUT_CLASSIFICATION	Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these
WITHOUT_CLASSIFICATION	If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn
WITHOUT_CLASSIFICATION	(AS is always optional, for consistency with SQL/OQL)
WITHOUT_CLASSIFICATION	process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction
WITHOUT_CLASSIFICATION	the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events
WITHOUT_CLASSIFICATION	is a primitive type invokespecial
WITHOUT_CLASSIFICATION	array of primitive type do nothing
WITHOUT_CLASSIFICATION	handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style
WITHOUT_CLASSIFICATION	handle <=, >=, !=, is not, not between, not in
WITHOUT_CLASSIFICATION	The loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	transfer an explicitly defined entity name handle the lazy attribute
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	keep the behavior consistent even for boundary usages
WITHOUT_CLASSIFICATION	get meta's from <joined-subclass>
WITHOUT_CLASSIFICATION	parameters on the property mapping should override parameters in the typedef
WITHOUT_CLASSIFICATION	fetch="join" overrides default laziness fetch="join" overrides default laziness
WITHOUT_CLASSIFICATION	NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many
WITHOUT_CLASSIFICATION	so we "clock over" on the first invocation
WITHOUT_CLASSIFICATION	state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }
WITHOUT_CLASSIFICATION	element index -> id
WITHOUT_CLASSIFICATION	note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!
WITHOUT_CLASSIFICATION	collections detect changes made via their public interface and mark themselves as dirty as a performance optimization
WITHOUT_CLASSIFICATION	essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...
WITHOUT_CLASSIFICATION	The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.
WITHOUT_CLASSIFICATION	only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml
WITHOUT_CLASSIFICATION	select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html
WITHOUT_CLASSIFICATION	registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );
WITHOUT_CLASSIFICATION	the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.
WITHOUT_CLASSIFICATION	We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400
WITHOUT_CLASSIFICATION	Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.
WITHOUT_CLASSIFICATION	add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list
WITHOUT_CLASSIFICATION	You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed
WITHOUT_CLASSIFICATION	Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl
WITHOUT_CLASSIFICATION	TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );
WITHOUT_CLASSIFICATION	Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type
WITHOUT_CLASSIFICATION	According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed
WITHOUT_CLASSIFICATION	/ Prepare persisters and link them up with their cache region/access-strategy
WITHOUT_CLASSIFICATION	Named Queries:
WITHOUT_CLASSIFICATION	this will throw an error if there's something wrong.
WITHOUT_CLASSIFICATION	does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast
WITHOUT_CLASSIFICATION	collection deletions are a special case since update() can add deletions of collections not loaded by the session.
WITHOUT_CLASSIFICATION	we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)
WITHOUT_CLASSIFICATION	if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...
WITHOUT_CLASSIFICATION	watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)
WITHOUT_CLASSIFICATION	slice, to get the columns for this component property
WITHOUT_CLASSIFICATION	int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;
WITHOUT_CLASSIFICATION	The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.
WITHOUT_CLASSIFICATION	detached collection wrappers that get found + reattached during flush shouldn't be ignored
WITHOUT_CLASSIFICATION	The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message
WITHOUT_CLASSIFICATION	if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value
WITHOUT_CLASSIFICATION	ie. we never have to null out a reference to an uninitialized proxy
WITHOUT_CLASSIFICATION	ignore this row, the collection is in process of being loaded somewhere further "up" the stack
WITHOUT_CLASSIFICATION	Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...
WITHOUT_CLASSIFICATION	should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility
WITHOUT_CLASSIFICATION	wrap up any new collections directly referenced by the object or its components
WITHOUT_CLASSIFICATION	remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);
WITHOUT_CLASSIFICATION	skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...
WITHOUT_CLASSIFICATION	upgrade the lock if necessary: lock(result, lockMode);
WITHOUT_CLASSIFICATION	now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush
WITHOUT_CLASSIFICATION	we must clone embedded composite identifiers, or we will get back the same instance that we pass in
WITHOUT_CLASSIFICATION	Sub-insertions should occur before containing insertion so Try to do the callback now
WITHOUT_CLASSIFICATION	the entity is not associated with the session, so try interceptor and unsaved-value
WITHOUT_CLASSIFICATION	scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)
WITHOUT_CLASSIFICATION	save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	stops flush being called multiple times if this method is recursively called
WITHOUT_CLASSIFICATION	if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"
WITHOUT_CLASSIFICATION	Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.
WITHOUT_CLASSIFICATION	A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed
WITHOUT_CLASSIFICATION	Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by
WITHOUT_CLASSIFICATION	... and the token could be an identifer and the error is a mismatched token error ...
WITHOUT_CLASSIFICATION	If a where clause was specified in the update/delete query, use it to limit the returned ids here...
WITHOUT_CLASSIFICATION	int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();
WITHOUT_CLASSIFICATION	Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.
WITHOUT_CLASSIFICATION	Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.
WITHOUT_CLASSIFICATION	If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.
WITHOUT_CLASSIFICATION	We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role
WITHOUT_CLASSIFICATION	our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).
WITHOUT_CLASSIFICATION	public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}
WITHOUT_CLASSIFICATION	here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name
WITHOUT_CLASSIFICATION	Set the unresolved path in this node and the parent. Set the text for the parent.
WITHOUT_CLASSIFICATION	Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).
WITHOUT_CLASSIFICATION	If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.
WITHOUT_CLASSIFICATION	for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias
WITHOUT_CLASSIFICATION	Not a collection? Return the entity property mapping.
WITHOUT_CLASSIFICATION	collection of <many-to-any/> mappings... used to circumvent the component-collection check below...
WITHOUT_CLASSIFICATION	Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.
WITHOUT_CLASSIFICATION	If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.
WITHOUT_CLASSIFICATION	check to see if our "propPath" actually represents a property on the persister
WITHOUT_CLASSIFICATION	An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.
WITHOUT_CLASSIFICATION	This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:
WITHOUT_CLASSIFICATION	If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.
WITHOUT_CLASSIFICATION	origin.addDestination(destination); Add the query spaces.
WITHOUT_CLASSIFICATION	For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.
WITHOUT_CLASSIFICATION	Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.
WITHOUT_CLASSIFICATION	explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();
WITHOUT_CLASSIFICATION	sqlResultTypeList.add( type ); Generate the select expression.
WITHOUT_CLASSIFICATION	If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).
WITHOUT_CLASSIFICATION	Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing
WITHOUT_CLASSIFICATION	for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.
WITHOUT_CLASSIFICATION	The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...
WITHOUT_CLASSIFICATION	classic translator does not support collection of ordinal param metadata
WITHOUT_CLASSIFICATION	The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.
WITHOUT_CLASSIFICATION	The loop ensures atomicity of the select + update even for no transaction or read committed isolation level
WITHOUT_CLASSIFICATION	should not be able to reach last without maxPosition being set unless there are no results
WITHOUT_CLASSIFICATION	we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch
WITHOUT_CLASSIFICATION	do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!
WITHOUT_CLASSIFICATION	if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.
WITHOUT_CLASSIFICATION	Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping
WITHOUT_CLASSIFICATION	true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch
WITHOUT_CLASSIFICATION	we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)
WITHOUT_CLASSIFICATION	add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)
WITHOUT_CLASSIFICATION	assume we are in an auto-commit state
WITHOUT_CLASSIFICATION	log a message about potential connection leaks
WITHOUT_CLASSIFICATION	ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!
WITHOUT_CLASSIFICATION	this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop
WITHOUT_CLASSIFICATION	unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance
WITHOUT_CLASSIFICATION	can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode
WITHOUT_CLASSIFICATION	don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	isSet = collection.isSet(); isSorted = collection.isSorted();
WITHOUT_CLASSIFICATION	lists, arrays sets, maps, bags
WITHOUT_CLASSIFICATION	we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching
WITHOUT_CLASSIFICATION	use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)
WITHOUT_CLASSIFICATION	all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure
WITHOUT_CLASSIFICATION	Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.
WITHOUT_CLASSIFICATION	this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!
WITHOUT_CLASSIFICATION	optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time
WITHOUT_CLASSIFICATION	this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"
WITHOUT_CLASSIFICATION	check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)
WITHOUT_CLASSIFICATION	need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...
WITHOUT_CLASSIFICATION	we always assume an instance with a null identifier or no identifier property is unsaved!
WITHOUT_CLASSIFICATION	Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...
WITHOUT_CLASSIFICATION	allow any identifier quoted with backtick only recognizes identifiers beginning with a letter
WITHOUT_CLASSIFICATION	following doesn't handle (null, not null) but unnecessary since this would mean all rows
WITHOUT_CLASSIFICATION	IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer
WITHOUT_CLASSIFICATION	we need to dirty check collections, since they can cause an owner version number increment
WITHOUT_CLASSIFICATION	return the id, so we can use it to reset the proxy id return result;
WITHOUT_CLASSIFICATION	optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );
WITHOUT_CLASSIFICATION	cache the actual id of the object, not the value of the property-ref, which might not be initialized
WITHOUT_CLASSIFICATION	We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier
WITHOUT_CLASSIFICATION	Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object
WITHOUT_CLASSIFICATION	not absolutely necessary, but helps for some equals()/hashCode() implementations
WITHOUT_CLASSIFICATION	this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value
WITHOUT_CLASSIFICATION	If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache
WITHOUT_CLASSIFICATION	can't just return null here, since that would cause an owning component to become null
WITHOUT_CLASSIFICATION	for arrays, replaceElements() may return a different reference, since the array length might not match
WITHOUT_CLASSIFICATION	actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).
WITHOUT_CLASSIFICATION	as soon as we encounter our first letter, return the substring from that position
WITHOUT_CLASSIFICATION	Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma
WITHOUT_CLASSIFICATION	isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...
WITHOUT_CLASSIFICATION	note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"
WITHOUT_CLASSIFICATION	We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods
WITHOUT_CLASSIFICATION	This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).
WITHOUT_CLASSIFICATION	and perform the load
WITHOUT_CLASSIFICATION	important: reuse the same event instances for performance!
WITHOUT_CLASSIFICATION	this is a query and we are loading multiple instances of the same collection role
WITHOUT_CLASSIFICATION	we found a collection element in the result set
WITHOUT_CLASSIFICATION	we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection
WITHOUT_CLASSIFICATION	this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set
WITHOUT_CLASSIFICATION	grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested
WITHOUT_CLASSIFICATION	a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)
WITHOUT_CLASSIFICATION	if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"
WITHOUT_CLASSIFICATION	the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	first look for a reference to a projection alias
WITHOUT_CLASSIFICATION	it does not refer to an alias of a projection, look for a property
WITHOUT_CLASSIFICATION	determine if the collection elements are entities...
WITHOUT_CLASSIFICATION	Let return-propertys override whatever the persister has for aliases.
WITHOUT_CLASSIFICATION	Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	ignore
WITHOUT_CLASSIFICATION	}
WITHOUT_CLASSIFICATION	public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }
WITHOUT_CLASSIFICATION	SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();
WITHOUT_CLASSIFICATION	include the discriminator and class-level where, but not filters
WITHOUT_CLASSIFICATION	sqlAliasSuffixes[i] = element.getColumnAliasSuffix();
WITHOUT_CLASSIFICATION	NONE, because its the requested lock mode, not the actual!
WITHOUT_CLASSIFICATION	at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).
WITHOUT_CLASSIFICATION	the column doesnt exist at all.
WITHOUT_CLASSIFICATION	we have a mapped identifier property and the root of the incoming property path matched that identifier property
WITHOUT_CLASSIFICATION	we have an embedded composite identifier
WITHOUT_CLASSIFICATION	both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );
WITHOUT_CLASSIFICATION	SUBCLASSES
WITHOUT_CLASSIFICATION	Custom sql
WITHOUT_CLASSIFICATION	protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	Custom SQL (would be better if these were private)
WITHOUT_CLASSIFICATION	moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'
WITHOUT_CLASSIFICATION	decide which ResultSet to get the property value from:
WITHOUT_CLASSIFICATION	note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:
WITHOUT_CLASSIFICATION	the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.
WITHOUT_CLASSIFICATION	Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...
WITHOUT_CLASSIFICATION	cache these since they are stateless this one could even be static...
WITHOUT_CLASSIFICATION	"as" is not in KEYWORDS
WITHOUT_CLASSIFICATION	--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);
WITHOUT_CLASSIFICATION	use the id column alias
WITHOUT_CLASSIFICATION	private List aliases = new ArrayList();
WITHOUT_CLASSIFICATION	columns.add(columnName); aliases.add(tableAlias);
WITHOUT_CLASSIFICATION	where fragment must be empty!
WITHOUT_CLASSIFICATION	revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.
WITHOUT_CLASSIFICATION	arbitrary on clause ignored!!
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	might happen with a managed connection
WITHOUT_CLASSIFICATION	if an exception occurs during flush, user must call rollback()
WITHOUT_CLASSIFICATION	Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.
WITHOUT_CLASSIFICATION	package
WITHOUT_CLASSIFICATION	swallow it (the transaction _was_ successful or successfully rolled back)
WITHOUT_CLASSIFICATION	ignore it
WITHOUT_CLASSIFICATION	we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information
WITHOUT_CLASSIFICATION	create our own copy of the user-supplied tuplizer impl map
WITHOUT_CLASSIFICATION	Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx
WITHOUT_CLASSIFICATION	then handle any user-defined entity modes...
WITHOUT_CLASSIFICATION	Establish the region root node with a non-locking data version
WITHOUT_CLASSIFICATION	temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
WITHOUT_CLASSIFICATION	NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...
WITHOUT_CLASSIFICATION	need to extract the component values and check for subtype replacements...
WITHOUT_CLASSIFICATION	We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists
WITHOUT_CLASSIFICATION	for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)
WITHOUT_CLASSIFICATION	Configure the cache to use our TM
WITHOUT_CLASSIFICATION	This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();
WITHOUT_CLASSIFICATION	Make sure JBC doesn't look one up
WITHOUT_CLASSIFICATION	some collections are not lazy:
WITHOUT_CLASSIFICATION	Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster
WITHOUT_CLASSIFICATION	return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!
WITHOUT_CLASSIFICATION	Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.
WITHOUT_CLASSIFICATION	Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...
WITHOUT_CLASSIFICATION	We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).
WITHOUT_CLASSIFICATION	local cache, so we use synchronization
WITHOUT_CLASSIFICATION	local cache, so we use synchronization
WITHOUT_CLASSIFICATION	Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail
WITHOUT_CLASSIFICATION	we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush
WITHOUT_CLASSIFICATION	we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)
WITHOUT_CLASSIFICATION	postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache
WITHOUT_CLASSIFICATION	intentionally empty
DEFECT	FIXME we don't have the associated entity table name here, has to be done in a second pass
DEFECT	For a one-to-many, a <bag> is not really a bag; it is really a set, since it can't contain the same element twice. It could be considered a bug in the mapping dtd that <bag> allows <one-to-many>.
DEFECT	RDMS does not directly support the trim() function, we use rtrim() and ltrim()
DEFECT	The following types are not supported in RDMS/JDBC and therefore commented out. However, in some cases, mapping them to CHARACTER columns works for many applications, but does not work for all cases.
DEFECT	The preference here would be SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) but this appears not to work. Jay Nance 2006-09-22
DEFECT	note: at least my local SQL Server 2005 Express shows this not working...
DEFECT	note: at least my local MySQL 5.1 install shows this not working...
DEFECT	Algorithm Check for any level one nullability breaks Look at non null components to recursively check next level of nullability breaks Look at Collections contraining component to recursively check next level of nullability breaks In the previous implementation, not-null stuffs where checked filtering by level one only updateable or insertable columns. So setting a sub component as update="false" has no effect on not-null check if the main component had good checkeability In this implementation, we keep this feature. However, I never see any documentation mentioning that, but it's for sure a limitation.
DEFECT	Don't need this, because we should never ever be selecting no columns in an insert ... select... and because it causes a bug on DB2
DEFECT	TODO : this is broke for subqueries in statements other than selects...
DEFECT	TODO : should this be an error?
DEFECT	TODO : not sure which (either?) is correct, could not find docs on how to do this. did find various blogs and forums mentioning that select CURRENT_TIMESTAMP does not work...
DEFECT	TODO: figure out how this should be set. / This was the reason for failures regarding INDEX_OP and subclass joins on theta-join dialects; not sure what behaviour we were trying to emulate ;) joinSequence = joinSequence.getFromPart(); Emulate the old addFromOnly behavior.
DEFECT	TODO: would be nice to use false, but issues with MS SQL
DEFECT	TODO: would be nice to use false, but issues with MS SQL
DEFECT	TODO: cannot use generateSuffixes() - it handles the initial suffix differently.
DEFECT	starts with an alias (old style) semi-bad thing about this: can't re-alias another alias.....
DEFECT	TODO: BUG! this currently fails for named queries for non-POJO entities
DEFECT	this call is side-effecty
DEFECT	TODO: old version did not require hashmap lookup: keys[collectionOwner].getIdentifier()
DEFECT	TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!
DEFECT	this is only needed (afaict) for processing results from the query cache; however, this cannot possibly work in the case of discovered types...
DEFECT	TODO: this requires that the collection is defined after the referenced property in the mapping file (ok?)
DEFECT	TODO: is this completely correct?
DEFECT	three general cases we check here as to whether to render a physical SQL join: 1) is our parent a DotNode as well? If so, our property reference is being further de-referenced... 2) is this a DML statement 3) we were asked to generate any needed joins (generateJoins==true) OR we are currently processing a select or from clause (an additional check is the REGRESSION_STYLE_JOIN_SUPPRESSION check solely intended for the test suite) The REGRESSION_STYLE_JOIN_SUPPRESSION is an additional check intended solely for use within the test suite. This forces the implicit join resolution to behave more like the classic parser. The underlying issue is that classic translator is simply wrong about its decisions on whether or not to render an implicit join into a physical SQL join in a lot of cases. The piece it generally tends to miss is that INNER joins effect the results by further restricting the data set! A particular manifestation of this is the fact that the classic translator will skip the physical join for ToOne implicit joins if the query is shallow; the result being that Query.list() and Query.iterate() could return different number of results!
DEFECT	TODO : currently we really do not handle ValueInclusion.PARTIAL... ValueInclusion.PARTIAL would indicate parts of a component need to be included in the select; currently we then just render the entire component into the select clause in that case.
DEFECT	TODO: inexact, what we really need to know is: are any outer joins used?
DEFECT	todo : this call will not work for anything other than pojos!
DEFECT	TODO: currently we don't know a SessionFactory reference when building the Tuplizer THIS IS A BUG (embedded-xml=false on component) TODO : fix this after HHH-1907 is complete
DEFECT	TODO: this disables laziness even in non-pojo entity modes:
DEFECT	TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object) the owner of the association is not the owner of the id
DEFECT	TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....
DEFECT	TODO: entities CAN be compared, by PK and entity name, fix this!
DEFECT	TODO: this is kinda inconsistent with CollectionType
DEFECT	TODO: would be nice to use false, but issues with MS SQL
DEFECT	TODO: does not work for EntityMode.DOM4J yet!
DEFECT	TODO: currently broken for unique-key references (does not detect change to unique key property of the associated object)
DEFECT	TODO: not really completely correct, since the uoe could occur while resolving associations, leaving the PC in an inconsistent state
DEFECT	could happen for custom Criteria impls. Not likely, but... for long term solution, see HHH-3514
DEFECT	This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, but this extension is not supported through Hibernate anyway.
DEFECT	note that this timestamp is not correct if the connection provider returns an older JDBC connection that was associated with a transaction that was already begun before openSession() was called (don't know any possible solution to this!)
DEFECT	no need to take a snapshot - this is a performance optimization, but not really important, except for entities with huge mutable property values
DEFECT	TODO : this really needs to be delayed unitl after we definitively know the operand node type; where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type
DEFECT	First, validate all the enabled filters... TODO: this implementation has bad performance
DEFECT	TODO: what if batchUpdate is a callablestatement ? calls executeBatch()
DEFECT	assume that the row was not there since it previously had only null values, so do an INSERT instead TODO: does not respect dynamic-insert
DEFECT	TODO: passing null here, because this method is not really used for DOM4J at the moment but it is still a bug, if we don't get rid of this!
DEFECT	note that this implementation is kinda broken for components with many-to-one associations
DEFECT	TODO: at the point where we are resolving collection references, we don't know if the uk value has been resolved (depends if it was earlier or later in the mapping document) - now, we could try and use e.getStatus() to decide to semiResolve(), trouble is that initializeEntity() reuses the same array for resolved and hydrated values
DEFECT	TODO: This is assertion is disabled because there is a bug that means the original owner of a transient, uninitialized collection is not known if the collection is re-referenced by a different object associated with the current Session throw new AssertionFailure("bug loading unowned collection");
DEFECT	This doesn't actually seem to work but it might work on some dbs. Also it doesn't work if there are multiple columns of results because it is not accounting for the suffix: return new String[] { getDiscriminatorColumnName() };
DEFECT	TODO: Deal with the "optional" attribute in the <join> mapping; this code assumes that optional defaults to "true" because it doesn't actually seem to work in the fetch="join" code Note that actual proper handling of optional-ality here is actually more involved than this patch assumes. Remember that we might have multiple <join/> mappings associated with a single entity. Really a couple of things need to happen to properly handle optional here: 1) First and foremost, when handling multiple <join/>s, we really should be using the entity root table as the driving table; another option here would be to choose some non-optional joined table to use as the driving table. In all likelihood, just using the root table is much simplier 2) Need to add the FK columns corresponding to each joined table to the generated select list; these would then be used when iterating the result set to determine whether all non-optional data is present My initial thoughts on the best way to deal with this would be to introduce a new SequentialSelect abstraction that actually gets generated in the persisters (ok, SingleTable...) and utilized here. It would encapsulated all this required optional-ality checking...
