// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999997081123134	WITHOUT_CLASSIFICATION	2.918876865543223E-7	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999917458718005	WITHOUT_CLASSIFICATION	8.254128199441906E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999994899845547	WITHOUT_CLASSIFICATION	5.100154452187362E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999914083311607	WITHOUT_CLASSIFICATION	8.591668839340645E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999915556829558	WITHOUT_CLASSIFICATION	8.444317044205102E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999923071593211	WITHOUT_CLASSIFICATION	7.69284067897833E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9998936698979057	WITHOUT_CLASSIFICATION	1.0633010209423969E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.999918466278689	WITHOUT_CLASSIFICATION	8.153372131106759E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999327287476081	WITHOUT_CLASSIFICATION	6.727125239193807E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999936301640737	WITHOUT_CLASSIFICATION	6.369835926223554E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999614530271579	WITHOUT_CLASSIFICATION	3.8546972842125244E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999823710052251	WITHOUT_CLASSIFICATION	1.762899477488626E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999823710052251	WITHOUT_CLASSIFICATION	1.762899477488626E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999987032098445	WITHOUT_CLASSIFICATION	1.2967901554589345E-6	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999990519133981	WITHOUT_CLASSIFICATION	9.480866019603947E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999961864247696	WITHOUT_CLASSIFICATION	3.8135752302442084E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999991968353624	WITHOUT_CLASSIFICATION	8.031646375630343E-7	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999997059479397	WITHOUT_CLASSIFICATION	2.940520602459594E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991511489986	WITHOUT_CLASSIFICATION	8.488510013878423E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991511489986	WITHOUT_CLASSIFICATION	8.488510013878423E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991511489986	WITHOUT_CLASSIFICATION	8.488510013878423E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991511489986	WITHOUT_CLASSIFICATION	8.488510013878423E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999992699392091	WITHOUT_CLASSIFICATION	7.300607909126675E-7	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999947804319614	WITHOUT_CLASSIFICATION	5.219568038495237E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999993306321369	WITHOUT_CLASSIFICATION	6.693678631539284E-7	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999945541852143	WITHOUT_CLASSIFICATION	5.4458147856329845E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999994278268837	WITHOUT_CLASSIFICATION	5.721731162999031E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999878575289117	WITHOUT_CLASSIFICATION	1.2142471088166889E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999992680298951	WITHOUT_CLASSIFICATION	7.319701049028484E-7	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.999996298646026	WITHOUT_CLASSIFICATION	3.7013539739005502E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999998420396321	WITHOUT_CLASSIFICATION	1.5796036790106034E-6	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.999970873852815	WITHOUT_CLASSIFICATION	2.9126147184965074E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999995015060027	WITHOUT_CLASSIFICATION	4.984939973057861E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999993413277221	WITHOUT_CLASSIFICATION	6.586722778456143E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999513855711785	WITHOUT_CLASSIFICATION	4.8614428821411546E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999006891752	WITHOUT_CLASSIFICATION	9.93108247519364E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999979324618463	WITHOUT_CLASSIFICATION	2.0675381537201507E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999993730898492	WITHOUT_CLASSIFICATION	6.269101507837662E-7	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999967671264428	WITHOUT_CLASSIFICATION	3.232873557171999E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999991511489986	WITHOUT_CLASSIFICATION	8.488510013878423E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999990949948013	WITHOUT_CLASSIFICATION	9.050051986520925E-7	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.999998499886941	WITHOUT_CLASSIFICATION	1.5001130589796361E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999983263102513	WITHOUT_CLASSIFICATION	1.673689748710087E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999865586443702	WITHOUT_CLASSIFICATION	1.3441355629666622E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999638010070885	WITHOUT_CLASSIFICATION	3.619899291160413E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999823004695072	WITHOUT_CLASSIFICATION	1.769953049285228E-5	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.99999999243753	WITHOUT_CLASSIFICATION	7.562469892381504E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999998295059959	WITHOUT_CLASSIFICATION	1.7049400403613417E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9999995499572802	WITHOUT_CLASSIFICATION	4.5004271969519905E-7	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998231483853829	WITHOUT_CLASSIFICATION	1.7685161461710098E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.997731671115342	WITHOUT_CLASSIFICATION	0.0022683288846579537	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.999996825678738	WITHOUT_CLASSIFICATION	3.1743212618934302E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999784831424886	WITHOUT_CLASSIFICATION	2.1516857511475346E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999992937971328	WITHOUT_CLASSIFICATION	7.062028672087228E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999607380123724	WITHOUT_CLASSIFICATION	3.926198762764491E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999681589461356	WITHOUT_CLASSIFICATION	3.184105386452785E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999881575536884	WITHOUT_CLASSIFICATION	1.184244631159027E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999985389584946	WITHOUT_CLASSIFICATION	1.4610415053694071E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999998222335058	WITHOUT_CLASSIFICATION	1.777664941474305E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999997316176601	WITHOUT_CLASSIFICATION	2.683823399605422E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.998577333384771	WITHOUT_CLASSIFICATION	0.0014226666152290727	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999953390389772	WITHOUT_CLASSIFICATION	4.660961022859768E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999749794976361	WITHOUT_CLASSIFICATION	2.5020502363890857E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999925528994573	WITHOUT_CLASSIFICATION	7.447100542713626E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999680187707929	WITHOUT_CLASSIFICATION	3.1981229207097256E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999455017452658	WITHOUT_CLASSIFICATION	5.4498254734198706E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999988769091261	WITHOUT_CLASSIFICATION	1.1230908739065907E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9991920729189145	WITHOUT_CLASSIFICATION	8.079270810854201E-4	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999999866393446	WITHOUT_CLASSIFICATION	1.3360655499078095E-8	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.999999931041855	WITHOUT_CLASSIFICATION	6.895814499165253E-8	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999944616345515	WITHOUT_CLASSIFICATION	5.538365448447062E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.999998654983962	WITHOUT_CLASSIFICATION	1.3450160379384048E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998864253865193	WITHOUT_CLASSIFICATION	1.1357461348068805E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999995162299797	WITHOUT_CLASSIFICATION	4.837700203245469E-7	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999996302101264	WITHOUT_CLASSIFICATION	3.697898736567715E-7	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999995725439539	WITHOUT_CLASSIFICATION	4.274560460366167E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999901614528289	WITHOUT_CLASSIFICATION	9.838547171072177E-6	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999997921075403	WITHOUT_CLASSIFICATION	2.0789245980446024E-7	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999998579222429	WITHOUT_CLASSIFICATION	1.42077757194359E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999932469864689	WITHOUT_CLASSIFICATION	6.753013531068913E-6	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999997227629701	WITHOUT_CLASSIFICATION	2.772370299502078E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998487165428491	WITHOUT_CLASSIFICATION	1.5128345715082896E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999973100053182	WITHOUT_CLASSIFICATION	2.6899946817143894E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999973100053182	WITHOUT_CLASSIFICATION	2.6899946817143894E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999990180349089	WITHOUT_CLASSIFICATION	9.819650911275778E-7	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999999071094513	WITHOUT_CLASSIFICATION	9.289054868117252E-8	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999927793006913	WITHOUT_CLASSIFICATION	7.22069930880048E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999971799576404	WITHOUT_CLASSIFICATION	2.82004235957444E-6	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999980680920503	WITHOUT_CLASSIFICATION	1.9319079496938174E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999089927522952	WITHOUT_CLASSIFICATION	9.10072477048958E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998270667592801	WITHOUT_CLASSIFICATION	1.7293324071978672E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999881296109473	WITHOUT_CLASSIFICATION	1.1870389052708677E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999955182604797	WITHOUT_CLASSIFICATION	4.481739520279013E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999957837805856	WITHOUT_CLASSIFICATION	4.2162194143555835E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.99999994224319	WITHOUT_CLASSIFICATION	5.775680999660441E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999988558975059	WITHOUT_CLASSIFICATION	1.1441024940679807E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999653733809	WITHOUT_CLASSIFICATION	3.4626619204872055E-8	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999998307988525	WITHOUT_CLASSIFICATION	1.6920114747100592E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999998307988525	WITHOUT_CLASSIFICATION	1.6920114747100592E-7	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999998307988525	WITHOUT_CLASSIFICATION	1.6920114747100592E-7	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999998580814967	WITHOUT_CLASSIFICATION	1.4191850330405601E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999754567791	WITHOUT_CLASSIFICATION	2.4543220831014678E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999792781928	WITHOUT_CLASSIFICATION	2.0721807187973287E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9996110122148552	WITHOUT_CLASSIFICATION	3.889877851448671E-4	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999818181574192	WITHOUT_CLASSIFICATION	1.818184258085284E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999996731631935	WITHOUT_CLASSIFICATION	3.2683680651291174E-7	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9999613859713029	WITHOUT_CLASSIFICATION	3.861402869712623E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999992641529842	WITHOUT_CLASSIFICATION	7.358470158051357E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.999997076907776	WITHOUT_CLASSIFICATION	2.9230922240463494E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.999997076907776	WITHOUT_CLASSIFICATION	2.9230922240463494E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999990289509562	WITHOUT_CLASSIFICATION	9.710490438884012E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999392070672	WITHOUT_CLASSIFICATION	6.079293287322389E-8	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999940349073644	WITHOUT_CLASSIFICATION	5.965092635607596E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999940349073644	WITHOUT_CLASSIFICATION	5.965092635607596E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999999079312338	WITHOUT_CLASSIFICATION	9.206876609765911E-8	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.999999717407176	WITHOUT_CLASSIFICATION	2.825928240363402E-7	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999673235777257	WITHOUT_CLASSIFICATION	3.267642227441706E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999999313268461	WITHOUT_CLASSIFICATION	6.867315399444587E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999976179917993	WITHOUT_CLASSIFICATION	2.3820082007839886E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999990121639406	WITHOUT_CLASSIFICATION	9.878360594314935E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999887271744213	WITHOUT_CLASSIFICATION	1.1272825578652332E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999865239990147	WITHOUT_CLASSIFICATION	1.3476000985241905E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.999993882795677	WITHOUT_CLASSIFICATION	6.117204323008018E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999984130000279	WITHOUT_CLASSIFICATION	1.5869999721886488E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999995165305088	WITHOUT_CLASSIFICATION	4.834694911037602E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999568545581	WITHOUT_CLASSIFICATION	4.314544199400365E-8	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999957441370756	WITHOUT_CLASSIFICATION	4.255862924330883E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9984208843784192	WITHOUT_CLASSIFICATION	0.0015791156215808526	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999912657377927	WITHOUT_CLASSIFICATION	8.734262207275716E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999793139891904	WITHOUT_CLASSIFICATION	2.0686010809697113E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999628338561977	WITHOUT_CLASSIFICATION	3.716614380244127E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997998123480596	WITHOUT_CLASSIFICATION	2.0018765194051023E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999937555981189	WITHOUT_CLASSIFICATION	6.244401881185281E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999974414846452	WITHOUT_CLASSIFICATION	2.5585153549134557E-6	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9999995655979436	WITHOUT_CLASSIFICATION	4.3440205633954323E-7	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999990960877169	WITHOUT_CLASSIFICATION	9.03912283151725E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999997802049278	WITHOUT_CLASSIFICATION	2.197950721998181E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996875699447	WITHOUT_CLASSIFICATION	3.124300552231901E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.999984192904801	WITHOUT_CLASSIFICATION	1.5807095199064834E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999677506238864	WITHOUT_CLASSIFICATION	3.224937611364404E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999999579828145	WITHOUT_CLASSIFICATION	4.2017185471565113E-8	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999989618391135	WITHOUT_CLASSIFICATION	1.0381608864737115E-6	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999997357391781	WITHOUT_CLASSIFICATION	2.6426082187825667E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999933119181	WITHOUT_CLASSIFICATION	6.688081826916367E-9	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999948984001286	WITHOUT_CLASSIFICATION	5.101599871487503E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999996303183869	WITHOUT_CLASSIFICATION	3.6968161308202306E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999981149733653	WITHOUT_CLASSIFICATION	1.8850266346695999E-6	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999997576545276	WITHOUT_CLASSIFICATION	2.423454723191056E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999998258084619	WITHOUT_CLASSIFICATION	1.7419153802538404E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999984755221931	WITHOUT_CLASSIFICATION	1.5244778068238595E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999987765635551	WITHOUT_CLASSIFICATION	1.223436444934283E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999979119196211	WITHOUT_CLASSIFICATION	2.0880803789430667E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999988946134952	WITHOUT_CLASSIFICATION	1.1053865047860934E-6	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.999999343149887	WITHOUT_CLASSIFICATION	6.568501129565191E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999907102315138	WITHOUT_CLASSIFICATION	9.28976848616488E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999996664543361	WITHOUT_CLASSIFICATION	3.33545663817605E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999977634450119	WITHOUT_CLASSIFICATION	2.2365549880128606E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.99999879447672	WITHOUT_CLASSIFICATION	1.2055232799597857E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999950146734535	WITHOUT_CLASSIFICATION	4.985326546501075E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999639915907717	WITHOUT_CLASSIFICATION	3.60084092282998E-5	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999991476763355	WITHOUT_CLASSIFICATION	8.523236644709815E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999894503895841	WITHOUT_CLASSIFICATION	1.0549610415954523E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999998479723248	WITHOUT_CLASSIFICATION	1.5202767525087446E-7	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999792266244827	WITHOUT_CLASSIFICATION	2.0773375517251347E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999999163691553	WITHOUT_CLASSIFICATION	8.36308447318138E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999998964241782	WITHOUT_CLASSIFICATION	1.0357582171709734E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999758792244	WITHOUT_CLASSIFICATION	2.4120775580158398E-8	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999980381678608	WITHOUT_CLASSIFICATION	1.961832139174817E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999986956538318	WITHOUT_CLASSIFICATION	1.3043461681590003E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999995871078644	WITHOUT_CLASSIFICATION	4.128921356881238E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999971970983154	WITHOUT_CLASSIFICATION	2.802901684583493E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999996429804334	WITHOUT_CLASSIFICATION	3.5701956659555693E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999900191281422	WITHOUT_CLASSIFICATION	9.980871857765726E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999998336395408	WITHOUT_CLASSIFICATION	1.663604591840694E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999990694881754	WITHOUT_CLASSIFICATION	9.305118246369909E-7	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999995949429962	WITHOUT_CLASSIFICATION	4.0505700389361334E-7	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999997395158142	WITHOUT_CLASSIFICATION	2.6048418567193716E-7	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999998661374288	WITHOUT_CLASSIFICATION	1.3386257123535982E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999999566998542	WITHOUT_CLASSIFICATION	4.330014582710246E-8	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999975177830651	WITHOUT_CLASSIFICATION	2.4822169349411726E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999538101286116	WITHOUT_CLASSIFICATION	4.6189871388459586E-5	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999234948846001	WITHOUT_CLASSIFICATION	7.650511539986879E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999998878821496	WITHOUT_CLASSIFICATION	1.1211785035058218E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999998108788745	WITHOUT_CLASSIFICATION	1.8912112556580895E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.999987172447427	WITHOUT_CLASSIFICATION	1.2827552573099781E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.999987172447427	WITHOUT_CLASSIFICATION	1.2827552573099781E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999949234301297	WITHOUT_CLASSIFICATION	5.076569870238049E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999949234301297	WITHOUT_CLASSIFICATION	5.076569870238049E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999840350457446	WITHOUT_CLASSIFICATION	1.5964954255366035E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999840350457446	WITHOUT_CLASSIFICATION	1.5964954255366035E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999917838174888	WITHOUT_CLASSIFICATION	8.216182511190753E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999917838174888	WITHOUT_CLASSIFICATION	8.216182511190753E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999993691171032	WITHOUT_CLASSIFICATION	6.308828967590168E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999985852505705	WITHOUT_CLASSIFICATION	1.4147494294178638E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999967548203205	WITHOUT_CLASSIFICATION	3.2451796795517106E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.999995602602756	WITHOUT_CLASSIFICATION	4.397397244045212E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999986312071724	WITHOUT_CLASSIFICATION	1.3687928276739245E-6	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999085112577327	WITHOUT_CLASSIFICATION	9.148874226725115E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999906893211056	WITHOUT_CLASSIFICATION	9.310678894413858E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999993692837922	WITHOUT_CLASSIFICATION	6.307162079394266E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999992713125764	WITHOUT_CLASSIFICATION	7.286874235341471E-7	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999996499043595	WITHOUT_CLASSIFICATION	3.500956405175968E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999996257310398	WITHOUT_CLASSIFICATION	3.7426896012467437E-7	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.99999738860077	WITHOUT_CLASSIFICATION	2.611399230051414E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999989600523393	WITHOUT_CLASSIFICATION	1.0399476606545113E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999704808217	WITHOUT_CLASSIFICATION	2.9519178272962622E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999994906499795	WITHOUT_CLASSIFICATION	5.093500205177095E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999963148074237	WITHOUT_CLASSIFICATION	3.685192576307861E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999999162353798	WITHOUT_CLASSIFICATION	8.37646201908618E-8	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999990301108819	WITHOUT_CLASSIFICATION	9.698891181352796E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999978255247863	WITHOUT_CLASSIFICATION	2.1744752136749903E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9996405409280588	WITHOUT_CLASSIFICATION	3.5945907194122356E-4	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999971487625414	WITHOUT_CLASSIFICATION	2.8512374585471965E-6	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999977996636853	WITHOUT_CLASSIFICATION	2.2003363147777306E-6	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999978710905773	WITHOUT_CLASSIFICATION	2.128909422791752E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999772440644468	WITHOUT_CLASSIFICATION	2.2755935553169234E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999050421210177	WITHOUT_CLASSIFICATION	9.495787898228979E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999998862807492	WITHOUT_CLASSIFICATION	1.1371925074048037E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.999980801225623	WITHOUT_CLASSIFICATION	1.9198774376884696E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999985851676105	WITHOUT_CLASSIFICATION	1.4148323894368503E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999985851676105	WITHOUT_CLASSIFICATION	1.4148323894368503E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999984596758242	WITHOUT_CLASSIFICATION	1.5403241758216673E-6	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999995818481174	WITHOUT_CLASSIFICATION	4.1815188249102205E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999987929731976	WITHOUT_CLASSIFICATION	1.2070268024030402E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.999999664264649	WITHOUT_CLASSIFICATION	3.357353508749684E-7	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999981825041162	WITHOUT_CLASSIFICATION	1.8174958838581085E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999981747751748	WITHOUT_CLASSIFICATION	1.8252248251973227E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999932250578414	WITHOUT_CLASSIFICATION	6.774942158559793E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999932250578414	WITHOUT_CLASSIFICATION	6.774942158559793E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999983281257775	WITHOUT_CLASSIFICATION	1.6718742224609305E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9694564889851579	WITHOUT_CLASSIFICATION	0.030543511014842158	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999966379161416	WITHOUT_CLASSIFICATION	3.362083858348205E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999966379161416	WITHOUT_CLASSIFICATION	3.362083858348205E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999997265803285	WITHOUT_CLASSIFICATION	2.7341967142805275E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9976000514087289	WITHOUT_CLASSIFICATION	0.0023999485912710446	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9976000514087289	WITHOUT_CLASSIFICATION	0.0023999485912710446	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999989722442141	WITHOUT_CLASSIFICATION	1.027755785958719E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999989722442141	WITHOUT_CLASSIFICATION	1.027755785958719E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999863740015146	WITHOUT_CLASSIFICATION	1.3625998485361928E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999863740015146	WITHOUT_CLASSIFICATION	1.3625998485361928E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999936360443749	WITHOUT_CLASSIFICATION	6.3639556251668924E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999977807789832	WITHOUT_CLASSIFICATION	2.21922101676479E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999972289520591	WITHOUT_CLASSIFICATION	2.7710479409489747E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.999985176279012	WITHOUT_CLASSIFICATION	1.4823720988000287E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999614945325	WITHOUT_CLASSIFICATION	3.850546748357332E-8	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999977312778333	WITHOUT_CLASSIFICATION	2.2687221667070854E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999927398677116	WITHOUT_CLASSIFICATION	7.2601322884383256E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999997244886776	WITHOUT_CLASSIFICATION	2.755113225133973E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999927398677116	WITHOUT_CLASSIFICATION	7.2601322884383256E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999232913009429	WITHOUT_CLASSIFICATION	7.670869905698409E-5	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.999999396390945	WITHOUT_CLASSIFICATION	6.03609055028659E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999995072290245	WITHOUT_CLASSIFICATION	4.927709755605705E-7	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999996507003402	WITHOUT_CLASSIFICATION	3.4929965970425365E-7	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999994111641995	WITHOUT_CLASSIFICATION	5.888358004859014E-7	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999242660311439	WITHOUT_CLASSIFICATION	7.573396885606774E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999995452997532	WITHOUT_CLASSIFICATION	4.54700246769166E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999990464980203	WITHOUT_CLASSIFICATION	9.535019796781855E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999270620219	WITHOUT_CLASSIFICATION	7.293797813712923E-8	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999986350399314	WITHOUT_CLASSIFICATION	1.3649600686871644E-6	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999992813946263	WITHOUT_CLASSIFICATION	7.186053737473213E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999997823431689	WITHOUT_CLASSIFICATION	2.1765683106992246E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999958697437766	WITHOUT_CLASSIFICATION	4.130256223439876E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.999999370752058	WITHOUT_CLASSIFICATION	6.29247941965456E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999982892733714	WITHOUT_CLASSIFICATION	1.7107266285960217E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999992987741687	WITHOUT_CLASSIFICATION	7.012258313449904E-7	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999893449635021	WITHOUT_CLASSIFICATION	1.0655036497941583E-5	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999999657032279	WITHOUT_CLASSIFICATION	3.4296772082653474E-8	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999989077851426	WITHOUT_CLASSIFICATION	1.092214857463305E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999904107284837	WITHOUT_CLASSIFICATION	9.589271516285896E-6	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999986849239282	WITHOUT_CLASSIFICATION	1.3150760718688407E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999999966571082	WITHOUT_CLASSIFICATION	3.342891807739077E-8	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999997574114052	WITHOUT_CLASSIFICATION	2.425885947991352E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999979317683436	WITHOUT_CLASSIFICATION	2.068231656472012E-6	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999998563676681	WITHOUT_CLASSIFICATION	1.436323318904299E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999996136438091	WITHOUT_CLASSIFICATION	3.863561909247442E-7	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999999868611087	WITHOUT_CLASSIFICATION	1.3138891332383636E-8	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999998086136205	WITHOUT_CLASSIFICATION	1.9138637949978834E-7	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999990833610848	WITHOUT_CLASSIFICATION	9.166389152322739E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.999999678042485	WITHOUT_CLASSIFICATION	3.219575149987752E-7	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999997988900887	WITHOUT_CLASSIFICATION	2.0110991130078675E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999909228645	WITHOUT_CLASSIFICATION	9.077135434479073E-9	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999970776179565	WITHOUT_CLASSIFICATION	2.9223820434437283E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.999997567806848	WITHOUT_CLASSIFICATION	2.4321931519254746E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999936928798668	WITHOUT_CLASSIFICATION	6.307120133163039E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999921224898948	WITHOUT_CLASSIFICATION	7.877510105227846E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999996990941143	WITHOUT_CLASSIFICATION	3.009058856112232E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999990804314806	WITHOUT_CLASSIFICATION	9.195685195243603E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.999999899571211	WITHOUT_CLASSIFICATION	1.0042878893773713E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.999996473452454	WITHOUT_CLASSIFICATION	3.526547545974063E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999985241086469	WITHOUT_CLASSIFICATION	1.4758913531120233E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999974748256879	WITHOUT_CLASSIFICATION	2.525174312006696E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999998259942539	WITHOUT_CLASSIFICATION	1.7400574621214092E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999994555589916	WITHOUT_CLASSIFICATION	5.44441008329602E-7	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999908853042	WITHOUT_CLASSIFICATION	9.114695812319815E-9	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999813888645	WITHOUT_CLASSIFICATION	1.8611135469139108E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999998693883512	WITHOUT_CLASSIFICATION	1.3061164891975075E-7	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999998578443583	WITHOUT_CLASSIFICATION	1.421556417611646E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999965269877733	WITHOUT_CLASSIFICATION	3.4730122266045284E-6	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999862976460642	WITHOUT_CLASSIFICATION	1.3702353935796871E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999949897326054	WITHOUT_CLASSIFICATION	5.0102673945867145E-6	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999993753444192	WITHOUT_CLASSIFICATION	6.24655580873528E-7	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.99992600179016	WITHOUT_CLASSIFICATION	7.399820983998867E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999997369930212	WITHOUT_CLASSIFICATION	2.6300697870761224E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999326037844	WITHOUT_CLASSIFICATION	6.739621560427218E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999326037844	WITHOUT_CLASSIFICATION	6.739621560427218E-8	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999738401517047	WITHOUT_CLASSIFICATION	2.615984829541764E-5	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9998405391829476	WITHOUT_CLASSIFICATION	1.5946081705247333E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.999963881863221	WITHOUT_CLASSIFICATION	3.611813677891721E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999969776482108	WITHOUT_CLASSIFICATION	3.0223517891625604E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999995439148943	WITHOUT_CLASSIFICATION	4.560851056689252E-7	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999987878532126	WITHOUT_CLASSIFICATION	1.2121467874886887E-6	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999365871944246	WITHOUT_CLASSIFICATION	6.341280557540956E-5	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999997322740278	WITHOUT_CLASSIFICATION	2.677259721640812E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999994571377385	WITHOUT_CLASSIFICATION	5.428622615784058E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999974236168139	WITHOUT_CLASSIFICATION	2.5763831860751727E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999930697345092	WITHOUT_CLASSIFICATION	6.930265490891469E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999930697345092	WITHOUT_CLASSIFICATION	6.930265490891469E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9993232573315012	WITHOUT_CLASSIFICATION	6.767426684988359E-4	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999400016783432	WITHOUT_CLASSIFICATION	5.999832165677067E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999929705675004	WITHOUT_CLASSIFICATION	7.0294324996811824E-6	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999972485348783	WITHOUT_CLASSIFICATION	2.7514651217284304E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999997703051814	WITHOUT_CLASSIFICATION	2.296948186003221E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999997676073374	WITHOUT_CLASSIFICATION	2.3239266258788616E-7	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999993419895232	WITHOUT_CLASSIFICATION	6.580104766405179E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999992870256584	WITHOUT_CLASSIFICATION	7.12974341646774E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.999999991212746	WITHOUT_CLASSIFICATION	8.787254016314112E-9	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999994027841201	WITHOUT_CLASSIFICATION	5.972158797975108E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999995637657654	WITHOUT_CLASSIFICATION	4.3623423456032975E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999995652866662	WITHOUT_CLASSIFICATION	4.3471333371196086E-7	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999892451020345	WITHOUT_CLASSIFICATION	1.07548979656282E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999892451020345	WITHOUT_CLASSIFICATION	1.07548979656282E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999937770221826	WITHOUT_CLASSIFICATION	6.222977817372949E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9996816227666683	WITHOUT_CLASSIFICATION	3.1837723333176467E-4	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.999875585441914	WITHOUT_CLASSIFICATION	1.2441455808597914E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999932589941121	WITHOUT_CLASSIFICATION	6.74100588791206E-6	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.999999638265047	WITHOUT_CLASSIFICATION	3.617349529423435E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999993292341108	WITHOUT_CLASSIFICATION	6.70765889075559E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.999982643561449	WITHOUT_CLASSIFICATION	1.735643855096697E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999983764590881	WITHOUT_CLASSIFICATION	1.6235409119784675E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999737093382921	WITHOUT_CLASSIFICATION	2.629066170796217E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999993042601483	WITHOUT_CLASSIFICATION	6.95739851679949E-7	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999929705675004	WITHOUT_CLASSIFICATION	7.0294324996811824E-6	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.999999146595327	WITHOUT_CLASSIFICATION	8.534046731575729E-7	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999995701264311	WITHOUT_CLASSIFICATION	4.298735688617615E-7	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999542877235	WITHOUT_CLASSIFICATION	4.571227641070025E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999984215096	WITHOUT_CLASSIFICATION	1.5784905041488196E-9	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999998747487809	WITHOUT_CLASSIFICATION	1.2525121908240984E-7	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.999996480004912	WITHOUT_CLASSIFICATION	3.5199950880531227E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999999525917954	WITHOUT_CLASSIFICATION	4.740820454578012E-8	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999994121988296	WITHOUT_CLASSIFICATION	5.878011703353478E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999999909451313	WITHOUT_CLASSIFICATION	9.054868643794623E-9	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999996820311265	WITHOUT_CLASSIFICATION	3.179688734955208E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999990464313205	WITHOUT_CLASSIFICATION	9.535686795306313E-7	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999999573199915	WITHOUT_CLASSIFICATION	4.268000840273492E-8	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999998204083858	WITHOUT_CLASSIFICATION	1.7959161422743045E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9998421933278588	WITHOUT_CLASSIFICATION	1.5780667214110376E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999990023916205	WITHOUT_CLASSIFICATION	9.976083794742584E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999996100320881	WITHOUT_CLASSIFICATION	3.899679119601777E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999959536974325	WITHOUT_CLASSIFICATION	4.0463025674058366E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999819441067501	WITHOUT_CLASSIFICATION	1.805589324999089E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9998842344990864	WITHOUT_CLASSIFICATION	1.1576550091359374E-4	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999975873125381	WITHOUT_CLASSIFICATION	2.4126874618558264E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9996904101720224	WITHOUT_CLASSIFICATION	3.0958982797753477E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999990229081207	WITHOUT_CLASSIFICATION	9.7709187940451E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999639262412453	WITHOUT_CLASSIFICATION	3.6073758754591585E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9999206195440599	WITHOUT_CLASSIFICATION	7.938045594024522E-5	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999935398956433	WITHOUT_CLASSIFICATION	6.460104356782966E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999929060074	WITHOUT_CLASSIFICATION	7.093992611660423E-9	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999453148407897	WITHOUT_CLASSIFICATION	5.468515921028096E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999997236093803	WITHOUT_CLASSIFICATION	2.7639061969691883E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.999997899643389	WITHOUT_CLASSIFICATION	2.100356610936683E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999917686791459	WITHOUT_CLASSIFICATION	8.231320854155622E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999961640124067	WITHOUT_CLASSIFICATION	3.8359875933372855E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999961640124067	WITHOUT_CLASSIFICATION	3.8359875933372855E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999774178231331	WITHOUT_CLASSIFICATION	2.2582176866981965E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999912901069957	WITHOUT_CLASSIFICATION	8.709893004270095E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999986177249842	WITHOUT_CLASSIFICATION	1.3822750158258004E-6	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999859921472585	WITHOUT_CLASSIFICATION	1.4007852741611375E-5	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999998665451116	WITHOUT_CLASSIFICATION	1.33454888410473E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999993507707777	WITHOUT_CLASSIFICATION	6.492292224172716E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999999013870378	WITHOUT_CLASSIFICATION	9.861296218778969E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999633160316928	WITHOUT_CLASSIFICATION	3.668396830713323E-5	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999994875105964	WITHOUT_CLASSIFICATION	5.12489403599136E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.999999835542659	WITHOUT_CLASSIFICATION	1.644573409758091E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999956155594086	WITHOUT_CLASSIFICATION	4.384440591374293E-6	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999944361090952	WITHOUT_CLASSIFICATION	5.563890904741296E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999792266244827	WITHOUT_CLASSIFICATION	2.0773375517251347E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999977537150109	WITHOUT_CLASSIFICATION	2.246284989125914E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.999999847843565	WITHOUT_CLASSIFICATION	1.5215643508931697E-7	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999941729401255	WITHOUT_CLASSIFICATION	5.827059874506111E-6	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999997147194639	WITHOUT_CLASSIFICATION	2.8528053604654135E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999998889948336	WITHOUT_CLASSIFICATION	1.1100516636728658E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999987648845595	WITHOUT_CLASSIFICATION	1.235115440539122E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999998147182683	WITHOUT_CLASSIFICATION	1.8528173169094532E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999998147182683	WITHOUT_CLASSIFICATION	1.8528173169094532E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999996536722273	WITHOUT_CLASSIFICATION	3.4632777272542514E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999989256703307	WITHOUT_CLASSIFICATION	1.074329669384352E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999975490387613	WITHOUT_CLASSIFICATION	2.4509612386858596E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999993174459014	WITHOUT_CLASSIFICATION	6.825540985834973E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999998685134815	WITHOUT_CLASSIFICATION	1.3148651852001578E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999995621452946	WITHOUT_CLASSIFICATION	4.378547054249419E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999998244507088	WITHOUT_CLASSIFICATION	1.7554929129615838E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999172236897	WITHOUT_CLASSIFICATION	8.277631026431729E-8	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999999556597278	WITHOUT_CLASSIFICATION	4.434027229265375E-8	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.999999999856633	WITHOUT_CLASSIFICATION	1.4336705902157352E-10	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999996570766553	WITHOUT_CLASSIFICATION	3.42923344695865E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999983363426792	WITHOUT_CLASSIFICATION	1.6636573208557242E-6	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999765117898	WITHOUT_CLASSIFICATION	2.3488210144074205E-8	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999820895688	WITHOUT_CLASSIFICATION	1.7910431303907273E-8	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999997907869833	WITHOUT_CLASSIFICATION	2.0921301669422046E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999712244310149	WITHOUT_CLASSIFICATION	2.877556898499753E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999906828108689	WITHOUT_CLASSIFICATION	9.317189130999284E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999997199776421	WITHOUT_CLASSIFICATION	2.800223578504219E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999993248748366	WITHOUT_CLASSIFICATION	6.751251633509861E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999864998854615	WITHOUT_CLASSIFICATION	1.3500114538487886E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.9999979307126788	WITHOUT_CLASSIFICATION	2.069287321178402E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999977195124743	WITHOUT_CLASSIFICATION	2.280487525737081E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999985120129556	WITHOUT_CLASSIFICATION	1.4879870443881247E-6	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9995866653542097	WITHOUT_CLASSIFICATION	4.1333464579021716E-4	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999990574377876	WITHOUT_CLASSIFICATION	9.425622123474393E-7	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999995705211244	WITHOUT_CLASSIFICATION	4.294788755707665E-7	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999941184541021	WITHOUT_CLASSIFICATION	5.8815458978377294E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.999998331172539	WITHOUT_CLASSIFICATION	1.668827461002868E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999989259244754	WITHOUT_CLASSIFICATION	1.0740755246374045E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999918480258352	WITHOUT_CLASSIFICATION	8.151974164793694E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999988830626805	WITHOUT_CLASSIFICATION	1.1169373195282233E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.999999821029479	WITHOUT_CLASSIFICATION	1.7897052103266715E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.999997519745788	WITHOUT_CLASSIFICATION	2.4802542120501098E-6	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999837438515247	WITHOUT_CLASSIFICATION	1.6256148475271003E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999688504831904	WITHOUT_CLASSIFICATION	3.114951680966223E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9940524864407627	WITHOUT_CLASSIFICATION	0.005947513559237249	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.992071985406771	WITHOUT_CLASSIFICATION	0.007928014593228899	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999996927278626	WITHOUT_CLASSIFICATION	3.072721373957148E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999991935932432	WITHOUT_CLASSIFICATION	8.064067567571392E-7	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.99999922310904	WITHOUT_CLASSIFICATION	7.768909599522047E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999959962047792	WITHOUT_CLASSIFICATION	4.003795220733081E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999950037473542	WITHOUT_CLASSIFICATION	4.996252645800723E-6	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999989036257777	WITHOUT_CLASSIFICATION	1.0963742222773206E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999716917745324	WITHOUT_CLASSIFICATION	2.8308225467697515E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999090904217641	WITHOUT_CLASSIFICATION	9.090957823594738E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999716917745324	WITHOUT_CLASSIFICATION	2.8308225467697515E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9996329613194739	WITHOUT_CLASSIFICATION	3.670386805260288E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9992014462611077	WITHOUT_CLASSIFICATION	7.985537388921801E-4	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999989681826912	WITHOUT_CLASSIFICATION	1.031817308842162E-6	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.5323962908170319	WITHOUT_CLASSIFICATION	0.46760370918296806	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999269062978742	WITHOUT_CLASSIFICATION	7.30937021257739E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999995660011272	WITHOUT_CLASSIFICATION	4.3399887276343083E-7	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999994109619871	WITHOUT_CLASSIFICATION	5.890380128718331E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.999033815781151	WITHOUT_CLASSIFICATION	9.661842188489286E-4	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999999469728936	WITHOUT_CLASSIFICATION	5.302710647597259E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9903149726353965	WITHOUT_CLASSIFICATION	0.009685027364603527	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9991475654614974	WITHOUT_CLASSIFICATION	8.524345385025384E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999997807966964	WITHOUT_CLASSIFICATION	2.1920330371296502E-7	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999971308472707	WITHOUT_CLASSIFICATION	2.86915272930073E-6	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999934409314538	WITHOUT_CLASSIFICATION	6.559068546248106E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999856169891876	WITHOUT_CLASSIFICATION	1.4383010812324727E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9307268376929219	WITHOUT_CLASSIFICATION	0.06927316230707814	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999969940253054	WITHOUT_CLASSIFICATION	3.0059746945545537E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999933668747227	WITHOUT_CLASSIFICATION	6.633125277187366E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999980823202163	WITHOUT_CLASSIFICATION	1.917679783809855E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999960112183273	WITHOUT_CLASSIFICATION	3.988781672695699E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9998074558946781	WITHOUT_CLASSIFICATION	1.9254410532188146E-4	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999984674504343	WITHOUT_CLASSIFICATION	1.5325495657038141E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999642485205495	WITHOUT_CLASSIFICATION	3.575147945046142E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998341275349	WITHOUT_CLASSIFICATION	1.658724651778158E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.999999278909674	WITHOUT_CLASSIFICATION	7.210903260304936E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.999997291347118	WITHOUT_CLASSIFICATION	2.70865288191872E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999944327083325	WITHOUT_CLASSIFICATION	5.567291667454439E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999970606480325	WITHOUT_CLASSIFICATION	2.9393519674961175E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999995015060027	WITHOUT_CLASSIFICATION	4.984939973057861E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999999288730748	WITHOUT_CLASSIFICATION	7.112692524047173E-8	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999846011926808	WITHOUT_CLASSIFICATION	1.539880731911384E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999792706527187	WITHOUT_CLASSIFICATION	2.072934728131493E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999853430742701	WITHOUT_CLASSIFICATION	1.465692573001404E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999985929472006	WITHOUT_CLASSIFICATION	1.4070527992902664E-6	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.999999927213996	WITHOUT_CLASSIFICATION	7.278600391315153E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999983511429231	WITHOUT_CLASSIFICATION	1.648857076817735E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999748284514269	WITHOUT_CLASSIFICATION	2.517154857306648E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999998589506159	WITHOUT_CLASSIFICATION	1.410493840619174E-7	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999997975841745	WITHOUT_CLASSIFICATION	2.0241582547351636E-7	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999780354075531	WITHOUT_CLASSIFICATION	2.1964592446836417E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999748860343062	WITHOUT_CLASSIFICATION	2.511396569383668E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999992251555627	WITHOUT_CLASSIFICATION	7.748444372788797E-7	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999943379073	WITHOUT_CLASSIFICATION	5.662092690796999E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999950308671531	WITHOUT_CLASSIFICATION	4.969132846858157E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999950308671531	WITHOUT_CLASSIFICATION	4.969132846858157E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999991732660181	WITHOUT_CLASSIFICATION	8.267339819790567E-7	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999954996661953	WITHOUT_CLASSIFICATION	4.500333804736231E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999361324103444	WITHOUT_CLASSIFICATION	6.386758965560211E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999947244609443	WITHOUT_CLASSIFICATION	5.275539055763704E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999968260513677	WITHOUT_CLASSIFICATION	3.1739486323248846E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999993737121796	WITHOUT_CLASSIFICATION	6.262878204817262E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999977151612046	WITHOUT_CLASSIFICATION	2.2848387953960996E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999937092694136	WITHOUT_CLASSIFICATION	6.290730586359959E-6	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999968791211	WITHOUT_CLASSIFICATION	3.1208788156667484E-9	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999309122997	WITHOUT_CLASSIFICATION	6.908770041202146E-8	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999996707660664	WITHOUT_CLASSIFICATION	3.292339335696465E-7	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999903488865697	WITHOUT_CLASSIFICATION	9.65111343029359E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999901330947393	WITHOUT_CLASSIFICATION	9.866905260707572E-6	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999999722399383	WITHOUT_CLASSIFICATION	2.7760061704068004E-7	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999907037315	WITHOUT_CLASSIFICATION	9.296268499485863E-9	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999869676016	WITHOUT_CLASSIFICATION	1.3032398447634463E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999994971477721	WITHOUT_CLASSIFICATION	5.028522278299013E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999790762149441	WITHOUT_CLASSIFICATION	2.0923785055916043E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999996903040557	WITHOUT_CLASSIFICATION	3.0969594439401657E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.999997080438198	WITHOUT_CLASSIFICATION	2.9195618020223825E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.8619356689188034	WITHOUT_CLASSIFICATION	0.13806433108119662	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.8254055202522047	WITHOUT_CLASSIFICATION	0.1745944797477952	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999303879069	WITHOUT_CLASSIFICATION	6.961209309048874E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999939979441	WITHOUT_CLASSIFICATION	6.002055896954937E-9	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999942429959435	WITHOUT_CLASSIFICATION	5.757004056404839E-6	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999190086087	WITHOUT_CLASSIFICATION	8.099139129302667E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995362215339	WITHOUT_CLASSIFICATION	4.637784660507377E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9996525873621626	WITHOUT_CLASSIFICATION	3.474126378373661E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999878521054025	WITHOUT_CLASSIFICATION	1.2147894597589836E-5	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999663764813468	WITHOUT_CLASSIFICATION	3.362351865331778E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999807403427843	WITHOUT_CLASSIFICATION	1.9259657215702155E-5	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.999999896821932	WITHOUT_CLASSIFICATION	1.0317806795513517E-7	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999996849381954	WITHOUT_CLASSIFICATION	3.1506180465161207E-7	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999994955738709	WITHOUT_CLASSIFICATION	5.044261291004439E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999998489420938	WITHOUT_CLASSIFICATION	1.5105790608999437E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999997132463149	WITHOUT_CLASSIFICATION	2.867536851265685E-7	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999659680230366	WITHOUT_CLASSIFICATION	3.403197696338285E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999870250467272	WITHOUT_CLASSIFICATION	1.2974953272747152E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9994212233120879	WITHOUT_CLASSIFICATION	5.787766879119868E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999823841281518	WITHOUT_CLASSIFICATION	1.7615871848218725E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999961052487574	WITHOUT_CLASSIFICATION	3.894751242615955E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9987439206968998	WITHOUT_CLASSIFICATION	0.0012560793031002162	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.999999765522875	WITHOUT_CLASSIFICATION	2.3447712500643337E-7	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999992134952299	WITHOUT_CLASSIFICATION	7.865047700270189E-7	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999744090695767	WITHOUT_CLASSIFICATION	2.5590930423295596E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999999523144303	WITHOUT_CLASSIFICATION	4.768556977158676E-8	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.999999857399557	WITHOUT_CLASSIFICATION	1.426004430014104E-7	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999966877630813	WITHOUT_CLASSIFICATION	3.3122369187661905E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.999979958819408	WITHOUT_CLASSIFICATION	2.0041180591879216E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999990172811485	WITHOUT_CLASSIFICATION	9.8271885153792E-7	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999959847662167	WITHOUT_CLASSIFICATION	4.0152337833086355E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999995459243777	WITHOUT_CLASSIFICATION	4.5407562236477575E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999120544195	WITHOUT_CLASSIFICATION	8.794558041291045E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.999999914524127	WITHOUT_CLASSIFICATION	8.547587301203186E-8	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999983094632635	WITHOUT_CLASSIFICATION	1.6905367364791306E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999996906530146	WITHOUT_CLASSIFICATION	3.093469854469598E-7	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999996355936894	WITHOUT_CLASSIFICATION	3.6440631061458437E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998319806503297	WITHOUT_CLASSIFICATION	1.68019349670122E-4	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999974611224246	WITHOUT_CLASSIFICATION	2.5388775754177944E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998958176935777	WITHOUT_CLASSIFICATION	1.041823064222604E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999954578503	WITHOUT_CLASSIFICATION	4.542149675178738E-9	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999996599284237	WITHOUT_CLASSIFICATION	3.4007157633724495E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999996138830836	WITHOUT_CLASSIFICATION	3.86116916465602E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999993344171398	WITHOUT_CLASSIFICATION	6.655828601954729E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.999996599233278	WITHOUT_CLASSIFICATION	3.4007667220816806E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999947977616083	WITHOUT_CLASSIFICATION	5.202238391698267E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999990959309174	WITHOUT_CLASSIFICATION	9.040690826028633E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999480914674	WITHOUT_CLASSIFICATION	5.190853257765806E-8	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999784291372212	WITHOUT_CLASSIFICATION	2.1570862778860784E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.999997028341336	WITHOUT_CLASSIFICATION	2.971658664047598E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999986699776962	WITHOUT_CLASSIFICATION	1.3300223037818763E-6	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999911566426274	WITHOUT_CLASSIFICATION	8.843357372615868E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999999582613477	WITHOUT_CLASSIFICATION	4.173865228018677E-8	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999568934503674	WITHOUT_CLASSIFICATION	4.310654963247252E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9997477339180635	WITHOUT_CLASSIFICATION	2.5226608193651585E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9996759991159997	WITHOUT_CLASSIFICATION	3.240008840003742E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9997146191082774	WITHOUT_CLASSIFICATION	2.853808917226611E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9997197953574248	WITHOUT_CLASSIFICATION	2.802046425751792E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9997048738658236	WITHOUT_CLASSIFICATION	2.9512613417636776E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9996318158541218	WITHOUT_CLASSIFICATION	3.681841458781985E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9996227356345025	WITHOUT_CLASSIFICATION	3.7726436549736017E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9997067056518304	WITHOUT_CLASSIFICATION	2.932943481695925E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9997818081806159	WITHOUT_CLASSIFICATION	2.1819181938410398E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9996503578497373	WITHOUT_CLASSIFICATION	3.4964215026263225E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9994489104696122	WITHOUT_CLASSIFICATION	5.510895303878871E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9993148667896024	WITHOUT_CLASSIFICATION	6.851332103976483E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9993440049089934	WITHOUT_CLASSIFICATION	6.559950910066263E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9992710195901179	WITHOUT_CLASSIFICATION	7.289804098820931E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9993465330224415	WITHOUT_CLASSIFICATION	6.534669775585427E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9991403191788947	WITHOUT_CLASSIFICATION	8.596808211053885E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9993210563054136	WITHOUT_CLASSIFICATION	6.789436945865347E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9990237597002232	WITHOUT_CLASSIFICATION	9.762402997767284E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9995369071868587	WITHOUT_CLASSIFICATION	4.63092813141301E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999995842979628	WITHOUT_CLASSIFICATION	4.1570203735616134E-7	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999637732174	WITHOUT_CLASSIFICATION	3.622678260779723E-8	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999882925448489	WITHOUT_CLASSIFICATION	1.1707455151023475E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999988558923348	WITHOUT_CLASSIFICATION	1.144107665178565E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999713944272219	WITHOUT_CLASSIFICATION	2.860557277804095E-5	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999995563507464	WITHOUT_CLASSIFICATION	4.436492535125234E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999976803102454	WITHOUT_CLASSIFICATION	2.3196897546198205E-6	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9996263294226108	WITHOUT_CLASSIFICATION	3.7367057738930514E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999993996727896	WITHOUT_CLASSIFICATION	6.0032721035987E-7	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999952711132997	WITHOUT_CLASSIFICATION	4.728886700405946E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.927944367002587	DEFECT	0.07205563299741301	WITHOUT_CLASSIFICATION
// integer division	WITHOUT_CLASSIFICATION	0.9999996497857756	WITHOUT_CLASSIFICATION	3.5021422445222087E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999967475184467	WITHOUT_CLASSIFICATION	3.25248155337966E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999986480702576	WITHOUT_CLASSIFICATION	1.3519297424302023E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999986480702576	WITHOUT_CLASSIFICATION	1.3519297424302023E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999985756812723	WITHOUT_CLASSIFICATION	1.4243187277872637E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999301024926772	WITHOUT_CLASSIFICATION	6.989750732276747E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999995142569	WITHOUT_CLASSIFICATION	4.857431855161573E-10	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999949137662444	WITHOUT_CLASSIFICATION	5.086233755594144E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999984091360699	WITHOUT_CLASSIFICATION	1.5908639301731752E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999723510856012	WITHOUT_CLASSIFICATION	2.7648914398803404E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999982734670686	WITHOUT_CLASSIFICATION	1.7265329313598656E-6	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999999425718944	WITHOUT_CLASSIFICATION	5.742810556598582E-8	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999980123110266	WITHOUT_CLASSIFICATION	1.9876889734643585E-6	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999982792410618	WITHOUT_CLASSIFICATION	1.720758938227603E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999933135483324	WITHOUT_CLASSIFICATION	6.686451667544141E-6	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999996632037358	WITHOUT_CLASSIFICATION	3.36796264143095E-7	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999875727262947	WITHOUT_CLASSIFICATION	1.242727370528776E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.99918086069317	WITHOUT_CLASSIFICATION	8.191393068301072E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999998078195401	WITHOUT_CLASSIFICATION	1.9218045976778522E-7	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999987700045468	WITHOUT_CLASSIFICATION	1.2299954531251324E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999823004695072	WITHOUT_CLASSIFICATION	1.769953049285228E-5	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999730408279	WITHOUT_CLASSIFICATION	2.6959172176467465E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999961265666013	WITHOUT_CLASSIFICATION	3.873433398726243E-6	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999979566580581	WITHOUT_CLASSIFICATION	2.043341941990585E-6	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999987457473042	WITHOUT_CLASSIFICATION	1.2542526958695073E-6	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999996247507291	WITHOUT_CLASSIFICATION	3.7524927084002436E-7	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999982888130223	WITHOUT_CLASSIFICATION	1.711186977735656E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.999999111489861	WITHOUT_CLASSIFICATION	8.885101390819311E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999944574968368	WITHOUT_CLASSIFICATION	5.5425031631246405E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999984382284813	WITHOUT_CLASSIFICATION	1.5617715186997579E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999995524418818	WITHOUT_CLASSIFICATION	4.4755811821944185E-7	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999963241298	WITHOUT_CLASSIFICATION	3.6758702126017253E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999999273386667	WITHOUT_CLASSIFICATION	7.266133331631863E-8	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999996954906635	WITHOUT_CLASSIFICATION	3.045093365865844E-7	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999991246124575	WITHOUT_CLASSIFICATION	8.753875424429059E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999807268299269	WITHOUT_CLASSIFICATION	1.9273170073120175E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999993842150555	WITHOUT_CLASSIFICATION	6.157849444903901E-7	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999998622550592	WITHOUT_CLASSIFICATION	1.3774494080378446E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999888721159977	WITHOUT_CLASSIFICATION	1.1127884002181483E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999549447719441	WITHOUT_CLASSIFICATION	4.5055228055746374E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999983863172943	WITHOUT_CLASSIFICATION	1.6136827057229892E-6	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998920666241	WITHOUT_CLASSIFICATION	1.0793337591118282E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999739104743453	WITHOUT_CLASSIFICATION	2.6089525654793158E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999792224052	WITHOUT_CLASSIFICATION	2.0777594692163116E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999998821388771	WITHOUT_CLASSIFICATION	1.1786112289630622E-7	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999995536641653	WITHOUT_CLASSIFICATION	4.463358347340261E-7	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999950315805084	WITHOUT_CLASSIFICATION	4.968419491619648E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999984496072273	WITHOUT_CLASSIFICATION	1.5503927728028348E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999984496072273	WITHOUT_CLASSIFICATION	1.5503927728028348E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999942969665632	WITHOUT_CLASSIFICATION	5.703033436769655E-6	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999836084652416	WITHOUT_CLASSIFICATION	1.6391534758442253E-5	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999995436979398	WITHOUT_CLASSIFICATION	4.563020602282883E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999990640605801	WITHOUT_CLASSIFICATION	9.359394198578088E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.999991665277869	WITHOUT_CLASSIFICATION	8.334722131059648E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999981167732669	WITHOUT_CLASSIFICATION	1.8832267331584948E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999758680126	WITHOUT_CLASSIFICATION	2.4131987459463387E-8	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999077016239658	WITHOUT_CLASSIFICATION	9.22983760341878E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999930984177372	WITHOUT_CLASSIFICATION	6.9015822627415125E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999903545630093	WITHOUT_CLASSIFICATION	9.645436990649783E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999903873278974	WITHOUT_CLASSIFICATION	9.61267210260294E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999992071180893	WITHOUT_CLASSIFICATION	7.928819106357685E-7	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999915367855328	WITHOUT_CLASSIFICATION	8.46321446725296E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.999990451430228	WITHOUT_CLASSIFICATION	9.548569772040244E-6	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.8002142714556998	WITHOUT_CLASSIFICATION	0.19978572854430032	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.999997856587392	WITHOUT_CLASSIFICATION	2.143412608010366E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999926542031904	WITHOUT_CLASSIFICATION	7.34579680964013E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999994017214839	WITHOUT_CLASSIFICATION	5.982785160881847E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999999486243891	WITHOUT_CLASSIFICATION	5.137561081690554E-8	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999894503895841	WITHOUT_CLASSIFICATION	1.0549610415954523E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999948056489158	WITHOUT_CLASSIFICATION	5.1943510842027324E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.999948056489158	WITHOUT_CLASSIFICATION	5.1943510842027324E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999896021242058	WITHOUT_CLASSIFICATION	1.0397875794126056E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999950113265861	WITHOUT_CLASSIFICATION	4.988673413882075E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999369174934425	WITHOUT_CLASSIFICATION	6.308250655756239E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998146432125	WITHOUT_CLASSIFICATION	1.8535678743209803E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999972289520591	WITHOUT_CLASSIFICATION	2.7710479409489747E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998441546643	WITHOUT_CLASSIFICATION	1.558453357703293E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.7661807599486289	WITHOUT_CLASSIFICATION	0.2338192400513711	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999977110585255	WITHOUT_CLASSIFICATION	2.2889414744574775E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999072792546	WITHOUT_CLASSIFICATION	9.272074537801048E-8	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999910059491551	WITHOUT_CLASSIFICATION	8.994050844919206E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999951599122484	WITHOUT_CLASSIFICATION	4.840087751541322E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999995417745682	WITHOUT_CLASSIFICATION	4.5822543182544445E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999998417947779	WITHOUT_CLASSIFICATION	1.5820522216410786E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999851512572524	WITHOUT_CLASSIFICATION	1.484874274772604E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999994201086438	WITHOUT_CLASSIFICATION	5.798913561907035E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999997829061612	WITHOUT_CLASSIFICATION	2.170938388192971E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999999486801091	WITHOUT_CLASSIFICATION	5.1319890986990183E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999995187356066	WITHOUT_CLASSIFICATION	4.812643934049086E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999868131411176	WITHOUT_CLASSIFICATION	1.3186858882345121E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999903839285367	WITHOUT_CLASSIFICATION	9.616071463461368E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999955953854595	WITHOUT_CLASSIFICATION	4.404614540574691E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999843554971	WITHOUT_CLASSIFICATION	1.5644502952399398E-8	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9998828899041577	WITHOUT_CLASSIFICATION	1.1711009584230157E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999944327083325	WITHOUT_CLASSIFICATION	5.567291667454439E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999993737121796	WITHOUT_CLASSIFICATION	6.262878204817262E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999989520470095	WITHOUT_CLASSIFICATION	1.047952990409983E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999747423786629	WITHOUT_CLASSIFICATION	2.525762133719526E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999971255021773	WITHOUT_CLASSIFICATION	2.8744978226024277E-6	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9881132533896578	WITHOUT_CLASSIFICATION	0.01188674661034219	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994879824662	WITHOUT_CLASSIFICATION	5.120175338131959E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994879824662	WITHOUT_CLASSIFICATION	5.120175338131959E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999986683648556	WITHOUT_CLASSIFICATION	1.3316351443660642E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999991747498292	WITHOUT_CLASSIFICATION	8.252501707789564E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999998394102905	WITHOUT_CLASSIFICATION	1.6058970955210062E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999996482402281	WITHOUT_CLASSIFICATION	3.5175977186877754E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999966561770639	WITHOUT_CLASSIFICATION	3.3438229361626035E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.999997152098258	WITHOUT_CLASSIFICATION	2.847901741987346E-6	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999993509105475	WITHOUT_CLASSIFICATION	6.490894525239656E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.999999924019091	WITHOUT_CLASSIFICATION	7.598090910233444E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999999906512282	WITHOUT_CLASSIFICATION	9.348771679012924E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999829636474302	WITHOUT_CLASSIFICATION	1.7036352569764915E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999996758751445	WITHOUT_CLASSIFICATION	3.2412485542134347E-7	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999998379657064	WITHOUT_CLASSIFICATION	1.6203429362369626E-7	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999990488219748	WITHOUT_CLASSIFICATION	9.511780252652923E-7	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999426128860152	WITHOUT_CLASSIFICATION	5.738711398486074E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999985622215528	WITHOUT_CLASSIFICATION	1.4377784470788616E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999967548203205	WITHOUT_CLASSIFICATION	3.2451796795517106E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999500384235719	WITHOUT_CLASSIFICATION	4.99615764281222E-5	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999993630149661	WITHOUT_CLASSIFICATION	6.369850338498845E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.999999751342531	WITHOUT_CLASSIFICATION	2.4865746902965873E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9926359003686382	WITHOUT_CLASSIFICATION	0.007364099631361813	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999864581813	WITHOUT_CLASSIFICATION	1.3541818579215007E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999455428145	WITHOUT_CLASSIFICATION	5.445718556701168E-8	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.999992713325581	WITHOUT_CLASSIFICATION	7.286674418926725E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999993736368072	WITHOUT_CLASSIFICATION	6.263631928473118E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.999908020858814	WITHOUT_CLASSIFICATION	9.197914118593524E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999998766619372	WITHOUT_CLASSIFICATION	1.2333806275322588E-7	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999994291207037	WITHOUT_CLASSIFICATION	5.708792961911162E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9996860690893521	WITHOUT_CLASSIFICATION	3.139309106478508E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999977657326056	WITHOUT_CLASSIFICATION	2.234267394350782E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999909654374707	WITHOUT_CLASSIFICATION	9.034562529358852E-6	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999336959123025	WITHOUT_CLASSIFICATION	6.63040876974555E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999986919928084	WITHOUT_CLASSIFICATION	1.308007191488653E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999996345564042	WITHOUT_CLASSIFICATION	3.6544359578705067E-7	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9998754206771545	WITHOUT_CLASSIFICATION	1.245793228454613E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999963810652808	WITHOUT_CLASSIFICATION	3.6189347191750144E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999908234062619	WITHOUT_CLASSIFICATION	9.176593738171089E-6	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.999996098164614	WITHOUT_CLASSIFICATION	3.901835386017397E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9749790686839385	WITHOUT_CLASSIFICATION	0.025020931316061507	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999791379073	WITHOUT_CLASSIFICATION	2.0862092746343237E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999970324269624	WITHOUT_CLASSIFICATION	2.967573037581028E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999993165385903	WITHOUT_CLASSIFICATION	6.834614096391791E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999609377613	WITHOUT_CLASSIFICATION	3.906223865932657E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999950554053453	WITHOUT_CLASSIFICATION	4.944594654722192E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999971604150446	WITHOUT_CLASSIFICATION	2.839584955479625E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9998997937328976	WITHOUT_CLASSIFICATION	1.0020626710238295E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999993874487252	WITHOUT_CLASSIFICATION	6.125512747760462E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999985214026389	WITHOUT_CLASSIFICATION	1.4785973609909706E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999897602404	WITHOUT_CLASSIFICATION	1.0239759647129518E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999998599631659	WITHOUT_CLASSIFICATION	1.4003683413066635E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999992080853356	WITHOUT_CLASSIFICATION	7.919146644453657E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999374541533824	WITHOUT_CLASSIFICATION	6.254584661760776E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998222630535508	WITHOUT_CLASSIFICATION	1.7773694644916829E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.99988772100253	WITHOUT_CLASSIFICATION	1.1227899746996594E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999904229630245	WITHOUT_CLASSIFICATION	9.577036975505191E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999722735413423	WITHOUT_CLASSIFICATION	2.7726458657673383E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999952304701648	WITHOUT_CLASSIFICATION	4.7695298351794555E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999939279134509	WITHOUT_CLASSIFICATION	6.072086549075532E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999988447973255	WITHOUT_CLASSIFICATION	1.1552026744926104E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999948491615606	WITHOUT_CLASSIFICATION	5.150838439491451E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999987358995845	WITHOUT_CLASSIFICATION	1.2641004154080063E-6	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999373609675495	WITHOUT_CLASSIFICATION	6.263903245057635E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999374541533824	WITHOUT_CLASSIFICATION	6.254584661760776E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.99988772100253	WITHOUT_CLASSIFICATION	1.1227899746996594E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9998222630535508	WITHOUT_CLASSIFICATION	1.7773694644916829E-4	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999434537009239	WITHOUT_CLASSIFICATION	5.6546299076096296E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.999977080288053	WITHOUT_CLASSIFICATION	2.291971194697596E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999928690782033	WITHOUT_CLASSIFICATION	7.130921796769885E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999992652406485	WITHOUT_CLASSIFICATION	7.347593514650944E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.999999315016347	WITHOUT_CLASSIFICATION	6.849836530030198E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999996793804955	WITHOUT_CLASSIFICATION	3.206195044789415E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999993645184738	WITHOUT_CLASSIFICATION	6.35481526142782E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999997777890175	WITHOUT_CLASSIFICATION	2.2221098261885624E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999952973839727	WITHOUT_CLASSIFICATION	4.702616027222893E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999994251876372	WITHOUT_CLASSIFICATION	5.748123628365933E-7	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999989778320084	WITHOUT_CLASSIFICATION	1.02216799157329E-6	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999783909692259	WITHOUT_CLASSIFICATION	2.1609030774038177E-5	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999996871659832	WITHOUT_CLASSIFICATION	3.128340167699714E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999996306929151	WITHOUT_CLASSIFICATION	3.69307084914246E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.999888124622559	WITHOUT_CLASSIFICATION	1.118753774409178E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999990979248383	WITHOUT_CLASSIFICATION	9.020751616440899E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999883388668895	WITHOUT_CLASSIFICATION	1.1661133110414264E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.99999970256941	WITHOUT_CLASSIFICATION	2.9743059004402836E-7	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.99999970256941	WITHOUT_CLASSIFICATION	2.9743059004402836E-7	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999996199895591	WITHOUT_CLASSIFICATION	3.8001044086518214E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999365412132	WITHOUT_CLASSIFICATION	6.345878676400856E-8	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.999999970105213	WITHOUT_CLASSIFICATION	2.989478694258054E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999152896073168	WITHOUT_CLASSIFICATION	8.471039268311417E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999997916844591	WITHOUT_CLASSIFICATION	2.0831554095730432E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999941701913	WITHOUT_CLASSIFICATION	5.82980884739779E-9	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999998986041426	WITHOUT_CLASSIFICATION	1.0139585729129691E-7	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999983204045931	WITHOUT_CLASSIFICATION	1.6795954068381705E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999997969726494	WITHOUT_CLASSIFICATION	2.030273505826486E-7	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999995303893187	WITHOUT_CLASSIFICATION	4.6961068138675076E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999998216448845	WITHOUT_CLASSIFICATION	1.7835511542227417E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999959719156256	WITHOUT_CLASSIFICATION	4.028084374430973E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999965232878206	WITHOUT_CLASSIFICATION	3.476712179374749E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999807915037005	WITHOUT_CLASSIFICATION	1.9208496299550688E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999998017369315	WITHOUT_CLASSIFICATION	1.9826306847235966E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998233351562	WITHOUT_CLASSIFICATION	1.766648436699207E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999982895741978	WITHOUT_CLASSIFICATION	1.7104258022438843E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999947402482435	WITHOUT_CLASSIFICATION	5.259751756390957E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999996251667782	WITHOUT_CLASSIFICATION	3.7483322178687446E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.999998449726348	WITHOUT_CLASSIFICATION	1.5502736520217695E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.999996726343893	WITHOUT_CLASSIFICATION	3.2736561069964838E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999995703437331	WITHOUT_CLASSIFICATION	4.2965626694130825E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999954065291	WITHOUT_CLASSIFICATION	4.593470900345228E-9	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999954065291	WITHOUT_CLASSIFICATION	4.593470900345228E-9	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999984350562942	WITHOUT_CLASSIFICATION	1.5649437058178148E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999962011712462	WITHOUT_CLASSIFICATION	3.798828753877774E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999894029803933	WITHOUT_CLASSIFICATION	1.0597019606827885E-5	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9998986274862939	WITHOUT_CLASSIFICATION	1.0137251370620638E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999953023006906	WITHOUT_CLASSIFICATION	4.697699309424113E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999953023006906	WITHOUT_CLASSIFICATION	4.697699309424113E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999998860340753	WITHOUT_CLASSIFICATION	1.139659246955448E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999960903729188	WITHOUT_CLASSIFICATION	3.909627081108045E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997561966042	WITHOUT_CLASSIFICATION	2.4380339581917126E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999999189473143	WITHOUT_CLASSIFICATION	8.105268568160937E-8	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999951565334	WITHOUT_CLASSIFICATION	4.84346667113327E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999997111278823	WITHOUT_CLASSIFICATION	2.8887211761203776E-7	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999949720400046	WITHOUT_CLASSIFICATION	5.027959995382536E-6	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999954637790913	WITHOUT_CLASSIFICATION	4.5362209086922935E-6	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999834754209364	WITHOUT_CLASSIFICATION	1.6524579063681896E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999855918964	WITHOUT_CLASSIFICATION	1.4408103698772296E-8	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9998754501091924	WITHOUT_CLASSIFICATION	1.2454989080749477E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999998375419753	WITHOUT_CLASSIFICATION	1.6245802472263215E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999990472360539	WITHOUT_CLASSIFICATION	9.527639459388044E-7	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999998189627868	WITHOUT_CLASSIFICATION	1.8103721313566714E-7	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998233351562	WITHOUT_CLASSIFICATION	1.766648436699207E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999954065291	WITHOUT_CLASSIFICATION	4.593470900345228E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999997111278823	WITHOUT_CLASSIFICATION	2.8887211761203776E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999884099432986	WITHOUT_CLASSIFICATION	1.1590056701268249E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999884099432986	WITHOUT_CLASSIFICATION	1.1590056701268249E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999986214808239	WITHOUT_CLASSIFICATION	1.378519176168746E-6	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999984395691	WITHOUT_CLASSIFICATION	1.5604309306940634E-9	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999373319614	WITHOUT_CLASSIFICATION	6.266803865303487E-8	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999998677203628	WITHOUT_CLASSIFICATION	1.3227963724347422E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999894153113922	WITHOUT_CLASSIFICATION	1.0584688607770444E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999813432571	WITHOUT_CLASSIFICATION	1.865674301133014E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999662785612446	WITHOUT_CLASSIFICATION	3.372143875543473E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999862039207912	WITHOUT_CLASSIFICATION	1.3796079208805542E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999958040737	WITHOUT_CLASSIFICATION	4.195926267211029E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999844276952	WITHOUT_CLASSIFICATION	1.5572304753864048E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999996537885588	WITHOUT_CLASSIFICATION	3.4621144116043404E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999978089021	WITHOUT_CLASSIFICATION	2.1910979640169942E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999897516503974	WITHOUT_CLASSIFICATION	1.024834960255208E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999982895741978	WITHOUT_CLASSIFICATION	1.7104258022438843E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999954065291	WITHOUT_CLASSIFICATION	4.593470900345228E-9	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999960903729188	WITHOUT_CLASSIFICATION	3.909627081108045E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997561966042	WITHOUT_CLASSIFICATION	2.4380339581917126E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997561966042	WITHOUT_CLASSIFICATION	2.4380339581917126E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999951565334	WITHOUT_CLASSIFICATION	4.84346667113327E-9	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999997111278823	WITHOUT_CLASSIFICATION	2.8887211761203776E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999997111278823	WITHOUT_CLASSIFICATION	2.8887211761203776E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999884099432986	WITHOUT_CLASSIFICATION	1.1590056701268249E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999864190062422	WITHOUT_CLASSIFICATION	1.358099375786511E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999568996658625	WITHOUT_CLASSIFICATION	4.310033413755626E-5	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999969338206001	WITHOUT_CLASSIFICATION	3.066179399842115E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998634167924	WITHOUT_CLASSIFICATION	1.3658320764120866E-7	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999964993291389	WITHOUT_CLASSIFICATION	3.5006708611160993E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9987444319321126	WITHOUT_CLASSIFICATION	0.0012555680678873616	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999992734909814	WITHOUT_CLASSIFICATION	7.265090186336326E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999998314467591	WITHOUT_CLASSIFICATION	1.6855324086570834E-7	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999994803551606	WITHOUT_CLASSIFICATION	5.196448394271907E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999960903729188	WITHOUT_CLASSIFICATION	3.909627081108045E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997561966042	WITHOUT_CLASSIFICATION	2.4380339581917126E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997561966042	WITHOUT_CLASSIFICATION	2.4380339581917126E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999951565334	WITHOUT_CLASSIFICATION	4.84346667113327E-9	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.999862039207912	WITHOUT_CLASSIFICATION	1.3796079208805542E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999844276952	WITHOUT_CLASSIFICATION	1.5572304753864048E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999993910712728	WITHOUT_CLASSIFICATION	6.089287272853032E-7	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999997261590433	WITHOUT_CLASSIFICATION	2.738409566846033E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999927680418609	WITHOUT_CLASSIFICATION	7.231958139132921E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999927680418609	WITHOUT_CLASSIFICATION	7.231958139132921E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999941802834719	WITHOUT_CLASSIFICATION	5.819716528211342E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999803725320013	WITHOUT_CLASSIFICATION	1.9627467998694282E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999993362524207	WITHOUT_CLASSIFICATION	6.637475794159968E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999991600249359	WITHOUT_CLASSIFICATION	8.399750641214065E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999726090294	WITHOUT_CLASSIFICATION	2.7390970568976086E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999726090294	WITHOUT_CLASSIFICATION	2.7390970568976086E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999995108789436	WITHOUT_CLASSIFICATION	4.891210563896135E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999995108789436	WITHOUT_CLASSIFICATION	4.891210563896135E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999986900696441	WITHOUT_CLASSIFICATION	1.3099303558696007E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999986900696441	WITHOUT_CLASSIFICATION	1.3099303558696007E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999996042388632	WITHOUT_CLASSIFICATION	3.9576113679622916E-7	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999991216450783	WITHOUT_CLASSIFICATION	8.783549217747857E-7	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999879860218716	WITHOUT_CLASSIFICATION	1.2013978128554453E-5	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.999997970537162	WITHOUT_CLASSIFICATION	2.0294628381086823E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999995902829765	WITHOUT_CLASSIFICATION	4.0971702349127296E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999986842417232	WITHOUT_CLASSIFICATION	1.315758276721954E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999994619707144	WITHOUT_CLASSIFICATION	5.380292855925876E-7	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999846878964	WITHOUT_CLASSIFICATION	1.5312103584124897E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999980470347839	WITHOUT_CLASSIFICATION	1.952965216109155E-6	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999569107037627	WITHOUT_CLASSIFICATION	4.3089296237178024E-5	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999995209458686	WITHOUT_CLASSIFICATION	4.790541313635813E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999990393682289	WITHOUT_CLASSIFICATION	9.606317712375262E-7	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999960279538838	WITHOUT_CLASSIFICATION	3.972046116254043E-6	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999626688980696	WITHOUT_CLASSIFICATION	3.7331101930359185E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999626688980696	WITHOUT_CLASSIFICATION	3.7331101930359185E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999996332547352	WITHOUT_CLASSIFICATION	3.6674526478201353E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999998441546643	WITHOUT_CLASSIFICATION	1.558453357703293E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999900269946154	WITHOUT_CLASSIFICATION	9.97300538471582E-6	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999996770116757	WITHOUT_CLASSIFICATION	3.229883242679568E-7	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999997898655297	WITHOUT_CLASSIFICATION	2.1013447035709652E-7	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999993733885455	WITHOUT_CLASSIFICATION	6.266114544085386E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999993352138297	WITHOUT_CLASSIFICATION	6.647861702825316E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999985492725363	WITHOUT_CLASSIFICATION	1.4507274637134414E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999987996460427	WITHOUT_CLASSIFICATION	1.2003539573511129E-6	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999982875173876	WITHOUT_CLASSIFICATION	1.7124826122993657E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999993567284796	WITHOUT_CLASSIFICATION	6.432715203723247E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9999264730283574	WITHOUT_CLASSIFICATION	7.352697164267849E-5	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999899843833332	WITHOUT_CLASSIFICATION	1.0015616666851651E-5	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9998474220927199	WITHOUT_CLASSIFICATION	1.5257790728013675E-4	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.999997129132959	WITHOUT_CLASSIFICATION	2.870867040950484E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999931573815906	WITHOUT_CLASSIFICATION	6.842618409532274E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999663575311559	WITHOUT_CLASSIFICATION	3.364246884403074E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999998306573832	WITHOUT_CLASSIFICATION	1.6934261685042774E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999985142260014	WITHOUT_CLASSIFICATION	1.4857739986449001E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999985142260014	WITHOUT_CLASSIFICATION	1.4857739986449001E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999982688822483	WITHOUT_CLASSIFICATION	1.7311177516162497E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999916097860959	WITHOUT_CLASSIFICATION	8.390213904053037E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999519573034537	WITHOUT_CLASSIFICATION	4.8042696546368956E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999519573034537	WITHOUT_CLASSIFICATION	4.8042696546368956E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999988374829855	WITHOUT_CLASSIFICATION	1.162517014537836E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999968216130983	WITHOUT_CLASSIFICATION	3.1783869017106566E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999896813733068	WITHOUT_CLASSIFICATION	1.0318626693188341E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999899075615023	WITHOUT_CLASSIFICATION	1.0092438497662747E-5	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999993192966186	WITHOUT_CLASSIFICATION	6.807033815643597E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999966446015414	WITHOUT_CLASSIFICATION	3.3553984586122682E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999966446015414	WITHOUT_CLASSIFICATION	3.3553984586122682E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996504072274	WITHOUT_CLASSIFICATION	3.49592772626453E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999993516631835	WITHOUT_CLASSIFICATION	6.483368163921307E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999986991575114	WITHOUT_CLASSIFICATION	1.3008424886387874E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999951210033052	WITHOUT_CLASSIFICATION	4.87899669475244E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999916097860959	WITHOUT_CLASSIFICATION	8.390213904053037E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.999995974957889	WITHOUT_CLASSIFICATION	4.025042111078226E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999930456032295	WITHOUT_CLASSIFICATION	6.9543967705185195E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999930456032295	WITHOUT_CLASSIFICATION	6.9543967705185195E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999986889887046	WITHOUT_CLASSIFICATION	1.311011295440798E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999910207159116	WITHOUT_CLASSIFICATION	8.979284088347214E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999910207159116	WITHOUT_CLASSIFICATION	8.979284088347214E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999910207159116	WITHOUT_CLASSIFICATION	8.979284088347214E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999986889887046	WITHOUT_CLASSIFICATION	1.311011295440798E-6	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999565893786	WITHOUT_CLASSIFICATION	4.3410621445447314E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.999963965801176	WITHOUT_CLASSIFICATION	3.603419882401798E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9998762394240279	WITHOUT_CLASSIFICATION	1.2376057597212575E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999961404430885	WITHOUT_CLASSIFICATION	3.85955691147628E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999940955817039	WITHOUT_CLASSIFICATION	5.904418296031138E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999997378595792	WITHOUT_CLASSIFICATION	2.621404208037778E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999716072436	WITHOUT_CLASSIFICATION	2.8392756430111045E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999988809415542	WITHOUT_CLASSIFICATION	1.1190584456939833E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999993567284796	WITHOUT_CLASSIFICATION	6.432715203723247E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999991543161266	WITHOUT_CLASSIFICATION	8.456838734098178E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983651791443	WITHOUT_CLASSIFICATION	1.6348208556232047E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999989640977023	WITHOUT_CLASSIFICATION	1.0359022977250152E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999996882192694	WITHOUT_CLASSIFICATION	3.1178073047696574E-7	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999997739355145	WITHOUT_CLASSIFICATION	2.2606448541190793E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9998811752330676	WITHOUT_CLASSIFICATION	1.1882476693241459E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999976159429825	WITHOUT_CLASSIFICATION	2.3840570175847373E-6	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999997501723371	WITHOUT_CLASSIFICATION	2.498276627999759E-7	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999998674641257	WITHOUT_CLASSIFICATION	1.3253587430248903E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998488711084638	WITHOUT_CLASSIFICATION	1.5112889153629503E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999959424560668	WITHOUT_CLASSIFICATION	4.057543933203564E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999452839028	WITHOUT_CLASSIFICATION	5.471609718900131E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999926634268343	WITHOUT_CLASSIFICATION	7.3365731656433005E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999998542268749	WITHOUT_CLASSIFICATION	1.4577312505357872E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999873867405	WITHOUT_CLASSIFICATION	1.2613259617200235E-8	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999966091700158	WITHOUT_CLASSIFICATION	3.390829984266871E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999966091700158	WITHOUT_CLASSIFICATION	3.390829984266871E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999966091700158	WITHOUT_CLASSIFICATION	3.390829984266871E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999975893734392	WITHOUT_CLASSIFICATION	2.410626560848738E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999990318603295	WITHOUT_CLASSIFICATION	9.681396705546994E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999983340080495	WITHOUT_CLASSIFICATION	1.6659919504204172E-6	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9977932871054783	WITHOUT_CLASSIFICATION	0.0022067128945217353	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999757473238	WITHOUT_CLASSIFICATION	2.4252676120609714E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999896195644	WITHOUT_CLASSIFICATION	1.0380435671060755E-8	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.999999999436972	WITHOUT_CLASSIFICATION	5.630279787647849E-10	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999998254179977	WITHOUT_CLASSIFICATION	1.745820022292304E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999998627138121	WITHOUT_CLASSIFICATION	1.372861878768839E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999869339399069	WITHOUT_CLASSIFICATION	1.306606009319091E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999791824653326	WITHOUT_CLASSIFICATION	2.081753466736233E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998250778550998	WITHOUT_CLASSIFICATION	1.7492214490015214E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999996504072274	WITHOUT_CLASSIFICATION	3.49592772626453E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999835318854	WITHOUT_CLASSIFICATION	1.646811466455212E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999986889887046	WITHOUT_CLASSIFICATION	1.311011295440798E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999997378595792	WITHOUT_CLASSIFICATION	2.621404208037778E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999983651791443	WITHOUT_CLASSIFICATION	1.6348208556232047E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999996882192694	WITHOUT_CLASSIFICATION	3.1178073047696574E-7	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9998811752330676	WITHOUT_CLASSIFICATION	1.1882476693241459E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999989640977023	WITHOUT_CLASSIFICATION	1.0359022977250152E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999976159429825	WITHOUT_CLASSIFICATION	2.3840570175847373E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998488711084638	WITHOUT_CLASSIFICATION	1.5112889153629503E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999998674641257	WITHOUT_CLASSIFICATION	1.3253587430248903E-7	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999999452839028	WITHOUT_CLASSIFICATION	5.471609718900131E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999994385038733	WITHOUT_CLASSIFICATION	5.614961267774605E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999627852068369	WITHOUT_CLASSIFICATION	3.721479316310928E-5	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999993505638892	WITHOUT_CLASSIFICATION	6.494361107107313E-7	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999998105064879	WITHOUT_CLASSIFICATION	1.8949351207418518E-7	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999980476061475	WITHOUT_CLASSIFICATION	1.9523938524117544E-6	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999789635627673	WITHOUT_CLASSIFICATION	2.1036437232652383E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999970674180017	WITHOUT_CLASSIFICATION	2.932581998307312E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999594259040875	WITHOUT_CLASSIFICATION	4.057409591239368E-5	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999558134204797	WITHOUT_CLASSIFICATION	4.418657952034102E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999997462824537	WITHOUT_CLASSIFICATION	2.5371754626356544E-7	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.999999607739378	WITHOUT_CLASSIFICATION	3.922606220297804E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999800777147	WITHOUT_CLASSIFICATION	1.9922285255620918E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999981353370274	WITHOUT_CLASSIFICATION	1.8646629725886558E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.99999979020947	WITHOUT_CLASSIFICATION	2.097905298684223E-7	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999994469969893	WITHOUT_CLASSIFICATION	5.53003010671984E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998339161377	WITHOUT_CLASSIFICATION	1.6608386222118314E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.999994152439211	WITHOUT_CLASSIFICATION	5.847560789043554E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999987979247972	WITHOUT_CLASSIFICATION	1.2020752028772487E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998199381092	WITHOUT_CLASSIFICATION	1.800618908688065E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999846575213	WITHOUT_CLASSIFICATION	1.5342478788103703E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999952652796001	WITHOUT_CLASSIFICATION	4.734720399791439E-6	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999899333118	WITHOUT_CLASSIFICATION	1.006668820284519E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998389507676483	WITHOUT_CLASSIFICATION	1.6104923235163237E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998389507676483	WITHOUT_CLASSIFICATION	1.6104923235163237E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998389507676483	WITHOUT_CLASSIFICATION	1.6104923235163237E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999856331144387	WITHOUT_CLASSIFICATION	1.436688556131062E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999856331144387	WITHOUT_CLASSIFICATION	1.436688556131062E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9998433324206601	WITHOUT_CLASSIFICATION	1.5666757933994435E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999325514150674	WITHOUT_CLASSIFICATION	6.744858493248127E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.999999899333118	WITHOUT_CLASSIFICATION	1.006668820284519E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999990399838905	WITHOUT_CLASSIFICATION	9.600161094968282E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998389507676483	WITHOUT_CLASSIFICATION	1.6104923235163237E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9998389507676483	WITHOUT_CLASSIFICATION	1.6104923235163237E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.999856331144387	WITHOUT_CLASSIFICATION	1.436688556131062E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999325514150674	WITHOUT_CLASSIFICATION	6.744858493248127E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999979229741329	WITHOUT_CLASSIFICATION	2.077025867044874E-6	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999979229741329	WITHOUT_CLASSIFICATION	2.077025867044874E-6	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997843885707	WITHOUT_CLASSIFICATION	2.156114292047505E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999997843885707	WITHOUT_CLASSIFICATION	2.156114292047505E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999807826099103	WITHOUT_CLASSIFICATION	1.9217390089633185E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999807826099103	WITHOUT_CLASSIFICATION	1.9217390089633185E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999936004552101	WITHOUT_CLASSIFICATION	6.399544789865277E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999954919142463	WITHOUT_CLASSIFICATION	4.508085753742981E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999954919142463	WITHOUT_CLASSIFICATION	4.508085753742981E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999993883571733	WITHOUT_CLASSIFICATION	6.116428268104828E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999993883571733	WITHOUT_CLASSIFICATION	6.116428268104828E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999997688800576	WITHOUT_CLASSIFICATION	2.311199423267515E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999962778095922	WITHOUT_CLASSIFICATION	3.7221904077703245E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999962778095922	WITHOUT_CLASSIFICATION	3.7221904077703245E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999964146423825	WITHOUT_CLASSIFICATION	3.58535761748022E-6	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999795976864186	WITHOUT_CLASSIFICATION	2.040231358137911E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999982730086365	WITHOUT_CLASSIFICATION	1.7269913635077535E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999964146423825	WITHOUT_CLASSIFICATION	3.58535761748022E-6	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999900301224114	WITHOUT_CLASSIFICATION	9.969877588556178E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979251930823	WITHOUT_CLASSIFICATION	2.074806917749659E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979251930823	WITHOUT_CLASSIFICATION	2.074806917749659E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979251930823	WITHOUT_CLASSIFICATION	2.074806917749659E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999999076257845	WITHOUT_CLASSIFICATION	9.237421558871292E-8	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999985759793102	WITHOUT_CLASSIFICATION	1.4240206898120965E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999997578509451	WITHOUT_CLASSIFICATION	2.421490548870605E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999995468355639	WITHOUT_CLASSIFICATION	4.531644360092337E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999996029624525	WITHOUT_CLASSIFICATION	3.970375473941785E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999404409097	WITHOUT_CLASSIFICATION	5.955909030188457E-7	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999988779481782	WITHOUT_CLASSIFICATION	1.1220518217382204E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999998822577664	WITHOUT_CLASSIFICATION	1.1774223359489475E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.999998822577664	WITHOUT_CLASSIFICATION	1.1774223359489475E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999999001303225	WITHOUT_CLASSIFICATION	9.986967745490352E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998547393636582	WITHOUT_CLASSIFICATION	1.4526063634177818E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998547393636582	WITHOUT_CLASSIFICATION	1.4526063634177818E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999979251930823	WITHOUT_CLASSIFICATION	2.074806917749659E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999985759793102	WITHOUT_CLASSIFICATION	1.4240206898120965E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999997578509451	WITHOUT_CLASSIFICATION	2.421490548870605E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999995468355639	WITHOUT_CLASSIFICATION	4.531644360092337E-7	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999996029624525	WITHOUT_CLASSIFICATION	3.970375473941785E-7	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.999999404409097	WITHOUT_CLASSIFICATION	5.955909030188457E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998547393636582	WITHOUT_CLASSIFICATION	1.4526063634177818E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999994385052396	WITHOUT_CLASSIFICATION	5.614947603139708E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999996544407596	WITHOUT_CLASSIFICATION	3.4555924045534747E-7	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999984848120913	WITHOUT_CLASSIFICATION	1.51518790874096E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999980805089934	WITHOUT_CLASSIFICATION	1.919491006549698E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.999999337041226	WITHOUT_CLASSIFICATION	6.629587739643278E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999959352904277	WITHOUT_CLASSIFICATION	4.0647095723064114E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.999999670817025	WITHOUT_CLASSIFICATION	3.291829749951031E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.999999670817025	WITHOUT_CLASSIFICATION	3.291829749951031E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999749876625443	WITHOUT_CLASSIFICATION	2.5012337455691016E-5	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999908468136374	WITHOUT_CLASSIFICATION	9.153186362572481E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999833079208809	WITHOUT_CLASSIFICATION	1.6692079119235593E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.999994196946258	WITHOUT_CLASSIFICATION	5.803053742036227E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999964284276563	WITHOUT_CLASSIFICATION	3.57157234368338E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999964284276563	WITHOUT_CLASSIFICATION	3.57157234368338E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999986488573844	WITHOUT_CLASSIFICATION	1.3511426156109324E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999986051003363	WITHOUT_CLASSIFICATION	1.3948996636332932E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999970284799918	WITHOUT_CLASSIFICATION	2.9715200080434757E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999970284799918	WITHOUT_CLASSIFICATION	2.9715200080434757E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.999991493317144	WITHOUT_CLASSIFICATION	8.506682856065426E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.999990820411787	WITHOUT_CLASSIFICATION	9.179588213082913E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999988779481782	WITHOUT_CLASSIFICATION	1.1220518217382204E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999994676409454	WITHOUT_CLASSIFICATION	5.323590546937887E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987361606457	WITHOUT_CLASSIFICATION	1.2638393543128011E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993682193408	WITHOUT_CLASSIFICATION	6.317806592824568E-7	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999999919752082	WITHOUT_CLASSIFICATION	8.024791860854183E-9	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999858990342342	WITHOUT_CLASSIFICATION	1.4100965765903635E-5	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999995141265728	WITHOUT_CLASSIFICATION	4.858734270747055E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999958844199318	WITHOUT_CLASSIFICATION	4.115580068210775E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999167164585	WITHOUT_CLASSIFICATION	8.32835415725866E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999979094581027	WITHOUT_CLASSIFICATION	2.0905418973149772E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999979094581027	WITHOUT_CLASSIFICATION	2.0905418973149772E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999993774036695	WITHOUT_CLASSIFICATION	6.225963305491288E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999993774036695	WITHOUT_CLASSIFICATION	6.225963305491288E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999998670880681	WITHOUT_CLASSIFICATION	1.329119318752871E-7	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998935691194679	WITHOUT_CLASSIFICATION	1.0643088053208648E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998935691194679	WITHOUT_CLASSIFICATION	1.0643088053208648E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9998935691194679	WITHOUT_CLASSIFICATION	1.0643088053208648E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998371069403	WITHOUT_CLASSIFICATION	1.6289305965250183E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999998371069403	WITHOUT_CLASSIFICATION	1.6289305965250183E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999161659137	WITHOUT_CLASSIFICATION	8.383408635279192E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999130166676796	WITHOUT_CLASSIFICATION	8.698333232038786E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999979911574585	WITHOUT_CLASSIFICATION	2.0088425415419463E-6	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999361849968	WITHOUT_CLASSIFICATION	6.381500317798766E-8	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999792247969248	WITHOUT_CLASSIFICATION	2.0775203075162467E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999998109699049	WITHOUT_CLASSIFICATION	1.890300950178261E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999550301215784	WITHOUT_CLASSIFICATION	4.4969878421618494E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999161659137	WITHOUT_CLASSIFICATION	8.383408635279192E-8	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999995305517196	WITHOUT_CLASSIFICATION	4.6944828044551563E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999130166676796	WITHOUT_CLASSIFICATION	8.698333232038786E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999979911574585	WITHOUT_CLASSIFICATION	2.0088425415419463E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999996112261618	WITHOUT_CLASSIFICATION	3.887738383550546E-7	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999992095135785	WITHOUT_CLASSIFICATION	7.904864216023822E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999996661939382	WITHOUT_CLASSIFICATION	3.338060617278924E-7	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999768387944463	WITHOUT_CLASSIFICATION	2.3161205553704944E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999997388741707	WITHOUT_CLASSIFICATION	2.611258293040455E-7	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999997661443378	WITHOUT_CLASSIFICATION	2.3385566225142772E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999989811475503	WITHOUT_CLASSIFICATION	1.0188524497234655E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999996112261618	WITHOUT_CLASSIFICATION	3.887738383550546E-7	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999999912518554	WITHOUT_CLASSIFICATION	8.748144589146814E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.999999912518554	WITHOUT_CLASSIFICATION	8.748144589146814E-8	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999994826090287	WITHOUT_CLASSIFICATION	5.17390971227748E-7	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999961452186248	WITHOUT_CLASSIFICATION	3.854781375218876E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999996534539396	WITHOUT_CLASSIFICATION	3.465460603422589E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999998558150258	WITHOUT_CLASSIFICATION	1.4418497430387297E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999666028715	WITHOUT_CLASSIFICATION	3.339712840375956E-8	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999868878685	WITHOUT_CLASSIFICATION	1.311213149851929E-8	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999999374587079	WITHOUT_CLASSIFICATION	6.254129214240312E-8	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.999999273348028	WITHOUT_CLASSIFICATION	7.26651972099538E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999999174268966	WITHOUT_CLASSIFICATION	8.257310334027673E-8	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999984213057982	WITHOUT_CLASSIFICATION	1.5786942018693314E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999987955648241	WITHOUT_CLASSIFICATION	1.2044351759493885E-6	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999998558150258	WITHOUT_CLASSIFICATION	1.4418497430387297E-7	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999666028715	WITHOUT_CLASSIFICATION	3.339712840375956E-8	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999950628521426	WITHOUT_CLASSIFICATION	4.937147857384357E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999988151821041	WITHOUT_CLASSIFICATION	1.184817895966448E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999989762983241	WITHOUT_CLASSIFICATION	1.0237016759048015E-6	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999908211189406	WITHOUT_CLASSIFICATION	9.178881059479303E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999979996060923	WITHOUT_CLASSIFICATION	2.000393907709461E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999818556432168	WITHOUT_CLASSIFICATION	1.8144356783127352E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999528174516423	WITHOUT_CLASSIFICATION	4.718254835762169E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999983113987265	WITHOUT_CLASSIFICATION	1.688601273439135E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999815397889065	WITHOUT_CLASSIFICATION	1.84602110934772E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999973737750559	WITHOUT_CLASSIFICATION	2.6262249440946197E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.999985275710369	WITHOUT_CLASSIFICATION	1.4724289631039353E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999972499899049	WITHOUT_CLASSIFICATION	2.7500100951793205E-6	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999992498967701	WITHOUT_CLASSIFICATION	7.50103229820391E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999955671235098	WITHOUT_CLASSIFICATION	4.432876490176922E-6	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999898508812448	WITHOUT_CLASSIFICATION	1.0149118755111954E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999983805365715	WITHOUT_CLASSIFICATION	1.6194634285543085E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999364205959186	WITHOUT_CLASSIFICATION	6.35794040814877E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999997330851662	WITHOUT_CLASSIFICATION	2.6691483376194066E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999997698534796	WITHOUT_CLASSIFICATION	2.3014652039397613E-7	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999978141857013	WITHOUT_CLASSIFICATION	2.1858142987034247E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999364205959186	WITHOUT_CLASSIFICATION	6.35794040814877E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999997330851662	WITHOUT_CLASSIFICATION	2.6691483376194066E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999997698534796	WITHOUT_CLASSIFICATION	2.3014652039397613E-7	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999842317026577	WITHOUT_CLASSIFICATION	1.5768297342378765E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999994320827219	WITHOUT_CLASSIFICATION	5.679172781060212E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999932772458742	WITHOUT_CLASSIFICATION	6.722754125864036E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999981503316911	WITHOUT_CLASSIFICATION	1.8496683087659404E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9999648995730213	WITHOUT_CLASSIFICATION	3.510042697885291E-5	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999988915711365	WITHOUT_CLASSIFICATION	1.1084288634693166E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999351989269485	WITHOUT_CLASSIFICATION	6.480107305156192E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999998995087255	WITHOUT_CLASSIFICATION	1.0049127450749351E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999998375270513	WITHOUT_CLASSIFICATION	1.624729486255066E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999995960549354	WITHOUT_CLASSIFICATION	4.039450646535368E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.954045075704589	WITHOUT_CLASSIFICATION	0.045954924295410926	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999998029471555	WITHOUT_CLASSIFICATION	1.9705284457602079E-7	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999990972761801	WITHOUT_CLASSIFICATION	9.027238199239909E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999169285007	WITHOUT_CLASSIFICATION	8.3071499251468E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999998556241817	WITHOUT_CLASSIFICATION	1.4437581825059927E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998317637357	WITHOUT_CLASSIFICATION	1.6823626432613995E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999933211237892	WITHOUT_CLASSIFICATION	6.678876210758301E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.999994113790689	WITHOUT_CLASSIFICATION	5.886209310961061E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999257611887	WITHOUT_CLASSIFICATION	7.423881132930186E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999627222061	WITHOUT_CLASSIFICATION	3.727779387100841E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999988911859117	WITHOUT_CLASSIFICATION	1.1088140883419901E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999947241691051	WITHOUT_CLASSIFICATION	5.275830894905131E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999947241691051	WITHOUT_CLASSIFICATION	5.275830894905131E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997048996037	WITHOUT_CLASSIFICATION	2.951003962359687E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997048996037	WITHOUT_CLASSIFICATION	2.951003962359687E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999820762635	WITHOUT_CLASSIFICATION	1.7923736389723532E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999820762635	WITHOUT_CLASSIFICATION	1.7923736389723532E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999904738	WITHOUT_CLASSIFICATION	9.52620001941784E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999998199772367	WITHOUT_CLASSIFICATION	1.8002276316654032E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999999988597276	WITHOUT_CLASSIFICATION	1.140272406201696E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999321257239	WITHOUT_CLASSIFICATION	6.787427604495507E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998094479458	WITHOUT_CLASSIFICATION	1.9055205414104254E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999045945708	WITHOUT_CLASSIFICATION	9.54054292728639E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999997092691084	WITHOUT_CLASSIFICATION	2.907308915238761E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999992055692335	WITHOUT_CLASSIFICATION	7.944307665312556E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999904738	WITHOUT_CLASSIFICATION	9.52620001941784E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999998199772367	WITHOUT_CLASSIFICATION	1.8002276316654032E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999999988597276	WITHOUT_CLASSIFICATION	1.140272406201696E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998094479458	WITHOUT_CLASSIFICATION	1.9055205414104254E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999045945708	WITHOUT_CLASSIFICATION	9.54054292728639E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.999999001473109	WITHOUT_CLASSIFICATION	9.985268909548308E-7	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999990115865761	WITHOUT_CLASSIFICATION	9.884134238718961E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999812556082313	WITHOUT_CLASSIFICATION	1.874439176878086E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999812556082313	WITHOUT_CLASSIFICATION	1.874439176878086E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999997205742563	WITHOUT_CLASSIFICATION	2.794257435984282E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999990275083867	WITHOUT_CLASSIFICATION	9.724916133601476E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999998703566444	WITHOUT_CLASSIFICATION	1.2964335559346025E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999929812322105	WITHOUT_CLASSIFICATION	7.0187677894538966E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999929812322105	WITHOUT_CLASSIFICATION	7.0187677894538966E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999966355221002	WITHOUT_CLASSIFICATION	3.364477899925855E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999992534688152	WITHOUT_CLASSIFICATION	7.465311847884053E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999998962319372	WITHOUT_CLASSIFICATION	1.0376806282207223E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999999410908299	WITHOUT_CLASSIFICATION	5.8909170122307114E-8	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.999990940566085	WITHOUT_CLASSIFICATION	9.059433914992512E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999981353370274	WITHOUT_CLASSIFICATION	1.8646629725886558E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.99999979020947	WITHOUT_CLASSIFICATION	2.097905298684223E-7	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999994469969893	WITHOUT_CLASSIFICATION	5.53003010671984E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998339161377	WITHOUT_CLASSIFICATION	1.6608386222118314E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999998199381092	WITHOUT_CLASSIFICATION	1.800618908688065E-7	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999846575213	WITHOUT_CLASSIFICATION	1.5342478788103703E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999966355221002	WITHOUT_CLASSIFICATION	3.364477899925855E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999992534688152	WITHOUT_CLASSIFICATION	7.465311847884053E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999999410908299	WITHOUT_CLASSIFICATION	5.8909170122307114E-8	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999128204758	WITHOUT_CLASSIFICATION	8.71795242135494E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999998703566444	WITHOUT_CLASSIFICATION	1.2964335559346025E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999998703566444	WITHOUT_CLASSIFICATION	1.2964335559346025E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999987955648241	WITHOUT_CLASSIFICATION	1.2044351759493885E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999987955648241	WITHOUT_CLASSIFICATION	1.2044351759493885E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999847768526002	WITHOUT_CLASSIFICATION	1.5223147399703213E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999847768526002	WITHOUT_CLASSIFICATION	1.5223147399703213E-5	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999998783364785	WITHOUT_CLASSIFICATION	1.2166352153709155E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999999581773006	WITHOUT_CLASSIFICATION	4.1822699469848875E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999992107832113	WITHOUT_CLASSIFICATION	7.892167887930843E-7	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999888564437883	WITHOUT_CLASSIFICATION	1.1143556211750237E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.999999948117261	WITHOUT_CLASSIFICATION	5.188273909186186E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999999061198203	WITHOUT_CLASSIFICATION	9.388017965757615E-8	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998223080676152	WITHOUT_CLASSIFICATION	1.7769193238482763E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999582087755	WITHOUT_CLASSIFICATION	4.1791224491398474E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999999757776637	WITHOUT_CLASSIFICATION	2.4222336301311777E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.999999964233713	WITHOUT_CLASSIFICATION	3.576628700912153E-8	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999992141761138	WITHOUT_CLASSIFICATION	7.8582388615212E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999943569068865	WITHOUT_CLASSIFICATION	5.643093113420893E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999518997307	WITHOUT_CLASSIFICATION	4.810026929191071E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999998024748483	WITHOUT_CLASSIFICATION	1.9752515154824947E-7	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999979189783	WITHOUT_CLASSIFICATION	2.0810217291965967E-9	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999954016233751	WITHOUT_CLASSIFICATION	4.598376624894239E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999993708380641	WITHOUT_CLASSIFICATION	6.291619357988659E-7	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999991907750627	WITHOUT_CLASSIFICATION	8.092249373344267E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999223879765	WITHOUT_CLASSIFICATION	7.761202344469326E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.99999979020947	WITHOUT_CLASSIFICATION	2.097905298684223E-7	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998339161377	WITHOUT_CLASSIFICATION	1.6608386222118314E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999128204758	WITHOUT_CLASSIFICATION	8.71795242135494E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999998703566444	WITHOUT_CLASSIFICATION	1.2964335559346025E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999987955648241	WITHOUT_CLASSIFICATION	1.2044351759493885E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999847768526002	WITHOUT_CLASSIFICATION	1.5223147399703213E-5	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999966578782371	WITHOUT_CLASSIFICATION	3.3421217628064716E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999986033582583	WITHOUT_CLASSIFICATION	1.3966417416093998E-6	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999728511588	WITHOUT_CLASSIFICATION	2.714884119694038E-8	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9988668904367203	WITHOUT_CLASSIFICATION	0.0011331095632797549	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999971080802461	WITHOUT_CLASSIFICATION	2.8919197539364675E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999971080802461	WITHOUT_CLASSIFICATION	2.8919197539364675E-6	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999546103803	WITHOUT_CLASSIFICATION	4.538961971313757E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999998532522568	WITHOUT_CLASSIFICATION	1.4674774310295196E-7	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999984915430918	WITHOUT_CLASSIFICATION	1.5084569081514906E-6	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999992892564273	WITHOUT_CLASSIFICATION	7.107435726361016E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997091072822	WITHOUT_CLASSIFICATION	2.9089271785622536E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997091072822	WITHOUT_CLASSIFICATION	2.9089271785622536E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999977350896	WITHOUT_CLASSIFICATION	2.2649103151792745E-9	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999592651426	WITHOUT_CLASSIFICATION	4.073485728512586E-8	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999820702606	WITHOUT_CLASSIFICATION	1.792973937559651E-8	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999716390671594	WITHOUT_CLASSIFICATION	2.8360932840760484E-5	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999996620877679	WITHOUT_CLASSIFICATION	3.3791223210561223E-7	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999999846966987	WITHOUT_CLASSIFICATION	1.5303301297757338E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999320390473107	WITHOUT_CLASSIFICATION	6.796095268940141E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999996543666395	WITHOUT_CLASSIFICATION	3.456333604823851E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9986867429615224	WITHOUT_CLASSIFICATION	0.0013132570384775297	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999471318990273	WITHOUT_CLASSIFICATION	5.286810097272765E-5	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9842368650700855	WITHOUT_CLASSIFICATION	0.015763134929914567	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999957241416092	WITHOUT_CLASSIFICATION	4.275858390791755E-6	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999999190009	WITHOUT_CLASSIFICATION	8.099905165505775E-11	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999998546515851	WITHOUT_CLASSIFICATION	1.4534841490948067E-7	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.999999708779956	WITHOUT_CLASSIFICATION	2.912200439333696E-7	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999998579771138	WITHOUT_CLASSIFICATION	1.4202288627051428E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999948608894649	WITHOUT_CLASSIFICATION	5.139110535163009E-6	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999933327782404	WITHOUT_CLASSIFICATION	6.667221759549298E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999980414728201	WITHOUT_CLASSIFICATION	1.9585271798542755E-6	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999058626808	WITHOUT_CLASSIFICATION	9.413731916505268E-8	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999987006919763	WITHOUT_CLASSIFICATION	1.2993080238258635E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999999194915702	WITHOUT_CLASSIFICATION	8.050842980527539E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999999194915702	WITHOUT_CLASSIFICATION	8.050842980527539E-7	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999588284905641	WITHOUT_CLASSIFICATION	4.117150943588832E-5	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9995018568643421	WITHOUT_CLASSIFICATION	4.981431356579005E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999985492725363	WITHOUT_CLASSIFICATION	1.4507274637134414E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9999985492725363	WITHOUT_CLASSIFICATION	1.4507274637134414E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9097286594830077	DEFECT	0.09027134051699225	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999909820482941	WITHOUT_CLASSIFICATION	9.017951705873248E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999928596823056	WITHOUT_CLASSIFICATION	7.1403176945205145E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958328223526	WITHOUT_CLASSIFICATION	4.167177647400729E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958328223526	WITHOUT_CLASSIFICATION	4.167177647400729E-6	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999623392888792	WITHOUT_CLASSIFICATION	3.766071112075809E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999943888242822	WITHOUT_CLASSIFICATION	5.61117571789879E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999996149766222	WITHOUT_CLASSIFICATION	3.8502337775486545E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999999049599535	WITHOUT_CLASSIFICATION	9.504004643620891E-8	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.999999983242973	WITHOUT_CLASSIFICATION	1.6757026986189903E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999981930143159	WITHOUT_CLASSIFICATION	1.8069856840044918E-6	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999843366188615	WITHOUT_CLASSIFICATION	1.566338113840771E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999988736012436	WITHOUT_CLASSIFICATION	1.126398756397775E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999988614638747	WITHOUT_CLASSIFICATION	1.1385361252407846E-6	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998674537834097	WITHOUT_CLASSIFICATION	1.325462165903765E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999969235300911	WITHOUT_CLASSIFICATION	3.076469908918505E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999992595545961	WITHOUT_CLASSIFICATION	7.404454039075179E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999997489592195	WITHOUT_CLASSIFICATION	2.510407804748601E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9995304067727229	WITHOUT_CLASSIFICATION	4.6959322727706644E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999679856817804	WITHOUT_CLASSIFICATION	3.201431821960791E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999515351031824	WITHOUT_CLASSIFICATION	4.846489681764365E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999702065072	WITHOUT_CLASSIFICATION	2.9793492699839882E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999877929729726	WITHOUT_CLASSIFICATION	1.2207027027475456E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999276474135202	WITHOUT_CLASSIFICATION	7.23525864797165E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999967325663142	WITHOUT_CLASSIFICATION	3.26743368578115E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.999997900083043	WITHOUT_CLASSIFICATION	2.099916957104342E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999987570831014	WITHOUT_CLASSIFICATION	1.2429168986146877E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999875124607515	WITHOUT_CLASSIFICATION	1.2487539248461378E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999606842107719	WITHOUT_CLASSIFICATION	3.931578922823736E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999998242339039	WITHOUT_CLASSIFICATION	1.75766096124383E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9989549219438285	WITHOUT_CLASSIFICATION	0.0010450780561713977	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9996986736943086	WITHOUT_CLASSIFICATION	3.01326305691327E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999351820941	WITHOUT_CLASSIFICATION	6.48179059098426E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999778637520834	WITHOUT_CLASSIFICATION	2.213624791664793E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999348736879	WITHOUT_CLASSIFICATION	6.51263121785651E-8	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999992314346	WITHOUT_CLASSIFICATION	7.685654360479799E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9995304067727229	WITHOUT_CLASSIFICATION	4.6959322727706644E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999351820941	WITHOUT_CLASSIFICATION	6.48179059098426E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999778637520834	WITHOUT_CLASSIFICATION	2.213624791664793E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999992314346	WITHOUT_CLASSIFICATION	7.685654360479799E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.999999316775	WITHOUT_CLASSIFICATION	6.832249999930267E-7	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999093832239465	WITHOUT_CLASSIFICATION	9.061677605348397E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9998361575027939	WITHOUT_CLASSIFICATION	1.6384249720612204E-4	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999997630241237	WITHOUT_CLASSIFICATION	2.369758761871292E-7	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999999971479124	WITHOUT_CLASSIFICATION	2.8520876048305314E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999968258066	WITHOUT_CLASSIFICATION	3.1741932938717646E-9	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.999999416997524	WITHOUT_CLASSIFICATION	5.830024760203202E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999985943951601	WITHOUT_CLASSIFICATION	1.4056048399486572E-6	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999996916595629	WITHOUT_CLASSIFICATION	3.083404371370121E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997902355033075	WITHOUT_CLASSIFICATION	2.0976449669249676E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999658469430747	WITHOUT_CLASSIFICATION	3.415305692534053E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999658469430747	WITHOUT_CLASSIFICATION	3.415305692534053E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999918530216201	WITHOUT_CLASSIFICATION	8.146978380027447E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999987068403865	WITHOUT_CLASSIFICATION	1.29315961352138E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999989461173525	WITHOUT_CLASSIFICATION	1.0538826475106584E-6	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.999999714756905	WITHOUT_CLASSIFICATION	2.8524309503211476E-7	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999950186353864	WITHOUT_CLASSIFICATION	4.981364613608744E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999921251719603	WITHOUT_CLASSIFICATION	7.874828039683271E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999930783992059	WITHOUT_CLASSIFICATION	6.921600794150721E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999654708853835	WITHOUT_CLASSIFICATION	3.4529114616610095E-5	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999993121687	WITHOUT_CLASSIFICATION	6.878314093257859E-10	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999959005196	WITHOUT_CLASSIFICATION	4.099480433551563E-9	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.999999852808057	WITHOUT_CLASSIFICATION	1.4719194285249354E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999282214117	WITHOUT_CLASSIFICATION	7.177858831828786E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999639190886	WITHOUT_CLASSIFICATION	3.608091128234578E-8	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999993340666752	WITHOUT_CLASSIFICATION	6.659333249233165E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999997633173943	WITHOUT_CLASSIFICATION	2.3668260572982116E-7	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999941018279427	WITHOUT_CLASSIFICATION	5.898172057276295E-6	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999998213590416	WITHOUT_CLASSIFICATION	1.7864095845306135E-7	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999994523766832	WITHOUT_CLASSIFICATION	5.476233167613068E-7	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999992120335405	WITHOUT_CLASSIFICATION	7.879664595364631E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999986738516788	WITHOUT_CLASSIFICATION	1.326148321147788E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999975699087912	WITHOUT_CLASSIFICATION	2.430091208839695E-6	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999993076983731	WITHOUT_CLASSIFICATION	6.923016268695413E-7	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999999660441358	WITHOUT_CLASSIFICATION	3.39558642158631E-8	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999991720302494	WITHOUT_CLASSIFICATION	8.279697505271615E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999990952302998	WITHOUT_CLASSIFICATION	9.047697003006807E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.999999283609599	WITHOUT_CLASSIFICATION	7.163904009607385E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9963603387590557	WITHOUT_CLASSIFICATION	0.003639661240944304	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999853376713637	WITHOUT_CLASSIFICATION	1.466232863635035E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999985009746373	WITHOUT_CLASSIFICATION	1.4990253626939587E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999991229781671	WITHOUT_CLASSIFICATION	8.770218330480352E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999974238251514	WITHOUT_CLASSIFICATION	2.5761748485227665E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999997831433922	WITHOUT_CLASSIFICATION	2.1685660782356068E-7	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999339239191	WITHOUT_CLASSIFICATION	6.607608093300982E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999985476742204	WITHOUT_CLASSIFICATION	1.4523257796865362E-6	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999998574828685	WITHOUT_CLASSIFICATION	1.425171314604472E-7	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999954177220299	WITHOUT_CLASSIFICATION	4.58227797010384E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.999999975330442	WITHOUT_CLASSIFICATION	2.4669558009056185E-8	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999988102474705	WITHOUT_CLASSIFICATION	1.1897525295417338E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999999846288844	WITHOUT_CLASSIFICATION	1.5371115604736717E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999999066843513	WITHOUT_CLASSIFICATION	9.331564861216594E-8	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999375364956496	WITHOUT_CLASSIFICATION	6.246350435044945E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999921158329915	WITHOUT_CLASSIFICATION	7.884167008540841E-6	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999924430901593	WITHOUT_CLASSIFICATION	7.556909840738334E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999981359425785	WITHOUT_CLASSIFICATION	1.8640574214779166E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999598982159702	WITHOUT_CLASSIFICATION	4.010178402977709E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999945375554246	WITHOUT_CLASSIFICATION	5.462444575441925E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.999959361674228	WITHOUT_CLASSIFICATION	4.0638325771968144E-5	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999984702615444	WITHOUT_CLASSIFICATION	1.529738455588672E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999998993364861	WITHOUT_CLASSIFICATION	1.0066351386155742E-7	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999934809280027	WITHOUT_CLASSIFICATION	6.519071997226251E-6	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999454916075353	WITHOUT_CLASSIFICATION	5.450839246470885E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999989042413	WITHOUT_CLASSIFICATION	1.0957587181533365E-9	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999994641582307	WITHOUT_CLASSIFICATION	5.358417693249569E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999969603852952	WITHOUT_CLASSIFICATION	3.0396147047704244E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9996908698963671	WITHOUT_CLASSIFICATION	3.091301036328637E-4	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999980234568971	WITHOUT_CLASSIFICATION	1.976543102893249E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999994011638894	WITHOUT_CLASSIFICATION	5.988361105696613E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.999999335899843	WITHOUT_CLASSIFICATION	6.641001568450723E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999845828816308	WITHOUT_CLASSIFICATION	1.5417118369098802E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997035056458912	WITHOUT_CLASSIFICATION	2.9649435410885114E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9997035056458912	WITHOUT_CLASSIFICATION	2.9649435410885114E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999956199184794	WITHOUT_CLASSIFICATION	4.38008152060799E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999999590476653	WITHOUT_CLASSIFICATION	4.095233474419699E-8	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999894078037652	WITHOUT_CLASSIFICATION	1.059219623478409E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.99998069173784	WITHOUT_CLASSIFICATION	1.9308262160003655E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999979600568959	WITHOUT_CLASSIFICATION	2.03994310410876E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.99996837771759	WITHOUT_CLASSIFICATION	3.162228241004734E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998190572132605	WITHOUT_CLASSIFICATION	1.8094278673949464E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999993503797909	WITHOUT_CLASSIFICATION	6.496202090489102E-7	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999999268954272	WITHOUT_CLASSIFICATION	7.310457282617337E-8	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.999999995228319	WITHOUT_CLASSIFICATION	4.771681114341657E-9	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999965846103147	WITHOUT_CLASSIFICATION	3.4153896852570174E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999967504362224	WITHOUT_CLASSIFICATION	3.2495637777220147E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999995775361973	WITHOUT_CLASSIFICATION	4.2246380268865924E-7	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999951972027523	WITHOUT_CLASSIFICATION	4.8027972476307785E-6	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999999673654811	WITHOUT_CLASSIFICATION	3.2634518887107094E-8	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999309877174745	WITHOUT_CLASSIFICATION	6.901228252557182E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999993558171814	WITHOUT_CLASSIFICATION	6.441828186663927E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999933094180721	WITHOUT_CLASSIFICATION	6.690581927904926E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9978109141682953	WITHOUT_CLASSIFICATION	0.002189085831704675	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999979188259259	WITHOUT_CLASSIFICATION	2.0811740741637843E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999605995923526	WITHOUT_CLASSIFICATION	3.940040764741048E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999971218004996	WITHOUT_CLASSIFICATION	2.878199500443261E-6	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999993328411869	WITHOUT_CLASSIFICATION	6.671588130054978E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999992622626911	WITHOUT_CLASSIFICATION	7.377373089092694E-7	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.999997661594781	WITHOUT_CLASSIFICATION	2.338405219116857E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999741833741921	WITHOUT_CLASSIFICATION	2.5816625807967152E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999997744352328	WITHOUT_CLASSIFICATION	2.2556476733522319E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999938922559	WITHOUT_CLASSIFICATION	6.107744094554541E-9	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999982796481925	WITHOUT_CLASSIFICATION	1.7203518073745112E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9812660717587677	WITHOUT_CLASSIFICATION	0.018733928241232364	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999923716652402	WITHOUT_CLASSIFICATION	7.6283347598146406E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999994130838039	WITHOUT_CLASSIFICATION	5.869161961552101E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998884784975	WITHOUT_CLASSIFICATION	1.1152150256084553E-7	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999991402409393	WITHOUT_CLASSIFICATION	8.597590608066788E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998884784975	WITHOUT_CLASSIFICATION	1.1152150256084553E-7	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999989557460668	WITHOUT_CLASSIFICATION	1.0442539332186274E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999834024297529	WITHOUT_CLASSIFICATION	1.6597570247075218E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999834024297529	WITHOUT_CLASSIFICATION	1.6597570247075218E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999834024297529	WITHOUT_CLASSIFICATION	1.6597570247075218E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998468496006	WITHOUT_CLASSIFICATION	1.5315039923508442E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999998468496006	WITHOUT_CLASSIFICATION	1.5315039923508442E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999992331570747	WITHOUT_CLASSIFICATION	7.668429252509336E-7	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999218723497634	WITHOUT_CLASSIFICATION	7.812765023666831E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999974901289737	WITHOUT_CLASSIFICATION	2.509871026291782E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999990546933296	WITHOUT_CLASSIFICATION	9.453066703705335E-7	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999956077768511	WITHOUT_CLASSIFICATION	4.3922231488354936E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999997003178288	WITHOUT_CLASSIFICATION	2.9968217124739205E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.999999707157332	WITHOUT_CLASSIFICATION	2.9284266800208726E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999978976823717	WITHOUT_CLASSIFICATION	2.1023176282337656E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999992406703	WITHOUT_CLASSIFICATION	7.593297604485595E-10	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999981459997339	WITHOUT_CLASSIFICATION	1.8540002661302631E-6	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999999416077597	WITHOUT_CLASSIFICATION	5.839224024675537E-8	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9997272438128666	WITHOUT_CLASSIFICATION	2.7275618713344706E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999998602478523	WITHOUT_CLASSIFICATION	1.397521477542763E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999997009989118	WITHOUT_CLASSIFICATION	2.990010882151202E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999994662639073	WITHOUT_CLASSIFICATION	5.337360927684006E-7	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999992360442184	WITHOUT_CLASSIFICATION	7.639557816967542E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999842543436575	WITHOUT_CLASSIFICATION	1.574565634252066E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999988790744447	WITHOUT_CLASSIFICATION	1.1209255552146377E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999988790744447	WITHOUT_CLASSIFICATION	1.1209255552146377E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.999997807422339	WITHOUT_CLASSIFICATION	2.1925776610443216E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998786293037	WITHOUT_CLASSIFICATION	1.2137069635960547E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998786293037	WITHOUT_CLASSIFICATION	1.2137069635960547E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.999960205863783	WITHOUT_CLASSIFICATION	3.979413621695209E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999995678130029	WITHOUT_CLASSIFICATION	4.321869971582256E-7	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999999121640261	WITHOUT_CLASSIFICATION	8.783597390247182E-7	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999976503886796	WITHOUT_CLASSIFICATION	2.3496113203751834E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999985732861669	WITHOUT_CLASSIFICATION	1.4267138330137886E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999979460023282	WITHOUT_CLASSIFICATION	2.05399767181415E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999961622795887	WITHOUT_CLASSIFICATION	3.837720411304146E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999988387456215	WITHOUT_CLASSIFICATION	1.1612543784767105E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.999999875428102	WITHOUT_CLASSIFICATION	1.245718980495431E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999948644956627	WITHOUT_CLASSIFICATION	5.1355043373698546E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999975219060101	WITHOUT_CLASSIFICATION	2.4780939897672917E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999994891764218	WITHOUT_CLASSIFICATION	5.108235782124266E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999989520470095	WITHOUT_CLASSIFICATION	1.047952990409983E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999997490417774	WITHOUT_CLASSIFICATION	2.509582226641946E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999978976823717	WITHOUT_CLASSIFICATION	2.1023176282337656E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999840094002553	WITHOUT_CLASSIFICATION	1.5990599744586673E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996131053263	WITHOUT_CLASSIFICATION	3.868946737447301E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999998073140671	WITHOUT_CLASSIFICATION	1.9268593289264999E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999998073140671	WITHOUT_CLASSIFICATION	1.9268593289264999E-7	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999891873680042	WITHOUT_CLASSIFICATION	1.0812631995649113E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999840616786064	WITHOUT_CLASSIFICATION	1.593832139362407E-5	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999986514388037	WITHOUT_CLASSIFICATION	1.3485611962133705E-6	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.999999536031382	WITHOUT_CLASSIFICATION	4.6396861807570845E-7	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999998276864471	WITHOUT_CLASSIFICATION	1.7231355289358538E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999820871218	WITHOUT_CLASSIFICATION	1.7912878147596957E-8	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999593761613387	WITHOUT_CLASSIFICATION	4.0623838661413686E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9874993615626242	WITHOUT_CLASSIFICATION	0.012500638437375708	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999837971416545	WITHOUT_CLASSIFICATION	1.620285834543621E-5	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999988442955716	WITHOUT_CLASSIFICATION	1.1557044284544113E-6	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999974198268379	WITHOUT_CLASSIFICATION	2.580173162130187E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.999975686691417	WITHOUT_CLASSIFICATION	2.4313308582973433E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.7932029278019856	WITHOUT_CLASSIFICATION	0.20679707219801433	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999999632724966	WITHOUT_CLASSIFICATION	3.6727503333714716E-8	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999994248291691	WITHOUT_CLASSIFICATION	5.751708307455395E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999911640364979	WITHOUT_CLASSIFICATION	8.835963502167163E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999928909914013	WITHOUT_CLASSIFICATION	7.109008598778697E-6	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999997431150878	WITHOUT_CLASSIFICATION	2.5688491224570995E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997153195774	WITHOUT_CLASSIFICATION	2.8468042253312145E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999987786600885	WITHOUT_CLASSIFICATION	1.221339911648994E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999997416805877	WITHOUT_CLASSIFICATION	2.5831941233314127E-7	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999998009400911	WITHOUT_CLASSIFICATION	1.9905990879531258E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999993386281315	WITHOUT_CLASSIFICATION	6.613718685484166E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999664478221	WITHOUT_CLASSIFICATION	3.355217783495286E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999988457495	WITHOUT_CLASSIFICATION	1.1542504803513978E-9	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999996142781526	WITHOUT_CLASSIFICATION	3.8572184734340083E-7	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9999288847875267	WITHOUT_CLASSIFICATION	7.111521247329185E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9985677318845687	WITHOUT_CLASSIFICATION	0.0014322681154312889	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.999999984129425	WITHOUT_CLASSIFICATION	1.5870575004897356E-8	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9996317318704668	WITHOUT_CLASSIFICATION	3.6826812953326285E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999953399937609	WITHOUT_CLASSIFICATION	4.660006239066683E-6	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999998732258689	WITHOUT_CLASSIFICATION	1.267741310064563E-7	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999625472355856	WITHOUT_CLASSIFICATION	3.7452764414361365E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.999397000078476	WITHOUT_CLASSIFICATION	6.029999215240948E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999888343556	WITHOUT_CLASSIFICATION	1.1165644399132014E-8	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999947240483356	WITHOUT_CLASSIFICATION	5.275951664374014E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9985677318845687	WITHOUT_CLASSIFICATION	0.0014322681154312889	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999933205084	WITHOUT_CLASSIFICATION	6.67949159936959E-9	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999888343556	WITHOUT_CLASSIFICATION	1.1165644399132014E-8	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.999999708786981	WITHOUT_CLASSIFICATION	2.912130189559471E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999537815527	WITHOUT_CLASSIFICATION	4.621844727454528E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999448259836	WITHOUT_CLASSIFICATION	5.517401635584599E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999997997849518	WITHOUT_CLASSIFICATION	2.002150482942255E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999929598697671	WITHOUT_CLASSIFICATION	7.04013023284583E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999922536119762	WITHOUT_CLASSIFICATION	7.746388023755305E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999922536119762	WITHOUT_CLASSIFICATION	7.746388023755305E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.999999964363093	WITHOUT_CLASSIFICATION	3.5636907022757946E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999992425407765	WITHOUT_CLASSIFICATION	7.574592234338519E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999538995282	WITHOUT_CLASSIFICATION	4.610047179260427E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999538995282	WITHOUT_CLASSIFICATION	4.610047179260427E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999999791190917	WITHOUT_CLASSIFICATION	2.0880908421339527E-8	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997592644100662	WITHOUT_CLASSIFICATION	2.407355899337999E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999487090109898	WITHOUT_CLASSIFICATION	5.129098901030988E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999487090109898	WITHOUT_CLASSIFICATION	5.129098901030988E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999886443867899	WITHOUT_CLASSIFICATION	1.1355613210016987E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999937700999703	WITHOUT_CLASSIFICATION	6.2299000296760935E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999996016592921	WITHOUT_CLASSIFICATION	3.9834070779600655E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.999998003329135	WITHOUT_CLASSIFICATION	1.9966708649439408E-6	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999820000609397	WITHOUT_CLASSIFICATION	1.7999939060293357E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999917325474785	WITHOUT_CLASSIFICATION	8.267452521494928E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.999998961466936	WITHOUT_CLASSIFICATION	1.038533064055954E-6	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999984465496217	WITHOUT_CLASSIFICATION	1.5534503782542065E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999720828231635	WITHOUT_CLASSIFICATION	2.791717683639107E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999984938971896	WITHOUT_CLASSIFICATION	1.5061028103589788E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999989265566842	WITHOUT_CLASSIFICATION	1.0734433157919346E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999645493546145	WITHOUT_CLASSIFICATION	3.5450645385478256E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999969419632734	WITHOUT_CLASSIFICATION	3.058036726673824E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999999931795115	WITHOUT_CLASSIFICATION	6.82048850119922E-9	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999937721969608	WITHOUT_CLASSIFICATION	6.227803039119982E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999985119252028	WITHOUT_CLASSIFICATION	1.4880747970595525E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999834741773197	WITHOUT_CLASSIFICATION	1.652582268024251E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999860575744791	WITHOUT_CLASSIFICATION	1.3942425520954782E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999992575626206	WITHOUT_CLASSIFICATION	7.424373793339498E-7	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999826246679262	WITHOUT_CLASSIFICATION	1.7375332073776374E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999995210131545	WITHOUT_CLASSIFICATION	4.789868454966428E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999999457007429	WITHOUT_CLASSIFICATION	5.429925705256153E-8	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999992998695388	WITHOUT_CLASSIFICATION	7.001304612160138E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999965864324365	WITHOUT_CLASSIFICATION	3.4135675635530236E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.999994152730702	WITHOUT_CLASSIFICATION	5.8472692980720835E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999948632547285	WITHOUT_CLASSIFICATION	5.136745271468702E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999993590868125	WITHOUT_CLASSIFICATION	6.409131875240678E-7	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999920744933942	WITHOUT_CLASSIFICATION	7.925506605697049E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998958176935777	WITHOUT_CLASSIFICATION	1.041823064222604E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9998958176935777	WITHOUT_CLASSIFICATION	1.041823064222604E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.999991747450671	WITHOUT_CLASSIFICATION	8.252549329019205E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999997931510806	WITHOUT_CLASSIFICATION	2.06848919462673E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999952591047211	WITHOUT_CLASSIFICATION	4.740895278931142E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999553397028921	WITHOUT_CLASSIFICATION	4.46602971079782E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999947441324806	WITHOUT_CLASSIFICATION	5.255867519448329E-6	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999656012038548	WITHOUT_CLASSIFICATION	3.439879614524318E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999993964448542	WITHOUT_CLASSIFICATION	6.035551458210614E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999997645744764	WITHOUT_CLASSIFICATION	2.3542552375776073E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999999448911245	WITHOUT_CLASSIFICATION	5.5108875447153944E-8	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999582064644	WITHOUT_CLASSIFICATION	4.179353572738996E-8	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999889473644193	WITHOUT_CLASSIFICATION	1.1052635580608484E-5	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999996407315874	WITHOUT_CLASSIFICATION	3.5926841252358433E-7	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999988121394188	WITHOUT_CLASSIFICATION	1.1878605812229913E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999925773173057	WITHOUT_CLASSIFICATION	7.4226826942053125E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999982565124677	WITHOUT_CLASSIFICATION	1.743487532369137E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999931238615279	WITHOUT_CLASSIFICATION	6.876138472059566E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.999996100053736	WITHOUT_CLASSIFICATION	3.899946263970172E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9999979886662743	WITHOUT_CLASSIFICATION	2.0113337257034778E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999970586275101	WITHOUT_CLASSIFICATION	2.941372489853734E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999987870903256	WITHOUT_CLASSIFICATION	1.212909674381587E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999994820791824	WITHOUT_CLASSIFICATION	5.179208175740336E-7	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999776432296961	WITHOUT_CLASSIFICATION	2.2356770303970188E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999802135385	WITHOUT_CLASSIFICATION	1.9786461480151506E-8	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999998045115561	WITHOUT_CLASSIFICATION	1.9548844383234055E-7	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999994712877879	WITHOUT_CLASSIFICATION	5.287122121615725E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999984659684333	WITHOUT_CLASSIFICATION	1.5340315666843143E-6	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999675666004659	WITHOUT_CLASSIFICATION	3.243339953405007E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999973163784837	WITHOUT_CLASSIFICATION	2.6836215162079836E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.99999359307974	WITHOUT_CLASSIFICATION	6.406920259889997E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999997769707561	WITHOUT_CLASSIFICATION	2.230292438817886E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999939705008383	WITHOUT_CLASSIFICATION	6.029499161699543E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999996734130684	WITHOUT_CLASSIFICATION	3.2658693164944933E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.999999588250796	WITHOUT_CLASSIFICATION	4.117492040146906E-7	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999969485440952	WITHOUT_CLASSIFICATION	3.051455904812615E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999999270997081	WITHOUT_CLASSIFICATION	7.290029188446867E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999980323793631	WITHOUT_CLASSIFICATION	1.9676206369129625E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999989058486162	WITHOUT_CLASSIFICATION	1.0941513838072001E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999995210239973	WITHOUT_CLASSIFICATION	4.789760027396623E-7	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.999999999849896	WITHOUT_CLASSIFICATION	1.5010398735487717E-10	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999998796406787	WITHOUT_CLASSIFICATION	1.2035932122097067E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999955892897213	WITHOUT_CLASSIFICATION	4.410710278662808E-6	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999988343016023	WITHOUT_CLASSIFICATION	1.1656983976622435E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999266321946135	WITHOUT_CLASSIFICATION	7.336780538641844E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999266321946135	WITHOUT_CLASSIFICATION	7.336780538641844E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999992399722747	WITHOUT_CLASSIFICATION	7.600277253102821E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999977650159564	WITHOUT_CLASSIFICATION	2.2349840435685667E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999947365881126	WITHOUT_CLASSIFICATION	5.263411887401478E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999992513503752	WITHOUT_CLASSIFICATION	7.48649624842226E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999257611887	WITHOUT_CLASSIFICATION	7.423881132930186E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999627222061	WITHOUT_CLASSIFICATION	3.727779387100841E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999990201387254	WITHOUT_CLASSIFICATION	9.798612745679454E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999997514360734	WITHOUT_CLASSIFICATION	2.485639265427637E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9612926674063624	WITHOUT_CLASSIFICATION	0.038707332593637525	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999808650988965	WITHOUT_CLASSIFICATION	1.913490110358758E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999995278144234	WITHOUT_CLASSIFICATION	4.7218557662748734E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999992934342463	WITHOUT_CLASSIFICATION	7.065657536349443E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999978508208253	WITHOUT_CLASSIFICATION	2.149179174691239E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999986896143248	WITHOUT_CLASSIFICATION	1.3103856751919281E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995301622682	WITHOUT_CLASSIFICATION	4.6983773178051037E-7	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999951726570802	WITHOUT_CLASSIFICATION	4.827342919809002E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999981624464686	WITHOUT_CLASSIFICATION	1.8375535315305373E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999816599935083	WITHOUT_CLASSIFICATION	1.83400064917256E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999978541231044	WITHOUT_CLASSIFICATION	2.145876895610522E-6	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999695159713543	WITHOUT_CLASSIFICATION	3.0484028645672936E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999974328152292	WITHOUT_CLASSIFICATION	2.56718477070866E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999874866248449	WITHOUT_CLASSIFICATION	1.251337515512368E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999991899490124	WITHOUT_CLASSIFICATION	8.100509876483123E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999997728501208	WITHOUT_CLASSIFICATION	2.2714987918018517E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999985395880956	WITHOUT_CLASSIFICATION	1.4604119043941918E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999974124471239	WITHOUT_CLASSIFICATION	2.5875528760000527E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999962428734971	WITHOUT_CLASSIFICATION	3.7571265028055777E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999998464632738	WITHOUT_CLASSIFICATION	1.5353672613519508E-7	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999999180186907	WITHOUT_CLASSIFICATION	8.198130939047568E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999993290830282	WITHOUT_CLASSIFICATION	6.70916971822741E-7	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999991699676801	WITHOUT_CLASSIFICATION	8.300323198998287E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999999895498877	WITHOUT_CLASSIFICATION	1.0450112320791807E-8	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999984890937875	WITHOUT_CLASSIFICATION	1.5109062125608147E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999955758112993	WITHOUT_CLASSIFICATION	4.424188700727986E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999995210239973	WITHOUT_CLASSIFICATION	4.789760027396623E-7	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999985995147513	WITHOUT_CLASSIFICATION	1.400485248589593E-6	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999129827901	WITHOUT_CLASSIFICATION	8.701720988097298E-8	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999129827901	WITHOUT_CLASSIFICATION	8.701720988097298E-8	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999967671616353	WITHOUT_CLASSIFICATION	3.2328383646340355E-6	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999980560473942	WITHOUT_CLASSIFICATION	1.9439526058827268E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999893349362988	WITHOUT_CLASSIFICATION	1.0665063701242932E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999515734637	WITHOUT_CLASSIFICATION	4.842653624131003E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999925038013119	WITHOUT_CLASSIFICATION	7.496198688203205E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999963210433428	WITHOUT_CLASSIFICATION	3.678956657201808E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999969076343047	WITHOUT_CLASSIFICATION	3.092365695385418E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999850326781727	WITHOUT_CLASSIFICATION	1.4967321827354055E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999842445457549	WITHOUT_CLASSIFICATION	1.575545424517691E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999875890475015	WITHOUT_CLASSIFICATION	1.2410952498600644E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999359035079022	WITHOUT_CLASSIFICATION	6.409649209789758E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999494754531705	WITHOUT_CLASSIFICATION	5.052454682941259E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999859972768578	WITHOUT_CLASSIFICATION	1.4002723142327658E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999983079638927	WITHOUT_CLASSIFICATION	1.6920361073521589E-6	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999999340796	WITHOUT_CLASSIFICATION	6.59203130826772E-11	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999896166773202	WITHOUT_CLASSIFICATION	1.0383322679843852E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999804209244857	WITHOUT_CLASSIFICATION	1.957907551426662E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999694393344059	WITHOUT_CLASSIFICATION	3.056066559419105E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999887670356927	WITHOUT_CLASSIFICATION	1.1232964307252649E-5	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.999991151530738	WITHOUT_CLASSIFICATION	8.84846926194159E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.999958215794183	WITHOUT_CLASSIFICATION	4.1784205817021566E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999529676916334	WITHOUT_CLASSIFICATION	4.703230836649429E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999736269463	WITHOUT_CLASSIFICATION	2.6373053677294583E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999997269004975	WITHOUT_CLASSIFICATION	2.730995023855162E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999467794341694	WITHOUT_CLASSIFICATION	5.3220565830440305E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999482935184556	WITHOUT_CLASSIFICATION	5.170648154442572E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999957930311	WITHOUT_CLASSIFICATION	4.206968891304016E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999998901292997	WITHOUT_CLASSIFICATION	1.0987070033956412E-7	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999999688727641	WITHOUT_CLASSIFICATION	3.112723589240413E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999113560877	WITHOUT_CLASSIFICATION	8.864391237810993E-8	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999994903908129	WITHOUT_CLASSIFICATION	5.096091870745814E-7	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999988855830001	WITHOUT_CLASSIFICATION	1.1144169998292281E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999999540016413	WITHOUT_CLASSIFICATION	4.5998358691412786E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999999500923235	WITHOUT_CLASSIFICATION	4.99076764744008E-8	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999950780705888	WITHOUT_CLASSIFICATION	4.921929411190018E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.999998340018949	WITHOUT_CLASSIFICATION	1.6599810509802738E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999978257640368	WITHOUT_CLASSIFICATION	2.1742359632615176E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999482935184556	WITHOUT_CLASSIFICATION	5.170648154442572E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999957930311	WITHOUT_CLASSIFICATION	4.206968891304016E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999998901292997	WITHOUT_CLASSIFICATION	1.0987070033956412E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999113560877	WITHOUT_CLASSIFICATION	8.864391237810993E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999989127808251	WITHOUT_CLASSIFICATION	1.087219174898958E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999511739547	WITHOUT_CLASSIFICATION	4.8826045449822294E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999968252059155	WITHOUT_CLASSIFICATION	3.1747940845566317E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999995904023754	WITHOUT_CLASSIFICATION	4.095976245988512E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999489622751561	WITHOUT_CLASSIFICATION	5.103772484379668E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999993551384284	WITHOUT_CLASSIFICATION	6.44861571468391E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999997205605432	WITHOUT_CLASSIFICATION	2.794394567999916E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999839964758572	WITHOUT_CLASSIFICATION	1.60035241427396E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.999999973875071	WITHOUT_CLASSIFICATION	2.6124928949537573E-8	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999999840991919	WITHOUT_CLASSIFICATION	1.5900808105252464E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999967902767534	WITHOUT_CLASSIFICATION	3.2097232466814183E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999996773352059	WITHOUT_CLASSIFICATION	3.226647940539751E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999965425011915	WITHOUT_CLASSIFICATION	3.457498808471409E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999173756133	WITHOUT_CLASSIFICATION	8.262438664306568E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.999999663886537	WITHOUT_CLASSIFICATION	3.3611346305437393E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999992016226783	WITHOUT_CLASSIFICATION	7.983773216737193E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999780213057	WITHOUT_CLASSIFICATION	2.1978694288196597E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999999107128607	WITHOUT_CLASSIFICATION	8.928713936299462E-8	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999990450056856	WITHOUT_CLASSIFICATION	9.549943144227326E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999978257640368	WITHOUT_CLASSIFICATION	2.1742359632615176E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999511739547	WITHOUT_CLASSIFICATION	4.8826045449822294E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999968252059155	WITHOUT_CLASSIFICATION	3.1747940845566317E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999489622751561	WITHOUT_CLASSIFICATION	5.103772484379668E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999993551384284	WITHOUT_CLASSIFICATION	6.44861571468391E-7	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999997205605432	WITHOUT_CLASSIFICATION	2.794394567999916E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999839964758572	WITHOUT_CLASSIFICATION	1.60035241427396E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999988042333714	WITHOUT_CLASSIFICATION	1.1957666285838417E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999937780764568	WITHOUT_CLASSIFICATION	6.221923543104772E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999994713921032	WITHOUT_CLASSIFICATION	5.286078967369785E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999998499808369	WITHOUT_CLASSIFICATION	1.5001916315033225E-7	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999986998972945	WITHOUT_CLASSIFICATION	1.300102705419824E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999986998972945	WITHOUT_CLASSIFICATION	1.300102705419824E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999987906272413	WITHOUT_CLASSIFICATION	1.2093727587810703E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.999999902184582	WITHOUT_CLASSIFICATION	9.78154179265514E-8	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999967946411487	WITHOUT_CLASSIFICATION	3.2053588513241703E-6	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999887376869722	WITHOUT_CLASSIFICATION	1.1262313027747857E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999052023203	WITHOUT_CLASSIFICATION	9.479767979624944E-8	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999423983217498	WITHOUT_CLASSIFICATION	5.7601678250209075E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999996793078187	WITHOUT_CLASSIFICATION	3.206921813292014E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.999999707654002	WITHOUT_CLASSIFICATION	2.9234599794116587E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999971649753627	WITHOUT_CLASSIFICATION	2.8350246372146283E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999987809681627	WITHOUT_CLASSIFICATION	1.2190318371493796E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999996561213385	WITHOUT_CLASSIFICATION	3.438786615087439E-7	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999990307340865	WITHOUT_CLASSIFICATION	9.692659135178278E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999959960550947	WITHOUT_CLASSIFICATION	4.00394490539406E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999985844804616	WITHOUT_CLASSIFICATION	1.4155195383475052E-6	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999312948246	WITHOUT_CLASSIFICATION	6.870517542741897E-8	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999983441013957	WITHOUT_CLASSIFICATION	1.6558986043991568E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999020945924	WITHOUT_CLASSIFICATION	9.790540760074068E-8	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999981103230683	WITHOUT_CLASSIFICATION	1.889676931697468E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999901838206191	WITHOUT_CLASSIFICATION	9.816179380880921E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.999999954215121	WITHOUT_CLASSIFICATION	4.578487899930356E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9996554889108595	WITHOUT_CLASSIFICATION	3.445110891404726E-4	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999999693197785	WITHOUT_CLASSIFICATION	3.0680221579840906E-8	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999998360705719	WITHOUT_CLASSIFICATION	1.639294282277723E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999993382170671	WITHOUT_CLASSIFICATION	6.617829329959792E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999996172291489	WITHOUT_CLASSIFICATION	3.827708511100341E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999997655499778	WITHOUT_CLASSIFICATION	2.344500222673607E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999875779243189	WITHOUT_CLASSIFICATION	1.242207568108386E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999917664849763	WITHOUT_CLASSIFICATION	8.233515023720129E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999993382170671	WITHOUT_CLASSIFICATION	6.617829329959792E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.999996172291489	WITHOUT_CLASSIFICATION	3.827708511100341E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999985844804616	WITHOUT_CLASSIFICATION	1.4155195383475052E-6	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999992562093442	WITHOUT_CLASSIFICATION	7.437906557241034E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999996050997941	WITHOUT_CLASSIFICATION	3.9490020592977E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999753935034071	WITHOUT_CLASSIFICATION	2.4606496592927046E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999984199029882	WITHOUT_CLASSIFICATION	1.580097011792982E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999668549523	WITHOUT_CLASSIFICATION	3.3145047601834473E-8	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999978384502821	WITHOUT_CLASSIFICATION	2.1615497178139023E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999542942939836	WITHOUT_CLASSIFICATION	4.570570601641442E-5	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999992488994033	WITHOUT_CLASSIFICATION	7.511005966283473E-7	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9978354738948929	WITHOUT_CLASSIFICATION	0.0021645261051070775	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999952365178651	WITHOUT_CLASSIFICATION	4.763482134811608E-6	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999831335328342	WITHOUT_CLASSIFICATION	1.6866467165746335E-5	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999990268188776	WITHOUT_CLASSIFICATION	9.731811224128665E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999202642297	WITHOUT_CLASSIFICATION	7.973577038113025E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999997386133943	WITHOUT_CLASSIFICATION	2.6138660569990185E-7	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999982756547776	WITHOUT_CLASSIFICATION	1.724345222303558E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999970006355169	WITHOUT_CLASSIFICATION	2.9993644831752046E-6	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999484069761085	WITHOUT_CLASSIFICATION	5.1593023891444364E-5	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.999979858354089	WITHOUT_CLASSIFICATION	2.01416459110249E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999905807588	WITHOUT_CLASSIFICATION	9.41924113827659E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999997650328989	WITHOUT_CLASSIFICATION	2.3496710102195452E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999894775506	WITHOUT_CLASSIFICATION	1.0522449386288102E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999999869405564	WITHOUT_CLASSIFICATION	1.3059443677374571E-8	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999998543522245	WITHOUT_CLASSIFICATION	1.456477754637649E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999996988497435	WITHOUT_CLASSIFICATION	3.011502564961739E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999833976185	WITHOUT_CLASSIFICATION	1.6602381491927792E-8	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999995674625851	WITHOUT_CLASSIFICATION	4.3253741499599187E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999985286953714	WITHOUT_CLASSIFICATION	1.4713046286345228E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999968470135977	WITHOUT_CLASSIFICATION	3.152986402317639E-6	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999957111609759	WITHOUT_CLASSIFICATION	4.288839024181755E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.99877780646981	WITHOUT_CLASSIFICATION	0.0012221935301901354	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999992161612079	WITHOUT_CLASSIFICATION	7.838387921395313E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999959960550947	WITHOUT_CLASSIFICATION	4.00394490539406E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.999985054714839	WITHOUT_CLASSIFICATION	1.4945285160974595E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999997741740839	WITHOUT_CLASSIFICATION	2.2582591600649374E-7	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999988073626672	WITHOUT_CLASSIFICATION	1.1926373326935175E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999976847849477	WITHOUT_CLASSIFICATION	2.3152150522279288E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999976847849477	WITHOUT_CLASSIFICATION	2.3152150522279288E-6	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999999265394833	WITHOUT_CLASSIFICATION	7.346051664122867E-8	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999998124438916	WITHOUT_CLASSIFICATION	1.8755610837758874E-7	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999424498721	WITHOUT_CLASSIFICATION	5.7550127923636833E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999996932308179	WITHOUT_CLASSIFICATION	3.067691820251703E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999990399700397	WITHOUT_CLASSIFICATION	9.6002996034375E-7	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999996521663955	WITHOUT_CLASSIFICATION	3.478336045329776E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999993858183452	WITHOUT_CLASSIFICATION	6.141816546345354E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999985059221506	WITHOUT_CLASSIFICATION	1.4940778493688242E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9989634651586181	WITHOUT_CLASSIFICATION	0.0010365348413818938	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999967864883047	WITHOUT_CLASSIFICATION	3.2135116952250287E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999996659564366	WITHOUT_CLASSIFICATION	3.34043563361739E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999991326428782	WITHOUT_CLASSIFICATION	8.67357121687201E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999822351129561	WITHOUT_CLASSIFICATION	1.7764887043895003E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999988429243054	WITHOUT_CLASSIFICATION	1.157075694628223E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999744728612188	WITHOUT_CLASSIFICATION	2.552713878132502E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999959850726026	WITHOUT_CLASSIFICATION	4.0149273974042885E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999996346064123	WITHOUT_CLASSIFICATION	3.6539358775735514E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999996346064123	WITHOUT_CLASSIFICATION	3.6539358775735514E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999967841157035	WITHOUT_CLASSIFICATION	3.2158842964248656E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999967841157035	WITHOUT_CLASSIFICATION	3.2158842964248656E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999998424291963	WITHOUT_CLASSIFICATION	1.5757080371767447E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999562614562368	WITHOUT_CLASSIFICATION	4.3738543763123775E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991902989381128	WITHOUT_CLASSIFICATION	8.09701061887216E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999997815250863	WITHOUT_CLASSIFICATION	2.1847491371149227E-7	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999940021679382	WITHOUT_CLASSIFICATION	5.997832061785158E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999995523192305	WITHOUT_CLASSIFICATION	4.4768076949582136E-7	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.999999551887197	WITHOUT_CLASSIFICATION	4.4811280297711514E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999991326428782	WITHOUT_CLASSIFICATION	8.67357121687201E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999822351129561	WITHOUT_CLASSIFICATION	1.7764887043895003E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999744728612188	WITHOUT_CLASSIFICATION	2.552713878132502E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9997545669754608	WITHOUT_CLASSIFICATION	2.454330245392481E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999991890454584	WITHOUT_CLASSIFICATION	8.109545416076899E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9998199253149456	WITHOUT_CLASSIFICATION	1.8007468505448914E-4	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9997446112549874	WITHOUT_CLASSIFICATION	2.553887450125981E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9998463239749901	WITHOUT_CLASSIFICATION	1.536760250099442E-4	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9998637955417983	WITHOUT_CLASSIFICATION	1.362044582016614E-4	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999801997102059	WITHOUT_CLASSIFICATION	1.9800289794039094E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999961670805197	WITHOUT_CLASSIFICATION	3.832919480229977E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999997339261664	WITHOUT_CLASSIFICATION	2.660738336398456E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.999998523895588	WITHOUT_CLASSIFICATION	1.4761044120033317E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9998652184445116	WITHOUT_CLASSIFICATION	1.3478155548840026E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999709159588235	WITHOUT_CLASSIFICATION	2.9084041176481395E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999921911238657	WITHOUT_CLASSIFICATION	7.808876134211056E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9998737275342439	WITHOUT_CLASSIFICATION	1.262724657562124E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999949729466765	WITHOUT_CLASSIFICATION	5.027053323483506E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999995618078196	WITHOUT_CLASSIFICATION	4.3819218034671864E-7	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.999999458730023	WITHOUT_CLASSIFICATION	5.412699768919894E-7	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.999990103636984	WITHOUT_CLASSIFICATION	9.896363015923194E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999997255952354	WITHOUT_CLASSIFICATION	2.7440476461117016E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999966880093561	WITHOUT_CLASSIFICATION	3.31199064374447E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999119615537	WITHOUT_CLASSIFICATION	8.803844621822744E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999845529253755	WITHOUT_CLASSIFICATION	1.5447074624594935E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999967827319244	WITHOUT_CLASSIFICATION	3.217268075637246E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999994918999286	WITHOUT_CLASSIFICATION	5.081000714092594E-7	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999995458774252	WITHOUT_CLASSIFICATION	4.541225747520152E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999999546597084	WITHOUT_CLASSIFICATION	4.5340291671298503E-8	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999910285479895	WITHOUT_CLASSIFICATION	8.971452010513926E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999626224668154	WITHOUT_CLASSIFICATION	3.737753318454979E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.999999944628745	WITHOUT_CLASSIFICATION	5.5371255038347165E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9997660426597468	WITHOUT_CLASSIFICATION	2.3395734025317668E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999989840300559	WITHOUT_CLASSIFICATION	1.0159699441097055E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999885776211564	WITHOUT_CLASSIFICATION	1.1422378843476985E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999693820004342	WITHOUT_CLASSIFICATION	3.0617999565755465E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999922270391369	WITHOUT_CLASSIFICATION	7.772960863067935E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9998977035169442	WITHOUT_CLASSIFICATION	1.0229648305589803E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999437955882	WITHOUT_CLASSIFICATION	5.620441190784717E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999983164407846	WITHOUT_CLASSIFICATION	1.6835592153052883E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999995084308428	WITHOUT_CLASSIFICATION	4.915691571192523E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999970829024347	WITHOUT_CLASSIFICATION	2.9170975652211497E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999919783534047	WITHOUT_CLASSIFICATION	8.02164659524866E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999334513310648	WITHOUT_CLASSIFICATION	6.65486689351667E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999997741740839	WITHOUT_CLASSIFICATION	2.2582591600649374E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999983164407846	WITHOUT_CLASSIFICATION	1.6835592153052883E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9997854983119856	WITHOUT_CLASSIFICATION	2.1450168801442985E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999833811805977	WITHOUT_CLASSIFICATION	1.6618819402311393E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9995874658602483	WITHOUT_CLASSIFICATION	4.1253413975168206E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9985855449485863	WITHOUT_CLASSIFICATION	0.0014144550514136754	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9985855449485863	WITHOUT_CLASSIFICATION	0.0014144550514136754	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999867906412	WITHOUT_CLASSIFICATION	1.3209358758217658E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999829899882	WITHOUT_CLASSIFICATION	1.701001183936592E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999989530753155	WITHOUT_CLASSIFICATION	1.0469246845082632E-6	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999990053464	WITHOUT_CLASSIFICATION	9.94653564875522E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999800366918702	WITHOUT_CLASSIFICATION	1.996330812975222E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999915621355271	WITHOUT_CLASSIFICATION	8.437864472904413E-6	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999341339237	WITHOUT_CLASSIFICATION	6.58660762035776E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999838822206419	WITHOUT_CLASSIFICATION	1.6117779358086813E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998113107647	WITHOUT_CLASSIFICATION	1.886892354059343E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998113107647	WITHOUT_CLASSIFICATION	1.886892354059343E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999997396100608	WITHOUT_CLASSIFICATION	2.6038993921038653E-7	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.999995211606142	WITHOUT_CLASSIFICATION	4.7883938579257806E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999980867146048	WITHOUT_CLASSIFICATION	1.9132853952863217E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999969600424901	WITHOUT_CLASSIFICATION	3.0399575099723142E-6	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999800425581774	WITHOUT_CLASSIFICATION	1.9957441822621805E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.999997562167697	WITHOUT_CLASSIFICATION	2.43783230302392E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9734032693164799	WITHOUT_CLASSIFICATION	0.026596730683520073	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999999892984902	WITHOUT_CLASSIFICATION	1.0701509787497635E-8	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999996585600354	WITHOUT_CLASSIFICATION	3.4143996458579173E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9998117365665751	WITHOUT_CLASSIFICATION	1.8826343342500138E-4	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999995222359548	WITHOUT_CLASSIFICATION	4.77764045315716E-7	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.999994220704064	WITHOUT_CLASSIFICATION	5.7792959360262804E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999968702516575	WITHOUT_CLASSIFICATION	3.1297483423571875E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999968828497038	WITHOUT_CLASSIFICATION	3.1171502962637776E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999968828497038	WITHOUT_CLASSIFICATION	3.1171502962637776E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999803725320013	WITHOUT_CLASSIFICATION	1.9627467998694282E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999839964758572	WITHOUT_CLASSIFICATION	1.60035241427396E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.999984880589169	WITHOUT_CLASSIFICATION	1.511941083096246E-5	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999998792129225	WITHOUT_CLASSIFICATION	1.2078707753953918E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999994118204387	WITHOUT_CLASSIFICATION	5.881795613499161E-7	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999980247856466	WITHOUT_CLASSIFICATION	1.9752143534899667E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999988898599449	WITHOUT_CLASSIFICATION	1.110140055158856E-6	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.999997553812523	WITHOUT_CLASSIFICATION	2.4461874771292417E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999995108666448	WITHOUT_CLASSIFICATION	4.891333550826345E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999952845913516	WITHOUT_CLASSIFICATION	4.715408648487444E-6	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999998242179087	WITHOUT_CLASSIFICATION	1.7578209124806754E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999986922322422	WITHOUT_CLASSIFICATION	1.307767757726805E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999968550642172	WITHOUT_CLASSIFICATION	3.1449357828349387E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999984546256238	WITHOUT_CLASSIFICATION	1.5453743762880984E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999967860502752	WITHOUT_CLASSIFICATION	3.213949724775545E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999999652245499	WITHOUT_CLASSIFICATION	3.477545010830144E-8	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999976834794032	WITHOUT_CLASSIFICATION	2.3165205967096945E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999993521246537	WITHOUT_CLASSIFICATION	6.478753462348933E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999974805616936	WITHOUT_CLASSIFICATION	2.5194383065061223E-6	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999878924991387	WITHOUT_CLASSIFICATION	1.2107500861308451E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9999710792226443	WITHOUT_CLASSIFICATION	2.8920777355736297E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999954745165885	WITHOUT_CLASSIFICATION	4.5254834114586795E-6	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999994431799815	WITHOUT_CLASSIFICATION	5.56820018622397E-7	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999728332529677	WITHOUT_CLASSIFICATION	2.7166747032225627E-5	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8766824252648423	DEFECT	0.12331757473515773	WITHOUT_CLASSIFICATION
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999482155358934	WITHOUT_CLASSIFICATION	5.1784464106597565E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999995156807375	WITHOUT_CLASSIFICATION	4.843192624834822E-7	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999997832797611	WITHOUT_CLASSIFICATION	2.1672023898595926E-7	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999998298622056	WITHOUT_CLASSIFICATION	1.7013779448172548E-7	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999693358264176	WITHOUT_CLASSIFICATION	3.066417358243885E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999996688811468	WITHOUT_CLASSIFICATION	3.311188532142048E-7	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999993128027516	WITHOUT_CLASSIFICATION	6.871972485323646E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999976201885948	WITHOUT_CLASSIFICATION	2.379811405109992E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999891093666	WITHOUT_CLASSIFICATION	1.0890633369993852E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999997564312542	WITHOUT_CLASSIFICATION	2.4356874581961153E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999992274456267	WITHOUT_CLASSIFICATION	7.725543732155605E-7	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999998826787112	WITHOUT_CLASSIFICATION	1.1732128868839578E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999634073225219	WITHOUT_CLASSIFICATION	3.65926774781154E-5	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999878520663974	WITHOUT_CLASSIFICATION	1.2147933602578898E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999868662464011	WITHOUT_CLASSIFICATION	1.3133753598910396E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999992020749329	WITHOUT_CLASSIFICATION	7.979250670958199E-7	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999881576422339	WITHOUT_CLASSIFICATION	1.1842357765995824E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999986814555004	WITHOUT_CLASSIFICATION	1.31854449955007E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999961491358463	WITHOUT_CLASSIFICATION	3.850864153707675E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999432478720534	WITHOUT_CLASSIFICATION	5.6752127946707945E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999369174934425	WITHOUT_CLASSIFICATION	6.308250655756239E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998146432125	WITHOUT_CLASSIFICATION	1.8535678743209803E-7	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999958040737	WITHOUT_CLASSIFICATION	4.195926267211029E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998634167924	WITHOUT_CLASSIFICATION	1.3658320764120866E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999993382170671	WITHOUT_CLASSIFICATION	6.617829329959792E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999993382170671	WITHOUT_CLASSIFICATION	6.617829329959792E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999972805018088	WITHOUT_CLASSIFICATION	2.7194981912461066E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999997318035837	WITHOUT_CLASSIFICATION	2.6819641625151145E-7	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999997373897772	WITHOUT_CLASSIFICATION	2.626102227259248E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.7631884578193852	WITHOUT_CLASSIFICATION	0.23681154218061476	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999611835264	WITHOUT_CLASSIFICATION	3.881647361409228E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.999996788768877	WITHOUT_CLASSIFICATION	3.211231123037523E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999995221665475	WITHOUT_CLASSIFICATION	4.778334525302785E-7	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.999988028239975	WITHOUT_CLASSIFICATION	1.1971760025016447E-5	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999329642215297	WITHOUT_CLASSIFICATION	6.70357784702505E-5	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999998948113397	WITHOUT_CLASSIFICATION	1.0518866033791407E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999614278068417	WITHOUT_CLASSIFICATION	3.8572193158330655E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999614278068417	WITHOUT_CLASSIFICATION	3.8572193158330655E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999614278068417	WITHOUT_CLASSIFICATION	3.8572193158330655E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999996980772954	WITHOUT_CLASSIFICATION	3.0192270453287585E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999906079080356	WITHOUT_CLASSIFICATION	9.392091964397141E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999863709249401	WITHOUT_CLASSIFICATION	1.3629075059819555E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999958442697198	WITHOUT_CLASSIFICATION	4.1557302802674215E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999958442697198	WITHOUT_CLASSIFICATION	4.1557302802674215E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999896287043175	WITHOUT_CLASSIFICATION	1.0371295682435225E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999985623185549	WITHOUT_CLASSIFICATION	1.437681445088699E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999996115475268	WITHOUT_CLASSIFICATION	3.8845247317957743E-7	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999999849404523	WITHOUT_CLASSIFICATION	1.5059547781662576E-8	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999958062015283	WITHOUT_CLASSIFICATION	4.19379847167746E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999987003230718	WITHOUT_CLASSIFICATION	1.2996769281787483E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999982090701452	WITHOUT_CLASSIFICATION	1.7909298546749368E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.999999883102483	WITHOUT_CLASSIFICATION	1.1689751704057257E-7	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9990998589751782	WITHOUT_CLASSIFICATION	9.001410248217356E-4	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999999474263098	WITHOUT_CLASSIFICATION	5.2573690137214896E-8	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999999474263098	WITHOUT_CLASSIFICATION	5.2573690137214896E-8	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.999999715015506	WITHOUT_CLASSIFICATION	2.84984493946158E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999964066044529	WITHOUT_CLASSIFICATION	3.593395547054153E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999976487901725	WITHOUT_CLASSIFICATION	2.351209827546102E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999910630684254	WITHOUT_CLASSIFICATION	8.936931574480446E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999995012452587	WITHOUT_CLASSIFICATION	4.987547412819894E-7	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999998522203118	WITHOUT_CLASSIFICATION	1.4777968810989643E-7	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999973940858038	WITHOUT_CLASSIFICATION	2.605914196212774E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999934101531168	WITHOUT_CLASSIFICATION	6.589846883190824E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999906914195679	WITHOUT_CLASSIFICATION	9.30858043211395E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999909814629351	WITHOUT_CLASSIFICATION	9.018537064985931E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999998236950244	WITHOUT_CLASSIFICATION	1.7630497561741545E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999860245130158	WITHOUT_CLASSIFICATION	1.3975486984167302E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.999992113192802	WITHOUT_CLASSIFICATION	7.886807198053745E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999985257704374	WITHOUT_CLASSIFICATION	1.4742295626586207E-6	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9998849669755819	WITHOUT_CLASSIFICATION	1.1503302441807166E-4	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999983513524029	WITHOUT_CLASSIFICATION	1.6486475970026577E-6	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999603522861421	WITHOUT_CLASSIFICATION	3.964771385789138E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999694372456983	WITHOUT_CLASSIFICATION	3.056275430169879E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999995251744072	WITHOUT_CLASSIFICATION	4.7482559292748945E-7	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999999452789076	WITHOUT_CLASSIFICATION	5.472109239299823E-8	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9997064093960114	WITHOUT_CLASSIFICATION	2.935906039886258E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999995271339593	WITHOUT_CLASSIFICATION	4.72866040611379E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999998516544559	WITHOUT_CLASSIFICATION	1.4834554399922413E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999999587565729	WITHOUT_CLASSIFICATION	4.1243427043701415E-8	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999894713952152	WITHOUT_CLASSIFICATION	1.0528604784780055E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999968235420514	WITHOUT_CLASSIFICATION	3.1764579485415746E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999986073773551	WITHOUT_CLASSIFICATION	1.3926226449497452E-6	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.999993676887289	WITHOUT_CLASSIFICATION	6.323112711023878E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9998724497834086	WITHOUT_CLASSIFICATION	1.2755021659133036E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999916030049206	WITHOUT_CLASSIFICATION	8.396995079381374E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999357928597331	WITHOUT_CLASSIFICATION	6.420714026688793E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999981910423792	WITHOUT_CLASSIFICATION	1.8089576207486824E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999871125224886	WITHOUT_CLASSIFICATION	1.2887477511451916E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999357928597331	WITHOUT_CLASSIFICATION	6.420714026688793E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999858332722646	WITHOUT_CLASSIFICATION	1.4166727735391347E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999988552522734	WITHOUT_CLASSIFICATION	1.1447477266069943E-6	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999984757871803	WITHOUT_CLASSIFICATION	1.5242128197902078E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.999867981885812	WITHOUT_CLASSIFICATION	1.320181141878751E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999981240987188	WITHOUT_CLASSIFICATION	1.8759012810974253E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999909552916286	WITHOUT_CLASSIFICATION	9.044708371335128E-6	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999960463338771	WITHOUT_CLASSIFICATION	3.953666122961837E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.999905071686201	WITHOUT_CLASSIFICATION	9.49283137989759E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999362494538178	WITHOUT_CLASSIFICATION	6.375054618221307E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9996880910550061	WITHOUT_CLASSIFICATION	3.119089449938695E-4	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9995200098458018	WITHOUT_CLASSIFICATION	4.7999015419818847E-4	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9997053319645459	WITHOUT_CLASSIFICATION	2.946680354541493E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9991357501514732	WITHOUT_CLASSIFICATION	8.642498485268735E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9992892630921121	WITHOUT_CLASSIFICATION	7.107369078878131E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999958392142071	WITHOUT_CLASSIFICATION	4.160785792958728E-6	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999567175161369	WITHOUT_CLASSIFICATION	4.328248386298299E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999918845239666	WITHOUT_CLASSIFICATION	8.115476033457942E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999923211632986	WITHOUT_CLASSIFICATION	7.678836701395642E-6	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999671435345576	WITHOUT_CLASSIFICATION	3.285646544243676E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9997415374406485	WITHOUT_CLASSIFICATION	2.5846255935142476E-4	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.999556571461136	WITHOUT_CLASSIFICATION	4.4342853886400517E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999641102915489	WITHOUT_CLASSIFICATION	3.588970845105922E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9998703908267303	WITHOUT_CLASSIFICATION	1.2960917326963517E-4	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999863017664569	WITHOUT_CLASSIFICATION	1.369823354306061E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999067591822017	WITHOUT_CLASSIFICATION	9.324081779834313E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999993493622781	WITHOUT_CLASSIFICATION	6.506377219762473E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999915644901901	WITHOUT_CLASSIFICATION	8.435509809810517E-6	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.999999791505264	WITHOUT_CLASSIFICATION	2.0849473607064285E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999982524033163	WITHOUT_CLASSIFICATION	1.7475966837986707E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999983683965731	WITHOUT_CLASSIFICATION	1.6316034269716594E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999930513861552	WITHOUT_CLASSIFICATION	6.9486138447404886E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9976417281814723	WITHOUT_CLASSIFICATION	0.002358271818527701	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9958526975820022	WITHOUT_CLASSIFICATION	0.0041473024179977105	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.999999715599954	WITHOUT_CLASSIFICATION	2.8440004597985013E-7	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.999994859634489	WITHOUT_CLASSIFICATION	5.140365510976763E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.999996124621637	WITHOUT_CLASSIFICATION	3.875378362996187E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999970606514023	WITHOUT_CLASSIFICATION	2.9393485977645116E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999791517324039	WITHOUT_CLASSIFICATION	2.0848267596050933E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999875046229	WITHOUT_CLASSIFICATION	1.2495377151756019E-8	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999976327212389	WITHOUT_CLASSIFICATION	2.367278761228503E-6	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999955107466595	WITHOUT_CLASSIFICATION	4.489253340444411E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999972135496905	WITHOUT_CLASSIFICATION	2.7864503094333577E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999996925161616	WITHOUT_CLASSIFICATION	3.0748383836398006E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999976976150292	WITHOUT_CLASSIFICATION	2.3023849707582614E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999989232325512	WITHOUT_CLASSIFICATION	1.0767674487857366E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.999998612214045	WITHOUT_CLASSIFICATION	1.3877859549969848E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999986441466567	WITHOUT_CLASSIFICATION	1.3558533432653206E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999988801297477	WITHOUT_CLASSIFICATION	1.1198702522904768E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999999300846959	WITHOUT_CLASSIFICATION	6.991530403530654E-8	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999983184772356	WITHOUT_CLASSIFICATION	1.681522764368967E-6	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999929987884566	WITHOUT_CLASSIFICATION	7.001211543418838E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999988200962027	WITHOUT_CLASSIFICATION	1.1799037973634254E-6	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.999999735013611	WITHOUT_CLASSIFICATION	2.6498638901865243E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999999300846959	WITHOUT_CLASSIFICATION	6.991530403530654E-8	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8819138509757544	WITHOUT_CLASSIFICATION	0.11808614902424568	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.8819138509757544	WITHOUT_CLASSIFICATION	0.11808614902424568	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999920726989	WITHOUT_CLASSIFICATION	7.927301079882056E-9	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999993008296988	WITHOUT_CLASSIFICATION	6.991703012914301E-7	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999998039777118	WITHOUT_CLASSIFICATION	1.9602228817973586E-7	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999999896446857	WITHOUT_CLASSIFICATION	1.0355314296104239E-8	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999999749891906	WITHOUT_CLASSIFICATION	2.5010809442284712E-8	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999996568837521	WITHOUT_CLASSIFICATION	3.4311624792481806E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999751377001026	WITHOUT_CLASSIFICATION	2.4862299897277656E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9781411785885611	DEFECT	0.021858821411438936	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999998973221043	WITHOUT_CLASSIFICATION	1.0267789585276374E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9997905858101043	WITHOUT_CLASSIFICATION	2.0941418989567443E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999724160998	WITHOUT_CLASSIFICATION	2.7583900260258105E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999796094710902	WITHOUT_CLASSIFICATION	2.0390528909776886E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999848037170517	WITHOUT_CLASSIFICATION	1.5196282948274943E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999995682800842	WITHOUT_CLASSIFICATION	4.317199157754173E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999928991011032	WITHOUT_CLASSIFICATION	7.1008988968118145E-6	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999996012794217	WITHOUT_CLASSIFICATION	3.987205782904308E-6	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999999337119566	WITHOUT_CLASSIFICATION	6.628804332611954E-8	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999923202073245	WITHOUT_CLASSIFICATION	7.679792675464373E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999975434130912	WITHOUT_CLASSIFICATION	2.456586908801548E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999908567808573	WITHOUT_CLASSIFICATION	9.143219142806217E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999792896335459	WITHOUT_CLASSIFICATION	2.071036645411044E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998743578783	WITHOUT_CLASSIFICATION	1.256421217686965E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999995632190162	WITHOUT_CLASSIFICATION	4.367809838514814E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999983352206505	WITHOUT_CLASSIFICATION	1.6647793494273301E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998787932701	WITHOUT_CLASSIFICATION	1.2120672989127142E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999932595097402	WITHOUT_CLASSIFICATION	6.7404902599030985E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.999991465408951	WITHOUT_CLASSIFICATION	8.534591049046663E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999883478737641	WITHOUT_CLASSIFICATION	1.1652126235903185E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999939589206259	WITHOUT_CLASSIFICATION	6.041079374162158E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999992842093629	WITHOUT_CLASSIFICATION	7.157906371007E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999915851106642	WITHOUT_CLASSIFICATION	8.414889335751017E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999928787985422	WITHOUT_CLASSIFICATION	7.121201457791502E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999953286260171	WITHOUT_CLASSIFICATION	4.671373982915631E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999933449467217	WITHOUT_CLASSIFICATION	6.655053278406387E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999922351633537	WITHOUT_CLASSIFICATION	7.764836646271305E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999927711450239	WITHOUT_CLASSIFICATION	7.228854976059805E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999934734609549	WITHOUT_CLASSIFICATION	6.526539045132919E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999910101376464	WITHOUT_CLASSIFICATION	8.989862353718619E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999915556829558	WITHOUT_CLASSIFICATION	8.444317044205102E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999940999723247	WITHOUT_CLASSIFICATION	5.900027675328693E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999940883623553	WITHOUT_CLASSIFICATION	5.911637644769382E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999912473713528	WITHOUT_CLASSIFICATION	8.752628647190004E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999936949852333	WITHOUT_CLASSIFICATION	6.305014766767499E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999933557558905	WITHOUT_CLASSIFICATION	6.644244109457318E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999912171802091	WITHOUT_CLASSIFICATION	8.78281979096172E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999907038970999	WITHOUT_CLASSIFICATION	9.296102900015122E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999991170670345	WITHOUT_CLASSIFICATION	8.82932965502899E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999921019686987	WITHOUT_CLASSIFICATION	7.898031301268014E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999899364371778	WITHOUT_CLASSIFICATION	1.0063562822200837E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999913189226106	WITHOUT_CLASSIFICATION	8.681077389440924E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999907495500705	WITHOUT_CLASSIFICATION	9.250449929529446E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999899055330621	WITHOUT_CLASSIFICATION	1.0094466937846167E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999912743016618	WITHOUT_CLASSIFICATION	8.72569833828193E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999908089506202	WITHOUT_CLASSIFICATION	9.191049379692096E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999908567211417	WITHOUT_CLASSIFICATION	9.143278858294554E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999905009796467	WITHOUT_CLASSIFICATION	9.499020353243552E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999936580265046	WITHOUT_CLASSIFICATION	6.341973495300751E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999929453547336	WITHOUT_CLASSIFICATION	7.054645266465343E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999910777743755	WITHOUT_CLASSIFICATION	8.922225624553675E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999933553586244	WITHOUT_CLASSIFICATION	6.644641375471495E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999895342873998	WITHOUT_CLASSIFICATION	1.0465712600236127E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.999985766316668	WITHOUT_CLASSIFICATION	1.4233683331939333E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999879353975033	WITHOUT_CLASSIFICATION	1.2064602496742857E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999992753690817	WITHOUT_CLASSIFICATION	7.2463091829301184E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999903033772288	WITHOUT_CLASSIFICATION	9.696622771147174E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999898522359142	WITHOUT_CLASSIFICATION	1.0147764085828503E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999883257843988	WITHOUT_CLASSIFICATION	1.1674215601164892E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999892048089586	WITHOUT_CLASSIFICATION	1.079519104146646E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999854940615165	WITHOUT_CLASSIFICATION	1.4505938483530645E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999874877610334	WITHOUT_CLASSIFICATION	1.251223896653622E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999883348517019	WITHOUT_CLASSIFICATION	1.1665148298123553E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999893110520919	WITHOUT_CLASSIFICATION	1.0688947908175362E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999839936846742	WITHOUT_CLASSIFICATION	1.600631532583274E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999880513126742	WITHOUT_CLASSIFICATION	1.1948687325744681E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999861247447958	WITHOUT_CLASSIFICATION	1.3875255204333496E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999860748695669	WITHOUT_CLASSIFICATION	1.3925130433159383E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999914303768356	WITHOUT_CLASSIFICATION	8.569623164448995E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999916045377052	WITHOUT_CLASSIFICATION	8.395462294790424E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999873616518478	WITHOUT_CLASSIFICATION	1.263834815220346E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999857358321952	WITHOUT_CLASSIFICATION	1.4264167804845248E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999876687700763	WITHOUT_CLASSIFICATION	1.2331229923710108E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999920974677278	WITHOUT_CLASSIFICATION	7.902532272262332E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999876608309771	WITHOUT_CLASSIFICATION	1.2339169022955334E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999909813021501	WITHOUT_CLASSIFICATION	9.018697849924822E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999882893236598	WITHOUT_CLASSIFICATION	1.1710676340214321E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999920541594058	WITHOUT_CLASSIFICATION	7.945840594202105E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999856220946883	WITHOUT_CLASSIFICATION	1.4377905311672973E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999891834549579	WITHOUT_CLASSIFICATION	1.0816545042029635E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999886691113437	WITHOUT_CLASSIFICATION	1.133088865638352E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999895361928411	WITHOUT_CLASSIFICATION	1.0463807158807352E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999895182531167	WITHOUT_CLASSIFICATION	1.0481746883344768E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999883189174356	WITHOUT_CLASSIFICATION	1.1681082564364849E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999888016564029	WITHOUT_CLASSIFICATION	1.1198343597062259E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999885353263919	WITHOUT_CLASSIFICATION	1.1464673608197781E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999914230309185	WITHOUT_CLASSIFICATION	8.576969081592823E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999915354033103	WITHOUT_CLASSIFICATION	8.464596689589459E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999903826162182	WITHOUT_CLASSIFICATION	9.617383781772776E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999909139810059	WITHOUT_CLASSIFICATION	9.086018994111492E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999915165404973	WITHOUT_CLASSIFICATION	8.483459502647952E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999991134810579	WITHOUT_CLASSIFICATION	8.865189420896874E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999897293081346	WITHOUT_CLASSIFICATION	1.0270691865332825E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999937839905362	WITHOUT_CLASSIFICATION	6.216009463846406E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999908439996769	WITHOUT_CLASSIFICATION	9.156000323188987E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999876510366957	WITHOUT_CLASSIFICATION	1.2348963304237985E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999879815672903	WITHOUT_CLASSIFICATION	1.201843270967295E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999907541672819	WITHOUT_CLASSIFICATION	9.245832718004669E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999883193637018	WITHOUT_CLASSIFICATION	1.1680636298173309E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999898749290542	WITHOUT_CLASSIFICATION	1.0125070945669802E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999917437278432	WITHOUT_CLASSIFICATION	8.256272156842507E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999890064896962	WITHOUT_CLASSIFICATION	1.0993510303767197E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999937388703424	WITHOUT_CLASSIFICATION	6.2611296576328365E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999942865777461	WITHOUT_CLASSIFICATION	5.71342225377699E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999918524325877	WITHOUT_CLASSIFICATION	8.147567412347608E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999895631015655	WITHOUT_CLASSIFICATION	1.0436898434435793E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999899824494274	WITHOUT_CLASSIFICATION	1.0017550572552616E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999905079112855	WITHOUT_CLASSIFICATION	9.492088714545555E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999933395822469	WITHOUT_CLASSIFICATION	6.660417753037915E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999922491219493	WITHOUT_CLASSIFICATION	7.750878050719308E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999935205868234	WITHOUT_CLASSIFICATION	6.4794131765606915E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999951920041961	WITHOUT_CLASSIFICATION	4.807995803923133E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999995002099292	WITHOUT_CLASSIFICATION	4.997900707984409E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.99999316472852	WITHOUT_CLASSIFICATION	6.8352714800116834E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999938409925235	WITHOUT_CLASSIFICATION	6.159007476448624E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999930433665372	WITHOUT_CLASSIFICATION	6.956633462771276E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999929730136151	WITHOUT_CLASSIFICATION	7.026986384923513E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999930279798641	WITHOUT_CLASSIFICATION	6.972020135778363E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999932442329721	WITHOUT_CLASSIFICATION	6.755767027817299E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999937356322846	WITHOUT_CLASSIFICATION	6.264367715423954E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999927447010395	WITHOUT_CLASSIFICATION	7.255298960550067E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999935782007809	WITHOUT_CLASSIFICATION	6.42179921898536E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999940483659934	WITHOUT_CLASSIFICATION	5.951634006558875E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999937324159792	WITHOUT_CLASSIFICATION	6.2675840208459055E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999943587798166	WITHOUT_CLASSIFICATION	5.641220183429579E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999929996153162	WITHOUT_CLASSIFICATION	7.000384683800533E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999928674447116	WITHOUT_CLASSIFICATION	7.132555288419396E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999927284565452	WITHOUT_CLASSIFICATION	7.271543454773003E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999988906540012	WITHOUT_CLASSIFICATION	1.1093459987913518E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999928134758115	WITHOUT_CLASSIFICATION	7.18652418856042E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999928990781332	WITHOUT_CLASSIFICATION	7.10092186680444E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999855183523508	WITHOUT_CLASSIFICATION	1.4481647649233579E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999903863194339	WITHOUT_CLASSIFICATION	9.613680566005147E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999896710917917	WITHOUT_CLASSIFICATION	1.0328908208305177E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999893149519196	WITHOUT_CLASSIFICATION	1.068504808045553E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999891764049849	WITHOUT_CLASSIFICATION	1.0823595015159193E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999899150518231	WITHOUT_CLASSIFICATION	1.008494817681363E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999881068930294	WITHOUT_CLASSIFICATION	1.1893106970595362E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999986522582256	WITHOUT_CLASSIFICATION	1.3477417743968639E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999899129496816	WITHOUT_CLASSIFICATION	1.0087050318338997E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999989483198502	WITHOUT_CLASSIFICATION	1.0516801497945491E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999920235204058	WITHOUT_CLASSIFICATION	7.976479594228271E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999873224509551	WITHOUT_CLASSIFICATION	1.2677549044908505E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999890977712559	WITHOUT_CLASSIFICATION	1.0902228744211703E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999883312186878	WITHOUT_CLASSIFICATION	1.166878131212319E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999890790798854	WITHOUT_CLASSIFICATION	1.0920920114537153E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999882159466718	WITHOUT_CLASSIFICATION	1.1784053328169223E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999917638818134	WITHOUT_CLASSIFICATION	8.236118186645158E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999993323365594	WITHOUT_CLASSIFICATION	6.6766344060794824E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999917427372211	WITHOUT_CLASSIFICATION	8.257262778868326E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999918469444611	WITHOUT_CLASSIFICATION	8.153055538924406E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999883653898277	WITHOUT_CLASSIFICATION	1.1634610172301197E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999908533982439	WITHOUT_CLASSIFICATION	9.146601756018001E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999878434774744	WITHOUT_CLASSIFICATION	1.2156522525623248E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999929195292461	WITHOUT_CLASSIFICATION	7.080470753939958E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.999992152279249	WITHOUT_CLASSIFICATION	7.847720751061996E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999921075887963	WITHOUT_CLASSIFICATION	7.892411203778002E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999901126844719	WITHOUT_CLASSIFICATION	9.887315528074655E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999897940508023	WITHOUT_CLASSIFICATION	1.0205949197660082E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999900673588547	WITHOUT_CLASSIFICATION	9.932641145302247E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999932135691271	WITHOUT_CLASSIFICATION	6.786430872987589E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999918988016947	WITHOUT_CLASSIFICATION	8.101198305293472E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999932556955853	WITHOUT_CLASSIFICATION	6.74430441467431E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999920439221427	WITHOUT_CLASSIFICATION	7.956077857236832E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999896690289147	WITHOUT_CLASSIFICATION	1.033097108519637E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999909399762318	WITHOUT_CLASSIFICATION	9.060023768177701E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999911411995261	WITHOUT_CLASSIFICATION	8.85880047390065E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999938997169068	WITHOUT_CLASSIFICATION	6.100283093177272E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999936791235415	WITHOUT_CLASSIFICATION	6.320876458495273E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999881129559824	WITHOUT_CLASSIFICATION	1.18870440175574E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999915969850398	WITHOUT_CLASSIFICATION	8.403014960153666E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999887084981287	WITHOUT_CLASSIFICATION	1.1291501871356435E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999924971206722	WITHOUT_CLASSIFICATION	7.502879327785178E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999927446520893	WITHOUT_CLASSIFICATION	7.2553479107099595E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999899885330872	WITHOUT_CLASSIFICATION	1.001146691290042E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999907735895858	WITHOUT_CLASSIFICATION	9.226410414257632E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999914371889151	WITHOUT_CLASSIFICATION	8.562811084918265E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999913910897026	WITHOUT_CLASSIFICATION	8.60891029744553E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999902344575449	WITHOUT_CLASSIFICATION	9.765542455109359E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999898501574598	WITHOUT_CLASSIFICATION	1.0149842540183201E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999907750197429	WITHOUT_CLASSIFICATION	9.22498025712171E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999919430814799	WITHOUT_CLASSIFICATION	8.056918520121398E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999914946898928	WITHOUT_CLASSIFICATION	8.505310107250399E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999989353233622	WITHOUT_CLASSIFICATION	1.0646766377959362E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999929345276429	WITHOUT_CLASSIFICATION	7.065472357115885E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999990516063387	WITHOUT_CLASSIFICATION	9.483936613105267E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999855210360811	WITHOUT_CLASSIFICATION	1.4478963918945633E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999992683395201	WITHOUT_CLASSIFICATION	7.316604799042273E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999937065278088	WITHOUT_CLASSIFICATION	6.293472191161279E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.99999362749071	WITHOUT_CLASSIFICATION	6.372509289969311E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999984367133457	WITHOUT_CLASSIFICATION	1.5632866543002178E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999844730149183	WITHOUT_CLASSIFICATION	1.552698508167485E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999864673021799	WITHOUT_CLASSIFICATION	1.3532697820174832E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999992295496345	WITHOUT_CLASSIFICATION	7.704503654925428E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999900981668111	WITHOUT_CLASSIFICATION	9.901833188880401E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999915164000223	WITHOUT_CLASSIFICATION	8.483599977683871E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999899551523053	WITHOUT_CLASSIFICATION	1.0044847694660632E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999836893683028	WITHOUT_CLASSIFICATION	1.6310631697201727E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999874967766086	WITHOUT_CLASSIFICATION	1.2503223391544387E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999900058898246	WITHOUT_CLASSIFICATION	9.994110175444463E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.999985408697712	WITHOUT_CLASSIFICATION	1.4591302287887037E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999873518852611	WITHOUT_CLASSIFICATION	1.2648114738886854E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999928801222789	WITHOUT_CLASSIFICATION	7.119877721095955E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999902612667592	WITHOUT_CLASSIFICATION	9.73873324089982E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999906307472068	WITHOUT_CLASSIFICATION	9.369252793194995E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999882916990052	WITHOUT_CLASSIFICATION	1.1708300994792078E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999884311618727	WITHOUT_CLASSIFICATION	1.156883812725842E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999892560122923	WITHOUT_CLASSIFICATION	1.0743987707743258E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999864513114616	WITHOUT_CLASSIFICATION	1.3548688538459578E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999891764167668	WITHOUT_CLASSIFICATION	1.082358323316764E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999890209789036	WITHOUT_CLASSIFICATION	1.0979021096445848E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999890126471208	WITHOUT_CLASSIFICATION	1.0987352879207405E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999929910877885	WITHOUT_CLASSIFICATION	7.008912211493476E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999895579976124	WITHOUT_CLASSIFICATION	1.04420023876224E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999926305031551	WITHOUT_CLASSIFICATION	7.369496844820109E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999884574718186	WITHOUT_CLASSIFICATION	1.1542528181383237E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999918330275313	WITHOUT_CLASSIFICATION	8.16697246878377E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999885492591002	WITHOUT_CLASSIFICATION	1.1450740899801461E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999930603770004	WITHOUT_CLASSIFICATION	6.939622999502488E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999923089050758	WITHOUT_CLASSIFICATION	7.691094924165335E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999892993858811	WITHOUT_CLASSIFICATION	1.0700614118868149E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999892515576917	WITHOUT_CLASSIFICATION	1.074844230820102E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999904322101244	WITHOUT_CLASSIFICATION	9.567789875596167E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999990560855903	WITHOUT_CLASSIFICATION	9.439144096966076E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999910612465123	WITHOUT_CLASSIFICATION	8.938753487802052E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.999987967533975	WITHOUT_CLASSIFICATION	1.203246602500471E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999864424400543	WITHOUT_CLASSIFICATION	1.355755994580434E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999879108873043	WITHOUT_CLASSIFICATION	1.2089112695643383E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999894898911633	WITHOUT_CLASSIFICATION	1.0510108836638247E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999875680820473	WITHOUT_CLASSIFICATION	1.2431917952849285E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999891466488263	WITHOUT_CLASSIFICATION	1.0853351173749583E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999901790711712	WITHOUT_CLASSIFICATION	9.82092882884328E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.999992916371005	WITHOUT_CLASSIFICATION	7.0836289950902764E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999911208050578	WITHOUT_CLASSIFICATION	8.879194942144085E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999929424493865	WITHOUT_CLASSIFICATION	7.057550613485448E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999879738649733	WITHOUT_CLASSIFICATION	1.2026135026632455E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999882725543855	WITHOUT_CLASSIFICATION	1.1727445614476405E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999918161487319	WITHOUT_CLASSIFICATION	8.183851268052859E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999987192839975	WITHOUT_CLASSIFICATION	1.2807160025138942E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999892259649074	WITHOUT_CLASSIFICATION	1.0774035092591079E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999871445821665	WITHOUT_CLASSIFICATION	1.2855417833481718E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999903842885148	WITHOUT_CLASSIFICATION	9.615711485075232E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999868358129641	WITHOUT_CLASSIFICATION	1.3164187035929423E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999877928481041	WITHOUT_CLASSIFICATION	1.2207151895776336E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999871902591064	WITHOUT_CLASSIFICATION	1.2809740893633576E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999903637687844	WITHOUT_CLASSIFICATION	9.636231215525295E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999881718352075	WITHOUT_CLASSIFICATION	1.1828164792637257E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999860840529278	WITHOUT_CLASSIFICATION	1.3915947072162932E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.99998789842587	WITHOUT_CLASSIFICATION	1.2101574130023466E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999911916058764	WITHOUT_CLASSIFICATION	8.808394123749988E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999886463708539	WITHOUT_CLASSIFICATION	1.1353629145978714E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999913338464899	WITHOUT_CLASSIFICATION	8.666153510029239E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999865677365709	WITHOUT_CLASSIFICATION	1.3432263429162267E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999859422777292	WITHOUT_CLASSIFICATION	1.4057722270729397E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999891068202879	WITHOUT_CLASSIFICATION	1.08931797121836E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999911576531126	WITHOUT_CLASSIFICATION	8.842346887332941E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999908672766987	WITHOUT_CLASSIFICATION	9.132723301201382E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999896090214193	WITHOUT_CLASSIFICATION	1.0390978580686147E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999927176137301	WITHOUT_CLASSIFICATION	7.282386270014521E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999906541107999	WITHOUT_CLASSIFICATION	9.345889200148523E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999989875781128	WITHOUT_CLASSIFICATION	1.0124218871988484E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999886325267396	WITHOUT_CLASSIFICATION	1.1367473260362026E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999896948291179	WITHOUT_CLASSIFICATION	1.0305170881933084E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999918965871241	WITHOUT_CLASSIFICATION	8.103412875863583E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999911246739344	WITHOUT_CLASSIFICATION	8.875326065538999E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999897626372288	WITHOUT_CLASSIFICATION	1.0237362771131501E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999903381757975	WITHOUT_CLASSIFICATION	9.661824202463116E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999921252724647	WITHOUT_CLASSIFICATION	7.874727535258722E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999876656874391	WITHOUT_CLASSIFICATION	1.2334312560958978E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999760566567741	WITHOUT_CLASSIFICATION	2.3943343225870256E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999851362097696	WITHOUT_CLASSIFICATION	1.486379023051744E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999856725699529	WITHOUT_CLASSIFICATION	1.4327430047169794E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999846798269392	WITHOUT_CLASSIFICATION	1.532017306082451E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999858575255544	WITHOUT_CLASSIFICATION	1.414247444553768E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.999984537449516	WITHOUT_CLASSIFICATION	1.5462550484013962E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999844930083917	WITHOUT_CLASSIFICATION	1.5506991608423154E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999800629797817	WITHOUT_CLASSIFICATION	1.9937020218252117E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999843092971613	WITHOUT_CLASSIFICATION	1.569070283867203E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999872062819526	WITHOUT_CLASSIFICATION	1.279371804741979E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999829641225916	WITHOUT_CLASSIFICATION	1.703587740848876E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999892396557409	WITHOUT_CLASSIFICATION	1.0760344258992907E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.999993067865124	WITHOUT_CLASSIFICATION	6.93213487605327E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999924084756381	WITHOUT_CLASSIFICATION	7.59152436201695E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999932543313262	WITHOUT_CLASSIFICATION	6.74566867382756E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999931845000561	WITHOUT_CLASSIFICATION	6.8154999438838125E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999901929280491	WITHOUT_CLASSIFICATION	9.807071950812893E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9998421132737967	WITHOUT_CLASSIFICATION	1.578867262034165E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.999988758963789	WITHOUT_CLASSIFICATION	1.1241036211043705E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999569612393866	WITHOUT_CLASSIFICATION	4.303876061331884E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999324428173005	WITHOUT_CLASSIFICATION	6.755718269944345E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9998888501575862	WITHOUT_CLASSIFICATION	1.1114984241379885E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999792259568602	WITHOUT_CLASSIFICATION	2.0774043139890326E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999713227936546	WITHOUT_CLASSIFICATION	2.8677206345349268E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999947833595596	WITHOUT_CLASSIFICATION	5.216640440425741E-6	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.99980527693507	WITHOUT_CLASSIFICATION	1.9472306492990723E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999222251176534	WITHOUT_CLASSIFICATION	7.777488234667277E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999891132158775	WITHOUT_CLASSIFICATION	1.0886784122599217E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954470503145	WITHOUT_CLASSIFICATION	4.552949685542786E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9991796484864502	WITHOUT_CLASSIFICATION	8.203515135498327E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999488635305135	WITHOUT_CLASSIFICATION	5.113646948646004E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998463405268252	WITHOUT_CLASSIFICATION	1.5365947317476706E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9995320790013263	WITHOUT_CLASSIFICATION	4.679209986737046E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999962113960348	WITHOUT_CLASSIFICATION	3.788603965199198E-5	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999997976403386	WITHOUT_CLASSIFICATION	2.0235966136115728E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999826400853682	WITHOUT_CLASSIFICATION	1.7359914631724695E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999963155267284	WITHOUT_CLASSIFICATION	3.6844732714591102E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.999999771439455	WITHOUT_CLASSIFICATION	2.285605451311437E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999674104286	WITHOUT_CLASSIFICATION	3.2589571387378225E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999674104286	WITHOUT_CLASSIFICATION	3.2589571387378225E-8	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.999785556519103	WITHOUT_CLASSIFICATION	2.1444348089698457E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9998491620157756	WITHOUT_CLASSIFICATION	1.508379842244421E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999618937883222	WITHOUT_CLASSIFICATION	3.810621167790236E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999786389056153	WITHOUT_CLASSIFICATION	2.1361094384678043E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999708481033598	WITHOUT_CLASSIFICATION	2.9151896640248878E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999999009611915	WITHOUT_CLASSIFICATION	9.903880852438289E-8	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.999984854737989	WITHOUT_CLASSIFICATION	1.514526201097026E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999966147644919	WITHOUT_CLASSIFICATION	3.385235508056778E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9994474087813682	WITHOUT_CLASSIFICATION	5.525912186318885E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999996629180065	WITHOUT_CLASSIFICATION	3.3708199354023277E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999997342435228	WITHOUT_CLASSIFICATION	2.657564771234941E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9999999751830858	WITHOUT_CLASSIFICATION	2.4816914231510763E-8	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.999852780029293	WITHOUT_CLASSIFICATION	1.4721997070692085E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999921417261586	WITHOUT_CLASSIFICATION	7.858273841436336E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.99999827745075	WITHOUT_CLASSIFICATION	1.722549249963853E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999888360920675	WITHOUT_CLASSIFICATION	1.1163907932586669E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999998241938983	WITHOUT_CLASSIFICATION	1.7580610170103255E-7	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9991894023040915	WITHOUT_CLASSIFICATION	8.105976959085774E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999548374888304	WITHOUT_CLASSIFICATION	4.5162511169639615E-5	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999982684169662	WITHOUT_CLASSIFICATION	1.731583033846258E-6	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.999999912590497	WITHOUT_CLASSIFICATION	8.740950298453942E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.999994650799213	WITHOUT_CLASSIFICATION	5.349200787017376E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6292925991837929	DEFECT	0.3707074008162072	WITHOUT_CLASSIFICATION
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999997546923677	WITHOUT_CLASSIFICATION	2.453076322841989E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6292925991837929	DEFECT	0.3707074008162072	WITHOUT_CLASSIFICATION
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999998920579699	WITHOUT_CLASSIFICATION	1.079420301064423E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999992326679481	WITHOUT_CLASSIFICATION	7.673320519289636E-7	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8044137093690086	DEFECT	0.1955862906309914	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999330501742114	WITHOUT_CLASSIFICATION	6.694982578858508E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9997572989071009	WITHOUT_CLASSIFICATION	2.4270109289911045E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999935098088665	WITHOUT_CLASSIFICATION	6.490191133615884E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999935098088665	WITHOUT_CLASSIFICATION	6.490191133615884E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999935098088665	WITHOUT_CLASSIFICATION	6.490191133615884E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999403483925378	WITHOUT_CLASSIFICATION	5.9651607462329044E-5	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999228197143425	WITHOUT_CLASSIFICATION	7.718028565749475E-5	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999998252738613	WITHOUT_CLASSIFICATION	1.7472613861504227E-7	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999245722095322	WITHOUT_CLASSIFICATION	7.54277904677496E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999878845767096	WITHOUT_CLASSIFICATION	1.2115423290441759E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999837977830089	WITHOUT_CLASSIFICATION	1.6202216991050553E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999158880607976	WITHOUT_CLASSIFICATION	8.41119392024238E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.999925113969297	WITHOUT_CLASSIFICATION	7.488603070307542E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999484605426213	WITHOUT_CLASSIFICATION	5.153945737860653E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999908567808573	WITHOUT_CLASSIFICATION	9.143219142806217E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999998743578783	WITHOUT_CLASSIFICATION	1.256421217686965E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999995632190162	WITHOUT_CLASSIFICATION	4.367809838514814E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999983352206505	WITHOUT_CLASSIFICATION	1.6647793494273301E-6	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999998787932701	WITHOUT_CLASSIFICATION	1.2120672989127142E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999937700999703	WITHOUT_CLASSIFICATION	6.2299000296760935E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999927711450239	WITHOUT_CLASSIFICATION	7.228854976059805E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999940883623553	WITHOUT_CLASSIFICATION	5.911637644769382E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999912171802091	WITHOUT_CLASSIFICATION	8.78281979096172E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999907038970999	WITHOUT_CLASSIFICATION	9.296102900015122E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999905427743875	WITHOUT_CLASSIFICATION	9.457225612528157E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999991170670345	WITHOUT_CLASSIFICATION	8.82932965502899E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999946434593887	WITHOUT_CLASSIFICATION	5.3565406113065695E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999926658509595	WITHOUT_CLASSIFICATION	7.334149040488702E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999912599977318	WITHOUT_CLASSIFICATION	8.740002268215991E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999914481893795	WITHOUT_CLASSIFICATION	8.551810620556997E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999925419941963	WITHOUT_CLASSIFICATION	7.458005803698646E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999993844475939	WITHOUT_CLASSIFICATION	6.155524061017539E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999916607695546	WITHOUT_CLASSIFICATION	8.339230445389016E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999919219372685	WITHOUT_CLASSIFICATION	8.07806273143422E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.999992056854395	WITHOUT_CLASSIFICATION	7.943145605100939E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999916445301693	WITHOUT_CLASSIFICATION	8.355469830724087E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999994110755071	WITHOUT_CLASSIFICATION	5.889244928905517E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999902071052468	WITHOUT_CLASSIFICATION	9.792894753179726E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999934726283592	WITHOUT_CLASSIFICATION	6.527371640866859E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999920304183421	WITHOUT_CLASSIFICATION	7.969581657945499E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999945939023865	WITHOUT_CLASSIFICATION	5.40609761349917E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999914547770081	WITHOUT_CLASSIFICATION	8.545222991835538E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999989652933018	WITHOUT_CLASSIFICATION	1.0347066982015735E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999917644622333	WITHOUT_CLASSIFICATION	8.235537766757096E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999914088412512	WITHOUT_CLASSIFICATION	8.591158748795696E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999902378734846	WITHOUT_CLASSIFICATION	9.762126515250569E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999912642535641	WITHOUT_CLASSIFICATION	8.73574643592058E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.999994077357252	WITHOUT_CLASSIFICATION	5.922642747991761E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999912397201591	WITHOUT_CLASSIFICATION	8.760279840965668E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999903667365276	WITHOUT_CLASSIFICATION	9.633263472475908E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999913561481857	WITHOUT_CLASSIFICATION	8.643851814352393E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999899521485903	WITHOUT_CLASSIFICATION	1.0047851409696128E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.99999388824114	WITHOUT_CLASSIFICATION	6.111758860100597E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999944139162316	WITHOUT_CLASSIFICATION	5.586083768435746E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999941126620416	WITHOUT_CLASSIFICATION	5.887337958376633E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999908784280093	WITHOUT_CLASSIFICATION	9.121571990694946E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999891995832715	WITHOUT_CLASSIFICATION	1.0800416728469192E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999815338537719	WITHOUT_CLASSIFICATION	1.8466146228165694E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999868022770108	WITHOUT_CLASSIFICATION	1.3197722989190525E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999846260902132	WITHOUT_CLASSIFICATION	1.537390978683528E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999906003527532	WITHOUT_CLASSIFICATION	9.399647246824135E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999911421026119	WITHOUT_CLASSIFICATION	8.857897388111481E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999883274730783	WITHOUT_CLASSIFICATION	1.1672526921668E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999892048089586	WITHOUT_CLASSIFICATION	1.079519104146646E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999854940615165	WITHOUT_CLASSIFICATION	1.4505938483530645E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999874877610334	WITHOUT_CLASSIFICATION	1.251223896653622E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999880513126742	WITHOUT_CLASSIFICATION	1.1948687325744681E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999920974677278	WITHOUT_CLASSIFICATION	7.902532272262332E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999888016564029	WITHOUT_CLASSIFICATION	1.1198343597062259E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999894720595466	WITHOUT_CLASSIFICATION	1.052794045337626E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999885353263919	WITHOUT_CLASSIFICATION	1.1464673608197781E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999917437278432	WITHOUT_CLASSIFICATION	8.256272156842507E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999937388703424	WITHOUT_CLASSIFICATION	6.2611296576328365E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999927957245804	WITHOUT_CLASSIFICATION	7.204275419471167E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999942865777461	WITHOUT_CLASSIFICATION	5.71342225377699E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999918524325877	WITHOUT_CLASSIFICATION	8.147567412347608E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999885811597757	WITHOUT_CLASSIFICATION	1.1418840224288432E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999873737714818	WITHOUT_CLASSIFICATION	1.2626228518206122E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999989729958921	WITHOUT_CLASSIFICATION	1.0270041078961013E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.999992738228739	WITHOUT_CLASSIFICATION	7.261771260950406E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999890633347148	WITHOUT_CLASSIFICATION	1.093666528510669E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999894885874046	WITHOUT_CLASSIFICATION	1.0511412595479138E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.999986690802249	WITHOUT_CLASSIFICATION	1.3309197750944118E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999867109958667	WITHOUT_CLASSIFICATION	1.3289004133339508E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999911107752262	WITHOUT_CLASSIFICATION	8.889224773754379E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999914707639801	WITHOUT_CLASSIFICATION	8.529236019804186E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999888181668914	WITHOUT_CLASSIFICATION	1.1181833108531028E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999890164153167	WITHOUT_CLASSIFICATION	1.0983584683316426E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.999991656018782	WITHOUT_CLASSIFICATION	8.343981217904326E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999880914318715	WITHOUT_CLASSIFICATION	1.1908568128519829E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999899475207273	WITHOUT_CLASSIFICATION	1.0052479272670783E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999888161639362	WITHOUT_CLASSIFICATION	1.1183836063776466E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999873680120173	WITHOUT_CLASSIFICATION	1.263198798268888E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999873400727614	WITHOUT_CLASSIFICATION	1.265992723865597E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.999991472782453	WITHOUT_CLASSIFICATION	8.527217546897399E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999862646086959	WITHOUT_CLASSIFICATION	1.3735391304096059E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.999990967813451	WITHOUT_CLASSIFICATION	9.032186549016424E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.999990040774871	WITHOUT_CLASSIFICATION	9.959225129147728E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999924451510076	WITHOUT_CLASSIFICATION	7.554848992464294E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999917087434398	WITHOUT_CLASSIFICATION	8.291256560155359E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999924557867815	WITHOUT_CLASSIFICATION	7.544213218402834E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999869623195373	WITHOUT_CLASSIFICATION	1.3037680462666073E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999892204434682	WITHOUT_CLASSIFICATION	1.0779556531894128E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999927119626217	WITHOUT_CLASSIFICATION	7.288037378292228E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999924611182949	WITHOUT_CLASSIFICATION	7.538881705191286E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999914367011515	WITHOUT_CLASSIFICATION	8.563298848549933E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999858079033435	WITHOUT_CLASSIFICATION	1.4192096656517494E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999910439226175	WITHOUT_CLASSIFICATION	8.956077382430418E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999947139444436	WITHOUT_CLASSIFICATION	5.286055556309904E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999943810156723	WITHOUT_CLASSIFICATION	5.618984327694146E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999951385751676	WITHOUT_CLASSIFICATION	4.861424832348003E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999932346599699	WITHOUT_CLASSIFICATION	6.765340030174366E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999932442329721	WITHOUT_CLASSIFICATION	6.755767027817299E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999926141535966	WITHOUT_CLASSIFICATION	7.385846403375422E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999937356322846	WITHOUT_CLASSIFICATION	6.264367715423954E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999988906540012	WITHOUT_CLASSIFICATION	1.1093459987913518E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999928990781332	WITHOUT_CLASSIFICATION	7.10092186680444E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999881068930294	WITHOUT_CLASSIFICATION	1.1893106970595362E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999989483198502	WITHOUT_CLASSIFICATION	1.0516801497945491E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999890977712559	WITHOUT_CLASSIFICATION	1.0902228744211703E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999993323365594	WITHOUT_CLASSIFICATION	6.6766344060794824E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999878434774744	WITHOUT_CLASSIFICATION	1.2156522525623248E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999930499390375	WITHOUT_CLASSIFICATION	6.950060962507165E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999930412504628	WITHOUT_CLASSIFICATION	6.958749537244627E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999934191355113	WITHOUT_CLASSIFICATION	6.580864488626781E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999938625726936	WITHOUT_CLASSIFICATION	6.1374273063731185E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999937562941772	WITHOUT_CLASSIFICATION	6.2437058228546946E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999942583205885	WITHOUT_CLASSIFICATION	5.741679411542534E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999920872373197	WITHOUT_CLASSIFICATION	7.912762680345487E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999931120686713	WITHOUT_CLASSIFICATION	6.8879313288145915E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999912894684095	WITHOUT_CLASSIFICATION	8.710531590523434E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999934978812426	WITHOUT_CLASSIFICATION	6.502118757432708E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999992450787869	WITHOUT_CLASSIFICATION	7.549212130984984E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999912448442286	WITHOUT_CLASSIFICATION	8.755155771388106E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999934179806109	WITHOUT_CLASSIFICATION	6.582019388995276E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999938620391652	WITHOUT_CLASSIFICATION	6.137960834855243E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999943986924492	WITHOUT_CLASSIFICATION	5.601307550780303E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999904727878642	WITHOUT_CLASSIFICATION	9.527212135679103E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999896063733376	WITHOUT_CLASSIFICATION	1.03936266624022E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999907082929798	WITHOUT_CLASSIFICATION	9.291707020304242E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999905714531416	WITHOUT_CLASSIFICATION	9.428546858485482E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999917217784964	WITHOUT_CLASSIFICATION	8.278221503598364E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999932099681041	WITHOUT_CLASSIFICATION	6.790031895801708E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999909863008065	WITHOUT_CLASSIFICATION	9.013699193488678E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999889303752493	WITHOUT_CLASSIFICATION	1.1069624750725175E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999914910064309	WITHOUT_CLASSIFICATION	8.508993569111778E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999897432692872	WITHOUT_CLASSIFICATION	1.025673071277355E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999876548666109	WITHOUT_CLASSIFICATION	1.2345133389119613E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999897161524356	WITHOUT_CLASSIFICATION	1.0283847564490678E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999888764903306	WITHOUT_CLASSIFICATION	1.1123509669345802E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999908777183676	WITHOUT_CLASSIFICATION	9.122281632443048E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999904150395035	WITHOUT_CLASSIFICATION	9.584960496529963E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999909453372162	WITHOUT_CLASSIFICATION	9.054662783825495E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999885164427713	WITHOUT_CLASSIFICATION	1.1483557228654935E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999917468155691	WITHOUT_CLASSIFICATION	8.253184430872828E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999884678488871	WITHOUT_CLASSIFICATION	1.1532151112955134E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999898233245915	WITHOUT_CLASSIFICATION	1.0176675408411918E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999895910962256	WITHOUT_CLASSIFICATION	1.0408903774354247E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999991781490985	WITHOUT_CLASSIFICATION	8.218509014961625E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999903570443808	WITHOUT_CLASSIFICATION	9.642955619266653E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999891033980557	WITHOUT_CLASSIFICATION	1.089660194424458E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999912079589629	WITHOUT_CLASSIFICATION	8.792041037012821E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999927446520893	WITHOUT_CLASSIFICATION	7.2553479107099595E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999920296155768	WITHOUT_CLASSIFICATION	7.970384423331235E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999913910897026	WITHOUT_CLASSIFICATION	8.60891029744553E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999919430814799	WITHOUT_CLASSIFICATION	8.056918520121398E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999929345276429	WITHOUT_CLASSIFICATION	7.065472357115885E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999844730149183	WITHOUT_CLASSIFICATION	1.552698508167485E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999864673021799	WITHOUT_CLASSIFICATION	1.3532697820174832E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999874967766086	WITHOUT_CLASSIFICATION	1.2503223391544387E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999900058898246	WITHOUT_CLASSIFICATION	9.994110175444463E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999892710524444	WITHOUT_CLASSIFICATION	1.0728947555689726E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999943064089976	WITHOUT_CLASSIFICATION	5.693591002503691E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999932301313991	WITHOUT_CLASSIFICATION	6.7698686009877884E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999936918268777	WITHOUT_CLASSIFICATION	6.308173122214979E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999916971670494	WITHOUT_CLASSIFICATION	8.302832950511163E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999775041687841	WITHOUT_CLASSIFICATION	2.2495831215865944E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999917813611112	WITHOUT_CLASSIFICATION	8.218638888698895E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999916431431483	WITHOUT_CLASSIFICATION	8.356856851745269E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999945329252539	WITHOUT_CLASSIFICATION	5.4670747460853515E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999901446628359	WITHOUT_CLASSIFICATION	9.855337164063526E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999906179523865	WITHOUT_CLASSIFICATION	9.382047613525172E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999938571310382	WITHOUT_CLASSIFICATION	6.142868961848062E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999915875930827	WITHOUT_CLASSIFICATION	8.412406917272374E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999905622239846	WITHOUT_CLASSIFICATION	9.437776015385524E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999908229630118	WITHOUT_CLASSIFICATION	9.17703698830806E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999913619044725	WITHOUT_CLASSIFICATION	8.638095527605075E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999867846844179	WITHOUT_CLASSIFICATION	1.3215315582076794E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999886824351365	WITHOUT_CLASSIFICATION	1.1317564863437988E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999939247093754	WITHOUT_CLASSIFICATION	6.075290624586415E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999918675975104	WITHOUT_CLASSIFICATION	8.132402489726799E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999898751574757	WITHOUT_CLASSIFICATION	1.0124842524302686E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999878405950365	WITHOUT_CLASSIFICATION	1.2159404963411718E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999882867573159	WITHOUT_CLASSIFICATION	1.1713242684091011E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.999991572235643	WITHOUT_CLASSIFICATION	8.427764357079879E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999897337647161	WITHOUT_CLASSIFICATION	1.0266235283841985E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999881524117479	WITHOUT_CLASSIFICATION	1.1847588252141104E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999874339581778	WITHOUT_CLASSIFICATION	1.256604182210051E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.99999167092563	WITHOUT_CLASSIFICATION	8.329074369974085E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999876257424782	WITHOUT_CLASSIFICATION	1.2374257521817971E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.999989071238898	WITHOUT_CLASSIFICATION	1.0928761102058616E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999867713128318	WITHOUT_CLASSIFICATION	1.322868716824414E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999892659707842	WITHOUT_CLASSIFICATION	1.0734029215780173E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999886019909937	WITHOUT_CLASSIFICATION	1.1398009006262302E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999921637945993	WITHOUT_CLASSIFICATION	7.836205400675668E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999916557155626	WITHOUT_CLASSIFICATION	8.344284437518882E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999897634597846	WITHOUT_CLASSIFICATION	1.0236540215301781E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999884626575386	WITHOUT_CLASSIFICATION	1.1537342461347235E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.999992270048938	WITHOUT_CLASSIFICATION	7.729951061962833E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999873869253367	WITHOUT_CLASSIFICATION	1.2613074663288687E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999926305031551	WITHOUT_CLASSIFICATION	7.369496844820109E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999923089050758	WITHOUT_CLASSIFICATION	7.691094924165335E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999892993858811	WITHOUT_CLASSIFICATION	1.0700614118868149E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999929186058021	WITHOUT_CLASSIFICATION	7.081394197880672E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999894898911633	WITHOUT_CLASSIFICATION	1.0510108836638247E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999891466488263	WITHOUT_CLASSIFICATION	1.0853351173749583E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999879738649733	WITHOUT_CLASSIFICATION	1.2026135026632455E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999882725543855	WITHOUT_CLASSIFICATION	1.1727445614476405E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999886463708539	WITHOUT_CLASSIFICATION	1.1353629145978714E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999913338464899	WITHOUT_CLASSIFICATION	8.666153510029239E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999992140407655	WITHOUT_CLASSIFICATION	7.859592344970973E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999917623172022	WITHOUT_CLASSIFICATION	8.237682797701738E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999885251880269	WITHOUT_CLASSIFICATION	1.1474811973068237E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999899696868991	WITHOUT_CLASSIFICATION	1.003031310085617E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999895840946816	WITHOUT_CLASSIFICATION	1.0415905318352417E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999902845862451	WITHOUT_CLASSIFICATION	9.715413754919643E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999904768275784	WITHOUT_CLASSIFICATION	9.523172421726172E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999900603630921	WITHOUT_CLASSIFICATION	9.939636907928057E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999895444032081	WITHOUT_CLASSIFICATION	1.0455596791789551E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.999987745689465	WITHOUT_CLASSIFICATION	1.2254310534862185E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999880094579248	WITHOUT_CLASSIFICATION	1.1990542075335595E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999893709667766	WITHOUT_CLASSIFICATION	1.0629033223450766E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999876695328748	WITHOUT_CLASSIFICATION	1.2330467125305546E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999880329858365	WITHOUT_CLASSIFICATION	1.196701416342882E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999900422195784	WITHOUT_CLASSIFICATION	9.957780421572652E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999918138719611	WITHOUT_CLASSIFICATION	8.186128038893974E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999880718067509	WITHOUT_CLASSIFICATION	1.1928193249089663E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999903658263307	WITHOUT_CLASSIFICATION	9.634173669272427E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999891451002453	WITHOUT_CLASSIFICATION	1.0854899754720656E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999887217048475	WITHOUT_CLASSIFICATION	1.1278295152532942E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999902489690315	WITHOUT_CLASSIFICATION	9.751030968426881E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999904182607761	WITHOUT_CLASSIFICATION	9.581739223849398E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999895028418727	WITHOUT_CLASSIFICATION	1.049715812739923E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999889088827991	WITHOUT_CLASSIFICATION	1.1091117200779925E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999883330311266	WITHOUT_CLASSIFICATION	1.1666968873440457E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999904461697487	WITHOUT_CLASSIFICATION	9.553830251253713E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999895551305876	WITHOUT_CLASSIFICATION	1.0444869412264252E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999921722254081	WITHOUT_CLASSIFICATION	7.827774591822271E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999895613861983	WITHOUT_CLASSIFICATION	1.043861380172932E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999918854004717	WITHOUT_CLASSIFICATION	8.114599528328843E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999814203348922	WITHOUT_CLASSIFICATION	1.8579665107672855E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999883543617062	WITHOUT_CLASSIFICATION	1.164563829392556E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999890474197443	WITHOUT_CLASSIFICATION	1.0952580255786655E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999884618291123	WITHOUT_CLASSIFICATION	1.1538170887723536E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999919137795619	WITHOUT_CLASSIFICATION	8.086220438132768E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999879617491996	WITHOUT_CLASSIFICATION	1.2038250800548839E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999882788834692	WITHOUT_CLASSIFICATION	1.1721116530835364E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999838295692687	WITHOUT_CLASSIFICATION	1.617043073122159E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999887286065022	WITHOUT_CLASSIFICATION	1.1271393497676049E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999887930583222	WITHOUT_CLASSIFICATION	1.1206941677687061E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999908672766987	WITHOUT_CLASSIFICATION	9.132723301201382E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999896090214193	WITHOUT_CLASSIFICATION	1.0390978580686147E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999760566567741	WITHOUT_CLASSIFICATION	2.3943343225870256E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999865244440319	WITHOUT_CLASSIFICATION	1.3475555968056227E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999856725699529	WITHOUT_CLASSIFICATION	1.4327430047169794E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999858575255544	WITHOUT_CLASSIFICATION	1.414247444553768E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999844930083917	WITHOUT_CLASSIFICATION	1.5506991608423154E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999932543313262	WITHOUT_CLASSIFICATION	6.74566867382756E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999931845000561	WITHOUT_CLASSIFICATION	6.8154999438838125E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999887486796744	WITHOUT_CLASSIFICATION	1.1251320325716291E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999922118855922	WITHOUT_CLASSIFICATION	7.788114407835813E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999913457818375	WITHOUT_CLASSIFICATION	8.654218162424116E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999896359966977	WITHOUT_CLASSIFICATION	1.0364003302422808E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999897686662345	WITHOUT_CLASSIFICATION	1.023133376565711E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999883971348911	WITHOUT_CLASSIFICATION	1.1602865108901645E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999894046848103	WITHOUT_CLASSIFICATION	1.0595315189714527E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999902452346602	WITHOUT_CLASSIFICATION	9.754765339733312E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.999987508629775	WITHOUT_CLASSIFICATION	1.2491370225088165E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999904459882389	WITHOUT_CLASSIFICATION	9.554011761107706E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999879302295642	WITHOUT_CLASSIFICATION	1.2069770435708514E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999930934691399	WITHOUT_CLASSIFICATION	6.906530860060406E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999796843808583	WITHOUT_CLASSIFICATION	2.03156191417195E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999889236152248	WITHOUT_CLASSIFICATION	1.1076384775097565E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999863006102107	WITHOUT_CLASSIFICATION	1.3699389789359156E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.999988010715467	WITHOUT_CLASSIFICATION	1.1989284533029277E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999872212933635	WITHOUT_CLASSIFICATION	1.277870663651115E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.999985829253558	WITHOUT_CLASSIFICATION	1.4170746441918109E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999903630535691	WITHOUT_CLASSIFICATION	9.636946430833348E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999846496017277	WITHOUT_CLASSIFICATION	1.5350398272315596E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999763988003071	WITHOUT_CLASSIFICATION	2.360119969286518E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999869286331072	WITHOUT_CLASSIFICATION	1.3071366892699777E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999866893705728	WITHOUT_CLASSIFICATION	1.3310629427170034E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999868667302204	WITHOUT_CLASSIFICATION	1.3133269779476234E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999863785526687	WITHOUT_CLASSIFICATION	1.3621447331307047E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999903054098441	WITHOUT_CLASSIFICATION	9.694590155910381E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999888450702576	WITHOUT_CLASSIFICATION	1.1154929742464245E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999911534648214	WITHOUT_CLASSIFICATION	8.846535178647166E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999986481798588	WITHOUT_CLASSIFICATION	1.351820141207004E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999845406269359	WITHOUT_CLASSIFICATION	1.5459373064133516E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999909475840187	WITHOUT_CLASSIFICATION	9.052415981310229E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999882896310387	WITHOUT_CLASSIFICATION	1.1710368961428551E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999917830518356	WITHOUT_CLASSIFICATION	8.216948164481187E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999904377549123	WITHOUT_CLASSIFICATION	9.562245087778271E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999914776003948	WITHOUT_CLASSIFICATION	8.522399605148253E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999918278060203	WITHOUT_CLASSIFICATION	8.17219397972223E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999932442256604	WITHOUT_CLASSIFICATION	6.755774339536089E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999929344036808	WITHOUT_CLASSIFICATION	7.065596319238607E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999914944415761	WITHOUT_CLASSIFICATION	8.505558423995148E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999792259568602	WITHOUT_CLASSIFICATION	2.0774043139890326E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999713227936546	WITHOUT_CLASSIFICATION	2.8677206345349268E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954470503145	WITHOUT_CLASSIFICATION	4.552949685542786E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999488635305135	WITHOUT_CLASSIFICATION	5.113646948646004E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998463405268252	WITHOUT_CLASSIFICATION	1.5365947317476706E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9995320790013263	WITHOUT_CLASSIFICATION	4.679209986737046E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999962113960348	WITHOUT_CLASSIFICATION	3.788603965199198E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999739576145635	WITHOUT_CLASSIFICATION	2.60423854364503E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999905499884796	WITHOUT_CLASSIFICATION	9.4500115204623E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999907965781712	WITHOUT_CLASSIFICATION	9.203421828769392E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999919598201978	WITHOUT_CLASSIFICATION	8.040179802090376E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999992411835358	WITHOUT_CLASSIFICATION	7.588164642092818E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999920943022719	WITHOUT_CLASSIFICATION	7.905697728120917E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999992939656746	WITHOUT_CLASSIFICATION	7.060343254108157E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999898844418751	WITHOUT_CLASSIFICATION	1.0115558124909032E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999880611360492	WITHOUT_CLASSIFICATION	1.1938863950726149E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999912499056072	WITHOUT_CLASSIFICATION	8.750094392953688E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999930835873055	WITHOUT_CLASSIFICATION	6.916412694436568E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999855064859484	WITHOUT_CLASSIFICATION	1.4493514051553303E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999912283886958	WITHOUT_CLASSIFICATION	8.771611304121524E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999988675763835	WITHOUT_CLASSIFICATION	1.1324236165103575E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999915987172231	WITHOUT_CLASSIFICATION	8.401282776961528E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999885305549717	WITHOUT_CLASSIFICATION	1.1469445028364849E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999855101923694	WITHOUT_CLASSIFICATION	1.44898076306243E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999916579663068	WITHOUT_CLASSIFICATION	8.3420336931408E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999876541494472	WITHOUT_CLASSIFICATION	1.2345850552826383E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.999992158071667	WITHOUT_CLASSIFICATION	7.841928333083575E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.999987125319835	WITHOUT_CLASSIFICATION	1.2874680164949522E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999646410796599	WITHOUT_CLASSIFICATION	3.5358920340173296E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999631637183474	WITHOUT_CLASSIFICATION	3.683628165263508E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999905358886875	WITHOUT_CLASSIFICATION	9.464111312498354E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.999999084102008	WITHOUT_CLASSIFICATION	9.158979920276573E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999934251210489	WITHOUT_CLASSIFICATION	6.5748789511302685E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999207097464103	WITHOUT_CLASSIFICATION	7.929025358970717E-5	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999988659515197	WITHOUT_CLASSIFICATION	1.1340484803061998E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999985415799331	WITHOUT_CLASSIFICATION	1.4584200669488578E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9998723098424079	WITHOUT_CLASSIFICATION	1.2769015759206949E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999826400853682	WITHOUT_CLASSIFICATION	1.7359914631724695E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999674104286	WITHOUT_CLASSIFICATION	3.2589571387378225E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999674104286	WITHOUT_CLASSIFICATION	3.2589571387378225E-8	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9994203559869637	WITHOUT_CLASSIFICATION	5.796440130363341E-4	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999865174383176	WITHOUT_CLASSIFICATION	1.3482561682397295E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.999998749615374	WITHOUT_CLASSIFICATION	1.2503846259898894E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999971712823144	WITHOUT_CLASSIFICATION	2.8287176856976326E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999990512841616	WITHOUT_CLASSIFICATION	9.48715838489743E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999847873255969	WITHOUT_CLASSIFICATION	1.5212674403142343E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999990296555122	WITHOUT_CLASSIFICATION	9.70344487798665E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999958395021628	WITHOUT_CLASSIFICATION	4.160497837163697E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999579502548	WITHOUT_CLASSIFICATION	4.20497451285878E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999993570507588	WITHOUT_CLASSIFICATION	6.429492411142416E-7	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.999999890679648	WITHOUT_CLASSIFICATION	1.093203520468127E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999614560207	WITHOUT_CLASSIFICATION	3.854397931525163E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999595724709	WITHOUT_CLASSIFICATION	4.042752907157029E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.999999510453294	WITHOUT_CLASSIFICATION	4.895467059594482E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999999723248075	WITHOUT_CLASSIFICATION	2.767519250932209E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.999999723248075	WITHOUT_CLASSIFICATION	2.767519250932209E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999992213233858	WITHOUT_CLASSIFICATION	7.786766141621436E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999802868101	WITHOUT_CLASSIFICATION	1.9713189865025466E-8	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999596978393	WITHOUT_CLASSIFICATION	4.030216063447711E-8	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999993289534029	WITHOUT_CLASSIFICATION	6.710465971309163E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998829686124	WITHOUT_CLASSIFICATION	1.1703138761014431E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996742379175	WITHOUT_CLASSIFICATION	3.2576208246415114E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998829686124	WITHOUT_CLASSIFICATION	1.1703138761014431E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999995042313519	WITHOUT_CLASSIFICATION	4.95768648194715E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9240837278157841	WITHOUT_CLASSIFICATION	0.07591627218421601	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9641748925628645	WITHOUT_CLASSIFICATION	0.03582510743713551	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999928466780865	WITHOUT_CLASSIFICATION	7.153321913477281E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999990764953584	WITHOUT_CLASSIFICATION	9.235046415381376E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999377281509	WITHOUT_CLASSIFICATION	6.227184914582205E-8	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999989399350656	WITHOUT_CLASSIFICATION	1.0600649343930467E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999993352132286	WITHOUT_CLASSIFICATION	6.64786771331023E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.8977280666286395	WITHOUT_CLASSIFICATION	0.1022719333713605	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999999352642224	WITHOUT_CLASSIFICATION	6.473577764610383E-8	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999968041517561	WITHOUT_CLASSIFICATION	3.195848243936295E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999819170924349	WITHOUT_CLASSIFICATION	1.808290756511858E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999280920474539	WITHOUT_CLASSIFICATION	7.190795254607045E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999994359302905	WITHOUT_CLASSIFICATION	5.640697095122694E-7	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999994359302905	WITHOUT_CLASSIFICATION	5.640697095122694E-7	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999973732907161	WITHOUT_CLASSIFICATION	2.6267092839365843E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.999999923349516	WITHOUT_CLASSIFICATION	7.665048394888378E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999995468612095	WITHOUT_CLASSIFICATION	4.531387904615961E-7	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999677081888195	WITHOUT_CLASSIFICATION	3.2291811180388E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999994706005096	WITHOUT_CLASSIFICATION	5.29399490313022E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999998829686124	WITHOUT_CLASSIFICATION	1.1703138761014431E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999957798493828	WITHOUT_CLASSIFICATION	4.2201506172372494E-6	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999953100815189	WITHOUT_CLASSIFICATION	4.6899184811470816E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999839288572546	WITHOUT_CLASSIFICATION	1.6071142745327053E-5	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999960457072293	WITHOUT_CLASSIFICATION	3.9542927707245226E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999989509895103	WITHOUT_CLASSIFICATION	1.0490104896426143E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999930056622	WITHOUT_CLASSIFICATION	6.99433775852481E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999996694627035	WITHOUT_CLASSIFICATION	3.305372965499044E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999999367651546	WITHOUT_CLASSIFICATION	6.323484535642923E-8	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999688975519	WITHOUT_CLASSIFICATION	3.110244805917611E-8	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999998216610158	WITHOUT_CLASSIFICATION	1.783389841935612E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.999999943038982	WITHOUT_CLASSIFICATION	5.696101795628273E-8	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999998411719158	WITHOUT_CLASSIFICATION	1.5882808423222166E-7	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9995363437082075	WITHOUT_CLASSIFICATION	4.636562917924551E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999992803953895	WITHOUT_CLASSIFICATION	7.196046104783394E-7	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9997280914802912	WITHOUT_CLASSIFICATION	2.719085197088595E-4	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999996651162062	WITHOUT_CLASSIFICATION	3.348837938481734E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999885217394672	WITHOUT_CLASSIFICATION	1.1478260532762408E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.999957957443515	WITHOUT_CLASSIFICATION	4.2042556484962394E-5	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999973250965243	WITHOUT_CLASSIFICATION	2.674903475761273E-6	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999986727452911	WITHOUT_CLASSIFICATION	1.327254708854984E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999992302969275	WITHOUT_CLASSIFICATION	7.697030725402706E-7	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9980367623551262	WITHOUT_CLASSIFICATION	0.001963237644873803	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.999999496025186	WITHOUT_CLASSIFICATION	5.039748138726858E-7	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999996875866388	WITHOUT_CLASSIFICATION	3.1241336126504047E-7	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999992293619987	WITHOUT_CLASSIFICATION	7.7063800132284E-7	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999697624213	WITHOUT_CLASSIFICATION	3.023757875507329E-8	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999869278453988	WITHOUT_CLASSIFICATION	1.3072154601166722E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999946186761268	WITHOUT_CLASSIFICATION	5.381323873167404E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999012079074746	WITHOUT_CLASSIFICATION	9.879209252534384E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999997459171303	WITHOUT_CLASSIFICATION	2.5408286974049535E-7	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.99996981845942	WITHOUT_CLASSIFICATION	3.018154058000923E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999987845043823	WITHOUT_CLASSIFICATION	1.2154956177793037E-6	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999365436062	WITHOUT_CLASSIFICATION	6.345639382914026E-8	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9997693151885967	WITHOUT_CLASSIFICATION	2.3068481140335384E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999997361335317	WITHOUT_CLASSIFICATION	2.6386646833181186E-7	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.999999964088712	WITHOUT_CLASSIFICATION	3.59112881247924E-8	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998251589938657	WITHOUT_CLASSIFICATION	1.7484100613431743E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999984177290758	WITHOUT_CLASSIFICATION	1.5822709241902667E-6	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999998237196026	WITHOUT_CLASSIFICATION	1.7628039742401379E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999863011061	WITHOUT_CLASSIFICATION	1.369889385915642E-8	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999739576145635	WITHOUT_CLASSIFICATION	2.60423854364503E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999999902809202	WITHOUT_CLASSIFICATION	9.719079797006796E-8	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999950113265861	WITHOUT_CLASSIFICATION	4.988673413882075E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999369174934425	WITHOUT_CLASSIFICATION	6.308250655756239E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999998146432125	WITHOUT_CLASSIFICATION	1.8535678743209803E-7	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999984336228845	WITHOUT_CLASSIFICATION	1.5663771154736067E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999955466881583	WITHOUT_CLASSIFICATION	4.4533118416317615E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999334378484145	WITHOUT_CLASSIFICATION	6.656215158551415E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998886389936	WITHOUT_CLASSIFICATION	1.1136100632500905E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998886389936	WITHOUT_CLASSIFICATION	1.1136100632500905E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.99999757434569	WITHOUT_CLASSIFICATION	2.4256543100485777E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.99999757434569	WITHOUT_CLASSIFICATION	2.4256543100485777E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.99999757434569	WITHOUT_CLASSIFICATION	2.4256543100485777E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999991516644449	WITHOUT_CLASSIFICATION	8.483355551895033E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999991516644449	WITHOUT_CLASSIFICATION	8.483355551895033E-7	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999998222099898	WITHOUT_CLASSIFICATION	1.7779001019625975E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.999998222099898	WITHOUT_CLASSIFICATION	1.7779001019625975E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999999620831922	WITHOUT_CLASSIFICATION	3.791680771594894E-8	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999992492558399	WITHOUT_CLASSIFICATION	7.507441599952112E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999915171017992	WITHOUT_CLASSIFICATION	8.482898200687327E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999915171017992	WITHOUT_CLASSIFICATION	8.482898200687327E-6	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999997747875317	WITHOUT_CLASSIFICATION	2.252124683616393E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999992690681679	WITHOUT_CLASSIFICATION	7.30931832130687E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.999868773295178	WITHOUT_CLASSIFICATION	1.3122670482200487E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.999999928218837	WITHOUT_CLASSIFICATION	7.178116297988495E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999330733423748	WITHOUT_CLASSIFICATION	6.69266576252444E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999999382703334	WITHOUT_CLASSIFICATION	6.17296666193617E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999999431097513	WITHOUT_CLASSIFICATION	5.6890248576946534E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9998985190746079	WITHOUT_CLASSIFICATION	1.0148092539209375E-4	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999778226072219	WITHOUT_CLASSIFICATION	2.217739277811569E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999577206330584	WITHOUT_CLASSIFICATION	4.2279366941688514E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999999854308752	WITHOUT_CLASSIFICATION	1.4569124779921903E-8	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999990605111599	WITHOUT_CLASSIFICATION	9.394888401605385E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999895638983528	WITHOUT_CLASSIFICATION	1.0436101647168655E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999880989800841	WITHOUT_CLASSIFICATION	1.1901019915821613E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999971614005797	WITHOUT_CLASSIFICATION	2.838599420319606E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999621175996827	WITHOUT_CLASSIFICATION	3.788240031742193E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9998724365094749	WITHOUT_CLASSIFICATION	1.2756349052509694E-4	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999890400977651	WITHOUT_CLASSIFICATION	1.0959902234887802E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999931595374081	WITHOUT_CLASSIFICATION	6.84046259193282E-6	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999852975876149	WITHOUT_CLASSIFICATION	1.470241238521882E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999973680789738	WITHOUT_CLASSIFICATION	2.6319210261991455E-6	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999919721304331	WITHOUT_CLASSIFICATION	8.027869566882165E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999967326540509	WITHOUT_CLASSIFICATION	3.267345949204397E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999934486493954	WITHOUT_CLASSIFICATION	6.5513506045550374E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999980116637146	WITHOUT_CLASSIFICATION	1.988336285358441E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999978089622833	WITHOUT_CLASSIFICATION	2.1910377166027443E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999730754455955	WITHOUT_CLASSIFICATION	2.6924554404528743E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999785742762476	WITHOUT_CLASSIFICATION	2.1425723752385354E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999934022157374	WITHOUT_CLASSIFICATION	6.5977842626324995E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999979975710249	WITHOUT_CLASSIFICATION	2.002428975104811E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999977934329141	WITHOUT_CLASSIFICATION	2.206567085898438E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999713415569415	WITHOUT_CLASSIFICATION	2.865844305862998E-5	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9998328148947755	WITHOUT_CLASSIFICATION	1.6718510522455515E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999963494567244	WITHOUT_CLASSIFICATION	3.650543275629067E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999260900641987	WITHOUT_CLASSIFICATION	7.390993580124364E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999919378543505	WITHOUT_CLASSIFICATION	8.062145649504786E-6	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999979760799751	WITHOUT_CLASSIFICATION	2.0239200249433055E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999414660808	WITHOUT_CLASSIFICATION	5.853391907072317E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.999999809436914	WITHOUT_CLASSIFICATION	1.9056308607288102E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999986755353918	WITHOUT_CLASSIFICATION	1.3244646082421664E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999975762874821	WITHOUT_CLASSIFICATION	2.42371251795904E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999774852343638	WITHOUT_CLASSIFICATION	2.2514765636207732E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999999676262148	WITHOUT_CLASSIFICATION	3.237378528297148E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999988246441676	WITHOUT_CLASSIFICATION	1.1753558324437261E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999996703820644	WITHOUT_CLASSIFICATION	3.296179356457254E-7	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999995275851137	WITHOUT_CLASSIFICATION	4.7241488633209295E-7	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999997600315087	WITHOUT_CLASSIFICATION	2.399684913203611E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.999984450813968	WITHOUT_CLASSIFICATION	1.554918603198101E-5	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.999997286647371	WITHOUT_CLASSIFICATION	2.7133526289923116E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999999084490824	WITHOUT_CLASSIFICATION	9.155091753668266E-8	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999957938775165	WITHOUT_CLASSIFICATION	4.2061224834354535E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999999910887629	WITHOUT_CLASSIFICATION	8.911237125116776E-9	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999965504553288	WITHOUT_CLASSIFICATION	3.449544671317389E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996742379175	WITHOUT_CLASSIFICATION	3.2576208246415114E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9989714068592626	WITHOUT_CLASSIFICATION	0.0010285931407374483	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.999993083814774	WITHOUT_CLASSIFICATION	6.916185225980599E-6	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999988096278176	WITHOUT_CLASSIFICATION	1.1903721823689218E-6	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999998718861903	WITHOUT_CLASSIFICATION	1.2811380966186935E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999994441402293	WITHOUT_CLASSIFICATION	5.558597706461778E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.999993858497582	WITHOUT_CLASSIFICATION	6.14150241799213E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999898717254776	WITHOUT_CLASSIFICATION	1.0128274522343079E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999932153311293	WITHOUT_CLASSIFICATION	6.784668870638217E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999998587067884	WITHOUT_CLASSIFICATION	1.4129321160355342E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999858553768128	WITHOUT_CLASSIFICATION	1.4144623187091627E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999991396438466	WITHOUT_CLASSIFICATION	8.603561535433157E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999994594937355	WITHOUT_CLASSIFICATION	5.405062644588441E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999989227447232	WITHOUT_CLASSIFICATION	1.0772552767656534E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999999929749475	WITHOUT_CLASSIFICATION	7.0250525388742175E-9	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999907564968937	WITHOUT_CLASSIFICATION	9.243503106227864E-6	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999980883271002	WITHOUT_CLASSIFICATION	1.911672899711391E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999995105612132	WITHOUT_CLASSIFICATION	4.89438786822692E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999868149645647	WITHOUT_CLASSIFICATION	1.3185035435313343E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999998809638153	WITHOUT_CLASSIFICATION	1.1903618462976065E-7	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.99999988740352	WITHOUT_CLASSIFICATION	1.1259648013143497E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999366663149	WITHOUT_CLASSIFICATION	6.333368508661416E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999366663149	WITHOUT_CLASSIFICATION	6.333368508661416E-8	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999992462345477	WITHOUT_CLASSIFICATION	7.537654521738269E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999992462345477	WITHOUT_CLASSIFICATION	7.537654521738269E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999996465131228	WITHOUT_CLASSIFICATION	3.534868772311383E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999996465131228	WITHOUT_CLASSIFICATION	3.534868772311383E-7	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.999999568528325	WITHOUT_CLASSIFICATION	4.314716749995596E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999992002743111	WITHOUT_CLASSIFICATION	7.997256889625768E-7	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999988061100605	WITHOUT_CLASSIFICATION	1.1938899395412396E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999646483484	WITHOUT_CLASSIFICATION	3.535165156901252E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999985042189848	WITHOUT_CLASSIFICATION	1.495781015057669E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9998472186137026	WITHOUT_CLASSIFICATION	1.52781386297401E-4	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999997820187809	WITHOUT_CLASSIFICATION	2.1798121901928625E-7	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999904677941331	WITHOUT_CLASSIFICATION	9.532205866951602E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999999606601664	WITHOUT_CLASSIFICATION	3.933983353726061E-8	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999969780130568	WITHOUT_CLASSIFICATION	3.0219869432754752E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9997849310179403	WITHOUT_CLASSIFICATION	2.150689820598065E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999958782308271	WITHOUT_CLASSIFICATION	4.1217691729211065E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999995574759816	WITHOUT_CLASSIFICATION	4.425240183964706E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999601035418575	WITHOUT_CLASSIFICATION	3.989645814246698E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999993199407499	WITHOUT_CLASSIFICATION	6.80059250155599E-7	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999985645459087	WITHOUT_CLASSIFICATION	1.43545409115334E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999999120695979	WITHOUT_CLASSIFICATION	8.793040198518966E-8	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999939473102334	WITHOUT_CLASSIFICATION	6.052689766562343E-6	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999999869499825	WITHOUT_CLASSIFICATION	1.3050017502385865E-8	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999991407113809	WITHOUT_CLASSIFICATION	8.592886191309993E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999983299399634	WITHOUT_CLASSIFICATION	1.670060036638804E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9998006637570891	WITHOUT_CLASSIFICATION	1.9933624291099478E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999980983905669	WITHOUT_CLASSIFICATION	1.9016094330798425E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999996383276082	WITHOUT_CLASSIFICATION	3.616723918685382E-7	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999994290345762	WITHOUT_CLASSIFICATION	5.70965423792697E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999999789475632	WITHOUT_CLASSIFICATION	2.1052436805626204E-8	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999969743350166	WITHOUT_CLASSIFICATION	3.025664983349272E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.999999977687675	WITHOUT_CLASSIFICATION	2.2312324988019013E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.999999977687675	WITHOUT_CLASSIFICATION	2.2312324988019013E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999992803953895	WITHOUT_CLASSIFICATION	7.196046104783394E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999992803953895	WITHOUT_CLASSIFICATION	7.196046104783394E-7	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999537879862	WITHOUT_CLASSIFICATION	4.621201386475263E-8	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8507548784552085	WITHOUT_CLASSIFICATION	0.14924512154479144	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.999999619525737	WITHOUT_CLASSIFICATION	3.804742630233234E-7	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999995213289391	WITHOUT_CLASSIFICATION	4.78671060838066E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999999237582981	WITHOUT_CLASSIFICATION	7.624170189290469E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.999999977687675	WITHOUT_CLASSIFICATION	2.2312324988019013E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.999999977687675	WITHOUT_CLASSIFICATION	2.2312324988019013E-8	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.999999977687675	WITHOUT_CLASSIFICATION	2.2312324988019013E-8	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999992803953895	WITHOUT_CLASSIFICATION	7.196046104783394E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999992803953895	WITHOUT_CLASSIFICATION	7.196046104783394E-7	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999475521717	WITHOUT_CLASSIFICATION	5.2447828233003615E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999995105581506	WITHOUT_CLASSIFICATION	4.894418493879982E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999956620009777	WITHOUT_CLASSIFICATION	4.3379990222473225E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999985032616788	WITHOUT_CLASSIFICATION	1.4967383211115066E-6	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999262971944364	WITHOUT_CLASSIFICATION	7.37028055635689E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999980668301472	WITHOUT_CLASSIFICATION	1.933169852837421E-6	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999976466802452	WITHOUT_CLASSIFICATION	2.3533197548178474E-6	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999994143370672	WITHOUT_CLASSIFICATION	5.856629327575499E-7	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999979746959274	WITHOUT_CLASSIFICATION	2.025304072632747E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.999999798201686	WITHOUT_CLASSIFICATION	2.0179831393004997E-7	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999997726256014	WITHOUT_CLASSIFICATION	2.2737439863337621E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999987598028508	WITHOUT_CLASSIFICATION	1.2401971491639828E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999929093156049	WITHOUT_CLASSIFICATION	7.090684395110057E-6	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999852299528665	WITHOUT_CLASSIFICATION	1.4770047133434626E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999108535948151	WITHOUT_CLASSIFICATION	8.914640518488254E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999984764782883	WITHOUT_CLASSIFICATION	1.5235217116898954E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999953237344932	WITHOUT_CLASSIFICATION	4.676265506761787E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999960180702437	WITHOUT_CLASSIFICATION	3.981929756357981E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999960180702437	WITHOUT_CLASSIFICATION	3.981929756357981E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999960180702437	WITHOUT_CLASSIFICATION	3.981929756357981E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9996952093300489	WITHOUT_CLASSIFICATION	3.047906699510577E-4	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9996951878703205	WITHOUT_CLASSIFICATION	3.0481212967948157E-4	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999982335288905	WITHOUT_CLASSIFICATION	1.7664711094762922E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999990816405278	WITHOUT_CLASSIFICATION	9.183594723363614E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999994369983392	WITHOUT_CLASSIFICATION	5.63001660844953E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999911474264126	WITHOUT_CLASSIFICATION	8.852573587436477E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999935569324506	WITHOUT_CLASSIFICATION	6.443067549382098E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999996779431716	WITHOUT_CLASSIFICATION	3.2205682837197467E-7	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999995341748859	WITHOUT_CLASSIFICATION	4.6582511404964195E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999555505285546	WITHOUT_CLASSIFICATION	4.4449471445557656E-5	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999590048963305	WITHOUT_CLASSIFICATION	4.0995103669408605E-5	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.999998322188472	WITHOUT_CLASSIFICATION	1.6778115280010395E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999929892623144	WITHOUT_CLASSIFICATION	7.0107376856273565E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999632596228	WITHOUT_CLASSIFICATION	3.674037707430698E-8	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999282960575	WITHOUT_CLASSIFICATION	7.170394248408217E-8	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999911339612501	WITHOUT_CLASSIFICATION	8.866038749956143E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999957167035727	WITHOUT_CLASSIFICATION	4.283296427379421E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999998198540879	WITHOUT_CLASSIFICATION	1.801459121106759E-7	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999994608003898	WITHOUT_CLASSIFICATION	5.391996101550315E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999823102013814	WITHOUT_CLASSIFICATION	1.768979861868816E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9999962746011678	WITHOUT_CLASSIFICATION	3.725398832187456E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999964632427066	WITHOUT_CLASSIFICATION	3.536757293422548E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9994917431209157	WITHOUT_CLASSIFICATION	5.082568790843751E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999979384777962	WITHOUT_CLASSIFICATION	2.0615222038639302E-6	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999948907976488	WITHOUT_CLASSIFICATION	5.109202351173373E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999960041225321	WITHOUT_CLASSIFICATION	3.9958774678705295E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999972218636621	WITHOUT_CLASSIFICATION	2.77813633783046E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999971572325284	WITHOUT_CLASSIFICATION	2.8427674716512476E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999482211510774	WITHOUT_CLASSIFICATION	5.1778848922574026E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999166236449927	WITHOUT_CLASSIFICATION	8.337635500727347E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999168297709453	WITHOUT_CLASSIFICATION	8.31702290547846E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999216150520684	WITHOUT_CLASSIFICATION	7.838494793155759E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9998775230542845	WITHOUT_CLASSIFICATION	1.2247694571559608E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9998781865326348	WITHOUT_CLASSIFICATION	1.2181346736522376E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9998246293007477	WITHOUT_CLASSIFICATION	1.753706992523049E-4	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.999907451176973	WITHOUT_CLASSIFICATION	9.254882302695165E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999938201610695	WITHOUT_CLASSIFICATION	6.179838930487149E-6	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999983108495316	WITHOUT_CLASSIFICATION	1.6891504683767517E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999991989306	WITHOUT_CLASSIFICATION	8.010695019310581E-10	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9999322713707587	WITHOUT_CLASSIFICATION	6.772862924134512E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999992815706583	WITHOUT_CLASSIFICATION	7.184293417233765E-7	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.999994326588675	WITHOUT_CLASSIFICATION	5.673411325009303E-6	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999879387722621	WITHOUT_CLASSIFICATION	1.20612277378657E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999984089919512	WITHOUT_CLASSIFICATION	1.5910080487143985E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999996016858511	WITHOUT_CLASSIFICATION	3.9831414888036347E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999835572811652	WITHOUT_CLASSIFICATION	1.6442718834805593E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999968666098689	WITHOUT_CLASSIFICATION	3.1333901310489744E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999968666098689	WITHOUT_CLASSIFICATION	3.1333901310489744E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.999996878004711	WITHOUT_CLASSIFICATION	3.1219952889794735E-6	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999997779261418	WITHOUT_CLASSIFICATION	2.2207385815809962E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999859544621039	WITHOUT_CLASSIFICATION	1.4045537896080308E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9997345147640588	WITHOUT_CLASSIFICATION	2.6548523594120433E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999997630859867	WITHOUT_CLASSIFICATION	2.3691401331792553E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999998976370975	WITHOUT_CLASSIFICATION	1.023629025685222E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999995332194769	WITHOUT_CLASSIFICATION	4.6678052302037706E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999788988625	WITHOUT_CLASSIFICATION	2.1101137560794917E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999996921339716	WITHOUT_CLASSIFICATION	3.0786602838927216E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999982366903993	WITHOUT_CLASSIFICATION	1.7633096007175557E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999990103025718	WITHOUT_CLASSIFICATION	9.896974282265856E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999990103025718	WITHOUT_CLASSIFICATION	9.896974282265856E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999990103025718	WITHOUT_CLASSIFICATION	9.896974282265856E-7	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999990103025718	WITHOUT_CLASSIFICATION	9.896974282265856E-7	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.999995524962798	WITHOUT_CLASSIFICATION	4.475037202077575E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999996584095523	WITHOUT_CLASSIFICATION	3.41590447769737E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999998345241433	WITHOUT_CLASSIFICATION	1.6547585665636747E-7	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999991543361032	WITHOUT_CLASSIFICATION	8.456638968498428E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.999259590944727	WITHOUT_CLASSIFICATION	7.404090552729445E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999997429682655	WITHOUT_CLASSIFICATION	2.570317345241335E-7	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999992035324069	WITHOUT_CLASSIFICATION	7.964675930374976E-7	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999932471633701	WITHOUT_CLASSIFICATION	6.752836629873249E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999932471633701	WITHOUT_CLASSIFICATION	6.752836629873249E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999981116661514	WITHOUT_CLASSIFICATION	1.8883338485736683E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999994782688078	WITHOUT_CLASSIFICATION	5.217311923314063E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999988529992746	WITHOUT_CLASSIFICATION	1.1470007254032114E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998525174711952	WITHOUT_CLASSIFICATION	1.4748252880476085E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998525174711952	WITHOUT_CLASSIFICATION	1.4748252880476085E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999810679633828	WITHOUT_CLASSIFICATION	1.8932036617230967E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998370935541	WITHOUT_CLASSIFICATION	1.6290644585817192E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998370935541	WITHOUT_CLASSIFICATION	1.6290644585817192E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9999865346854402	WITHOUT_CLASSIFICATION	1.3465314559722988E-5	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999843723258	WITHOUT_CLASSIFICATION	1.562767420093127E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999999230996671	WITHOUT_CLASSIFICATION	7.690033289663952E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9996460834310638	WITHOUT_CLASSIFICATION	3.539165689362457E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9999463213172195	WITHOUT_CLASSIFICATION	5.367868278053528E-5	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999997758561022	WITHOUT_CLASSIFICATION	2.241438978052785E-7	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999110612976372	WITHOUT_CLASSIFICATION	8.893870236280062E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999982762124061	WITHOUT_CLASSIFICATION	1.7237875939141562E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.999999985624152	WITHOUT_CLASSIFICATION	1.4375848049804509E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999543251375222	WITHOUT_CLASSIFICATION	4.567486247784978E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999886679250345	WITHOUT_CLASSIFICATION	1.1332074965494208E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999958007861015	WITHOUT_CLASSIFICATION	4.199213898509397E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.999908647633482	WITHOUT_CLASSIFICATION	9.13523665179526E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999440426067323	WITHOUT_CLASSIFICATION	5.595739326760984E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999966007745015	WITHOUT_CLASSIFICATION	3.3992254985822305E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999638516898745	WITHOUT_CLASSIFICATION	3.614831012563319E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999986413662926	WITHOUT_CLASSIFICATION	1.3586337073972252E-6	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999987245732797	WITHOUT_CLASSIFICATION	1.2754267204203416E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999995009553938	WITHOUT_CLASSIFICATION	4.990446061226094E-7	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9993682562532498	WITHOUT_CLASSIFICATION	6.317437467502119E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999959326615858	WITHOUT_CLASSIFICATION	4.067338414182587E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999979524456302	WITHOUT_CLASSIFICATION	2.0475543697524952E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999973525778413	WITHOUT_CLASSIFICATION	2.6474221588370485E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9998852245530628	WITHOUT_CLASSIFICATION	1.1477544693717195E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999782075533148	WITHOUT_CLASSIFICATION	2.179244668517901E-5	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9991724224211371	WITHOUT_CLASSIFICATION	8.27577578862828E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999979759179399	WITHOUT_CLASSIFICATION	2.024082060046776E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9998810918137975	WITHOUT_CLASSIFICATION	1.1890818620255582E-4	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999996112949794	WITHOUT_CLASSIFICATION	3.8870502063306187E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999966202563207	WITHOUT_CLASSIFICATION	3.37974367923456E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999755672542585	WITHOUT_CLASSIFICATION	2.4432745741451385E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999992610091083	WITHOUT_CLASSIFICATION	7.389908917546051E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.7304030837684929	DEFECT	0.26959691623150706	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999907723587262	WITHOUT_CLASSIFICATION	9.227641273836516E-6	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.999999994113867	WITHOUT_CLASSIFICATION	5.886132927289649E-9	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998662235736046	WITHOUT_CLASSIFICATION	1.3377642639549378E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999854403204067	WITHOUT_CLASSIFICATION	1.4559679593311292E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999998519125948	WITHOUT_CLASSIFICATION	1.4808740514090444E-7	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999998970707168	WITHOUT_CLASSIFICATION	1.0292928322988858E-7	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9998662235736046	WITHOUT_CLASSIFICATION	1.3377642639549378E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999854403204067	WITHOUT_CLASSIFICATION	1.4559679593311292E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999950590444578	WITHOUT_CLASSIFICATION	4.940955542188907E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999933537568261	WITHOUT_CLASSIFICATION	6.646243174017734E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999933537568261	WITHOUT_CLASSIFICATION	6.646243174017734E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999995490772858	WITHOUT_CLASSIFICATION	4.509227141864095E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999985662847496	WITHOUT_CLASSIFICATION	1.433715250437691E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999913126484223	WITHOUT_CLASSIFICATION	8.687351577604852E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999956335393141	WITHOUT_CLASSIFICATION	4.366460685971207E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999173495625118	WITHOUT_CLASSIFICATION	8.26504374882648E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.999060604407811	WITHOUT_CLASSIFICATION	9.393955921890063E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.999999576969645	WITHOUT_CLASSIFICATION	4.2303035487226893E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999176258227	WITHOUT_CLASSIFICATION	8.237417718878987E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999985294072518	WITHOUT_CLASSIFICATION	1.470592748211852E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999915463033204	WITHOUT_CLASSIFICATION	8.453696679472721E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999974970467871	WITHOUT_CLASSIFICATION	2.502953212978684E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999997049784698	WITHOUT_CLASSIFICATION	2.950215302113069E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999972787120508	WITHOUT_CLASSIFICATION	2.721287949121186E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999995496183938	WITHOUT_CLASSIFICATION	4.5038160627326166E-7	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999995496183938	WITHOUT_CLASSIFICATION	4.5038160627326166E-7	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999797448867391	WITHOUT_CLASSIFICATION	2.025511326090258E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999797448867391	WITHOUT_CLASSIFICATION	2.025511326090258E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999997234756234	WITHOUT_CLASSIFICATION	2.7652437662787443E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999988925273151	WITHOUT_CLASSIFICATION	1.1074726848825027E-6	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999976165855088	WITHOUT_CLASSIFICATION	2.3834144912175702E-6	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999977312542481	WITHOUT_CLASSIFICATION	2.268745751901201E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.999999584621233	WITHOUT_CLASSIFICATION	4.1537876700918425E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999994613529413	WITHOUT_CLASSIFICATION	5.386470587177085E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999913126484223	WITHOUT_CLASSIFICATION	8.687351577604852E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999956335393141	WITHOUT_CLASSIFICATION	4.366460685971207E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999985294072518	WITHOUT_CLASSIFICATION	1.470592748211852E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999915463033204	WITHOUT_CLASSIFICATION	8.453696679472721E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.999999790109403	WITHOUT_CLASSIFICATION	2.0989059702083225E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999990235600134	WITHOUT_CLASSIFICATION	9.764399866566929E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999923914233816	WITHOUT_CLASSIFICATION	7.608576618458732E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999991091013957	WITHOUT_CLASSIFICATION	8.908986042901354E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999999076132826	WITHOUT_CLASSIFICATION	9.238671733204955E-8	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999909905465558	WITHOUT_CLASSIFICATION	9.009453444104721E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.999943556414258	WITHOUT_CLASSIFICATION	5.644358574186836E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999982859735302	WITHOUT_CLASSIFICATION	1.7140264697960028E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999922651563521	WITHOUT_CLASSIFICATION	7.734843647828288E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999993950734525	WITHOUT_CLASSIFICATION	6.049265474613518E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999999794319017	WITHOUT_CLASSIFICATION	2.056809827958157E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999998887568258	WITHOUT_CLASSIFICATION	1.1124317414001774E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999988645117771	WITHOUT_CLASSIFICATION	1.1354882228683054E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999743019737187	WITHOUT_CLASSIFICATION	2.5698026281290583E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999998888547355	WITHOUT_CLASSIFICATION	1.1114526455969107E-7	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999933822639852	WITHOUT_CLASSIFICATION	6.617736014822938E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999980645951044	WITHOUT_CLASSIFICATION	1.935404895584492E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999924091822263	WITHOUT_CLASSIFICATION	7.590817773721006E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999896677420909	WITHOUT_CLASSIFICATION	1.0332257909003131E-5	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998553357938	WITHOUT_CLASSIFICATION	1.4466420622482992E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998143385791	WITHOUT_CLASSIFICATION	1.8566142098051954E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999998143385791	WITHOUT_CLASSIFICATION	1.8566142098051954E-7	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999752241715388	WITHOUT_CLASSIFICATION	2.4775828461189186E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999258570634023	WITHOUT_CLASSIFICATION	7.414293659769181E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.999856171169832	WITHOUT_CLASSIFICATION	1.4382883016796666E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999998487772083	WITHOUT_CLASSIFICATION	1.5122279176550824E-7	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999998487772083	WITHOUT_CLASSIFICATION	1.5122279176550824E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999923914233816	WITHOUT_CLASSIFICATION	7.608576618458732E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999978306022479	WITHOUT_CLASSIFICATION	2.1693977522332032E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999998682974692	WITHOUT_CLASSIFICATION	1.317025307579488E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999267785551	WITHOUT_CLASSIFICATION	7.3221444866459E-8	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999998404728354	WITHOUT_CLASSIFICATION	1.595271646349707E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999997239349325	WITHOUT_CLASSIFICATION	2.7606506739941236E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999996018081564	WITHOUT_CLASSIFICATION	3.981918435909994E-7	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.999999879346847	WITHOUT_CLASSIFICATION	1.206531529839222E-7	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999990278234554	WITHOUT_CLASSIFICATION	9.721765446236763E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999997752360763	WITHOUT_CLASSIFICATION	2.2476392379094396E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999749494876451	WITHOUT_CLASSIFICATION	2.505051235487419E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999999578012775	WITHOUT_CLASSIFICATION	4.2198722560558216E-8	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9999998614642434	WITHOUT_CLASSIFICATION	1.3853575654981904E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999984559997034	WITHOUT_CLASSIFICATION	1.5440002965587645E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999999509567246	WITHOUT_CLASSIFICATION	4.904327540246138E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999769475293433	WITHOUT_CLASSIFICATION	2.3052470656686522E-5	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999995675314957	WITHOUT_CLASSIFICATION	4.324685043495521E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999854909340281	WITHOUT_CLASSIFICATION	1.450906597179011E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999758422312	WITHOUT_CLASSIFICATION	2.415776873788289E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999960283	WITHOUT_CLASSIFICATION	3.971777338217861E-12	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999994629748022	WITHOUT_CLASSIFICATION	5.370251977747936E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999996568416517	WITHOUT_CLASSIFICATION	3.4315834828207055E-7	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999994334929866	WITHOUT_CLASSIFICATION	5.665070134428651E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999950034538	WITHOUT_CLASSIFICATION	4.996546144872417E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999970220665724	WITHOUT_CLASSIFICATION	2.9779334275689746E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999999202960947	WITHOUT_CLASSIFICATION	7.97039053106864E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999963422473538	WITHOUT_CLASSIFICATION	3.6577526463124106E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.999999999706357	WITHOUT_CLASSIFICATION	2.9364290905616605E-10	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9999999110391117	WITHOUT_CLASSIFICATION	8.896088834187519E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.999994577680766	WITHOUT_CLASSIFICATION	5.422319233948546E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999870074304	WITHOUT_CLASSIFICATION	1.2992569595168008E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.999999870074304	WITHOUT_CLASSIFICATION	1.2992569595168008E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999096595487	WITHOUT_CLASSIFICATION	9.034045130357451E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999096595487	WITHOUT_CLASSIFICATION	9.034045130357451E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999997651568752	WITHOUT_CLASSIFICATION	2.3484312484053486E-7	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999998461417544	WITHOUT_CLASSIFICATION	1.538582456537319E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995829934165	WITHOUT_CLASSIFICATION	4.1700658342097584E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999996750428373	WITHOUT_CLASSIFICATION	3.249571626680256E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999950034538	WITHOUT_CLASSIFICATION	4.996546144872417E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999950034538	WITHOUT_CLASSIFICATION	4.996546144872417E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999950034538	WITHOUT_CLASSIFICATION	4.996546144872417E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999970220665724	WITHOUT_CLASSIFICATION	2.9779334275689746E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995829934165	WITHOUT_CLASSIFICATION	4.1700658342097584E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999995829934165	WITHOUT_CLASSIFICATION	4.1700658342097584E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999997394492061	WITHOUT_CLASSIFICATION	2.6055079388280077E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999914319134	WITHOUT_CLASSIFICATION	8.56808651713372E-9	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999918138555	WITHOUT_CLASSIFICATION	8.186144586014629E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.9908860033537622	DEFECT	0.009113996646237814	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999921325663819	WITHOUT_CLASSIFICATION	7.867433618071267E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999989039589353	WITHOUT_CLASSIFICATION	1.0960410647553523E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999989039589353	WITHOUT_CLASSIFICATION	1.0960410647553523E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999973097606216	WITHOUT_CLASSIFICATION	2.690239378475221E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999989873072459	WITHOUT_CLASSIFICATION	1.0126927541497512E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999989873072459	WITHOUT_CLASSIFICATION	1.0126927541497512E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999989873072459	WITHOUT_CLASSIFICATION	1.0126927541497512E-6	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999998599676584	WITHOUT_CLASSIFICATION	1.4003234161357983E-7	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.999999110893869	WITHOUT_CLASSIFICATION	8.891061310987527E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999970220665724	WITHOUT_CLASSIFICATION	2.9779334275689746E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999998629823911	WITHOUT_CLASSIFICATION	1.3701760887372785E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999989873072459	WITHOUT_CLASSIFICATION	1.0126927541497512E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999973097606216	WITHOUT_CLASSIFICATION	2.690239378475221E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999996019372195	WITHOUT_CLASSIFICATION	3.980627804729776E-7	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999995401286438	WITHOUT_CLASSIFICATION	4.5987135618584495E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999985240051638	WITHOUT_CLASSIFICATION	1.4759948363005187E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999927457744453	WITHOUT_CLASSIFICATION	7.254225554751155E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999992091980604	WITHOUT_CLASSIFICATION	7.908019395493884E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999993733172845	WITHOUT_CLASSIFICATION	6.266827155828206E-7	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999801117667892	WITHOUT_CLASSIFICATION	1.9888233210644643E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999944443526437	WITHOUT_CLASSIFICATION	5.5556473561967065E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999966626522953	WITHOUT_CLASSIFICATION	3.3373477047395077E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.999999824426577	WITHOUT_CLASSIFICATION	1.755734229852548E-7	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999059924449	WITHOUT_CLASSIFICATION	9.400755518163805E-8	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999783931813	WITHOUT_CLASSIFICATION	2.1606818752562957E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999988614108367	WITHOUT_CLASSIFICATION	1.1385891633186849E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999997560251002	WITHOUT_CLASSIFICATION	2.4397489978539173E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999995750058263	WITHOUT_CLASSIFICATION	4.249941737520345E-7	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999999279120989	WITHOUT_CLASSIFICATION	7.208790116596406E-8	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999998898608489	WITHOUT_CLASSIFICATION	1.1013915124395393E-7	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9942234403160218	WITHOUT_CLASSIFICATION	0.0057765596839781455	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999698426538316	WITHOUT_CLASSIFICATION	3.015734616841481E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.999999475978117	WITHOUT_CLASSIFICATION	5.240218829186365E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999940979803346	WITHOUT_CLASSIFICATION	5.902019665432562E-6	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999971555213	WITHOUT_CLASSIFICATION	2.8444786381880446E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999948177843	WITHOUT_CLASSIFICATION	5.18221569383929E-9	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999995554354092	WITHOUT_CLASSIFICATION	4.4456459073899313E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999900238429051	WITHOUT_CLASSIFICATION	9.97615709478753E-6	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999999233765583	WITHOUT_CLASSIFICATION	7.662344167202244E-8	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999977232630358	WITHOUT_CLASSIFICATION	2.2767369642123228E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999990300444137	WITHOUT_CLASSIFICATION	9.699555863572324E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999995683945513	WITHOUT_CLASSIFICATION	4.3160544872092117E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999996448369384	WITHOUT_CLASSIFICATION	3.551630616463644E-7	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999150825076	WITHOUT_CLASSIFICATION	8.491749240594536E-8	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999996763671989	WITHOUT_CLASSIFICATION	3.2363280110978494E-7	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999991812586158	WITHOUT_CLASSIFICATION	8.187413842000921E-7	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999985554406242	WITHOUT_CLASSIFICATION	1.4445593758731404E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999996019372195	WITHOUT_CLASSIFICATION	3.980627804729776E-7	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999999106347437	WITHOUT_CLASSIFICATION	8.9365256275312E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999993453601332	WITHOUT_CLASSIFICATION	6.546398667604501E-7	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9998684848883002	WITHOUT_CLASSIFICATION	1.315151116998157E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999987594371702	WITHOUT_CLASSIFICATION	1.2405628298365649E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999987594371702	WITHOUT_CLASSIFICATION	1.2405628298365649E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999950701592889	WITHOUT_CLASSIFICATION	4.929840711092924E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999950701592889	WITHOUT_CLASSIFICATION	4.929840711092924E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999779549999718	WITHOUT_CLASSIFICATION	2.2045000028236477E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999851229308686	WITHOUT_CLASSIFICATION	1.487706913143817E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999237724498	WITHOUT_CLASSIFICATION	7.6227550246643E-8	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999999436730174	WITHOUT_CLASSIFICATION	5.632698269115891E-8	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999994574743761	WITHOUT_CLASSIFICATION	5.425256239930294E-7	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999999863701705	WITHOUT_CLASSIFICATION	1.362982949961586E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999830118468962	WITHOUT_CLASSIFICATION	1.6988153103888085E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999997867214683	WITHOUT_CLASSIFICATION	2.1327853165815032E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999993410337296	WITHOUT_CLASSIFICATION	6.589662703447875E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999997604813774	WITHOUT_CLASSIFICATION	2.3951862256410276E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999989611909296	WITHOUT_CLASSIFICATION	1.0388090704417503E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999754705374	WITHOUT_CLASSIFICATION	2.4529462577637985E-8	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999754705374	WITHOUT_CLASSIFICATION	2.4529462577637985E-8	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999994143711892	WITHOUT_CLASSIFICATION	5.856288106856424E-7	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999994827291062	WITHOUT_CLASSIFICATION	5.172708937953533E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999991899215772	WITHOUT_CLASSIFICATION	8.100784227974031E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999991899215772	WITHOUT_CLASSIFICATION	8.100784227974031E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999812045023664	WITHOUT_CLASSIFICATION	1.879549763354131E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999962060844872	WITHOUT_CLASSIFICATION	3.7939155127521146E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.999850489785725	WITHOUT_CLASSIFICATION	1.4951021427513642E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999991760699317	WITHOUT_CLASSIFICATION	8.239300682862052E-7	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999998753895366	WITHOUT_CLASSIFICATION	1.2461046332464794E-7	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999993790690163	WITHOUT_CLASSIFICATION	6.209309837977077E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999992635361568	WITHOUT_CLASSIFICATION	7.364638433554066E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999152943907	WITHOUT_CLASSIFICATION	8.470560922490265E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9996822320629939	WITHOUT_CLASSIFICATION	3.177679370060403E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999997345677211	WITHOUT_CLASSIFICATION	2.654322789139958E-7	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999995726576151	WITHOUT_CLASSIFICATION	4.27342384869982E-7	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999993991995786	WITHOUT_CLASSIFICATION	6.008004215077983E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999998750621097	WITHOUT_CLASSIFICATION	1.249378901801233E-7	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999992394931154	WITHOUT_CLASSIFICATION	7.605068846365007E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999987707414575	WITHOUT_CLASSIFICATION	1.229258542507189E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999988182261128	WITHOUT_CLASSIFICATION	1.1817738871192841E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999879860372859	WITHOUT_CLASSIFICATION	1.2013962714130154E-5	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999996904990444	WITHOUT_CLASSIFICATION	3.095009556059578E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999843150110266	WITHOUT_CLASSIFICATION	1.568498897342549E-5	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999929654466365	WITHOUT_CLASSIFICATION	7.034553363448718E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.5831963253534928	DEFECT	0.41680367464650725	WITHOUT_CLASSIFICATION
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999998407247241	WITHOUT_CLASSIFICATION	1.592752758442973E-7	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999996193875101	WITHOUT_CLASSIFICATION	3.806124899566656E-7	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999992252075587	WITHOUT_CLASSIFICATION	7.747924413351989E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999789851085318	WITHOUT_CLASSIFICATION	2.1014891468125152E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9993471092799087	WITHOUT_CLASSIFICATION	6.528907200912984E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999866633830544	WITHOUT_CLASSIFICATION	1.3336616945495028E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999963014571864	WITHOUT_CLASSIFICATION	3.6985428135884105E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999814505142545	WITHOUT_CLASSIFICATION	1.8549485745533323E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999985008486941	WITHOUT_CLASSIFICATION	1.4991513058347457E-6	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999986309035263	WITHOUT_CLASSIFICATION	1.369096473791527E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.999999766207193	WITHOUT_CLASSIFICATION	2.3379280687414003E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999983575516671	WITHOUT_CLASSIFICATION	1.642448332871798E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999891457584449	WITHOUT_CLASSIFICATION	1.0854241555091557E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999891457584449	WITHOUT_CLASSIFICATION	1.0854241555091557E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999996123099573	WITHOUT_CLASSIFICATION	3.8769004276803076E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999957385943918	WITHOUT_CLASSIFICATION	4.261405608216673E-6	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999997822373068	WITHOUT_CLASSIFICATION	2.1776269329803827E-7	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.999991453088183	WITHOUT_CLASSIFICATION	8.546911816977006E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999187301614447	WITHOUT_CLASSIFICATION	8.1269838555292E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999298674048	WITHOUT_CLASSIFICATION	7.013259523564473E-8	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.999724514872145	WITHOUT_CLASSIFICATION	2.754851278550671E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9982892881917335	WITHOUT_CLASSIFICATION	0.0017107118082665652	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9995368574845853	WITHOUT_CLASSIFICATION	4.631425154147017E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999528102761426	WITHOUT_CLASSIFICATION	4.7189723857337573E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999756725994703	WITHOUT_CLASSIFICATION	2.432740052973421E-5	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9989670401204094	WITHOUT_CLASSIFICATION	0.0010329598795906013	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.999999503830355	WITHOUT_CLASSIFICATION	4.96169645089001E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999498560222999	WITHOUT_CLASSIFICATION	5.0143977700047025E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999809957989	WITHOUT_CLASSIFICATION	1.9004201057029945E-8	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999998704548444	WITHOUT_CLASSIFICATION	1.2954515559974127E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.999999683257124	WITHOUT_CLASSIFICATION	3.167428760077601E-7	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999969585035406	WITHOUT_CLASSIFICATION	3.041496459401856E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999995539868693	WITHOUT_CLASSIFICATION	4.4601313066205316E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999990271281824	WITHOUT_CLASSIFICATION	9.728718175596073E-7	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999999841794197	WITHOUT_CLASSIFICATION	1.5820580266465043E-8	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999998862807492	WITHOUT_CLASSIFICATION	1.1371925074048037E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999998918249844	WITHOUT_CLASSIFICATION	1.0817501564202093E-7	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999952119725241	WITHOUT_CLASSIFICATION	4.788027475974808E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.999999017236633	WITHOUT_CLASSIFICATION	9.82763367032924E-7	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.999894353585932	WITHOUT_CLASSIFICATION	1.056464140679592E-4	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999992338619964	WITHOUT_CLASSIFICATION	7.661380035506555E-7	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999987690515547	WITHOUT_CLASSIFICATION	1.2309484452107463E-6	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9990769112257865	WITHOUT_CLASSIFICATION	9.230887742136064E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9997483350602585	WITHOUT_CLASSIFICATION	2.516649397414763E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999997658397325	WITHOUT_CLASSIFICATION	2.3416026746856866E-7	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.999999982129711	WITHOUT_CLASSIFICATION	1.7870289026433582E-8	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999996734556994	WITHOUT_CLASSIFICATION	3.2654430068044766E-7	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999929801765458	WITHOUT_CLASSIFICATION	7.01982345419425E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999971922065112	WITHOUT_CLASSIFICATION	2.8077934888167982E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999918172118807	WITHOUT_CLASSIFICATION	8.182788119268547E-6	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999918390282371	WITHOUT_CLASSIFICATION	8.160971762883638E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999987330439855	WITHOUT_CLASSIFICATION	1.266956014520977E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999977349214233	WITHOUT_CLASSIFICATION	2.2650785766936576E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999704677264	WITHOUT_CLASSIFICATION	2.953227371623803E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999998489290762	WITHOUT_CLASSIFICATION	1.5107092386455155E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999981062362745	WITHOUT_CLASSIFICATION	1.8937637255283728E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999981062362745	WITHOUT_CLASSIFICATION	1.8937637255283728E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999977803853753	WITHOUT_CLASSIFICATION	2.2196146247273675E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999600482945	WITHOUT_CLASSIFICATION	3.995170562776706E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999983855546266	WITHOUT_CLASSIFICATION	1.6144453734163788E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999947922103186	WITHOUT_CLASSIFICATION	5.207789681409813E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999994853448945	WITHOUT_CLASSIFICATION	5.146551055735583E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999994214949081	WITHOUT_CLASSIFICATION	5.785050919945089E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9795736458018385	WITHOUT_CLASSIFICATION	0.020426354198161543	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999997434029739	WITHOUT_CLASSIFICATION	2.5659702605220885E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.999999748966352	WITHOUT_CLASSIFICATION	2.5103364799910844E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999951210033052	WITHOUT_CLASSIFICATION	4.87899669475244E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999990399838905	WITHOUT_CLASSIFICATION	9.600161094968282E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999011913734532	WITHOUT_CLASSIFICATION	9.880862654679167E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999485260701	WITHOUT_CLASSIFICATION	5.1473929872658204E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999995765575757	WITHOUT_CLASSIFICATION	4.23442424433122E-7	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.985513813427833	WITHOUT_CLASSIFICATION	0.014486186572167067	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999833811805977	WITHOUT_CLASSIFICATION	1.6618819402311393E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999981573869974	WITHOUT_CLASSIFICATION	1.8426130026164787E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999987882883	WITHOUT_CLASSIFICATION	1.211711774391262E-9	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.7888130661603564	DEFECT	0.21118693383964351	WITHOUT_CLASSIFICATION
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.999999685989101	WITHOUT_CLASSIFICATION	3.1401089887976264E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999961152333228	WITHOUT_CLASSIFICATION	3.884766677250665E-6	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999993546839	WITHOUT_CLASSIFICATION	6.453160950285047E-10	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.99999994793639	WITHOUT_CLASSIFICATION	5.206360993801575E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9989634651586181	WITHOUT_CLASSIFICATION	0.0010365348413818938	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999986233881075	WITHOUT_CLASSIFICATION	1.3766118924860718E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999989387368863	WITHOUT_CLASSIFICATION	1.0612631137160298E-6	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999989738665779	WITHOUT_CLASSIFICATION	1.0261334221774226E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999630695465122	WITHOUT_CLASSIFICATION	3.693045348776858E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999978089088466	WITHOUT_CLASSIFICATION	2.191091153410207E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999686193286788	WITHOUT_CLASSIFICATION	3.1380671321290896E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999997512558116	WITHOUT_CLASSIFICATION	2.487441883278704E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999978089088466	WITHOUT_CLASSIFICATION	2.191091153410207E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999995331467764	WITHOUT_CLASSIFICATION	4.668532235896534E-7	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999782075533148	WITHOUT_CLASSIFICATION	2.179244668517901E-5	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.7699807122327101	WITHOUT_CLASSIFICATION	0.2300192877672898	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.627461981418529	DEFECT	0.37253801858147095	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999994942744661	WITHOUT_CLASSIFICATION	5.057255339149544E-7	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999998546426581	WITHOUT_CLASSIFICATION	1.453573418907339E-7	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999351088319	WITHOUT_CLASSIFICATION	6.489116808989257E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9997670845092789	WITHOUT_CLASSIFICATION	2.3291549072113353E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999985662847496	WITHOUT_CLASSIFICATION	1.433715250437691E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999929654466365	WITHOUT_CLASSIFICATION	7.034553363448718E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999918138555	WITHOUT_CLASSIFICATION	8.186144586014629E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999884099432986	WITHOUT_CLASSIFICATION	1.1590056701268249E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999998565565589	WITHOUT_CLASSIFICATION	1.4344344106129642E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999994942729662	WITHOUT_CLASSIFICATION	5.057270337810247E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999716843118219	WITHOUT_CLASSIFICATION	2.8315688178059042E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999997394062554	WITHOUT_CLASSIFICATION	2.6059374458572E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9971637212853546	WITHOUT_CLASSIFICATION	0.0028362787146454928	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999998808118218	WITHOUT_CLASSIFICATION	1.191881782417832E-7	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999687525795876	WITHOUT_CLASSIFICATION	3.124742041237482E-5	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999910113973586	WITHOUT_CLASSIFICATION	8.9886026415059E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999998033355179	WITHOUT_CLASSIFICATION	1.9666448221963214E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.999996210616915	WITHOUT_CLASSIFICATION	3.7893830849916885E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.999999748642818	WITHOUT_CLASSIFICATION	2.513571820193868E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999985905512271	WITHOUT_CLASSIFICATION	1.409448772869707E-6	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999946904743018	WITHOUT_CLASSIFICATION	5.309525698202479E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999905427743875	WITHOUT_CLASSIFICATION	9.457225612528157E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999929453547336	WITHOUT_CLASSIFICATION	7.054645266465343E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999354859779511	WITHOUT_CLASSIFICATION	6.451402204880373E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999172236897	WITHOUT_CLASSIFICATION	8.277631026431729E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998319806503297	WITHOUT_CLASSIFICATION	1.68019349670122E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998319806503297	WITHOUT_CLASSIFICATION	1.68019349670122E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999985142260014	WITHOUT_CLASSIFICATION	1.4857739986449001E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999991502347829	WITHOUT_CLASSIFICATION	8.497652169773565E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999992425407765	WITHOUT_CLASSIFICATION	7.574592234338519E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999998220543888	WITHOUT_CLASSIFICATION	1.7794561126378362E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999998542268749	WITHOUT_CLASSIFICATION	1.4577312505357872E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999982271334572	WITHOUT_CLASSIFICATION	1.7728665427664451E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9953130099597488	WITHOUT_CLASSIFICATION	0.004686990040251173	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999993382170671	WITHOUT_CLASSIFICATION	6.617829329959792E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999037798367358	WITHOUT_CLASSIFICATION	9.622016326415088E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999977634450119	WITHOUT_CLASSIFICATION	2.2365549880128606E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999977634450119	WITHOUT_CLASSIFICATION	2.2365549880128606E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9977047084183676	WITHOUT_CLASSIFICATION	0.002295291581632521	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9994664782241505	WITHOUT_CLASSIFICATION	5.33521775849445E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999943078407532	WITHOUT_CLASSIFICATION	5.69215924688495E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9951554059352415	WITHOUT_CLASSIFICATION	0.004844594064758449	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999926634268343	WITHOUT_CLASSIFICATION	7.3365731656433005E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.999999829738435	WITHOUT_CLASSIFICATION	1.702615648988793E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999999191766643	WITHOUT_CLASSIFICATION	8.082333566686406E-8	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999933714709436	WITHOUT_CLASSIFICATION	6.628529056414441E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999766458970832	WITHOUT_CLASSIFICATION	2.335410291677023E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999997512558116	WITHOUT_CLASSIFICATION	2.487441883278704E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999991239509956	WITHOUT_CLASSIFICATION	8.76049004403399E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999897155388427	WITHOUT_CLASSIFICATION	1.028446115721236E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999989289827297	WITHOUT_CLASSIFICATION	1.0710172703133166E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.999999962375483	WITHOUT_CLASSIFICATION	3.762451685419218E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9993495109643133	WITHOUT_CLASSIFICATION	6.504890356866147E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999999921771888	WITHOUT_CLASSIFICATION	7.822811186827244E-9	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999987514568689	WITHOUT_CLASSIFICATION	1.2485431311208903E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999988911859117	WITHOUT_CLASSIFICATION	1.1088140883419901E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999988911859117	WITHOUT_CLASSIFICATION	1.1088140883419901E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999926656837127	WITHOUT_CLASSIFICATION	7.334316287295426E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999998932645858	WITHOUT_CLASSIFICATION	1.067354142890599E-7	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9994022346909627	WITHOUT_CLASSIFICATION	5.97765309037351E-4	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999947241691051	WITHOUT_CLASSIFICATION	5.275830894905131E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.999999789262611	WITHOUT_CLASSIFICATION	2.107373890179278E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9995017369967463	WITHOUT_CLASSIFICATION	4.982630032537169E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999998017369315	WITHOUT_CLASSIFICATION	1.9826306847235966E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999800777147	WITHOUT_CLASSIFICATION	1.9922285255620918E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999800777147	WITHOUT_CLASSIFICATION	1.9922285255620918E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999800777147	WITHOUT_CLASSIFICATION	1.9922285255620918E-8	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999800777147	WITHOUT_CLASSIFICATION	1.9922285255620918E-8	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999958328223526	WITHOUT_CLASSIFICATION	4.167177647400729E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999975261635232	WITHOUT_CLASSIFICATION	2.4738364767450173E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999834741773197	WITHOUT_CLASSIFICATION	1.652582268024251E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999999564407829	WITHOUT_CLASSIFICATION	4.355921710698744E-8	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999974864592349	WITHOUT_CLASSIFICATION	2.5135407650415386E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9995087353107106	WITHOUT_CLASSIFICATION	4.912646892893467E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999998233351562	WITHOUT_CLASSIFICATION	1.766648436699207E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999021249147	WITHOUT_CLASSIFICATION	9.787508525078335E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999990275083867	WITHOUT_CLASSIFICATION	9.724916133601476E-7	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9998021229588688	WITHOUT_CLASSIFICATION	1.9787704113116047E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998884784975	WITHOUT_CLASSIFICATION	1.1152150256084553E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999998884784975	WITHOUT_CLASSIFICATION	1.1152150256084553E-7	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999965864324365	WITHOUT_CLASSIFICATION	3.4135675635530236E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999997803926	WITHOUT_CLASSIFICATION	2.1960732775892365E-10	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999996668937375	WITHOUT_CLASSIFICATION	3.3310626250699844E-7	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998186575697979	WITHOUT_CLASSIFICATION	1.8134243020210427E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999987470564552	WITHOUT_CLASSIFICATION	1.2529435448145667E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999982895741978	WITHOUT_CLASSIFICATION	1.7104258022438843E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999981353370274	WITHOUT_CLASSIFICATION	1.8646629725886558E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999981353370274	WITHOUT_CLASSIFICATION	1.8646629725886558E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999929812322105	WITHOUT_CLASSIFICATION	7.0187677894538966E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.507717271181652	DEFECT	0.492282728818348	WITHOUT_CLASSIFICATION
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999988223680616	WITHOUT_CLASSIFICATION	1.1776319384130327E-6	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.999998662307375	WITHOUT_CLASSIFICATION	1.337692625050201E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999740739691436	WITHOUT_CLASSIFICATION	2.5926030856358283E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.99999990112343	WITHOUT_CLASSIFICATION	9.887657000557714E-8	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999995927475593	WITHOUT_CLASSIFICATION	4.072524407161149E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999843511644981	WITHOUT_CLASSIFICATION	1.564883550194959E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.999792896335459	WITHOUT_CLASSIFICATION	2.071036645411044E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.999997323136531	WITHOUT_CLASSIFICATION	2.6768634690183057E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999976837427499	WITHOUT_CLASSIFICATION	2.316257250219437E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.99999979020947	WITHOUT_CLASSIFICATION	2.097905298684223E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9999847768526002	WITHOUT_CLASSIFICATION	1.5223147399703213E-5	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.999983415609461	WITHOUT_CLASSIFICATION	1.6584390539020833E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999582064644	WITHOUT_CLASSIFICATION	4.179353572738996E-8	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999996666888888	WITHOUT_CLASSIFICATION	3.333111111131284E-7	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999991602322118	WITHOUT_CLASSIFICATION	8.397677881506669E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999396898622	WITHOUT_CLASSIFICATION	6.031013772367701E-8	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999987979247972	WITHOUT_CLASSIFICATION	1.2020752028772487E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999934300146975	WITHOUT_CLASSIFICATION	6.569985302422924E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999999348736879	WITHOUT_CLASSIFICATION	6.51263121785651E-8	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.999989127808251	WITHOUT_CLASSIFICATION	1.087219174898958E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999985914775767	WITHOUT_CLASSIFICATION	1.4085224233062067E-6	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991902989381128	WITHOUT_CLASSIFICATION	8.09701061887216E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999093044367922	WITHOUT_CLASSIFICATION	9.069556320781618E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999571000793123	WITHOUT_CLASSIFICATION	4.289992068766655E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9996329613194739	WITHOUT_CLASSIFICATION	3.670386805260288E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999996211317471	WITHOUT_CLASSIFICATION	3.7886825288075536E-7	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.99999999647636	WITHOUT_CLASSIFICATION	3.5236401579346304E-9	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999995760701091	WITHOUT_CLASSIFICATION	4.239298908793363E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999998021161431	WITHOUT_CLASSIFICATION	1.978838568894895E-7	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999266388019401	WITHOUT_CLASSIFICATION	7.336119805987921E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.999998340018949	WITHOUT_CLASSIFICATION	1.6599810509802738E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999984588430592	WITHOUT_CLASSIFICATION	1.5411569407975843E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999973139891306	WITHOUT_CLASSIFICATION	2.6860108694218543E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9996405409280588	WITHOUT_CLASSIFICATION	3.5945907194122356E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999952711132997	WITHOUT_CLASSIFICATION	4.728886700405946E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999901609557322	WITHOUT_CLASSIFICATION	9.839044267767718E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999971080802461	WITHOUT_CLASSIFICATION	2.8919197539364675E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999994891764218	WITHOUT_CLASSIFICATION	5.108235782124266E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999050421210177	WITHOUT_CLASSIFICATION	9.495787898228979E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999995660011272	WITHOUT_CLASSIFICATION	4.3399887276343083E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998387289240607	WITHOUT_CLASSIFICATION	1.6127107593946158E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999984915430918	WITHOUT_CLASSIFICATION	1.5084569081514906E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.999999971479124	WITHOUT_CLASSIFICATION	2.8520876048305314E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999849732007995	WITHOUT_CLASSIFICATION	1.5026799200546645E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999984659684333	WITHOUT_CLASSIFICATION	1.5340315666843143E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999984659684333	WITHOUT_CLASSIFICATION	1.5340315666843143E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999995904023754	WITHOUT_CLASSIFICATION	4.095976245988512E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999997741740839	WITHOUT_CLASSIFICATION	2.2582591600649374E-7	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.999996179854753	WITHOUT_CLASSIFICATION	3.820145247011115E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999716858652418	WITHOUT_CLASSIFICATION	2.8314134758290786E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999985851676105	WITHOUT_CLASSIFICATION	1.4148323894368503E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999985851676105	WITHOUT_CLASSIFICATION	1.4148323894368503E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999951284379666	WITHOUT_CLASSIFICATION	4.871562033352358E-6	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.999996949393537	WITHOUT_CLASSIFICATION	3.050606462959453E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999960903729188	WITHOUT_CLASSIFICATION	3.909627081108045E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999420871474671	WITHOUT_CLASSIFICATION	5.791285253283499E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999997091072822	WITHOUT_CLASSIFICATION	2.9089271785622536E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996131053263	WITHOUT_CLASSIFICATION	3.868946737447301E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999996131053263	WITHOUT_CLASSIFICATION	3.868946737447301E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999990569395791	WITHOUT_CLASSIFICATION	9.430604209605825E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999990569395791	WITHOUT_CLASSIFICATION	9.430604209605825E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999988042333714	WITHOUT_CLASSIFICATION	1.1957666285838417E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999976847849477	WITHOUT_CLASSIFICATION	2.3152150522279288E-6	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999915763847301	WITHOUT_CLASSIFICATION	8.42361526992656E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999863740015146	WITHOUT_CLASSIFICATION	1.3625998485361928E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999642485205495	WITHOUT_CLASSIFICATION	3.575147945046142E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999775311228339	WITHOUT_CLASSIFICATION	2.2468877166056592E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999951565334	WITHOUT_CLASSIFICATION	4.84346667113327E-9	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999930660577661	WITHOUT_CLASSIFICATION	6.93394223398612E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999180443745	WITHOUT_CLASSIFICATION	8.195562560801494E-8	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9998580242969655	WITHOUT_CLASSIFICATION	1.4197570303457855E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.7932029278019856	WITHOUT_CLASSIFICATION	0.20679707219801433	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999973163784837	WITHOUT_CLASSIFICATION	2.6836215162079836E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999964094117832	WITHOUT_CLASSIFICATION	3.590588216694839E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999993858183452	WITHOUT_CLASSIFICATION	6.141816546345354E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999999573116918	WITHOUT_CLASSIFICATION	4.268830820680611E-8	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.999999691359181	WITHOUT_CLASSIFICATION	3.0864081906869373E-7	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999999691954711	WITHOUT_CLASSIFICATION	3.080452896866221E-8	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999270620219	WITHOUT_CLASSIFICATION	7.293797813712923E-8	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999973998206568	WITHOUT_CLASSIFICATION	2.6001793431599196E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999995844259586	WITHOUT_CLASSIFICATION	4.1557404139897814E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999884099432986	WITHOUT_CLASSIFICATION	1.1590056701268249E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9998547393636582	WITHOUT_CLASSIFICATION	1.4526063634177818E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999998332480582	WITHOUT_CLASSIFICATION	1.6675194170969212E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999997625228463	WITHOUT_CLASSIFICATION	2.3747715368371896E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999995725963128	WITHOUT_CLASSIFICATION	4.2740368723689665E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.999998281360886	WITHOUT_CLASSIFICATION	1.718639114057569E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999970829024347	WITHOUT_CLASSIFICATION	2.9170975652211497E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999986796894913	WITHOUT_CLASSIFICATION	1.320310508650449E-6	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999973828761515	WITHOUT_CLASSIFICATION	2.6171238484841416E-6	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999949894706406	WITHOUT_CLASSIFICATION	5.010529359362157E-6	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999998947469368	WITHOUT_CLASSIFICATION	1.052530631976495E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.999999922331682	WITHOUT_CLASSIFICATION	7.766831797691087E-8	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999996544407596	WITHOUT_CLASSIFICATION	3.4555924045534747E-7	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999625818505	WITHOUT_CLASSIFICATION	3.741814939547269E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.999999966571082	WITHOUT_CLASSIFICATION	3.342891807739077E-8	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.999996937465361	WITHOUT_CLASSIFICATION	3.0625346390618007E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999407440193	WITHOUT_CLASSIFICATION	5.925598064193249E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.999999790053542	WITHOUT_CLASSIFICATION	2.0994645810534968E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999959352904277	WITHOUT_CLASSIFICATION	4.0647095723064114E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999654708853835	WITHOUT_CLASSIFICATION	3.4529114616610095E-5	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999969760476631	WITHOUT_CLASSIFICATION	3.0239523368319745E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999939705008383	WITHOUT_CLASSIFICATION	6.029499161699543E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999998404623813	WITHOUT_CLASSIFICATION	1.5953761860234262E-7	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999991371861104	WITHOUT_CLASSIFICATION	8.628138896628983E-7	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9989633779357158	WITHOUT_CLASSIFICATION	0.0010366220642841915	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999998634167924	WITHOUT_CLASSIFICATION	1.3658320764120866E-7	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999998347678828	WITHOUT_CLASSIFICATION	1.6523211725285914E-7	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999851042599	WITHOUT_CLASSIFICATION	1.4895740211161978E-8	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999986718035125	WITHOUT_CLASSIFICATION	1.328196487467369E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999846011926808	WITHOUT_CLASSIFICATION	1.539880731911384E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999786169277425	WITHOUT_CLASSIFICATION	2.138307225755426E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999991600249359	WITHOUT_CLASSIFICATION	8.399750641214065E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999991600249359	WITHOUT_CLASSIFICATION	8.399750641214065E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987361606457	WITHOUT_CLASSIFICATION	1.2638393543128011E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999987361606457	WITHOUT_CLASSIFICATION	1.2638393543128011E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999921158329915	WITHOUT_CLASSIFICATION	7.884167008540841E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999921158329915	WITHOUT_CLASSIFICATION	7.884167008540841E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999932469864689	WITHOUT_CLASSIFICATION	6.753013531068913E-6	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999932469864689	WITHOUT_CLASSIFICATION	6.753013531068913E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999998791269078	WITHOUT_CLASSIFICATION	1.208730921238242E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993682193408	WITHOUT_CLASSIFICATION	6.317806592824568E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993682193408	WITHOUT_CLASSIFICATION	6.317806592824568E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999993682193408	WITHOUT_CLASSIFICATION	6.317806592824568E-7	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999967864883047	WITHOUT_CLASSIFICATION	3.2135116952250287E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999987333744831	WITHOUT_CLASSIFICATION	1.2666255169121928E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999965269877733	WITHOUT_CLASSIFICATION	3.4730122266045284E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999965269877733	WITHOUT_CLASSIFICATION	3.4730122266045284E-6	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999965269877733	WITHOUT_CLASSIFICATION	3.4730122266045284E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999792706527187	WITHOUT_CLASSIFICATION	2.072934728131493E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999983550821001	WITHOUT_CLASSIFICATION	1.6449178998735545E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999567038722407	WITHOUT_CLASSIFICATION	4.3296127759428274E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999502337077923	WITHOUT_CLASSIFICATION	4.976629220771621E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999834646421013	WITHOUT_CLASSIFICATION	1.6535357898736838E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999945407221675	WITHOUT_CLASSIFICATION	5.459277832461458E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999945407221675	WITHOUT_CLASSIFICATION	5.459277832461458E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998487165428491	WITHOUT_CLASSIFICATION	1.5128345715082896E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999991111527539	WITHOUT_CLASSIFICATION	8.888472461580593E-7	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999991111527539	WITHOUT_CLASSIFICATION	8.888472461580593E-7	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9994897828400288	DEFECT	5.102171599713355E-4	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.999999902809202	WITHOUT_CLASSIFICATION	9.719079797006796E-8	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999982231451263	WITHOUT_CLASSIFICATION	1.7768548737179517E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999980680920503	WITHOUT_CLASSIFICATION	1.9319079496938174E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999219339297629	WITHOUT_CLASSIFICATION	7.806607023703458E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999272278664083	WITHOUT_CLASSIFICATION	7.27721335916574E-5	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9991164463455836	WITHOUT_CLASSIFICATION	8.835536544165137E-4	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9998793386438687	WITHOUT_CLASSIFICATION	1.2066135613122426E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999954973496717	WITHOUT_CLASSIFICATION	4.502650328182987E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999997153195774	WITHOUT_CLASSIFICATION	2.8468042253312145E-7	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999989058486162	WITHOUT_CLASSIFICATION	1.0941513838072001E-6	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999991525700455	WITHOUT_CLASSIFICATION	8.474299545945552E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999996659564366	WITHOUT_CLASSIFICATION	3.34043563361739E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9998683691318274	WITHOUT_CLASSIFICATION	1.3163086817260665E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999994250138653	WITHOUT_CLASSIFICATION	5.749861348044831E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9945035081509325	WITHOUT_CLASSIFICATION	0.005496491849067487	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9881132533896578	WITHOUT_CLASSIFICATION	0.01188674661034219	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999995305517196	WITHOUT_CLASSIFICATION	4.6944828044551563E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999058626808	WITHOUT_CLASSIFICATION	9.413731916505268E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999987786600885	WITHOUT_CLASSIFICATION	1.221339911648994E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999961152333228	WITHOUT_CLASSIFICATION	3.884766677250665E-6	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999949927703251	WITHOUT_CLASSIFICATION	5.007229674917462E-6	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999392070672	WITHOUT_CLASSIFICATION	6.079293287322389E-8	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999925454996724	WITHOUT_CLASSIFICATION	7.45450032746488E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999201088715556	WITHOUT_CLASSIFICATION	7.989112844432764E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999870819718	WITHOUT_CLASSIFICATION	1.2918028157261281E-8	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999854990222	WITHOUT_CLASSIFICATION	1.4500977752222921E-8	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.999992612019542	WITHOUT_CLASSIFICATION	7.387980457906156E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999993419895232	WITHOUT_CLASSIFICATION	6.580104766405179E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999909416295836	WITHOUT_CLASSIFICATION	9.058370416439458E-6	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999829636474302	WITHOUT_CLASSIFICATION	1.7036352569764915E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.999999748966352	WITHOUT_CLASSIFICATION	2.5103364799910844E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999996661939382	WITHOUT_CLASSIFICATION	3.338060617278924E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999996661939382	WITHOUT_CLASSIFICATION	3.338060617278924E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999996661939382	WITHOUT_CLASSIFICATION	3.338060617278924E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999996661939382	WITHOUT_CLASSIFICATION	3.338060617278924E-7	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999944399763901	WITHOUT_CLASSIFICATION	5.56002360983916E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999983093656606	WITHOUT_CLASSIFICATION	1.6906343394407592E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999999523818338	WITHOUT_CLASSIFICATION	4.761816621381374E-8	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999999523818338	WITHOUT_CLASSIFICATION	4.761816621381374E-8	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999983805365715	WITHOUT_CLASSIFICATION	1.6194634285543085E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999959980265755	WITHOUT_CLASSIFICATION	4.0019734245021436E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999933205084	WITHOUT_CLASSIFICATION	6.67949159936959E-9	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999996265924165	WITHOUT_CLASSIFICATION	3.734075836375199E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999562614562368	WITHOUT_CLASSIFICATION	4.3738543763123775E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999995295612505	WITHOUT_CLASSIFICATION	4.7043874942278843E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999990038634573	WITHOUT_CLASSIFICATION	9.961365426498815E-7	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999928616651008	WITHOUT_CLASSIFICATION	7.138334899211065E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999928616651008	WITHOUT_CLASSIFICATION	7.138334899211065E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999928616651008	WITHOUT_CLASSIFICATION	7.138334899211065E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999928616651008	WITHOUT_CLASSIFICATION	7.138334899211065E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999481424777441	WITHOUT_CLASSIFICATION	5.1857522255869466E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995362215339	WITHOUT_CLASSIFICATION	4.637784660507377E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995362215339	WITHOUT_CLASSIFICATION	4.637784660507377E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995362215339	WITHOUT_CLASSIFICATION	4.637784660507377E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999993352138297	WITHOUT_CLASSIFICATION	6.647861702825316E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999925571395857	WITHOUT_CLASSIFICATION	7.442860414312567E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999999151162359	WITHOUT_CLASSIFICATION	8.48837641741507E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999859455286	WITHOUT_CLASSIFICATION	1.405447131134359E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.998975097066071	WITHOUT_CLASSIFICATION	0.0010249029339289837	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999837570601168	WITHOUT_CLASSIFICATION	1.624293988319639E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.999837570601168	WITHOUT_CLASSIFICATION	1.624293988319639E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999500384235719	WITHOUT_CLASSIFICATION	4.99615764281222E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999500384235719	WITHOUT_CLASSIFICATION	4.99615764281222E-5	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999999184377172	WITHOUT_CLASSIFICATION	8.156228276208822E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999956224408563	WITHOUT_CLASSIFICATION	4.377559143730643E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999998831973264	WITHOUT_CLASSIFICATION	1.1680267370684622E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9962647211522329	WITHOUT_CLASSIFICATION	0.003735278847767196	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999965319379261	WITHOUT_CLASSIFICATION	3.468062073821795E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999233687757	WITHOUT_CLASSIFICATION	7.663122431467126E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999568545581	WITHOUT_CLASSIFICATION	4.314544199400365E-8	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.999977088720375	WITHOUT_CLASSIFICATION	2.2911279624981957E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.999999506432435	WITHOUT_CLASSIFICATION	4.935675650861207E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999897602404	WITHOUT_CLASSIFICATION	1.0239759647129518E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999897602404	WITHOUT_CLASSIFICATION	1.0239759647129518E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996875699447	WITHOUT_CLASSIFICATION	3.124300552231901E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999996875699447	WITHOUT_CLASSIFICATION	3.124300552231901E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999876167331473	WITHOUT_CLASSIFICATION	1.2383266852725423E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999999523144303	WITHOUT_CLASSIFICATION	4.768556977158676E-8	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.999904229630245	WITHOUT_CLASSIFICATION	9.577036975505191E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999975434130912	WITHOUT_CLASSIFICATION	2.456586908801548E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999975434130912	WITHOUT_CLASSIFICATION	2.456586908801548E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999975434130912	WITHOUT_CLASSIFICATION	2.456586908801548E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999934449727041	WITHOUT_CLASSIFICATION	6.555027295909199E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999906770018852	WITHOUT_CLASSIFICATION	9.322998114849936E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999886600223524	WITHOUT_CLASSIFICATION	1.1339977647658702E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999891076652894	WITHOUT_CLASSIFICATION	1.0892334710565193E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999876828074133	WITHOUT_CLASSIFICATION	1.2317192586555887E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999883257843988	WITHOUT_CLASSIFICATION	1.1674215601164892E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999918725167872	WITHOUT_CLASSIFICATION	8.127483212859039E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999976366570263	WITHOUT_CLASSIFICATION	2.3633429737569737E-6	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999930646404129	WITHOUT_CLASSIFICATION	6.935359587052315E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999994320827219	WITHOUT_CLASSIFICATION	5.679172781060212E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9998180758320183	WITHOUT_CLASSIFICATION	1.8192416798171838E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.999999068285765	WITHOUT_CLASSIFICATION	9.317142349232828E-7	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999994023977861	WITHOUT_CLASSIFICATION	5.976022140147353E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.7371556054958055	WITHOUT_CLASSIFICATION	0.2628443945041945	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999994744498348	WITHOUT_CLASSIFICATION	5.255501650716493E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999987648845595	WITHOUT_CLASSIFICATION	1.235115440539122E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9998319806503297	WITHOUT_CLASSIFICATION	1.68019349670122E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999740084708767	WITHOUT_CLASSIFICATION	2.5991529123311317E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9998358816612393	WITHOUT_CLASSIFICATION	1.6411833876072402E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999998584081923	WITHOUT_CLASSIFICATION	1.4159180771570478E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999985775790662	WITHOUT_CLASSIFICATION	1.4224209337472986E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9983355556708647	WITHOUT_CLASSIFICATION	0.0016644443291353385	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9994485317374443	WITHOUT_CLASSIFICATION	5.514682625556806E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999201994919735	WITHOUT_CLASSIFICATION	7.980050802644448E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999988200962027	WITHOUT_CLASSIFICATION	1.1799037973634254E-6	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999953521402	WITHOUT_CLASSIFICATION	4.647859741055427E-9	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.999987617103457	WITHOUT_CLASSIFICATION	1.238289654297375E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999895073821919	WITHOUT_CLASSIFICATION	1.049261780810147E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999895073821919	WITHOUT_CLASSIFICATION	1.049261780810147E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999886699339624	WITHOUT_CLASSIFICATION	1.1330066037650913E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999873864389578	WITHOUT_CLASSIFICATION	1.261356104225679E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999894720595466	WITHOUT_CLASSIFICATION	1.052794045337626E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999902580754515	WITHOUT_CLASSIFICATION	9.741924548564408E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999991134810579	WITHOUT_CLASSIFICATION	8.865189420896874E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999900183879147	WITHOUT_CLASSIFICATION	9.98161208530259E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999912809359194	WITHOUT_CLASSIFICATION	8.719064080693564E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999927957245804	WITHOUT_CLASSIFICATION	7.204275419471167E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999895631015655	WITHOUT_CLASSIFICATION	1.0436898434435793E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999927125177395	WITHOUT_CLASSIFICATION	7.287482260493499E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999941713309058	WITHOUT_CLASSIFICATION	5.828669094151195E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999940521285687	WITHOUT_CLASSIFICATION	5.947871431180612E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999930279798641	WITHOUT_CLASSIFICATION	6.972020135778363E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999926141535966	WITHOUT_CLASSIFICATION	7.385846403375422E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999926129784297	WITHOUT_CLASSIFICATION	7.38702157035406E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999935269360811	WITHOUT_CLASSIFICATION	6.473063918904377E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999928134758115	WITHOUT_CLASSIFICATION	7.18652418856042E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999922578660618	WITHOUT_CLASSIFICATION	7.742133938152324E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999918928397573	WITHOUT_CLASSIFICATION	8.107160242675625E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999888498128355	WITHOUT_CLASSIFICATION	1.115018716437207E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999877555446435	WITHOUT_CLASSIFICATION	1.2244455356553011E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999882159466718	WITHOUT_CLASSIFICATION	1.1784053328169223E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999906812032238	WITHOUT_CLASSIFICATION	9.318796776250761E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999934252597037	WITHOUT_CLASSIFICATION	6.574740296347662E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999915380322912	WITHOUT_CLASSIFICATION	8.461967708743954E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999930499390375	WITHOUT_CLASSIFICATION	6.950060962507165E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999911793203752	WITHOUT_CLASSIFICATION	8.82067962482716E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999929817628173	WITHOUT_CLASSIFICATION	7.018237182656512E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999881129559824	WITHOUT_CLASSIFICATION	1.18870440175574E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999912079589629	WITHOUT_CLASSIFICATION	8.792041037012821E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999920296155768	WITHOUT_CLASSIFICATION	7.970384423331235E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999902344575449	WITHOUT_CLASSIFICATION	9.765542455109359E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999905904160584	WITHOUT_CLASSIFICATION	9.40958394150458E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999901245148138	WITHOUT_CLASSIFICATION	9.875485186120057E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999876848467735	WITHOUT_CLASSIFICATION	1.2315153226528533E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999992295496345	WITHOUT_CLASSIFICATION	7.704503654925428E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999907874292199	WITHOUT_CLASSIFICATION	9.212570780119857E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999892710524444	WITHOUT_CLASSIFICATION	1.0728947555689726E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999917793136741	WITHOUT_CLASSIFICATION	8.220686325916461E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999819265550479	WITHOUT_CLASSIFICATION	1.8073444952134407E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999891176447372	WITHOUT_CLASSIFICATION	1.08823552628232E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999890126471208	WITHOUT_CLASSIFICATION	1.0987352879207405E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999893924746146	WITHOUT_CLASSIFICATION	1.0607525385507145E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999871932116546	WITHOUT_CLASSIFICATION	1.2806788345445992E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999920299376607	WITHOUT_CLASSIFICATION	7.970062339351475E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999929186058021	WITHOUT_CLASSIFICATION	7.081394197880672E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999879108873043	WITHOUT_CLASSIFICATION	1.2089112695643383E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999868772328281	WITHOUT_CLASSIFICATION	1.3122767171832528E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999893280062561	WITHOUT_CLASSIFICATION	1.0671993743955778E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999987192839975	WITHOUT_CLASSIFICATION	1.2807160025138942E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999869106169019	WITHOUT_CLASSIFICATION	1.3089383098113097E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999873128093651	WITHOUT_CLASSIFICATION	1.2687190634734033E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999914884505012	WITHOUT_CLASSIFICATION	8.511549498821347E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999831552486927	WITHOUT_CLASSIFICATION	1.6844751307250293E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999831552486927	WITHOUT_CLASSIFICATION	1.6844751307250293E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999887930583222	WITHOUT_CLASSIFICATION	1.1206941677687061E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999892388508144	WITHOUT_CLASSIFICATION	1.0761149185579953E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999879671462568	WITHOUT_CLASSIFICATION	1.2032853743059148E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999885465211646	WITHOUT_CLASSIFICATION	1.1453478835319874E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999928945686734	WITHOUT_CLASSIFICATION	7.105431326560684E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999851362097696	WITHOUT_CLASSIFICATION	1.486379023051744E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999865244440319	WITHOUT_CLASSIFICATION	1.3475555968056227E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999830221963815	WITHOUT_CLASSIFICATION	1.6977803618468954E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999872062819526	WITHOUT_CLASSIFICATION	1.279371804741979E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999900616952205	WITHOUT_CLASSIFICATION	9.938304779487725E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999985283560722	WITHOUT_CLASSIFICATION	1.4716439278570409E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999985283560722	WITHOUT_CLASSIFICATION	1.4716439278570409E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999901929280491	WITHOUT_CLASSIFICATION	9.807071950812893E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999324428173005	WITHOUT_CLASSIFICATION	6.755718269944345E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9998888501575862	WITHOUT_CLASSIFICATION	1.1114984241379885E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999947479643	WITHOUT_CLASSIFICATION	5.252035737484042E-9	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999997481514677	WITHOUT_CLASSIFICATION	2.518485323241992E-7	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.6292925991837929	DEFECT	0.3707074008162072	WITHOUT_CLASSIFICATION
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9997972052079486	WITHOUT_CLASSIFICATION	2.0279479205145904E-4	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999921489216447	WITHOUT_CLASSIFICATION	7.851078355335835E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999920402881933	WITHOUT_CLASSIFICATION	7.959711806694E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.999992253214713	WITHOUT_CLASSIFICATION	7.746785286954102E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999908817830817	WITHOUT_CLASSIFICATION	9.118216918316303E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999926752222928	WITHOUT_CLASSIFICATION	7.3247777071288755E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999912341081536	WITHOUT_CLASSIFICATION	8.76589184632123E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999821638104068	WITHOUT_CLASSIFICATION	1.7836189593238715E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999910881943823	WITHOUT_CLASSIFICATION	8.911805617741823E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999902438535104	WITHOUT_CLASSIFICATION	9.756146489558754E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999918874665586	WITHOUT_CLASSIFICATION	8.1125334413124E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999894517343364	WITHOUT_CLASSIFICATION	1.0548265663699164E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999888365540754	WITHOUT_CLASSIFICATION	1.1163445924501276E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999885526065596	WITHOUT_CLASSIFICATION	1.1447393440293141E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999848801770932	WITHOUT_CLASSIFICATION	1.5119822906842734E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999912098839031	WITHOUT_CLASSIFICATION	8.7901160969992E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999942283142913	WITHOUT_CLASSIFICATION	5.771685708709757E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.99999295819617	WITHOUT_CLASSIFICATION	7.041803830108359E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999922637758362	WITHOUT_CLASSIFICATION	7.736224163732991E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999934179321129	WITHOUT_CLASSIFICATION	6.582067887174524E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999887555288423	WITHOUT_CLASSIFICATION	1.124447115774534E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999897091176181	WITHOUT_CLASSIFICATION	1.0290882381870863E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999921032610612	WITHOUT_CLASSIFICATION	7.896738938864704E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999896460664995	WITHOUT_CLASSIFICATION	1.0353933500528024E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999905729220846	WITHOUT_CLASSIFICATION	9.427077915359025E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999918265798302	WITHOUT_CLASSIFICATION	8.173420169799962E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999943037007739	WITHOUT_CLASSIFICATION	5.696299226094318E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999945390633557	WITHOUT_CLASSIFICATION	5.460936644316272E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999900699039095	WITHOUT_CLASSIFICATION	9.930096090554132E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999934410301556	WITHOUT_CLASSIFICATION	6.558969844284225E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999910372980808	WITHOUT_CLASSIFICATION	8.962701919278038E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999895213571679	WITHOUT_CLASSIFICATION	1.0478642832086253E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999884315805332	WITHOUT_CLASSIFICATION	1.1568419466806972E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.999991295830208	WITHOUT_CLASSIFICATION	8.704169792067625E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999901120073326	WITHOUT_CLASSIFICATION	9.887992667392776E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999902394034936	WITHOUT_CLASSIFICATION	9.760596506495674E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.99998944991017	WITHOUT_CLASSIFICATION	1.0550089829982126E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999892125485065	WITHOUT_CLASSIFICATION	1.0787451493548957E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999876517188381	WITHOUT_CLASSIFICATION	1.2348281162004509E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999888399226426	WITHOUT_CLASSIFICATION	1.116007735739626E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999885039621677	WITHOUT_CLASSIFICATION	1.149603783242142E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999889327182891	WITHOUT_CLASSIFICATION	1.1067281710762891E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999886164916716	WITHOUT_CLASSIFICATION	1.1383508328388359E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999922167684675	WITHOUT_CLASSIFICATION	7.783231532474387E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999933527070686	WITHOUT_CLASSIFICATION	6.647292931395919E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999871429353471	WITHOUT_CLASSIFICATION	1.2857064652898546E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999895583873153	WITHOUT_CLASSIFICATION	1.0441612684735613E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999904197271262	WITHOUT_CLASSIFICATION	9.580272873802213E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999773598887418	WITHOUT_CLASSIFICATION	2.2640111258078068E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999861213749756	WITHOUT_CLASSIFICATION	1.3878625024459045E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.999983909609524	WITHOUT_CLASSIFICATION	1.6090390475980414E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999923335252707	WITHOUT_CLASSIFICATION	7.66647472931322E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999919623434029	WITHOUT_CLASSIFICATION	8.037656597098245E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999910472132992	WITHOUT_CLASSIFICATION	8.952786700733427E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999891722700689	WITHOUT_CLASSIFICATION	1.0827729931152584E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999892481782591	WITHOUT_CLASSIFICATION	1.0751821740978088E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999890561949152	WITHOUT_CLASSIFICATION	1.0943805084874403E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999871584931096	WITHOUT_CLASSIFICATION	1.2841506890423046E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999519980557	WITHOUT_CLASSIFICATION	4.800194431912139E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999802868101	WITHOUT_CLASSIFICATION	1.9713189865025466E-8	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999498422004854	WITHOUT_CLASSIFICATION	5.015779951443587E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999363818894234	WITHOUT_CLASSIFICATION	6.361811057670418E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999280920474539	WITHOUT_CLASSIFICATION	7.190795254607045E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999280920474539	WITHOUT_CLASSIFICATION	7.190795254607045E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.999999984148476	WITHOUT_CLASSIFICATION	1.5851523975847715E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998886389936	WITHOUT_CLASSIFICATION	1.1136100632500905E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998886389936	WITHOUT_CLASSIFICATION	1.1136100632500905E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999986622967442	WITHOUT_CLASSIFICATION	1.3377032557966338E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999993320653989	WITHOUT_CLASSIFICATION	6.679346009990245E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999961721508872	WITHOUT_CLASSIFICATION	3.827849112800942E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999988382491936	WITHOUT_CLASSIFICATION	1.161750806460946E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999993928650852	WITHOUT_CLASSIFICATION	6.071349147881556E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999994441402293	WITHOUT_CLASSIFICATION	5.558597706461778E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999994441402293	WITHOUT_CLASSIFICATION	5.558597706461778E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999998077260754	WITHOUT_CLASSIFICATION	1.922739245977766E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999868149645647	WITHOUT_CLASSIFICATION	1.3185035435313343E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999868149645647	WITHOUT_CLASSIFICATION	1.3185035435313343E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999986707677	WITHOUT_CLASSIFICATION	1.3292323498653347E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.8100403431514187	DEFECT	0.18995965684858143	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.999994866354737	WITHOUT_CLASSIFICATION	5.133645263032303E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.999974757581684	WITHOUT_CLASSIFICATION	2.5242418316049958E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999975732038432	WITHOUT_CLASSIFICATION	2.4267961568080803E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999983428994219	WITHOUT_CLASSIFICATION	1.6571005780648338E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999999800302413	WITHOUT_CLASSIFICATION	1.996975871036355E-8	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.999998819293333	WITHOUT_CLASSIFICATION	1.1807066669224958E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999988529992746	WITHOUT_CLASSIFICATION	1.1470007254032114E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999751564788345	WITHOUT_CLASSIFICATION	2.4843521165428748E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9997345147640588	WITHOUT_CLASSIFICATION	2.6548523594120433E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999599180381	WITHOUT_CLASSIFICATION	4.0081961952818494E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999788988625	WITHOUT_CLASSIFICATION	2.1101137560794917E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9995389989589675	WITHOUT_CLASSIFICATION	4.610010410324055E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999995490772858	WITHOUT_CLASSIFICATION	4.509227141864095E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999953304691315	WITHOUT_CLASSIFICATION	4.669530868578545E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.999999983952441	WITHOUT_CLASSIFICATION	1.604755901200467E-8	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9999173495625118	WITHOUT_CLASSIFICATION	8.26504374882648E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999985294072518	WITHOUT_CLASSIFICATION	1.470592748211852E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999985294072518	WITHOUT_CLASSIFICATION	1.470592748211852E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999998131036746	WITHOUT_CLASSIFICATION	1.8689632548604182E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999685598921	WITHOUT_CLASSIFICATION	3.144010794511464E-8	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999996520549657	WITHOUT_CLASSIFICATION	3.479450342918591E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999907466663313	WITHOUT_CLASSIFICATION	9.25333366872735E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999801117667892	WITHOUT_CLASSIFICATION	1.9888233210644643E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999801117667892	WITHOUT_CLASSIFICATION	1.9888233210644643E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999801117667892	WITHOUT_CLASSIFICATION	1.9888233210644643E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999999059924449	WITHOUT_CLASSIFICATION	9.400755518163805E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999940979803346	WITHOUT_CLASSIFICATION	5.902019665432562E-6	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999995198645095	WITHOUT_CLASSIFICATION	4.80135490469255E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999974646308873	WITHOUT_CLASSIFICATION	2.5353691126283812E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999977233331112	WITHOUT_CLASSIFICATION	2.2766668888343337E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999956766983	WITHOUT_CLASSIFICATION	4.323301791064817E-9	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999988421186713	WITHOUT_CLASSIFICATION	1.1578813286530637E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999997604813774	WITHOUT_CLASSIFICATION	2.3951862256410276E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999993410337296	WITHOUT_CLASSIFICATION	6.589662703447875E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999999080351503	WITHOUT_CLASSIFICATION	9.196484977242206E-8	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999996341742962	WITHOUT_CLASSIFICATION	3.658257038683165E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999999675864637	WITHOUT_CLASSIFICATION	3.2413536378409977E-8	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.5831963253534928	DEFECT	0.41680367464650725	WITHOUT_CLASSIFICATION
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999517117936357	WITHOUT_CLASSIFICATION	4.828820636432328E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999948709579	WITHOUT_CLASSIFICATION	5.129042146872894E-9	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999938871681086	WITHOUT_CLASSIFICATION	6.112831891508637E-6	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999999587187577	WITHOUT_CLASSIFICATION	4.128124225570335E-8	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999997658397325	WITHOUT_CLASSIFICATION	2.3416026746856866E-7	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.999999509161958	WITHOUT_CLASSIFICATION	4.908380419937612E-7	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.5620263510797489	WITHOUT_CLASSIFICATION	0.4379736489202511	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.955610008356701	DEFECT	0.04438999164329897	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.8608219711857659	WITHOUT_CLASSIFICATION	0.13917802881423413	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9999804162184578	DEFECT	1.958378154228491E-5	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9981063966136249	DEFECT	0.0018936033863750869	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9941608745807681	WITHOUT_CLASSIFICATION	0.0058391254192319605	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.8520770682022049	WITHOUT_CLASSIFICATION	0.14792293179779512	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9093714920280909	WITHOUT_CLASSIFICATION	0.09062850797190906	DEFECT
// FIXME: not correct exception	DEFECT	0.9330046395081621	DEFECT	0.0669953604918378	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9998332457091195	WITHOUT_CLASSIFICATION	1.667542908805054E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.99929251001048	WITHOUT_CLASSIFICATION	7.074899895200934E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.8327922162379373	WITHOUT_CLASSIFICATION	0.16720778376206266	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9911569380017917	WITHOUT_CLASSIFICATION	0.008843061998208283	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9914567818574112	DEFECT	0.008543218142588724	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.8455865482944738	DEFECT	0.15441345170552628	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7826008465238679	DEFECT	0.21739915347613203	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.7826008465238679	DEFECT	0.21739915347613203	WITHOUT_CLASSIFICATION
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9885311514676702	WITHOUT_CLASSIFICATION	0.011468848532329698	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9352993426326989	WITHOUT_CLASSIFICATION	0.06470065736730118	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9804400547815589	WITHOUT_CLASSIFICATION	0.01955994521844104	DEFECT
// ENEBO: Very wrong	DEFECT	0.9957714040322602	WITHOUT_CLASSIFICATION	0.004228595967739792	DEFECT
// ENEBO: Very wrong	DEFECT	0.9957714040322602	WITHOUT_CLASSIFICATION	0.004228595967739792	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9458685028110423	DEFECT	0.054131497188957586	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9662746998788626	DEFECT	0.033725300121137454	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9666293137720342	WITHOUT_CLASSIFICATION	0.03337068622796577	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8352288860884295	DEFECT	0.16477111391157045	WITHOUT_CLASSIFICATION
// TODO: take BigDecimal.mode into account.	DEFECT	0.8877586481982397	DEFECT	0.11224135180176023	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.8231088509800617	DEFECT	0.17689114901993827	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.8920360787289758	WITHOUT_CLASSIFICATION	0.10796392127102417	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9715318801513403	DEFECT	0.02846811984865968	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.972286179643211	WITHOUT_CLASSIFICATION	0.027713820356789043	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9749185443932991	DEFECT	0.025081455606700928	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.7866100492826488	WITHOUT_CLASSIFICATION	0.21338995071735117	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.8552884892254179	DEFECT	0.1447115107745822	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.5544730718060331	WITHOUT_CLASSIFICATION	0.445526928193967	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.8997307537288938	DEFECT	0.10026924627110624	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// FIXME: this should reset to what it was before	DEFECT	0.9238745752063208	WITHOUT_CLASSIFICATION	0.07612542479367916	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.993165278426089	WITHOUT_CLASSIFICATION	0.006834721573910994	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9169949330938043	WITHOUT_CLASSIFICATION	0.08300506690619568	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9992581645306391	DEFECT	7.418354693609859E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9993283264330503	WITHOUT_CLASSIFICATION	6.716735669498771E-4	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.999990660984273	WITHOUT_CLASSIFICATION	9.339015726969718E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.5997204336697874	WITHOUT_CLASSIFICATION	0.4002795663302125	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.5997204336697874	WITHOUT_CLASSIFICATION	0.4002795663302125	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8638097805467199	WITHOUT_CLASSIFICATION	0.13619021945328016	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9886292248562458	WITHOUT_CLASSIFICATION	0.011370775143754093	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999828583480779	DEFECT	1.7141651922035406E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.995568326667334	WITHOUT_CLASSIFICATION	0.004431673332666074	DEFECT
// FIXME: This is wrong	DEFECT	0.5342924032437374	WITHOUT_CLASSIFICATION	0.46570759675626267	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.959128405003794	WITHOUT_CLASSIFICATION	0.04087159499620605	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9998992223037579	WITHOUT_CLASSIFICATION	1.0077769624215887E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9399512747100464	WITHOUT_CLASSIFICATION	0.06004872528995357	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.990735240279525	WITHOUT_CLASSIFICATION	0.009264759720475062	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999818768490447	WITHOUT_CLASSIFICATION	1.8123150955277137E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9989939765319737	DEFECT	0.0010060234680262334	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9238038990215824	DEFECT	0.07619610097841749	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9238038990215824	DEFECT	0.07619610097841749	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9999501625102221	DEFECT	4.9837489777963226E-5	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9705289909811097	DEFECT	0.029471009018890295	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9999598729358853	WITHOUT_CLASSIFICATION	4.012706411464362E-5	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9939671638288703	DEFECT	0.0060328361711296866	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9999110099912706	DEFECT	8.899000872937489E-5	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9946023203829016	WITHOUT_CLASSIFICATION	0.005397679617098328	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9573145169439399	DEFECT	0.04268548305606009	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.8638097805467199	WITHOUT_CLASSIFICATION	0.13619021945328016	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999277400364718	WITHOUT_CLASSIFICATION	7.22599635282458E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.935890956979163	WITHOUT_CLASSIFICATION	0.06410904302083696	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9935508705695917	WITHOUT_CLASSIFICATION	0.006449129430408226	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8352288860884295	DEFECT	0.16477111391157045	WITHOUT_CLASSIFICATION
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9846865431515904	DEFECT	0.015313456848409554	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8504444293270572	WITHOUT_CLASSIFICATION	0.14955557067294284	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.993165278426089	WITHOUT_CLASSIFICATION	0.006834721573910994	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9976558814053935	WITHOUT_CLASSIFICATION	0.0023441185946065373	DEFECT
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// FIXME: Broken but behaving	DEFECT	0.9989939765319737	DEFECT	0.0010060234680262334	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9996098135511124	DEFECT	3.9018644888745183E-4	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.702861016727526	DEFECT	0.297138983272474	WITHOUT_CLASSIFICATION
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.9399512747100464	WITHOUT_CLASSIFICATION	0.06004872528995357	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9999794979255276	WITHOUT_CLASSIFICATION	2.0502074472385674E-5	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9238038990215824	DEFECT	0.07619610097841749	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9238038990215824	DEFECT	0.07619610097841749	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8760277786817939	DEFECT	0.12397222131820598	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9907817148191589	WITHOUT_CLASSIFICATION	0.009218285180840993	DEFECT
