// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999989997530057	WITHOUT_CLASSIFICATION	1.0002469944439145E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.999994715450041	WITHOUT_CLASSIFICATION	5.284549958902684E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999993915726051	WITHOUT_CLASSIFICATION	6.084273947954848E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.999994998616527	WITHOUT_CLASSIFICATION	5.00138347305376E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999950767193453	WITHOUT_CLASSIFICATION	4.923280654794771E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999955364177935	WITHOUT_CLASSIFICATION	4.463582206512864E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999832543169818	WITHOUT_CLASSIFICATION	1.674568301827116E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999878962666247	WITHOUT_CLASSIFICATION	1.2103733375300801E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999656576180243	WITHOUT_CLASSIFICATION	3.434238197573125E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999826503522719	WITHOUT_CLASSIFICATION	1.7349647728197853E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999647323980408	WITHOUT_CLASSIFICATION	3.5267601959183054E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.999965949008382	WITHOUT_CLASSIFICATION	3.4050991618086344E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.999965949008382	WITHOUT_CLASSIFICATION	3.4050991618086344E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955006	WITHOUT_CLASSIFICATION	8.11404499355328E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999960424971206	WITHOUT_CLASSIFICATION	3.95750287941858E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999965290084946	WITHOUT_CLASSIFICATION	3.4709915054909906E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999824367069373	WITHOUT_CLASSIFICATION	1.7563293062674288E-5	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.999996098681677	WITHOUT_CLASSIFICATION	3.9013183229406525E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998512276839	WITHOUT_CLASSIFICATION	1.4877231609702692E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998512276839	WITHOUT_CLASSIFICATION	1.4877231609702692E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998512276839	WITHOUT_CLASSIFICATION	1.4877231609702692E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998512276839	WITHOUT_CLASSIFICATION	1.4877231609702692E-6	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999999078136586	WITHOUT_CLASSIFICATION	9.218634146106292E-8	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999973140931585	WITHOUT_CLASSIFICATION	2.6859068415692893E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999987905280014	WITHOUT_CLASSIFICATION	1.2094719985442285E-6	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999941547290602	WITHOUT_CLASSIFICATION	5.845270939839599E-6	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999632581785196	WITHOUT_CLASSIFICATION	3.6741821480364594E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999987233300563	WITHOUT_CLASSIFICATION	1.2766699437021934E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999989507252882	WITHOUT_CLASSIFICATION	1.0492747117570864E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999978170911143	WITHOUT_CLASSIFICATION	2.182908885643615E-6	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.999961289007135	WITHOUT_CLASSIFICATION	3.871099286488566E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999409096250647	WITHOUT_CLASSIFICATION	5.9090374935263675E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999996631446137	WITHOUT_CLASSIFICATION	3.3685538629844005E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999994938990246	WITHOUT_CLASSIFICATION	5.061009753598335E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999968978579523	WITHOUT_CLASSIFICATION	3.1021420477714036E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999980990620836	WITHOUT_CLASSIFICATION	1.900937916355805E-6	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999987033444149	WITHOUT_CLASSIFICATION	1.2966555851574782E-6	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999989984913965	WITHOUT_CLASSIFICATION	1.001508603464134E-6	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999950762253825	WITHOUT_CLASSIFICATION	4.923774617444691E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999998512276839	WITHOUT_CLASSIFICATION	1.4877231609702692E-6	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.999997977953821	WITHOUT_CLASSIFICATION	2.022046178929739E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999985814658484	WITHOUT_CLASSIFICATION	1.4185341515477376E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999983824438274	WITHOUT_CLASSIFICATION	1.6175561724802868E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999793181831356	WITHOUT_CLASSIFICATION	2.068181686446868E-5	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999941370912293	WITHOUT_CLASSIFICATION	5.862908770696044E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999996687087856	WITHOUT_CLASSIFICATION	3.3129121441009757E-7	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999336047294	WITHOUT_CLASSIFICATION	6.639527067009549E-8	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999998210065677	WITHOUT_CLASSIFICATION	1.789934321865097E-7	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.999995526111822	WITHOUT_CLASSIFICATION	4.473888177994388E-6	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9999939686203518	WITHOUT_CLASSIFICATION	6.031379648104608E-6	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9999734820123912	WITHOUT_CLASSIFICATION	2.6517987608706746E-5	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999972235760896	WITHOUT_CLASSIFICATION	2.776423910356669E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999855709941442	WITHOUT_CLASSIFICATION	1.4429005855884925E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999944441667934	WITHOUT_CLASSIFICATION	5.55583320666909E-6	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.999941567083434	WITHOUT_CLASSIFICATION	5.843291656606426E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999876595778484	WITHOUT_CLASSIFICATION	1.2340422151471685E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999987080636707	WITHOUT_CLASSIFICATION	1.2919363292723866E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999966194476148	WITHOUT_CLASSIFICATION	3.3805523851041154E-6	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999998600697216	WITHOUT_CLASSIFICATION	1.3993027828957768E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999965812265966	WITHOUT_CLASSIFICATION	3.4187734034217487E-6	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9998815989164908	WITHOUT_CLASSIFICATION	1.1840108350918314E-4	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999966267822663	WITHOUT_CLASSIFICATION	3.3732177337805146E-6	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999682699896295	WITHOUT_CLASSIFICATION	3.173001037049536E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999685264800291	WITHOUT_CLASSIFICATION	3.147351997094098E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999891001111947	WITHOUT_CLASSIFICATION	1.0899888805298845E-5	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999914345765172	WITHOUT_CLASSIFICATION	8.56542348287674E-6	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999994861682844	WITHOUT_CLASSIFICATION	5.138317156329831E-7	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9889195620580505	WITHOUT_CLASSIFICATION	0.011080437941949527	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999998505012712	WITHOUT_CLASSIFICATION	1.4949872881640455E-7	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999996022945786	WITHOUT_CLASSIFICATION	3.9770542138428735E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999950080647941	WITHOUT_CLASSIFICATION	4.991935205812302E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999956356939597	WITHOUT_CLASSIFICATION	4.364306040385425E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999245976939766	WITHOUT_CLASSIFICATION	7.540230602347957E-5	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999986796787504	WITHOUT_CLASSIFICATION	1.3203212496042835E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999995747566157	WITHOUT_CLASSIFICATION	4.2524338426890814E-7	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999997205655707	WITHOUT_CLASSIFICATION	2.7943442933399386E-7	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.99997553747215	WITHOUT_CLASSIFICATION	2.4462527850135306E-5	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999824476478002	WITHOUT_CLASSIFICATION	1.7552352199805037E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999360168756	WITHOUT_CLASSIFICATION	6.39831243293048E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999815850247153	WITHOUT_CLASSIFICATION	1.841497528464113E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999138158722217	WITHOUT_CLASSIFICATION	8.618412777833606E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999927521216039	WITHOUT_CLASSIFICATION	7.247878396110703E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999732852264634	WITHOUT_CLASSIFICATION	2.6714773536522317E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999732852264634	WITHOUT_CLASSIFICATION	2.6714773536522317E-5	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999977602632372	WITHOUT_CLASSIFICATION	2.2397367628102743E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999998279653793	WITHOUT_CLASSIFICATION	1.7203462068800242E-7	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999974476571304	WITHOUT_CLASSIFICATION	2.552342869576682E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999993082316678	WITHOUT_CLASSIFICATION	6.917683321307912E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999955848034273	WITHOUT_CLASSIFICATION	4.415196572747378E-6	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999158486538918	WITHOUT_CLASSIFICATION	8.415134610815478E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999570891387614	WITHOUT_CLASSIFICATION	4.291086123858532E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999946240220595	WITHOUT_CLASSIFICATION	5.3759779404546135E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999979183863942	WITHOUT_CLASSIFICATION	2.081613605718804E-6	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.99999542959363	WITHOUT_CLASSIFICATION	4.570406369984062E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999114113306	WITHOUT_CLASSIFICATION	8.858866932484135E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999989202555832	WITHOUT_CLASSIFICATION	1.0797444167922833E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999976994054816	WITHOUT_CLASSIFICATION	2.300594518570396E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999982559294192	WITHOUT_CLASSIFICATION	1.7440705808232273E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999982559294192	WITHOUT_CLASSIFICATION	1.7440705808232273E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999982559294192	WITHOUT_CLASSIFICATION	1.7440705808232273E-6	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999967966251718	WITHOUT_CLASSIFICATION	3.203374828171237E-6	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999504360741	WITHOUT_CLASSIFICATION	4.956392577107291E-8	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999999165073098	WITHOUT_CLASSIFICATION	8.34926901125075E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9999537801543525	WITHOUT_CLASSIFICATION	4.621984564737305E-5	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999977228378777	WITHOUT_CLASSIFICATION	2.277162122266142E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.999995262486315	WITHOUT_CLASSIFICATION	4.737513684993268E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9999281913004419	WITHOUT_CLASSIFICATION	7.18086995582079E-5	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999990029488564	WITHOUT_CLASSIFICATION	9.970511436631458E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999975687183735	WITHOUT_CLASSIFICATION	2.431281626434126E-6	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999975687183735	WITHOUT_CLASSIFICATION	2.431281626434126E-6	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.999989964495738	WITHOUT_CLASSIFICATION	1.003550426200318E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998713147369	WITHOUT_CLASSIFICATION	1.2868526300015524E-7	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999889801976468	WITHOUT_CLASSIFICATION	1.101980235323823E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999889801976468	WITHOUT_CLASSIFICATION	1.101980235323823E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999999482883836	WITHOUT_CLASSIFICATION	5.1711616386041887E-8	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999979663039203	WITHOUT_CLASSIFICATION	2.0336960795673863E-6	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.999981982462051	WITHOUT_CLASSIFICATION	1.801753794907861E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999997381357052	WITHOUT_CLASSIFICATION	2.618642947507337E-7	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999938364500273	WITHOUT_CLASSIFICATION	6.163549972700263E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999996416726646	WITHOUT_CLASSIFICATION	3.583273353097213E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999893934655982	WITHOUT_CLASSIFICATION	1.0606534401691762E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999934377539698	WITHOUT_CLASSIFICATION	6.562246030260809E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999725154875149	WITHOUT_CLASSIFICATION	2.748451248522795E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999994065973031	WITHOUT_CLASSIFICATION	5.934026968970546E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999992452343779	WITHOUT_CLASSIFICATION	7.547656221536545E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998704177016	WITHOUT_CLASSIFICATION	1.295822984045149E-7	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999959714407386	WITHOUT_CLASSIFICATION	4.028559261433347E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9881957424396958	WITHOUT_CLASSIFICATION	0.011804257560304248	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999950930401111	WITHOUT_CLASSIFICATION	4.9069598889396754E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.999990189131863	WITHOUT_CLASSIFICATION	9.810868137006743E-6	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998564915112927	WITHOUT_CLASSIFICATION	1.4350848870728423E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9993200871636543	WITHOUT_CLASSIFICATION	6.799128363456866E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999982873539071	WITHOUT_CLASSIFICATION	1.712646092998651E-6	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999989091407737	WITHOUT_CLASSIFICATION	1.0908592262293281E-6	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999999811017602	WITHOUT_CLASSIFICATION	1.8898239803777206E-7	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999982613406888	WITHOUT_CLASSIFICATION	1.7386593112104278E-6	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9997472761290153	WITHOUT_CLASSIFICATION	2.5272387098475036E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999989992338099	WITHOUT_CLASSIFICATION	1.0007661901823605E-6	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999954625095158	WITHOUT_CLASSIFICATION	4.537490484298805E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999961820474315	WITHOUT_CLASSIFICATION	3.817952568521339E-6	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999998820594399	WITHOUT_CLASSIFICATION	1.1794056004125284E-7	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999948371946422	WITHOUT_CLASSIFICATION	5.162805357830577E-6	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999991943599916	WITHOUT_CLASSIFICATION	8.056400084552664E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999195969344	WITHOUT_CLASSIFICATION	8.040306561750549E-8	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999965907148491	WITHOUT_CLASSIFICATION	3.4092851509413656E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.999999842075463	WITHOUT_CLASSIFICATION	1.579245370364178E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999900357826043	WITHOUT_CLASSIFICATION	9.964217395674018E-6	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999963323327723	WITHOUT_CLASSIFICATION	3.6676672278195296E-6	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999998467944857	WITHOUT_CLASSIFICATION	1.5320551418727286E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999911321485848	WITHOUT_CLASSIFICATION	8.867851415078985E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999960978320845	WITHOUT_CLASSIFICATION	3.902167915442615E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999851373725113	WITHOUT_CLASSIFICATION	1.4862627488683957E-5	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.999999491448094	WITHOUT_CLASSIFICATION	5.0855190591557E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999990214179718	WITHOUT_CLASSIFICATION	9.785820281925072E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999989192325852	WITHOUT_CLASSIFICATION	1.0807674148411618E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999998776446805	WITHOUT_CLASSIFICATION	1.2235531950036998E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999995672375812	WITHOUT_CLASSIFICATION	4.327624187978094E-6	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999983796711394	WITHOUT_CLASSIFICATION	1.620328860672768E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999935749617763	WITHOUT_CLASSIFICATION	6.425038223632628E-6	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998037144086351	WITHOUT_CLASSIFICATION	1.9628559136482474E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999993345607296	WITHOUT_CLASSIFICATION	6.654392704031246E-6	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999359446312106	WITHOUT_CLASSIFICATION	6.405536878934427E-5	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999981240426331	WITHOUT_CLASSIFICATION	1.8759573669101367E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999193208578971	WITHOUT_CLASSIFICATION	8.067914210292036E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999997733210844	WITHOUT_CLASSIFICATION	2.2667891559297378E-7	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999995445354927	WITHOUT_CLASSIFICATION	4.5546450736151707E-7	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999996175732004	WITHOUT_CLASSIFICATION	3.8242679946390385E-7	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999946835764097	WITHOUT_CLASSIFICATION	5.31642359022367E-6	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.999999642927433	WITHOUT_CLASSIFICATION	3.570725669542254E-7	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999997077567663	WITHOUT_CLASSIFICATION	2.9224323371817944E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999959411269035	WITHOUT_CLASSIFICATION	4.058873096522411E-6	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999982344806099	WITHOUT_CLASSIFICATION	1.765519390143652E-6	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999988065726447	WITHOUT_CLASSIFICATION	1.1934273552517336E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999966679638499	WITHOUT_CLASSIFICATION	3.3320361501004154E-6	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.999986242186737	WITHOUT_CLASSIFICATION	1.3757813263069788E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999991561271969	WITHOUT_CLASSIFICATION	8.438728031756433E-7	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999995104571308	WITHOUT_CLASSIFICATION	4.895428693291419E-7	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.999999487077966	WITHOUT_CLASSIFICATION	5.129220339830927E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999979645132828	WITHOUT_CLASSIFICATION	2.035486717280168E-6	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999914948846436	WITHOUT_CLASSIFICATION	8.505115356558645E-6	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9998533084352774	WITHOUT_CLASSIFICATION	1.4669156472258066E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999981184658358	WITHOUT_CLASSIFICATION	1.8815341642119564E-6	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999998031025163	WITHOUT_CLASSIFICATION	1.9689748359227537E-7	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999994215266332	WITHOUT_CLASSIFICATION	5.78473366667371E-7	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999928206512099	WITHOUT_CLASSIFICATION	7.179348790200731E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999928206512099	WITHOUT_CLASSIFICATION	7.179348790200731E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.999991643148783	WITHOUT_CLASSIFICATION	8.356851217006301E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.999991643148783	WITHOUT_CLASSIFICATION	8.356851217006301E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999906192974289	WITHOUT_CLASSIFICATION	9.38070257109607E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999906192974289	WITHOUT_CLASSIFICATION	9.38070257109607E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999958759667312	WITHOUT_CLASSIFICATION	4.124033268763368E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999958759667312	WITHOUT_CLASSIFICATION	4.124033268763368E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999983285148627	WITHOUT_CLASSIFICATION	1.6714851372751783E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999969785772386	WITHOUT_CLASSIFICATION	3.0214227614595716E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999843530329169	WITHOUT_CLASSIFICATION	1.564696708305196E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999973155387482	WITHOUT_CLASSIFICATION	2.6844612518676773E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999997533528612	WITHOUT_CLASSIFICATION	2.4664713881534126E-7	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999833472900264	WITHOUT_CLASSIFICATION	1.6652709973703464E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999360257114139	WITHOUT_CLASSIFICATION	6.397428858611751E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999991392221412	WITHOUT_CLASSIFICATION	8.607778587464919E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999957617351378	WITHOUT_CLASSIFICATION	4.238264862228324E-6	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999992612092853	WITHOUT_CLASSIFICATION	7.387907147897422E-7	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999977061165106	WITHOUT_CLASSIFICATION	2.2938834894385825E-6	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999947970278295	WITHOUT_CLASSIFICATION	5.2029721705402305E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999977376543555	WITHOUT_CLASSIFICATION	2.262345644531687E-6	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999376318969	WITHOUT_CLASSIFICATION	6.236810305251931E-8	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999997759500379	WITHOUT_CLASSIFICATION	2.2404996213895964E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999960735103496	WITHOUT_CLASSIFICATION	3.926489650415979E-6	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999978157714987	WITHOUT_CLASSIFICATION	2.1842285012806285E-6	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999947976167455	WITHOUT_CLASSIFICATION	5.202383254475598E-6	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999792765200322	WITHOUT_CLASSIFICATION	2.072347996776437E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9998703464505785	WITHOUT_CLASSIFICATION	1.296535494214415E-4	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999767668321788	WITHOUT_CLASSIFICATION	2.3233167821060935E-5	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999843958550979	WITHOUT_CLASSIFICATION	1.560414490215624E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999986419648537	WITHOUT_CLASSIFICATION	1.3580351463212607E-6	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999865915230135	WITHOUT_CLASSIFICATION	1.3408476986554915E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999927732359546	WITHOUT_CLASSIFICATION	7.2267640454375085E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999995285272731	WITHOUT_CLASSIFICATION	4.71472726916461E-7	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999961654569108	WITHOUT_CLASSIFICATION	3.834543089223688E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999966305583426	WITHOUT_CLASSIFICATION	3.369441657332082E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999966305583426	WITHOUT_CLASSIFICATION	3.369441657332082E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999970701917749	WITHOUT_CLASSIFICATION	2.9298082250233167E-6	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999979883106346	WITHOUT_CLASSIFICATION	2.011689365488533E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999970476699623	WITHOUT_CLASSIFICATION	2.952330037569055E-6	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999962088096312	WITHOUT_CLASSIFICATION	3.791190368738725E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999924325653493	WITHOUT_CLASSIFICATION	7.567434650705052E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999970170165768	WITHOUT_CLASSIFICATION	2.9829834232107555E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999959063238163	WITHOUT_CLASSIFICATION	4.0936761836593076E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999959063238163	WITHOUT_CLASSIFICATION	4.0936761836593076E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999976269562038	WITHOUT_CLASSIFICATION	2.373043796274917E-6	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.8685196467003208	WITHOUT_CLASSIFICATION	0.13148035329967916	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999970410658111	WITHOUT_CLASSIFICATION	2.9589341889155085E-6	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999970410658111	WITHOUT_CLASSIFICATION	2.9589341889155085E-6	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999999372560224	WITHOUT_CLASSIFICATION	6.274397760986893E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999950730837451	WITHOUT_CLASSIFICATION	4.926916254869479E-6	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9999950730837451	WITHOUT_CLASSIFICATION	4.926916254869479E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999972807616219	WITHOUT_CLASSIFICATION	2.719238378035099E-6	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999972807616219	WITHOUT_CLASSIFICATION	2.719238378035099E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999962606100622	WITHOUT_CLASSIFICATION	3.7393899377604107E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999962606100622	WITHOUT_CLASSIFICATION	3.7393899377604107E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999948660840693	WITHOUT_CLASSIFICATION	5.133915930745258E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999970008255723	WITHOUT_CLASSIFICATION	2.999174427653023E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999950426541341	WITHOUT_CLASSIFICATION	4.95734586599468E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999918470642591	WITHOUT_CLASSIFICATION	8.152935740901134E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999998008185474	WITHOUT_CLASSIFICATION	1.9918145250780127E-7	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999991652903205	WITHOUT_CLASSIFICATION	8.347096795417049E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999978857075816	WITHOUT_CLASSIFICATION	2.1142924184262516E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999983669981792	WITHOUT_CLASSIFICATION	1.6330018207106483E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999978857075816	WITHOUT_CLASSIFICATION	2.1142924184262516E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9998000708390583	WITHOUT_CLASSIFICATION	1.9992916094165625E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999996777814651	WITHOUT_CLASSIFICATION	3.2221853485308665E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999900269727752	WITHOUT_CLASSIFICATION	9.973027224866327E-6	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999458218184449	WITHOUT_CLASSIFICATION	5.4178181555171716E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999990666432087	WITHOUT_CLASSIFICATION	9.333567913481367E-7	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999978311732891	WITHOUT_CLASSIFICATION	2.1688267108401453E-6	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999996863509403	WITHOUT_CLASSIFICATION	3.136490596811832E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999984084199449	WITHOUT_CLASSIFICATION	1.591580055075931E-6	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999235300272	WITHOUT_CLASSIFICATION	7.646997281619175E-8	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999880614480947	WITHOUT_CLASSIFICATION	1.1938551905349033E-5	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999985893441055	WITHOUT_CLASSIFICATION	1.4106558945185466E-6	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9999995298104959	WITHOUT_CLASSIFICATION	4.701895041016284E-7	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.999990158114746	WITHOUT_CLASSIFICATION	9.841885254012027E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999985372575146	WITHOUT_CLASSIFICATION	1.4627424854584172E-6	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999989614475687	WITHOUT_CLASSIFICATION	1.038552431275896E-6	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999941835070755	WITHOUT_CLASSIFICATION	5.816492924560541E-6	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999955801518513	WITHOUT_CLASSIFICATION	4.419848148723612E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999903080641507	WITHOUT_CLASSIFICATION	9.691935849404442E-6	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999979016286493	WITHOUT_CLASSIFICATION	2.0983713506667116E-6	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999806278253595	WITHOUT_CLASSIFICATION	1.9372174640641016E-5	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.999998083540081	WITHOUT_CLASSIFICATION	1.9164599190636323E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999995187615411	WITHOUT_CLASSIFICATION	4.812384588861495E-7	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999992945146737	WITHOUT_CLASSIFICATION	7.054853262160282E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999599128675216	WITHOUT_CLASSIFICATION	4.008713247844395E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999997760378783	WITHOUT_CLASSIFICATION	2.2396212170986386E-6	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999943713603487	WITHOUT_CLASSIFICATION	5.628639651174166E-6	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999995640276025	WITHOUT_CLASSIFICATION	4.359723974836232E-7	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999991892313316	WITHOUT_CLASSIFICATION	8.107686684380317E-7	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999946613544584	WITHOUT_CLASSIFICATION	5.338645541671037E-6	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999989219936241	WITHOUT_CLASSIFICATION	1.0780063760213784E-6	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999987241782057	WITHOUT_CLASSIFICATION	1.2758217942431338E-6	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999605854623	WITHOUT_CLASSIFICATION	3.9414537683197605E-8	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999934314503653	WITHOUT_CLASSIFICATION	6.5685496346699295E-6	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999965946046258	WITHOUT_CLASSIFICATION	3.405395374398628E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999989058385487	WITHOUT_CLASSIFICATION	1.0941614512721037E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999978875952923	WITHOUT_CLASSIFICATION	2.112404707699042E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999981849518136	WITHOUT_CLASSIFICATION	1.8150481864602568E-6	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999988265995889	WITHOUT_CLASSIFICATION	1.1734004110363872E-6	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.999999289447219	WITHOUT_CLASSIFICATION	7.105527809999883E-7	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9999912608505972	WITHOUT_CLASSIFICATION	8.739149402808764E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999916940184034	WITHOUT_CLASSIFICATION	8.305981596593136E-6	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999994796512421	WITHOUT_CLASSIFICATION	5.2034875779848E-7	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999997977272735	WITHOUT_CLASSIFICATION	2.0227272635045103E-7	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999978816102595	WITHOUT_CLASSIFICATION	2.118389740553264E-6	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999997369350168	WITHOUT_CLASSIFICATION	2.6306498325181596E-7	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999994832893585	WITHOUT_CLASSIFICATION	5.167106414386341E-7	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.999996302047971	WITHOUT_CLASSIFICATION	3.6979520291319473E-6	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999997949654335	WITHOUT_CLASSIFICATION	2.0503456650857488E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999841334248039	WITHOUT_CLASSIFICATION	1.5866575196179434E-5	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.99990707444638	WITHOUT_CLASSIFICATION	9.292555362002368E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999417449435581	WITHOUT_CLASSIFICATION	5.825505644185913E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999789545173894	WITHOUT_CLASSIFICATION	2.1045482610625707E-5	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999815017618634	WITHOUT_CLASSIFICATION	1.849823813655815E-5	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999937093387891	WITHOUT_CLASSIFICATION	6.29066121082327E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999996739332413	WITHOUT_CLASSIFICATION	3.26066758715383E-7	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999996739332413	WITHOUT_CLASSIFICATION	3.26066758715383E-7	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999992115179385	WITHOUT_CLASSIFICATION	7.884820614259579E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999967735979802	WITHOUT_CLASSIFICATION	3.226402019827333E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999605033523853	WITHOUT_CLASSIFICATION	3.949664761470848E-5	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999995435863946	WITHOUT_CLASSIFICATION	4.5641360529554334E-7	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999964075582731	WITHOUT_CLASSIFICATION	3.5924417268049135E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999995951315896	WITHOUT_CLASSIFICATION	4.0486841031534364E-7	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9999908135578072	WITHOUT_CLASSIFICATION	9.186442192848984E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999992884369088	WITHOUT_CLASSIFICATION	7.115630913168274E-7	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.999998165680352	WITHOUT_CLASSIFICATION	1.834319647931402E-6	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.999996021117075	WITHOUT_CLASSIFICATION	3.9788829250315875E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999986917287604	WITHOUT_CLASSIFICATION	1.3082712395171598E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999986917287604	WITHOUT_CLASSIFICATION	1.3082712395171598E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999945628029777	WITHOUT_CLASSIFICATION	5.4371970222930024E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999871748766274	WITHOUT_CLASSIFICATION	1.28251233726344E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999988055299139	WITHOUT_CLASSIFICATION	1.1944700860631017E-6	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999998663429874	WITHOUT_CLASSIFICATION	1.3365701260433425E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.999999928679743	WITHOUT_CLASSIFICATION	7.132025695566586E-8	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999972443077537	WITHOUT_CLASSIFICATION	2.755692246209673E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999995159114627	WITHOUT_CLASSIFICATION	4.840885372128504E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9999787054299379	WITHOUT_CLASSIFICATION	2.1294570061982797E-5	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999997474822644	WITHOUT_CLASSIFICATION	2.525177356171848E-7	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9999996120699459	WITHOUT_CLASSIFICATION	3.879300540468489E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999669816393929	WITHOUT_CLASSIFICATION	3.301836060707438E-5	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999908732317903	WITHOUT_CLASSIFICATION	9.1267682096909E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999963258668315	WITHOUT_CLASSIFICATION	3.674133168532897E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999963258668315	WITHOUT_CLASSIFICATION	3.674133168532897E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999753708353619	WITHOUT_CLASSIFICATION	2.4629164637974915E-5	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9994989453389891	WITHOUT_CLASSIFICATION	5.010546610109182E-4	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999572317892661	WITHOUT_CLASSIFICATION	4.276821073397396E-5	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999992008933435	WITHOUT_CLASSIFICATION	7.991066565980352E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999985679999851	WITHOUT_CLASSIFICATION	1.43200001490005E-6	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.999989330546597	WITHOUT_CLASSIFICATION	1.06694534029851E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999932428958029	WITHOUT_CLASSIFICATION	6.757104197068416E-6	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999980155981459	WITHOUT_CLASSIFICATION	1.9844018539513906E-6	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9999417588452966	WITHOUT_CLASSIFICATION	5.824115470346467E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999987016493571	WITHOUT_CLASSIFICATION	1.2983506429012727E-6	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999988055299139	WITHOUT_CLASSIFICATION	1.1944700860631017E-6	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999991034469526	WITHOUT_CLASSIFICATION	8.965530473118748E-7	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.999974009639645	WITHOUT_CLASSIFICATION	2.5990360354896737E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999943970376185	WITHOUT_CLASSIFICATION	5.6029623815690285E-6	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999825618342	WITHOUT_CLASSIFICATION	1.7438165823351074E-8	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999986311970898	WITHOUT_CLASSIFICATION	1.368802910328619E-6	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999998900825945	WITHOUT_CLASSIFICATION	1.0991740555615259E-7	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999969187919163	WITHOUT_CLASSIFICATION	3.081208083675291E-6	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999982157404569	WITHOUT_CLASSIFICATION	1.7842595431572897E-6	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999998750042456	WITHOUT_CLASSIFICATION	1.2499575439134947E-7	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999981682054006	WITHOUT_CLASSIFICATION	1.8317945994265986E-6	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999953195453171	WITHOUT_CLASSIFICATION	4.680454682983734E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999982324869952	WITHOUT_CLASSIFICATION	1.7675130047949169E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999999033969756	WITHOUT_CLASSIFICATION	9.660302429102529E-8	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999882768119184	WITHOUT_CLASSIFICATION	1.1723188081602455E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999983944320564	WITHOUT_CLASSIFICATION	1.6055679435981463E-6	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999993957331266	WITHOUT_CLASSIFICATION	6.042668734861209E-7	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.999991217243861	WITHOUT_CLASSIFICATION	8.78275613905926E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999766210948838	WITHOUT_CLASSIFICATION	2.3378905116096068E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999856530894256	WITHOUT_CLASSIFICATION	1.434691057439691E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999984198695808	WITHOUT_CLASSIFICATION	1.5801304191050633E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999995955223384	WITHOUT_CLASSIFICATION	4.044776615250833E-7	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999889346009804	WITHOUT_CLASSIFICATION	1.106539901966747E-5	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999720430884796	WITHOUT_CLASSIFICATION	2.79569115203128E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9998363697102832	WITHOUT_CLASSIFICATION	1.6363028971672287E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999933213629693	WITHOUT_CLASSIFICATION	6.678637030662992E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999978384085688	WITHOUT_CLASSIFICATION	2.1615914312144676E-6	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999918125943769	WITHOUT_CLASSIFICATION	8.187405623188266E-6	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.999999458253838	WITHOUT_CLASSIFICATION	5.417461620047961E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999971067057078	WITHOUT_CLASSIFICATION	2.8932942922132752E-6	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999995318833605	WITHOUT_CLASSIFICATION	4.6811663947246664E-7	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999963819457434	WITHOUT_CLASSIFICATION	3.6180542566472795E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9999963819457434	WITHOUT_CLASSIFICATION	3.6180542566472795E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999712700594998	WITHOUT_CLASSIFICATION	2.87299405002799E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999894263482565	WITHOUT_CLASSIFICATION	1.057365174345051E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999853612669621	WITHOUT_CLASSIFICATION	1.4638733037789548E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999926105649465	WITHOUT_CLASSIFICATION	7.3894350534464464E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999995424791925	WITHOUT_CLASSIFICATION	4.5752080750129575E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999943562320628	WITHOUT_CLASSIFICATION	5.643767937261422E-6	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999997786134624	WITHOUT_CLASSIFICATION	2.2138653760547885E-6	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999842263301647	WITHOUT_CLASSIFICATION	1.577366983529932E-5	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9999996433071228	WITHOUT_CLASSIFICATION	3.5669287730478464E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999998637198066	WITHOUT_CLASSIFICATION	1.3628019345030713E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999901926043571	WITHOUT_CLASSIFICATION	9.807395642863023E-6	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9999997092839815	WITHOUT_CLASSIFICATION	2.907160185841121E-7	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999193208578971	WITHOUT_CLASSIFICATION	8.067914210292036E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999997498618374	WITHOUT_CLASSIFICATION	2.501381625782237E-7	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999990630294499	WITHOUT_CLASSIFICATION	9.369705501558037E-7	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999981975629042	WITHOUT_CLASSIFICATION	1.8024370958552516E-6	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999932048533103	WITHOUT_CLASSIFICATION	6.7951466896832776E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999987082737931	WITHOUT_CLASSIFICATION	1.2917262069709596E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999993963940333	WITHOUT_CLASSIFICATION	6.036059667324789E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999991795498493	WITHOUT_CLASSIFICATION	8.204501507688501E-7	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999991795498493	WITHOUT_CLASSIFICATION	8.204501507688501E-7	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999995633013107	WITHOUT_CLASSIFICATION	4.3669868944228015E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999983632566164	WITHOUT_CLASSIFICATION	1.6367433836426615E-6	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999396678594842	WITHOUT_CLASSIFICATION	6.033214051571356E-5	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999992234839458	WITHOUT_CLASSIFICATION	7.765160542917367E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999995972500774	WITHOUT_CLASSIFICATION	4.027499226540912E-7	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999995003039178	WITHOUT_CLASSIFICATION	4.996960821027247E-7	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999998336748621	WITHOUT_CLASSIFICATION	1.663251378284367E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999998173511659	WITHOUT_CLASSIFICATION	1.8264883412091243E-7	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999995215768372	WITHOUT_CLASSIFICATION	4.784231626672831E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999770895709	WITHOUT_CLASSIFICATION	2.2910429110619938E-8	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999993618054701	WITHOUT_CLASSIFICATION	6.381945298344675E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.999979500116191	WITHOUT_CLASSIFICATION	2.049988380903456E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.999999234168626	WITHOUT_CLASSIFICATION	7.658313739111347E-7	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999649285491	WITHOUT_CLASSIFICATION	3.507145080398728E-8	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999944850866955	WITHOUT_CLASSIFICATION	5.514913304469996E-6	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999765199747648	WITHOUT_CLASSIFICATION	2.3480025235313587E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999950038852589	WITHOUT_CLASSIFICATION	4.996114741177498E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999991820523921	WITHOUT_CLASSIFICATION	8.179476079313234E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999991570549914	WITHOUT_CLASSIFICATION	8.429450085796172E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999813332971488	WITHOUT_CLASSIFICATION	1.8666702851233557E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999995967762028	WITHOUT_CLASSIFICATION	4.032237971906782E-6	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999923883960631	WITHOUT_CLASSIFICATION	7.611603936933414E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999883243886591	WITHOUT_CLASSIFICATION	1.16756113407785E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.998075135262842	WITHOUT_CLASSIFICATION	0.0019248647371580725	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999944381671407	WITHOUT_CLASSIFICATION	5.561832859286539E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999096891450026	WITHOUT_CLASSIFICATION	9.031085499745774E-5	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999732434841674	WITHOUT_CLASSIFICATION	2.6756515832506686E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999944517298129	WITHOUT_CLASSIFICATION	5.548270186964669E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999880627346504	WITHOUT_CLASSIFICATION	1.193726534958066E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999867400171154	WITHOUT_CLASSIFICATION	1.3259982884499983E-5	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999973257952112	WITHOUT_CLASSIFICATION	2.6742047887718924E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999993913142439	WITHOUT_CLASSIFICATION	6.086857560877518E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999992836416199	WITHOUT_CLASSIFICATION	7.163583800330813E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999932244511011	WITHOUT_CLASSIFICATION	6.775548898999179E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.999997265239287	WITHOUT_CLASSIFICATION	2.7347607131181765E-6	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9961663831800123	WITHOUT_CLASSIFICATION	0.003833616819987689	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9965859736692183	WITHOUT_CLASSIFICATION	0.0034140263307817797	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999989480162298	WITHOUT_CLASSIFICATION	1.0519837701408049E-6	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999926513324644	WITHOUT_CLASSIFICATION	7.348667535555824E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999998844767402	WITHOUT_CLASSIFICATION	1.155232599360902E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999952171317835	WITHOUT_CLASSIFICATION	4.782868216485833E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999870863252277	WITHOUT_CLASSIFICATION	1.2913674772270528E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999959387516414	WITHOUT_CLASSIFICATION	4.061248358662992E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999623251543415	WITHOUT_CLASSIFICATION	3.767484565862098E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999883514015119	WITHOUT_CLASSIFICATION	1.1648598488116348E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999623251543415	WITHOUT_CLASSIFICATION	3.767484565862098E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9990561138064261	WITHOUT_CLASSIFICATION	9.438861935737791E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9193629714259163	WITHOUT_CLASSIFICATION	0.08063702857408372	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999993756023634	WITHOUT_CLASSIFICATION	6.243976366771877E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.798123170823847	DEFECT	0.20187682917615302	WITHOUT_CLASSIFICATION
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.999979099770046	WITHOUT_CLASSIFICATION	2.0900229954058016E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999986812534495	WITHOUT_CLASSIFICATION	1.3187465505076457E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999990811579269	WITHOUT_CLASSIFICATION	9.188420730222069E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999548071398258	WITHOUT_CLASSIFICATION	4.519286017419643E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999948162045073	WITHOUT_CLASSIFICATION	5.183795492750324E-6	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9860668192775124	WITHOUT_CLASSIFICATION	0.013933180722487585	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9993985569618619	WITHOUT_CLASSIFICATION	6.01443038138077E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999984385418441	WITHOUT_CLASSIFICATION	1.5614581558780904E-6	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999993647680263	WITHOUT_CLASSIFICATION	6.352319736497073E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999920808652062	WITHOUT_CLASSIFICATION	7.919134793840853E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999726456898018	WITHOUT_CLASSIFICATION	2.7354310198184E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.7020322804562766	WITHOUT_CLASSIFICATION	0.29796771954372325	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999847092429092	WITHOUT_CLASSIFICATION	1.529075709086057E-5	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999879363933544	WITHOUT_CLASSIFICATION	1.2063606645671332E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999975326945753	WITHOUT_CLASSIFICATION	2.467305424786421E-6	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.999975576901668	WITHOUT_CLASSIFICATION	2.4423098331954097E-5	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999819814973767	WITHOUT_CLASSIFICATION	1.8018502623339907E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999994805095904	WITHOUT_CLASSIFICATION	5.194904096621607E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999889968192391	WITHOUT_CLASSIFICATION	1.1003180760902633E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999976969614587	WITHOUT_CLASSIFICATION	2.3030385412815556E-6	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999977274661224	WITHOUT_CLASSIFICATION	2.2725338775783933E-6	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.999997467595339	WITHOUT_CLASSIFICATION	2.5324046609101835E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999981157374761	WITHOUT_CLASSIFICATION	1.8842625239440597E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999975323498016	WITHOUT_CLASSIFICATION	2.467650198354172E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999996631446137	WITHOUT_CLASSIFICATION	3.3685538629844005E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999023638490345	WITHOUT_CLASSIFICATION	9.76361509655325E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999556369930702	WITHOUT_CLASSIFICATION	4.436300692980382E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999682216686353	WITHOUT_CLASSIFICATION	3.177833136465929E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999698139870494	WITHOUT_CLASSIFICATION	3.0186012950497207E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999904146118052	WITHOUT_CLASSIFICATION	9.585388194748928E-6	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9999953073025789	WITHOUT_CLASSIFICATION	4.692697421079675E-6	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999821359547689	WITHOUT_CLASSIFICATION	1.7864045231068057E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999777122033003	WITHOUT_CLASSIFICATION	2.228779669972065E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999989568395292	WITHOUT_CLASSIFICATION	1.043160470787694E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999984803723565	WITHOUT_CLASSIFICATION	1.5196276435095736E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9998997529019151	WITHOUT_CLASSIFICATION	1.0024709808482554E-4	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999918852141441	WITHOUT_CLASSIFICATION	8.114785855996981E-6	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999680956524291	WITHOUT_CLASSIFICATION	3.190434757096612E-5	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999998704523588	WITHOUT_CLASSIFICATION	1.2954764126273558E-7	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999988423098914	WITHOUT_CLASSIFICATION	1.1576901086094584E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999988423098914	WITHOUT_CLASSIFICATION	1.1576901086094584E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999953793303653	WITHOUT_CLASSIFICATION	4.620669634743746E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.999994525493337	WITHOUT_CLASSIFICATION	5.474506663024364E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9999524477570481	WITHOUT_CLASSIFICATION	4.755224295181116E-5	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999973127645785	WITHOUT_CLASSIFICATION	2.687235421578214E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999994890320842	WITHOUT_CLASSIFICATION	5.109679158240572E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999997702268296	WITHOUT_CLASSIFICATION	2.2977317027970135E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999581872248685	WITHOUT_CLASSIFICATION	4.181277513145995E-5	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999827073641121	WITHOUT_CLASSIFICATION	1.72926358879232E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.999999940439189	WITHOUT_CLASSIFICATION	5.956081093154853E-8	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999949495700248	WITHOUT_CLASSIFICATION	5.050429975215251E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999072736209	WITHOUT_CLASSIFICATION	9.272637910611391E-8	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9995783235620155	WITHOUT_CLASSIFICATION	4.21676437984468E-4	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999366313816438	WITHOUT_CLASSIFICATION	6.3368618356179E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999987273579303	WITHOUT_CLASSIFICATION	1.2726420697347519E-6	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.999999612038678	WITHOUT_CLASSIFICATION	3.8796132197131673E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999993645407177	WITHOUT_CLASSIFICATION	6.354592822298176E-7	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999969017604029	WITHOUT_CLASSIFICATION	3.0982395970638623E-6	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999995313177917	WITHOUT_CLASSIFICATION	4.6868220823905943E-7	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.999984171686086	WITHOUT_CLASSIFICATION	1.5828313914022606E-5	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999981109463002	WITHOUT_CLASSIFICATION	1.8890536997362397E-6	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.976505965530092	WITHOUT_CLASSIFICATION	0.023494034469908116	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9567258440699339	WITHOUT_CLASSIFICATION	0.04327415593006613	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999885615791205	WITHOUT_CLASSIFICATION	1.1438420879517393E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999985433314711	WITHOUT_CLASSIFICATION	1.4566685288431683E-6	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9999990626955789	WITHOUT_CLASSIFICATION	9.373044209939943E-7	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999719954448	WITHOUT_CLASSIFICATION	2.800455527899814E-8	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999993858175618	WITHOUT_CLASSIFICATION	6.141824381861424E-6	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9999751827235961	WITHOUT_CLASSIFICATION	2.4817276403884118E-5	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999993535221829	WITHOUT_CLASSIFICATION	6.464778170993633E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999797844973666	WITHOUT_CLASSIFICATION	2.021550263346644E-5	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999923241129541	WITHOUT_CLASSIFICATION	7.67588704588494E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999732199290773	WITHOUT_CLASSIFICATION	2.6780070922721676E-5	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999497729692	WITHOUT_CLASSIFICATION	5.0227030655527606E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999961667441905	WITHOUT_CLASSIFICATION	3.833255809490505E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999998829349648	WITHOUT_CLASSIFICATION	1.1706503523594715E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999997763915544	WITHOUT_CLASSIFICATION	2.2360844566895753E-7	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999582164375086	WITHOUT_CLASSIFICATION	4.178356249146297E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999829953470174	WITHOUT_CLASSIFICATION	1.700465298264423E-5	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9998374389061427	WITHOUT_CLASSIFICATION	1.6256109385726268E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999634331400774	WITHOUT_CLASSIFICATION	3.656685992251863E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999971343911682	WITHOUT_CLASSIFICATION	2.8656088318022347E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9999974129641576	WITHOUT_CLASSIFICATION	2.587035842402706E-6	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.999999476557951	WITHOUT_CLASSIFICATION	5.234420490232396E-7	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.99999996837934	WITHOUT_CLASSIFICATION	3.1620659972745544E-8	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999871202582515	WITHOUT_CLASSIFICATION	1.2879741748532574E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995529307102	WITHOUT_CLASSIFICATION	4.470692898805348E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999991690407251	WITHOUT_CLASSIFICATION	8.309592749550526E-7	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999853580179997	WITHOUT_CLASSIFICATION	1.4641982000205016E-5	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999616678100366	WITHOUT_CLASSIFICATION	3.8332189963378725E-5	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999922404215831	WITHOUT_CLASSIFICATION	7.759578416865709E-6	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999980802939121	WITHOUT_CLASSIFICATION	1.9197060879398277E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999999254976715	WITHOUT_CLASSIFICATION	7.450232854123926E-8	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999611488213	WITHOUT_CLASSIFICATION	3.885117877832105E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999998108060603	WITHOUT_CLASSIFICATION	1.8919393983334194E-7	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999786127832287	WITHOUT_CLASSIFICATION	2.1387216771261315E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.999998674150351	WITHOUT_CLASSIFICATION	1.32584964898417E-6	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999995147550352	WITHOUT_CLASSIFICATION	4.852449647386113E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999727206688734	WITHOUT_CLASSIFICATION	2.72793311265945E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999998849628925	WITHOUT_CLASSIFICATION	1.1503710756020725E-7	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999956969871406	WITHOUT_CLASSIFICATION	4.3030128594189004E-6	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.999999952838481	WITHOUT_CLASSIFICATION	4.716151906710988E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999991448549088	WITHOUT_CLASSIFICATION	8.551450913189314E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999994809508473	WITHOUT_CLASSIFICATION	5.190491525323573E-7	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999985275898401	WITHOUT_CLASSIFICATION	1.472410159946469E-6	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999858150585752	WITHOUT_CLASSIFICATION	1.4184941424763083E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999980680138847	WITHOUT_CLASSIFICATION	1.9319861153006515E-5	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999830070102685	WITHOUT_CLASSIFICATION	1.6992989731497285E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999984123199743	WITHOUT_CLASSIFICATION	1.5876800256342408E-6	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999965906074165	WITHOUT_CLASSIFICATION	3.409392583469566E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999969888178505	WITHOUT_CLASSIFICATION	3.0111821495990827E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999971554337299	WITHOUT_CLASSIFICATION	2.8445662700666946E-6	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999897155126392	WITHOUT_CLASSIFICATION	1.0284487360747638E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999997870012831	WITHOUT_CLASSIFICATION	2.1299871699739018E-7	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999198519320709	WITHOUT_CLASSIFICATION	8.014806792914884E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9999817926597245	WITHOUT_CLASSIFICATION	1.820734027550856E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999779037025432	WITHOUT_CLASSIFICATION	2.2096297456714784E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9999805808512227	WITHOUT_CLASSIFICATION	1.94191487772844E-5	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.999978502870276	WITHOUT_CLASSIFICATION	2.149712972400288E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9999746678197403	WITHOUT_CLASSIFICATION	2.5332180259713773E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9999763597321663	WITHOUT_CLASSIFICATION	2.3640267833795436E-5	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999752856937296	WITHOUT_CLASSIFICATION	2.471430627028915E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9999759861007709	WITHOUT_CLASSIFICATION	2.4013899229140652E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9999812629872495	WITHOUT_CLASSIFICATION	1.8737012750530978E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999765605371982	WITHOUT_CLASSIFICATION	2.34394628017154E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999791384874064	WITHOUT_CLASSIFICATION	2.0861512593685806E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9999801901672718	WITHOUT_CLASSIFICATION	1.9809832728195176E-5	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999793408249162	WITHOUT_CLASSIFICATION	2.0659175083650198E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9999773388826382	WITHOUT_CLASSIFICATION	2.2661117361840283E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.999977161250347	WITHOUT_CLASSIFICATION	2.2838749653031126E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9999777991272981	WITHOUT_CLASSIFICATION	2.2200872701875816E-5	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999781669431376	WITHOUT_CLASSIFICATION	2.1833056862446608E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.999984785424858	WITHOUT_CLASSIFICATION	1.5214575141937353E-5	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9999845026740085	WITHOUT_CLASSIFICATION	1.5497325991444475E-5	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999992771826846	WITHOUT_CLASSIFICATION	7.228173154703505E-7	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999998383949473	WITHOUT_CLASSIFICATION	1.6160505276115553E-7	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999991215329364	WITHOUT_CLASSIFICATION	8.784670636068806E-7	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999984603869695	WITHOUT_CLASSIFICATION	1.539613030443902E-6	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9999985645903171	WITHOUT_CLASSIFICATION	1.4354096828391924E-6	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999998974271008	WITHOUT_CLASSIFICATION	1.0257289914538977E-7	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999999293950649	WITHOUT_CLASSIFICATION	7.060493506476647E-8	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.999987904830925	WITHOUT_CLASSIFICATION	1.2095169074956203E-5	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999998978593641	WITHOUT_CLASSIFICATION	1.0214063590146824E-6	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999958279241953	WITHOUT_CLASSIFICATION	4.172075804726208E-6	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.7975721308027685	DEFECT	0.20242786919723152	WITHOUT_CLASSIFICATION
// integer division	WITHOUT_CLASSIFICATION	0.9999978169551546	WITHOUT_CLASSIFICATION	2.183044845495128E-6	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999954990976718	WITHOUT_CLASSIFICATION	4.50090232820082E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999981920458672	WITHOUT_CLASSIFICATION	1.8079541327685765E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999981920458672	WITHOUT_CLASSIFICATION	1.8079541327685765E-6	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999998489940551	WITHOUT_CLASSIFICATION	1.51005944940426E-7	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999719725388899	WITHOUT_CLASSIFICATION	2.802746111016089E-5	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999999997316081	WITHOUT_CLASSIFICATION	2.6839186508551127E-10	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999977050149294	WITHOUT_CLASSIFICATION	2.2949850706394005E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999999643117212	WITHOUT_CLASSIFICATION	3.5688278752664885E-8	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999972491487861	WITHOUT_CLASSIFICATION	2.7508512139855645E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999990140366412	WITHOUT_CLASSIFICATION	9.859633588359714E-7	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999997918361923	WITHOUT_CLASSIFICATION	2.0816380770784164E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999558035549349	WITHOUT_CLASSIFICATION	4.419644506527701E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999988245111805	WITHOUT_CLASSIFICATION	1.1754888194743908E-6	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9998817596136947	WITHOUT_CLASSIFICATION	1.18240386305254E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999985596224812	WITHOUT_CLASSIFICATION	1.4403775188981744E-6	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999935192647447	WITHOUT_CLASSIFICATION	6.480735255351683E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9996580844851595	WITHOUT_CLASSIFICATION	3.4191551484064357E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999983662489351	WITHOUT_CLASSIFICATION	1.6337510648986156E-6	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999962442726075	WITHOUT_CLASSIFICATION	3.755727392508269E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999996687087856	WITHOUT_CLASSIFICATION	3.3129121441009757E-7	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999972798524698	WITHOUT_CLASSIFICATION	2.7201475302397042E-6	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9999993820571375	WITHOUT_CLASSIFICATION	6.17942862451485E-7	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999998205269397	WITHOUT_CLASSIFICATION	1.7947306031827288E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.999999627988508	WITHOUT_CLASSIFICATION	3.7201149194370986E-7	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999999496216978	WITHOUT_CLASSIFICATION	5.037830212023981E-8	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999985065149276	WITHOUT_CLASSIFICATION	1.4934850723508728E-6	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9999899939053823	WITHOUT_CLASSIFICATION	1.000609461763673E-5	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.99999981005817	WITHOUT_CLASSIFICATION	1.8994183009178297E-7	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999954264318688	WITHOUT_CLASSIFICATION	4.573568131318247E-6	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999960464849843	WITHOUT_CLASSIFICATION	3.953515015701174E-6	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999998314695936	WITHOUT_CLASSIFICATION	1.6853040636780874E-7	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9999998241489942	WITHOUT_CLASSIFICATION	1.758510057801434E-7	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9999958310052459	WITHOUT_CLASSIFICATION	4.168994754029949E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999959508119586	WITHOUT_CLASSIFICATION	4.049188041374649E-6	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999782339115365	WITHOUT_CLASSIFICATION	2.1766088463536428E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9999976849671983	WITHOUT_CLASSIFICATION	2.3150328016463066E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999980178187602	WITHOUT_CLASSIFICATION	1.982181239832553E-6	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999989005493145	WITHOUT_CLASSIFICATION	1.099450685497392E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999937966523519	WITHOUT_CLASSIFICATION	6.203347648109598E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999870994901187	WITHOUT_CLASSIFICATION	1.2900509881330481E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.999999077053248	WITHOUT_CLASSIFICATION	9.229467521133401E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999136476745228	WITHOUT_CLASSIFICATION	8.635232547713532E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999998694912728	WITHOUT_CLASSIFICATION	1.30508727062684E-7	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999967508642554	WITHOUT_CLASSIFICATION	3.2491357444707237E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999999124654246	WITHOUT_CLASSIFICATION	8.753457528826367E-8	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999608680189055	WITHOUT_CLASSIFICATION	3.91319810946445E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999926604456022	WITHOUT_CLASSIFICATION	7.339554397891212E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999926604456022	WITHOUT_CLASSIFICATION	7.339554397891212E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999992521168519	WITHOUT_CLASSIFICATION	7.478831480933563E-7	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999978998642066	WITHOUT_CLASSIFICATION	2.1001357933036102E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999994186692851	WITHOUT_CLASSIFICATION	5.813307148430774E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999906540821054	WITHOUT_CLASSIFICATION	9.345917894498784E-6	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999552487170444	WITHOUT_CLASSIFICATION	4.4751282955472196E-5	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999974020321167	WITHOUT_CLASSIFICATION	2.597967883194625E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999068037326	WITHOUT_CLASSIFICATION	9.319626731264081E-8	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9998886062956348	WITHOUT_CLASSIFICATION	1.1139370436521283E-4	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999833837679055	WITHOUT_CLASSIFICATION	1.6616232094392907E-5	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999724343020249	WITHOUT_CLASSIFICATION	2.75656979751993E-5	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.999966943183234	WITHOUT_CLASSIFICATION	3.3056816766144515E-5	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999912627150117	WITHOUT_CLASSIFICATION	8.737284988279818E-6	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999498779001931	WITHOUT_CLASSIFICATION	5.0122099806925066E-5	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999899932373955	WITHOUT_CLASSIFICATION	1.0006762604507467E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.6108135552799994	WITHOUT_CLASSIFICATION	0.3891864447200007	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999946161778048	WITHOUT_CLASSIFICATION	5.3838221951456195E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.999883371667437	WITHOUT_CLASSIFICATION	1.1662833256295883E-4	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999964035151759	WITHOUT_CLASSIFICATION	3.5964848239893234E-6	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999998415818707	WITHOUT_CLASSIFICATION	1.5841812918781145E-7	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999359446312106	WITHOUT_CLASSIFICATION	6.405536878934427E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999967800044032	WITHOUT_CLASSIFICATION	3.2199955966898852E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999967800044032	WITHOUT_CLASSIFICATION	3.2199955966898852E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999962905911869	WITHOUT_CLASSIFICATION	3.7094088130702924E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999748134299855	WITHOUT_CLASSIFICATION	2.5186570014471106E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999956437029243	WITHOUT_CLASSIFICATION	4.356297075656227E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999976477002248	WITHOUT_CLASSIFICATION	2.3522997751052447E-6	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999950426541341	WITHOUT_CLASSIFICATION	4.95734586599468E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999997732620589	WITHOUT_CLASSIFICATION	2.2673794113847565E-7	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9997787928850393	WITHOUT_CLASSIFICATION	2.21207114960755E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999989487187335	WITHOUT_CLASSIFICATION	1.0512812665120272E-6	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999980645224639	WITHOUT_CLASSIFICATION	1.935477536039486E-6	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.999999747155603	WITHOUT_CLASSIFICATION	2.5284439701722356E-7	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999438550444222	WITHOUT_CLASSIFICATION	5.6144955577870856E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999991942415253	WITHOUT_CLASSIFICATION	8.057584746206521E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999998026622495	WITHOUT_CLASSIFICATION	1.9733775039286337E-7	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999381563647848	WITHOUT_CLASSIFICATION	6.184363521523318E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999770333554182	WITHOUT_CLASSIFICATION	2.2966644581823477E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999996011416756	WITHOUT_CLASSIFICATION	3.9885832446013505E-7	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999991379846384	WITHOUT_CLASSIFICATION	8.620153616238298E-7	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999986042701969	WITHOUT_CLASSIFICATION	1.3957298030437684E-6	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9999676539056581	WITHOUT_CLASSIFICATION	3.234609434196791E-5	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999963220499402	WITHOUT_CLASSIFICATION	3.677950059782535E-6	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999961746971151	WITHOUT_CLASSIFICATION	3.825302884893674E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999988646898833	WITHOUT_CLASSIFICATION	1.1353101166656838E-6	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999912713943011	WITHOUT_CLASSIFICATION	8.728605698884627E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999981157374761	WITHOUT_CLASSIFICATION	1.8842625239440597E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999997702268296	WITHOUT_CLASSIFICATION	2.2977317027970135E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999986721243768	WITHOUT_CLASSIFICATION	1.3278756232018503E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9996311281916288	WITHOUT_CLASSIFICATION	3.688718083712243E-4	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999996363960216	WITHOUT_CLASSIFICATION	3.6360397836109356E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999170807367727	WITHOUT_CLASSIFICATION	8.291926322740076E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994974100482	WITHOUT_CLASSIFICATION	5.025899518379463E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999994974100482	WITHOUT_CLASSIFICATION	5.025899518379463E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999992914361805	WITHOUT_CLASSIFICATION	7.085638194097924E-7	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999996658208583	WITHOUT_CLASSIFICATION	3.3417914168777445E-7	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.999999876667634	WITHOUT_CLASSIFICATION	1.2333236601380305E-7	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.999999527298875	WITHOUT_CLASSIFICATION	4.727011250273495E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999991990068142	WITHOUT_CLASSIFICATION	8.009931857975351E-7	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9998588978612798	WITHOUT_CLASSIFICATION	1.4110213872028693E-4	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999997666500533	WITHOUT_CLASSIFICATION	2.3334994682390725E-7	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999776178662	WITHOUT_CLASSIFICATION	2.238213385361505E-8	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999991033579326	WITHOUT_CLASSIFICATION	8.966420673287813E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999975994752859	WITHOUT_CLASSIFICATION	2.4005247141266846E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999896663712611	WITHOUT_CLASSIFICATION	1.0333628738897749E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999971848061976	WITHOUT_CLASSIFICATION	2.815193802417639E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999757114305403	WITHOUT_CLASSIFICATION	2.4288569459709797E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999914386001528	WITHOUT_CLASSIFICATION	8.56139984720638E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999976953641957	WITHOUT_CLASSIFICATION	2.3046358043102938E-6	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999843530329169	WITHOUT_CLASSIFICATION	1.564696708305196E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999697255058	WITHOUT_CLASSIFICATION	3.027449431349109E-8	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999995925128562	WITHOUT_CLASSIFICATION	4.074871438115105E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999994490837427	WITHOUT_CLASSIFICATION	5.50916257164084E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9994628338654714	WITHOUT_CLASSIFICATION	5.371661345286989E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999190266556	WITHOUT_CLASSIFICATION	8.097334429442305E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999994602219747	WITHOUT_CLASSIFICATION	5.397780252680314E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.999991908102765	WITHOUT_CLASSIFICATION	8.091897234995237E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999992682175168	WITHOUT_CLASSIFICATION	7.317824832082234E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999928222463503	WITHOUT_CLASSIFICATION	7.1777536495961875E-6	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.999998800291518	WITHOUT_CLASSIFICATION	1.1997084819887298E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999944057723437	WITHOUT_CLASSIFICATION	5.594227656358713E-6	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999903312241128	WITHOUT_CLASSIFICATION	9.668775887078996E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999978189210562	WITHOUT_CLASSIFICATION	2.181078943740681E-6	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999571310277311	WITHOUT_CLASSIFICATION	4.2868972268924276E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999992437915459	WITHOUT_CLASSIFICATION	7.562084541589195E-7	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999973675667241	WITHOUT_CLASSIFICATION	2.6324332758369995E-6	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999955470115425	WITHOUT_CLASSIFICATION	4.45298845748251E-6	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999919556304954	WITHOUT_CLASSIFICATION	8.044369504650274E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999984618219617	WITHOUT_CLASSIFICATION	1.5381780382668043E-6	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.999999013461694	WITHOUT_CLASSIFICATION	9.86538305989472E-7	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999979786510941	WITHOUT_CLASSIFICATION	2.021348905887894E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9930851334719971	WITHOUT_CLASSIFICATION	0.006914866528002893	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999997932108418	WITHOUT_CLASSIFICATION	2.0678915819131709E-7	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999938684311515	WITHOUT_CLASSIFICATION	6.131568848525535E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999997265037749	WITHOUT_CLASSIFICATION	2.7349622517315855E-7	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999999970384518	WITHOUT_CLASSIFICATION	2.961548197478876E-8	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999962018611476	WITHOUT_CLASSIFICATION	3.798138852461359E-6	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999972121352139	WITHOUT_CLASSIFICATION	2.787864786158734E-6	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999757555298852	WITHOUT_CLASSIFICATION	2.4244470114833117E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.999989219105393	WITHOUT_CLASSIFICATION	1.0780894606940363E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999965453563117	WITHOUT_CLASSIFICATION	3.4546436882650307E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999527937556	WITHOUT_CLASSIFICATION	4.7206244437484455E-8	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999991988161502	WITHOUT_CLASSIFICATION	8.011838498432405E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999990107164595	WITHOUT_CLASSIFICATION	9.892835405365941E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999872268091896	WITHOUT_CLASSIFICATION	1.2773190810503214E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.999945879003684	WITHOUT_CLASSIFICATION	5.412099631591689E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999800331023969	WITHOUT_CLASSIFICATION	1.9966897603082947E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999848339099265	WITHOUT_CLASSIFICATION	1.516609007351415E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999904194109676	WITHOUT_CLASSIFICATION	9.580589032493686E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999927204129	WITHOUT_CLASSIFICATION	7.279587099978853E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999920986666293	WITHOUT_CLASSIFICATION	7.901333370603537E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999954980408053	WITHOUT_CLASSIFICATION	4.501959194650025E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999967883838733	WITHOUT_CLASSIFICATION	3.211616126773889E-6	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999994990576732	WITHOUT_CLASSIFICATION	5.009423268523533E-7	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999816896955072	WITHOUT_CLASSIFICATION	1.8310304492865982E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999872268091896	WITHOUT_CLASSIFICATION	1.2773190810503214E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999800331023969	WITHOUT_CLASSIFICATION	1.9966897603082947E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.999945879003684	WITHOUT_CLASSIFICATION	5.412099631591689E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999670395650752	WITHOUT_CLASSIFICATION	3.296043492477524E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999871524082368	WITHOUT_CLASSIFICATION	1.2847591763170503E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999957625073644	WITHOUT_CLASSIFICATION	4.237492635528569E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999974399446274	WITHOUT_CLASSIFICATION	2.5600553725325933E-6	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999994866830888	WITHOUT_CLASSIFICATION	5.133169112937374E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999991197243395	WITHOUT_CLASSIFICATION	8.802756603189018E-7	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999991922415715	WITHOUT_CLASSIFICATION	8.077584284738234E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999994497597755	WITHOUT_CLASSIFICATION	5.50240224483275E-7	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999910285495085	WITHOUT_CLASSIFICATION	8.971450491465875E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.999995867077464	WITHOUT_CLASSIFICATION	4.132922536038793E-6	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999965532910944	WITHOUT_CLASSIFICATION	3.446708905661358E-6	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9999949364865434	WITHOUT_CLASSIFICATION	5.063513456613479E-6	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999989495214298	WITHOUT_CLASSIFICATION	1.050478570213293E-6	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999992186712825	WITHOUT_CLASSIFICATION	7.813287176148999E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.999974575911394	WITHOUT_CLASSIFICATION	2.5424088605975058E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999960568312644	WITHOUT_CLASSIFICATION	3.943168735691608E-6	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9999915295687365	WITHOUT_CLASSIFICATION	8.470431263549674E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999967886300276	WITHOUT_CLASSIFICATION	3.2113699724331076E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999967886300276	WITHOUT_CLASSIFICATION	3.2113699724331076E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999993196450715	WITHOUT_CLASSIFICATION	6.803549285303174E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999991269426952	WITHOUT_CLASSIFICATION	8.73057304829717E-7	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999998560876117	WITHOUT_CLASSIFICATION	1.4391238825621283E-7	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9997832372301574	WITHOUT_CLASSIFICATION	2.1676276984251798E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999965334548206	WITHOUT_CLASSIFICATION	3.4665451794100676E-6	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999998726341329	WITHOUT_CLASSIFICATION	1.2736586703050724E-7	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999978924573442	WITHOUT_CLASSIFICATION	2.107542655769656E-6	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999880748943727	WITHOUT_CLASSIFICATION	1.1925105627404806E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999976544719591	WITHOUT_CLASSIFICATION	2.345528040937857E-6	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999997920811546	WITHOUT_CLASSIFICATION	2.0791884548673257E-7	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999998152572644	WITHOUT_CLASSIFICATION	1.847427355611339E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.999995095313494	WITHOUT_CLASSIFICATION	4.904686506040621E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999969058613456	WITHOUT_CLASSIFICATION	3.0941386544489033E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999962416751582	WITHOUT_CLASSIFICATION	3.758324841937857E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999958698020112	WITHOUT_CLASSIFICATION	4.130197988860586E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999987716312496	WITHOUT_CLASSIFICATION	1.2283687504472062E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999992482610732	WITHOUT_CLASSIFICATION	7.517389268054876E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999988978451495	WITHOUT_CLASSIFICATION	1.1021548504466889E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999998499769247	WITHOUT_CLASSIFICATION	1.5002307530481215E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.999994844656817	WITHOUT_CLASSIFICATION	5.1553431829982315E-6	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999949747552334	WITHOUT_CLASSIFICATION	5.025244766647605E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999981803047947	WITHOUT_CLASSIFICATION	1.8196952053174857E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997353405532	WITHOUT_CLASSIFICATION	2.6465944678681234E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997353405532	WITHOUT_CLASSIFICATION	2.6465944678681234E-7	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.999997899564097	WITHOUT_CLASSIFICATION	2.100435903005262E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999952277141859	WITHOUT_CLASSIFICATION	4.772285814107279E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999965802179077	WITHOUT_CLASSIFICATION	3.419782092315124E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.999995522913075	WITHOUT_CLASSIFICATION	4.477086924893948E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999987751623013	WITHOUT_CLASSIFICATION	1.2248376987025758E-6	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999987751623013	WITHOUT_CLASSIFICATION	1.2248376987025758E-6	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999994947329643	WITHOUT_CLASSIFICATION	5.052670356822314E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999982046248367	WITHOUT_CLASSIFICATION	1.795375163213264E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985381996668	WITHOUT_CLASSIFICATION	1.4618003332403166E-6	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999981978583651	WITHOUT_CLASSIFICATION	1.802141634836921E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997266873136	WITHOUT_CLASSIFICATION	2.7331268640767776E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999906913620531	WITHOUT_CLASSIFICATION	9.30863794689334E-6	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9999897093353235	WITHOUT_CLASSIFICATION	1.0290664676534916E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999126474484675	WITHOUT_CLASSIFICATION	8.735255153246676E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999657874831146	WITHOUT_CLASSIFICATION	3.421251688535407E-5	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999998219080446	WITHOUT_CLASSIFICATION	1.780919554638761E-7	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999992997415431	WITHOUT_CLASSIFICATION	7.002584568529798E-7	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999994888784908	WITHOUT_CLASSIFICATION	5.111215092222817E-7	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999966066751182	WITHOUT_CLASSIFICATION	3.393324881747538E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999982457813661	WITHOUT_CLASSIFICATION	1.7542186339377506E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999987716312496	WITHOUT_CLASSIFICATION	1.2283687504472062E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997353405532	WITHOUT_CLASSIFICATION	2.6465944678681234E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999906913620531	WITHOUT_CLASSIFICATION	9.30863794689334E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999344618918729	WITHOUT_CLASSIFICATION	6.553810812715017E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999344618918729	WITHOUT_CLASSIFICATION	6.553810812715017E-5	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999847694402317	WITHOUT_CLASSIFICATION	1.523055976827912E-5	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999788639548	WITHOUT_CLASSIFICATION	2.113604514763343E-8	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999921850555383	WITHOUT_CLASSIFICATION	7.81494446170577E-6	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999994557674593	WITHOUT_CLASSIFICATION	5.442325407107968E-7	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999969750836516	WITHOUT_CLASSIFICATION	3.0249163485170785E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999999751729207	WITHOUT_CLASSIFICATION	2.4827079291553498E-8	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9998688750439116	WITHOUT_CLASSIFICATION	1.3112495608824488E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999523066628635	WITHOUT_CLASSIFICATION	4.769333713647131E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999972631678	WITHOUT_CLASSIFICATION	2.7368321328906274E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999982748720446	WITHOUT_CLASSIFICATION	1.7251279554263584E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999964128475569	WITHOUT_CLASSIFICATION	3.5871524431676995E-6	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999915806311	WITHOUT_CLASSIFICATION	8.419368795983154E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999989699629239	WITHOUT_CLASSIFICATION	1.0300370760103265E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999992482610732	WITHOUT_CLASSIFICATION	7.517389268054876E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997353405532	WITHOUT_CLASSIFICATION	2.6465944678681234E-7	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999982046248367	WITHOUT_CLASSIFICATION	1.795375163213264E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985381996668	WITHOUT_CLASSIFICATION	1.4618003332403166E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985381996668	WITHOUT_CLASSIFICATION	1.4618003332403166E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997266873136	WITHOUT_CLASSIFICATION	2.7331268640767776E-7	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999906913620531	WITHOUT_CLASSIFICATION	9.30863794689334E-6	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999906913620531	WITHOUT_CLASSIFICATION	9.30863794689334E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999344618918729	WITHOUT_CLASSIFICATION	6.553810812715017E-5	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999732310851158	WITHOUT_CLASSIFICATION	2.6768914884261145E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9997982441480551	WITHOUT_CLASSIFICATION	2.0175585194491356E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999651836923434	WITHOUT_CLASSIFICATION	3.481630765644552E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.999997845917845	WITHOUT_CLASSIFICATION	2.1540821549624646E-6	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.999999468745839	WITHOUT_CLASSIFICATION	5.312541609331314E-7	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9998782710082303	WITHOUT_CLASSIFICATION	1.2172899176964157E-4	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999938739408697	WITHOUT_CLASSIFICATION	6.126059130387703E-6	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999819102414699	WITHOUT_CLASSIFICATION	1.808975853019596E-5	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999973656747766	WITHOUT_CLASSIFICATION	2.634325223489007E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999982046248367	WITHOUT_CLASSIFICATION	1.795375163213264E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985381996668	WITHOUT_CLASSIFICATION	1.4618003332403166E-6	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999985381996668	WITHOUT_CLASSIFICATION	1.4618003332403166E-6	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997266873136	WITHOUT_CLASSIFICATION	2.7331268640767776E-7	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999523066628635	WITHOUT_CLASSIFICATION	4.769333713647131E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999982748720446	WITHOUT_CLASSIFICATION	1.7251279554263584E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999910721563041	WITHOUT_CLASSIFICATION	8.927843695928723E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999990157835553	WITHOUT_CLASSIFICATION	9.842164447653684E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999994659358968	WITHOUT_CLASSIFICATION	5.340641032020632E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999994659358968	WITHOUT_CLASSIFICATION	5.340641032020632E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999802899070436	WITHOUT_CLASSIFICATION	1.971009295647293E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999967430394016	WITHOUT_CLASSIFICATION	3.256960598337904E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9999997641111853	WITHOUT_CLASSIFICATION	2.3588881456597486E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999970512981461	WITHOUT_CLASSIFICATION	2.9487018538000176E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999994297930386	WITHOUT_CLASSIFICATION	5.702069613179389E-7	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999994297930386	WITHOUT_CLASSIFICATION	5.702069613179389E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999993292058865	WITHOUT_CLASSIFICATION	6.707941134738019E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999993292058865	WITHOUT_CLASSIFICATION	6.707941134738019E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999997869984317	WITHOUT_CLASSIFICATION	2.1300156830327804E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.999997869984317	WITHOUT_CLASSIFICATION	2.1300156830327804E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999950919230528	WITHOUT_CLASSIFICATION	4.90807694723573E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999982523427053	WITHOUT_CLASSIFICATION	1.747657294654975E-6	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999164529751648	WITHOUT_CLASSIFICATION	8.354702483515558E-5	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999983265507552	WITHOUT_CLASSIFICATION	1.6734492448690855E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999920077606113	WITHOUT_CLASSIFICATION	7.992239388799666E-6	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999989657961249	WITHOUT_CLASSIFICATION	1.0342038751592593E-6	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.99997842896267	WITHOUT_CLASSIFICATION	2.1571037330074196E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.999994390680404	WITHOUT_CLASSIFICATION	5.609319596064538E-6	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999855906652301	WITHOUT_CLASSIFICATION	1.4409334769981856E-5	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.999932082383637	WITHOUT_CLASSIFICATION	6.791761636310368E-5	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999997904146719	WITHOUT_CLASSIFICATION	2.095853279859403E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999722763909457	WITHOUT_CLASSIFICATION	2.7723609054348532E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999998239373135	WITHOUT_CLASSIFICATION	1.7606268642633953E-7	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999881730941412	WITHOUT_CLASSIFICATION	1.1826905858682062E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999881730941412	WITHOUT_CLASSIFICATION	1.1826905858682062E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999999181170597	WITHOUT_CLASSIFICATION	8.188294032430485E-8	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999997732620589	WITHOUT_CLASSIFICATION	2.2673794113847565E-7	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9999939457827707	WITHOUT_CLASSIFICATION	6.054217229229863E-6	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999980026697737	WITHOUT_CLASSIFICATION	1.9973302263065023E-6	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999989961368556	WITHOUT_CLASSIFICATION	1.0038631444020153E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999995212367844	WITHOUT_CLASSIFICATION	4.787632157237201E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999994232303001	WITHOUT_CLASSIFICATION	5.767696997978641E-7	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999993811378557	WITHOUT_CLASSIFICATION	6.188621443053481E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999997960210888	WITHOUT_CLASSIFICATION	2.0397891111793266E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999985299816242	WITHOUT_CLASSIFICATION	1.4700183757645709E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999979761380167	WITHOUT_CLASSIFICATION	2.023861983240648E-6	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.999889474431102	WITHOUT_CLASSIFICATION	1.1052556889804176E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999969180617054	WITHOUT_CLASSIFICATION	3.081938294638202E-6	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9902569692575407	WITHOUT_CLASSIFICATION	0.009743030742459347	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999965367754542	WITHOUT_CLASSIFICATION	3.463224545869901E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999866179118415	WITHOUT_CLASSIFICATION	1.3382088158382987E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.999989591927669	WITHOUT_CLASSIFICATION	1.040807233099822E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999994101616438	WITHOUT_CLASSIFICATION	5.898383562189767E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999923534164006	WITHOUT_CLASSIFICATION	7.646583599294446E-6	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999923534164006	WITHOUT_CLASSIFICATION	7.646583599294446E-6	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999998629675838	WITHOUT_CLASSIFICATION	1.370324161850038E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999950485468265	WITHOUT_CLASSIFICATION	4.951453173399919E-6	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999473875204442	WITHOUT_CLASSIFICATION	5.261247955579584E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999473875204442	WITHOUT_CLASSIFICATION	5.261247955579584E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999995278522781	WITHOUT_CLASSIFICATION	4.7214772203784956E-7	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.999998495627819	WITHOUT_CLASSIFICATION	1.5043721809536185E-6	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999884762657928	WITHOUT_CLASSIFICATION	1.1523734207285987E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999965813301994	WITHOUT_CLASSIFICATION	3.4186698004900925E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.999987468720501	WITHOUT_CLASSIFICATION	1.253127949894297E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999779910322355	WITHOUT_CLASSIFICATION	2.20089677644606E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999779910322355	WITHOUT_CLASSIFICATION	2.20089677644606E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999994559875612	WITHOUT_CLASSIFICATION	5.440124387333641E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999875612976217	WITHOUT_CLASSIFICATION	1.2438702378386796E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999991080747279	WITHOUT_CLASSIFICATION	8.919252721101805E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999962454355668	WITHOUT_CLASSIFICATION	3.7545644332917208E-6	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999950485468265	WITHOUT_CLASSIFICATION	4.951453173399919E-6	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.999996121624557	WITHOUT_CLASSIFICATION	3.878375442988989E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999966091995047	WITHOUT_CLASSIFICATION	3.390800495288418E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999966091995047	WITHOUT_CLASSIFICATION	3.390800495288418E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994016142528	WITHOUT_CLASSIFICATION	5.983857471952836E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999997882662172	WITHOUT_CLASSIFICATION	2.1173378279899678E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999997882662172	WITHOUT_CLASSIFICATION	2.1173378279899678E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.999997882662172	WITHOUT_CLASSIFICATION	2.1173378279899678E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994016142528	WITHOUT_CLASSIFICATION	5.983857471952836E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999501339562	WITHOUT_CLASSIFICATION	4.986604381065108E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999912913592194	WITHOUT_CLASSIFICATION	8.708640780727431E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.99993645643432	WITHOUT_CLASSIFICATION	6.354356567992551E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999964597910026	WITHOUT_CLASSIFICATION	3.5402089973078083E-6	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999995580452266	WITHOUT_CLASSIFICATION	4.419547734743204E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999993626408853	WITHOUT_CLASSIFICATION	6.373591146992534E-7	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999989936445202	WITHOUT_CLASSIFICATION	1.0063554798788725E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999903799782955	WITHOUT_CLASSIFICATION	9.620021704510764E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999979761380167	WITHOUT_CLASSIFICATION	2.023861983240648E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999991771637577	WITHOUT_CLASSIFICATION	8.228362422227502E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999899779017474	WITHOUT_CLASSIFICATION	1.0022098252713138E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999959252267782	WITHOUT_CLASSIFICATION	4.074773221773522E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999887119282727	WITHOUT_CLASSIFICATION	1.1288071727229055E-5	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999985373089935	WITHOUT_CLASSIFICATION	1.4626910065182437E-6	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999649350593224	WITHOUT_CLASSIFICATION	3.5064940677641015E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999995678931265	WITHOUT_CLASSIFICATION	4.32106873533032E-7	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999841804208	WITHOUT_CLASSIFICATION	1.581957922388219E-8	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999985155805535	WITHOUT_CLASSIFICATION	1.4844194465471913E-6	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999954303925928	WITHOUT_CLASSIFICATION	4.569607407269721E-6	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999904397692323	WITHOUT_CLASSIFICATION	9.560230767762897E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999958964421509	WITHOUT_CLASSIFICATION	4.103557849067903E-6	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999980115100612	WITHOUT_CLASSIFICATION	1.9884899387301532E-6	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999999337029896	WITHOUT_CLASSIFICATION	6.629701039681461E-7	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999994965620634	WITHOUT_CLASSIFICATION	5.034379365584424E-7	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999975477358961	WITHOUT_CLASSIFICATION	2.4522641039422917E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999975477358961	WITHOUT_CLASSIFICATION	2.4522641039422917E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999975477358961	WITHOUT_CLASSIFICATION	2.4522641039422917E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999967301387798	WITHOUT_CLASSIFICATION	3.2698612201084123E-6	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999997476006638	WITHOUT_CLASSIFICATION	2.523993361866505E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999944548491492	WITHOUT_CLASSIFICATION	5.545150850826014E-6	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9999714198628001	WITHOUT_CLASSIFICATION	2.8580137199803548E-5	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999316962349	WITHOUT_CLASSIFICATION	6.830376510573417E-8	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.999999321007256	WITHOUT_CLASSIFICATION	6.789927441383193E-7	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999914723445	WITHOUT_CLASSIFICATION	8.527655502125277E-9	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999991027625472	WITHOUT_CLASSIFICATION	8.972374527967122E-7	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999995884958588	WITHOUT_CLASSIFICATION	4.115041411968233E-7	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999828992217528	WITHOUT_CLASSIFICATION	1.7100778247257358E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9990169571333903	WITHOUT_CLASSIFICATION	9.830428666096258E-4	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998888153577621	WITHOUT_CLASSIFICATION	1.1118464223784191E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999994559875612	WITHOUT_CLASSIFICATION	5.440124387333641E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999768461462	WITHOUT_CLASSIFICATION	2.3153853878994766E-8	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994016142528	WITHOUT_CLASSIFICATION	5.983857471952836E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999993626408853	WITHOUT_CLASSIFICATION	6.373591146992534E-7	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999899779017474	WITHOUT_CLASSIFICATION	1.0022098252713138E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9999887119282727	WITHOUT_CLASSIFICATION	1.1288071727229055E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999649350593224	WITHOUT_CLASSIFICATION	3.5064940677641015E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999959252267782	WITHOUT_CLASSIFICATION	4.074773221773522E-6	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999995678931265	WITHOUT_CLASSIFICATION	4.32106873533032E-7	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999954303925928	WITHOUT_CLASSIFICATION	4.569607407269721E-6	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999985155805535	WITHOUT_CLASSIFICATION	1.4844194465471913E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999958964421509	WITHOUT_CLASSIFICATION	4.103557849067903E-6	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999762983733067	WITHOUT_CLASSIFICATION	2.370162669332638E-5	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999959482031459	WITHOUT_CLASSIFICATION	4.0517968541233065E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999905642073403	WITHOUT_CLASSIFICATION	9.43579265959999E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999988462167602	WITHOUT_CLASSIFICATION	1.1537832398237774E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999876389670732	WITHOUT_CLASSIFICATION	1.236103292667186E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999346049494422	WITHOUT_CLASSIFICATION	6.539505055776658E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998902743608611	WITHOUT_CLASSIFICATION	1.0972563913900666E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9999965247982391	WITHOUT_CLASSIFICATION	3.475201760995803E-6	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999343652790785	WITHOUT_CLASSIFICATION	6.563472092142133E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999999785782817	WITHOUT_CLASSIFICATION	2.142171827715254E-8	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999992874989228	WITHOUT_CLASSIFICATION	7.125010772178409E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998787399115	WITHOUT_CLASSIFICATION	1.212600885690793E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999976583572367	WITHOUT_CLASSIFICATION	2.3416427633056252E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999969548184481	WITHOUT_CLASSIFICATION	3.0451815519632346E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999976315789277	WITHOUT_CLASSIFICATION	2.368421072357036E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999893339866293	WITHOUT_CLASSIFICATION	1.066601337078776E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999307296343677	WITHOUT_CLASSIFICATION	6.927036563230833E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999948081432939	WITHOUT_CLASSIFICATION	5.191856706108834E-6	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999571724255133	WITHOUT_CLASSIFICATION	4.2827574486720383E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999957612459754	WITHOUT_CLASSIFICATION	4.238754024609909E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999867506536585	WITHOUT_CLASSIFICATION	1.3249346341395014E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999996530517433	WITHOUT_CLASSIFICATION	3.469482567255046E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999803398065731	WITHOUT_CLASSIFICATION	1.9660193426853715E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999803398065731	WITHOUT_CLASSIFICATION	1.9660193426853715E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999803398065731	WITHOUT_CLASSIFICATION	1.9660193426853715E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999803208326594	WITHOUT_CLASSIFICATION	1.967916734052796E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999803208326594	WITHOUT_CLASSIFICATION	1.967916734052796E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999788806870846	WITHOUT_CLASSIFICATION	2.1119312915438097E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999858546346474	WITHOUT_CLASSIFICATION	1.4145365352493182E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999996530517433	WITHOUT_CLASSIFICATION	3.469482567255046E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999990377174262	WITHOUT_CLASSIFICATION	9.622825739132483E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999803398065731	WITHOUT_CLASSIFICATION	1.9660193426853715E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999803398065731	WITHOUT_CLASSIFICATION	1.9660193426853715E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999803208326594	WITHOUT_CLASSIFICATION	1.967916734052796E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9999858546346474	WITHOUT_CLASSIFICATION	1.4145365352493182E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999991187034296	WITHOUT_CLASSIFICATION	8.812965703786249E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999991187034296	WITHOUT_CLASSIFICATION	8.812965703786249E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999993336835703	WITHOUT_CLASSIFICATION	6.663164296770521E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999993336835703	WITHOUT_CLASSIFICATION	6.663164296770521E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999898964782195	WITHOUT_CLASSIFICATION	1.0103521780520095E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999898964782195	WITHOUT_CLASSIFICATION	1.0103521780520095E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999970573582921	WITHOUT_CLASSIFICATION	2.942641707952654E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999984458087527	WITHOUT_CLASSIFICATION	1.5541912472245992E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999984458087527	WITHOUT_CLASSIFICATION	1.5541912472245992E-6	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999992084284629	WITHOUT_CLASSIFICATION	7.91571537107977E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999992084284629	WITHOUT_CLASSIFICATION	7.91571537107977E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9999989444968355	WITHOUT_CLASSIFICATION	1.055503164600943E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999995104026963	WITHOUT_CLASSIFICATION	4.895973036402707E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999995104026963	WITHOUT_CLASSIFICATION	4.895973036402707E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.999984004557762	WITHOUT_CLASSIFICATION	1.599544223793509E-5	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999894775128869	WITHOUT_CLASSIFICATION	1.0522487113160096E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999902702845574	WITHOUT_CLASSIFICATION	9.72971544261675E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.999984004557762	WITHOUT_CLASSIFICATION	1.599544223793509E-5	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999925251357358	WITHOUT_CLASSIFICATION	7.474864264325764E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999981145404835	WITHOUT_CLASSIFICATION	1.8854595164852676E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999981145404835	WITHOUT_CLASSIFICATION	1.8854595164852676E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999981145404835	WITHOUT_CLASSIFICATION	1.8854595164852676E-6	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999996139027502	WITHOUT_CLASSIFICATION	3.8609724978788757E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992060343103	WITHOUT_CLASSIFICATION	7.939656897369201E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999996412582074	WITHOUT_CLASSIFICATION	3.587417925638757E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.999998607304222	WITHOUT_CLASSIFICATION	1.3926957779880657E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.999998830358989	WITHOUT_CLASSIFICATION	1.169641011056498E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999986558804806	WITHOUT_CLASSIFICATION	1.3441195193436988E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999984856847746	WITHOUT_CLASSIFICATION	1.5143152254627234E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999940263278748	WITHOUT_CLASSIFICATION	5.973672125168461E-6	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999940263278748	WITHOUT_CLASSIFICATION	5.973672125168461E-6	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999988041063355	WITHOUT_CLASSIFICATION	1.1958936645478988E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.99997677381155	WITHOUT_CLASSIFICATION	2.3226188449912123E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.99997677381155	WITHOUT_CLASSIFICATION	2.3226188449912123E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999981145404835	WITHOUT_CLASSIFICATION	1.8854595164852676E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999992060343103	WITHOUT_CLASSIFICATION	7.939656897369201E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999996412582074	WITHOUT_CLASSIFICATION	3.587417925638757E-7	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.999998607304222	WITHOUT_CLASSIFICATION	1.3926957779880657E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.999998830358989	WITHOUT_CLASSIFICATION	1.169641011056498E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999986558804806	WITHOUT_CLASSIFICATION	1.3441195193436988E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.99997677381155	WITHOUT_CLASSIFICATION	2.3226188449912123E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999940817224238	WITHOUT_CLASSIFICATION	5.918277576226081E-6	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999840315935886	WITHOUT_CLASSIFICATION	1.5968406411456992E-5	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999976589695553	WITHOUT_CLASSIFICATION	2.3410304447524503E-6	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999981241569964	WITHOUT_CLASSIFICATION	1.875843003528662E-6	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999960655299835	WITHOUT_CLASSIFICATION	3.934470016349932E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999936819599462	WITHOUT_CLASSIFICATION	6.318040053793863E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999975578038679	WITHOUT_CLASSIFICATION	2.4421961320460964E-6	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999975578038679	WITHOUT_CLASSIFICATION	2.4421961320460964E-6	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.999996023113963	WITHOUT_CLASSIFICATION	3.976886037123603E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999882322375278	WITHOUT_CLASSIFICATION	1.176776247223052E-5	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.999961036562	WITHOUT_CLASSIFICATION	3.8963437999990484E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999978748979121	WITHOUT_CLASSIFICATION	2.125102087771984E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.999995844454623	WITHOUT_CLASSIFICATION	4.1555453770201755E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.999995844454623	WITHOUT_CLASSIFICATION	4.1555453770201755E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.999996331238873	WITHOUT_CLASSIFICATION	3.6687611270053952E-6	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999959766755941	WITHOUT_CLASSIFICATION	4.023324405786533E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999947382154508	WITHOUT_CLASSIFICATION	5.261784549137765E-6	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999947382154508	WITHOUT_CLASSIFICATION	5.261784549137765E-6	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999972827488801	WITHOUT_CLASSIFICATION	2.717251119955579E-6	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999658301910473	WITHOUT_CLASSIFICATION	3.41698089526472E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9999984856847746	WITHOUT_CLASSIFICATION	1.5143152254627234E-6	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999981841653524	WITHOUT_CLASSIFICATION	1.8158346475218187E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999975602916851	WITHOUT_CLASSIFICATION	2.439708314966757E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999998044186744	WITHOUT_CLASSIFICATION	1.9558132559751775E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999998304457531	WITHOUT_CLASSIFICATION	1.695542468608395E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999838708578642	WITHOUT_CLASSIFICATION	1.612914213574637E-5	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999991013752512	WITHOUT_CLASSIFICATION	8.986247487419179E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999974487809673	WITHOUT_CLASSIFICATION	2.551219032663064E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.999999048238075	WITHOUT_CLASSIFICATION	9.517619251472472E-7	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999989159281265	WITHOUT_CLASSIFICATION	1.0840718734862262E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999989159281265	WITHOUT_CLASSIFICATION	1.0840718734862262E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999983909899751	WITHOUT_CLASSIFICATION	1.6090100248024328E-6	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999983909899751	WITHOUT_CLASSIFICATION	1.6090100248024328E-6	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.999999929239421	WITHOUT_CLASSIFICATION	7.076057895272206E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999855878867236	WITHOUT_CLASSIFICATION	1.4412113276231877E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999855878867236	WITHOUT_CLASSIFICATION	1.4412113276231877E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999855878867236	WITHOUT_CLASSIFICATION	1.4412113276231877E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999985632155417	WITHOUT_CLASSIFICATION	1.4367844583428424E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999985632155417	WITHOUT_CLASSIFICATION	1.4367844583428424E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999656152653	WITHOUT_CLASSIFICATION	3.4384734678671975E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999894542103211	WITHOUT_CLASSIFICATION	1.054578967882555E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999847048465832	WITHOUT_CLASSIFICATION	1.5295153416906347E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999996196776647	WITHOUT_CLASSIFICATION	3.803223353540473E-7	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999987902350398	WITHOUT_CLASSIFICATION	1.2097649601177865E-6	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999987559842135	WITHOUT_CLASSIFICATION	1.2440157864923116E-6	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999792678707274	WITHOUT_CLASSIFICATION	2.0732129272559038E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999999656152653	WITHOUT_CLASSIFICATION	3.4384734678671975E-8	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999993304549527	WITHOUT_CLASSIFICATION	6.695450473374833E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999894542103211	WITHOUT_CLASSIFICATION	1.054578967882555E-5	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999847048465832	WITHOUT_CLASSIFICATION	1.5295153416906347E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999941974021753	WITHOUT_CLASSIFICATION	5.802597824730542E-6	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999985261595843	WITHOUT_CLASSIFICATION	1.4738404157338083E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999993994989337	WITHOUT_CLASSIFICATION	6.005010662844819E-6	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999761542781065	WITHOUT_CLASSIFICATION	2.3845721893439052E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999991938565145	WITHOUT_CLASSIFICATION	8.061434856228802E-7	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.99999904458522	WITHOUT_CLASSIFICATION	9.5541477998475E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999999296080669	WITHOUT_CLASSIFICATION	7.039193308524964E-8	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999941974021753	WITHOUT_CLASSIFICATION	5.802597824730542E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999931673188551	WITHOUT_CLASSIFICATION	6.832681144798599E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999931673188551	WITHOUT_CLASSIFICATION	6.832681144798599E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9999967736721587	WITHOUT_CLASSIFICATION	3.2263278413615704E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999852505098498	WITHOUT_CLASSIFICATION	1.4749490150309321E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999473911422104	WITHOUT_CLASSIFICATION	5.260885778960802E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989447951031	WITHOUT_CLASSIFICATION	1.055204896807559E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999993823512514	WITHOUT_CLASSIFICATION	6.176487486003997E-7	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999996133505312	WITHOUT_CLASSIFICATION	3.8664946872300415E-7	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999998944319348	WITHOUT_CLASSIFICATION	1.0556806514646444E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999994452251341	WITHOUT_CLASSIFICATION	5.547748660589029E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999999315332789	WITHOUT_CLASSIFICATION	6.84667210742027E-8	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999950471272973	WITHOUT_CLASSIFICATION	4.952872702799048E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993848410015	WITHOUT_CLASSIFICATION	6.151589985641752E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989447951031	WITHOUT_CLASSIFICATION	1.055204896807559E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999993823512514	WITHOUT_CLASSIFICATION	6.176487486003997E-7	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999895494883253	WITHOUT_CLASSIFICATION	1.045051167463708E-5	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999953624029386	WITHOUT_CLASSIFICATION	4.637597061412547E-6	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999995136416048	WITHOUT_CLASSIFICATION	4.863583951370772E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998032312870637	WITHOUT_CLASSIFICATION	1.9676871293625002E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999917001471346	WITHOUT_CLASSIFICATION	8.299852865522198E-6	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999477334337928	WITHOUT_CLASSIFICATION	5.226656620704492E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999406482079997	WITHOUT_CLASSIFICATION	5.935179200032909E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999912787383611	WITHOUT_CLASSIFICATION	8.721261638901132E-6	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999740726915637	WITHOUT_CLASSIFICATION	2.5927308436265038E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999914633803939	WITHOUT_CLASSIFICATION	8.536619606185525E-6	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999795114437626	WITHOUT_CLASSIFICATION	2.0488556237434836E-5	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999897156138557	WITHOUT_CLASSIFICATION	1.0284386144319218E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999998878624741	WITHOUT_CLASSIFICATION	1.121375258903771E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999997601463452	WITHOUT_CLASSIFICATION	2.398536548750473E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999988841658798	WITHOUT_CLASSIFICATION	1.11583412025112E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999999875743285	WITHOUT_CLASSIFICATION	1.2425671505535117E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999803384295829	WITHOUT_CLASSIFICATION	1.9661570417140043E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999990026216943	WITHOUT_CLASSIFICATION	9.973783056608423E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999646116782	WITHOUT_CLASSIFICATION	3.5388321934923454E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999985929589532	WITHOUT_CLASSIFICATION	1.4070410467596357E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999803384295829	WITHOUT_CLASSIFICATION	1.9661570417140043E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999990026216943	WITHOUT_CLASSIFICATION	9.973783056608423E-7	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999646116782	WITHOUT_CLASSIFICATION	3.5388321934923454E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.999940905856885	WITHOUT_CLASSIFICATION	5.909414311497974E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999963756258823	WITHOUT_CLASSIFICATION	3.6243741178512524E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999994848048992	WITHOUT_CLASSIFICATION	5.151951008809651E-7	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999984824208585	WITHOUT_CLASSIFICATION	1.5175791414263611E-6	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.999998254191813	WITHOUT_CLASSIFICATION	1.7458081870255048E-6	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999979664961202	WITHOUT_CLASSIFICATION	2.0335038797691918E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999527550040437	WITHOUT_CLASSIFICATION	4.724499595630088E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999991396730837	WITHOUT_CLASSIFICATION	8.603269161920623E-7	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999994356565274	WITHOUT_CLASSIFICATION	5.643434725527313E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.999999600657357	WITHOUT_CLASSIFICATION	3.9934264296927153E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.81513739923578	WITHOUT_CLASSIFICATION	0.18486260076422012	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999972516923588	WITHOUT_CLASSIFICATION	2.7483076412783355E-6	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999992261493637	WITHOUT_CLASSIFICATION	7.738506362419127E-7	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999881365398	WITHOUT_CLASSIFICATION	1.1863460122747657E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999995426078077	WITHOUT_CLASSIFICATION	4.5739219230387556E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999998306267125	WITHOUT_CLASSIFICATION	1.693732875081591E-7	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999998306507637	WITHOUT_CLASSIFICATION	1.6934923628374005E-7	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999860999605718	WITHOUT_CLASSIFICATION	1.390003942811783E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999526515409	WITHOUT_CLASSIFICATION	4.7348459087358066E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999999746882193	WITHOUT_CLASSIFICATION	2.5311780700983926E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999938861055194	WITHOUT_CLASSIFICATION	6.11389448058806E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999837369495688	WITHOUT_CLASSIFICATION	1.6263050431182952E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999837369495688	WITHOUT_CLASSIFICATION	1.6263050431182952E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999993083637878	WITHOUT_CLASSIFICATION	6.916362122334116E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999993083637878	WITHOUT_CLASSIFICATION	6.916362122334116E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999856092335	WITHOUT_CLASSIFICATION	1.439076657841073E-8	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999856092335	WITHOUT_CLASSIFICATION	1.439076657841073E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998161051421	WITHOUT_CLASSIFICATION	1.8389485787849837E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999427914664	WITHOUT_CLASSIFICATION	5.7208533714285077E-8	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999985751169336	WITHOUT_CLASSIFICATION	1.4248830664442377E-6	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999533031109	WITHOUT_CLASSIFICATION	4.669688905263321E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998927910729	WITHOUT_CLASSIFICATION	1.0720892700162022E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999261090996	WITHOUT_CLASSIFICATION	7.389090038186624E-8	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999994093826499	WITHOUT_CLASSIFICATION	5.906173501299371E-7	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999987698691823	WITHOUT_CLASSIFICATION	1.2301308176023E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999998161051421	WITHOUT_CLASSIFICATION	1.8389485787849837E-7	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999427914664	WITHOUT_CLASSIFICATION	5.7208533714285077E-8	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999985751169336	WITHOUT_CLASSIFICATION	1.4248830664442377E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999998927910729	WITHOUT_CLASSIFICATION	1.0720892700162022E-7	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999261090996	WITHOUT_CLASSIFICATION	7.389090038186624E-8	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999987177277838	WITHOUT_CLASSIFICATION	1.282272216281691E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999975069014976	WITHOUT_CLASSIFICATION	2.493098502314185E-6	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999577489831576	WITHOUT_CLASSIFICATION	4.2251016842469055E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9999577489831576	WITHOUT_CLASSIFICATION	4.2251016842469055E-5	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999978480396468	WITHOUT_CLASSIFICATION	2.1519603532096186E-6	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999829000028043	WITHOUT_CLASSIFICATION	1.709999719569804E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981576160755	WITHOUT_CLASSIFICATION	1.8423839245444476E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999988241619279	WITHOUT_CLASSIFICATION	1.1758380722208296E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999988241619279	WITHOUT_CLASSIFICATION	1.1758380722208296E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999992730359837	WITHOUT_CLASSIFICATION	7.269640162889408E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998990715218	WITHOUT_CLASSIFICATION	1.0092847826459774E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.999999163401001	WITHOUT_CLASSIFICATION	8.365989990224749E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990107031722	WITHOUT_CLASSIFICATION	9.892968278090198E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999673731343515	WITHOUT_CLASSIFICATION	3.262686564856756E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999976583572367	WITHOUT_CLASSIFICATION	2.3416427633056252E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999969548184481	WITHOUT_CLASSIFICATION	3.0451815519632346E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999976315789277	WITHOUT_CLASSIFICATION	2.368421072357036E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999893339866293	WITHOUT_CLASSIFICATION	1.066601337078776E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999571724255133	WITHOUT_CLASSIFICATION	4.2827574486720383E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999957612459754	WITHOUT_CLASSIFICATION	4.238754024609909E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999992730359837	WITHOUT_CLASSIFICATION	7.269640162889408E-7	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999998990715218	WITHOUT_CLASSIFICATION	1.0092847826459774E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999990107031722	WITHOUT_CLASSIFICATION	9.892968278090198E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999995120714911	WITHOUT_CLASSIFICATION	4.879285089953034E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981576160755	WITHOUT_CLASSIFICATION	1.8423839245444476E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981576160755	WITHOUT_CLASSIFICATION	1.8423839245444476E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993848410015	WITHOUT_CLASSIFICATION	6.151589985641752E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993848410015	WITHOUT_CLASSIFICATION	6.151589985641752E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998740657382589	WITHOUT_CLASSIFICATION	1.2593426174108927E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998740657382589	WITHOUT_CLASSIFICATION	1.2593426174108927E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999998525454492	WITHOUT_CLASSIFICATION	1.4745455084114588E-7	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999996814351338	WITHOUT_CLASSIFICATION	3.1856486619565057E-7	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999973659878075	WITHOUT_CLASSIFICATION	2.6340121923376386E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999951371178358	WITHOUT_CLASSIFICATION	4.862882164136543E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999998677270137	WITHOUT_CLASSIFICATION	1.322729863752702E-7	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999991936251863	WITHOUT_CLASSIFICATION	8.063748135759032E-7	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999444365041382	WITHOUT_CLASSIFICATION	5.556349586169906E-5	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999622137743	WITHOUT_CLASSIFICATION	3.7786225703374764E-8	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999998434080435	WITHOUT_CLASSIFICATION	1.5659195659855062E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999998873096412	WITHOUT_CLASSIFICATION	1.126903588006243E-7	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999996273650171	WITHOUT_CLASSIFICATION	3.7263498286056175E-7	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999996597007362	WITHOUT_CLASSIFICATION	3.402992637793015E-7	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.999999783837627	WITHOUT_CLASSIFICATION	2.16162372902214E-7	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999634505743	WITHOUT_CLASSIFICATION	3.65494257512425E-8	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999966732694	WITHOUT_CLASSIFICATION	3.326730514032662E-9	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.999997046761236	WITHOUT_CLASSIFICATION	2.953238763996686E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999958766757127	WITHOUT_CLASSIFICATION	4.123324287338062E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999996853895988	WITHOUT_CLASSIFICATION	3.146104011447512E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999137373117	WITHOUT_CLASSIFICATION	8.626268839302169E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999969548184481	WITHOUT_CLASSIFICATION	3.0451815519632346E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999893339866293	WITHOUT_CLASSIFICATION	1.066601337078776E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999995120714911	WITHOUT_CLASSIFICATION	4.879285089953034E-7	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999981576160755	WITHOUT_CLASSIFICATION	1.8423839245444476E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999993848410015	WITHOUT_CLASSIFICATION	6.151589985641752E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998740657382589	WITHOUT_CLASSIFICATION	1.2593426174108927E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999960809595675	WITHOUT_CLASSIFICATION	3.919040432470238E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999992906290479	WITHOUT_CLASSIFICATION	7.093709521056907E-7	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999995811281657	WITHOUT_CLASSIFICATION	4.1887183436992806E-7	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.999989559301019	WITHOUT_CLASSIFICATION	1.0440698981129133E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999932165191342	WITHOUT_CLASSIFICATION	6.783480865749692E-6	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999932165191342	WITHOUT_CLASSIFICATION	6.783480865749692E-6	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.999999967826447	WITHOUT_CLASSIFICATION	3.2173553088281626E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999953780509276	WITHOUT_CLASSIFICATION	4.621949072297688E-6	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999947221851476	WITHOUT_CLASSIFICATION	5.27781485236043E-6	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999947601848446	WITHOUT_CLASSIFICATION	5.239815155511517E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996675077698	WITHOUT_CLASSIFICATION	3.3249223024593323E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996675077698	WITHOUT_CLASSIFICATION	3.3249223024593323E-7	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999998447528199	WITHOUT_CLASSIFICATION	1.5524718023733144E-7	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999989377102558	WITHOUT_CLASSIFICATION	1.062289744255192E-6	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999998830070035	WITHOUT_CLASSIFICATION	1.1699299660289478E-7	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.999998896161663	WITHOUT_CLASSIFICATION	1.1038383370507042E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999986070093412	WITHOUT_CLASSIFICATION	1.3929906588143193E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999996836148543	WITHOUT_CLASSIFICATION	3.163851457347334E-7	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999957475581355	WITHOUT_CLASSIFICATION	4.2524418644656415E-6	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999994580056482	WITHOUT_CLASSIFICATION	5.419943517802799E-7	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.999705328912261	WITHOUT_CLASSIFICATION	2.946710877389871E-4	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999961896904257	WITHOUT_CLASSIFICATION	3.810309574208022E-6	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9924855284859961	WITHOUT_CLASSIFICATION	0.007514471514003907	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999860924356212	WITHOUT_CLASSIFICATION	1.3907564378702124E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999838352436	WITHOUT_CLASSIFICATION	1.6164756435947163E-8	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999988063902236	WITHOUT_CLASSIFICATION	1.1936097764029948E-6	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999987511435705	WITHOUT_CLASSIFICATION	1.2488564294493324E-6	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999996537792639	WITHOUT_CLASSIFICATION	3.4622073603663905E-7	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999943144864519	WITHOUT_CLASSIFICATION	5.685513547993333E-6	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999975371700679	WITHOUT_CLASSIFICATION	2.462829932193078E-6	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999789434596436	WITHOUT_CLASSIFICATION	2.1056540356475337E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999995265891882	WITHOUT_CLASSIFICATION	4.7341081173129006E-7	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999962937445707	WITHOUT_CLASSIFICATION	3.706255429366262E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999965358920565	WITHOUT_CLASSIFICATION	3.4641079434263775E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999965358920565	WITHOUT_CLASSIFICATION	3.4641079434263775E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999971472525042	WITHOUT_CLASSIFICATION	2.852747495806024E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999650319997371	WITHOUT_CLASSIFICATION	3.4968000262913024E-5	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999993811378557	WITHOUT_CLASSIFICATION	6.188621443053481E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999993811378557	WITHOUT_CLASSIFICATION	6.188621443053481E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9289261812315442	DEFECT	0.07107381876845578	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999980417030124	WITHOUT_CLASSIFICATION	1.958296987590294E-6	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999760331005367	WITHOUT_CLASSIFICATION	2.3966899463336465E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999879954509464	WITHOUT_CLASSIFICATION	1.2004549053664949E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999879954509464	WITHOUT_CLASSIFICATION	1.2004549053664949E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999934419359904	WITHOUT_CLASSIFICATION	6.5580640095692215E-6	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999990363687467	WITHOUT_CLASSIFICATION	9.636312534125018E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999916192514234	WITHOUT_CLASSIFICATION	8.380748576590119E-6	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999975351843703	WITHOUT_CLASSIFICATION	2.4648156295891092E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999630601107	WITHOUT_CLASSIFICATION	3.693988935569371E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999894957051565	WITHOUT_CLASSIFICATION	1.0504294843442416E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999701107483218	WITHOUT_CLASSIFICATION	2.9889251678190893E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999994808175225	WITHOUT_CLASSIFICATION	5.191824775375409E-7	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999991676013413	WITHOUT_CLASSIFICATION	8.323986586030423E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9999995864033294	WITHOUT_CLASSIFICATION	4.135966704774562E-7	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999989024314132	WITHOUT_CLASSIFICATION	1.0975685867160804E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999973012610046	WITHOUT_CLASSIFICATION	2.6987389953357924E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.999999743387584	WITHOUT_CLASSIFICATION	2.566124159588009E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999960187783158	WITHOUT_CLASSIFICATION	3.981221684178923E-6	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999523268897326	WITHOUT_CLASSIFICATION	4.7673110267402836E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999963280421804	WITHOUT_CLASSIFICATION	3.6719578194714494E-6	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999992170228675	WITHOUT_CLASSIFICATION	7.829771324899205E-7	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.999996399807827	WITHOUT_CLASSIFICATION	3.6001921730790508E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999724389685434	WITHOUT_CLASSIFICATION	2.7561031456594246E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999777928656061	WITHOUT_CLASSIFICATION	2.2207134393897343E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999785237522406	WITHOUT_CLASSIFICATION	2.147624775939531E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999939811513787	WITHOUT_CLASSIFICATION	6.018848621290999E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999729435277842	WITHOUT_CLASSIFICATION	2.705647221579661E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999595563368824	WITHOUT_CLASSIFICATION	4.044366311758529E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999994608049756	WITHOUT_CLASSIFICATION	5.391950243703498E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9998820274053078	WITHOUT_CLASSIFICATION	1.1797259469206466E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9991200329793326	WITHOUT_CLASSIFICATION	8.799670206674631E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998336664372	WITHOUT_CLASSIFICATION	1.663335628783019E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999944717986143	WITHOUT_CLASSIFICATION	5.528201385608604E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999917632278533	WITHOUT_CLASSIFICATION	8.236772146673601E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999998371667551	WITHOUT_CLASSIFICATION	1.6283324483056644E-7	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999960187783158	WITHOUT_CLASSIFICATION	3.981221684178923E-6	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999998336664372	WITHOUT_CLASSIFICATION	1.663335628783019E-7	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999944717986143	WITHOUT_CLASSIFICATION	5.528201385608604E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999998371667551	WITHOUT_CLASSIFICATION	1.6283324483056644E-7	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999984997658373	WITHOUT_CLASSIFICATION	1.500234162688548E-6	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999310383837179	WITHOUT_CLASSIFICATION	6.896161628209075E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999005892460706	WITHOUT_CLASSIFICATION	9.941075392937074E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999999265660345	WITHOUT_CLASSIFICATION	7.343396547712605E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999996431459568	WITHOUT_CLASSIFICATION	3.568540432703887E-7	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999250801718	WITHOUT_CLASSIFICATION	7.491982817686462E-8	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999979246303514	WITHOUT_CLASSIFICATION	2.075369648495037E-6	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.999999291937304	WITHOUT_CLASSIFICATION	7.08062696078773E-7	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999991380290676	WITHOUT_CLASSIFICATION	8.619709323254132E-7	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9995836975076079	WITHOUT_CLASSIFICATION	4.1630249239201585E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999523332294896	WITHOUT_CLASSIFICATION	4.766677051041887E-5	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999523332294896	WITHOUT_CLASSIFICATION	4.766677051041887E-5	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999873953938186	WITHOUT_CLASSIFICATION	1.2604606181301086E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999830969048489	WITHOUT_CLASSIFICATION	1.6903095151071183E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999996295087522	WITHOUT_CLASSIFICATION	3.70491247779555E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999980280407281	WITHOUT_CLASSIFICATION	1.971959271790938E-6	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.999998884872898	WITHOUT_CLASSIFICATION	1.115127102019977E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999981790194226	WITHOUT_CLASSIFICATION	1.8209805773353151E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999961528904003	WITHOUT_CLASSIFICATION	3.847109599705274E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999903632253359	WITHOUT_CLASSIFICATION	9.63677466407215E-6	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999221218067	WITHOUT_CLASSIFICATION	7.787819331784528E-8	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999851723298	WITHOUT_CLASSIFICATION	1.4827670222916104E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999996258618733	WITHOUT_CLASSIFICATION	3.7413812660203096E-7	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999720571637	WITHOUT_CLASSIFICATION	2.794283632271876E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999997968567316	WITHOUT_CLASSIFICATION	2.0314326837534335E-7	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999967201565144	WITHOUT_CLASSIFICATION	3.2798434854608253E-6	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.999998595012205	WITHOUT_CLASSIFICATION	1.4049877949683785E-6	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999591880919813	WITHOUT_CLASSIFICATION	4.081190801874843E-5	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999993207217183	WITHOUT_CLASSIFICATION	6.792782817959781E-7	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999991760612154	WITHOUT_CLASSIFICATION	8.23938784599713E-7	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.999998873814394	WITHOUT_CLASSIFICATION	1.1261856060283157E-6	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999920993879879	WITHOUT_CLASSIFICATION	7.9006120119454E-6	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999991344123629	WITHOUT_CLASSIFICATION	8.655876370702459E-7	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999988707855861	WITHOUT_CLASSIFICATION	1.129214413825146E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.999999441195886	WITHOUT_CLASSIFICATION	5.588041139272868E-7	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999995584366775	WITHOUT_CLASSIFICATION	4.415633224283329E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999990010016024	WITHOUT_CLASSIFICATION	9.989983975250148E-7	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999985481393794	WITHOUT_CLASSIFICATION	1.4518606206823912E-6	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.999862350877188	WITHOUT_CLASSIFICATION	1.3764912281202576E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999970734266079	WITHOUT_CLASSIFICATION	2.9265733921292836E-6	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999994846869116	WITHOUT_CLASSIFICATION	5.153130884601754E-7	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999988309640113	WITHOUT_CLASSIFICATION	1.1690359887373973E-6	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999998916578099	WITHOUT_CLASSIFICATION	1.0834219008535844E-7	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999917437511108	WITHOUT_CLASSIFICATION	8.256248889142215E-6	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999998313075656	WITHOUT_CLASSIFICATION	1.686924342786053E-7	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.999999490690682	WITHOUT_CLASSIFICATION	5.0930931804979E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999985725507287	WITHOUT_CLASSIFICATION	1.4274492712636813E-6	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.99999523515102	WITHOUT_CLASSIFICATION	4.764848980133094E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999998389541295	WITHOUT_CLASSIFICATION	1.6104587045506872E-7	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999889248514799	WITHOUT_CLASSIFICATION	1.1075148519986418E-5	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999997870288987	WITHOUT_CLASSIFICATION	2.1297110133276063E-7	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999996900373389	WITHOUT_CLASSIFICATION	3.099626610570598E-7	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999953566464949	WITHOUT_CLASSIFICATION	4.643353505118586E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999617033968812	WITHOUT_CLASSIFICATION	3.8296603118835514E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999980229823499	WITHOUT_CLASSIFICATION	1.9770176501697727E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999932587342795	WITHOUT_CLASSIFICATION	6.741265720524689E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999938863317841	WITHOUT_CLASSIFICATION	6.113668215876664E-6	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999910392577835	WITHOUT_CLASSIFICATION	8.960742216588736E-6	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9996764385040325	WITHOUT_CLASSIFICATION	3.2356149596741513E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999990932702705	WITHOUT_CLASSIFICATION	9.067297295268964E-7	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999996159660721	WITHOUT_CLASSIFICATION	3.8403392788920824E-7	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999859381544179	WITHOUT_CLASSIFICATION	1.4061845582031388E-5	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999885335737849	WITHOUT_CLASSIFICATION	1.1466426215104973E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999872577786	WITHOUT_CLASSIFICATION	1.2742221511319421E-8	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999997542639348	WITHOUT_CLASSIFICATION	2.457360651321702E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999904849274162	WITHOUT_CLASSIFICATION	9.515072583904529E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.999992293403819	WITHOUT_CLASSIFICATION	7.706596181044743E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999658925938218	WITHOUT_CLASSIFICATION	3.410740617820615E-5	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999995802669993	WITHOUT_CLASSIFICATION	4.197330006764967E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999975370771551	WITHOUT_CLASSIFICATION	2.4629228448792503E-6	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9999851188370346	WITHOUT_CLASSIFICATION	1.4881162965339008E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998899553220656	WITHOUT_CLASSIFICATION	1.1004467793440213E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9998899553220656	WITHOUT_CLASSIFICATION	1.1004467793440213E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999938060185264	WITHOUT_CLASSIFICATION	6.19398147366308E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999999139109729	WITHOUT_CLASSIFICATION	8.60890271111001E-8	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999840857378979	WITHOUT_CLASSIFICATION	1.591426210214542E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999842464913713	WITHOUT_CLASSIFICATION	1.5753508628690462E-5	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9999978985016115	WITHOUT_CLASSIFICATION	2.1014983884629147E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9999237032652045	WITHOUT_CLASSIFICATION	7.629673479547181E-5	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999309962053146	WITHOUT_CLASSIFICATION	6.900379468537354E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.999995755655493	WITHOUT_CLASSIFICATION	4.2443445069805106E-6	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999993507896415	WITHOUT_CLASSIFICATION	6.492103583930303E-7	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999996752974349	WITHOUT_CLASSIFICATION	3.247025650663696E-7	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.999998347942911	WITHOUT_CLASSIFICATION	1.652057089036725E-6	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999999048379089	WITHOUT_CLASSIFICATION	9.51620911486963E-8	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999919725908495	WITHOUT_CLASSIFICATION	8.027409150502723E-6	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999789924002159	WITHOUT_CLASSIFICATION	2.1007599784112852E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999982120960924	WITHOUT_CLASSIFICATION	1.787903907575134E-6	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999497993884002	WITHOUT_CLASSIFICATION	5.0200611599695734E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.999999375727724	WITHOUT_CLASSIFICATION	6.242722759836358E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999964652293034	WITHOUT_CLASSIFICATION	3.534770696551708E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9999962184096447	WITHOUT_CLASSIFICATION	3.7815903552378267E-6	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9999929756132115	WITHOUT_CLASSIFICATION	7.024386788469606E-6	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999922485195023	WITHOUT_CLASSIFICATION	7.7514804976084E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999970269098104	WITHOUT_CLASSIFICATION	2.9730901894757867E-6	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999908937755976	WITHOUT_CLASSIFICATION	9.106224402427359E-6	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.999987827118928	WITHOUT_CLASSIFICATION	1.2172881071975869E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999979716564845	WITHOUT_CLASSIFICATION	2.0283435155738713E-6	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9999481905995755	WITHOUT_CLASSIFICATION	5.1809400424502175E-5	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999981421794408	WITHOUT_CLASSIFICATION	1.8578205592350347E-6	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999998007444212	WITHOUT_CLASSIFICATION	1.992555788230074E-7	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999979362281214	WITHOUT_CLASSIFICATION	2.063771878678512E-6	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9996089802786937	WITHOUT_CLASSIFICATION	3.9101972130632017E-4	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999775697432518	WITHOUT_CLASSIFICATION	2.2430256748213304E-5	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999975287847053	WITHOUT_CLASSIFICATION	2.471215294711684E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999944090790002	WITHOUT_CLASSIFICATION	5.590920999791871E-6	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.999999367357065	WITHOUT_CLASSIFICATION	6.326429350699938E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999944090790002	WITHOUT_CLASSIFICATION	5.590920999791871E-6	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999988677856299	WITHOUT_CLASSIFICATION	1.1322143701576178E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999936218426955	WITHOUT_CLASSIFICATION	6.378157304561686E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999936218426955	WITHOUT_CLASSIFICATION	6.378157304561686E-6	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999936218426955	WITHOUT_CLASSIFICATION	6.378157304561686E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999997515146529	WITHOUT_CLASSIFICATION	2.4848534712422684E-7	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999997515146529	WITHOUT_CLASSIFICATION	2.4848534712422684E-7	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999635552178066	WITHOUT_CLASSIFICATION	3.6444782193557455E-5	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999993030033519	WITHOUT_CLASSIFICATION	6.969966480770065E-7	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999996380725733	WITHOUT_CLASSIFICATION	3.619274266090603E-7	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999999123155979	WITHOUT_CLASSIFICATION	8.768440206530769E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999710351254713	WITHOUT_CLASSIFICATION	2.8964874528731027E-5	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999997475252842	WITHOUT_CLASSIFICATION	2.524747157413947E-7	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999993122683923	WITHOUT_CLASSIFICATION	6.877316076031258E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680931	WITHOUT_CLASSIFICATION	3.4073190689752967E-6	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999994014263115	WITHOUT_CLASSIFICATION	5.985736885489267E-7	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999976160551262	WITHOUT_CLASSIFICATION	2.383944873786975E-6	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999994612169447	WITHOUT_CLASSIFICATION	5.387830553737845E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9998648561374671	WITHOUT_CLASSIFICATION	1.3514386253285046E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999995858085152	WITHOUT_CLASSIFICATION	4.1419148482370356E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999997451762922	WITHOUT_CLASSIFICATION	2.5482370775576647E-7	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999953468430378	WITHOUT_CLASSIFICATION	4.653156962170209E-6	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999996958300151	WITHOUT_CLASSIFICATION	3.041699848783755E-7	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999993739360694	WITHOUT_CLASSIFICATION	6.260639307075939E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999978624159306	WITHOUT_CLASSIFICATION	2.1375840695460468E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999978624159306	WITHOUT_CLASSIFICATION	2.1375840695460468E-6	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999951613500339	WITHOUT_CLASSIFICATION	4.838649966051785E-6	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998418818558	WITHOUT_CLASSIFICATION	1.581181442708094E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999998418818558	WITHOUT_CLASSIFICATION	1.581181442708094E-7	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9999924981491716	WITHOUT_CLASSIFICATION	7.501850828406734E-6	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999982418398554	WITHOUT_CLASSIFICATION	1.7581601445635954E-6	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.999998458039107	WITHOUT_CLASSIFICATION	1.5419608930164167E-6	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999973670356449	WITHOUT_CLASSIFICATION	2.632964355210486E-6	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999963204046496	WITHOUT_CLASSIFICATION	3.6795953504201937E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999910380991573	WITHOUT_CLASSIFICATION	8.961900842607327E-6	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999934677883489	WITHOUT_CLASSIFICATION	6.532211651216656E-6	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999995838117799	WITHOUT_CLASSIFICATION	4.161882202139721E-7	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999992872551364	WITHOUT_CLASSIFICATION	7.127448634472884E-7	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999982331819303	WITHOUT_CLASSIFICATION	1.7668180697182066E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999949539971067	WITHOUT_CLASSIFICATION	5.046002893236496E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999996945487956	WITHOUT_CLASSIFICATION	3.0545120439695943E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999986721243768	WITHOUT_CLASSIFICATION	1.3278756232018503E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999991922371242	WITHOUT_CLASSIFICATION	8.07762875836404E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680931	WITHOUT_CLASSIFICATION	3.4073190689752967E-6	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998891494783736	WITHOUT_CLASSIFICATION	1.1085052162633339E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999973022949343	WITHOUT_CLASSIFICATION	2.697705065657814E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999994231020145	WITHOUT_CLASSIFICATION	5.768979853932807E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999994231020145	WITHOUT_CLASSIFICATION	5.768979853932807E-7	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999986863750235	WITHOUT_CLASSIFICATION	1.3136249764708957E-6	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999988535098391	WITHOUT_CLASSIFICATION	1.1464901609880604E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999996357258788	WITHOUT_CLASSIFICATION	3.6427412116770404E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999974587690527	WITHOUT_CLASSIFICATION	2.5412309473346543E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999980213666023	WITHOUT_CLASSIFICATION	1.9786333976004196E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999136604277	WITHOUT_CLASSIFICATION	8.633957221188761E-8	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999983362417354	WITHOUT_CLASSIFICATION	1.6637582645984509E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9999283542079803	WITHOUT_CLASSIFICATION	7.164579201970344E-5	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999911306199689	WITHOUT_CLASSIFICATION	8.869380030991542E-6	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9999999745652718	WITHOUT_CLASSIFICATION	2.543472817650817E-8	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999983946318081	WITHOUT_CLASSIFICATION	1.6053681919514366E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999914076354608	WITHOUT_CLASSIFICATION	8.592364539223589E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9423010857450639	WITHOUT_CLASSIFICATION	0.0576989142549361	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999998254667566	WITHOUT_CLASSIFICATION	1.7453324332117253E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999996924340956	WITHOUT_CLASSIFICATION	3.0756590438008487E-7	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999946206235627	WITHOUT_CLASSIFICATION	5.379376437300077E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.999917175985954	WITHOUT_CLASSIFICATION	8.282401404604848E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999982267474584	WITHOUT_CLASSIFICATION	1.7732525416048109E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999986684899532	WITHOUT_CLASSIFICATION	1.3315100467848011E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999970173000282	WITHOUT_CLASSIFICATION	2.9826999718845665E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999975970325728	WITHOUT_CLASSIFICATION	2.402967427059382E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999978433113317	WITHOUT_CLASSIFICATION	2.1566886683208895E-6	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999992308196387	WITHOUT_CLASSIFICATION	7.691803614070785E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999611101131	WITHOUT_CLASSIFICATION	3.888988687000067E-8	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999723693402	WITHOUT_CLASSIFICATION	2.7630659788856913E-8	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999925857494814	WITHOUT_CLASSIFICATION	7.414250518589995E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9999942769444015	WITHOUT_CLASSIFICATION	5.723055598566756E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999921142491742	WITHOUT_CLASSIFICATION	7.885750825783936E-6	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999995835184097	WITHOUT_CLASSIFICATION	4.1648159037530974E-7	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999943007680484	WITHOUT_CLASSIFICATION	5.699231951578508E-6	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999850727462504	WITHOUT_CLASSIFICATION	1.492725374972609E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999681295323698	WITHOUT_CLASSIFICATION	3.187046763031925E-5	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999960017024192	WITHOUT_CLASSIFICATION	3.99829758071979E-6	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9990029993467835	WITHOUT_CLASSIFICATION	9.970006532164565E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999988611261564	WITHOUT_CLASSIFICATION	1.1388738435764333E-6	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.999998709292485	WITHOUT_CLASSIFICATION	1.2907075150209059E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9999921142491742	WITHOUT_CLASSIFICATION	7.885750825783936E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999716533831	WITHOUT_CLASSIFICATION	2.8346616932946178E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999988611261564	WITHOUT_CLASSIFICATION	1.1388738435764333E-6	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.999999876619212	WITHOUT_CLASSIFICATION	1.2338078810350998E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999995454943567	WITHOUT_CLASSIFICATION	4.5450564340267357E-7	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999996482295638	WITHOUT_CLASSIFICATION	3.517704362539609E-7	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999995715951381	WITHOUT_CLASSIFICATION	4.2840486199536165E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999851415886344	WITHOUT_CLASSIFICATION	1.4858411365599153E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999997915770398	WITHOUT_CLASSIFICATION	2.08422960202041E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.999997915770398	WITHOUT_CLASSIFICATION	2.08422960202041E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999995583986248	WITHOUT_CLASSIFICATION	4.4160137529135196E-7	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999684774321	WITHOUT_CLASSIFICATION	3.152256786268447E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999984088729675	WITHOUT_CLASSIFICATION	1.5911270323891912E-6	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999984088729675	WITHOUT_CLASSIFICATION	1.5911270323891912E-6	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999999921451911	WITHOUT_CLASSIFICATION	7.85480888717013E-9	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9999036024280104	WITHOUT_CLASSIFICATION	9.639757198959904E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9998825159521154	WITHOUT_CLASSIFICATION	1.1748404788451049E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9998825159521154	WITHOUT_CLASSIFICATION	1.1748404788451049E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999964107236669	WITHOUT_CLASSIFICATION	3.5892763330328997E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999996083150573	WITHOUT_CLASSIFICATION	3.916849427080044E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.999999780413588	WITHOUT_CLASSIFICATION	2.1958641209560612E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999999780764023	WITHOUT_CLASSIFICATION	2.1923597614693496E-8	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999337658655504	WITHOUT_CLASSIFICATION	6.623413444965225E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999880543384061	WITHOUT_CLASSIFICATION	1.1945661593848245E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999998226645394	WITHOUT_CLASSIFICATION	1.773354607489225E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999884722461199	WITHOUT_CLASSIFICATION	1.1527753880112928E-5	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.999992933393603	WITHOUT_CLASSIFICATION	7.066606397034837E-6	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999967998442756	WITHOUT_CLASSIFICATION	3.2001557244116197E-6	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999962144753879	WITHOUT_CLASSIFICATION	3.785524612123929E-6	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999907924045377	WITHOUT_CLASSIFICATION	9.207595462329525E-6	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999984311575282	WITHOUT_CLASSIFICATION	1.5688424717923698E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999989593336913	WITHOUT_CLASSIFICATION	1.0406663087031153E-6	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999691414359757	WITHOUT_CLASSIFICATION	3.085856402423067E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9999716424164441	WITHOUT_CLASSIFICATION	2.8357583556025774E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999983978795427	WITHOUT_CLASSIFICATION	1.6021204573016575E-6	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.999997082652128	WITHOUT_CLASSIFICATION	2.9173478719743315E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999890131837754	WITHOUT_CLASSIFICATION	1.0986816224641134E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999927331172216	WITHOUT_CLASSIFICATION	7.266882778494111E-6	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.999999554255041	WITHOUT_CLASSIFICATION	4.4574495902353683E-7	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998954315619	WITHOUT_CLASSIFICATION	1.0456843811964761E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999928241763792	WITHOUT_CLASSIFICATION	7.1758236207890905E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999934222128792	WITHOUT_CLASSIFICATION	6.577787120819281E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999961723033723	WITHOUT_CLASSIFICATION	3.827696627643893E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.999997711712677	WITHOUT_CLASSIFICATION	2.288287323002127E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.999995827004955	WITHOUT_CLASSIFICATION	4.172995044984339E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999952164831468	WITHOUT_CLASSIFICATION	4.7835168531292116E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999956969871406	WITHOUT_CLASSIFICATION	4.3030128594189004E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999956969871406	WITHOUT_CLASSIFICATION	4.3030128594189004E-6	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999829177853771	WITHOUT_CLASSIFICATION	1.708221462299743E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999951643620976	WITHOUT_CLASSIFICATION	4.835637902462953E-6	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999567232567675	WITHOUT_CLASSIFICATION	4.327674323252065E-5	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9999816443700222	WITHOUT_CLASSIFICATION	1.835562997776638E-5	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999769597161062	WITHOUT_CLASSIFICATION	2.3040283893802655E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999917133120422	WITHOUT_CLASSIFICATION	8.28668795790692E-6	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999967073182766	WITHOUT_CLASSIFICATION	3.292681723319415E-6	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999990728784908	WITHOUT_CLASSIFICATION	9.271215093611929E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999998531177636	WITHOUT_CLASSIFICATION	1.468822363718682E-7	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998424992592	WITHOUT_CLASSIFICATION	1.575007407484477E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999993178181159	WITHOUT_CLASSIFICATION	6.821818841088356E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.999994586121845	WITHOUT_CLASSIFICATION	5.413878154973388E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999907307354643	WITHOUT_CLASSIFICATION	9.269264535674421E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999998457899735	WITHOUT_CLASSIFICATION	1.5421002654193146E-7	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999969763308111	WITHOUT_CLASSIFICATION	3.0236691888071987E-6	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.999991907618783	WITHOUT_CLASSIFICATION	8.092381217106769E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999987173638585	WITHOUT_CLASSIFICATION	1.2826361414281274E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.999999516166376	WITHOUT_CLASSIFICATION	4.838336240141366E-7	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999962604496083	WITHOUT_CLASSIFICATION	3.7395503916161105E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999988316053555	WITHOUT_CLASSIFICATION	1.168394644469269E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999975711350698	WITHOUT_CLASSIFICATION	2.428864930259791E-6	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9999566048725984	WITHOUT_CLASSIFICATION	4.33951274016176E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999997881343275	WITHOUT_CLASSIFICATION	2.1186567246191497E-7	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999993315031555	WITHOUT_CLASSIFICATION	6.684968445592301E-7	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999992630431858	WITHOUT_CLASSIFICATION	7.369568141309199E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837398075615	WITHOUT_CLASSIFICATION	1.626019243845205E-5	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999834042732918	WITHOUT_CLASSIFICATION	1.6595726708188342E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999298414864617	WITHOUT_CLASSIFICATION	7.0158513538286E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999920801929093	WITHOUT_CLASSIFICATION	7.919807090723863E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999971997530258	WITHOUT_CLASSIFICATION	2.8002469740602916E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999964011231022	WITHOUT_CLASSIFICATION	3.5988768977997252E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999972663748314	WITHOUT_CLASSIFICATION	2.733625168552292E-6	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999988456401725	WITHOUT_CLASSIFICATION	1.1543598275046243E-6	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999996861940471	WITHOUT_CLASSIFICATION	3.1380595293129844E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9999992484347805	WITHOUT_CLASSIFICATION	7.515652196165001E-7	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999956634026139	WITHOUT_CLASSIFICATION	4.3365973860723076E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999861579345194	WITHOUT_CLASSIFICATION	1.3842065480575483E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999853355547454	WITHOUT_CLASSIFICATION	1.466444525451176E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999885053269	WITHOUT_CLASSIFICATION	1.1494672979690939E-8	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.999999475179961	WITHOUT_CLASSIFICATION	5.248200389620228E-7	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999967605891097	WITHOUT_CLASSIFICATION	3.2394108902587234E-6	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999804566715921	WITHOUT_CLASSIFICATION	1.9543328407887926E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999803718386984	WITHOUT_CLASSIFICATION	1.962816130163899E-5	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9999803718386984	WITHOUT_CLASSIFICATION	1.962816130163899E-5	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999013622224326	WITHOUT_CLASSIFICATION	9.863777756739317E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999973280501955	WITHOUT_CLASSIFICATION	2.671949804490893E-6	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999954906396831	WITHOUT_CLASSIFICATION	4.5093603169519795E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029806	WITHOUT_CLASSIFICATION	2.7536970195307554E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.999999526515409	WITHOUT_CLASSIFICATION	4.7348459087358066E-7	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999999746882193	WITHOUT_CLASSIFICATION	2.5311780700983926E-7	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999997414382863	WITHOUT_CLASSIFICATION	2.5856171364407975E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999988509259816	WITHOUT_CLASSIFICATION	1.1490740183349894E-6	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9999754524359986	WITHOUT_CLASSIFICATION	2.4547564001343117E-5	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999953454413166	WITHOUT_CLASSIFICATION	4.654558683284165E-6	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999992630545319	WITHOUT_CLASSIFICATION	7.369454682042208E-7	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999994900306562	WITHOUT_CLASSIFICATION	5.09969343795052E-7	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999966213276795	WITHOUT_CLASSIFICATION	3.378672320591431E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999972146980443	WITHOUT_CLASSIFICATION	2.7853019556339942E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999997937068537	WITHOUT_CLASSIFICATION	2.0629314630600136E-6	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999922342892137	WITHOUT_CLASSIFICATION	7.765710786390037E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999981253137473	WITHOUT_CLASSIFICATION	1.8746862527392954E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999949923735922	WITHOUT_CLASSIFICATION	5.00762640765266E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999983088727602	WITHOUT_CLASSIFICATION	1.691127239864031E-6	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999946134797579	WITHOUT_CLASSIFICATION	5.3865202420819246E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999978513290528	WITHOUT_CLASSIFICATION	2.148670947250376E-6	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999968040118494	WITHOUT_CLASSIFICATION	3.195988150620203E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999995127451832	WITHOUT_CLASSIFICATION	4.872548169462551E-7	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999995513726633	WITHOUT_CLASSIFICATION	4.486273366841716E-7	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999987263498652	WITHOUT_CLASSIFICATION	1.2736501348280608E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999987992006346	WITHOUT_CLASSIFICATION	1.2007993653647283E-6	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999987456586933	WITHOUT_CLASSIFICATION	1.2543413067923906E-6	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999974443083258	WITHOUT_CLASSIFICATION	2.5556916742087293E-6	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999948165183735	WITHOUT_CLASSIFICATION	5.18348162653753E-6	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999955979508349	WITHOUT_CLASSIFICATION	4.402049165027161E-6	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999775179915261	WITHOUT_CLASSIFICATION	2.2482008473845414E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999992354404261	WITHOUT_CLASSIFICATION	7.645595739483908E-7	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999871222628236	WITHOUT_CLASSIFICATION	1.287773717626821E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999969820362801	WITHOUT_CLASSIFICATION	3.0179637200413393E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999853355547454	WITHOUT_CLASSIFICATION	1.466444525451176E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999993337645371	WITHOUT_CLASSIFICATION	6.662354628517704E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999875286264301	WITHOUT_CLASSIFICATION	1.2471373569877157E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999875286264301	WITHOUT_CLASSIFICATION	1.2471373569877157E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999997579373787	WITHOUT_CLASSIFICATION	2.420626213136694E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999984877475043	WITHOUT_CLASSIFICATION	1.5122524956670457E-6	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9998948056734227	WITHOUT_CLASSIFICATION	1.0519432657731614E-4	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999996593381674	WITHOUT_CLASSIFICATION	3.4066183270233734E-7	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999962765581603	WITHOUT_CLASSIFICATION	3.723441839805757E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999950053596134	WITHOUT_CLASSIFICATION	4.994640386636581E-6	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.999996657254058	WITHOUT_CLASSIFICATION	3.3427459420714364E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999967422053507	WITHOUT_CLASSIFICATION	3.2577946493488462E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.999992387662686	WITHOUT_CLASSIFICATION	7.612337314005037E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999952459623183	WITHOUT_CLASSIFICATION	4.754037681688373E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999950347868063	WITHOUT_CLASSIFICATION	4.965213193644211E-6	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999926209745781	WITHOUT_CLASSIFICATION	7.379025421919601E-6	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999932513971892	WITHOUT_CLASSIFICATION	6.748602810751563E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9999600882957927	WITHOUT_CLASSIFICATION	3.9911704207226086E-5	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999806850888	WITHOUT_CLASSIFICATION	1.9314911155336998E-8	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999937908428402	WITHOUT_CLASSIFICATION	6.209157159808297E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.999997582889079	WITHOUT_CLASSIFICATION	2.4171109209237503E-6	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9999949333135538	WITHOUT_CLASSIFICATION	5.066686446091433E-6	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999946585322829	WITHOUT_CLASSIFICATION	5.34146771707864E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999966641629104	WITHOUT_CLASSIFICATION	3.335837089522185E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999971368610999	WITHOUT_CLASSIFICATION	2.8631388999578705E-6	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999896056006374	WITHOUT_CLASSIFICATION	1.0394399362578945E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999583742152	WITHOUT_CLASSIFICATION	4.16257848870763E-8	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999996400019849	WITHOUT_CLASSIFICATION	3.5999801495429637E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999991561596526	WITHOUT_CLASSIFICATION	8.43840347374635E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999201212426	WITHOUT_CLASSIFICATION	7.987875739432139E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999832851743	WITHOUT_CLASSIFICATION	1.6714825691370385E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999989383139286	WITHOUT_CLASSIFICATION	1.0616860714302162E-6	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999998000860963	WITHOUT_CLASSIFICATION	1.9991390360728206E-7	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999991725270184	WITHOUT_CLASSIFICATION	8.274729816959593E-7	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999872615541736	WITHOUT_CLASSIFICATION	1.2738445826384854E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999998232814891	WITHOUT_CLASSIFICATION	1.767185108905462E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999999184761182	WITHOUT_CLASSIFICATION	8.152388179829452E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999935501079996	WITHOUT_CLASSIFICATION	6.44989200049979E-6	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999978546755998	WITHOUT_CLASSIFICATION	2.145324400179879E-6	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999945880809945	WITHOUT_CLASSIFICATION	5.411919005582434E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999994920147612	WITHOUT_CLASSIFICATION	5.079852387379702E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999999201212426	WITHOUT_CLASSIFICATION	7.987875739432139E-7	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999832851743	WITHOUT_CLASSIFICATION	1.6714825691370385E-7	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999989383139286	WITHOUT_CLASSIFICATION	1.0616860714302162E-6	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999991725270184	WITHOUT_CLASSIFICATION	8.274729816959593E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999920122549816	WITHOUT_CLASSIFICATION	7.987745018439522E-6	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999998774754469	WITHOUT_CLASSIFICATION	1.2252455305797135E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999885795825781	WITHOUT_CLASSIFICATION	1.1420417421991558E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999991817189484	WITHOUT_CLASSIFICATION	8.182810515947151E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.999688511386054	WITHOUT_CLASSIFICATION	3.114886139460574E-4	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999919772323146	WITHOUT_CLASSIFICATION	8.022767685289895E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999943304376495	WITHOUT_CLASSIFICATION	5.6695623505050204E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997020816617	WITHOUT_CLASSIFICATION	2.979183383513338E-7	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999998245597644	WITHOUT_CLASSIFICATION	1.7544023554703716E-7	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.999999046758172	WITHOUT_CLASSIFICATION	9.532418280680115E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999953924745978	WITHOUT_CLASSIFICATION	4.607525402228342E-6	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999997144808617	WITHOUT_CLASSIFICATION	2.855191383005641E-7	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9999938103985989	WITHOUT_CLASSIFICATION	6.189601401051801E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999991117992465	WITHOUT_CLASSIFICATION	8.882007533964213E-7	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999982618560115	WITHOUT_CLASSIFICATION	1.7381439884857878E-6	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999976682048192	WITHOUT_CLASSIFICATION	2.331795180841499E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999994213774297	WITHOUT_CLASSIFICATION	5.786225703509242E-7	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999995844357791	WITHOUT_CLASSIFICATION	4.1556422092145835E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9999941775722005	WITHOUT_CLASSIFICATION	5.822427799413778E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999994920147612	WITHOUT_CLASSIFICATION	5.079852387379702E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999998774754469	WITHOUT_CLASSIFICATION	1.2252455305797135E-7	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999885795825781	WITHOUT_CLASSIFICATION	1.1420417421991558E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.999688511386054	WITHOUT_CLASSIFICATION	3.114886139460574E-4	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999919772323146	WITHOUT_CLASSIFICATION	8.022767685289895E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999943304376495	WITHOUT_CLASSIFICATION	5.6695623505050204E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997020816617	WITHOUT_CLASSIFICATION	2.979183383513338E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999614219923	WITHOUT_CLASSIFICATION	3.8578007721016324E-8	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999949966211854	WITHOUT_CLASSIFICATION	5.003378814531414E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999890942059947	WITHOUT_CLASSIFICATION	1.0905794005327665E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999679211282	WITHOUT_CLASSIFICATION	3.207887187469608E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999999109322947	WITHOUT_CLASSIFICATION	8.906770522294109E-8	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999999109322947	WITHOUT_CLASSIFICATION	8.906770522294109E-8	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999999454668039	WITHOUT_CLASSIFICATION	5.453319614941203E-8	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999988686037853	WITHOUT_CLASSIFICATION	1.1313962147333028E-6	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999690500515466	WITHOUT_CLASSIFICATION	3.094994845347294E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999909950507723	WITHOUT_CLASSIFICATION	9.004949227756851E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999992004612919	WITHOUT_CLASSIFICATION	7.995387081780462E-7	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999992139926974	WITHOUT_CLASSIFICATION	7.86007302594734E-7	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999992444280665	WITHOUT_CLASSIFICATION	7.555719333381659E-7	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999970177587163	WITHOUT_CLASSIFICATION	2.9822412836859463E-6	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999988167378111	WITHOUT_CLASSIFICATION	1.1832621889115487E-6	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999937457141289	WITHOUT_CLASSIFICATION	6.25428587109377E-6	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999961488818198	WITHOUT_CLASSIFICATION	3.851118180260755E-6	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999969463687068	WITHOUT_CLASSIFICATION	3.0536312930856755E-6	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999855303461611	WITHOUT_CLASSIFICATION	1.4469653839021994E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999849152850706	WITHOUT_CLASSIFICATION	1.5084714929346414E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.999999478006761	WITHOUT_CLASSIFICATION	5.219932389579438E-7	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999970260472646	WITHOUT_CLASSIFICATION	2.9739527354290853E-6	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999992430517617	WITHOUT_CLASSIFICATION	7.569482383439371E-7	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999984602895053	WITHOUT_CLASSIFICATION	1.5397104946787046E-6	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999984045972564	WITHOUT_CLASSIFICATION	1.5954027436197623E-6	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.999995432661053	WITHOUT_CLASSIFICATION	4.567338947011804E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.8325373472765563	WITHOUT_CLASSIFICATION	0.16746265272344377	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999993799040316	WITHOUT_CLASSIFICATION	6.200959683945906E-7	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999994400245628	WITHOUT_CLASSIFICATION	5.599754372146492E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999991187982494	WITHOUT_CLASSIFICATION	8.812017504976029E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999175671996952	WITHOUT_CLASSIFICATION	8.243280030475287E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999978362748633	WITHOUT_CLASSIFICATION	2.1637251367394787E-6	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999997576340048	WITHOUT_CLASSIFICATION	2.423659952449762E-7	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999949523973056	WITHOUT_CLASSIFICATION	5.047602694348588E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999991187982494	WITHOUT_CLASSIFICATION	8.812017504976029E-7	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999175671996952	WITHOUT_CLASSIFICATION	8.243280030475287E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999849152850706	WITHOUT_CLASSIFICATION	1.5084714929346414E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999993033892618	WITHOUT_CLASSIFICATION	6.966107381425684E-7	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999983837888446	WITHOUT_CLASSIFICATION	1.6162111553279974E-6	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999986632345331	WITHOUT_CLASSIFICATION	1.336765466880117E-6	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999992613723231	WITHOUT_CLASSIFICATION	7.38627676960822E-7	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999993604637369	WITHOUT_CLASSIFICATION	6.395362631298299E-7	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999981367177813	WITHOUT_CLASSIFICATION	1.86328221871402E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997589846433547	WITHOUT_CLASSIFICATION	2.4101535664527405E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999768076506963	WITHOUT_CLASSIFICATION	2.3192349303765316E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9999852483660712	WITHOUT_CLASSIFICATION	1.4751633928900682E-5	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999993791974296	WITHOUT_CLASSIFICATION	6.208025703243523E-7	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9999886496138113	WITHOUT_CLASSIFICATION	1.1350386188693595E-5	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999987221756257	WITHOUT_CLASSIFICATION	1.27782437430887E-6	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999998802177703	WITHOUT_CLASSIFICATION	1.1978222974630092E-7	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999182202	WITHOUT_CLASSIFICATION	8.177980003591463E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999931188658087	WITHOUT_CLASSIFICATION	6.881134191340175E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.999996619908972	WITHOUT_CLASSIFICATION	3.3800910278429623E-6	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.999999201197858	WITHOUT_CLASSIFICATION	7.988021419081802E-7	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.99999443182206	WITHOUT_CLASSIFICATION	5.568177939944537E-6	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999987201128846	WITHOUT_CLASSIFICATION	1.2798871154421059E-6	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999996660073524	WITHOUT_CLASSIFICATION	3.3399264767028254E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999693326804	WITHOUT_CLASSIFICATION	3.066731960729723E-8	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999983656026713	WITHOUT_CLASSIFICATION	1.6343973286940715E-6	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999997602261875	WITHOUT_CLASSIFICATION	2.3977381247573515E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999995653729564	WITHOUT_CLASSIFICATION	4.346270436111359E-7	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999996878416033	WITHOUT_CLASSIFICATION	3.1215839671087485E-7	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999997035700418	WITHOUT_CLASSIFICATION	2.9642995814399446E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999937131359214	WITHOUT_CLASSIFICATION	6.286864078469809E-6	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999825828468879	WITHOUT_CLASSIFICATION	1.741715311209146E-5	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999977449303269	WITHOUT_CLASSIFICATION	2.2550696731291672E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9997484250352944	WITHOUT_CLASSIFICATION	2.51574964705636E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999996006975522	WITHOUT_CLASSIFICATION	3.993024476776122E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999855303461611	WITHOUT_CLASSIFICATION	1.4469653839021994E-5	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999881065958645	WITHOUT_CLASSIFICATION	1.18934041356019E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999965756309123	WITHOUT_CLASSIFICATION	3.424369087801491E-6	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999936842584825	WITHOUT_CLASSIFICATION	6.31574151750004E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998061838853	WITHOUT_CLASSIFICATION	1.9381611459941542E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998061838853	WITHOUT_CLASSIFICATION	1.9381611459941542E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999996970034404	WITHOUT_CLASSIFICATION	3.029965596369538E-7	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999925538340563	WITHOUT_CLASSIFICATION	7.446165943748796E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999998303248353	WITHOUT_CLASSIFICATION	1.6967516458433097E-7	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999980528852752	WITHOUT_CLASSIFICATION	1.947114724782194E-6	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.999998344159341	WITHOUT_CLASSIFICATION	1.6558406590219529E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999975051134629	WITHOUT_CLASSIFICATION	2.4948865370992894E-6	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999994187646707	WITHOUT_CLASSIFICATION	5.812353293561021E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.99999546215398	WITHOUT_CLASSIFICATION	4.537846019924443E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999326824785537	WITHOUT_CLASSIFICATION	6.731752144618744E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999875158697419	WITHOUT_CLASSIFICATION	1.2484130258144565E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999977464140589	WITHOUT_CLASSIFICATION	2.2535859411652697E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999961092925522	WITHOUT_CLASSIFICATION	3.890707447816046E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999864404701542	WITHOUT_CLASSIFICATION	1.3559529845778619E-5	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999953699473935	WITHOUT_CLASSIFICATION	4.630052606612692E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999283199053256	WITHOUT_CLASSIFICATION	7.168009467444286E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999775520275036	WITHOUT_CLASSIFICATION	2.2447972496449682E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999997676681265	WITHOUT_CLASSIFICATION	2.3233187364097387E-7	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999997676681265	WITHOUT_CLASSIFICATION	2.3233187364097387E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999994596990204	WITHOUT_CLASSIFICATION	5.403009796267452E-7	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999994596990204	WITHOUT_CLASSIFICATION	5.403009796267452E-7	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999998726030055	WITHOUT_CLASSIFICATION	1.2739699441453934E-7	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999650891298723	WITHOUT_CLASSIFICATION	3.4910870127687516E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.999997137516007	WITHOUT_CLASSIFICATION	2.8624839928719125E-6	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999990046482006	WITHOUT_CLASSIFICATION	9.953517993906001E-7	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999997565661104	WITHOUT_CLASSIFICATION	2.434338896410544E-7	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999992098795588	WITHOUT_CLASSIFICATION	7.901204412634046E-7	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999934669603348	WITHOUT_CLASSIFICATION	6.5330396652456406E-6	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999961092925522	WITHOUT_CLASSIFICATION	3.890707447816046E-6	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999864404701542	WITHOUT_CLASSIFICATION	1.3559529845778619E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999283199053256	WITHOUT_CLASSIFICATION	7.168009467444286E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999928164706857	WITHOUT_CLASSIFICATION	7.183529314240537E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999997168695268	WITHOUT_CLASSIFICATION	2.831304731823914E-7	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.999945984856614	WITHOUT_CLASSIFICATION	5.401514338600897E-5	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9975109084665338	WITHOUT_CLASSIFICATION	0.002489091533466264	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999972439618171	WITHOUT_CLASSIFICATION	2.756038182843962E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9998465412597527	WITHOUT_CLASSIFICATION	1.534587402474029E-4	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999965884043903	WITHOUT_CLASSIFICATION	3.4115956097387323E-6	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.99999609841211	WITHOUT_CLASSIFICATION	3.9015878899213995E-6	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999958576646321	WITHOUT_CLASSIFICATION	4.142335367883271E-6	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999996055721446	WITHOUT_CLASSIFICATION	3.94427855412218E-7	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999142893548727	WITHOUT_CLASSIFICATION	8.571064512726487E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9999440267505508	WITHOUT_CLASSIFICATION	5.5973249449094485E-5	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999965548033628	WITHOUT_CLASSIFICATION	3.445196637274603E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9999705549828051	WITHOUT_CLASSIFICATION	2.9445017194851324E-5	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.999993017536435	WITHOUT_CLASSIFICATION	6.9824635649372005E-6	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999862023476771	WITHOUT_CLASSIFICATION	1.3797652322790721E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999993236078322	WITHOUT_CLASSIFICATION	6.763921678692873E-7	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9998920022773627	WITHOUT_CLASSIFICATION	1.0799772263726976E-4	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999961431328972	WITHOUT_CLASSIFICATION	3.856867102803596E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999988505708409	WITHOUT_CLASSIFICATION	1.1494291590333426E-6	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999303012674	WITHOUT_CLASSIFICATION	6.96987325727954E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999934070674426	WITHOUT_CLASSIFICATION	6.592932557434313E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9999953899571221	WITHOUT_CLASSIFICATION	4.610042877887006E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999999084640026	WITHOUT_CLASSIFICATION	9.153599740778238E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999993322769585	WITHOUT_CLASSIFICATION	6.677230415374433E-7	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999999551747957	WITHOUT_CLASSIFICATION	4.482520431196103E-8	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999993288389933	WITHOUT_CLASSIFICATION	6.711610067565128E-7	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999976704393402	WITHOUT_CLASSIFICATION	2.329560659821783E-6	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999997325184994	WITHOUT_CLASSIFICATION	2.674815006347601E-7	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999991402541786	WITHOUT_CLASSIFICATION	8.597458214252901E-7	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999985319574014	WITHOUT_CLASSIFICATION	1.4680425985592534E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9999960624858218	WITHOUT_CLASSIFICATION	3.937514178100049E-6	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.99999994433889	WITHOUT_CLASSIFICATION	5.566111009636139E-8	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999998616685041	WITHOUT_CLASSIFICATION	1.3833149586040642E-7	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999988182598276	WITHOUT_CLASSIFICATION	1.181740172331525E-6	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999992369598435	WITHOUT_CLASSIFICATION	7.630401565128476E-7	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999963469825967	WITHOUT_CLASSIFICATION	3.653017403381177E-6	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999997727451867	WITHOUT_CLASSIFICATION	2.2725481333188415E-7	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999900584356457	WITHOUT_CLASSIFICATION	9.941564354332247E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.999997819374943	WITHOUT_CLASSIFICATION	2.1806250569576933E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999996658090915	WITHOUT_CLASSIFICATION	3.3419090842924783E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999965756309123	WITHOUT_CLASSIFICATION	3.424369087801491E-6	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999963469825967	WITHOUT_CLASSIFICATION	3.653017403381177E-6	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999327424824771	WITHOUT_CLASSIFICATION	6.725751752287064E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999917202480935	WITHOUT_CLASSIFICATION	8.279751906624443E-6	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999980942625963	WITHOUT_CLASSIFICATION	1.905737403611217E-6	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999892015339973	WITHOUT_CLASSIFICATION	1.0798466002781941E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9999892015339973	WITHOUT_CLASSIFICATION	1.0798466002781941E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999999684373311	WITHOUT_CLASSIFICATION	3.156266898077311E-8	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999998822345829	WITHOUT_CLASSIFICATION	1.1776541709044758E-7	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999992988877595	WITHOUT_CLASSIFICATION	7.011122403691163E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999581301631	WITHOUT_CLASSIFICATION	4.1869837009811826E-8	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999993500096046	WITHOUT_CLASSIFICATION	6.499903955050923E-7	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999905475609182	WITHOUT_CLASSIFICATION	9.452439081740329E-6	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999995874528724	WITHOUT_CLASSIFICATION	4.1254712758960347E-7	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999682143488284	WITHOUT_CLASSIFICATION	3.178565117164713E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999983514097587	WITHOUT_CLASSIFICATION	1.6485902413664201E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999983514097587	WITHOUT_CLASSIFICATION	1.6485902413664201E-6	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999977689041836	WITHOUT_CLASSIFICATION	2.2310958163974687E-6	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999990191232084	WITHOUT_CLASSIFICATION	9.808767915515313E-7	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999988694087826	WITHOUT_CLASSIFICATION	1.130591217454058E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9992779169420762	WITHOUT_CLASSIFICATION	7.220830579238974E-4	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999817762623412	WITHOUT_CLASSIFICATION	1.8223737658794024E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999971268330828	WITHOUT_CLASSIFICATION	2.8731669171453746E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999881050505384	WITHOUT_CLASSIFICATION	1.1894949461611075E-5	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999996942262168	WITHOUT_CLASSIFICATION	3.057737831188199E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999877235085671	WITHOUT_CLASSIFICATION	1.2276491432889441E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999971033683268	WITHOUT_CLASSIFICATION	2.896631673112564E-6	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999960780339447	WITHOUT_CLASSIFICATION	3.921966055254865E-6	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999843141443812	WITHOUT_CLASSIFICATION	1.568585561886329E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999934731052353	WITHOUT_CLASSIFICATION	6.526894764628433E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999966911547152	WITHOUT_CLASSIFICATION	3.3088452847989934E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999966911547152	WITHOUT_CLASSIFICATION	3.3088452847989934E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999967430394016	WITHOUT_CLASSIFICATION	3.256960598337904E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999997020816617	WITHOUT_CLASSIFICATION	2.979183383513338E-7	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999986587350717	WITHOUT_CLASSIFICATION	1.3412649282890957E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999992928459158	WITHOUT_CLASSIFICATION	7.071540841513379E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999940964251077	WITHOUT_CLASSIFICATION	5.903574892321363E-6	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999997346905523	WITHOUT_CLASSIFICATION	2.653094476707699E-7	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999991833794923	WITHOUT_CLASSIFICATION	8.166205076293135E-7	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999916094157223	WITHOUT_CLASSIFICATION	8.39058427762718E-6	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.99999922319932	WITHOUT_CLASSIFICATION	7.768006799770312E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999962609012787	WITHOUT_CLASSIFICATION	3.739098721430103E-6	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999960735813216	WITHOUT_CLASSIFICATION	3.9264186783755655E-6	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999958788019355	WITHOUT_CLASSIFICATION	4.121198064459261E-6	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999996872512246	WITHOUT_CLASSIFICATION	3.1274877534415335E-7	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.999994363523316	WITHOUT_CLASSIFICATION	5.636476683912402E-6	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999987483120236	WITHOUT_CLASSIFICATION	1.251687976319135E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999993335899214	WITHOUT_CLASSIFICATION	6.664100785269816E-7	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999994580523016	WITHOUT_CLASSIFICATION	5.41947698450212E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.999998527445231	WITHOUT_CLASSIFICATION	1.472554768962914E-6	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999967780086916	WITHOUT_CLASSIFICATION	3.221991308470628E-6	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999993739572999	WITHOUT_CLASSIFICATION	6.260427001131705E-7	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9998912370359921	WITHOUT_CLASSIFICATION	1.0876296400785707E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999998000917262	WITHOUT_CLASSIFICATION	1.999082737527311E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999965920085068	WITHOUT_CLASSIFICATION	3.4079914932396775E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999979688031133	WITHOUT_CLASSIFICATION	2.0311968867274387E-6	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.6134680180310527	DEFECT	0.38653198196894734	WITHOUT_CLASSIFICATION
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.99993430807044	WITHOUT_CLASSIFICATION	6.569192956004172E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999980105983548	WITHOUT_CLASSIFICATION	1.989401645151317E-6	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999989663617034	WITHOUT_CLASSIFICATION	1.0336382966028994E-6	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999992971967522	WITHOUT_CLASSIFICATION	7.028032478214551E-7	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999858178651223	WITHOUT_CLASSIFICATION	1.4182134877619684E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999962970144084	WITHOUT_CLASSIFICATION	3.7029855915121135E-6	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999968748894857	WITHOUT_CLASSIFICATION	3.1251105141724485E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999993205996093	WITHOUT_CLASSIFICATION	6.7940039070225755E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999707238376	WITHOUT_CLASSIFICATION	2.927616241474022E-8	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999821192935433	WITHOUT_CLASSIFICATION	1.7880706456669454E-5	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999977102168814	WITHOUT_CLASSIFICATION	2.289783118515737E-6	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999996670466367	WITHOUT_CLASSIFICATION	3.3295336329230016E-7	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999981757139791	WITHOUT_CLASSIFICATION	1.8242860208348166E-6	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999990750988972	WITHOUT_CLASSIFICATION	9.249011027406307E-7	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999992862370614	WITHOUT_CLASSIFICATION	7.137629387403686E-7	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999894837183039	WITHOUT_CLASSIFICATION	1.051628169607422E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999693465936303	WITHOUT_CLASSIFICATION	3.065340636963921E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999944020504351	WITHOUT_CLASSIFICATION	5.59794956492524E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999888252262075	WITHOUT_CLASSIFICATION	1.117477379251197E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999917560260471	WITHOUT_CLASSIFICATION	8.243973952952368E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999956437029243	WITHOUT_CLASSIFICATION	4.356297075656227E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999976477002248	WITHOUT_CLASSIFICATION	2.3522997751052447E-6	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999972631678	WITHOUT_CLASSIFICATION	2.7368321328906274E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.999997845917845	WITHOUT_CLASSIFICATION	2.1540821549624646E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999991187982494	WITHOUT_CLASSIFICATION	8.812017504976029E-7	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999991187982494	WITHOUT_CLASSIFICATION	8.812017504976029E-7	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999998316846537	WITHOUT_CLASSIFICATION	1.6831534642984812E-7	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999933055205434	WITHOUT_CLASSIFICATION	6.6944794565003805E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999997164688147	WITHOUT_CLASSIFICATION	2.835311853214132E-7	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9999933395336226	WITHOUT_CLASSIFICATION	6.660466377365799E-6	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999329643826	WITHOUT_CLASSIFICATION	6.70356173335817E-8	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999913523961443	WITHOUT_CLASSIFICATION	8.647603855711958E-6	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999994771879237	WITHOUT_CLASSIFICATION	5.228120763105487E-7	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999550103628709	WITHOUT_CLASSIFICATION	4.498963712911362E-5	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999994989733911	WITHOUT_CLASSIFICATION	5.010266088757068E-7	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999996814174674	WITHOUT_CLASSIFICATION	3.1858253252263586E-7	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999989898696188	WITHOUT_CLASSIFICATION	1.0101303811912142E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999989898696188	WITHOUT_CLASSIFICATION	1.0101303811912142E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.999989898696188	WITHOUT_CLASSIFICATION	1.0101303811912142E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999999389522177	WITHOUT_CLASSIFICATION	6.104778225928042E-8	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999849176225193	WITHOUT_CLASSIFICATION	1.508237748074407E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999493407191893	WITHOUT_CLASSIFICATION	5.0659280810604727E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999965587392763	WITHOUT_CLASSIFICATION	3.441260723698798E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999965587392763	WITHOUT_CLASSIFICATION	3.441260723698798E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999997833634862	WITHOUT_CLASSIFICATION	2.1663651384426902E-7	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999973730255894	WITHOUT_CLASSIFICATION	2.626974410556766E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999989047505152	WITHOUT_CLASSIFICATION	1.0952494847178761E-6	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999996763755038	WITHOUT_CLASSIFICATION	3.2362449624707076E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999993382648438	WITHOUT_CLASSIFICATION	6.617351562663314E-7	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999929539159648	WITHOUT_CLASSIFICATION	7.046084035198685E-6	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999967705435271	WITHOUT_CLASSIFICATION	3.229456472860572E-6	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999976522967224	WITHOUT_CLASSIFICATION	2.347703277608285E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999995407407616	WITHOUT_CLASSIFICATION	4.5925923847425305E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999994103155717	WITHOUT_CLASSIFICATION	5.896844283503609E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999994103155717	WITHOUT_CLASSIFICATION	5.896844283503609E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999980658801063	WITHOUT_CLASSIFICATION	1.9341198936011345E-6	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999931592676156	WITHOUT_CLASSIFICATION	6.840732384433477E-6	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999986723726524	WITHOUT_CLASSIFICATION	1.3276273476238027E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999975189815773	WITHOUT_CLASSIFICATION	2.4810184225989723E-6	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9999992579260787	WITHOUT_CLASSIFICATION	7.420739213621429E-7	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999975643883369	WITHOUT_CLASSIFICATION	2.4356116632421283E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999957885976741	WITHOUT_CLASSIFICATION	4.2114023258982665E-6	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.999994605303057	WITHOUT_CLASSIFICATION	5.394696943109458E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999984202551473	WITHOUT_CLASSIFICATION	1.5797448528249677E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.999995244738682	WITHOUT_CLASSIFICATION	4.755261317938982E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999996385412335	WITHOUT_CLASSIFICATION	3.6145876652171896E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.999993657641136	WITHOUT_CLASSIFICATION	6.342358863912522E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999943957247347	WITHOUT_CLASSIFICATION	5.6042752653671E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999991210959874	WITHOUT_CLASSIFICATION	8.789040125992089E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999584151128172	WITHOUT_CLASSIFICATION	4.158488718281345E-5	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999999554263787	WITHOUT_CLASSIFICATION	4.45736212853284E-8	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999987555983914	WITHOUT_CLASSIFICATION	1.244401608615031E-6	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999989264735588	WITHOUT_CLASSIFICATION	1.0735264411601302E-6	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999957219462657	WITHOUT_CLASSIFICATION	4.27805373423054E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999999383712243	WITHOUT_CLASSIFICATION	6.162877567163952E-8	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9992905364431163	WITHOUT_CLASSIFICATION	7.094635568836246E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999998323376129	WITHOUT_CLASSIFICATION	1.6766238714670606E-7	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999994559900092	WITHOUT_CLASSIFICATION	5.440099907495648E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999999440474182	WITHOUT_CLASSIFICATION	5.5952581833784545E-8	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999973394743372	WITHOUT_CLASSIFICATION	2.660525662677961E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999988122678928	WITHOUT_CLASSIFICATION	1.1877321072062864E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999990411166763	WITHOUT_CLASSIFICATION	9.588833237305966E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999910164031042	WITHOUT_CLASSIFICATION	8.983596895760266E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999961489468641	WITHOUT_CLASSIFICATION	3.851053135830342E-6	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999978686117313	WITHOUT_CLASSIFICATION	2.13138826862321E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999903778547675	WITHOUT_CLASSIFICATION	9.622145232366757E-6	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999978245315927	WITHOUT_CLASSIFICATION	2.1754684072859118E-6	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.999995308529749	WITHOUT_CLASSIFICATION	4.691470250912456E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999903778547675	WITHOUT_CLASSIFICATION	9.622145232366757E-6	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999781503099188	WITHOUT_CLASSIFICATION	2.1849690081201804E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999998183918802	WITHOUT_CLASSIFICATION	1.81608119622331E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999955113022405	WITHOUT_CLASSIFICATION	4.488697759509791E-6	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9997506031761599	WITHOUT_CLASSIFICATION	2.493968238399821E-4	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.999985550068845	WITHOUT_CLASSIFICATION	1.4449931154919331E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999990850970543	WITHOUT_CLASSIFICATION	9.14902945627526E-7	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999962553135808	WITHOUT_CLASSIFICATION	3.7446864192134784E-6	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999581584243928	WITHOUT_CLASSIFICATION	4.1841575607147105E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999841920627529	WITHOUT_CLASSIFICATION	1.580793724700941E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.999971388202644	WITHOUT_CLASSIFICATION	2.861179735601054E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999332603054871	WITHOUT_CLASSIFICATION	6.673969451294582E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999527401147675	WITHOUT_CLASSIFICATION	4.725988523238965E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9992260355375288	WITHOUT_CLASSIFICATION	7.739644624712685E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9997356974550791	WITHOUT_CLASSIFICATION	2.643025449208974E-4	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999869300262111	WITHOUT_CLASSIFICATION	1.3069973788953787E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.999974577599733	WITHOUT_CLASSIFICATION	2.5422400267010022E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999943149044627	WITHOUT_CLASSIFICATION	5.6850955374096635E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999824234101786	WITHOUT_CLASSIFICATION	1.7576589821373226E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.999991243044344	WITHOUT_CLASSIFICATION	8.75695565597237E-6	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999560995449959	WITHOUT_CLASSIFICATION	4.390045500417516E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9998498417379835	WITHOUT_CLASSIFICATION	1.5015826201649193E-4	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999168546330273	WITHOUT_CLASSIFICATION	8.31453669727479E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999936120981746	WITHOUT_CLASSIFICATION	6.3879018253042945E-6	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.999991375207617	WITHOUT_CLASSIFICATION	8.624792382933377E-6	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999887990181076	WITHOUT_CLASSIFICATION	1.12009818925517E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999977113539329	WITHOUT_CLASSIFICATION	2.2886460671237137E-6	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999676928938704	WITHOUT_CLASSIFICATION	3.230710612959584E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.99999944871566	WITHOUT_CLASSIFICATION	5.512843399106606E-7	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999984236254563	WITHOUT_CLASSIFICATION	1.5763745437259273E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999976544155035	WITHOUT_CLASSIFICATION	2.3455844964850976E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999960867450643	WITHOUT_CLASSIFICATION	3.9132549355523595E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.999575933060561	WITHOUT_CLASSIFICATION	4.240669394389789E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9927350846784935	WITHOUT_CLASSIFICATION	0.007264915321506446	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999992822838929	WITHOUT_CLASSIFICATION	7.177161070874153E-7	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999981035934777	WITHOUT_CLASSIFICATION	1.8964065222576282E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999972898315613	WITHOUT_CLASSIFICATION	2.7101684385813504E-6	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999985507136271	WITHOUT_CLASSIFICATION	1.4492863728789186E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.99997320519121	WITHOUT_CLASSIFICATION	2.67948087900274E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999968506662499	WITHOUT_CLASSIFICATION	3.1493337501286786E-6	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999990226222751	WITHOUT_CLASSIFICATION	9.773777247844366E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999980503985995	WITHOUT_CLASSIFICATION	1.949601400417659E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999907127593329	WITHOUT_CLASSIFICATION	9.287240666957701E-6	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999965406749263	WITHOUT_CLASSIFICATION	3.4593250737582735E-6	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999973472462579	WITHOUT_CLASSIFICATION	2.652753741986346E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999988312954227	WITHOUT_CLASSIFICATION	1.1687045772695573E-6	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999986212741728	WITHOUT_CLASSIFICATION	1.3787258271724305E-6	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999972301403844	WITHOUT_CLASSIFICATION	2.7698596156724274E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999978903313403	WITHOUT_CLASSIFICATION	2.1096686596013924E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999999369412322	WITHOUT_CLASSIFICATION	6.305876778743677E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999990657810861	WITHOUT_CLASSIFICATION	9.342189139751198E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999921139604465	WITHOUT_CLASSIFICATION	7.886039553529518E-6	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999646942937699	WITHOUT_CLASSIFICATION	3.530570623006055E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999999783147845	WITHOUT_CLASSIFICATION	2.1685215552717894E-8	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999999369412322	WITHOUT_CLASSIFICATION	6.305876778743677E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7843142039352394	WITHOUT_CLASSIFICATION	0.21568579606476057	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7843142039352394	WITHOUT_CLASSIFICATION	0.21568579606476057	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999999332555141	WITHOUT_CLASSIFICATION	6.674448590915346E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.999992678986392	WITHOUT_CLASSIFICATION	7.321013608011144E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999984670978173	WITHOUT_CLASSIFICATION	1.5329021827026092E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999997248775723	WITHOUT_CLASSIFICATION	2.7512242772967606E-7	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999995602655735	WITHOUT_CLASSIFICATION	4.3973442660961993E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999967402095931	WITHOUT_CLASSIFICATION	3.2597904068835878E-6	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999956760729164	WITHOUT_CLASSIFICATION	4.323927083609766E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.9867547558626616	DEFECT	0.013245244137338439	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9999997878539267	WITHOUT_CLASSIFICATION	2.121460732811593E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999819956177879	WITHOUT_CLASSIFICATION	1.800438221201404E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999157501774	WITHOUT_CLASSIFICATION	8.424982260481934E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9999839987146767	WITHOUT_CLASSIFICATION	1.600128532335312E-5	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999909615805148	WITHOUT_CLASSIFICATION	9.038419485188848E-6	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999990900571326	WITHOUT_CLASSIFICATION	9.099428673039837E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.999657325216972	WITHOUT_CLASSIFICATION	3.4267478302799987E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998565969019275	WITHOUT_CLASSIFICATION	1.4340309807249797E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999987970318324	WITHOUT_CLASSIFICATION	1.2029681676809164E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999953205341735	WITHOUT_CLASSIFICATION	4.679465826481466E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794719665288	WITHOUT_CLASSIFICATION	2.05280334711785E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999950150395035	WITHOUT_CLASSIFICATION	4.984960496494897E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999736306533776	WITHOUT_CLASSIFICATION	2.6369346622394098E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999995449790523	WITHOUT_CLASSIFICATION	4.5502094761674364E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999978381008074	WITHOUT_CLASSIFICATION	2.16189919250369E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999992079450097	WITHOUT_CLASSIFICATION	7.920549901449055E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999978638793592	WITHOUT_CLASSIFICATION	2.136120640785493E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999958866356393	WITHOUT_CLASSIFICATION	4.113364360756281E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999944221530586	WITHOUT_CLASSIFICATION	5.57784694149145E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999951820685352	WITHOUT_CLASSIFICATION	4.817931464787113E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999957433251648	WITHOUT_CLASSIFICATION	4.256674835096198E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999950882920223	WITHOUT_CLASSIFICATION	4.911707977736626E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999954724091831	WITHOUT_CLASSIFICATION	4.5275908169798505E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999954002189045	WITHOUT_CLASSIFICATION	4.599781095508634E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999958546444395	WITHOUT_CLASSIFICATION	4.145355560464738E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999951975446232	WITHOUT_CLASSIFICATION	4.802455376809142E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999942846930124	WITHOUT_CLASSIFICATION	5.715306987543158E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999954761430515	WITHOUT_CLASSIFICATION	4.52385694848595E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999956136262216	WITHOUT_CLASSIFICATION	4.386373778370332E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999942982072424	WITHOUT_CLASSIFICATION	5.701792757649145E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999950767193453	WITHOUT_CLASSIFICATION	4.923280654794771E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.999995691176289	WITHOUT_CLASSIFICATION	4.308823711099648E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999961743672752	WITHOUT_CLASSIFICATION	3.825632724857861E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999949338006618	WITHOUT_CLASSIFICATION	5.066199338120679E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999950668104126	WITHOUT_CLASSIFICATION	4.93318958736315E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999950481116655	WITHOUT_CLASSIFICATION	4.951888334464551E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999947528026383	WITHOUT_CLASSIFICATION	5.24719736170631E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999959389187651	WITHOUT_CLASSIFICATION	4.061081234885485E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940922957361	WITHOUT_CLASSIFICATION	5.907704263862994E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999941261355318	WITHOUT_CLASSIFICATION	5.873864468186231E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999934496922555	WITHOUT_CLASSIFICATION	6.550307744577397E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999934875233805	WITHOUT_CLASSIFICATION	6.512476619566841E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999944899524189	WITHOUT_CLASSIFICATION	5.510047581163614E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999936867369602	WITHOUT_CLASSIFICATION	6.3132630397760444E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.99999360411426	WITHOUT_CLASSIFICATION	6.395885740054315E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999933834881652	WITHOUT_CLASSIFICATION	6.616511834761263E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999952834070752	WITHOUT_CLASSIFICATION	4.7165929248241275E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999936100163874	WITHOUT_CLASSIFICATION	6.389983612569281E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999951882738302	WITHOUT_CLASSIFICATION	4.811726169841055E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999947260249511	WITHOUT_CLASSIFICATION	5.2739750489343594E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.999994404806232	WITHOUT_CLASSIFICATION	5.595193767970367E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999949934403585	WITHOUT_CLASSIFICATION	5.006559641566424E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999960427160605	WITHOUT_CLASSIFICATION	3.95728393962908E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999947033286422	WITHOUT_CLASSIFICATION	5.296671357831367E-6	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999951011286938	WITHOUT_CLASSIFICATION	4.898871306191345E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999964586496712	WITHOUT_CLASSIFICATION	3.5413503286756294E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999951094924233	WITHOUT_CLASSIFICATION	4.890507576722807E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.999994851395995	WITHOUT_CLASSIFICATION	5.148604004975039E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999941886615058	WITHOUT_CLASSIFICATION	5.811338494206543E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999951076766637	WITHOUT_CLASSIFICATION	4.892323336319225E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999992767406257	WITHOUT_CLASSIFICATION	7.232593743026795E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999928092102851	WITHOUT_CLASSIFICATION	7.190789715018011E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999932568163872	WITHOUT_CLASSIFICATION	6.743183612836646E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999942617009322	WITHOUT_CLASSIFICATION	5.73829906782307E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999929918709219	WITHOUT_CLASSIFICATION	7.00812907814478E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999932239946743	WITHOUT_CLASSIFICATION	6.7760053257848325E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.999993149084103	WITHOUT_CLASSIFICATION	6.850915896912611E-6	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999932018093283	WITHOUT_CLASSIFICATION	6.798190671711722E-6	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999952107417194	WITHOUT_CLASSIFICATION	4.7892582806395805E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999951519189437	WITHOUT_CLASSIFICATION	4.848081056247396E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999937180011315	WITHOUT_CLASSIFICATION	6.281998868580304E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.999993678129195	WITHOUT_CLASSIFICATION	6.321870804962788E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.999994160922307	WITHOUT_CLASSIFICATION	5.8390776930656425E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999996284837994	WITHOUT_CLASSIFICATION	3.715162006064617E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999947117974396	WITHOUT_CLASSIFICATION	5.288202560361515E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999949009208792	WITHOUT_CLASSIFICATION	5.099079120778955E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999935414593583	WITHOUT_CLASSIFICATION	6.458540641803891E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999952218367348	WITHOUT_CLASSIFICATION	4.778163265233579E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999924962806362	WITHOUT_CLASSIFICATION	7.503719363778923E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999930627509998	WITHOUT_CLASSIFICATION	6.937249000289222E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999937813186227	WITHOUT_CLASSIFICATION	6.218681377302351E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999948982488798	WITHOUT_CLASSIFICATION	5.101751120226151E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999938655493364	WITHOUT_CLASSIFICATION	6.134450663577396E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999953913941608	WITHOUT_CLASSIFICATION	4.608605839138675E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.99999441165737	WITHOUT_CLASSIFICATION	5.588342629999142E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999938325058458	WITHOUT_CLASSIFICATION	6.167494154163058E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999995932796015	WITHOUT_CLASSIFICATION	4.0672039850813196E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999950573313828	WITHOUT_CLASSIFICATION	4.942668617170346E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999960581050952	WITHOUT_CLASSIFICATION	3.94189490482434E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999942677441935	WITHOUT_CLASSIFICATION	5.732255806456892E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999946853987215	WITHOUT_CLASSIFICATION	5.314601278524009E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999948490390117	WITHOUT_CLASSIFICATION	5.150960988359057E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999940818230464	WITHOUT_CLASSIFICATION	5.918176953603377E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999953577124556	WITHOUT_CLASSIFICATION	4.6422875443834655E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.999994252475741	WITHOUT_CLASSIFICATION	5.7475242589179645E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999921944088345	WITHOUT_CLASSIFICATION	7.805591165599562E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999931699903937	WITHOUT_CLASSIFICATION	6.830009606259371E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999946502880109	WITHOUT_CLASSIFICATION	5.349711989007926E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999934375345477	WITHOUT_CLASSIFICATION	6.562465452211417E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999935883054233	WITHOUT_CLASSIFICATION	6.411694576664106E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999946758610354	WITHOUT_CLASSIFICATION	5.324138964679286E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999931364466604	WITHOUT_CLASSIFICATION	6.863553339629297E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999957865792216	WITHOUT_CLASSIFICATION	4.213420778371006E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999953626057556	WITHOUT_CLASSIFICATION	4.637394244321639E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999949489556963	WITHOUT_CLASSIFICATION	5.0510443036327335E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999931556088377	WITHOUT_CLASSIFICATION	6.844391162256633E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999932679215957	WITHOUT_CLASSIFICATION	6.732078404196496E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.999996061888473	WITHOUT_CLASSIFICATION	3.938111526908683E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999957452145829	WITHOUT_CLASSIFICATION	4.254785417043758E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999961387724643	WITHOUT_CLASSIFICATION	3.861227535687989E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999959366969293	WITHOUT_CLASSIFICATION	4.063303070764895E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999965089716187	WITHOUT_CLASSIFICATION	3.4910283813634314E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999965448087186	WITHOUT_CLASSIFICATION	3.4551912813763194E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999950736607593	WITHOUT_CLASSIFICATION	4.9263392406163255E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999965196551477	WITHOUT_CLASSIFICATION	3.480344852264285E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999953458156219	WITHOUT_CLASSIFICATION	4.654184378179806E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999951987529421	WITHOUT_CLASSIFICATION	4.8012470580078834E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999955141055812	WITHOUT_CLASSIFICATION	4.4858944188696E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999952210566484	WITHOUT_CLASSIFICATION	4.778943351628836E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999947623746875	WITHOUT_CLASSIFICATION	5.237625312521506E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999957052765477	WITHOUT_CLASSIFICATION	4.294723452234926E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999952774693921	WITHOUT_CLASSIFICATION	4.722530607896489E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999958541007902	WITHOUT_CLASSIFICATION	4.145899209877679E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999950763303046	WITHOUT_CLASSIFICATION	4.923669695400777E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999960102621883	WITHOUT_CLASSIFICATION	3.989737811737551E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999948575649894	WITHOUT_CLASSIFICATION	5.142435010528856E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999951783437034	WITHOUT_CLASSIFICATION	4.821656296576778E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999952841974316	WITHOUT_CLASSIFICATION	4.715802568531047E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999952777471408	WITHOUT_CLASSIFICATION	4.722252859194606E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999995106551751	WITHOUT_CLASSIFICATION	4.8934482491096065E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999994949607307	WITHOUT_CLASSIFICATION	5.0503926930595325E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999951565040274	WITHOUT_CLASSIFICATION	4.843495972709783E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999951996194892	WITHOUT_CLASSIFICATION	4.800380510685689E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999949182607849	WITHOUT_CLASSIFICATION	5.081739215112259E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999961644582982	WITHOUT_CLASSIFICATION	3.835541701726849E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999994852586686	WITHOUT_CLASSIFICATION	5.147413314003227E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999944378566983	WITHOUT_CLASSIFICATION	5.562143301678491E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999949737525662	WITHOUT_CLASSIFICATION	5.026247433773494E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999939853811259	WITHOUT_CLASSIFICATION	6.014618874038809E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999951597084615	WITHOUT_CLASSIFICATION	4.840291538472149E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999935046126663	WITHOUT_CLASSIFICATION	6.495387333630265E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999994666697616	WITHOUT_CLASSIFICATION	5.333302383944987E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999930531029918	WITHOUT_CLASSIFICATION	6.94689700817953E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999948128540935	WITHOUT_CLASSIFICATION	5.187145906393548E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999930500738965	WITHOUT_CLASSIFICATION	6.949926103587458E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999937628689939	WITHOUT_CLASSIFICATION	6.237131006128045E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999939072327548	WITHOUT_CLASSIFICATION	6.0927672451567985E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999946676483334	WITHOUT_CLASSIFICATION	5.33235166644781E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999965426860141	WITHOUT_CLASSIFICATION	3.457313985801306E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999947292993154	WITHOUT_CLASSIFICATION	5.2707006845784106E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999949887309038	WITHOUT_CLASSIFICATION	5.011269096357376E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999931256650073	WITHOUT_CLASSIFICATION	6.874334992640472E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999960589069564	WITHOUT_CLASSIFICATION	3.941093043504578E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999956498552495	WITHOUT_CLASSIFICATION	4.350144750505342E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999967640093784	WITHOUT_CLASSIFICATION	3.2359906216459492E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999951797954143	WITHOUT_CLASSIFICATION	4.820204585791255E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999960800408385	WITHOUT_CLASSIFICATION	3.919959161574436E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999962118315897	WITHOUT_CLASSIFICATION	3.788168410354235E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999953901537298	WITHOUT_CLASSIFICATION	4.609846270201663E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999951136060388	WITHOUT_CLASSIFICATION	4.886393961235035E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999960621728459	WITHOUT_CLASSIFICATION	3.937827154145171E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999955571752662	WITHOUT_CLASSIFICATION	4.442824733866726E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999963470463745	WITHOUT_CLASSIFICATION	3.6529536254029114E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999960710905934	WITHOUT_CLASSIFICATION	3.928909406566554E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999953754158345	WITHOUT_CLASSIFICATION	4.624584165491641E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999951779100902	WITHOUT_CLASSIFICATION	4.822089909760219E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999954799201913	WITHOUT_CLASSIFICATION	4.52007980866877E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999968159988671	WITHOUT_CLASSIFICATION	3.1840011329009815E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999965515299123	WITHOUT_CLASSIFICATION	3.448470087718102E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999948149227978	WITHOUT_CLASSIFICATION	5.1850772021887806E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999964093684471	WITHOUT_CLASSIFICATION	3.59063155291659E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999955331750884	WITHOUT_CLASSIFICATION	4.466824911637907E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999955670197885	WITHOUT_CLASSIFICATION	4.432980211430094E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999947518897208	WITHOUT_CLASSIFICATION	5.248110279241719E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999945038366402	WITHOUT_CLASSIFICATION	5.4961633597540395E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999944281602224	WITHOUT_CLASSIFICATION	5.571839777592105E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999946694066818	WITHOUT_CLASSIFICATION	5.3305933182625005E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999959346883777	WITHOUT_CLASSIFICATION	4.065311622307255E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999945536229158	WITHOUT_CLASSIFICATION	5.446377084294508E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999946061677366	WITHOUT_CLASSIFICATION	5.3938322633198885E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999946015271173	WITHOUT_CLASSIFICATION	5.398472882736363E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999954952442355	WITHOUT_CLASSIFICATION	4.504755764562754E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999944512023254	WITHOUT_CLASSIFICATION	5.5487976745365775E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999936101617933	WITHOUT_CLASSIFICATION	6.389838206562903E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999954372424142	WITHOUT_CLASSIFICATION	4.562757585767751E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999993537007481	WITHOUT_CLASSIFICATION	6.462992519172157E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999934627982743	WITHOUT_CLASSIFICATION	6.5372017258221065E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999955632165367	WITHOUT_CLASSIFICATION	4.436783463326079E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999959420313043	WITHOUT_CLASSIFICATION	4.0579686957641546E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999961308115474	WITHOUT_CLASSIFICATION	3.8691884527036576E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999942998913747	WITHOUT_CLASSIFICATION	5.700108625374365E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999953354763024	WITHOUT_CLASSIFICATION	4.664523697655143E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999956889013939	WITHOUT_CLASSIFICATION	4.311098606180984E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999963287712209	WITHOUT_CLASSIFICATION	3.6712287791480503E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999942852370293	WITHOUT_CLASSIFICATION	5.714762970757359E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999954240067265	WITHOUT_CLASSIFICATION	4.575993273611627E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999995534265937	WITHOUT_CLASSIFICATION	4.465734062974534E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999919144047359	WITHOUT_CLASSIFICATION	8.08559526411416E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999929838585767	WITHOUT_CLASSIFICATION	7.016141423255473E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999948840945159	WITHOUT_CLASSIFICATION	5.115905484042146E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999943310391243	WITHOUT_CLASSIFICATION	5.668960875744171E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999944612820867	WITHOUT_CLASSIFICATION	5.538717913392004E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999969174387145	WITHOUT_CLASSIFICATION	3.082561285523839E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999957198072439	WITHOUT_CLASSIFICATION	4.28019275616252E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999962200296973	WITHOUT_CLASSIFICATION	3.779970302530606E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999944791623416	WITHOUT_CLASSIFICATION	5.520837658411093E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999943020961519	WITHOUT_CLASSIFICATION	5.697903847993534E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999958002259518	WITHOUT_CLASSIFICATION	4.1997740481161484E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999953084560202	WITHOUT_CLASSIFICATION	4.6915439796728375E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999943990221027	WITHOUT_CLASSIFICATION	5.600977897286395E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.999994494466386	WITHOUT_CLASSIFICATION	5.505533614092694E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964505627434	WITHOUT_CLASSIFICATION	3.549437256667002E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999961008011465	WITHOUT_CLASSIFICATION	3.89919885350399E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999945556660451	WITHOUT_CLASSIFICATION	5.444333954881857E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999952144561117	WITHOUT_CLASSIFICATION	4.785543888307474E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.999995003321977	WITHOUT_CLASSIFICATION	4.996678022975954E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999955269238976	WITHOUT_CLASSIFICATION	4.473076102428054E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999937066120335	WITHOUT_CLASSIFICATION	6.29338796651938E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999957190229956	WITHOUT_CLASSIFICATION	4.280977004355969E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999955402082198	WITHOUT_CLASSIFICATION	4.459791780149289E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999995095087161	WITHOUT_CLASSIFICATION	4.904912839015668E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999935865295004	WITHOUT_CLASSIFICATION	6.413470499535396E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999937344995159	WITHOUT_CLASSIFICATION	6.2655004840803775E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999939066391587	WITHOUT_CLASSIFICATION	6.093360841401259E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999954053770593	WITHOUT_CLASSIFICATION	4.594622940717747E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999932024763298	WITHOUT_CLASSIFICATION	6.797523670224371E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999934964908611	WITHOUT_CLASSIFICATION	6.503509138921646E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999928512333907	WITHOUT_CLASSIFICATION	7.148766609359472E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999939763773972	WITHOUT_CLASSIFICATION	6.023622602828984E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999930081724097	WITHOUT_CLASSIFICATION	6.991827590319745E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999951158220868	WITHOUT_CLASSIFICATION	4.884177913224763E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999934936523395	WITHOUT_CLASSIFICATION	6.506347660489489E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999962114052147	WITHOUT_CLASSIFICATION	3.788594785409806E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.999994748662863	WITHOUT_CLASSIFICATION	5.251337137106594E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999949480759295	WITHOUT_CLASSIFICATION	5.051924070464656E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999931022036567	WITHOUT_CLASSIFICATION	6.897796343342231E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999956171720269	WITHOUT_CLASSIFICATION	4.382827973143282E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999957847166212	WITHOUT_CLASSIFICATION	4.215283378796425E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999939970710248	WITHOUT_CLASSIFICATION	6.002928975342994E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999937600296283	WITHOUT_CLASSIFICATION	6.239970371829144E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999940892351153	WITHOUT_CLASSIFICATION	5.910764884674997E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999956921178085	WITHOUT_CLASSIFICATION	4.307882191466092E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999940138802904	WITHOUT_CLASSIFICATION	5.9861197095653195E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999932013847812	WITHOUT_CLASSIFICATION	6.798615218878424E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999932000406627	WITHOUT_CLASSIFICATION	6.799959337320081E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999944631870743	WITHOUT_CLASSIFICATION	5.536812925767126E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999939847130678	WITHOUT_CLASSIFICATION	6.015286932248787E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999930823693712	WITHOUT_CLASSIFICATION	6.9176306287551555E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999939397326995	WITHOUT_CLASSIFICATION	6.060267300480666E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999951124137864	WITHOUT_CLASSIFICATION	4.887586213626506E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999941925481015	WITHOUT_CLASSIFICATION	5.807451898504648E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952569157659	WITHOUT_CLASSIFICATION	4.743084234119662E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999953021331177	WITHOUT_CLASSIFICATION	4.697866882206491E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999944010915879	WITHOUT_CLASSIFICATION	5.598908412122934E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999948010073044	WITHOUT_CLASSIFICATION	5.198992695543679E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999947733212351	WITHOUT_CLASSIFICATION	5.226678764856859E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999994852804376	WITHOUT_CLASSIFICATION	5.147195623982436E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999948469488515	WITHOUT_CLASSIFICATION	5.153051148496567E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999953564293007	WITHOUT_CLASSIFICATION	4.643570699262637E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999934422405505	WITHOUT_CLASSIFICATION	6.557759449407685E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999933865174997	WITHOUT_CLASSIFICATION	6.613482500338888E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999932070338827	WITHOUT_CLASSIFICATION	6.79296611725304E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999939573470041	WITHOUT_CLASSIFICATION	6.0426529959322974E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999950666675049	WITHOUT_CLASSIFICATION	4.933332495094385E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999941918652678	WITHOUT_CLASSIFICATION	5.808134732126286E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999945732276031	WITHOUT_CLASSIFICATION	5.426772396932694E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999940382469232	WITHOUT_CLASSIFICATION	5.9617530768161525E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999950818615773	WITHOUT_CLASSIFICATION	4.918138422745534E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999931616393359	WITHOUT_CLASSIFICATION	6.8383606640294616E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999950391901411	WITHOUT_CLASSIFICATION	4.96080985887619E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999961218845461	WITHOUT_CLASSIFICATION	3.878115453952261E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999947279466241	WITHOUT_CLASSIFICATION	5.272053375856291E-6	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999941839271604	WITHOUT_CLASSIFICATION	5.8160728395462324E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999940342435422	WITHOUT_CLASSIFICATION	5.9657564577669236E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999933921692128	WITHOUT_CLASSIFICATION	6.607830787262667E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999993346138486	WITHOUT_CLASSIFICATION	6.6538615140694235E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999933530057984	WITHOUT_CLASSIFICATION	6.646994201658219E-6	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999937601095815	WITHOUT_CLASSIFICATION	6.239890418497354E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999948185482388	WITHOUT_CLASSIFICATION	5.181451761261893E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999933203742324	WITHOUT_CLASSIFICATION	6.6796257675522066E-6	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999948450024095	WITHOUT_CLASSIFICATION	5.154997590460724E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999966674764604	WITHOUT_CLASSIFICATION	3.332523539590283E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999954683024063	WITHOUT_CLASSIFICATION	4.5316975937389645E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999959884852732	WITHOUT_CLASSIFICATION	4.011514726865842E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999964298561641	WITHOUT_CLASSIFICATION	3.570143835819155E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999978234257266	WITHOUT_CLASSIFICATION	2.1765742734685784E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9999814746331954	WITHOUT_CLASSIFICATION	1.852536680456252E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999857952834164	WITHOUT_CLASSIFICATION	1.4204716583600104E-5	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999472273891072	WITHOUT_CLASSIFICATION	5.277261089289159E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999458184211099	WITHOUT_CLASSIFICATION	5.418157889026738E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999757266098236	WITHOUT_CLASSIFICATION	2.4273390176422783E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999252272955937	WITHOUT_CLASSIFICATION	7.477270440628735E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999015613974223	WITHOUT_CLASSIFICATION	9.843860257774144E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999427290738526	WITHOUT_CLASSIFICATION	5.72709261474345E-5	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9998318064414847	WITHOUT_CLASSIFICATION	1.6819355851524658E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999942286694994	WITHOUT_CLASSIFICATION	5.7713305006339E-6	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999947609860261	WITHOUT_CLASSIFICATION	5.23901397385836E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999968224084221	WITHOUT_CLASSIFICATION	3.177591577841321E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9999721017469806	WITHOUT_CLASSIFICATION	2.7898253019406668E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999679458973126	WITHOUT_CLASSIFICATION	3.205410268738629E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997331801410657	WITHOUT_CLASSIFICATION	2.6681985893428986E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998124746383701	WITHOUT_CLASSIFICATION	1.875253616298653E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998626064225011	WITHOUT_CLASSIFICATION	1.373935774987799E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999988228792923	WITHOUT_CLASSIFICATION	1.1771207076915776E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999984060067564	WITHOUT_CLASSIFICATION	1.593993243622406E-6	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999974571776521	WITHOUT_CLASSIFICATION	2.542822347881321E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999996663069565	WITHOUT_CLASSIFICATION	3.336930435119814E-7	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999989511866624	WITHOUT_CLASSIFICATION	1.0488133376369347E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999989511866624	WITHOUT_CLASSIFICATION	1.0488133376369347E-6	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9994218964618148	WITHOUT_CLASSIFICATION	5.781035381852764E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9993252746593423	WITHOUT_CLASSIFICATION	6.747253406576123E-4	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999792788932246	WITHOUT_CLASSIFICATION	2.0721106775505443E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999951335464935	WITHOUT_CLASSIFICATION	4.866453506514662E-6	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.999995557325037	WITHOUT_CLASSIFICATION	4.442674963019905E-6	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999994931217621	WITHOUT_CLASSIFICATION	5.068782379359209E-7	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9998907438128468	WITHOUT_CLASSIFICATION	1.0925618715320981E-4	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999984455864673	WITHOUT_CLASSIFICATION	1.5544135326190499E-6	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.992768820526306	WITHOUT_CLASSIFICATION	0.007231179473694055	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999986487478782	WITHOUT_CLASSIFICATION	1.3512521216890657E-6	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.999999651154069	WITHOUT_CLASSIFICATION	3.488459309942884E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.999999651013415	WITHOUT_CLASSIFICATION	3.489865849061383E-7	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999921405334081	WITHOUT_CLASSIFICATION	7.859466591933935E-6	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999935676788511	WITHOUT_CLASSIFICATION	6.4323211489457736E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999940759154814	WITHOUT_CLASSIFICATION	5.924084518676642E-6	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999921733768489	WITHOUT_CLASSIFICATION	7.826623151094435E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999985166627539	WITHOUT_CLASSIFICATION	1.4833372461589822E-6	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9997437352263947	WITHOUT_CLASSIFICATION	2.5626477360532815E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9999985873168789	WITHOUT_CLASSIFICATION	1.4126831210826278E-6	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999899322438386	WITHOUT_CLASSIFICATION	1.0067756161457876E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999997151949247	WITHOUT_CLASSIFICATION	2.8480507538178543E-7	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999963736292444	WITHOUT_CLASSIFICATION	3.626370755458022E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9777847681758335	WITHOUT_CLASSIFICATION	0.022215231824166497	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999949813137448	WITHOUT_CLASSIFICATION	5.0186862552634346E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9777847681758335	WITHOUT_CLASSIFICATION	0.022215231824166497	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999956964853906	WITHOUT_CLASSIFICATION	4.303514609551874E-6	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999922466101762	WITHOUT_CLASSIFICATION	7.75338982387861E-6	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.8826452251053559	WITHOUT_CLASSIFICATION	0.11735477489464408	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999701073404914	WITHOUT_CLASSIFICATION	2.9892659508702046E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999751095637976	WITHOUT_CLASSIFICATION	2.4890436202364787E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999970275438111	WITHOUT_CLASSIFICATION	2.97245618891E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999970275438111	WITHOUT_CLASSIFICATION	2.97245618891E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999970275438111	WITHOUT_CLASSIFICATION	2.97245618891E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9998363255827564	WITHOUT_CLASSIFICATION	1.6367441724354084E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9998293637337584	WITHOUT_CLASSIFICATION	1.7063626624154137E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999990511431142	WITHOUT_CLASSIFICATION	9.488568857234545E-7	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999694153170973	WITHOUT_CLASSIFICATION	3.058468290265512E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999743719047297	WITHOUT_CLASSIFICATION	2.5628095270234233E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999798800206103	WITHOUT_CLASSIFICATION	2.0119979389624744E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999398687748247	WITHOUT_CLASSIFICATION	6.013122517537645E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999479087219638	WITHOUT_CLASSIFICATION	5.209127803616018E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999599063374629	WITHOUT_CLASSIFICATION	4.0093662537107286E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999950150395035	WITHOUT_CLASSIFICATION	4.984960496494897E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999995449790523	WITHOUT_CLASSIFICATION	4.5502094761674364E-7	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999978381008074	WITHOUT_CLASSIFICATION	2.16189919250369E-6	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999992079450097	WITHOUT_CLASSIFICATION	7.920549901449055E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999978638793592	WITHOUT_CLASSIFICATION	2.136120640785493E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999996083150573	WITHOUT_CLASSIFICATION	3.916849427080044E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999954761430515	WITHOUT_CLASSIFICATION	4.52385694848595E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999961743672752	WITHOUT_CLASSIFICATION	3.825632724857861E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999947528026383	WITHOUT_CLASSIFICATION	5.24719736170631E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999959389187651	WITHOUT_CLASSIFICATION	4.061081234885485E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999945483846808	WITHOUT_CLASSIFICATION	5.45161531915959E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940922957361	WITHOUT_CLASSIFICATION	5.907704263862994E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999971450540929	WITHOUT_CLASSIFICATION	2.8549459071297343E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999960355447771	WITHOUT_CLASSIFICATION	3.964455222892191E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999948914853861	WITHOUT_CLASSIFICATION	5.108514613774311E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999944150023108	WITHOUT_CLASSIFICATION	5.584997689317088E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999951358989573	WITHOUT_CLASSIFICATION	4.864101042736721E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999957615697856	WITHOUT_CLASSIFICATION	4.2384302142773165E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999945996664341	WITHOUT_CLASSIFICATION	5.400333566002427E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999944952387596	WITHOUT_CLASSIFICATION	5.50476124032348E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999947436223036	WITHOUT_CLASSIFICATION	5.256377696452461E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999943621154863	WITHOUT_CLASSIFICATION	5.6378845136173175E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999953072150186	WITHOUT_CLASSIFICATION	4.69278498138093E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999938567236148	WITHOUT_CLASSIFICATION	6.143276385075715E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999954435271067	WITHOUT_CLASSIFICATION	4.5564728932973375E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999945913734902	WITHOUT_CLASSIFICATION	5.40862650978484E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999957896653556	WITHOUT_CLASSIFICATION	4.210334644406414E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999951910529254	WITHOUT_CLASSIFICATION	4.8089470744803025E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999937865376894	WITHOUT_CLASSIFICATION	6.213462310586185E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999945231620585	WITHOUT_CLASSIFICATION	5.476837941469813E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999944406932407	WITHOUT_CLASSIFICATION	5.55930675935124E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999933474538927	WITHOUT_CLASSIFICATION	6.652546107334986E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999939396262355	WITHOUT_CLASSIFICATION	6.060373764505371E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999951178698638	WITHOUT_CLASSIFICATION	4.882130136213759E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999940071606326	WITHOUT_CLASSIFICATION	5.992839367424897E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999939407739042	WITHOUT_CLASSIFICATION	6.059226095808226E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999993477995864	WITHOUT_CLASSIFICATION	6.522004136017767E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999934049949721	WITHOUT_CLASSIFICATION	6.595005027791312E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999949945166581	WITHOUT_CLASSIFICATION	5.005483341891827E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999959012694185	WITHOUT_CLASSIFICATION	4.098730581431412E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999951458716473	WITHOUT_CLASSIFICATION	4.854128352647299E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999938960547877	WITHOUT_CLASSIFICATION	6.103945212329101E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999927706591326	WITHOUT_CLASSIFICATION	7.22934086732509E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999950571286237	WITHOUT_CLASSIFICATION	4.9428713762489075E-6	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999946688766544	WITHOUT_CLASSIFICATION	5.331123345497265E-6	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.999995162712707	WITHOUT_CLASSIFICATION	4.837287292995525E-6	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999955250048329	WITHOUT_CLASSIFICATION	4.474995167091427E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999956145210063	WITHOUT_CLASSIFICATION	4.38547899375062E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999943487025176	WITHOUT_CLASSIFICATION	5.651297482393175E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999951076766637	WITHOUT_CLASSIFICATION	4.892323336319225E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999992767406257	WITHOUT_CLASSIFICATION	7.232593743026795E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999928092102851	WITHOUT_CLASSIFICATION	7.190789715018011E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999932239946743	WITHOUT_CLASSIFICATION	6.7760053257848325E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999996284837994	WITHOUT_CLASSIFICATION	3.715162006064617E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.99999441165737	WITHOUT_CLASSIFICATION	5.588342629999142E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999994803739252	WITHOUT_CLASSIFICATION	5.196260748076256E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999938325058458	WITHOUT_CLASSIFICATION	6.167494154163058E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999946758610354	WITHOUT_CLASSIFICATION	5.324138964679286E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999957865792216	WITHOUT_CLASSIFICATION	4.213420778371006E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999951795790408	WITHOUT_CLASSIFICATION	4.820420959106032E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999953626057556	WITHOUT_CLASSIFICATION	4.637394244321639E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999949489556963	WITHOUT_CLASSIFICATION	5.0510443036327335E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999938470748377	WITHOUT_CLASSIFICATION	6.1529251622618395E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999932617877684	WITHOUT_CLASSIFICATION	6.7382122316548515E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999947814861913	WITHOUT_CLASSIFICATION	5.2185138087562134E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.999995328439032	WITHOUT_CLASSIFICATION	4.671560968024951E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999943197757534	WITHOUT_CLASSIFICATION	5.680224246723169E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999949395073505	WITHOUT_CLASSIFICATION	5.0604926494806116E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999931378206612	WITHOUT_CLASSIFICATION	6.8621793387423E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999938860482256	WITHOUT_CLASSIFICATION	6.113951774412697E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.999994921661659	WITHOUT_CLASSIFICATION	5.0783383408854754E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999953774557331	WITHOUT_CLASSIFICATION	4.622544266956665E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999947251744908	WITHOUT_CLASSIFICATION	5.27482550921297E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999941861279663	WITHOUT_CLASSIFICATION	5.813872033601157E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999952666076345	WITHOUT_CLASSIFICATION	4.733392365590224E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999946460195156	WITHOUT_CLASSIFICATION	5.353980484361295E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999944218818234	WITHOUT_CLASSIFICATION	5.578118176630264E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999954004842907	WITHOUT_CLASSIFICATION	4.5995157092537074E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.999993849219955	WITHOUT_CLASSIFICATION	6.150780044954971E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999940716247733	WITHOUT_CLASSIFICATION	5.9283752267864205E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999943940562912	WITHOUT_CLASSIFICATION	5.605943708799742E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999935021618144	WITHOUT_CLASSIFICATION	6.4978381856677065E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999949303438384	WITHOUT_CLASSIFICATION	5.069656161633127E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999939484137295	WITHOUT_CLASSIFICATION	6.0515862704515255E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999952228899023	WITHOUT_CLASSIFICATION	4.777110097749251E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999995571883219	WITHOUT_CLASSIFICATION	4.428116781008492E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999995127264833	WITHOUT_CLASSIFICATION	4.8727351670113885E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999931385316181	WITHOUT_CLASSIFICATION	6.861468381870359E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999945389539716	WITHOUT_CLASSIFICATION	5.461046028361886E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999960158118479	WITHOUT_CLASSIFICATION	3.984188151992501E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999947102889201	WITHOUT_CLASSIFICATION	5.289711079857193E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999943259402929	WITHOUT_CLASSIFICATION	5.674059707060136E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999929165011808	WITHOUT_CLASSIFICATION	7.0834988191438525E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999940510226901	WITHOUT_CLASSIFICATION	5.948977309890489E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999968385722694	WITHOUT_CLASSIFICATION	3.1614277305616484E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999961960638878	WITHOUT_CLASSIFICATION	3.8039361122634084E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999962120519436	WITHOUT_CLASSIFICATION	3.7879480564956727E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999995971198805	WITHOUT_CLASSIFICATION	4.028801195063859E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999952210566484	WITHOUT_CLASSIFICATION	4.778943351628836E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999947067143511	WITHOUT_CLASSIFICATION	5.293285648962445E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999947623746875	WITHOUT_CLASSIFICATION	5.237625312521506E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999952777471408	WITHOUT_CLASSIFICATION	4.722252859194606E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999994949607307	WITHOUT_CLASSIFICATION	5.0503926930595325E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999949737525662	WITHOUT_CLASSIFICATION	5.026247433773494E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999935046126663	WITHOUT_CLASSIFICATION	6.495387333630265E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999948128540935	WITHOUT_CLASSIFICATION	5.187145906393548E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999965426860141	WITHOUT_CLASSIFICATION	3.457313985801306E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999956498552495	WITHOUT_CLASSIFICATION	4.350144750505342E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999965830180079	WITHOUT_CLASSIFICATION	3.4169819921471613E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999969385175683	WITHOUT_CLASSIFICATION	3.0614824317169636E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999995547679152	WITHOUT_CLASSIFICATION	4.452320848014442E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999995872400501	WITHOUT_CLASSIFICATION	4.1275994989845705E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999959877903699	WITHOUT_CLASSIFICATION	4.012209630093624E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999960349051561	WITHOUT_CLASSIFICATION	3.965094843878914E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999950795101951	WITHOUT_CLASSIFICATION	4.920489805029818E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.999995828180411	WITHOUT_CLASSIFICATION	4.171819589093627E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.99999488204751	WITHOUT_CLASSIFICATION	5.117952490030321E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999950543073264	WITHOUT_CLASSIFICATION	4.94569267360657E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999949996312554	WITHOUT_CLASSIFICATION	5.0003687446238945E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999944370773012	WITHOUT_CLASSIFICATION	5.562922698901052E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999948209495017	WITHOUT_CLASSIFICATION	5.179050498271482E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999952991353047	WITHOUT_CLASSIFICATION	4.700864695299318E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999967307425339	WITHOUT_CLASSIFICATION	3.269257466119673E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999957601684376	WITHOUT_CLASSIFICATION	4.239831562438095E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999953760547441	WITHOUT_CLASSIFICATION	4.623945255996093E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999955517606586	WITHOUT_CLASSIFICATION	4.448239341511955E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999947893401444	WITHOUT_CLASSIFICATION	5.210659855628493E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999948810973631	WITHOUT_CLASSIFICATION	5.118902636855136E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999957904430317	WITHOUT_CLASSIFICATION	4.209556968344119E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999945420584092	WITHOUT_CLASSIFICATION	5.4579415907927095E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999931653901579	WITHOUT_CLASSIFICATION	6.834609842111228E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999995036499242	WITHOUT_CLASSIFICATION	4.963500757982875E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999941051168159	WITHOUT_CLASSIFICATION	5.894883184184297E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999936563244175	WITHOUT_CLASSIFICATION	6.343675582505801E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999939386244066	WITHOUT_CLASSIFICATION	6.061375593371176E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999933065975817	WITHOUT_CLASSIFICATION	6.693402418320382E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999995200744994	WITHOUT_CLASSIFICATION	4.799255005980473E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.999995593786525	WITHOUT_CLASSIFICATION	4.406213475031266E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999960982642718	WITHOUT_CLASSIFICATION	3.901735728165901E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999995643890928	WITHOUT_CLASSIFICATION	4.356109072011952E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999952482387682	WITHOUT_CLASSIFICATION	4.751761231790741E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999947166291036	WITHOUT_CLASSIFICATION	5.283370896450378E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999948807206528	WITHOUT_CLASSIFICATION	5.119279347302382E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999953218698839	WITHOUT_CLASSIFICATION	4.678130116162261E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999951875254772	WITHOUT_CLASSIFICATION	4.812474522852784E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999995110689463	WITHOUT_CLASSIFICATION	4.8893105370172E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999947836163096	WITHOUT_CLASSIFICATION	5.2163836903881E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999955110054004	WITHOUT_CLASSIFICATION	4.488994599610586E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999947518897208	WITHOUT_CLASSIFICATION	5.248110279241719E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999951415273115	WITHOUT_CLASSIFICATION	4.858472688530241E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999959346883777	WITHOUT_CLASSIFICATION	4.065311622307255E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999954952442355	WITHOUT_CLASSIFICATION	4.504755764562754E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999954372424142	WITHOUT_CLASSIFICATION	4.562757585767751E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999953354763024	WITHOUT_CLASSIFICATION	4.664523697655143E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999956889013939	WITHOUT_CLASSIFICATION	4.311098606180984E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999929838585767	WITHOUT_CLASSIFICATION	7.016141423255473E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999948840945159	WITHOUT_CLASSIFICATION	5.115905484042146E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999945855189346	WITHOUT_CLASSIFICATION	5.414481065396195E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999964608175244	WITHOUT_CLASSIFICATION	3.539182475617145E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999959955259139	WITHOUT_CLASSIFICATION	4.00447408612427E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999963653935279	WITHOUT_CLASSIFICATION	3.6346064720265084E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999961448003273	WITHOUT_CLASSIFICATION	3.85519967277806E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999953978320657	WITHOUT_CLASSIFICATION	4.602167934251902E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.999993989225348	WITHOUT_CLASSIFICATION	6.010774652007307E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999943002919591	WITHOUT_CLASSIFICATION	5.699708040895196E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999961031430994	WITHOUT_CLASSIFICATION	3.896856900583617E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999938511820823	WITHOUT_CLASSIFICATION	6.148817917787986E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999947053030923	WITHOUT_CLASSIFICATION	5.2946969076897154E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999957690150704	WITHOUT_CLASSIFICATION	4.230984929689764E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999939510688083	WITHOUT_CLASSIFICATION	6.048931191774345E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999937916719344	WITHOUT_CLASSIFICATION	6.208328065585965E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999944112497748	WITHOUT_CLASSIFICATION	5.588750225175123E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999994889229997	WITHOUT_CLASSIFICATION	5.110770002962399E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999942039903781	WITHOUT_CLASSIFICATION	5.7960096219737196E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999943334444091	WITHOUT_CLASSIFICATION	5.666555590932891E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.999996445512082	WITHOUT_CLASSIFICATION	3.5544879179630482E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999958827390824	WITHOUT_CLASSIFICATION	4.117260917635281E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999941006294147	WITHOUT_CLASSIFICATION	5.8993705852391396E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999947734270838	WITHOUT_CLASSIFICATION	5.226572916207031E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999947442766667	WITHOUT_CLASSIFICATION	5.25572333320815E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999956439205187	WITHOUT_CLASSIFICATION	4.356079481379369E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999952010359061	WITHOUT_CLASSIFICATION	4.798964093851032E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999933376292286	WITHOUT_CLASSIFICATION	6.6623707714651345E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999941072715631	WITHOUT_CLASSIFICATION	5.892728436901331E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999957946946838	WITHOUT_CLASSIFICATION	4.205305316243882E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.999993807691962	WITHOUT_CLASSIFICATION	6.192308038065649E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999960403305975	WITHOUT_CLASSIFICATION	3.959669402440998E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999945099727543	WITHOUT_CLASSIFICATION	5.490027245714146E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999942748461187	WITHOUT_CLASSIFICATION	5.7251538813274635E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999946319361993	WITHOUT_CLASSIFICATION	5.368063800652983E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999958923577912	WITHOUT_CLASSIFICATION	4.10764220882462E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999959358368868	WITHOUT_CLASSIFICATION	4.0641631131267325E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999948930268386	WITHOUT_CLASSIFICATION	5.106973161336387E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999946816596115	WITHOUT_CLASSIFICATION	5.318340388620009E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999958401320237	WITHOUT_CLASSIFICATION	4.159867976299324E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999951834356254	WITHOUT_CLASSIFICATION	4.816564374652612E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999952144561117	WITHOUT_CLASSIFICATION	4.785543888307474E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999955402082198	WITHOUT_CLASSIFICATION	4.459791780149289E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999995095087161	WITHOUT_CLASSIFICATION	4.904912839015668E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999994933612504	WITHOUT_CLASSIFICATION	5.066387495899565E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999939763773972	WITHOUT_CLASSIFICATION	6.023622602828984E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999951158220868	WITHOUT_CLASSIFICATION	4.884177913224763E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999931022036567	WITHOUT_CLASSIFICATION	6.897796343342231E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999956171720269	WITHOUT_CLASSIFICATION	4.382827973143282E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999941925481015	WITHOUT_CLASSIFICATION	5.807451898504648E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952569157659	WITHOUT_CLASSIFICATION	4.743084234119662E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999962343222656	WITHOUT_CLASSIFICATION	3.7656777344021832E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999948674824455	WITHOUT_CLASSIFICATION	5.132517554549971E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999945408054385	WITHOUT_CLASSIFICATION	5.4591945615084606E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999951048836765	WITHOUT_CLASSIFICATION	4.8951163235875715E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999948351314357	WITHOUT_CLASSIFICATION	5.1648685642284916E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999952118208159	WITHOUT_CLASSIFICATION	4.788179184217848E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999945479036823	WITHOUT_CLASSIFICATION	5.4520963176976375E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999946397233243	WITHOUT_CLASSIFICATION	5.360276675677666E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999942506755839	WITHOUT_CLASSIFICATION	5.749324416129622E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999937352940668	WITHOUT_CLASSIFICATION	6.264705933157103E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999945211594223	WITHOUT_CLASSIFICATION	5.47884057767577E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999942668552172	WITHOUT_CLASSIFICATION	5.733144782784968E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999942039272851	WITHOUT_CLASSIFICATION	5.796072714942081E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999941089900704	WITHOUT_CLASSIFICATION	5.891009929681302E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999944866078577	WITHOUT_CLASSIFICATION	5.51339214230294E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999995406643806	WITHOUT_CLASSIFICATION	4.593356193970764E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999939883864076	WITHOUT_CLASSIFICATION	6.011613592278838E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999949725727161	WITHOUT_CLASSIFICATION	5.027427283934554E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999943434932083	WITHOUT_CLASSIFICATION	5.65650679179339E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999936041051194	WITHOUT_CLASSIFICATION	6.395894880618225E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999941192511489	WITHOUT_CLASSIFICATION	5.880748851200693E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999940939700372	WITHOUT_CLASSIFICATION	5.906029962764413E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999947494831604	WITHOUT_CLASSIFICATION	5.250516839554375E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.999993310392047	WITHOUT_CLASSIFICATION	6.689607953066977E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999930988597054	WITHOUT_CLASSIFICATION	6.901140294616608E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999943220046152	WITHOUT_CLASSIFICATION	5.6779953846558575E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999937109008488	WITHOUT_CLASSIFICATION	6.2890991511769465E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999948830345122	WITHOUT_CLASSIFICATION	5.116965487731431E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999933631343852	WITHOUT_CLASSIFICATION	6.636865614809004E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999950037623825	WITHOUT_CLASSIFICATION	4.9962376174979335E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999933429989853	WITHOUT_CLASSIFICATION	6.6570010146697985E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999950384199964	WITHOUT_CLASSIFICATION	4.961580003625032E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999941783590157	WITHOUT_CLASSIFICATION	5.8216409842152445E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999949044995624	WITHOUT_CLASSIFICATION	5.095500437621652E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.999995408268576	WITHOUT_CLASSIFICATION	4.591731423994024E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999939106923406	WITHOUT_CLASSIFICATION	6.089307659458768E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999939719702018	WITHOUT_CLASSIFICATION	6.028029798307127E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999936958395865	WITHOUT_CLASSIFICATION	6.304160413474832E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999941985253846	WITHOUT_CLASSIFICATION	5.801474615336379E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999938565458274	WITHOUT_CLASSIFICATION	6.143454172605346E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999994852804376	WITHOUT_CLASSIFICATION	5.147195623982436E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999948469488515	WITHOUT_CLASSIFICATION	5.153051148496567E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999950391901411	WITHOUT_CLASSIFICATION	4.96080985887619E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999938741466484	WITHOUT_CLASSIFICATION	6.125853351564631E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999947279466241	WITHOUT_CLASSIFICATION	5.272053375856291E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999940342435422	WITHOUT_CLASSIFICATION	5.9657564577669236E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999993346138486	WITHOUT_CLASSIFICATION	6.6538615140694235E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999959884852732	WITHOUT_CLASSIFICATION	4.011514726865842E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999964298561641	WITHOUT_CLASSIFICATION	3.570143835819155E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999943364883798	WITHOUT_CLASSIFICATION	5.663511620206582E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999957426102156	WITHOUT_CLASSIFICATION	4.257389784337946E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999948296694171	WITHOUT_CLASSIFICATION	5.170330582855195E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999946740051551	WITHOUT_CLASSIFICATION	5.325994844850512E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999942795060442	WITHOUT_CLASSIFICATION	5.720493955751842E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999942386166271	WITHOUT_CLASSIFICATION	5.761383372888594E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999930613215209	WITHOUT_CLASSIFICATION	6.938678479103309E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999940005443705	WITHOUT_CLASSIFICATION	5.999455629564859E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999936860920655	WITHOUT_CLASSIFICATION	6.313907934451086E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999950431110023	WITHOUT_CLASSIFICATION	4.956888997739985E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999939194507671	WITHOUT_CLASSIFICATION	6.080549232821816E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999953610058788	WITHOUT_CLASSIFICATION	4.6389941211491E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999956750324196	WITHOUT_CLASSIFICATION	4.324967580338647E-6	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999944304860691	WITHOUT_CLASSIFICATION	5.569513930934884E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999942846277518	WITHOUT_CLASSIFICATION	5.715372248217567E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999948780885191	WITHOUT_CLASSIFICATION	5.121911481029203E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999945527768561	WITHOUT_CLASSIFICATION	5.447223143902407E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999938929138801	WITHOUT_CLASSIFICATION	6.1070861198823674E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999954818187975	WITHOUT_CLASSIFICATION	4.518181202547029E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999928997821088	WITHOUT_CLASSIFICATION	7.100217891232133E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999911887399207	WITHOUT_CLASSIFICATION	8.811260079319118E-6	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999945760514687	WITHOUT_CLASSIFICATION	5.423948531263271E-6	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999938995482606	WITHOUT_CLASSIFICATION	6.100451739346033E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999940056395362	WITHOUT_CLASSIFICATION	5.994360463767797E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999938252702468	WITHOUT_CLASSIFICATION	6.174729753210201E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999959013407359	WITHOUT_CLASSIFICATION	4.09865926415462E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.999995310873424	WITHOUT_CLASSIFICATION	4.689126576019489E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999954889150406	WITHOUT_CLASSIFICATION	4.511084959301478E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999942029882811	WITHOUT_CLASSIFICATION	5.79701171886057E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999934470339367	WITHOUT_CLASSIFICATION	6.552966063368409E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999971631828741	WITHOUT_CLASSIFICATION	2.8368171258531793E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999965499290219	WITHOUT_CLASSIFICATION	3.4500709780245866E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999962724996079	WITHOUT_CLASSIFICATION	3.7275003922182313E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999996617285	WITHOUT_CLASSIFICATION	3.382714999936817E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999957992286107	WITHOUT_CLASSIFICATION	4.200771389282752E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999963073430006	WITHOUT_CLASSIFICATION	3.6926569992750572E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999963805350157	WITHOUT_CLASSIFICATION	3.619464984410897E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999961799261867	WITHOUT_CLASSIFICATION	3.8200738132565754E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999952056496609	WITHOUT_CLASSIFICATION	4.794350339051505E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999252272955937	WITHOUT_CLASSIFICATION	7.477270440628735E-5	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999015613974223	WITHOUT_CLASSIFICATION	9.843860257774144E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999968224084221	WITHOUT_CLASSIFICATION	3.177591577841321E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999679458973126	WITHOUT_CLASSIFICATION	3.205410268738629E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997331801410657	WITHOUT_CLASSIFICATION	2.6681985893428986E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998124746383701	WITHOUT_CLASSIFICATION	1.875253616298653E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9998626064225011	WITHOUT_CLASSIFICATION	1.373935774987799E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999565204137131	WITHOUT_CLASSIFICATION	4.347958628690905E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999952798755883	WITHOUT_CLASSIFICATION	4.7201244116675395E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999956179938605	WITHOUT_CLASSIFICATION	4.382006139493178E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999962169088197	WITHOUT_CLASSIFICATION	3.7830911801888185E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999958439644252	WITHOUT_CLASSIFICATION	4.156035574790847E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999956836736448	WITHOUT_CLASSIFICATION	4.316326355221252E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999960491296931	WITHOUT_CLASSIFICATION	3.950870306937723E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999957447889599	WITHOUT_CLASSIFICATION	4.255211040096971E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999995118511034	WITHOUT_CLASSIFICATION	4.881488966074624E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999945210851293	WITHOUT_CLASSIFICATION	5.47891487056916E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999958905381612	WITHOUT_CLASSIFICATION	4.109461838835926E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999943348176773	WITHOUT_CLASSIFICATION	5.665182322792781E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999955561745134	WITHOUT_CLASSIFICATION	4.44382548662666E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999941359676049	WITHOUT_CLASSIFICATION	5.864032395043822E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999947624645945	WITHOUT_CLASSIFICATION	5.237535405466599E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999949173665226	WITHOUT_CLASSIFICATION	5.082633477388617E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999937651580704	WITHOUT_CLASSIFICATION	6.234841929739095E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999951161467867	WITHOUT_CLASSIFICATION	4.883853213308149E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999940286136267	WITHOUT_CLASSIFICATION	5.9713863732215895E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999958879916566	WITHOUT_CLASSIFICATION	4.112008343385843E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999934872794687	WITHOUT_CLASSIFICATION	6.512720531217048E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999968209743162	WITHOUT_CLASSIFICATION	3.1790256838579818E-6	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999959543575625	WITHOUT_CLASSIFICATION	4.045642437451071E-6	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999972219002804	WITHOUT_CLASSIFICATION	2.7780997195888883E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999993352673513	WITHOUT_CLASSIFICATION	6.647326487188832E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999782834805202	WITHOUT_CLASSIFICATION	2.1716519479781708E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9999960316541563	WITHOUT_CLASSIFICATION	3.968345843730875E-6	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999981175059639	WITHOUT_CLASSIFICATION	1.8824940361802644E-6	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999973068251767	WITHOUT_CLASSIFICATION	2.6931748231727724E-6	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999316716650071	WITHOUT_CLASSIFICATION	6.832833499300458E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999984060067564	WITHOUT_CLASSIFICATION	1.593993243622406E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999989511866624	WITHOUT_CLASSIFICATION	1.0488133376369347E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999989511866624	WITHOUT_CLASSIFICATION	1.0488133376369347E-6	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9997663147061602	WITHOUT_CLASSIFICATION	2.3368529383985173E-4	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999925357724504	WITHOUT_CLASSIFICATION	7.464227549653522E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999983050172411	WITHOUT_CLASSIFICATION	1.6949827588558963E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999976161453785	WITHOUT_CLASSIFICATION	2.383854621611146E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9999918359682441	WITHOUT_CLASSIFICATION	8.164031755762636E-6	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999869964693712	WITHOUT_CLASSIFICATION	1.3003530628854057E-5	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.999995552702662	WITHOUT_CLASSIFICATION	4.447297337967375E-6	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999965946772675	WITHOUT_CLASSIFICATION	3.405322732508167E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999997549658671	WITHOUT_CLASSIFICATION	2.4503413287167464E-7	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999975874891166	WITHOUT_CLASSIFICATION	2.412510883429481E-6	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999998067592434	WITHOUT_CLASSIFICATION	1.9324075660163458E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999990568666626	WITHOUT_CLASSIFICATION	9.431333375098004E-7	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999995389827352	WITHOUT_CLASSIFICATION	4.610172647874919E-7	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999946422538413	WITHOUT_CLASSIFICATION	5.357746158656503E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999985853414691	WITHOUT_CLASSIFICATION	1.4146585309062402E-6	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999985853414691	WITHOUT_CLASSIFICATION	1.4146585309062402E-6	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999891356957705	WITHOUT_CLASSIFICATION	1.086430422947648E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999991784697235	WITHOUT_CLASSIFICATION	8.215302765121887E-7	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999990996204472	WITHOUT_CLASSIFICATION	9.003795528785175E-7	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999996868357629	WITHOUT_CLASSIFICATION	3.131642372058428E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999999613407481	WITHOUT_CLASSIFICATION	3.8659251902677154E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999997497238082	WITHOUT_CLASSIFICATION	2.502761918642191E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999999613407481	WITHOUT_CLASSIFICATION	3.8659251902677154E-7	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999999878584472	WITHOUT_CLASSIFICATION	1.2141552769691515E-8	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9997069712227348	WITHOUT_CLASSIFICATION	2.930287772651818E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9988854425955397	WITHOUT_CLASSIFICATION	0.0011145574044602938	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999934236661527	WITHOUT_CLASSIFICATION	6.576333847230406E-6	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999885660190567	WITHOUT_CLASSIFICATION	1.143398094327834E-5	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999996938505442	WITHOUT_CLASSIFICATION	3.06149455704357E-7	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999996365768135	WITHOUT_CLASSIFICATION	3.634231865027468E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999990438509168	WITHOUT_CLASSIFICATION	9.561490832224447E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9830492126866314	WITHOUT_CLASSIFICATION	0.01695078731336866	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.99999956928709	WITHOUT_CLASSIFICATION	4.3071290989003256E-7	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999893061946277	WITHOUT_CLASSIFICATION	1.0693805372335722E-5	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999430042993989	WITHOUT_CLASSIFICATION	5.699570060108738E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999077319762887	WITHOUT_CLASSIFICATION	9.226802371134664E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999981244501066	WITHOUT_CLASSIFICATION	1.8755498934264556E-6	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999981244501066	WITHOUT_CLASSIFICATION	1.8755498934264556E-6	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999886824972729	WITHOUT_CLASSIFICATION	1.1317502727155681E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999581068522	WITHOUT_CLASSIFICATION	4.1893147848722236E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999988752672483	WITHOUT_CLASSIFICATION	1.1247327516846895E-6	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9999522423524816	WITHOUT_CLASSIFICATION	4.7757647518310154E-5	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999997192757796	WITHOUT_CLASSIFICATION	2.80724220443783E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.999999613407481	WITHOUT_CLASSIFICATION	3.8659251902677154E-7	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999992554805404	WITHOUT_CLASSIFICATION	7.445194597108565E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999991106026463	WITHOUT_CLASSIFICATION	8.893973537909715E-7	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999937809005841	WITHOUT_CLASSIFICATION	6.2190994158757105E-6	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999989661922076	WITHOUT_CLASSIFICATION	1.0338077923139452E-6	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999997709693321	WITHOUT_CLASSIFICATION	2.2903066792181089E-7	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999999293987899	WITHOUT_CLASSIFICATION	7.060121003479453E-8	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999995749035934	WITHOUT_CLASSIFICATION	4.2509640664868806E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9999990652737437	WITHOUT_CLASSIFICATION	9.347262563568122E-7	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999161442355322	WITHOUT_CLASSIFICATION	8.385576446782395E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999994888936372	WITHOUT_CLASSIFICATION	5.111063628949682E-7	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999990560791484	WITHOUT_CLASSIFICATION	9.439208516545777E-7	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999973749033144	WITHOUT_CLASSIFICATION	2.625096685545706E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998481881401762	WITHOUT_CLASSIFICATION	1.518118598238927E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999760759579102	WITHOUT_CLASSIFICATION	2.3924042089817824E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.999984040972373	WITHOUT_CLASSIFICATION	1.5959027626952244E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999975603976988	WITHOUT_CLASSIFICATION	2.4396023010860777E-6	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999950960815719	WITHOUT_CLASSIFICATION	4.903918428143416E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9997911939281223	WITHOUT_CLASSIFICATION	2.0880607187772138E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999993157826513	WITHOUT_CLASSIFICATION	6.842173486603024E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999979164866601	WITHOUT_CLASSIFICATION	2.083513339936977E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999969662537	WITHOUT_CLASSIFICATION	3.0337462999791953E-6	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9968550843012327	WITHOUT_CLASSIFICATION	0.0031449156987672228	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999991579173618	WITHOUT_CLASSIFICATION	8.420826382913354E-7	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999970331825153	WITHOUT_CLASSIFICATION	2.9668174846160484E-6	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999971763608376	WITHOUT_CLASSIFICATION	2.8236391623528713E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999952759511782	WITHOUT_CLASSIFICATION	4.724048821802037E-6	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999946514622465	WITHOUT_CLASSIFICATION	5.348537753549791E-6	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999993636657023	WITHOUT_CLASSIFICATION	6.363342975731208E-7	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9998280135803639	WITHOUT_CLASSIFICATION	1.719864196360997E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999981309984087	WITHOUT_CLASSIFICATION	1.8690015912274597E-6	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999942251022742	WITHOUT_CLASSIFICATION	5.774897725799937E-6	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999991635942774	WITHOUT_CLASSIFICATION	8.364057224882924E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999938944895209	WITHOUT_CLASSIFICATION	6.1055104790484255E-6	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999936807035359	WITHOUT_CLASSIFICATION	6.319296464099564E-6	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999999430849332	WITHOUT_CLASSIFICATION	5.6915066878659965E-8	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.99999983842032	WITHOUT_CLASSIFICATION	1.6157967999424446E-7	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999971657049249	WITHOUT_CLASSIFICATION	2.8342950750823347E-6	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999996214361717	WITHOUT_CLASSIFICATION	3.7856382832066575E-7	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999996341784754	WITHOUT_CLASSIFICATION	3.6582152461843506E-7	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.999998604841902	WITHOUT_CLASSIFICATION	1.3951580981595512E-6	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999565204137131	WITHOUT_CLASSIFICATION	4.347958628690905E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999969434624882	WITHOUT_CLASSIFICATION	3.0565375117605294E-6	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999748134299855	WITHOUT_CLASSIFICATION	2.5186570014471106E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999956437029243	WITHOUT_CLASSIFICATION	4.356297075656227E-6	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999976477002248	WITHOUT_CLASSIFICATION	2.3522997751052447E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999992906632248	WITHOUT_CLASSIFICATION	7.093367752120765E-7	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999989873307589	WITHOUT_CLASSIFICATION	1.0126692410862235E-6	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9997036547704968	WITHOUT_CLASSIFICATION	2.9634522950317487E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998601980966	WITHOUT_CLASSIFICATION	1.39801903362635E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998601980966	WITHOUT_CLASSIFICATION	1.39801903362635E-7	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999996903541615	WITHOUT_CLASSIFICATION	3.0964583850981335E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999996903541615	WITHOUT_CLASSIFICATION	3.0964583850981335E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.999996903541615	WITHOUT_CLASSIFICATION	3.0964583850981335E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999994702155489	WITHOUT_CLASSIFICATION	5.297844510572747E-7	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999994702155489	WITHOUT_CLASSIFICATION	5.297844510572747E-7	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999991109765772	WITHOUT_CLASSIFICATION	8.890234227175125E-7	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999991109765772	WITHOUT_CLASSIFICATION	8.890234227175125E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999923298349419	WITHOUT_CLASSIFICATION	7.670165058035151E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999888299013546	WITHOUT_CLASSIFICATION	1.1170098645499441E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999905891728306	WITHOUT_CLASSIFICATION	9.410827169534803E-6	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999905891728306	WITHOUT_CLASSIFICATION	9.410827169534803E-6	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999963197953882	WITHOUT_CLASSIFICATION	3.680204611867619E-6	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999663699918737	WITHOUT_CLASSIFICATION	3.363000812624523E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999984639672386	WITHOUT_CLASSIFICATION	1.5360327614840352E-6	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999991524184164	WITHOUT_CLASSIFICATION	8.475815836316541E-7	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999791288662265	WITHOUT_CLASSIFICATION	2.0871133773510404E-5	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999933549324194	WITHOUT_CLASSIFICATION	6.645067580696192E-6	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.999995566619621	WITHOUT_CLASSIFICATION	4.43338037903501E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.999944945949521	WITHOUT_CLASSIFICATION	5.50540504790945E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999995109682638	WITHOUT_CLASSIFICATION	4.890317361095541E-7	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999962627534839	WITHOUT_CLASSIFICATION	3.737246516113777E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9999998409985732	WITHOUT_CLASSIFICATION	1.5900142670158632E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999961912275105	WITHOUT_CLASSIFICATION	3.8087724895310053E-6	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.999997887451371	WITHOUT_CLASSIFICATION	2.1125486289919055E-6	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999779407325469	WITHOUT_CLASSIFICATION	2.20592674531801E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999942040103357	WITHOUT_CLASSIFICATION	5.795989664359452E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997574045356481	WITHOUT_CLASSIFICATION	2.425954643520059E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999464601525853	WITHOUT_CLASSIFICATION	5.353984741469895E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999748948651654	WITHOUT_CLASSIFICATION	2.5105134834624732E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999886745832888	WITHOUT_CLASSIFICATION	1.13254167112441E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998846830495879	WITHOUT_CLASSIFICATION	1.1531695041211548E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999994040767267	WITHOUT_CLASSIFICATION	5.959232732546761E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999988400217363	WITHOUT_CLASSIFICATION	1.1599782636426337E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999983356201745	WITHOUT_CLASSIFICATION	1.6643798255360663E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.99999376403277	WITHOUT_CLASSIFICATION	6.2359672300721715E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999993121825994	WITHOUT_CLASSIFICATION	6.878174006675368E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999960866994803	WITHOUT_CLASSIFICATION	3.91330051973161E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999519437124943	WITHOUT_CLASSIFICATION	4.805628750565954E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999809857298724	WITHOUT_CLASSIFICATION	1.901427012763203E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999918146840843	WITHOUT_CLASSIFICATION	8.185315915823034E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999990971709322	WITHOUT_CLASSIFICATION	9.028290678185021E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999948634072146	WITHOUT_CLASSIFICATION	5.136592785497676E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9999966102080274	WITHOUT_CLASSIFICATION	3.389791972575237E-6	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999587843883001	WITHOUT_CLASSIFICATION	4.121561169981184E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999921045824676	WITHOUT_CLASSIFICATION	7.895417532450344E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999833034361759	WITHOUT_CLASSIFICATION	1.6696563824085297E-5	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999999304419152	WITHOUT_CLASSIFICATION	6.955808487909752E-8	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999968629240505	WITHOUT_CLASSIFICATION	3.1370759494438524E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999991352053804	WITHOUT_CLASSIFICATION	8.647946195833068E-7	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999996358605505	WITHOUT_CLASSIFICATION	3.641394494917053E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999937074125905	WITHOUT_CLASSIFICATION	6.292587409512976E-6	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999969966608881	WITHOUT_CLASSIFICATION	3.0033391118057988E-6	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999439243923425	WITHOUT_CLASSIFICATION	5.607560765746583E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999999474252254	WITHOUT_CLASSIFICATION	5.257477461221617E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999988262955339	WITHOUT_CLASSIFICATION	1.1737044660311282E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.999999980749162	WITHOUT_CLASSIFICATION	1.9250838100212706E-8	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999755164364513	WITHOUT_CLASSIFICATION	2.448356354864878E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999991549546593	WITHOUT_CLASSIFICATION	8.450453407666271E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999998136305702	WITHOUT_CLASSIFICATION	1.8636942973931758E-7	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999996699052254	WITHOUT_CLASSIFICATION	3.300947746786495E-7	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9999998701116903	WITHOUT_CLASSIFICATION	1.2988830964261916E-7	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999997910824631	WITHOUT_CLASSIFICATION	2.0891753691315266E-7	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999998046729884	WITHOUT_CLASSIFICATION	1.9532701167887126E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999939888241598	WITHOUT_CLASSIFICATION	6.0111758402055975E-6	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999997497238082	WITHOUT_CLASSIFICATION	2.502761918642191E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999961304799201	WITHOUT_CLASSIFICATION	3.869520079829131E-6	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999904101486428	WITHOUT_CLASSIFICATION	9.589851357137013E-6	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999999944438689	WITHOUT_CLASSIFICATION	5.556131034847046E-9	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999940696117606	WITHOUT_CLASSIFICATION	5.930388239368424E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999999663496864	WITHOUT_CLASSIFICATION	3.3650313602545204E-7	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999947614979307	WITHOUT_CLASSIFICATION	5.238502069334802E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999996456633261	WITHOUT_CLASSIFICATION	3.543366739345337E-7	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999939553698319	WITHOUT_CLASSIFICATION	6.044630167992301E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999999154582336	WITHOUT_CLASSIFICATION	8.454176642190682E-8	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999993884309029	WITHOUT_CLASSIFICATION	6.115690971826967E-7	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999980645078482	WITHOUT_CLASSIFICATION	1.9354921517552632E-6	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999984601413143	WITHOUT_CLASSIFICATION	1.539858685570415E-6	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999961220109936	WITHOUT_CLASSIFICATION	3.877989006392588E-6	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999998656777818	WITHOUT_CLASSIFICATION	1.3432221820425914E-7	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999987992770137	WITHOUT_CLASSIFICATION	1.2007229862490677E-6	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999995499853559	WITHOUT_CLASSIFICATION	4.5001464412116E-7	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999999071811402	WITHOUT_CLASSIFICATION	9.281885991317284E-8	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999428087365829	WITHOUT_CLASSIFICATION	5.7191263417036456E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999994208378266	WITHOUT_CLASSIFICATION	5.791621735253782E-7	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999991271767269	WITHOUT_CLASSIFICATION	8.728232731383041E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999977769446067	WITHOUT_CLASSIFICATION	2.2230553933906535E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999977769446067	WITHOUT_CLASSIFICATION	2.2230553933906535E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999967667944881	WITHOUT_CLASSIFICATION	3.2332055118009006E-6	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999967667944881	WITHOUT_CLASSIFICATION	3.2332055118009006E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999928549461525	WITHOUT_CLASSIFICATION	7.145053847492676E-6	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999928549461525	WITHOUT_CLASSIFICATION	7.145053847492676E-6	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999993818717836	WITHOUT_CLASSIFICATION	6.181282163840503E-7	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999986705285875	WITHOUT_CLASSIFICATION	1.329471412489748E-6	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999901676854742	WITHOUT_CLASSIFICATION	9.832314525805953E-6	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999956018907	WITHOUT_CLASSIFICATION	4.398109317998321E-9	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999998644610358	WITHOUT_CLASSIFICATION	1.3553896415309282E-7	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999822914471747	WITHOUT_CLASSIFICATION	1.7708552825356118E-5	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999946399508547	WITHOUT_CLASSIFICATION	5.360049145207674E-6	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999985358663089	WITHOUT_CLASSIFICATION	1.4641336910446041E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999998849965434	WITHOUT_CLASSIFICATION	1.1500345665049928E-7	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999992831970761	WITHOUT_CLASSIFICATION	7.168029238853437E-7	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999808532562133	WITHOUT_CLASSIFICATION	1.9146743786700534E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999984130599501	WITHOUT_CLASSIFICATION	1.5869400499228268E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999480684695804	WITHOUT_CLASSIFICATION	5.193153041955998E-5	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.999999486080494	WITHOUT_CLASSIFICATION	5.13919505981716E-7	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999943279745195	WITHOUT_CLASSIFICATION	5.672025480519992E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999974950632524	WITHOUT_CLASSIFICATION	2.504936747450426E-6	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999988215475456	WITHOUT_CLASSIFICATION	1.1784524543668687E-6	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.999975750858935	WITHOUT_CLASSIFICATION	2.424914106513858E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.999999011944533	WITHOUT_CLASSIFICATION	9.880554669789943E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999978459854911	WITHOUT_CLASSIFICATION	2.154014508823946E-6	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999975019754185	WITHOUT_CLASSIFICATION	2.4980245814889055E-6	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9999962090686885	WITHOUT_CLASSIFICATION	3.7909313114574073E-6	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.999998420225706	WITHOUT_CLASSIFICATION	1.579774294013658E-6	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999948260788598	WITHOUT_CLASSIFICATION	5.173921140206518E-6	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999992966804887	WITHOUT_CLASSIFICATION	7.033195112924714E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999999172690537	WITHOUT_CLASSIFICATION	8.273094626860703E-8	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999988741119111	WITHOUT_CLASSIFICATION	1.1258880888916854E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999917019403	WITHOUT_CLASSIFICATION	8.298059617526415E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999917019403	WITHOUT_CLASSIFICATION	8.298059617526415E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999760759579102	WITHOUT_CLASSIFICATION	2.3924042089817824E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999760759579102	WITHOUT_CLASSIFICATION	2.3924042089817824E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999996983449246	WITHOUT_CLASSIFICATION	3.0165507533448806E-7	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9985592678859111	WITHOUT_CLASSIFICATION	0.0014407321140889231	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999947532729417	WITHOUT_CLASSIFICATION	5.2467270582836E-6	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999905091584842	WITHOUT_CLASSIFICATION	9.490841515886685E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999989258919418	WITHOUT_CLASSIFICATION	1.074108058240479E-6	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999917019403	WITHOUT_CLASSIFICATION	8.298059617526415E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999917019403	WITHOUT_CLASSIFICATION	8.298059617526415E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999917019403	WITHOUT_CLASSIFICATION	8.298059617526415E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999760759579102	WITHOUT_CLASSIFICATION	2.3924042089817824E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999760759579102	WITHOUT_CLASSIFICATION	2.3924042089817824E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999999751372055	WITHOUT_CLASSIFICATION	2.486279447882682E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999738212180553	WITHOUT_CLASSIFICATION	2.6178781944686595E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999987483369327	WITHOUT_CLASSIFICATION	1.2516630672756484E-6	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999990614558241	WITHOUT_CLASSIFICATION	9.385441759938559E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9999352546475754	WITHOUT_CLASSIFICATION	6.474535242458876E-5	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999996548364248	WITHOUT_CLASSIFICATION	3.4516357509696325E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999962230245776	WITHOUT_CLASSIFICATION	3.7769754224727892E-6	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999982819783021	WITHOUT_CLASSIFICATION	1.7180216979437213E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999981795823286	WITHOUT_CLASSIFICATION	1.820417671415216E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999982778531714	WITHOUT_CLASSIFICATION	1.7221468286728116E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999995193675686	WITHOUT_CLASSIFICATION	4.806324313727045E-7	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999907596622336	WITHOUT_CLASSIFICATION	9.240337766319576E-6	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999853214815019	WITHOUT_CLASSIFICATION	1.4678518498202405E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999921050407169	WITHOUT_CLASSIFICATION	7.894959283131345E-6	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9999521105214079	WITHOUT_CLASSIFICATION	4.7889478592028064E-5	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999973711449847	WITHOUT_CLASSIFICATION	2.628855015437361E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.99969003733918	WITHOUT_CLASSIFICATION	3.099626608199253E-4	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999858593963202	WITHOUT_CLASSIFICATION	1.4140603679736384E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999858593963202	WITHOUT_CLASSIFICATION	1.4140603679736384E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999858593963202	WITHOUT_CLASSIFICATION	1.4140603679736384E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999926626392117	WITHOUT_CLASSIFICATION	7.337360788166784E-6	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999926624834398	WITHOUT_CLASSIFICATION	7.337516560186139E-6	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.999998966324447	WITHOUT_CLASSIFICATION	1.0336755530244342E-6	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999974671224959	WITHOUT_CLASSIFICATION	2.532877504037139E-6	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999990798672166	WITHOUT_CLASSIFICATION	9.201327832831332E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.999999716165168	WITHOUT_CLASSIFICATION	2.8383483201268704E-7	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999995341036731	WITHOUT_CLASSIFICATION	4.658963268858841E-7	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999986655040684	WITHOUT_CLASSIFICATION	1.334495931595704E-6	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999985803009697	WITHOUT_CLASSIFICATION	1.4196990303258068E-6	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.999998681166584	WITHOUT_CLASSIFICATION	1.318833416053374E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999982010997405	WITHOUT_CLASSIFICATION	1.7989002595447672E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999948646792535	WITHOUT_CLASSIFICATION	5.135320746462398E-6	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999985130381169	WITHOUT_CLASSIFICATION	1.4869618831156126E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999998852866143	WITHOUT_CLASSIFICATION	1.1471338568444984E-7	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.999999866967099	WITHOUT_CLASSIFICATION	1.3303290101357729E-7	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.999999218861627	WITHOUT_CLASSIFICATION	7.811383729581006E-7	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.999999438806408	WITHOUT_CLASSIFICATION	5.611935919830105E-7	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999968839805028	WITHOUT_CLASSIFICATION	3.116019497117396E-6	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999936069497061	WITHOUT_CLASSIFICATION	6.393050293927099E-6	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.999982914520926	WITHOUT_CLASSIFICATION	1.7085479073977096E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.999998404533659	WITHOUT_CLASSIFICATION	1.5954663410485439E-6	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999964172897718	WITHOUT_CLASSIFICATION	3.582710228170627E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9999956836185918	WITHOUT_CLASSIFICATION	4.316381408105704E-6	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.99999673148843	WITHOUT_CLASSIFICATION	3.268511569977911E-6	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999938920308347	WITHOUT_CLASSIFICATION	6.107969165274592E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999970960804276	WITHOUT_CLASSIFICATION	2.903919572396782E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999980429418103	WITHOUT_CLASSIFICATION	1.9570581897620943E-6	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999975163943599	WITHOUT_CLASSIFICATION	2.4836056401330595E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999560112623229	WITHOUT_CLASSIFICATION	4.398873767713121E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999884923603174	WITHOUT_CLASSIFICATION	1.1507639682548126E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999902070644586	WITHOUT_CLASSIFICATION	9.792935541451827E-6	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999894690668956	WITHOUT_CLASSIFICATION	1.0530933104486601E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999861996389077	WITHOUT_CLASSIFICATION	1.3800361092383147E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999871701284261	WITHOUT_CLASSIFICATION	1.282987157389031E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999868075757756	WITHOUT_CLASSIFICATION	1.3192424224464403E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999871362223876	WITHOUT_CLASSIFICATION	1.2863777612524045E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.99996195822512	WITHOUT_CLASSIFICATION	3.8041774880060504E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999894564771865	WITHOUT_CLASSIFICATION	1.0543522813451213E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.999999988110222	WITHOUT_CLASSIFICATION	1.1889777980719597E-8	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.999974490091902	WITHOUT_CLASSIFICATION	2.5509908098085483E-5	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999930682375274	WITHOUT_CLASSIFICATION	6.931762472628466E-6	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9999992440910864	WITHOUT_CLASSIFICATION	7.559089135037733E-7	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9999864197371017	WITHOUT_CLASSIFICATION	1.3580262898404253E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999987237243758	WITHOUT_CLASSIFICATION	1.2762756241818172E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999977604698129	WITHOUT_CLASSIFICATION	2.23953018709256E-6	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999756937948916	WITHOUT_CLASSIFICATION	2.430620510839941E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999985050587141	WITHOUT_CLASSIFICATION	1.4949412858770923E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999985050587141	WITHOUT_CLASSIFICATION	1.4949412858770923E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999890669113267	WITHOUT_CLASSIFICATION	1.093308867321995E-5	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999994944782487	WITHOUT_CLASSIFICATION	5.055217513669012E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999837472810865	WITHOUT_CLASSIFICATION	1.6252718913455533E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9990104782724701	WITHOUT_CLASSIFICATION	9.89521727529855E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999890186619299	WITHOUT_CLASSIFICATION	1.0981338070061942E-5	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999994963556751	WITHOUT_CLASSIFICATION	5.036443249141795E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999918208266361	WITHOUT_CLASSIFICATION	8.179173363942997E-6	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999104826524	WITHOUT_CLASSIFICATION	8.95173476415777E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999991127571815	WITHOUT_CLASSIFICATION	8.872428185834326E-7	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999932132355553	WITHOUT_CLASSIFICATION	6.7867644447365216E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999960517649435	WITHOUT_CLASSIFICATION	3.948235056454223E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999960517649435	WITHOUT_CLASSIFICATION	3.948235056454223E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999960517649435	WITHOUT_CLASSIFICATION	3.948235056454223E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999960517649435	WITHOUT_CLASSIFICATION	3.948235056454223E-6	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999910009232617	WITHOUT_CLASSIFICATION	8.999076738391427E-6	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999976284222661	WITHOUT_CLASSIFICATION	2.3715777338042073E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999984398060867	WITHOUT_CLASSIFICATION	1.560193913318792E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999992010499615	WITHOUT_CLASSIFICATION	7.989500384606171E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9997529061907808	WITHOUT_CLASSIFICATION	2.470938092191729E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.999999597710723	WITHOUT_CLASSIFICATION	4.0228927694791373E-7	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999929357020193	WITHOUT_CLASSIFICATION	7.0642979807812525E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999766709035033	WITHOUT_CLASSIFICATION	2.3329096496717616E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999766709035033	WITHOUT_CLASSIFICATION	2.3329096496717616E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.999999985704018	WITHOUT_CLASSIFICATION	1.4295981878055565E-8	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999982102670117	WITHOUT_CLASSIFICATION	1.7897329883094557E-6	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999248917744464	WITHOUT_CLASSIFICATION	7.510822555360227E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999996108823934	WITHOUT_CLASSIFICATION	3.8911760661085547E-7	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9999996108823934	WITHOUT_CLASSIFICATION	3.8911760661085547E-7	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999999547615105	WITHOUT_CLASSIFICATION	4.523848948254646E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999705519088	WITHOUT_CLASSIFICATION	2.9448091299261398E-8	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999999705519088	WITHOUT_CLASSIFICATION	2.9448091299261398E-8	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.999998313101236	WITHOUT_CLASSIFICATION	1.6868987639505748E-6	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999657556341	WITHOUT_CLASSIFICATION	3.4244365815490704E-8	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999999598680981	WITHOUT_CLASSIFICATION	4.013190188535276E-8	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9999971103026006	WITHOUT_CLASSIFICATION	2.88969739942453E-6	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9998320487843894	WITHOUT_CLASSIFICATION	1.679512156107293E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999983319396815	WITHOUT_CLASSIFICATION	1.6680603184857812E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.999984364672098	WITHOUT_CLASSIFICATION	1.563532790208823E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999948427248048	WITHOUT_CLASSIFICATION	5.157275195302667E-6	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999999891197039	WITHOUT_CLASSIFICATION	1.0880296083350344E-8	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999987386973506	WITHOUT_CLASSIFICATION	1.2613026494531993E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999952187339936	WITHOUT_CLASSIFICATION	4.781266006442603E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999987045206822	WITHOUT_CLASSIFICATION	1.2954793178802317E-6	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999645092939297	WITHOUT_CLASSIFICATION	3.5490706070275564E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999500477518285	WITHOUT_CLASSIFICATION	4.9952248171622235E-5	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999970495134946	WITHOUT_CLASSIFICATION	2.95048650547359E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.999993510378066	WITHOUT_CLASSIFICATION	6.489621933910207E-6	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999991611373645	WITHOUT_CLASSIFICATION	8.388626354658446E-7	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999949026087702	WITHOUT_CLASSIFICATION	5.097391229820239E-6	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999986235770733	WITHOUT_CLASSIFICATION	1.376422926761408E-6	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9999972235337051	WITHOUT_CLASSIFICATION	2.7764662948446836E-6	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9999978521365257	WITHOUT_CLASSIFICATION	2.147863474193929E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.999991432588446	WITHOUT_CLASSIFICATION	8.567411554045513E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999905161264839	WITHOUT_CLASSIFICATION	9.483873516003073E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9999339366654064	WITHOUT_CLASSIFICATION	6.60633345935218E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999977238560281	WITHOUT_CLASSIFICATION	2.2761439718760972E-6	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9999961500354554	WITHOUT_CLASSIFICATION	3.849964544659041E-6	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999951765154812	WITHOUT_CLASSIFICATION	4.823484518725211E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999988693662112	WITHOUT_CLASSIFICATION	1.1306337888359588E-6	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999902985819865	WITHOUT_CLASSIFICATION	9.701418013507817E-6	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999975687459844	WITHOUT_CLASSIFICATION	2.431254015524798E-6	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999948085020444	WITHOUT_CLASSIFICATION	5.191497955644283E-6	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.999999760960848	WITHOUT_CLASSIFICATION	2.390391519320874E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.5791344212876247	WITHOUT_CLASSIFICATION	0.4208655787123752	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999979377666313	WITHOUT_CLASSIFICATION	2.0622333688057027E-6	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999971795752755	WITHOUT_CLASSIFICATION	2.820424724460368E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999958691330276	WITHOUT_CLASSIFICATION	4.130866972344236E-6	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999992795561549	WITHOUT_CLASSIFICATION	7.204438451033124E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999966033513024	WITHOUT_CLASSIFICATION	3.3966486975174602E-6	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9999983049125148	WITHOUT_CLASSIFICATION	1.6950874852255514E-6	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999958691330276	WITHOUT_CLASSIFICATION	4.130866972344236E-6	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999992795561549	WITHOUT_CLASSIFICATION	7.204438451033124E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.999997505395734	WITHOUT_CLASSIFICATION	2.4946042659154448E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999956068518294	WITHOUT_CLASSIFICATION	4.393148170681519E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999956068518294	WITHOUT_CLASSIFICATION	4.393148170681519E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999978460218553	WITHOUT_CLASSIFICATION	2.153978144714922E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999983958589658	WITHOUT_CLASSIFICATION	1.6041410342563262E-6	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999991423544905	WITHOUT_CLASSIFICATION	8.576455094994244E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999972016086148	WITHOUT_CLASSIFICATION	2.798391385240829E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999909234023064	WITHOUT_CLASSIFICATION	9.076597693605911E-5	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9998673966286563	WITHOUT_CLASSIFICATION	1.3260337134369125E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999983590047034	WITHOUT_CLASSIFICATION	1.6409952966742862E-6	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999955446620948	WITHOUT_CLASSIFICATION	4.455337905120771E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999996321540111	WITHOUT_CLASSIFICATION	3.6784598888821965E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999967509213323	WITHOUT_CLASSIFICATION	3.24907866764358E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999978845634133	WITHOUT_CLASSIFICATION	2.115436586693556E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999996597099875	WITHOUT_CLASSIFICATION	3.4029001249802576E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999923616548629	WITHOUT_CLASSIFICATION	7.638345137050982E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999989868325156	WITHOUT_CLASSIFICATION	1.0131674843469835E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999989868325156	WITHOUT_CLASSIFICATION	1.0131674843469835E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999987184195529	WITHOUT_CLASSIFICATION	1.281580447108904E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999987184195529	WITHOUT_CLASSIFICATION	1.281580447108904E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999997131250328	WITHOUT_CLASSIFICATION	2.868749671858031E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999993758880512	WITHOUT_CLASSIFICATION	6.241119488595468E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999992752205324	WITHOUT_CLASSIFICATION	7.247794676261992E-7	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999835078715947	WITHOUT_CLASSIFICATION	1.649212840521944E-5	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999989692432423	WITHOUT_CLASSIFICATION	1.0307567576246405E-6	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999991092679996	WITHOUT_CLASSIFICATION	8.907320004084833E-7	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.999991423544905	WITHOUT_CLASSIFICATION	8.576455094994244E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999972016086148	WITHOUT_CLASSIFICATION	2.798391385240829E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999996321540111	WITHOUT_CLASSIFICATION	3.6784598888821965E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999967509213323	WITHOUT_CLASSIFICATION	3.24907866764358E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999998196103734	WITHOUT_CLASSIFICATION	1.803896265778753E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999991972341647	WITHOUT_CLASSIFICATION	8.027658353406333E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999963662081721	WITHOUT_CLASSIFICATION	3.6337918277697305E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999994969100362	WITHOUT_CLASSIFICATION	5.030899637830775E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999994466621535	WITHOUT_CLASSIFICATION	5.533378465398441E-7	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999804534462814	WITHOUT_CLASSIFICATION	1.9546553718585888E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.999995958886165	WITHOUT_CLASSIFICATION	4.041113835011572E-6	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999977050149793	WITHOUT_CLASSIFICATION	2.2949850207413854E-6	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999996559732499	WITHOUT_CLASSIFICATION	3.44026749999336E-7	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999979735552955	WITHOUT_CLASSIFICATION	2.026444704533348E-6	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999999787470806	WITHOUT_CLASSIFICATION	2.125291938051539E-8	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999997899757563	WITHOUT_CLASSIFICATION	2.1002424378057266E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.99999949720457	WITHOUT_CLASSIFICATION	5.027954299770074E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.999998188059784	WITHOUT_CLASSIFICATION	1.811940215943253E-6	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999997916039981	WITHOUT_CLASSIFICATION	2.0839600182549328E-7	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999709615925263	WITHOUT_CLASSIFICATION	2.9038407473776412E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999925985010363	WITHOUT_CLASSIFICATION	7.401498963650668E-6	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999979847867165	WITHOUT_CLASSIFICATION	2.0152132835090996E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999990034694792	WITHOUT_CLASSIFICATION	9.965305207199662E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999991986916466	WITHOUT_CLASSIFICATION	8.013083534134854E-7	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999988897519209	WITHOUT_CLASSIFICATION	1.110248079124244E-6	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999988897519209	WITHOUT_CLASSIFICATION	1.110248079124244E-6	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999861802083263	WITHOUT_CLASSIFICATION	1.3819791673659101E-5	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999243268773932	WITHOUT_CLASSIFICATION	7.567312260680025E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999058091023874	WITHOUT_CLASSIFICATION	9.419089761256229E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999998620866132	WITHOUT_CLASSIFICATION	1.3791338679670615E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.999998620866132	WITHOUT_CLASSIFICATION	1.3791338679670615E-6	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999963662081721	WITHOUT_CLASSIFICATION	3.6337918277697305E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999933882213968	WITHOUT_CLASSIFICATION	6.611778603268335E-6	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999993900851529	WITHOUT_CLASSIFICATION	6.099148470575882E-7	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999995782459418	WITHOUT_CLASSIFICATION	4.217540581415347E-7	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9999994384534742	WITHOUT_CLASSIFICATION	5.615465258055629E-7	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999985864717477	WITHOUT_CLASSIFICATION	1.4135282523457308E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999979937780547	WITHOUT_CLASSIFICATION	2.0062219454122944E-6	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999989677874752	WITHOUT_CLASSIFICATION	1.0322125247892161E-6	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999981458999575	WITHOUT_CLASSIFICATION	1.8541000424560808E-6	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999980287076842	WITHOUT_CLASSIFICATION	1.9712923158389335E-6	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999751064392141	WITHOUT_CLASSIFICATION	2.4893560785996582E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999979669608859	WITHOUT_CLASSIFICATION	2.033039114173648E-6	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.999999236995993	WITHOUT_CLASSIFICATION	7.630040070778189E-7	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999936443136487	WITHOUT_CLASSIFICATION	6.35568635126665E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999997812762299	WITHOUT_CLASSIFICATION	2.1872377009279898E-6	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999793090072835	WITHOUT_CLASSIFICATION	2.069099271657889E-5	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999996710751282	WITHOUT_CLASSIFICATION	3.289248718324349E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999996641075349	WITHOUT_CLASSIFICATION	3.3589246500109995E-7	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999723179922	WITHOUT_CLASSIFICATION	2.7682007779007726E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999988577716	WITHOUT_CLASSIFICATION	1.1422284430458328E-9	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999980354860356	WITHOUT_CLASSIFICATION	1.964513964482866E-6	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9999992972759193	WITHOUT_CLASSIFICATION	7.027240806773798E-7	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999989408228974	WITHOUT_CLASSIFICATION	1.0591771025700433E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999998244628726	WITHOUT_CLASSIFICATION	1.755371274060709E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999985739721695	WITHOUT_CLASSIFICATION	1.4260278303832637E-6	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999998753982947	WITHOUT_CLASSIFICATION	1.2460170527150123E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999928554940399	WITHOUT_CLASSIFICATION	7.144505960051814E-6	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.999999994624621	WITHOUT_CLASSIFICATION	5.375379034624342E-9	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.999999592252309	WITHOUT_CLASSIFICATION	4.0774769089489414E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999991836419424	WITHOUT_CLASSIFICATION	8.163580575228599E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999991693156605	WITHOUT_CLASSIFICATION	8.306843394865649E-7	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999991693156605	WITHOUT_CLASSIFICATION	8.306843394865649E-7	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999189136484	WITHOUT_CLASSIFICATION	8.108635166594416E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999999189136484	WITHOUT_CLASSIFICATION	8.108635166594416E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999979875950078	WITHOUT_CLASSIFICATION	2.0124049921827286E-6	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.99999996485518	WITHOUT_CLASSIFICATION	3.514482007247065E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999989628478079	WITHOUT_CLASSIFICATION	1.037152192158861E-6	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999998278171861	WITHOUT_CLASSIFICATION	1.721828139120044E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999998244628726	WITHOUT_CLASSIFICATION	1.755371274060709E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999998244628726	WITHOUT_CLASSIFICATION	1.755371274060709E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999998244628726	WITHOUT_CLASSIFICATION	1.755371274060709E-7	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999985739721695	WITHOUT_CLASSIFICATION	1.4260278303832637E-6	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999989628478079	WITHOUT_CLASSIFICATION	1.037152192158861E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999989628478079	WITHOUT_CLASSIFICATION	1.037152192158861E-6	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999992634198064	WITHOUT_CLASSIFICATION	7.365801935918578E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999195717999	WITHOUT_CLASSIFICATION	8.042820008455773E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999998986818087	WITHOUT_CLASSIFICATION	1.0131819132783235E-7	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.9671403814573032	DEFECT	0.0328596185426969	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.99999824512873	WITHOUT_CLASSIFICATION	1.754871270024905E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999972347371184	WITHOUT_CLASSIFICATION	2.7652628815456022E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999972347371184	WITHOUT_CLASSIFICATION	2.7652628815456022E-6	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999947623639388	WITHOUT_CLASSIFICATION	5.237636061204778E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994270105022	WITHOUT_CLASSIFICATION	5.729894978419163E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994270105022	WITHOUT_CLASSIFICATION	5.729894978419163E-7	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994270105022	WITHOUT_CLASSIFICATION	5.729894978419163E-7	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999965650952825	WITHOUT_CLASSIFICATION	3.434904717517907E-6	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999983256275209	WITHOUT_CLASSIFICATION	1.6743724791000376E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999985739721695	WITHOUT_CLASSIFICATION	1.4260278303832637E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999993921413451	WITHOUT_CLASSIFICATION	6.078586547748055E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999994270105022	WITHOUT_CLASSIFICATION	5.729894978419163E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999947623639388	WITHOUT_CLASSIFICATION	5.237636061204778E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999997625511947	WITHOUT_CLASSIFICATION	2.3744880540415328E-7	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999992152673018	WITHOUT_CLASSIFICATION	7.847326982257733E-7	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999886082698619	WITHOUT_CLASSIFICATION	1.1391730138130457E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999936608143895	WITHOUT_CLASSIFICATION	6.339185610550824E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999987882318797	WITHOUT_CLASSIFICATION	1.2117681202385706E-6	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999969634631384	WITHOUT_CLASSIFICATION	3.036536861649801E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999974366954303	WITHOUT_CLASSIFICATION	2.5633045697565805E-6	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999171009123928	WITHOUT_CLASSIFICATION	8.28990876072139E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999980774234137	WITHOUT_CLASSIFICATION	1.922576586327127E-6	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999995439442909	WITHOUT_CLASSIFICATION	4.560557089825805E-7	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999991657968185	WITHOUT_CLASSIFICATION	8.342031815872387E-7	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999997862946347	WITHOUT_CLASSIFICATION	2.1370536528346068E-7	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9999906407769356	WITHOUT_CLASSIFICATION	9.359223064419086E-6	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999997617312489	WITHOUT_CLASSIFICATION	2.3826875098183583E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999988933073236	WITHOUT_CLASSIFICATION	1.1066926763474438E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999996374718995	WITHOUT_CLASSIFICATION	3.6252810045905114E-7	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999990950178155	WITHOUT_CLASSIFICATION	9.049821844447466E-7	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999545832534205	WITHOUT_CLASSIFICATION	4.5416746579589505E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999773775401363	WITHOUT_CLASSIFICATION	2.2622459863749085E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999996752612382	WITHOUT_CLASSIFICATION	3.247387617206571E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999869653116941	WITHOUT_CLASSIFICATION	1.3034688305866294E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999997393791712	WITHOUT_CLASSIFICATION	2.6062082878388066E-7	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999994934888982	WITHOUT_CLASSIFICATION	5.06511101839213E-7	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999997587990742	WITHOUT_CLASSIFICATION	2.4120092576546927E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999476872171305	WITHOUT_CLASSIFICATION	5.231278286948107E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999952993795191	WITHOUT_CLASSIFICATION	4.700620480944768E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999986857582613	WITHOUT_CLASSIFICATION	1.3142417386565067E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999996720608626	WITHOUT_CLASSIFICATION	3.27939137473549E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999993560844984	WITHOUT_CLASSIFICATION	6.439155014841226E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999993816836578	WITHOUT_CLASSIFICATION	6.183163421273184E-7	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999992646046962	WITHOUT_CLASSIFICATION	7.353953037963385E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999983226084556	WITHOUT_CLASSIFICATION	1.6773915444560945E-6	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999985434271276	WITHOUT_CLASSIFICATION	1.456572872454113E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999989306143683	WITHOUT_CLASSIFICATION	1.0693856317345126E-6	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999997625511947	WITHOUT_CLASSIFICATION	2.3744880540415328E-7	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999997970818975	WITHOUT_CLASSIFICATION	2.029181025162235E-7	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999545410823182	WITHOUT_CLASSIFICATION	4.545891768172548E-5	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999988413242576	WITHOUT_CLASSIFICATION	1.1586757424059976E-6	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999994464667653	WITHOUT_CLASSIFICATION	5.535332346944673E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999994464667653	WITHOUT_CLASSIFICATION	5.535332346944673E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999988346024137	WITHOUT_CLASSIFICATION	1.1653975862996883E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.999988346024137	WITHOUT_CLASSIFICATION	1.1653975862996883E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999961558142736	WITHOUT_CLASSIFICATION	3.84418572637325E-6	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999145876449558	WITHOUT_CLASSIFICATION	8.541235504426015E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999941797756183	WITHOUT_CLASSIFICATION	5.82022438164654E-6	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999965278141714	WITHOUT_CLASSIFICATION	3.472185828734771E-6	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.999998241416222	WITHOUT_CLASSIFICATION	1.7585837780745084E-6	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999996341232219	WITHOUT_CLASSIFICATION	3.658767781564251E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9999912003891265	WITHOUT_CLASSIFICATION	8.799610873479368E-6	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999990513020259	WITHOUT_CLASSIFICATION	9.4869797414944E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999996192963604	WITHOUT_CLASSIFICATION	3.8070363961087243E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999985145148478	WITHOUT_CLASSIFICATION	1.4854851521301243E-6	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999943573020378	WITHOUT_CLASSIFICATION	5.642697962242036E-6	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999998408703974	WITHOUT_CLASSIFICATION	1.5912960267938086E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999998408703974	WITHOUT_CLASSIFICATION	1.5912960267938086E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999823240019031	WITHOUT_CLASSIFICATION	1.767599809688324E-5	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999997334562005	WITHOUT_CLASSIFICATION	2.665437994022307E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999999794212772	WITHOUT_CLASSIFICATION	2.057872280286347E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.999999794212772	WITHOUT_CLASSIFICATION	2.057872280286347E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9998958311160574	WITHOUT_CLASSIFICATION	1.0416888394260521E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999981416685663	WITHOUT_CLASSIFICATION	1.8583314337839238E-6	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999071032596937	WITHOUT_CLASSIFICATION	9.289674030631014E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999971940228755	WITHOUT_CLASSIFICATION	2.8059771245117027E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.999998735440805	WITHOUT_CLASSIFICATION	1.264559195037242E-6	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999808829706633	WITHOUT_CLASSIFICATION	1.9117029336701268E-5	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999988582879545	WITHOUT_CLASSIFICATION	1.141712045516248E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999992755865541	WITHOUT_CLASSIFICATION	7.244134458209296E-7	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9998045662388167	WITHOUT_CLASSIFICATION	1.954337611832665E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999988180668361	WITHOUT_CLASSIFICATION	1.1819331639409267E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.999998085266244	WITHOUT_CLASSIFICATION	1.914733756016813E-6	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999995393841817	WITHOUT_CLASSIFICATION	4.6061581828949085E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999408232221	WITHOUT_CLASSIFICATION	5.9176778070917076E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999991708248328	WITHOUT_CLASSIFICATION	8.291751671728905E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999921606490394	WITHOUT_CLASSIFICATION	7.839350960620807E-6	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999994025235077	WITHOUT_CLASSIFICATION	5.974764922054676E-7	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999938177861667	WITHOUT_CLASSIFICATION	6.1822138333030146E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999977566335988	WITHOUT_CLASSIFICATION	2.2433664012080385E-6	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999957030069979	WITHOUT_CLASSIFICATION	4.296993002047815E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999949109122848	WITHOUT_CLASSIFICATION	5.089087715235232E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8951124235434026	WITHOUT_CLASSIFICATION	0.1048875764565975	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999989861780229	WITHOUT_CLASSIFICATION	1.0138219771535903E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.999998882643822	WITHOUT_CLASSIFICATION	1.1173561779659499E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999914681071136	WITHOUT_CLASSIFICATION	8.531892886419986E-6	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999621670107138	WITHOUT_CLASSIFICATION	3.783298928616388E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999988110186353	WITHOUT_CLASSIFICATION	1.1889813646678433E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999877256416961	WITHOUT_CLASSIFICATION	1.227435830391141E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999949555909797	WITHOUT_CLASSIFICATION	5.044409020294051E-6	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999877973976125	WITHOUT_CLASSIFICATION	1.2202602387603047E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999995014036079	WITHOUT_CLASSIFICATION	4.985963919326983E-7	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999978933473019	WITHOUT_CLASSIFICATION	2.1066526980786227E-6	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999995036017578	WITHOUT_CLASSIFICATION	4.963982422191511E-7	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999991475821486	WITHOUT_CLASSIFICATION	8.524178514185764E-7	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999742984184603	WITHOUT_CLASSIFICATION	2.5701581539591212E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999742984184603	WITHOUT_CLASSIFICATION	2.5701581539591212E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999995766648363	WITHOUT_CLASSIFICATION	4.2333516371331843E-7	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999846020936392	WITHOUT_CLASSIFICATION	1.539790636086711E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999982458421497	WITHOUT_CLASSIFICATION	1.7541578502940014E-6	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.999997233127615	WITHOUT_CLASSIFICATION	2.7668723850182335E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999893432205833	WITHOUT_CLASSIFICATION	1.0656779416664023E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.999998815349602	WITHOUT_CLASSIFICATION	1.18465039795127E-6	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9998214192164596	WITHOUT_CLASSIFICATION	1.7858078354027537E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9997466824077889	WITHOUT_CLASSIFICATION	2.533175922111794E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999507193369853	WITHOUT_CLASSIFICATION	4.9280663014619155E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999965104533952	WITHOUT_CLASSIFICATION	3.4895466047289755E-6	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.999958086550099	WITHOUT_CLASSIFICATION	4.191344990103435E-5	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9990823868853422	WITHOUT_CLASSIFICATION	9.176131146577224E-4	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999958534207454	WITHOUT_CLASSIFICATION	4.1465792546048355E-6	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999564833464782	WITHOUT_CLASSIFICATION	4.351665352177472E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999996612472273	WITHOUT_CLASSIFICATION	3.3875277260882207E-7	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999997950604558	WITHOUT_CLASSIFICATION	2.049395443331547E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999403991365	WITHOUT_CLASSIFICATION	5.96008635854431E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999941369507136	WITHOUT_CLASSIFICATION	5.863049286304308E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999971855169149	WITHOUT_CLASSIFICATION	2.8144830851221776E-6	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.999999174257442	WITHOUT_CLASSIFICATION	8.257425580954173E-7	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999998346405417	WITHOUT_CLASSIFICATION	1.6535945830690414E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999995285272731	WITHOUT_CLASSIFICATION	4.71472726916461E-7	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999986809905445	WITHOUT_CLASSIFICATION	1.3190094555739191E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999963866995812	WITHOUT_CLASSIFICATION	3.613300418718232E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999937065422023	WITHOUT_CLASSIFICATION	6.2934577977069855E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999996002818585	WITHOUT_CLASSIFICATION	3.9971814148869493E-7	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999843181456102	WITHOUT_CLASSIFICATION	1.5681854389853362E-5	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999993588482837	WITHOUT_CLASSIFICATION	6.411517161893899E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9997368442995348	WITHOUT_CLASSIFICATION	2.6315570046527026E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9999995723114673	WITHOUT_CLASSIFICATION	4.276885326801698E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999986258151073	WITHOUT_CLASSIFICATION	1.374184892716734E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999998601084081	WITHOUT_CLASSIFICATION	1.3989159178320183E-7	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999975871229315	WITHOUT_CLASSIFICATION	2.412877068590993E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.999971670504143	WITHOUT_CLASSIFICATION	2.8329495856952964E-5	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999878202765403	WITHOUT_CLASSIFICATION	1.2179723459709042E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999997817391788	WITHOUT_CLASSIFICATION	2.182608212481871E-7	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999767288665414	WITHOUT_CLASSIFICATION	2.3271133458591778E-5	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999976711314452	WITHOUT_CLASSIFICATION	2.3288685548057214E-6	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999988479771974	WITHOUT_CLASSIFICATION	1.1520228026228427E-6	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9999999403181971	WITHOUT_CLASSIFICATION	5.968180301331657E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999995038705703	WITHOUT_CLASSIFICATION	4.961294296313589E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999947554785584	WITHOUT_CLASSIFICATION	5.244521441592643E-6	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999947554785584	WITHOUT_CLASSIFICATION	5.244521441592643E-6	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999774930251926	WITHOUT_CLASSIFICATION	2.2506974807335588E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999324474801	WITHOUT_CLASSIFICATION	6.755251995215742E-8	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999977542737235	WITHOUT_CLASSIFICATION	2.245726276460036E-6	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999983717501636	WITHOUT_CLASSIFICATION	1.628249836403548E-6	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999995501991717	WITHOUT_CLASSIFICATION	4.4980082823057847E-7	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999942117939763	WITHOUT_CLASSIFICATION	5.7882060236887405E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9997099845503131	WITHOUT_CLASSIFICATION	2.9001544968688356E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999996082659072	WITHOUT_CLASSIFICATION	3.917340927650089E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999912853994227	WITHOUT_CLASSIFICATION	8.714600577306169E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9999962454355668	WITHOUT_CLASSIFICATION	3.7545644332917208E-6	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999990377174262	WITHOUT_CLASSIFICATION	9.622825739132483E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9996180643209319	WITHOUT_CLASSIFICATION	3.8193567906807425E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999994250451518	WITHOUT_CLASSIFICATION	5.749548481986037E-7	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999349566191	WITHOUT_CLASSIFICATION	6.50433808559941E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9893173266918702	WITHOUT_CLASSIFICATION	0.01068267330812978	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999917202480935	WITHOUT_CLASSIFICATION	8.279751906624443E-6	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999928609415715	WITHOUT_CLASSIFICATION	7.1390584285073545E-6	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999812743335	WITHOUT_CLASSIFICATION	1.8725666535989047E-8	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.6285262052797438	WITHOUT_CLASSIFICATION	0.3714737947202563	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999991703201688	WITHOUT_CLASSIFICATION	8.296798311228299E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999929627029996	WITHOUT_CLASSIFICATION	7.037297000310027E-6	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999996869236751	WITHOUT_CLASSIFICATION	3.130763247979242E-7	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999999335227908	WITHOUT_CLASSIFICATION	6.647720919426915E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999326824785537	WITHOUT_CLASSIFICATION	6.731752144618744E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999751453602707	WITHOUT_CLASSIFICATION	2.4854639729320654E-5	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999998555663889	WITHOUT_CLASSIFICATION	1.4443361117457595E-7	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999936092991031	WITHOUT_CLASSIFICATION	6.3907008968247834E-6	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999993768710952	WITHOUT_CLASSIFICATION	6.231289047541587E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999942779357962	WITHOUT_CLASSIFICATION	5.7220642037799595E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999994521026635	WITHOUT_CLASSIFICATION	5.47897336469824E-7	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999995781798767	WITHOUT_CLASSIFICATION	4.218201232614735E-7	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999942779357962	WITHOUT_CLASSIFICATION	5.7220642037799595E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999706375413314	WITHOUT_CLASSIFICATION	2.9362458668582544E-5	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9999977238560281	WITHOUT_CLASSIFICATION	2.2761439718760972E-6	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9991225739522975	WITHOUT_CLASSIFICATION	8.7742604770243E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.7190671702355286	DEFECT	0.28093282976447137	WITHOUT_CLASSIFICATION
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999835173047639	WITHOUT_CLASSIFICATION	1.648269523607103E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.999998958676992	WITHOUT_CLASSIFICATION	1.0413230080601801E-6	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999989599890089	WITHOUT_CLASSIFICATION	1.040010991073403E-6	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999857500644596	WITHOUT_CLASSIFICATION	1.4249935540356001E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9999983958589658	WITHOUT_CLASSIFICATION	1.6041410342563262E-6	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999949109122848	WITHOUT_CLASSIFICATION	5.089087715235232E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999998986818087	WITHOUT_CLASSIFICATION	1.0131819132783235E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999344618918729	WITHOUT_CLASSIFICATION	6.553810812715017E-5	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999998111818915	WITHOUT_CLASSIFICATION	1.8881810855920645E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999997575418279	WITHOUT_CLASSIFICATION	2.42458172110713E-7	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999655075576808	WITHOUT_CLASSIFICATION	3.449244231932914E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999992069349628	WITHOUT_CLASSIFICATION	7.930650372485498E-7	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9995602780772516	WITHOUT_CLASSIFICATION	4.3972192274848625E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999984395106837	WITHOUT_CLASSIFICATION	1.560489316327797E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9999941960217075	WITHOUT_CLASSIFICATION	5.8039782925651415E-6	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.999991001075867	WITHOUT_CLASSIFICATION	8.998924132963502E-6	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999983940586357	WITHOUT_CLASSIFICATION	1.6059413642971992E-6	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.99999288586567	WITHOUT_CLASSIFICATION	7.114134329966962E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999991237793593	WITHOUT_CLASSIFICATION	8.762206407953815E-7	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999996081872697	WITHOUT_CLASSIFICATION	3.918127302409814E-7	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999917551094197	WITHOUT_CLASSIFICATION	8.24489058019688E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999945483846808	WITHOUT_CLASSIFICATION	5.45161531915959E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999947260249511	WITHOUT_CLASSIFICATION	5.2739750489343594E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.999998396783721	WITHOUT_CLASSIFICATION	1.6032162789496513E-6	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999998173511659	WITHOUT_CLASSIFICATION	1.8264883412091243E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999727206688734	WITHOUT_CLASSIFICATION	2.72793311265945E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999727206688734	WITHOUT_CLASSIFICATION	2.72793311265945E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999923534164006	WITHOUT_CLASSIFICATION	7.646583599294446E-6	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999999825999982	WITHOUT_CLASSIFICATION	1.7400001718666167E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999684774321	WITHOUT_CLASSIFICATION	3.152256786268447E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999991521715628	WITHOUT_CLASSIFICATION	8.478284373076701E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999999337029896	WITHOUT_CLASSIFICATION	6.629701039681461E-7	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999983251887182	WITHOUT_CLASSIFICATION	1.6748112818123923E-6	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.8988028680095137	WITHOUT_CLASSIFICATION	0.10119713199048637	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999991187982494	WITHOUT_CLASSIFICATION	8.812017504976029E-7	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999910201583624	WITHOUT_CLASSIFICATION	8.979841637606611E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999995672375812	WITHOUT_CLASSIFICATION	4.327624187978094E-6	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999995672375812	WITHOUT_CLASSIFICATION	4.327624187978094E-6	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.99999340101644	WITHOUT_CLASSIFICATION	6.598983560069237E-6	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.999983026529192	WITHOUT_CLASSIFICATION	1.697347080796223E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999267490405913	WITHOUT_CLASSIFICATION	7.325095940878602E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9999842861053115	WITHOUT_CLASSIFICATION	1.571389468845145E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999980115100612	WITHOUT_CLASSIFICATION	1.9884899387301532E-6	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999998871723434	WITHOUT_CLASSIFICATION	1.1282765663751266E-7	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.999997365599806	WITHOUT_CLASSIFICATION	2.63440019401995E-6	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.999984635150343	WITHOUT_CLASSIFICATION	1.536484965709799E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999814454683517	WITHOUT_CLASSIFICATION	1.8554531648363827E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999995781798767	WITHOUT_CLASSIFICATION	4.218201232614735E-7	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999938974091188	WITHOUT_CLASSIFICATION	6.102590881115545E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999935996770589	WITHOUT_CLASSIFICATION	6.400322940957917E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999938517915206	WITHOUT_CLASSIFICATION	6.148208479442505E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.999999858008696	WITHOUT_CLASSIFICATION	1.4199130397633118E-7	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999756125191718	WITHOUT_CLASSIFICATION	2.4387480828227574E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999997258219846	WITHOUT_CLASSIFICATION	2.7417801539774394E-7	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999977040771875	WITHOUT_CLASSIFICATION	2.295922812543089E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999938861055194	WITHOUT_CLASSIFICATION	6.11389448058806E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999938861055194	WITHOUT_CLASSIFICATION	6.11389448058806E-6	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.999966503846097	WITHOUT_CLASSIFICATION	3.349615390308097E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999393162168	WITHOUT_CLASSIFICATION	6.06837832386721E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999710875944505	WITHOUT_CLASSIFICATION	2.8912405549427177E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999837369495688	WITHOUT_CLASSIFICATION	1.6263050431182952E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999946253590587	WITHOUT_CLASSIFICATION	5.374640941386036E-6	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9999843930296806	WITHOUT_CLASSIFICATION	1.560697031941173E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999958698020112	WITHOUT_CLASSIFICATION	4.130197988860586E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998787399115	WITHOUT_CLASSIFICATION	1.212600885690793E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998787399115	WITHOUT_CLASSIFICATION	1.212600885690793E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998787399115	WITHOUT_CLASSIFICATION	1.212600885690793E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999998787399115	WITHOUT_CLASSIFICATION	1.212600885690793E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999879954509464	WITHOUT_CLASSIFICATION	1.2004549053664949E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9998680714790006	WITHOUT_CLASSIFICATION	1.3192852099937734E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999983978795427	WITHOUT_CLASSIFICATION	1.6021204573016575E-6	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999696576488815	WITHOUT_CLASSIFICATION	3.0342351118609196E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999988934991647	WITHOUT_CLASSIFICATION	1.1065008352986105E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9999818123203159	WITHOUT_CLASSIFICATION	1.8187679684129597E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999987716312496	WITHOUT_CLASSIFICATION	1.2283687504472062E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999999653348023	WITHOUT_CLASSIFICATION	3.4665197696571875E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999829000028043	WITHOUT_CLASSIFICATION	1.709999719569804E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999996678030851	WITHOUT_CLASSIFICATION	3.3219691477125246E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999944090790002	WITHOUT_CLASSIFICATION	5.590920999791871E-6	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999944090790002	WITHOUT_CLASSIFICATION	5.590920999791871E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999934222128792	WITHOUT_CLASSIFICATION	6.577787120819281E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999998225777175	WITHOUT_CLASSIFICATION	1.7742228258912783E-7	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999594614793	WITHOUT_CLASSIFICATION	4.053852072679032E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999787164726893	WITHOUT_CLASSIFICATION	2.1283527310619617E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9998729367376118	WITHOUT_CLASSIFICATION	1.2706326238821393E-4	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999992482610732	WITHOUT_CLASSIFICATION	7.517389268054876E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999976583572367	WITHOUT_CLASSIFICATION	2.3416427633056252E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.999976583572367	WITHOUT_CLASSIFICATION	2.3416427633056252E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999988241619279	WITHOUT_CLASSIFICATION	1.1758380722208296E-6	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.999943922314682	WITHOUT_CLASSIFICATION	5.607768531796624E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.999746786761527	WITHOUT_CLASSIFICATION	2.5321323847297375E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999855927031919	WITHOUT_CLASSIFICATION	1.440729680805718E-5	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999953861316925	WITHOUT_CLASSIFICATION	4.613868307535847E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.999999455871204	WITHOUT_CLASSIFICATION	5.441287961206173E-7	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999985363305655	WITHOUT_CLASSIFICATION	1.4636694344912977E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999781806930556	WITHOUT_CLASSIFICATION	2.1819306944477806E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9999736306533776	WITHOUT_CLASSIFICATION	2.6369346622394098E-5	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999949052449761	WITHOUT_CLASSIFICATION	5.09475502382641E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999966762739478	WITHOUT_CLASSIFICATION	3.3237260520443524E-6	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999969548184481	WITHOUT_CLASSIFICATION	3.0451815519632346E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998740657382589	WITHOUT_CLASSIFICATION	1.2593426174108927E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999800332984199	WITHOUT_CLASSIFICATION	1.9966701580028144E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998424992592	WITHOUT_CLASSIFICATION	1.575007407484477E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9998650068423749	WITHOUT_CLASSIFICATION	1.3499315762509928E-4	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999995035782122	WITHOUT_CLASSIFICATION	4.964217877967355E-7	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999994162059146	WITHOUT_CLASSIFICATION	5.837940853503092E-7	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999948081432939	WITHOUT_CLASSIFICATION	5.191856706108834E-6	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999903574485856	WITHOUT_CLASSIFICATION	9.642551414486185E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999917632278533	WITHOUT_CLASSIFICATION	8.236772146673601E-6	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999920122549816	WITHOUT_CLASSIFICATION	7.987745018439522E-6	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.999988449110635	WITHOUT_CLASSIFICATION	1.155088936497394E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.999997137516007	WITHOUT_CLASSIFICATION	2.8624839928719125E-6	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999771116684275	WITHOUT_CLASSIFICATION	2.2888331572511352E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999968770736261	WITHOUT_CLASSIFICATION	3.122926374011742E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9990561138064261	WITHOUT_CLASSIFICATION	9.438861935737791E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999894576888565	WITHOUT_CLASSIFICATION	1.0542311143459032E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999994306567785	WITHOUT_CLASSIFICATION	5.693432213962857E-7	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999974168361777	WITHOUT_CLASSIFICATION	2.583163822244018E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999462332051	WITHOUT_CLASSIFICATION	5.376679491868915E-8	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999196036755557	WITHOUT_CLASSIFICATION	8.039632444442333E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999945880809945	WITHOUT_CLASSIFICATION	5.411919005582434E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999985218880364	WITHOUT_CLASSIFICATION	1.478111963535413E-6	DEFECT
// read	WITHOUT_CLASSIFICATION	0.999998359244349	WITHOUT_CLASSIFICATION	1.640755651027974E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9998703464505785	WITHOUT_CLASSIFICATION	1.296535494214415E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999958279241953	WITHOUT_CLASSIFICATION	4.172075804726208E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999997939831137	WITHOUT_CLASSIFICATION	2.0601688629688415E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999932165191342	WITHOUT_CLASSIFICATION	6.783480865749692E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999996945487956	WITHOUT_CLASSIFICATION	3.0545120439695943E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999927732359546	WITHOUT_CLASSIFICATION	7.2267640454375085E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.999986812534495	WITHOUT_CLASSIFICATION	1.3187465505076457E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.999859661152878	WITHOUT_CLASSIFICATION	1.4033884712197125E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999947221851476	WITHOUT_CLASSIFICATION	5.27781485236043E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999996431459568	WITHOUT_CLASSIFICATION	3.568540432703887E-7	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999981182918508	WITHOUT_CLASSIFICATION	1.8817081490906464E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837398075615	WITHOUT_CLASSIFICATION	1.626019243845205E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999837398075615	WITHOUT_CLASSIFICATION	1.626019243845205E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.999991817189484	WITHOUT_CLASSIFICATION	8.182810515947151E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999965756309123	WITHOUT_CLASSIFICATION	3.424369087801491E-6	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999973259013711	WITHOUT_CLASSIFICATION	2.67409862881282E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9999992558079565	WITHOUT_CLASSIFICATION	7.44192043464346E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999966305583426	WITHOUT_CLASSIFICATION	3.369441657332082E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999966305583426	WITHOUT_CLASSIFICATION	3.369441657332082E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.999987001378921	WITHOUT_CLASSIFICATION	1.2998621078928824E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999893338025583	WITHOUT_CLASSIFICATION	1.0666197441722427E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999982046248367	WITHOUT_CLASSIFICATION	1.795375163213264E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999858126216536	WITHOUT_CLASSIFICATION	1.4187378346310444E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999996675077698	WITHOUT_CLASSIFICATION	3.3249223024593323E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999973022949343	WITHOUT_CLASSIFICATION	2.697705065657814E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999973022949343	WITHOUT_CLASSIFICATION	2.697705065657814E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999983914631377	WITHOUT_CLASSIFICATION	1.6085368622420056E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999983914631377	WITHOUT_CLASSIFICATION	1.6085368622420056E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999999614219923	WITHOUT_CLASSIFICATION	3.8578007721016324E-8	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999998061838853	WITHOUT_CLASSIFICATION	1.9381611459941542E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999914925473099	WITHOUT_CLASSIFICATION	8.507452690155078E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999962606100622	WITHOUT_CLASSIFICATION	3.7393899377604107E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999889968192391	WITHOUT_CLASSIFICATION	1.1003180760902633E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999884633440483	WITHOUT_CLASSIFICATION	1.1536655951705616E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999997266873136	WITHOUT_CLASSIFICATION	2.7331268640767776E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999965047447612	WITHOUT_CLASSIFICATION	3.4952552388914957E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999950776292347	WITHOUT_CLASSIFICATION	4.922370765260888E-6	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999998403283812	WITHOUT_CLASSIFICATION	1.5967161883679385E-7	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9423010857450639	WITHOUT_CLASSIFICATION	0.0576989142549361	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999298414864617	WITHOUT_CLASSIFICATION	7.0158513538286E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999993546187527	WITHOUT_CLASSIFICATION	6.453812473953029E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999994187646707	WITHOUT_CLASSIFICATION	5.812353293561021E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999995515003932	WITHOUT_CLASSIFICATION	4.484996067605223E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999982921485181	WITHOUT_CLASSIFICATION	1.7078514819413823E-6	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999874381188736	WITHOUT_CLASSIFICATION	1.2561881126511671E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9999999235300272	WITHOUT_CLASSIFICATION	7.646997281619175E-8	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999973950075575	WITHOUT_CLASSIFICATION	2.604992442617307E-6	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999932268252563	WITHOUT_CLASSIFICATION	6.773174743729018E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9999344618918729	WITHOUT_CLASSIFICATION	6.553810812715017E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.99997677381155	WITHOUT_CLASSIFICATION	2.3226188449912123E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999997062322015	WITHOUT_CLASSIFICATION	2.937677985210378E-7	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999916983932271	WITHOUT_CLASSIFICATION	8.30160677301727E-6	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999998191740901	WITHOUT_CLASSIFICATION	1.8082590988815904E-7	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999932617950278	WITHOUT_CLASSIFICATION	6.738204972111105E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999900584356457	WITHOUT_CLASSIFICATION	9.941564354332247E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999994141865547	WITHOUT_CLASSIFICATION	5.858134453101058E-7	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999993619483776	WITHOUT_CLASSIFICATION	6.380516223720537E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999999897143833	WITHOUT_CLASSIFICATION	1.0285616599259103E-8	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999995451770521	WITHOUT_CLASSIFICATION	4.5482294779305746E-7	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999990996161281	WITHOUT_CLASSIFICATION	9.003838719245135E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999840315935886	WITHOUT_CLASSIFICATION	1.5968406411456992E-5	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999855037671	WITHOUT_CLASSIFICATION	1.449623290028419E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999995187615411	WITHOUT_CLASSIFICATION	4.812384588861495E-7	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999747118341298	WITHOUT_CLASSIFICATION	2.5288165870285012E-5	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999245454929	WITHOUT_CLASSIFICATION	7.545450704265258E-8	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999998181067117	WITHOUT_CLASSIFICATION	1.8189328833874895E-7	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999936819599462	WITHOUT_CLASSIFICATION	6.318040053793863E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9999903632253359	WITHOUT_CLASSIFICATION	9.63677466407215E-6	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.999999852429652	WITHOUT_CLASSIFICATION	1.4757034812209473E-7	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999964011231022	WITHOUT_CLASSIFICATION	3.5988768977997252E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999805819510832	WITHOUT_CLASSIFICATION	1.941804891686745E-5	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999947092527569	WITHOUT_CLASSIFICATION	5.290747243090736E-6	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9992247403557467	WITHOUT_CLASSIFICATION	7.752596442533501E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.999997845917845	WITHOUT_CLASSIFICATION	2.1540821549624646E-6	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999995510783788	WITHOUT_CLASSIFICATION	4.4892162130669997E-7	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999985906945	WITHOUT_CLASSIFICATION	1.4093053937478572E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9999990107957134	WITHOUT_CLASSIFICATION	9.89204286592421E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999556369930702	WITHOUT_CLASSIFICATION	4.436300692980382E-5	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9994065711621181	WITHOUT_CLASSIFICATION	5.934288378819157E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999970512981461	WITHOUT_CLASSIFICATION	2.9487018538000176E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999970512981461	WITHOUT_CLASSIFICATION	2.9487018538000176E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999975602916851	WITHOUT_CLASSIFICATION	2.439708314966757E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999975602916851	WITHOUT_CLASSIFICATION	2.439708314966757E-6	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999617033968812	WITHOUT_CLASSIFICATION	3.8296603118835514E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999617033968812	WITHOUT_CLASSIFICATION	3.8296603118835514E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999815850247153	WITHOUT_CLASSIFICATION	1.841497528464113E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999815850247153	WITHOUT_CLASSIFICATION	1.841497528464113E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999997999240199	WITHOUT_CLASSIFICATION	2.0007598008894704E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999998044186744	WITHOUT_CLASSIFICATION	1.9558132559751775E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999998044186744	WITHOUT_CLASSIFICATION	1.9558132559751775E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999998044186744	WITHOUT_CLASSIFICATION	1.9558132559751775E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999875158697419	WITHOUT_CLASSIFICATION	1.2484130258144565E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999899957585212	WITHOUT_CLASSIFICATION	1.0004241478812328E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999841334248039	WITHOUT_CLASSIFICATION	1.5866575196179434E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999841334248039	WITHOUT_CLASSIFICATION	1.5866575196179434E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999841334248039	WITHOUT_CLASSIFICATION	1.5866575196179434E-5	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999682216686353	WITHOUT_CLASSIFICATION	3.177833136465929E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999978527143715	WITHOUT_CLASSIFICATION	2.147285628457989E-6	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999592889692541	WITHOUT_CLASSIFICATION	4.0711030745908075E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999565223993058	WITHOUT_CLASSIFICATION	4.347760069420079E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999934126821165	WITHOUT_CLASSIFICATION	6.587317883509997E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999921606671327	WITHOUT_CLASSIFICATION	7.839332867380089E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999921606671327	WITHOUT_CLASSIFICATION	7.839332867380089E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999927521216039	WITHOUT_CLASSIFICATION	7.247878396110703E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999845648184594	WITHOUT_CLASSIFICATION	1.5435181540520888E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999845648184594	WITHOUT_CLASSIFICATION	1.5435181540520888E-5	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.9915634680706588	DEFECT	0.008436531929341235	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999969434624882	WITHOUT_CLASSIFICATION	3.0565375117605294E-6	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999936554488439	WITHOUT_CLASSIFICATION	6.3445511561779325E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999955848034273	WITHOUT_CLASSIFICATION	4.415196572747378E-6	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.999991476569313	WITHOUT_CLASSIFICATION	8.523430687050817E-6	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999964761962307	WITHOUT_CLASSIFICATION	3.5238037694043494E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9892770044992966	WITHOUT_CLASSIFICATION	0.01072299550070335	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.99892136783016	WITHOUT_CLASSIFICATION	0.0010786321698400912	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999907526555383	WITHOUT_CLASSIFICATION	9.247344461653726E-6	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999986684899532	WITHOUT_CLASSIFICATION	1.3315100467848011E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999861579345194	WITHOUT_CLASSIFICATION	1.3842065480575483E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.999998676552368	WITHOUT_CLASSIFICATION	1.323447632075956E-6	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999977464140589	WITHOUT_CLASSIFICATION	2.2535859411652697E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999908107925141	WITHOUT_CLASSIFICATION	9.189207485939254E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999990638456692	WITHOUT_CLASSIFICATION	9.361543308925009E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9999165409630489	WITHOUT_CLASSIFICATION	8.345903695107828E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9999170807367727	WITHOUT_CLASSIFICATION	8.291926322740076E-5	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999993304549527	WITHOUT_CLASSIFICATION	6.695450473374833E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999995265891882	WITHOUT_CLASSIFICATION	4.7341081173129006E-7	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999970173000282	WITHOUT_CLASSIFICATION	2.9826999718845665E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9999929627029996	WITHOUT_CLASSIFICATION	7.037297000310027E-6	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999809285942806	WITHOUT_CLASSIFICATION	1.9071405719445464E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999998713147369	WITHOUT_CLASSIFICATION	1.2868526300015524E-7	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999907320745529	WITHOUT_CLASSIFICATION	9.267925447088474E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999235036030533	WITHOUT_CLASSIFICATION	7.649639694673164E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999997645724598	WITHOUT_CLASSIFICATION	2.3542754027177442E-7	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999999920089644	WITHOUT_CLASSIFICATION	7.991035637897927E-9	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999907602554172	WITHOUT_CLASSIFICATION	9.239744582827092E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999995159114627	WITHOUT_CLASSIFICATION	4.840885372128504E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999998548717701	WITHOUT_CLASSIFICATION	1.4512822995429856E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999975994752859	WITHOUT_CLASSIFICATION	2.4005247141266846E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999912853994227	WITHOUT_CLASSIFICATION	8.714600577306169E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999993994989337	WITHOUT_CLASSIFICATION	6.005010662844819E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999993994989337	WITHOUT_CLASSIFICATION	6.005010662844819E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999993994989337	WITHOUT_CLASSIFICATION	6.005010662844819E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.999993994989337	WITHOUT_CLASSIFICATION	6.005010662844819E-6	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999981145843728	WITHOUT_CLASSIFICATION	1.8854156271823417E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9999984605587502	WITHOUT_CLASSIFICATION	1.5394412497933377E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999984322291513	WITHOUT_CLASSIFICATION	1.5677708486689387E-6	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999984322291513	WITHOUT_CLASSIFICATION	1.5677708486689387E-6	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999999875743285	WITHOUT_CLASSIFICATION	1.2425671505535117E-7	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999776813908413	WITHOUT_CLASSIFICATION	2.2318609158591928E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999716533831	WITHOUT_CLASSIFICATION	2.8346616932946178E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999985984571601	WITHOUT_CLASSIFICATION	1.4015428399296637E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999650891298723	WITHOUT_CLASSIFICATION	3.4910870127687516E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999950919717141	WITHOUT_CLASSIFICATION	4.908028285990758E-6	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999974182881788	WITHOUT_CLASSIFICATION	2.581711821199377E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999912053317384	WITHOUT_CLASSIFICATION	8.794668261629776E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999912053317384	WITHOUT_CLASSIFICATION	8.794668261629776E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999912053317384	WITHOUT_CLASSIFICATION	8.794668261629776E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999912053317384	WITHOUT_CLASSIFICATION	8.794668261629776E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999037299008536	WITHOUT_CLASSIFICATION	9.627009914632861E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999993858175618	WITHOUT_CLASSIFICATION	6.141824381861424E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999993858175618	WITHOUT_CLASSIFICATION	6.141824381861424E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.999993858175618	WITHOUT_CLASSIFICATION	6.141824381861424E-6	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999994232303001	WITHOUT_CLASSIFICATION	5.767696997978641E-7	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.999965419524511	WITHOUT_CLASSIFICATION	3.458047548907988E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999997148568495	WITHOUT_CLASSIFICATION	2.851431505928647E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999999694090019	WITHOUT_CLASSIFICATION	3.059099806823841E-8	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999633681081727	WITHOUT_CLASSIFICATION	3.663189182733447E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999929708588241	WITHOUT_CLASSIFICATION	7.029141175900402E-6	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999929708588241	WITHOUT_CLASSIFICATION	7.029141175900402E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999697255058	WITHOUT_CLASSIFICATION	3.027449431349109E-8	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999999697255058	WITHOUT_CLASSIFICATION	3.027449431349109E-8	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999997908479968	WITHOUT_CLASSIFICATION	2.0915200324184636E-7	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999997154860915	WITHOUT_CLASSIFICATION	2.8451390852459237E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999998974515952	WITHOUT_CLASSIFICATION	1.0254840470091155E-7	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999999553746316	WITHOUT_CLASSIFICATION	4.4625368357413284E-8	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999829949745453	WITHOUT_CLASSIFICATION	1.7005025454604567E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999216567296	WITHOUT_CLASSIFICATION	7.834327044221849E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999998704177016	WITHOUT_CLASSIFICATION	1.295822984045149E-7	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999901956954638	WITHOUT_CLASSIFICATION	9.804304536268005E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.99999763560031	WITHOUT_CLASSIFICATION	2.3643996901200594E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999527937556	WITHOUT_CLASSIFICATION	4.7206244437484455E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999527937556	WITHOUT_CLASSIFICATION	4.7206244437484455E-8	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999989992338099	WITHOUT_CLASSIFICATION	1.0007661901823605E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999989992338099	WITHOUT_CLASSIFICATION	1.0007661901823605E-6	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999958509518224	WITHOUT_CLASSIFICATION	4.149048177520857E-6	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995529307102	WITHOUT_CLASSIFICATION	4.470692898805348E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999848339099265	WITHOUT_CLASSIFICATION	1.516609007351415E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794719665288	WITHOUT_CLASSIFICATION	2.05280334711785E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794719665288	WITHOUT_CLASSIFICATION	2.05280334711785E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999794719665288	WITHOUT_CLASSIFICATION	2.05280334711785E-5	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999958603927679	WITHOUT_CLASSIFICATION	4.139607232078979E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999931848995457	WITHOUT_CLASSIFICATION	6.815100454321724E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999949568086732	WITHOUT_CLASSIFICATION	5.043191326734715E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999956206538133	WITHOUT_CLASSIFICATION	4.379346186628315E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999941402724155	WITHOUT_CLASSIFICATION	5.859727584592958E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999941886615058	WITHOUT_CLASSIFICATION	5.811338494206543E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999951820172142	WITHOUT_CLASSIFICATION	4.817982785867537E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999992718364507	WITHOUT_CLASSIFICATION	7.28163549315601E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9998584536459161	WITHOUT_CLASSIFICATION	1.4154635408395968E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9999963756258823	WITHOUT_CLASSIFICATION	3.6243741178512524E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9991520721476017	WITHOUT_CLASSIFICATION	8.479278523983515E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999975274435884	WITHOUT_CLASSIFICATION	2.4725564115989554E-6	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999994760154634	WITHOUT_CLASSIFICATION	5.239845367477639E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.6644224131076015	WITHOUT_CLASSIFICATION	0.33557758689239847	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999999754251825	WITHOUT_CLASSIFICATION	2.4574817559034014E-8	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999993963940333	WITHOUT_CLASSIFICATION	6.036059667324789E-7	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999727206688734	WITHOUT_CLASSIFICATION	2.72793311265945E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999835227137552	WITHOUT_CLASSIFICATION	1.647728624470315E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999563760278057	WITHOUT_CLASSIFICATION	4.362397219421903E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999997831348245	WITHOUT_CLASSIFICATION	2.1686517561479134E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999932314673641	WITHOUT_CLASSIFICATION	6.768532636046226E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9999977062116604	WITHOUT_CLASSIFICATION	2.293788339612986E-6	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9997791818541869	WITHOUT_CLASSIFICATION	2.208181458131246E-4	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999646442259917	WITHOUT_CLASSIFICATION	3.535577400814896E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999646942937699	WITHOUT_CLASSIFICATION	3.530570623006055E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999997051253253	WITHOUT_CLASSIFICATION	2.9487467462104673E-7	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999945277730979	WITHOUT_CLASSIFICATION	5.472226902137025E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999952738794922	WITHOUT_CLASSIFICATION	4.726120507728612E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999952738794922	WITHOUT_CLASSIFICATION	4.726120507728612E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999945152313109	WITHOUT_CLASSIFICATION	5.4847686890614055E-6	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999929926540644	WITHOUT_CLASSIFICATION	7.007345935616124E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999994803739252	WITHOUT_CLASSIFICATION	5.196260748076256E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999947098741951	WITHOUT_CLASSIFICATION	5.290125804928171E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999948490390117	WITHOUT_CLASSIFICATION	5.150960988359057E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999932082879014	WITHOUT_CLASSIFICATION	6.791712098636607E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999936584579672	WITHOUT_CLASSIFICATION	6.341542032877937E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999951795790408	WITHOUT_CLASSIFICATION	4.820420959106032E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999931556088377	WITHOUT_CLASSIFICATION	6.844391162256633E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999967602406187	WITHOUT_CLASSIFICATION	3.2397593812265655E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999996443261939	WITHOUT_CLASSIFICATION	3.556738060911341E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999957095097435	WITHOUT_CLASSIFICATION	4.2904902566130825E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999955141055812	WITHOUT_CLASSIFICATION	4.4858944188696E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999947067143511	WITHOUT_CLASSIFICATION	5.293285648962445E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999944095680586	WITHOUT_CLASSIFICATION	5.5904319414459235E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999950758699562	WITHOUT_CLASSIFICATION	4.924130043908325E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999995106551751	WITHOUT_CLASSIFICATION	4.8934482491096065E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999952629343892	WITHOUT_CLASSIFICATION	4.737065610761315E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999949622882685	WITHOUT_CLASSIFICATION	5.037711731525324E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999946242539401	WITHOUT_CLASSIFICATION	5.375746059871734E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999949805259322	WITHOUT_CLASSIFICATION	5.019474067864562E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999939072327548	WITHOUT_CLASSIFICATION	6.0927672451567985E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999946235100412	WITHOUT_CLASSIFICATION	5.376489958897063E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999958463013198	WITHOUT_CLASSIFICATION	4.15369868030331E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999957715087444	WITHOUT_CLASSIFICATION	4.228491255534606E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999965830180079	WITHOUT_CLASSIFICATION	3.4169819921471613E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999950947450267	WITHOUT_CLASSIFICATION	4.905254973365375E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999963574033995	WITHOUT_CLASSIFICATION	3.6425966005534382E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999948149227978	WITHOUT_CLASSIFICATION	5.1850772021887806E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999955110054004	WITHOUT_CLASSIFICATION	4.488994599610586E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999951415273115	WITHOUT_CLASSIFICATION	4.858472688530241E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999945536229158	WITHOUT_CLASSIFICATION	5.446377084294508E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999938350221693	WITHOUT_CLASSIFICATION	6.164977830592268E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999941947469847	WITHOUT_CLASSIFICATION	5.805253015310215E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999958922766914	WITHOUT_CLASSIFICATION	4.107723308645715E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999963287712209	WITHOUT_CLASSIFICATION	3.6712287791480503E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999949766856183	WITHOUT_CLASSIFICATION	5.023314381669076E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999945855189346	WITHOUT_CLASSIFICATION	5.414481065396195E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.999995733348513	WITHOUT_CLASSIFICATION	4.266651487048747E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999946723065898	WITHOUT_CLASSIFICATION	5.32769341017446E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999952469311031	WITHOUT_CLASSIFICATION	4.753068897008674E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964505627434	WITHOUT_CLASSIFICATION	3.549437256667002E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999951175706487	WITHOUT_CLASSIFICATION	4.882429351257147E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999939060215558	WITHOUT_CLASSIFICATION	6.09397844420089E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999956111016168	WITHOUT_CLASSIFICATION	4.38889838319303E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999994933612504	WITHOUT_CLASSIFICATION	5.066387495899565E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999928512333907	WITHOUT_CLASSIFICATION	7.148766609359472E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999932318545723	WITHOUT_CLASSIFICATION	6.768145427568899E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999941910879686	WITHOUT_CLASSIFICATION	5.808912031343153E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999939970710248	WITHOUT_CLASSIFICATION	6.002928975342994E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999994741994708	WITHOUT_CLASSIFICATION	5.25800529199671E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999939208184027	WITHOUT_CLASSIFICATION	6.0791815973171954E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999957184914825	WITHOUT_CLASSIFICATION	4.281508517544385E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999942913578149	WITHOUT_CLASSIFICATION	5.708642185014708E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999942913578149	WITHOUT_CLASSIFICATION	5.708642185014708E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999938565458274	WITHOUT_CLASSIFICATION	6.143454172605346E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999961259116975	WITHOUT_CLASSIFICATION	3.874088302393848E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999940801456353	WITHOUT_CLASSIFICATION	5.919854364745307E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999944890662594	WITHOUT_CLASSIFICATION	5.510933740564944E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999952790204443	WITHOUT_CLASSIFICATION	4.720979555719735E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999961218845461	WITHOUT_CLASSIFICATION	3.878115453952261E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999938741466484	WITHOUT_CLASSIFICATION	6.125853351564631E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999933564106496	WITHOUT_CLASSIFICATION	6.6435893504071255E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999948185482388	WITHOUT_CLASSIFICATION	5.181451761261893E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999956424204252	WITHOUT_CLASSIFICATION	4.357579574804326E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999827892395603	WITHOUT_CLASSIFICATION	1.7210760439729757E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999827892395603	WITHOUT_CLASSIFICATION	1.7210760439729757E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999978234257266	WITHOUT_CLASSIFICATION	2.1765742734685784E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9999458184211099	WITHOUT_CLASSIFICATION	5.418157889026738E-5	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9999757266098236	WITHOUT_CLASSIFICATION	2.4273390176422783E-5	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999998970368518	WITHOUT_CLASSIFICATION	1.0296314822806925E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999961500044131	WITHOUT_CLASSIFICATION	3.84999558694261E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9777847681758335	WITHOUT_CLASSIFICATION	0.022215231824166497	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9999977317182202	WITHOUT_CLASSIFICATION	2.268281779783689E-6	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.999995375827765	WITHOUT_CLASSIFICATION	4.624172234990232E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.999994856798959	WITHOUT_CLASSIFICATION	5.143201040871506E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999952879029924	WITHOUT_CLASSIFICATION	4.7120970076359735E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999947801526934	WITHOUT_CLASSIFICATION	5.219847306660033E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999949125606417	WITHOUT_CLASSIFICATION	5.087439358395872E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999942807135986	WITHOUT_CLASSIFICATION	5.7192864013677645E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9999959383287319	WITHOUT_CLASSIFICATION	4.0616712680790705E-6	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999950729319463	WITHOUT_CLASSIFICATION	4.927068053667834E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999942452634624	WITHOUT_CLASSIFICATION	5.754736537701026E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999957530978836	WITHOUT_CLASSIFICATION	4.246902116327574E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999948727082495	WITHOUT_CLASSIFICATION	5.127291750559643E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.99999411369935	WITHOUT_CLASSIFICATION	5.886300649951477E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999993885967709	WITHOUT_CLASSIFICATION	6.114032290999372E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999949248275355	WITHOUT_CLASSIFICATION	5.075172464577877E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999936552452063	WITHOUT_CLASSIFICATION	6.344754793604259E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999956166000857	WITHOUT_CLASSIFICATION	4.383399914312234E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.99999589173098	WITHOUT_CLASSIFICATION	4.108269019993416E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999946155064874	WITHOUT_CLASSIFICATION	5.3844935126494355E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999956844288778	WITHOUT_CLASSIFICATION	4.315571122181988E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999951361540375	WITHOUT_CLASSIFICATION	4.86384596248668E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999947269814453	WITHOUT_CLASSIFICATION	5.27301855471299E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999951873096142	WITHOUT_CLASSIFICATION	4.812690385825208E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999942075103277	WITHOUT_CLASSIFICATION	5.792489672260202E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999949533124605	WITHOUT_CLASSIFICATION	5.0466875396354154E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.999995956699967	WITHOUT_CLASSIFICATION	4.043300033010687E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.999996510972477	WITHOUT_CLASSIFICATION	3.4890275231570848E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999964883378996	WITHOUT_CLASSIFICATION	3.511662100445867E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999943830924898	WITHOUT_CLASSIFICATION	5.6169075102028744E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999995345720178	WITHOUT_CLASSIFICATION	4.6542798220091746E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999950287121199	WITHOUT_CLASSIFICATION	4.971287880103813E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999933939072431	WITHOUT_CLASSIFICATION	6.606092756988519E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999944432198922	WITHOUT_CLASSIFICATION	5.5567801078495595E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999955307058235	WITHOUT_CLASSIFICATION	4.469294176568907E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999954783396219	WITHOUT_CLASSIFICATION	4.521660378063451E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999940776721273	WITHOUT_CLASSIFICATION	5.922327872689641E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999944362364204	WITHOUT_CLASSIFICATION	5.563763579629776E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999949003588703	WITHOUT_CLASSIFICATION	5.099641129806684E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.999994388847392	WITHOUT_CLASSIFICATION	5.611152607987827E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999957869354514	WITHOUT_CLASSIFICATION	4.213064548588945E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999935521353874	WITHOUT_CLASSIFICATION	6.447864612520564E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999929427531347	WITHOUT_CLASSIFICATION	7.0572468652792905E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999943745244747	WITHOUT_CLASSIFICATION	5.625475525300085E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999952878471469	WITHOUT_CLASSIFICATION	4.712152853137274E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999957030280097	WITHOUT_CLASSIFICATION	4.296971990405045E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999927430166282	WITHOUT_CLASSIFICATION	7.2569833717206066E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.999994060037829	WITHOUT_CLASSIFICATION	5.939962170986861E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999957862085018	WITHOUT_CLASSIFICATION	4.213791498181327E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999931063089788	WITHOUT_CLASSIFICATION	6.8936910213082405E-6	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999942104418528	WITHOUT_CLASSIFICATION	5.789558147146658E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999933382306792	WITHOUT_CLASSIFICATION	6.6617693209567694E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999963229314965	WITHOUT_CLASSIFICATION	3.6770685034568575E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999959559580274	WITHOUT_CLASSIFICATION	4.044041972646339E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999958675142815	WITHOUT_CLASSIFICATION	4.1324857185134035E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999948262377549	WITHOUT_CLASSIFICATION	5.173762245043322E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999956811981915	WITHOUT_CLASSIFICATION	4.3188018084685895E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999943069931604	WITHOUT_CLASSIFICATION	5.693006839611193E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999963416913037	WITHOUT_CLASSIFICATION	3.658308696327153E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999997512849502	WITHOUT_CLASSIFICATION	2.4871504976185654E-7	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999991784697235	WITHOUT_CLASSIFICATION	8.215302765121887E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.99998953212587	WITHOUT_CLASSIFICATION	1.0467874129822365E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9999823662246525	WITHOUT_CLASSIFICATION	1.7633775347430684E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999077319762887	WITHOUT_CLASSIFICATION	9.226802371134664E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999077319762887	WITHOUT_CLASSIFICATION	9.226802371134664E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999759971813015	WITHOUT_CLASSIFICATION	2.4002818698501816E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998601980966	WITHOUT_CLASSIFICATION	1.39801903362635E-7	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999998601980966	WITHOUT_CLASSIFICATION	1.39801903362635E-7	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999987684907706	WITHOUT_CLASSIFICATION	1.231509229418705E-6	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999987448434279	WITHOUT_CLASSIFICATION	1.2551565721080167E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999956512393506	WITHOUT_CLASSIFICATION	4.348760649261274E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999995203393294	WITHOUT_CLASSIFICATION	4.796606706262049E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999981886834595	WITHOUT_CLASSIFICATION	1.811316540425865E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999999663496864	WITHOUT_CLASSIFICATION	3.3650313602545204E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.999999663496864	WITHOUT_CLASSIFICATION	3.3650313602545204E-7	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999969208267012	WITHOUT_CLASSIFICATION	3.0791732988187967E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999428087365829	WITHOUT_CLASSIFICATION	5.7191263417036456E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999428087365829	WITHOUT_CLASSIFICATION	5.7191263417036456E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999998002980545	WITHOUT_CLASSIFICATION	1.997019456017303E-7	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9649472881752923	DEFECT	0.035052711824707844	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999757211192151	WITHOUT_CLASSIFICATION	2.4278880784929668E-5	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999953107891152	WITHOUT_CLASSIFICATION	4.6892108847727905E-6	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999945368075374	WITHOUT_CLASSIFICATION	5.46319246266507E-6	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999978298642647	WITHOUT_CLASSIFICATION	2.170135735313554E-6	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999978219551869	WITHOUT_CLASSIFICATION	2.1780448131198903E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999995676629214	WITHOUT_CLASSIFICATION	4.3233707857104225E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999248917744464	WITHOUT_CLASSIFICATION	7.510822555360227E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999928794918653	WITHOUT_CLASSIFICATION	7.120508134655178E-6	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9990104782724701	WITHOUT_CLASSIFICATION	9.89521727529855E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999999968455037	WITHOUT_CLASSIFICATION	3.154496372077145E-9	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999104826524	WITHOUT_CLASSIFICATION	8.95173476415777E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999775725625046	WITHOUT_CLASSIFICATION	2.2427437495353185E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999978460218553	WITHOUT_CLASSIFICATION	2.153978144714922E-6	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999740076217579	WITHOUT_CLASSIFICATION	2.5992378242032677E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999991373993449	WITHOUT_CLASSIFICATION	8.626006550939829E-7	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.999909234023064	WITHOUT_CLASSIFICATION	9.076597693605911E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999996321540111	WITHOUT_CLASSIFICATION	3.6784598888821965E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.999996321540111	WITHOUT_CLASSIFICATION	3.6784598888821965E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999998882518575	WITHOUT_CLASSIFICATION	1.1174814255223405E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999994464249536	WITHOUT_CLASSIFICATION	5.535750463302334E-7	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999155784357	WITHOUT_CLASSIFICATION	8.442156429682849E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999846761208347	WITHOUT_CLASSIFICATION	1.532387916522371E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999974366954303	WITHOUT_CLASSIFICATION	2.5633045697565805E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999974366954303	WITHOUT_CLASSIFICATION	2.5633045697565805E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999974366954303	WITHOUT_CLASSIFICATION	2.5633045697565805E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999991657968185	WITHOUT_CLASSIFICATION	8.342031815872387E-7	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999869653116941	WITHOUT_CLASSIFICATION	1.3034688305866294E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999998985169086	WITHOUT_CLASSIFICATION	1.0148309137255709E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999975073885733	WITHOUT_CLASSIFICATION	2.4926114267029114E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999978959771414	WITHOUT_CLASSIFICATION	2.10402285851394E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999031785675	WITHOUT_CLASSIFICATION	9.682143258701716E-8	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999986709339768	WITHOUT_CLASSIFICATION	1.3290660232628684E-6	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999985145148478	WITHOUT_CLASSIFICATION	1.4854851521301243E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.999996192963604	WITHOUT_CLASSIFICATION	3.8070363961087243E-6	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999672021335395	WITHOUT_CLASSIFICATION	3.279786646049362E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999967915974669	WITHOUT_CLASSIFICATION	3.208402533107942E-6	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999998558716978	WITHOUT_CLASSIFICATION	1.441283021440683E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.8951124235434026	WITHOUT_CLASSIFICATION	0.1048875764565975	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999296559681129	WITHOUT_CLASSIFICATION	7.034403188709416E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999998702732873	WITHOUT_CLASSIFICATION	1.2972671258522483E-7	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999890267137863	WITHOUT_CLASSIFICATION	1.0973286213645874E-5	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999999136785466	WITHOUT_CLASSIFICATION	8.632145343846601E-8	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999986258151073	WITHOUT_CLASSIFICATION	1.374184892716734E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999999681542266	WITHOUT_CLASSIFICATION	3.1845773434888596E-8	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.5041447961985149	DEFECT	0.49585520380148496	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.8930607857444866	DEFECT	0.1069392142555135	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.6609363298425167	DEFECT	0.33906367015748323	WITHOUT_CLASSIFICATION
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9964162177511545	DEFECT	0.003583782248845475	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.945380794740257	DEFECT	0.05461920525974287	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9999957977849688	WITHOUT_CLASSIFICATION	4.2022150311223075E-6	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.8025054570992047	WITHOUT_CLASSIFICATION	0.19749454290079527	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9562781461059433	WITHOUT_CLASSIFICATION	0.0437218538940567	DEFECT
// FIXME: not correct exception	DEFECT	0.9705473368764835	DEFECT	0.029452663123516427	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9999778561911665	WITHOUT_CLASSIFICATION	2.2143808833457393E-5	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9942737676549254	WITHOUT_CLASSIFICATION	0.005726232345074586	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9427530166256588	WITHOUT_CLASSIFICATION	0.05724698337434128	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9067344658292715	WITHOUT_CLASSIFICATION	0.09326553417072846	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9798448009825205	DEFECT	0.020155199017479516	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.5241727407296661	WITHOUT_CLASSIFICATION	0.4758272592703339	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.6417761770977469	DEFECT	0.35822382290225296	WITHOUT_CLASSIFICATION
// TODO: Ruby locks the string here	DEFECT	0.6417761770977469	DEFECT	0.35822382290225296	WITHOUT_CLASSIFICATION
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9769470553141926	WITHOUT_CLASSIFICATION	0.02305294468580742	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9985816497499524	WITHOUT_CLASSIFICATION	0.001418350250047523	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9961129573014961	WITHOUT_CLASSIFICATION	0.0038870426985038904	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997348130606533	WITHOUT_CLASSIFICATION	2.6518693934674475E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9997348130606533	WITHOUT_CLASSIFICATION	2.6518693934674475E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.8674737550505156	DEFECT	0.13252624494948437	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.6323912224287752	DEFECT	0.3676087775712248	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9667646957906306	WITHOUT_CLASSIFICATION	0.03323530420936943	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.6815383834779077	WITHOUT_CLASSIFICATION	0.31846161652209215	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.7071427199401469	DEFECT	0.29285728005985323	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6693776140654912	DEFECT	0.33062238593450893	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.7957717036273864	WITHOUT_CLASSIFICATION	0.20422829637261367	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.6103814904749756	DEFECT	0.3896185095250244	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.9891744391175058	WITHOUT_CLASSIFICATION	0.010825560882494237	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8258323070822179	WITHOUT_CLASSIFICATION	0.17416769291778222	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9035311308357917	WITHOUT_CLASSIFICATION	0.09646886916420826	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9086478196063611	WITHOUT_CLASSIFICATION	0.09135218039363885	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.7248524061240886	DEFECT	0.2751475938759115	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.885863159174776	DEFECT	0.11413684082522399	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// FIXME: this should reset to what it was before	DEFECT	0.8545440687607984	WITHOUT_CLASSIFICATION	0.1454559312392016	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9439480996215773	WITHOUT_CLASSIFICATION	0.056051900378422746	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9147655804657686	WITHOUT_CLASSIFICATION	0.08523441953423146	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.6745896589297589	WITHOUT_CLASSIFICATION	0.32541034107024114	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9990311601240756	WITHOUT_CLASSIFICATION	9.688398759245186E-4	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9996729629839235	WITHOUT_CLASSIFICATION	3.2703701607657374E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9853257362571668	WITHOUT_CLASSIFICATION	0.014674263742833284	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9853257362571668	WITHOUT_CLASSIFICATION	0.014674263742833284	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.960886891561322	WITHOUT_CLASSIFICATION	0.03911310843867799	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9793863224634992	WITHOUT_CLASSIFICATION	0.020613677536500803	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.7924822741278933	DEFECT	0.20751772587210665	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.993033993750365	WITHOUT_CLASSIFICATION	0.006966006249634941	DEFECT
// FIXME: This is wrong	DEFECT	0.7075960307651825	WITHOUT_CLASSIFICATION	0.2924039692348175	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9920073588774562	WITHOUT_CLASSIFICATION	0.007992641122543834	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999800613240045	WITHOUT_CLASSIFICATION	1.9938675995518674E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.945768301763748	WITHOUT_CLASSIFICATION	0.0542316982362519	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9872426912826505	WITHOUT_CLASSIFICATION	0.012757308717349515	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999736404816594	WITHOUT_CLASSIFICATION	2.635951834058753E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.8708461848791594	WITHOUT_CLASSIFICATION	0.1291538151208406	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8844148921036025	WITHOUT_CLASSIFICATION	0.11558510789639749	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8844148921036025	WITHOUT_CLASSIFICATION	0.11558510789639749	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.8256672052463417	WITHOUT_CLASSIFICATION	0.17433279475365818	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.6179919409704331	WITHOUT_CLASSIFICATION	0.38200805902956697	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9999075051305556	WITHOUT_CLASSIFICATION	9.249486944430347E-5	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9985567885329819	DEFECT	0.00144321146701807	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9979640005316701	DEFECT	0.002035999468329871	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9995833470612216	WITHOUT_CLASSIFICATION	4.166529387784067E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9232051236315529	WITHOUT_CLASSIFICATION	0.07679487636844698	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.960886891561322	WITHOUT_CLASSIFICATION	0.03911310843867799	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9997658385751313	WITHOUT_CLASSIFICATION	2.341614248686334E-4	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8828612928210537	WITHOUT_CLASSIFICATION	0.11713870717894616	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.7455701887101724	WITHOUT_CLASSIFICATION	0.2544298112898276	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.6815383834779077	WITHOUT_CLASSIFICATION	0.31846161652209215	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.5575546147711798	WITHOUT_CLASSIFICATION	0.4424453852288201	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.9841074762656153	WITHOUT_CLASSIFICATION	0.01589252373438466	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9439480996215773	WITHOUT_CLASSIFICATION	0.056051900378422746	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9514379604809211	WITHOUT_CLASSIFICATION	0.048562039519078865	DEFECT
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// FIXME: Broken but behaving	DEFECT	0.8708461848791594	WITHOUT_CLASSIFICATION	0.1291538151208406	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.9915189838568795	DEFECT	0.008481016143120433	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.6467058262629329	DEFECT	0.3532941737370671	WITHOUT_CLASSIFICATION
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.945768301763748	WITHOUT_CLASSIFICATION	0.0542316982362519	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.999946175879867	WITHOUT_CLASSIFICATION	5.382412013300279E-5	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8844148921036025	WITHOUT_CLASSIFICATION	0.11558510789639749	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.8844148921036025	WITHOUT_CLASSIFICATION	0.11558510789639749	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9250767299913201	DEFECT	0.0749232700086799	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.972480918082155	WITHOUT_CLASSIFICATION	0.02751908191784508	DEFECT
