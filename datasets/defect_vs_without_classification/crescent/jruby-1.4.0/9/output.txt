// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999999951687064	WITHOUT_CLASSIFICATION	4.831293546911377E-9	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999954570063385	WITHOUT_CLASSIFICATION	4.542993661510768E-6	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9999998882185996	WITHOUT_CLASSIFICATION	1.1178140023788563E-7	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999950409778069	WITHOUT_CLASSIFICATION	4.959022193120805E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940036789244	WITHOUT_CLASSIFICATION	5.996321075564158E-6	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999972657669772	WITHOUT_CLASSIFICATION	2.734233022690066E-6	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999759624620148	WITHOUT_CLASSIFICATION	2.4037537985174262E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999798420526991	WITHOUT_CLASSIFICATION	2.015794730092088E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999583611127781	WITHOUT_CLASSIFICATION	4.163888722188115E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999970359020738	WITHOUT_CLASSIFICATION	2.964097926171583E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999331429643538	WITHOUT_CLASSIFICATION	6.685703564624431E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999965074121504	WITHOUT_CLASSIFICATION	3.4925878494413555E-6	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999965074121504	WITHOUT_CLASSIFICATION	3.4925878494413555E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999994130266191	WITHOUT_CLASSIFICATION	5.869733807791002E-7	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999990845948115	WITHOUT_CLASSIFICATION	9.15405188505233E-7	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999987623262557	WITHOUT_CLASSIFICATION	1.2376737442007922E-6	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9999998934779858	WITHOUT_CLASSIFICATION	1.0652201423427606E-7	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999996789351359	WITHOUT_CLASSIFICATION	3.2106486412496717E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491208217	WITHOUT_CLASSIFICATION	7.508791782053349E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491208217	WITHOUT_CLASSIFICATION	7.508791782053349E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491208217	WITHOUT_CLASSIFICATION	7.508791782053349E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491208217	WITHOUT_CLASSIFICATION	7.508791782053349E-7	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9999774310138018	WITHOUT_CLASSIFICATION	2.256898619827884E-5	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9999906865248008	WITHOUT_CLASSIFICATION	9.313475199202066E-6	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999994278980269	WITHOUT_CLASSIFICATION	5.72101973241263E-7	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999991500955261	WITHOUT_CLASSIFICATION	8.499044738910411E-7	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999994571756046	WITHOUT_CLASSIFICATION	5.428243953965071E-7	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.99999628067723	WITHOUT_CLASSIFICATION	3.7193227700657517E-6	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999971901750527	WITHOUT_CLASSIFICATION	2.80982494735671E-6	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.99999972838786	WITHOUT_CLASSIFICATION	2.716121400048745E-7	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999999263360724	WITHOUT_CLASSIFICATION	7.366392754482629E-8	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9999646265929363	WITHOUT_CLASSIFICATION	3.537340706372284E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999964205060909	WITHOUT_CLASSIFICATION	3.579493909068153E-6	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999994760550963	WITHOUT_CLASSIFICATION	5.239449036959401E-7	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.999991659696305	WITHOUT_CLASSIFICATION	8.340303695098268E-6	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999999879229321	WITHOUT_CLASSIFICATION	1.207706791799207E-8	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993353455404	WITHOUT_CLASSIFICATION	6.64654459557164E-7	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9999991088782537	WITHOUT_CLASSIFICATION	8.911217462479251E-7	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999990051521268	WITHOUT_CLASSIFICATION	9.948478731361388E-7	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999992491208217	WITHOUT_CLASSIFICATION	7.508791782053349E-7	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982852395253	WITHOUT_CLASSIFICATION	1.714760474752617E-6	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999998375298373	WITHOUT_CLASSIFICATION	1.624701626085027E-7	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999988844085261	WITHOUT_CLASSIFICATION	1.1155914738713202E-6	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9999989139553229	WITHOUT_CLASSIFICATION	1.0860446769850827E-6	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9998169774208278	WITHOUT_CLASSIFICATION	1.8302257917228622E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999970479586998	WITHOUT_CLASSIFICATION	2.952041300138036E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999999930668263	WITHOUT_CLASSIFICATION	6.9331737336229785E-9	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999999826357348	WITHOUT_CLASSIFICATION	1.7364265303190154E-8	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.999999988401942	WITHOUT_CLASSIFICATION	1.159805794588281E-8	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9997382035234432	WITHOUT_CLASSIFICATION	2.6179647655685454E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9996106409387701	WITHOUT_CLASSIFICATION	3.893590612299458E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999988951080486	WITHOUT_CLASSIFICATION	1.1048919514187766E-6	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999991670760975	WITHOUT_CLASSIFICATION	8.329239024747924E-7	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9999998773624482	WITHOUT_CLASSIFICATION	1.2263755181837084E-7	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999952753539935	WITHOUT_CLASSIFICATION	4.72464600661691E-6	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999960735158312	WITHOUT_CLASSIFICATION	3.926484168838421E-6	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999987386764247	WITHOUT_CLASSIFICATION	1.261323575168985E-6	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9999995338222857	WITHOUT_CLASSIFICATION	4.661777143642074E-7	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9999992190630171	WITHOUT_CLASSIFICATION	7.809369829293753E-7	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9999996467747843	WITHOUT_CLASSIFICATION	3.532252157879649E-7	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9579569548385294	WITHOUT_CLASSIFICATION	0.042043045161470595	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999990358026923	WITHOUT_CLASSIFICATION	9.641973076415714E-7	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999948298561415	WITHOUT_CLASSIFICATION	5.1701438584433365E-6	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999983312732923	WITHOUT_CLASSIFICATION	1.6687267077408817E-6	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9999962309033837	WITHOUT_CLASSIFICATION	3.7690966161713785E-6	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999731502933187	WITHOUT_CLASSIFICATION	2.68497066813688E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999969385848473	WITHOUT_CLASSIFICATION	3.061415152642957E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999258735490337	WITHOUT_CLASSIFICATION	7.41264509662071E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999999699744634	WITHOUT_CLASSIFICATION	3.00255366063073E-8	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999993500330349	WITHOUT_CLASSIFICATION	6.499669651219456E-7	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9999987452788381	WITHOUT_CLASSIFICATION	1.2547211618856168E-6	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9999989784818143	WITHOUT_CLASSIFICATION	1.021518185652541E-6	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999975363966573	WITHOUT_CLASSIFICATION	2.4636033426890017E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9999982616242401	WITHOUT_CLASSIFICATION	1.738375759846369E-6	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999642926610828	WITHOUT_CLASSIFICATION	3.5707338917232666E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999999069285267	WITHOUT_CLASSIFICATION	9.307147338050046E-8	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9999991307325101	WITHOUT_CLASSIFICATION	8.692674899982224E-7	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999984016342212	WITHOUT_CLASSIFICATION	1.5983657788735758E-6	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9999999879826232	WITHOUT_CLASSIFICATION	1.2017376721303043E-8	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646479544	WITHOUT_CLASSIFICATION	5.353520456115741E-7	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999990679598565	WITHOUT_CLASSIFICATION	9.320401435322695E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998383472264091	WITHOUT_CLASSIFICATION	1.6165277359090347E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999933669012494	WITHOUT_CLASSIFICATION	6.63309875058124E-6	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999933669012494	WITHOUT_CLASSIFICATION	6.63309875058124E-6	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999999707384832	WITHOUT_CLASSIFICATION	2.9261516754485938E-8	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9999999649908053	WITHOUT_CLASSIFICATION	3.5009194714104945E-8	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999976779905065	WITHOUT_CLASSIFICATION	2.3220094935028237E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9999745429534727	WITHOUT_CLASSIFICATION	2.5457046527441087E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999991649596853	WITHOUT_CLASSIFICATION	8.350403146794769E-7	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9999140589075126	WITHOUT_CLASSIFICATION	8.594109248746919E-5	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999205228081165	WITHOUT_CLASSIFICATION	7.947719188350996E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999954403789275	WITHOUT_CLASSIFICATION	4.559621072503646E-6	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999996619359919	WITHOUT_CLASSIFICATION	3.380640081120964E-7	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999976569136089	WITHOUT_CLASSIFICATION	2.343086391071058E-6	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999999784842062	WITHOUT_CLASSIFICATION	2.1515793845049887E-8	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999999983132394	WITHOUT_CLASSIFICATION	1.6867606592759433E-9	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999999983966221	WITHOUT_CLASSIFICATION	1.6033778833488622E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733598	WITHOUT_CLASSIFICATION	2.626640302191179E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733598	WITHOUT_CLASSIFICATION	2.626640302191179E-9	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999999973733598	WITHOUT_CLASSIFICATION	2.626640302191179E-9	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999997472561115	WITHOUT_CLASSIFICATION	2.5274388852478413E-7	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999999983556712	WITHOUT_CLASSIFICATION	1.644328802836839E-9	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.999999962010019	WITHOUT_CLASSIFICATION	3.798998098402995E-8	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9906775174380084	WITHOUT_CLASSIFICATION	0.009322482561991564	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9999660055348928	WITHOUT_CLASSIFICATION	3.399446510725109E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999999191073327	WITHOUT_CLASSIFICATION	8.089266732434295E-8	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9997725543709917	WITHOUT_CLASSIFICATION	2.2744562900833655E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9999998223226285	WITHOUT_CLASSIFICATION	1.7767737153579022E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995863044803	WITHOUT_CLASSIFICATION	4.136955197581719E-7	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999995863044803	WITHOUT_CLASSIFICATION	4.136955197581719E-7	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999997101411503	WITHOUT_CLASSIFICATION	2.898588496617606E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999976333148	WITHOUT_CLASSIFICATION	2.3666852489990196E-9	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999964456310343	WITHOUT_CLASSIFICATION	3.554368965635306E-6	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999964456310343	WITHOUT_CLASSIFICATION	3.554368965635306E-6	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999998300828188	WITHOUT_CLASSIFICATION	1.6991718115900224E-7	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9999999726410411	WITHOUT_CLASSIFICATION	2.7358958911679514E-8	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999872329467555	WITHOUT_CLASSIFICATION	1.2767053244523245E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9999999661274044	WITHOUT_CLASSIFICATION	3.387259557279437E-8	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9999977400190727	WITHOUT_CLASSIFICATION	2.259980927320927E-6	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999993547180264	WITHOUT_CLASSIFICATION	6.452819736604882E-7	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999987532420536	WITHOUT_CLASSIFICATION	1.2467579463669402E-6	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.999993133532323	WITHOUT_CLASSIFICATION	6.866467676965074E-6	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999994093771275	WITHOUT_CLASSIFICATION	5.906228725560924E-7	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999996452745699	WITHOUT_CLASSIFICATION	3.547254301825058E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999990276449933	WITHOUT_CLASSIFICATION	9.72355006658203E-7	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999907393294	WITHOUT_CLASSIFICATION	9.260670488816202E-9	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999987411721929	WITHOUT_CLASSIFICATION	1.2588278070777467E-6	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.8701855632659635	WITHOUT_CLASSIFICATION	0.12981443673403648	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999893496027086	WITHOUT_CLASSIFICATION	1.065039729151714E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999860454293072	WITHOUT_CLASSIFICATION	1.3954570692810834E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999184933212311	WITHOUT_CLASSIFICATION	8.150667876889652E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9992127175260471	WITHOUT_CLASSIFICATION	7.872824739528733E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999995533816183	WITHOUT_CLASSIFICATION	4.4661838181433506E-7	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9999814489672324	WITHOUT_CLASSIFICATION	1.8551032767621067E-5	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999999938386761	WITHOUT_CLASSIFICATION	6.161323906181901E-8	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.999999743314821	WITHOUT_CLASSIFICATION	2.5668517899318396E-7	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999943334714977	WITHOUT_CLASSIFICATION	5.666528502316271E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901285549	WITHOUT_CLASSIFICATION	2.098714451429144E-7	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999988624941089	WITHOUT_CLASSIFICATION	1.1375058912245393E-6	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999818176865316	WITHOUT_CLASSIFICATION	1.818231346839893E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.99999999066597	WITHOUT_CLASSIFICATION	9.334029933280522E-9	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999999121642091	WITHOUT_CLASSIFICATION	8.783579086622137E-8	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9999998059384484	WITHOUT_CLASSIFICATION	1.9406155150313293E-7	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999999995084112	WITHOUT_CLASSIFICATION	4.915888783328194E-10	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999967041168942	WITHOUT_CLASSIFICATION	3.2958831058872497E-6	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999998860259717	WITHOUT_CLASSIFICATION	1.139740283559798E-7	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9999998001853568	WITHOUT_CLASSIFICATION	1.9981464323620527E-7	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9999996895818906	WITHOUT_CLASSIFICATION	3.104181094141816E-7	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999990432443102	WITHOUT_CLASSIFICATION	9.567556897738476E-7	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9999957502607721	WITHOUT_CLASSIFICATION	4.249739227877802E-6	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9999955003514441	WITHOUT_CLASSIFICATION	4.499648555845466E-6	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9999984103416124	WITHOUT_CLASSIFICATION	1.5896583875289565E-6	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9999996923963476	WITHOUT_CLASSIFICATION	3.076036524879928E-7	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999998075964986	WITHOUT_CLASSIFICATION	1.924035013581986E-7	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999949127345639	WITHOUT_CLASSIFICATION	5.087265436110833E-6	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.999999809844848	WITHOUT_CLASSIFICATION	1.9015515196379405E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554118795	WITHOUT_CLASSIFICATION	4.445881205744945E-7	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999986067114699	WITHOUT_CLASSIFICATION	1.3932885301055182E-6	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9999995604165933	WITHOUT_CLASSIFICATION	4.395834067566671E-7	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9999965466404184	WITHOUT_CLASSIFICATION	3.4533595816954226E-6	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996960110019	WITHOUT_CLASSIFICATION	3.0398899815191804E-7	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999983687263319	WITHOUT_CLASSIFICATION	1.6312736682060547E-6	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999999859766421	WITHOUT_CLASSIFICATION	1.4023357852823718E-8	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999933931683643	WITHOUT_CLASSIFICATION	6.606831635659175E-6	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.999999928081828	WITHOUT_CLASSIFICATION	7.191817200022072E-8	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999999865464183	WITHOUT_CLASSIFICATION	1.345358182274482E-8	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9999999984100763	WITHOUT_CLASSIFICATION	1.5899237690009944E-9	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999998809046156	WITHOUT_CLASSIFICATION	1.1909538437522927E-7	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999971690585501	WITHOUT_CLASSIFICATION	2.8309414499367293E-6	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999995301380539	WITHOUT_CLASSIFICATION	4.698619460843133E-7	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999992538272957	WITHOUT_CLASSIFICATION	7.461727042763969E-7	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9999994766222735	WITHOUT_CLASSIFICATION	5.233777264808926E-7	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9999956310871594	WITHOUT_CLASSIFICATION	4.368912840605923E-6	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999994532496734	WITHOUT_CLASSIFICATION	5.467503266324881E-7	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999953458037407	WITHOUT_CLASSIFICATION	4.654196259246646E-6	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999976441889156	WITHOUT_CLASSIFICATION	2.355811084471159E-6	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999987717117367	WITHOUT_CLASSIFICATION	1.2282882633159747E-6	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9999997278685326	WITHOUT_CLASSIFICATION	2.721314672855556E-7	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9999994250548969	WITHOUT_CLASSIFICATION	5.749451030697308E-7	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9999990948619809	WITHOUT_CLASSIFICATION	9.051380189982573E-7	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9999984507471276	WITHOUT_CLASSIFICATION	1.5492528724357928E-6	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9999847792972207	WITHOUT_CLASSIFICATION	1.5220702779370966E-5	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999999534054412	WITHOUT_CLASSIFICATION	4.659455867815613E-8	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999999843715367	WITHOUT_CLASSIFICATION	1.562846328673173E-8	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999930898981081	WITHOUT_CLASSIFICATION	6.910101891950804E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999930898981081	WITHOUT_CLASSIFICATION	6.910101891950804E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999985954713746	WITHOUT_CLASSIFICATION	1.4045286254528537E-6	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999985954713746	WITHOUT_CLASSIFICATION	1.4045286254528537E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999944643176669	WITHOUT_CLASSIFICATION	5.535682332985975E-6	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999944643176669	WITHOUT_CLASSIFICATION	5.535682332985975E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999969615407055	WITHOUT_CLASSIFICATION	3.0384592946321015E-6	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999969615407055	WITHOUT_CLASSIFICATION	3.0384592946321015E-6	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999998195795587	WITHOUT_CLASSIFICATION	1.8042044133928006E-7	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999999724196808	WITHOUT_CLASSIFICATION	2.7580319201045287E-7	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986409621825	WITHOUT_CLASSIFICATION	1.3590378175344063E-6	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9999958601846698	WITHOUT_CLASSIFICATION	4.139815330247225E-6	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999877553146616	WITHOUT_CLASSIFICATION	1.2244685338531571E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9999074296464577	WITHOUT_CLASSIFICATION	9.257035354218345E-5	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999965738028792	WITHOUT_CLASSIFICATION	3.426197120703178E-6	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999998402970148	WITHOUT_CLASSIFICATION	1.5970298506815135E-7	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999999117392915	WITHOUT_CLASSIFICATION	8.826070856503089E-8	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999999547410182	WITHOUT_CLASSIFICATION	4.5258981755910465E-8	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9999999857338217	WITHOUT_CLASSIFICATION	1.4266178359835204E-8	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998300995181	WITHOUT_CLASSIFICATION	1.699004819703742E-7	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.999999833992848	WITHOUT_CLASSIFICATION	1.6600715200339642E-7	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999999990875799	WITHOUT_CLASSIFICATION	9.124201379395172E-10	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999997736724077	WITHOUT_CLASSIFICATION	2.2632759235435434E-7	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999993268158134	WITHOUT_CLASSIFICATION	6.73184186546486E-7	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9999998680208907	WITHOUT_CLASSIFICATION	1.3197910923190716E-7	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.999999240761074	WITHOUT_CLASSIFICATION	7.592389258590662E-7	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9999970109054523	WITHOUT_CLASSIFICATION	2.9890945475812002E-6	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9985686337845262	WITHOUT_CLASSIFICATION	0.0014313662154737561	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9999991137984435	WITHOUT_CLASSIFICATION	8.862015563986073E-7	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999992254733835	WITHOUT_CLASSIFICATION	7.745266165915041E-7	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999996166399343	WITHOUT_CLASSIFICATION	3.833600657017749E-7	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9999949968767532	WITHOUT_CLASSIFICATION	5.003123246760186E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999911571075168	WITHOUT_CLASSIFICATION	8.842892483120032E-6	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999881849368	WITHOUT_CLASSIFICATION	1.1815063134393803E-8	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999988337881491	WITHOUT_CLASSIFICATION	1.1662118508509007E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899439777	WITHOUT_CLASSIFICATION	3.1005602222130867E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899439777	WITHOUT_CLASSIFICATION	3.1005602222130867E-7	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999999561107296	WITHOUT_CLASSIFICATION	4.388927043147032E-8	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999997783820235	WITHOUT_CLASSIFICATION	2.2161797656337955E-7	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999997195674957	WITHOUT_CLASSIFICATION	2.8043250429958487E-7	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9999966337611967	WITHOUT_CLASSIFICATION	3.3662388031871124E-6	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9999984103271301	WITHOUT_CLASSIFICATION	1.5896728699489526E-6	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999996503558132	WITHOUT_CLASSIFICATION	3.4964418691431404E-7	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999951296860333	WITHOUT_CLASSIFICATION	4.8703139666827296E-6	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999951296860333	WITHOUT_CLASSIFICATION	4.8703139666827296E-6	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999999055644653	WITHOUT_CLASSIFICATION	9.443553465791082E-8	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9986191313715642	WITHOUT_CLASSIFICATION	0.0013808686284358432	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995713389851	WITHOUT_CLASSIFICATION	4.286610149954198E-7	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999995713389851	WITHOUT_CLASSIFICATION	4.286610149954198E-7	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9999992428587413	WITHOUT_CLASSIFICATION	7.571412586046778E-7	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9997525413908868	WITHOUT_CLASSIFICATION	2.4745860911318826E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9997525413908868	WITHOUT_CLASSIFICATION	2.4745860911318826E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996899716642	WITHOUT_CLASSIFICATION	3.100283358898868E-7	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999996899716642	WITHOUT_CLASSIFICATION	3.100283358898868E-7	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507143	WITHOUT_CLASSIFICATION	4.667349285778337E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507143	WITHOUT_CLASSIFICATION	4.667349285778337E-6	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999980392010993	WITHOUT_CLASSIFICATION	1.960798900625107E-6	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999992385041658	WITHOUT_CLASSIFICATION	7.614958341950981E-7	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998614482344	WITHOUT_CLASSIFICATION	1.385517656394139E-7	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999963108145432	WITHOUT_CLASSIFICATION	3.689185456833433E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9999999906187418	WITHOUT_CLASSIFICATION	9.381258192097936E-9	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9999998756934335	WITHOUT_CLASSIFICATION	1.2430656651820887E-7	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.999998780717535	WITHOUT_CLASSIFICATION	1.2192824649723293E-6	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999985362789737	WITHOUT_CLASSIFICATION	1.4637210262824487E-6	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.999998780717535	WITHOUT_CLASSIFICATION	1.2192824649723293E-6	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9999969595152577	WITHOUT_CLASSIFICATION	3.040484742318133E-6	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999998742697017	WITHOUT_CLASSIFICATION	1.257302981840739E-7	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.99999984588922	WITHOUT_CLASSIFICATION	1.5411078012044506E-7	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999955215291385	WITHOUT_CLASSIFICATION	4.478470861443993E-6	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999999607774314	WITHOUT_CLASSIFICATION	3.922256865544817E-8	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9999800823718448	WITHOUT_CLASSIFICATION	1.991762815531719E-5	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999994161635067	WITHOUT_CLASSIFICATION	5.838364933034994E-7	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999996849258921	WITHOUT_CLASSIFICATION	3.150741079159035E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.999998846361737	WITHOUT_CLASSIFICATION	1.15363826311812E-6	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9999996015786801	WITHOUT_CLASSIFICATION	3.984213198877714E-7	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999998140531856	WITHOUT_CLASSIFICATION	1.8594681440811572E-7	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.999999947059101	WITHOUT_CLASSIFICATION	5.2940899023132134E-8	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999966275691939	WITHOUT_CLASSIFICATION	3.372430806052124E-6	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999998035194626	WITHOUT_CLASSIFICATION	1.9648053735805516E-7	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9999990383620831	WITHOUT_CLASSIFICATION	9.616379168867206E-7	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999999034582321	WITHOUT_CLASSIFICATION	9.654176791630414E-8	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9999967758492141	WITHOUT_CLASSIFICATION	3.2241507859000742E-6	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999998045631969	WITHOUT_CLASSIFICATION	1.954368030276652E-7	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999998053414038	WITHOUT_CLASSIFICATION	1.9465859625344098E-7	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9999992982281231	WITHOUT_CLASSIFICATION	7.017718769142855E-7	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9999941555518235	WITHOUT_CLASSIFICATION	5.844448176556765E-6	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999920260387	WITHOUT_CLASSIFICATION	7.97396127149715E-9	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999998513256573	WITHOUT_CLASSIFICATION	1.4867434260897682E-7	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999897117632305	WITHOUT_CLASSIFICATION	1.028823676948136E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.999999649594231	WITHOUT_CLASSIFICATION	3.504057689925445E-7	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.999999980137428	WITHOUT_CLASSIFICATION	1.9862571944668737E-8	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.999999999121842	WITHOUT_CLASSIFICATION	8.781579408938496E-10	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999999946794744	WITHOUT_CLASSIFICATION	5.3205256107176165E-9	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999997087701678	WITHOUT_CLASSIFICATION	2.9122983227251297E-7	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999999017926261	WITHOUT_CLASSIFICATION	9.8207373873676E-8	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999998783218993	WITHOUT_CLASSIFICATION	1.216781007531825E-7	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999999960693406	WITHOUT_CLASSIFICATION	3.930659336809361E-9	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.99999972377924	WITHOUT_CLASSIFICATION	2.762207599667158E-7	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9999989726948394	WITHOUT_CLASSIFICATION	1.0273051606520728E-6	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.99999754136696	WITHOUT_CLASSIFICATION	2.4586330399985686E-6	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999986707830437	WITHOUT_CLASSIFICATION	1.3292169563110589E-6	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9999998384439269	WITHOUT_CLASSIFICATION	1.6155607309291207E-7	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999997710554503	WITHOUT_CLASSIFICATION	2.2894454963175245E-7	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999999324830582	WITHOUT_CLASSIFICATION	6.751694177233915E-8	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.999997918576923	WITHOUT_CLASSIFICATION	2.0814230769142094E-6	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999998251270766	WITHOUT_CLASSIFICATION	1.7487292322808934E-7	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999987595126301	WITHOUT_CLASSIFICATION	1.2404873698798003E-6	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999999449382954	WITHOUT_CLASSIFICATION	5.506170458597277E-8	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999999306066059	WITHOUT_CLASSIFICATION	6.939339412959976E-8	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999999895776666	WITHOUT_CLASSIFICATION	1.0422333528871809E-8	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999999899096567	WITHOUT_CLASSIFICATION	1.0090343378090374E-8	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9999999794254266	WITHOUT_CLASSIFICATION	2.057457331622353E-8	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.999999942701599	WITHOUT_CLASSIFICATION	5.729840112071795E-8	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872914889	WITHOUT_CLASSIFICATION	2.127085111236023E-7	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999942995849402	WITHOUT_CLASSIFICATION	5.7004150597529794E-6	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.999986590880878	WITHOUT_CLASSIFICATION	1.3409119121824966E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999999479172839	WITHOUT_CLASSIFICATION	5.208271618292169E-8	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9997796005070252	WITHOUT_CLASSIFICATION	2.2039949297490984E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999999235955526	WITHOUT_CLASSIFICATION	7.640444741475692E-8	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999904406046	WITHOUT_CLASSIFICATION	9.559395375284791E-9	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999999904406046	WITHOUT_CLASSIFICATION	9.559395375284791E-9	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999996728500715	WITHOUT_CLASSIFICATION	3.2714992840874863E-7	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9999977475615206	WITHOUT_CLASSIFICATION	2.2524384794659708E-6	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9999992106952654	WITHOUT_CLASSIFICATION	7.893047345740366E-7	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.999998624330668	WITHOUT_CLASSIFICATION	1.3756693319996812E-6	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999958206925054	WITHOUT_CLASSIFICATION	4.17930749463618E-6	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999990422734728	WITHOUT_CLASSIFICATION	9.577265271417441E-7	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.999998796440036	WITHOUT_CLASSIFICATION	1.2035599640140443E-6	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999999129302545	WITHOUT_CLASSIFICATION	8.70697455084637E-8	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9999997035901208	WITHOUT_CLASSIFICATION	2.964098792458256E-7	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999995259736331	WITHOUT_CLASSIFICATION	4.740263669783768E-7	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999966367505636	WITHOUT_CLASSIFICATION	3.3632494363191955E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999966367505636	WITHOUT_CLASSIFICATION	3.3632494363191955E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999960428598149	WITHOUT_CLASSIFICATION	3.957140184994287E-6	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9999864118011783	WITHOUT_CLASSIFICATION	1.358819882173E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999776455498551	WITHOUT_CLASSIFICATION	2.235445014480497E-5	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9999992610801869	WITHOUT_CLASSIFICATION	7.389198131296773E-7	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999998042742346	WITHOUT_CLASSIFICATION	1.9572576546501673E-7	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999999782115483	WITHOUT_CLASSIFICATION	2.1788451623694077E-8	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997221936641	WITHOUT_CLASSIFICATION	2.7780633595342867E-7	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.999999849487416	WITHOUT_CLASSIFICATION	1.5051258399802246E-7	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999999147840253	WITHOUT_CLASSIFICATION	8.521597472294721E-8	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.999999746269904	WITHOUT_CLASSIFICATION	2.537300959546924E-7	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9999994084268699	WITHOUT_CLASSIFICATION	5.915731302027687E-7	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999999409626378	WITHOUT_CLASSIFICATION	5.903736207118305E-8	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.999995137471849	WITHOUT_CLASSIFICATION	4.862528151039814E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.999995137471849	WITHOUT_CLASSIFICATION	4.862528151039814E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9999922572028496	WITHOUT_CLASSIFICATION	7.742797150476558E-6	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999875213590044	WITHOUT_CLASSIFICATION	1.247864099554009E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999904122836637	WITHOUT_CLASSIFICATION	9.587716336390478E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9999998216977424	WITHOUT_CLASSIFICATION	1.7830225769011182E-7	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9999998733625148	WITHOUT_CLASSIFICATION	1.2663748507131727E-7	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999995265332522	WITHOUT_CLASSIFICATION	4.7346674786188617E-7	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9999767104822698	WITHOUT_CLASSIFICATION	2.3289517730273207E-5	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999996259339722	WITHOUT_CLASSIFICATION	3.740660278315958E-7	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.999981655336388	WITHOUT_CLASSIFICATION	1.8344663611937526E-5	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999999300239194	WITHOUT_CLASSIFICATION	6.997608054978991E-8	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9999776455498551	WITHOUT_CLASSIFICATION	2.235445014480497E-5	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9999982014997733	WITHOUT_CLASSIFICATION	1.7985002267797065E-6	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9999805611060062	WITHOUT_CLASSIFICATION	1.9438893993863925E-5	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999999773462015	WITHOUT_CLASSIFICATION	2.265379854436156E-8	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999999975630255	WITHOUT_CLASSIFICATION	2.436974628940793E-9	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999999878570356	WITHOUT_CLASSIFICATION	1.2142964504368697E-8	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999978569847653	WITHOUT_CLASSIFICATION	2.1430152346789656E-6	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999999584585321	WITHOUT_CLASSIFICATION	4.1541467998634263E-8	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9999995783027278	WITHOUT_CLASSIFICATION	4.216972722297763E-7	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9999999508069315	WITHOUT_CLASSIFICATION	4.919306841373829E-8	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.999999137096413	WITHOUT_CLASSIFICATION	8.629035870035779E-7	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999987524297588	WITHOUT_CLASSIFICATION	1.247570241249939E-6	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.999998077738841	WITHOUT_CLASSIFICATION	1.9222611590768822E-6	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999997013217014	WITHOUT_CLASSIFICATION	2.98678298591487E-7	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999899753608802	WITHOUT_CLASSIFICATION	1.0024639119799686E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999998821513588	WITHOUT_CLASSIFICATION	1.1784864116657227E-7	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.999999922140239	WITHOUT_CLASSIFICATION	7.785976094009376E-8	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9999987646601805	WITHOUT_CLASSIFICATION	1.2353398195867765E-6	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999990683003355	WITHOUT_CLASSIFICATION	9.316996645268892E-7	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999954482226118	WITHOUT_CLASSIFICATION	4.551777388305413E-6	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999989218693245	WITHOUT_CLASSIFICATION	1.0781306755352245E-6	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999734079003997	WITHOUT_CLASSIFICATION	2.659209960027823E-5	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999996927137339	WITHOUT_CLASSIFICATION	3.0728626606969975E-7	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.999981997534572	WITHOUT_CLASSIFICATION	1.800246542808092E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9994099109067421	WITHOUT_CLASSIFICATION	5.900890932577624E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999962456973592	WITHOUT_CLASSIFICATION	3.754302640753055E-6	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999999999405295	WITHOUT_CLASSIFICATION	5.947061129165422E-11	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9999845939693995	WITHOUT_CLASSIFICATION	1.5406030600433013E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9999996171072685	WITHOUT_CLASSIFICATION	3.8289273151089254E-7	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999997228673367	WITHOUT_CLASSIFICATION	2.7713266327275146E-7	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9999867007246123	WITHOUT_CLASSIFICATION	1.3299275387667881E-5	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999998092338248	WITHOUT_CLASSIFICATION	1.907661751915172E-6	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999998092338248	WITHOUT_CLASSIFICATION	1.907661751915172E-6	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999887643035861	WITHOUT_CLASSIFICATION	1.1235696413993308E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999905409685342	WITHOUT_CLASSIFICATION	9.459031465726636E-6	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999999346464543	WITHOUT_CLASSIFICATION	6.535354570897827E-8	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999921119935906	WITHOUT_CLASSIFICATION	7.888006409337018E-6	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999994607628584	WITHOUT_CLASSIFICATION	5.392371415847975E-7	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999997943840604	WITHOUT_CLASSIFICATION	2.056159397364368E-7	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999995201740718	WITHOUT_CLASSIFICATION	4.798259282093877E-7	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9999904292535248	WITHOUT_CLASSIFICATION	9.570746475252594E-6	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.999999625815665	WITHOUT_CLASSIFICATION	3.741843349120978E-7	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999997010224264	WITHOUT_CLASSIFICATION	2.9897757360042865E-7	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999999192544494	WITHOUT_CLASSIFICATION	8.074555062590847E-8	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.999995001521682	WITHOUT_CLASSIFICATION	4.998478317997867E-6	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9999933931683643	WITHOUT_CLASSIFICATION	6.606831635659175E-6	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999989323691738	WITHOUT_CLASSIFICATION	1.0676308262101535E-6	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9999989004762745	WITHOUT_CLASSIFICATION	1.0995237255150424E-6	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9999785970527284	WITHOUT_CLASSIFICATION	2.140294727159761E-5	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999999787569955	WITHOUT_CLASSIFICATION	2.124300445359258E-8	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999999899181195	WITHOUT_CLASSIFICATION	1.0081880493657525E-7	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999916046011473	WITHOUT_CLASSIFICATION	8.395398852696498E-6	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999733548823	WITHOUT_CLASSIFICATION	2.6645117663224315E-8	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999999733548823	WITHOUT_CLASSIFICATION	2.6645117663224315E-8	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.999999809848977	WITHOUT_CLASSIFICATION	1.9015102312109895E-7	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9999999930924689	WITHOUT_CLASSIFICATION	6.907531142779013E-9	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9999963971409931	WITHOUT_CLASSIFICATION	3.60285900690123E-6	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999998115638822	WITHOUT_CLASSIFICATION	1.8843611785558007E-7	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9999999839531977	WITHOUT_CLASSIFICATION	1.6046802417481656E-8	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999999524666542	WITHOUT_CLASSIFICATION	4.753334585433695E-8	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999997268545812	WITHOUT_CLASSIFICATION	2.7314541873782397E-7	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999985652426	WITHOUT_CLASSIFICATION	1.4347575226909108E-9	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.999999740035621	WITHOUT_CLASSIFICATION	2.5996437902256656E-7	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999999999953236	WITHOUT_CLASSIFICATION	4.676374441172908E-12	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999998921571223	WITHOUT_CLASSIFICATION	1.0784287774761384E-7	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9999632664741971	WITHOUT_CLASSIFICATION	3.6733525802883996E-5	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999999990606911	WITHOUT_CLASSIFICATION	9.39308774761006E-10	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999999988752931	WITHOUT_CLASSIFICATION	1.1247069383349489E-9	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999998759373974	WITHOUT_CLASSIFICATION	1.2406260264055493E-7	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9999859975952726	WITHOUT_CLASSIFICATION	1.4002404727370654E-5	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999992737729889	WITHOUT_CLASSIFICATION	7.262270109462538E-7	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999997410133808	WITHOUT_CLASSIFICATION	2.5898661905108713E-7	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999971455816782	WITHOUT_CLASSIFICATION	2.854418321699419E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.999999667346408	WITHOUT_CLASSIFICATION	3.326535919666808E-7	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999979896668093	WITHOUT_CLASSIFICATION	2.0103331907076395E-5	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.999993048069891	WITHOUT_CLASSIFICATION	6.9519301089962325E-6	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999995613885398	WITHOUT_CLASSIFICATION	4.386114601768427E-7	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9410471168458835	WITHOUT_CLASSIFICATION	0.05895288315411639	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9999908673933242	WITHOUT_CLASSIFICATION	9.13260667570634E-6	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9999979456253905	WITHOUT_CLASSIFICATION	2.054374609532465E-6	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999985567939763	WITHOUT_CLASSIFICATION	1.443206023648668E-6	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999989719504412	WITHOUT_CLASSIFICATION	1.0280495588195077E-6	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9999982398616726	WITHOUT_CLASSIFICATION	1.7601383273405296E-6	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9999988507495557	WITHOUT_CLASSIFICATION	1.1492504441554451E-6	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9999989376235006	WITHOUT_CLASSIFICATION	1.0623764993482682E-6	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999992638735266	WITHOUT_CLASSIFICATION	7.361264734687052E-7	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999994584783116	WITHOUT_CLASSIFICATION	5.415216883847924E-7	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999959535034284	WITHOUT_CLASSIFICATION	4.046496571563272E-6	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999713542612787	WITHOUT_CLASSIFICATION	2.864573872137751E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999012201360903	WITHOUT_CLASSIFICATION	9.877986390979747E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9993138169375426	WITHOUT_CLASSIFICATION	6.861830624574578E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999998687401298	WITHOUT_CLASSIFICATION	1.3125987011850656E-7	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999943496680935	WITHOUT_CLASSIFICATION	5.650331906503268E-6	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999997164619572	WITHOUT_CLASSIFICATION	2.8353804284608014E-7	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999938799020174	WITHOUT_CLASSIFICATION	6.120097982675043E-6	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9999898728732429	WITHOUT_CLASSIFICATION	1.0127126756999616E-5	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9999978404755233	WITHOUT_CLASSIFICATION	2.1595244766963522E-6	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999600774490884	WITHOUT_CLASSIFICATION	3.9922550911679253E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999866391945109	WITHOUT_CLASSIFICATION	1.3360805489145489E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999600774490884	WITHOUT_CLASSIFICATION	3.9922550911679253E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.982935816060926	WITHOUT_CLASSIFICATION	0.017064183939074003	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9999467553752626	WITHOUT_CLASSIFICATION	5.324462473748513E-5	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999996379998168	WITHOUT_CLASSIFICATION	3.6200018315169864E-7	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.8704493781961706	WITHOUT_CLASSIFICATION	0.1295506218038294	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999914293549648	WITHOUT_CLASSIFICATION	8.57064503515285E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999280897314	WITHOUT_CLASSIFICATION	7.191026864463864E-8	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999995098277734	WITHOUT_CLASSIFICATION	4.901722266603858E-7	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999197365931728	WITHOUT_CLASSIFICATION	8.026340682725365E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.999999929324411	WITHOUT_CLASSIFICATION	7.067558911037825E-8	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9730341304329994	WITHOUT_CLASSIFICATION	0.026965869567000648	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9971492077703549	WITHOUT_CLASSIFICATION	0.0028507922296450647	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999999833276909	WITHOUT_CLASSIFICATION	1.6672309046490288E-8	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9999998066650388	WITHOUT_CLASSIFICATION	1.9333496113983603E-7	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999985964372423	WITHOUT_CLASSIFICATION	1.4035627576422425E-6	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999969238198045	WITHOUT_CLASSIFICATION	3.076180195500688E-6	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9992981527627395	WITHOUT_CLASSIFICATION	7.018472372605273E-4	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9999983568292622	WITHOUT_CLASSIFICATION	1.6431707377761973E-6	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999936113367817	WITHOUT_CLASSIFICATION	6.3886632183072406E-6	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999993161903902	WITHOUT_CLASSIFICATION	6.838096098558755E-7	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9999980155946429	WITHOUT_CLASSIFICATION	1.9844053572310505E-6	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9999593331766032	WITHOUT_CLASSIFICATION	4.0666823396661516E-5	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999997397562159	WITHOUT_CLASSIFICATION	2.602437840732205E-7	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999881433570725	WITHOUT_CLASSIFICATION	1.1856642927502266E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999998283816055	WITHOUT_CLASSIFICATION	1.7161839449245765E-7	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999997605764593	WITHOUT_CLASSIFICATION	2.3942354064537625E-7	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999961050469335	WITHOUT_CLASSIFICATION	3.894953066432142E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999916083120268	WITHOUT_CLASSIFICATION	8.391687973103482E-6	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999986222567953	WITHOUT_CLASSIFICATION	1.3777432047564643E-6	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9999964205060909	WITHOUT_CLASSIFICATION	3.579493909068153E-6	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9999995441318837	WITHOUT_CLASSIFICATION	4.558681162896248E-7	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999932025827117	WITHOUT_CLASSIFICATION	6.7974172882216265E-6	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999865393251746	WITHOUT_CLASSIFICATION	1.3460674825499725E-5	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999940601993738	WITHOUT_CLASSIFICATION	5.939800626251014E-6	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999997702729772	WITHOUT_CLASSIFICATION	2.2972702285247072E-7	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.999999977966041	WITHOUT_CLASSIFICATION	2.2033959070638532E-8	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999997934159994	WITHOUT_CLASSIFICATION	2.0658400066004353E-7	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999983832534463	WITHOUT_CLASSIFICATION	1.6167465536860417E-6	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999984855632	WITHOUT_CLASSIFICATION	1.5144368287067928E-9	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999999639636017	WITHOUT_CLASSIFICATION	3.603639837826232E-8	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.999996362869892	WITHOUT_CLASSIFICATION	3.6371301079199772E-6	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9999669355628942	WITHOUT_CLASSIFICATION	3.30644371057895E-5	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9999998976634952	WITHOUT_CLASSIFICATION	1.0233650477039292E-7	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999999958328822	WITHOUT_CLASSIFICATION	4.1671177683952805E-9	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999995754381273	WITHOUT_CLASSIFICATION	4.245618727104139E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.999995754381273	WITHOUT_CLASSIFICATION	4.245618727104139E-6	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.999998989412157	WITHOUT_CLASSIFICATION	1.0105878428996219E-6	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999984142416554	WITHOUT_CLASSIFICATION	1.585758344621523E-6	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9992948135820429	WITHOUT_CLASSIFICATION	7.051864179570203E-4	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999998133188545	WITHOUT_CLASSIFICATION	1.8668114553852245E-7	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999993636445725	WITHOUT_CLASSIFICATION	6.363554273849216E-7	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999994847241207	WITHOUT_CLASSIFICATION	5.152758792941519E-7	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9999989969892696	WITHOUT_CLASSIFICATION	1.0030107304518789E-6	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999991874476604	WITHOUT_CLASSIFICATION	8.125523397549315E-7	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999999983972919	WITHOUT_CLASSIFICATION	1.602708141317189E-9	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999999956959554	WITHOUT_CLASSIFICATION	4.304044530009588E-9	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999999907633614	WITHOUT_CLASSIFICATION	9.236638524655194E-9	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999980748002084	WITHOUT_CLASSIFICATION	1.92519979163137E-6	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9994219503574505	WITHOUT_CLASSIFICATION	5.780496425495686E-4	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999999548189401	WITHOUT_CLASSIFICATION	4.518105984005917E-8	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999999989406807	WITHOUT_CLASSIFICATION	1.0593192323624701E-9	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999999424137045	WITHOUT_CLASSIFICATION	5.758629551336115E-8	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999998986822165	WITHOUT_CLASSIFICATION	1.0131778350090711E-7	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999965852671606	WITHOUT_CLASSIFICATION	3.4147328393739273E-6	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9999998971491502	WITHOUT_CLASSIFICATION	1.0285084977458725E-7	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999996107635519	WITHOUT_CLASSIFICATION	3.8923644805701584E-7	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.6871486891030949	WITHOUT_CLASSIFICATION	0.31285131089690515	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.7090420213922751	WITHOUT_CLASSIFICATION	0.2909579786077248	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999999883264935	WITHOUT_CLASSIFICATION	1.1673506572346014E-8	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999999998657015	WITHOUT_CLASSIFICATION	1.3429836568388687E-10	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9997155765587749	WITHOUT_CLASSIFICATION	2.844234412251452E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999999989845841	WITHOUT_CLASSIFICATION	1.0154158629655742E-9	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995254996684	WITHOUT_CLASSIFICATION	4.745003315207672E-7	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9997077570462861	WITHOUT_CLASSIFICATION	2.92242953713888E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9999990907303328	WITHOUT_CLASSIFICATION	9.092696672545354E-7	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999954941566809	WITHOUT_CLASSIFICATION	4.505843319101363E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999999583984384	WITHOUT_CLASSIFICATION	4.1601561566851184E-8	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9999939234538868	WITHOUT_CLASSIFICATION	6.076546113295898E-6	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999999616564177	WITHOUT_CLASSIFICATION	3.834358239254371E-8	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.999999591871993	WITHOUT_CLASSIFICATION	4.081280069204396E-7	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999999888756238	WITHOUT_CLASSIFICATION	1.112437620366923E-7	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.999999942460946	WITHOUT_CLASSIFICATION	5.753905396596061E-8	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999840765562027	WITHOUT_CLASSIFICATION	1.5923443797299328E-5	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999947958428829	WITHOUT_CLASSIFICATION	5.204157117187789E-6	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9987879277945374	WITHOUT_CLASSIFICATION	0.0012120722054625916	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999919406381849	WITHOUT_CLASSIFICATION	8.059361815249492E-6	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999977684803708	WITHOUT_CLASSIFICATION	2.231519629179167E-6	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9992197092388396	WITHOUT_CLASSIFICATION	7.802907611602946E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9999983929207508	WITHOUT_CLASSIFICATION	1.6070792492530977E-6	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999999003603678	WITHOUT_CLASSIFICATION	9.963963221430897E-8	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9999582693881305	WITHOUT_CLASSIFICATION	4.173061186952737E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995648107807	WITHOUT_CLASSIFICATION	4.351892193808958E-7	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999948875053201	WITHOUT_CLASSIFICATION	5.112494679945709E-6	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9999987221261654	WITHOUT_CLASSIFICATION	1.2778738346030072E-6	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9999904325268879	WITHOUT_CLASSIFICATION	9.56747311207512E-6	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999990803498429	WITHOUT_CLASSIFICATION	9.196501571709378E-7	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9999968579432631	WITHOUT_CLASSIFICATION	3.142056736924842E-6	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9999997203849377	WITHOUT_CLASSIFICATION	2.7961506225335724E-7	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999999893409888	WITHOUT_CLASSIFICATION	1.0659011326976972E-8	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.999999928814222	WITHOUT_CLASSIFICATION	7.11857780306452E-8	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999968407247405	WITHOUT_CLASSIFICATION	3.1592752595660024E-6	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999977829242658	WITHOUT_CLASSIFICATION	2.217075734283482E-6	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999999695714236	WITHOUT_CLASSIFICATION	3.042857653140439E-8	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852211316582	WITHOUT_CLASSIFICATION	1.4778868341821599E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999984899543529	WITHOUT_CLASSIFICATION	1.5100456469780208E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999818242061698	WITHOUT_CLASSIFICATION	1.8175793830173228E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999999694269607	WITHOUT_CLASSIFICATION	3.0573039416108775E-8	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999998147154344	WITHOUT_CLASSIFICATION	1.8528456556949582E-7	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.999999979216706	WITHOUT_CLASSIFICATION	2.078329399091946E-8	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9999998042267217	WITHOUT_CLASSIFICATION	1.957732782945643E-7	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999994288801213	WITHOUT_CLASSIFICATION	5.711198786832475E-7	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999988370285767	WITHOUT_CLASSIFICATION	1.1629714233306276E-6	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999941629369727	WITHOUT_CLASSIFICATION	5.837063027236108E-6	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9999999949848891	WITHOUT_CLASSIFICATION	5.015110938646951E-9	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999911135461926	WITHOUT_CLASSIFICATION	8.886453807366916E-6	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999983257009523	WITHOUT_CLASSIFICATION	1.6742990477057693E-6	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9999851033346228	WITHOUT_CLASSIFICATION	1.4896665377263601E-5	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999967486130251	WITHOUT_CLASSIFICATION	3.251386974915987E-6	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999999352908353	WITHOUT_CLASSIFICATION	6.470916467892273E-8	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9999855868898326	WITHOUT_CLASSIFICATION	1.441311016733965E-5	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9998565912268992	WITHOUT_CLASSIFICATION	1.434087731007511E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9998609007802317	WITHOUT_CLASSIFICATION	1.3909921976840942E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9998330659749406	WITHOUT_CLASSIFICATION	1.6693402505942178E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9998424575036878	WITHOUT_CLASSIFICATION	1.5754249631219034E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9998148600313802	WITHOUT_CLASSIFICATION	1.851399686197873E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9997017404280288	WITHOUT_CLASSIFICATION	2.9825957197115863E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9997523877939888	WITHOUT_CLASSIFICATION	2.476122060112403E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9998340425862158	WITHOUT_CLASSIFICATION	1.6595741378426984E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9998556319200168	WITHOUT_CLASSIFICATION	1.4436807998322325E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9997775116126486	WITHOUT_CLASSIFICATION	2.2248838735150836E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9998320715855537	WITHOUT_CLASSIFICATION	1.6792841444636953E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997023382183932	WITHOUT_CLASSIFICATION	2.976617816068319E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997560785058495	WITHOUT_CLASSIFICATION	2.4392149415053635E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9996465478796649	WITHOUT_CLASSIFICATION	3.53452120335159E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997280391219732	WITHOUT_CLASSIFICATION	2.71960878026793E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.999590886917771	WITHOUT_CLASSIFICATION	4.0911308222909567E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9997255288798315	WITHOUT_CLASSIFICATION	2.7447112016849737E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9994778297370984	WITHOUT_CLASSIFICATION	5.221702629016458E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997916563487154	WITHOUT_CLASSIFICATION	2.0834365128472672E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999999761022891	WITHOUT_CLASSIFICATION	2.3897710992508216E-8	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999999973321052	WITHOUT_CLASSIFICATION	2.667894859292147E-9	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999957402953065	WITHOUT_CLASSIFICATION	4.2597046935942E-6	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999998709111038	WITHOUT_CLASSIFICATION	1.2908889631187313E-7	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9998966373413473	WITHOUT_CLASSIFICATION	1.0336265865269547E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999987574882218	WITHOUT_CLASSIFICATION	1.2425117783018958E-6	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999991204933639	WITHOUT_CLASSIFICATION	8.795066359814134E-7	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9994190162003509	WITHOUT_CLASSIFICATION	5.809837996491598E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999999956999745	WITHOUT_CLASSIFICATION	4.3000255096049294E-8	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997549997907	WITHOUT_CLASSIFICATION	2.450002092842965E-7	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.862965034466457	WITHOUT_CLASSIFICATION	0.13703496553354302	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.999999431619526	WITHOUT_CLASSIFICATION	5.683804739509674E-7	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999984329667809	WITHOUT_CLASSIFICATION	1.5670332189909487E-6	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995787498722	WITHOUT_CLASSIFICATION	4.212501277882644E-7	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999995787498722	WITHOUT_CLASSIFICATION	4.212501277882644E-7	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999948142192037	WITHOUT_CLASSIFICATION	5.185780796336614E-6	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9999958720356722	WITHOUT_CLASSIFICATION	4.127964327782046E-6	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.999999997551596	WITHOUT_CLASSIFICATION	2.448403999084201E-9	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999978471015873	WITHOUT_CLASSIFICATION	2.1528984127256293E-6	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999982523886936	WITHOUT_CLASSIFICATION	1.747611306472224E-6	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999988735823103	WITHOUT_CLASSIFICATION	1.1264176897371417E-6	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999996929646511	WITHOUT_CLASSIFICATION	3.070353489027933E-7	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9999998816172097	WITHOUT_CLASSIFICATION	1.1838279039227065E-7	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999997471390449	WITHOUT_CLASSIFICATION	2.528609551487703E-7	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999998720737965	WITHOUT_CLASSIFICATION	1.2792620346423575E-7	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9999888414507602	WITHOUT_CLASSIFICATION	1.1158549239837724E-5	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9999997970133649	WITHOUT_CLASSIFICATION	2.0298663507906673E-7	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999920940867313	WITHOUT_CLASSIFICATION	7.905913268692597E-6	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9998743650594704	WITHOUT_CLASSIFICATION	1.2563494052961338E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9999999386643034	WITHOUT_CLASSIFICATION	6.13356966240452E-8	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999990930661492	WITHOUT_CLASSIFICATION	9.069338506671721E-7	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999970479586998	WITHOUT_CLASSIFICATION	2.952041300138036E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9999999785960331	WITHOUT_CLASSIFICATION	2.140396692441669E-8	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9992048354966171	WITHOUT_CLASSIFICATION	7.951645033829616E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999992182755922	WITHOUT_CLASSIFICATION	7.817244077217822E-7	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999999355784145	WITHOUT_CLASSIFICATION	6.442158554009657E-8	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9999999163238988	WITHOUT_CLASSIFICATION	8.367610111689377E-8	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999994380488579	WITHOUT_CLASSIFICATION	5.619511421128782E-7	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.999999460146842	WITHOUT_CLASSIFICATION	5.398531579772994E-7	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9999913398686069	WITHOUT_CLASSIFICATION	8.660131393122597E-6	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9999995592485786	WITHOUT_CLASSIFICATION	4.4075142137670503E-7	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999999496117163	WITHOUT_CLASSIFICATION	5.038828366094748E-8	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999999981369758	WITHOUT_CLASSIFICATION	1.863024271014318E-9	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.999999932033122	WITHOUT_CLASSIFICATION	6.796687801293292E-8	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.999996180123208	WITHOUT_CLASSIFICATION	3.819876792004645E-6	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999995922909789	WITHOUT_CLASSIFICATION	4.0770902113194247E-7	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999532841743657	WITHOUT_CLASSIFICATION	4.6715825634302695E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.999996819721973	WITHOUT_CLASSIFICATION	3.1802780269694266E-6	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999993678703726	WITHOUT_CLASSIFICATION	6.321296274402663E-7	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999937484627649	WITHOUT_CLASSIFICATION	6.2515372351181194E-6	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999959127617273	WITHOUT_CLASSIFICATION	4.087238272743088E-6	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999997723006221	WITHOUT_CLASSIFICATION	2.2769937794957843E-7	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999998351083261	WITHOUT_CLASSIFICATION	1.6489167384816302E-7	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9999525608834076	WITHOUT_CLASSIFICATION	4.743911659243738E-5	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999999848498827	WITHOUT_CLASSIFICATION	1.5150117239698953E-8	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9999954313587646	WITHOUT_CLASSIFICATION	4.568641235343178E-6	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999975814014576	WITHOUT_CLASSIFICATION	2.418598542533557E-6	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999998036326364	WITHOUT_CLASSIFICATION	1.9636736362258282E-7	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999987966743946	WITHOUT_CLASSIFICATION	1.2033256052879586E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999987966743946	WITHOUT_CLASSIFICATION	1.2033256052879586E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9999882462120256	WITHOUT_CLASSIFICATION	1.1753787974291747E-5	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9999949523754583	WITHOUT_CLASSIFICATION	5.047624541701976E-6	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9999997411049121	WITHOUT_CLASSIFICATION	2.588950879235315E-7	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999998182741033	WITHOUT_CLASSIFICATION	1.8172589674335452E-7	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9999975392074274	WITHOUT_CLASSIFICATION	2.460792572679427E-6	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999992993110742	WITHOUT_CLASSIFICATION	7.006889257370045E-7	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9999999997809395	WITHOUT_CLASSIFICATION	2.1906052341396958E-10	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999215761618313	WITHOUT_CLASSIFICATION	7.842383816873174E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9999920994578446	WITHOUT_CLASSIFICATION	7.900542155362166E-6	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9999962512858042	WITHOUT_CLASSIFICATION	3.7487141959618996E-6	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9999950058438458	WITHOUT_CLASSIFICATION	4.994156154224066E-6	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9999999195996372	WITHOUT_CLASSIFICATION	8.040036286846069E-8	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9999975932828357	WITHOUT_CLASSIFICATION	2.406717164262803E-6	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999994814596036	WITHOUT_CLASSIFICATION	5.185403963591549E-7	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9955128247083602	WITHOUT_CLASSIFICATION	0.004487175291639825	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9999931691851375	WITHOUT_CLASSIFICATION	6.830814862475767E-6	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999984543974961	WITHOUT_CLASSIFICATION	1.5456025038366087E-6	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9999991607833651	WITHOUT_CLASSIFICATION	8.392166349899012E-7	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999988868136138	WITHOUT_CLASSIFICATION	1.1131863862576424E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9999983687263319	WITHOUT_CLASSIFICATION	1.6312736682060547E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999954477841375	WITHOUT_CLASSIFICATION	4.552215862430279E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999954477841375	WITHOUT_CLASSIFICATION	4.552215862430279E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999997304272458	WITHOUT_CLASSIFICATION	2.6957275422723097E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999989898320165	WITHOUT_CLASSIFICATION	1.0101679834405167E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371559674237	WITHOUT_CLASSIFICATION	6.284403257624435E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999403345448	WITHOUT_CLASSIFICATION	5.96654552905279E-8	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999998614482344	WITHOUT_CLASSIFICATION	1.385517656394139E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999999902622965	WITHOUT_CLASSIFICATION	9.737703491575738E-8	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9740434824518835	WITHOUT_CLASSIFICATION	0.02595651754811654	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999993573119099	WITHOUT_CLASSIFICATION	6.426880901868869E-7	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9999999980121114	WITHOUT_CLASSIFICATION	1.987888755279978E-9	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999953807518879	WITHOUT_CLASSIFICATION	4.619248112100412E-6	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999984501474278	WITHOUT_CLASSIFICATION	1.5498525721500736E-6	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999996613470336	WITHOUT_CLASSIFICATION	3.386529664858955E-7	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999999549558318	WITHOUT_CLASSIFICATION	4.504416820285569E-8	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9997681712171727	WITHOUT_CLASSIFICATION	2.318287828273196E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999997174819875	WITHOUT_CLASSIFICATION	2.8251801257012883E-7	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999999700224461	WITHOUT_CLASSIFICATION	2.9977553804797944E-8	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.999999972229952	WITHOUT_CLASSIFICATION	2.7770048067416532E-8	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999998888973819	WITHOUT_CLASSIFICATION	1.1110261805682607E-7	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.999995120506689	WITHOUT_CLASSIFICATION	4.879493310957358E-6	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9999835250897416	WITHOUT_CLASSIFICATION	1.6474910258369685E-5	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999987393455928	WITHOUT_CLASSIFICATION	1.2606544072424184E-6	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9999999936423342	WITHOUT_CLASSIFICATION	6.357665903809661E-9	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.999992886198374	WITHOUT_CLASSIFICATION	7.113801626044413E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9999916083120268	WITHOUT_CLASSIFICATION	8.391687973103482E-6	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999994847241207	WITHOUT_CLASSIFICATION	5.152758792941519E-7	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999152648698	WITHOUT_CLASSIFICATION	8.473513022332078E-8	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9999886304995909	WITHOUT_CLASSIFICATION	1.1369500409078973E-5	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999997510016696	WITHOUT_CLASSIFICATION	2.489983303822406E-7	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9994268714611119	WITHOUT_CLASSIFICATION	5.731285388881723E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992293208527	WITHOUT_CLASSIFICATION	7.706791473289726E-7	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999992293208527	WITHOUT_CLASSIFICATION	7.706791473289726E-7	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9999986830374843	WITHOUT_CLASSIFICATION	1.316962515749119E-6	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999989336273016	WITHOUT_CLASSIFICATION	1.0663726984032719E-6	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999999172167685	WITHOUT_CLASSIFICATION	8.278323149704056E-8	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999997951102934	WITHOUT_CLASSIFICATION	2.0488970661566343E-7	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9999910083060801	WITHOUT_CLASSIFICATION	8.99169391982553E-6	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999998805940943	WITHOUT_CLASSIFICATION	1.1940590569399871E-7	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999999373518652	WITHOUT_CLASSIFICATION	6.264813481532352E-8	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999999952140077	WITHOUT_CLASSIFICATION	4.785992283836009E-9	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.999999995339527	WITHOUT_CLASSIFICATION	4.660473017614304E-9	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999905152480336	WITHOUT_CLASSIFICATION	9.484751966415846E-6	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999999310631654	WITHOUT_CLASSIFICATION	6.893683462654928E-8	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999999866697041	WITHOUT_CLASSIFICATION	1.3330295823794379E-8	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999998181110157	WITHOUT_CLASSIFICATION	1.8188898425173715E-7	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999932815678603	WITHOUT_CLASSIFICATION	6.718432139651254E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999999497939575	WITHOUT_CLASSIFICATION	5.020604247504644E-8	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999986409621825	WITHOUT_CLASSIFICATION	1.3590378175344063E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340340819	WITHOUT_CLASSIFICATION	3.476596591807561E-5	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999998997524655	WITHOUT_CLASSIFICATION	1.002475344925441E-7	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999994990867497	WITHOUT_CLASSIFICATION	5.00913250362145E-7	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9997213666757264	WITHOUT_CLASSIFICATION	2.7863332427365125E-4	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999999551848904	WITHOUT_CLASSIFICATION	4.481510961035293E-8	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999990697828797	WITHOUT_CLASSIFICATION	9.302171203990091E-7	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.999993521176782	WITHOUT_CLASSIFICATION	6.478823218140205E-6	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999996727104288	WITHOUT_CLASSIFICATION	3.2728957126028237E-7	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999926313760074	WITHOUT_CLASSIFICATION	7.3686239925287475E-6	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999982095777107	WITHOUT_CLASSIFICATION	1.7904222892896945E-6	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999993892403195	WITHOUT_CLASSIFICATION	6.10759680480833E-7	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9997854708951994	WITHOUT_CLASSIFICATION	2.14529104800554E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999999373011698	WITHOUT_CLASSIFICATION	6.269883022679677E-8	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9999875549186154	WITHOUT_CLASSIFICATION	1.2445081384666074E-5	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9999888057205729	WITHOUT_CLASSIFICATION	1.1194279427149989E-5	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999990214148922	WITHOUT_CLASSIFICATION	9.785851078325778E-7	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999999377636664	WITHOUT_CLASSIFICATION	6.223633368263437E-8	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9999909118137349	WITHOUT_CLASSIFICATION	9.088186265062436E-6	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9999667732301344	WITHOUT_CLASSIFICATION	3.322676986563812E-5	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999749802368797	WITHOUT_CLASSIFICATION	2.5019763120263133E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999969820751594	WITHOUT_CLASSIFICATION	3.017924840530075E-6	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9935847291783043	WITHOUT_CLASSIFICATION	0.006415270821695724	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9999999223348672	WITHOUT_CLASSIFICATION	7.766513279673591E-8	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999989816525855	WITHOUT_CLASSIFICATION	1.0183474144886585E-6	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999999844470552	WITHOUT_CLASSIFICATION	1.555294479285644E-8	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999999969291463	WITHOUT_CLASSIFICATION	3.0708537876643812E-9	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999994003354182	WITHOUT_CLASSIFICATION	5.996645817501425E-7	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999991683264989	WITHOUT_CLASSIFICATION	8.31673501046094E-7	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999793819368205	WITHOUT_CLASSIFICATION	2.0618063179499604E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999997927867722	WITHOUT_CLASSIFICATION	2.0721322774669456E-7	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999996010666171	WITHOUT_CLASSIFICATION	3.989333829318934E-7	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893796	WITHOUT_CLASSIFICATION	5.106204065526806E-10	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999998809435753	WITHOUT_CLASSIFICATION	1.1905642478435109E-7	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999998283487312	WITHOUT_CLASSIFICATION	1.716512688988496E-7	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999745492686863	WITHOUT_CLASSIFICATION	2.545073131369984E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999592373822074	WITHOUT_CLASSIFICATION	4.076261779270867E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999778777171862	WITHOUT_CLASSIFICATION	2.212228281376626E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999793678883365	WITHOUT_CLASSIFICATION	2.06321116635603E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999928458064948	WITHOUT_CLASSIFICATION	7.154193505200562E-6	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.999998870119853	WITHOUT_CLASSIFICATION	1.1298801470284201E-6	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999979810686668	WITHOUT_CLASSIFICATION	2.018931333286582E-6	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9999971089280768	WITHOUT_CLASSIFICATION	2.8910719231592715E-6	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999991812955563	WITHOUT_CLASSIFICATION	8.187044437288529E-7	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999992490379026	WITHOUT_CLASSIFICATION	7.509620974018074E-7	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999893863487561	WITHOUT_CLASSIFICATION	1.0613651243922554E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999745492686863	WITHOUT_CLASSIFICATION	2.545073131369984E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999778777171862	WITHOUT_CLASSIFICATION	2.212228281376626E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999592373822074	WITHOUT_CLASSIFICATION	4.076261779270867E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9999587880502709	WITHOUT_CLASSIFICATION	4.121194972897449E-5	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999956056253753	WITHOUT_CLASSIFICATION	4.394374624745425E-6	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999986122115455	WITHOUT_CLASSIFICATION	1.387788454592622E-6	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999998051583819	WITHOUT_CLASSIFICATION	1.9484161816466795E-7	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999994802582397	WITHOUT_CLASSIFICATION	5.197417602654565E-7	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.99999997710739	WITHOUT_CLASSIFICATION	2.2892610018880636E-8	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999995979847963	WITHOUT_CLASSIFICATION	4.020152037128559E-7	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999999839734195	WITHOUT_CLASSIFICATION	1.6026580467043988E-8	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.999996047976595	WITHOUT_CLASSIFICATION	3.952023404989064E-6	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999999252368743	WITHOUT_CLASSIFICATION	7.476312571248286E-8	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999998781701248	WITHOUT_CLASSIFICATION	1.2182987531543536E-7	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9994488616451683	WITHOUT_CLASSIFICATION	5.511383548317179E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999997219663534	WITHOUT_CLASSIFICATION	2.780336465603083E-7	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.999999896478542	WITHOUT_CLASSIFICATION	1.0352145800681159E-7	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999526050165614	WITHOUT_CLASSIFICATION	4.739498343862902E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999996821535589	WITHOUT_CLASSIFICATION	3.1784644114981706E-7	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.999994586754194	WITHOUT_CLASSIFICATION	5.413245805950994E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999986636552908	WITHOUT_CLASSIFICATION	1.3363447092758802E-6	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999986636552908	WITHOUT_CLASSIFICATION	1.3363447092758802E-6	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9999998524328237	WITHOUT_CLASSIFICATION	1.475671762687436E-7	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999999966793717	WITHOUT_CLASSIFICATION	3.3206282022546422E-9	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999999840081542	WITHOUT_CLASSIFICATION	1.599184586604185E-8	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9999669983704637	WITHOUT_CLASSIFICATION	3.300162953643419E-5	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999997777674574	WITHOUT_CLASSIFICATION	2.2223254256063195E-7	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999999997955344	WITHOUT_CLASSIFICATION	2.0446549232626335E-10	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999999910715465	WITHOUT_CLASSIFICATION	8.928453530463568E-9	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999997231018527	WITHOUT_CLASSIFICATION	2.7689814738724737E-7	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999999706063213	WITHOUT_CLASSIFICATION	2.9393678753949745E-8	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999999029838527	WITHOUT_CLASSIFICATION	9.701614742880575E-8	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9999997411680038	WITHOUT_CLASSIFICATION	2.5883199625843037E-7	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999987196710123	WITHOUT_CLASSIFICATION	1.2803289877246846E-6	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9999984968807512	WITHOUT_CLASSIFICATION	1.5031192489080619E-6	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9999964331683237	WITHOUT_CLASSIFICATION	3.566831676357438E-6	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999972339573864	WITHOUT_CLASSIFICATION	2.7660426136293825E-6	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613410844	WITHOUT_CLASSIFICATION	3.865891564143439E-8	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553938808	WITHOUT_CLASSIFICATION	2.446061193200098E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999973211713333	WITHOUT_CLASSIFICATION	2.678828666610714E-6	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999997815202033	WITHOUT_CLASSIFICATION	2.1847979670988985E-6	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999887426211426	WITHOUT_CLASSIFICATION	1.1257378857321943E-5	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999997256794755	WITHOUT_CLASSIFICATION	2.7432052454132465E-7	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999993866606958	WITHOUT_CLASSIFICATION	6.133393042874549E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999383795	WITHOUT_CLASSIFICATION	6.162057023279707E-11	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999383795	WITHOUT_CLASSIFICATION	6.162057023279707E-11	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9999984794078676	WITHOUT_CLASSIFICATION	1.5205921324683615E-6	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999996035987995	WITHOUT_CLASSIFICATION	3.964012004754658E-7	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9999935105384974	WITHOUT_CLASSIFICATION	6.489461502636054E-6	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.999865787418016	WITHOUT_CLASSIFICATION	1.3421258198402652E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999781571782005	WITHOUT_CLASSIFICATION	2.1842821799474132E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999781571782005	WITHOUT_CLASSIFICATION	2.1842821799474132E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999999551514579	WITHOUT_CLASSIFICATION	4.4848541996666005E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621135501738	WITHOUT_CLASSIFICATION	3.7886449826084275E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044578084	WITHOUT_CLASSIFICATION	2.9554219169583367E-7	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9999999133815811	WITHOUT_CLASSIFICATION	8.661841883574165E-8	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364912	WITHOUT_CLASSIFICATION	6.350879159837429E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596581787	WITHOUT_CLASSIFICATION	4.03418213546997E-8	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.999949154243828	WITHOUT_CLASSIFICATION	5.0845756172060106E-5	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999993439107685	WITHOUT_CLASSIFICATION	6.56089231449511E-7	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9999937784414655	WITHOUT_CLASSIFICATION	6.221558534401672E-6	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999999998749067	WITHOUT_CLASSIFICATION	1.2509325906719592E-10	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9992209373249293	WITHOUT_CLASSIFICATION	7.790626750706777E-4	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9999999378083387	WITHOUT_CLASSIFICATION	6.21916612983994E-8	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999977485959589	WITHOUT_CLASSIFICATION	2.251404040996578E-6	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.999999948535885	WITHOUT_CLASSIFICATION	5.146411499990028E-8	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613410844	WITHOUT_CLASSIFICATION	3.865891564143439E-8	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999383795	WITHOUT_CLASSIFICATION	6.162057023279707E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596581787	WITHOUT_CLASSIFICATION	4.03418213546997E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423531683648	WITHOUT_CLASSIFICATION	1.5764683163523426E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423531683648	WITHOUT_CLASSIFICATION	1.5764683163523426E-4	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9999995373170852	WITHOUT_CLASSIFICATION	4.6268291483236477E-7	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999999998464827	WITHOUT_CLASSIFICATION	1.5351724125439615E-10	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999999943196655	WITHOUT_CLASSIFICATION	5.680334552118195E-9	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999999470579872	WITHOUT_CLASSIFICATION	5.2942012820151055E-8	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.999998952406686	WITHOUT_CLASSIFICATION	1.0475933139914535E-6	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.999999876190996	WITHOUT_CLASSIFICATION	1.2380900393521408E-7	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9999456322750273	WITHOUT_CLASSIFICATION	5.436772497268702E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999852370873247	WITHOUT_CLASSIFICATION	1.4762912675450147E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999964666003	WITHOUT_CLASSIFICATION	3.533399707049546E-9	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999659127484	WITHOUT_CLASSIFICATION	3.408725155857975E-8	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9999998682264302	WITHOUT_CLASSIFICATION	1.3177356985815735E-7	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999999984891113	WITHOUT_CLASSIFICATION	1.510888643953123E-9	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999974111409577	WITHOUT_CLASSIFICATION	2.5888590422841336E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553938808	WITHOUT_CLASSIFICATION	2.446061193200098E-7	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999383795	WITHOUT_CLASSIFICATION	6.162057023279707E-11	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621135501738	WITHOUT_CLASSIFICATION	3.7886449826084275E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044578084	WITHOUT_CLASSIFICATION	2.9554219169583367E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044578084	WITHOUT_CLASSIFICATION	2.9554219169583367E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364912	WITHOUT_CLASSIFICATION	6.350879159837429E-11	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596581787	WITHOUT_CLASSIFICATION	4.03418213546997E-8	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999999596581787	WITHOUT_CLASSIFICATION	4.03418213546997E-8	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423531683648	WITHOUT_CLASSIFICATION	1.5764683163523426E-4	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999996175994297	WITHOUT_CLASSIFICATION	3.8240057039206443E-7	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9999941321720409	WITHOUT_CLASSIFICATION	5.8678279590679365E-6	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999995867432836	WITHOUT_CLASSIFICATION	4.1325671642958883E-7	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844750848	WITHOUT_CLASSIFICATION	1.552491517867467E-8	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999975277378436	WITHOUT_CLASSIFICATION	2.4722621564089767E-6	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9999442027069165	WITHOUT_CLASSIFICATION	5.5797293083470404E-5	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.999999880420847	WITHOUT_CLASSIFICATION	1.195791529734346E-7	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9999999269131915	WITHOUT_CLASSIFICATION	7.30868084693558E-8	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999999805824306	WITHOUT_CLASSIFICATION	1.941756943594551E-8	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621135501738	WITHOUT_CLASSIFICATION	3.7886449826084275E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044578084	WITHOUT_CLASSIFICATION	2.9554219169583367E-7	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9999997044578084	WITHOUT_CLASSIFICATION	2.9554219169583367E-7	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364912	WITHOUT_CLASSIFICATION	6.350879159837429E-11	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9999852370873247	WITHOUT_CLASSIFICATION	1.4762912675450147E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999999659127484	WITHOUT_CLASSIFICATION	3.408725155857975E-8	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999955898522103	WITHOUT_CLASSIFICATION	4.410147789717171E-6	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.99999992699426	WITHOUT_CLASSIFICATION	7.300574007239475E-8	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999992944186862	WITHOUT_CLASSIFICATION	7.055813137802903E-7	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999992944186862	WITHOUT_CLASSIFICATION	7.055813137802903E-7	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.999997198335615	WITHOUT_CLASSIFICATION	2.8016643850556523E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999987571245191	WITHOUT_CLASSIFICATION	1.2428754808392356E-6	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.99999979184991	WITHOUT_CLASSIFICATION	2.0815009007099174E-7	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999986726293718	WITHOUT_CLASSIFICATION	1.3273706281194348E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999800785886	WITHOUT_CLASSIFICATION	1.9921411406492113E-8	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999999800785886	WITHOUT_CLASSIFICATION	1.9921411406492113E-8	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999997781253315	WITHOUT_CLASSIFICATION	2.2187466853930554E-7	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999997781253315	WITHOUT_CLASSIFICATION	2.2187466853930554E-7	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999097755016	WITHOUT_CLASSIFICATION	9.02244984358109E-8	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999999097755016	WITHOUT_CLASSIFICATION	9.02244984358109E-8	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999986397248513	WITHOUT_CLASSIFICATION	1.3602751486933007E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999879904259366	WITHOUT_CLASSIFICATION	1.2009574063391309E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9999952570455072	WITHOUT_CLASSIFICATION	4.742954492853035E-6	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999989178685916	WITHOUT_CLASSIFICATION	1.0821314083699666E-6	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999995439087759	WITHOUT_CLASSIFICATION	4.5609122414927214E-7	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999998199932653	WITHOUT_CLASSIFICATION	1.8000673462239938E-7	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999999130982197	WITHOUT_CLASSIFICATION	8.690178041083216E-8	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999999840044624	WITHOUT_CLASSIFICATION	1.5995537606061015E-8	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9999999659055293	WITHOUT_CLASSIFICATION	3.40944707957803E-8	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999997936308015	WITHOUT_CLASSIFICATION	2.0636919856065385E-7	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999998105143372	WITHOUT_CLASSIFICATION	1.8948566283905755E-7	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999983425913546	WITHOUT_CLASSIFICATION	1.6574086454116624E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9999693059579935	WITHOUT_CLASSIFICATION	3.069404200648404E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999852249321981	WITHOUT_CLASSIFICATION	1.4775067801901654E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999852249321981	WITHOUT_CLASSIFICATION	1.4775067801901654E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9999992179147714	WITHOUT_CLASSIFICATION	7.820852285631946E-7	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.999999902622965	WITHOUT_CLASSIFICATION	9.737703491575738E-8	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9998789148080341	WITHOUT_CLASSIFICATION	1.2108519196586474E-4	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999999780403463	WITHOUT_CLASSIFICATION	2.1959653728310544E-8	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.999999977168092	WITHOUT_CLASSIFICATION	2.2831908092817943E-8	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999618790948	WITHOUT_CLASSIFICATION	3.812090525036135E-8	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999698824255	WITHOUT_CLASSIFICATION	3.011757451059786E-8	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999998662146389	WITHOUT_CLASSIFICATION	1.337853611042493E-6	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999996312573358	WITHOUT_CLASSIFICATION	3.687426642063942E-7	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999933596874374	WITHOUT_CLASSIFICATION	6.640312562509075E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997772330488	WITHOUT_CLASSIFICATION	2.2276695123027309E-7	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9998250546518219	WITHOUT_CLASSIFICATION	1.749453481780096E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9999996357872806	WITHOUT_CLASSIFICATION	3.642127194225493E-7	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999974835061074	WITHOUT_CLASSIFICATION	2.5164938925831155E-6	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9999989348566035	WITHOUT_CLASSIFICATION	1.0651433964216816E-6	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999978323618072	WITHOUT_CLASSIFICATION	2.167638192726855E-6	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999861042842592	WITHOUT_CLASSIFICATION	1.3895715740824444E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999999864816467	WITHOUT_CLASSIFICATION	1.3518353353467253E-8	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200405437	WITHOUT_CLASSIFICATION	2.799594563323347E-7	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200405437	WITHOUT_CLASSIFICATION	2.799594563323347E-7	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999997146051989	WITHOUT_CLASSIFICATION	2.853948010505922E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992003451266	WITHOUT_CLASSIFICATION	7.996548733760437E-7	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999783103115917	WITHOUT_CLASSIFICATION	2.1689688408247343E-5	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9999783103115917	WITHOUT_CLASSIFICATION	2.1689688408247343E-5	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9999988302521268	WITHOUT_CLASSIFICATION	1.1697478732402716E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9999994384883676	WITHOUT_CLASSIFICATION	5.615116323769511E-7	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999985135587359	WITHOUT_CLASSIFICATION	1.486441264032813E-6	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999974022754251	WITHOUT_CLASSIFICATION	2.5977245749560848E-6	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999992524830487	WITHOUT_CLASSIFICATION	7.475169513183018E-7	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999983203427825	WITHOUT_CLASSIFICATION	1.6796572175034375E-6	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999983203427825	WITHOUT_CLASSIFICATION	1.6796572175034375E-6	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999999672130769	WITHOUT_CLASSIFICATION	3.2786923097431023E-7	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999994413312049	WITHOUT_CLASSIFICATION	5.58668795016009E-7	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999996897573308	WITHOUT_CLASSIFICATION	3.102426692079444E-7	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.999999575759943	WITHOUT_CLASSIFICATION	4.2424005698341625E-7	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9999992003451266	WITHOUT_CLASSIFICATION	7.996548733760437E-7	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.999999289011151	WITHOUT_CLASSIFICATION	7.109888490950213E-7	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999980984536294	WITHOUT_CLASSIFICATION	1.9015463704913572E-6	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9999980984536294	WITHOUT_CLASSIFICATION	1.9015463704913572E-6	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063220095	WITHOUT_CLASSIFICATION	5.93677990619264E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929847274	WITHOUT_CLASSIFICATION	6.707015272676598E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929847274	WITHOUT_CLASSIFICATION	6.707015272676598E-6	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9999932929847274	WITHOUT_CLASSIFICATION	6.707015272676598E-6	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063220095	WITHOUT_CLASSIFICATION	5.93677990619264E-7	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999999071997407	WITHOUT_CLASSIFICATION	9.280025926721069E-8	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999957128347811	WITHOUT_CLASSIFICATION	4.2871652189329094E-6	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9999882324004793	WITHOUT_CLASSIFICATION	1.176759952062501E-5	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.999999170798154	WITHOUT_CLASSIFICATION	8.292018458534609E-7	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9999982323028459	WITHOUT_CLASSIFICATION	1.767697154071426E-6	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999043461211	WITHOUT_CLASSIFICATION	9.565387898818755E-8	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999999890166991	WITHOUT_CLASSIFICATION	1.0983300894119479E-8	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9999947693501714	WITHOUT_CLASSIFICATION	5.2306498285248295E-6	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999997772330488	WITHOUT_CLASSIFICATION	2.2276695123027309E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.999999968547448	WITHOUT_CLASSIFICATION	3.1452551941266325E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987319509334	WITHOUT_CLASSIFICATION	1.2680490666179885E-6	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995498734237	WITHOUT_CLASSIFICATION	4.5012657633028826E-7	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998531851207405	WITHOUT_CLASSIFICATION	1.468148792594987E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999999656383407	WITHOUT_CLASSIFICATION	3.4361659193562574E-8	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999991248534721	WITHOUT_CLASSIFICATION	8.751465278132921E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999999459190918	WITHOUT_CLASSIFICATION	5.408090826634424E-8	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999996786932298	WITHOUT_CLASSIFICATION	3.213067702271936E-7	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999471814072	WITHOUT_CLASSIFICATION	5.2818592875876696E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998920092053103	WITHOUT_CLASSIFICATION	1.0799079468980791E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9999957683139246	WITHOUT_CLASSIFICATION	4.231686075456694E-6	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999997828574987	WITHOUT_CLASSIFICATION	2.171425012988356E-7	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999993766889674	WITHOUT_CLASSIFICATION	6.23311032507022E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999812843603	WITHOUT_CLASSIFICATION	1.8715639665057773E-8	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999999989686899	WITHOUT_CLASSIFICATION	1.0313101637200011E-9	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269374317	WITHOUT_CLASSIFICATION	1.1730625683837186E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269374317	WITHOUT_CLASSIFICATION	1.1730625683837186E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999988269374317	WITHOUT_CLASSIFICATION	1.1730625683837186E-6	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999997599088545	WITHOUT_CLASSIFICATION	2.40091145573412E-7	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999993421266642	WITHOUT_CLASSIFICATION	6.578733358707451E-7	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999998156613461	WITHOUT_CLASSIFICATION	1.8433865386807124E-7	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9990608517552668	WITHOUT_CLASSIFICATION	9.391482447330984E-4	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999999961894551	WITHOUT_CLASSIFICATION	3.810544946791898E-9	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999999965333203	WITHOUT_CLASSIFICATION	3.4666797089090857E-9	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999999999943057	WITHOUT_CLASSIFICATION	5.6944057684872756E-12	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999999873727574	WITHOUT_CLASSIFICATION	1.2627242636373101E-8	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999999835433471	WITHOUT_CLASSIFICATION	1.6456652904872802E-8	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999991573171491	WITHOUT_CLASSIFICATION	8.426828508620928E-7	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999961878250385	WITHOUT_CLASSIFICATION	3.812174961428708E-6	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9999553495854567	WITHOUT_CLASSIFICATION	4.465041454339895E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999999672130769	WITHOUT_CLASSIFICATION	3.2786923097431023E-7	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999999972237791	WITHOUT_CLASSIFICATION	2.776220882147704E-9	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9999994063220095	WITHOUT_CLASSIFICATION	5.93677990619264E-7	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9999999043461211	WITHOUT_CLASSIFICATION	9.565387898818755E-8	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999987319509334	WITHOUT_CLASSIFICATION	1.2680490666179885E-6	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998531851207405	WITHOUT_CLASSIFICATION	1.468148792594987E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9999991248534721	WITHOUT_CLASSIFICATION	8.751465278132921E-7	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999995498734237	WITHOUT_CLASSIFICATION	4.5012657633028826E-7	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999999459190918	WITHOUT_CLASSIFICATION	5.408090826634424E-8	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9998920092053103	WITHOUT_CLASSIFICATION	1.0799079468980791E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9999999471814072	WITHOUT_CLASSIFICATION	5.2818592875876696E-8	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999997828574987	WITHOUT_CLASSIFICATION	2.171425012988356E-7	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.999999567681018	WITHOUT_CLASSIFICATION	4.3231898192626214E-7	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9999966371953068	WITHOUT_CLASSIFICATION	3.3628046930412736E-6	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999974849034245	WITHOUT_CLASSIFICATION	2.5150965753982874E-6	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999999000905201	WITHOUT_CLASSIFICATION	9.990947986760232E-8	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999996003334546	WITHOUT_CLASSIFICATION	3.996665454769057E-7	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999988468914044	WITHOUT_CLASSIFICATION	1.1531085955602926E-6	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999974131740992	WITHOUT_CLASSIFICATION	2.58682590075399E-6	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9998326060675061	WITHOUT_CLASSIFICATION	1.673939324938789E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999718143938784	WITHOUT_CLASSIFICATION	2.8185606121507035E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999994447917109	WITHOUT_CLASSIFICATION	5.552082890769319E-7	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999998462203126	WITHOUT_CLASSIFICATION	1.5377968752582254E-7	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748216	WITHOUT_CLASSIFICATION	2.9251783584006055E-9	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658202808	WITHOUT_CLASSIFICATION	2.3417971924652522E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951292452673	WITHOUT_CLASSIFICATION	4.8707547326003165E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999488399255	WITHOUT_CLASSIFICATION	5.11600744827057E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998072390912	WITHOUT_CLASSIFICATION	1.9276090871169323E-7	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999984054015824	WITHOUT_CLASSIFICATION	1.594598417679301E-6	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999994337433668	WITHOUT_CLASSIFICATION	5.662566331734117E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.999998282158384	WITHOUT_CLASSIFICATION	1.7178416159609247E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999827806363	WITHOUT_CLASSIFICATION	1.7219363721237494E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9999865176723225	WITHOUT_CLASSIFICATION	1.348232767738518E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999974497603	WITHOUT_CLASSIFICATION	2.5502397393148332E-9	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838850589	WITHOUT_CLASSIFICATION	6.341611494112487E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838850589	WITHOUT_CLASSIFICATION	6.341611494112487E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838850589	WITHOUT_CLASSIFICATION	6.341611494112487E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164200759	WITHOUT_CLASSIFICATION	4.5383579924148344E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164200759	WITHOUT_CLASSIFICATION	4.5383579924148344E-5	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9999313784175862	WITHOUT_CLASSIFICATION	6.862158241385517E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.999978645974139	WITHOUT_CLASSIFICATION	2.1354025860930072E-5	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999999974497603	WITHOUT_CLASSIFICATION	2.5502397393148332E-9	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994583731872	WITHOUT_CLASSIFICATION	5.416268129174703E-7	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838850589	WITHOUT_CLASSIFICATION	6.341611494112487E-5	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9999365838850589	WITHOUT_CLASSIFICATION	6.341611494112487E-5	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9999546164200759	WITHOUT_CLASSIFICATION	4.5383579924148344E-5	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.999978645974139	WITHOUT_CLASSIFICATION	2.1354025860930072E-5	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999995227800678	WITHOUT_CLASSIFICATION	4.772199321551732E-7	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9999995227800678	WITHOUT_CLASSIFICATION	4.772199321551732E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998365533617	WITHOUT_CLASSIFICATION	1.634466382987687E-7	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999998365533617	WITHOUT_CLASSIFICATION	1.634466382987687E-7	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999968565632199	WITHOUT_CLASSIFICATION	3.1434367800115115E-6	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999968565632199	WITHOUT_CLASSIFICATION	3.1434367800115115E-6	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999969388694869	WITHOUT_CLASSIFICATION	3.061130513125013E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999992319713172	WITHOUT_CLASSIFICATION	7.680286828061827E-7	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9999992319713172	WITHOUT_CLASSIFICATION	7.680286828061827E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999996650117259	WITHOUT_CLASSIFICATION	3.34988274171279E-7	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999996650117259	WITHOUT_CLASSIFICATION	3.34988274171279E-7	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.999999956714749	WITHOUT_CLASSIFICATION	4.3285250943793253E-8	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996810453584	WITHOUT_CLASSIFICATION	3.189546414864547E-7	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999996810453584	WITHOUT_CLASSIFICATION	3.189546414864547E-7	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995250786828	WITHOUT_CLASSIFICATION	4.749213170853595E-7	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9999870462546623	WITHOUT_CLASSIFICATION	1.2953745337774082E-5	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999989548405499	WITHOUT_CLASSIFICATION	1.0451594501062516E-6	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999995250786828	WITHOUT_CLASSIFICATION	4.749213170853595E-7	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9999979341753559	WITHOUT_CLASSIFICATION	2.065824644186023E-6	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248083185	WITHOUT_CLASSIFICATION	5.751916815668771E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248083185	WITHOUT_CLASSIFICATION	5.751916815668771E-7	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248083185	WITHOUT_CLASSIFICATION	5.751916815668771E-7	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999997982702755	WITHOUT_CLASSIFICATION	2.0172972438609122E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997761536954	WITHOUT_CLASSIFICATION	2.2384630455060773E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999930553714	WITHOUT_CLASSIFICATION	6.944628624696855E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999862899425	WITHOUT_CLASSIFICATION	1.3710057415973238E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999832407455	WITHOUT_CLASSIFICATION	1.6759254525808467E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999445613142	WITHOUT_CLASSIFICATION	5.5438685690202335E-8	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999999842243735	WITHOUT_CLASSIFICATION	1.577562650548979E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994849034908	WITHOUT_CLASSIFICATION	5.150965092595557E-7	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999994849034908	WITHOUT_CLASSIFICATION	5.150965092595557E-7	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999998287622077	WITHOUT_CLASSIFICATION	1.71237792264653E-7	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232825071	WITHOUT_CLASSIFICATION	5.247671749293049E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232825071	WITHOUT_CLASSIFICATION	5.247671749293049E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999994248083185	WITHOUT_CLASSIFICATION	5.751916815668771E-7	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999997761536954	WITHOUT_CLASSIFICATION	2.2384630455060773E-7	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999999930553714	WITHOUT_CLASSIFICATION	6.944628624696855E-9	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999999862899425	WITHOUT_CLASSIFICATION	1.3710057415973238E-8	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999999832407455	WITHOUT_CLASSIFICATION	1.6759254525808467E-8	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999999445613142	WITHOUT_CLASSIFICATION	5.5438685690202335E-8	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232825071	WITHOUT_CLASSIFICATION	5.247671749293049E-5	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9999992951633174	WITHOUT_CLASSIFICATION	7.048366825322821E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987434629111	WITHOUT_CLASSIFICATION	1.2565370888632096E-6	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9999991952732866	WITHOUT_CLASSIFICATION	8.047267134547143E-7	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999999489816507	WITHOUT_CLASSIFICATION	5.101834920776599E-8	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999981190755709	WITHOUT_CLASSIFICATION	1.8809244291167324E-6	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993964417965	WITHOUT_CLASSIFICATION	6.035582036134898E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995575005177	WITHOUT_CLASSIFICATION	4.4249948238387986E-7	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999995575005177	WITHOUT_CLASSIFICATION	4.4249948238387986E-7	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9999979043678483	WITHOUT_CLASSIFICATION	2.0956321518235347E-6	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999978371828887	WITHOUT_CLASSIFICATION	2.162817111339677E-6	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999847745796911	WITHOUT_CLASSIFICATION	1.5225420308871148E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999993529658039	WITHOUT_CLASSIFICATION	6.470341960824313E-7	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999943582297688	WITHOUT_CLASSIFICATION	5.641770231287638E-6	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999943582297688	WITHOUT_CLASSIFICATION	5.641770231287638E-6	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999998767777264	WITHOUT_CLASSIFICATION	1.2322227356516789E-7	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999998376086114	WITHOUT_CLASSIFICATION	1.6239138851421183E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999997100816331	WITHOUT_CLASSIFICATION	2.8991836677626366E-7	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999997100816331	WITHOUT_CLASSIFICATION	2.8991836677626366E-7	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999991227913896	WITHOUT_CLASSIFICATION	8.772086103249632E-7	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999983900565419	WITHOUT_CLASSIFICATION	1.6099434581384561E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999999842243735	WITHOUT_CLASSIFICATION	1.577562650548979E-7	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999996947606545	WITHOUT_CLASSIFICATION	3.05239345427795E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997809540225	WITHOUT_CLASSIFICATION	2.1904597741489713E-7	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979095229	WITHOUT_CLASSIFICATION	1.1020904771570836E-6	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999998860559529	WITHOUT_CLASSIFICATION	1.1394404708368843E-7	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9999923158028529	WITHOUT_CLASSIFICATION	7.684197147091898E-6	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.999999716257579	WITHOUT_CLASSIFICATION	2.8374242098286497E-7	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9999952616501433	WITHOUT_CLASSIFICATION	4.738349856762698E-6	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999999990078707	WITHOUT_CLASSIFICATION	9.921292746838432E-10	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999397825492	WITHOUT_CLASSIFICATION	6.021745082306371E-8	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9999999397825492	WITHOUT_CLASSIFICATION	6.021745082306371E-8	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998678544152	WITHOUT_CLASSIFICATION	1.321455848010075E-7	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9999998678544152	WITHOUT_CLASSIFICATION	1.321455848010075E-7	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.999999978866775	WITHOUT_CLASSIFICATION	2.1133224938701328E-8	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999921193333643	WITHOUT_CLASSIFICATION	7.88066663569667E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999921193333643	WITHOUT_CLASSIFICATION	7.88066663569667E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999921193333643	WITHOUT_CLASSIFICATION	7.88066663569667E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999270010036	WITHOUT_CLASSIFICATION	7.299899644796346E-8	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999999270010036	WITHOUT_CLASSIFICATION	7.299899644796346E-8	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998826643459	WITHOUT_CLASSIFICATION	1.173356541232007E-7	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9998768770660339	WITHOUT_CLASSIFICATION	1.2312293396619277E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996738083357	WITHOUT_CLASSIFICATION	3.2619166439174526E-7	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999999922371888	WITHOUT_CLASSIFICATION	7.762811199378121E-9	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999633556409286	WITHOUT_CLASSIFICATION	3.6644359071339106E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9999991147176645	WITHOUT_CLASSIFICATION	8.85282335577961E-7	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9999921377573082	WITHOUT_CLASSIFICATION	7.862242691736604E-6	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9999998826643459	WITHOUT_CLASSIFICATION	1.173356541232007E-7	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999310248153	WITHOUT_CLASSIFICATION	6.897518474307543E-8	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9998768770660339	WITHOUT_CLASSIFICATION	1.2312293396619277E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999996738083357	WITHOUT_CLASSIFICATION	3.2619166439174526E-7	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999453950149	WITHOUT_CLASSIFICATION	5.460498506562248E-8	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999998748338658	WITHOUT_CLASSIFICATION	1.251661343036512E-7	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777296411	WITHOUT_CLASSIFICATION	2.227035886715688E-8	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9999883159398592	WITHOUT_CLASSIFICATION	1.1684060140834092E-5	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999978572548035	WITHOUT_CLASSIFICATION	2.142745196433238E-6	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999995853859619	WITHOUT_CLASSIFICATION	4.146140380926552E-7	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9999974742789364	WITHOUT_CLASSIFICATION	2.5257210635293673E-6	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9999999453950149	WITHOUT_CLASSIFICATION	5.460498506562248E-8	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983756500128	WITHOUT_CLASSIFICATION	1.624349987069286E-6	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999983756500128	WITHOUT_CLASSIFICATION	1.624349987069286E-6	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.999991543206402	WITHOUT_CLASSIFICATION	8.456793597923016E-6	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999961323359315	WITHOUT_CLASSIFICATION	3.86766406849945E-6	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999725532476264	WITHOUT_CLASSIFICATION	2.7446752373589802E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989935066016	WITHOUT_CLASSIFICATION	1.0064933984607978E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999023682943	WITHOUT_CLASSIFICATION	9.763170576713153E-8	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999999988318767	WITHOUT_CLASSIFICATION	1.1681232353282136E-9	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9999998308510155	WITHOUT_CLASSIFICATION	1.6914898448193533E-7	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999997121043933	WITHOUT_CLASSIFICATION	2.878956067614597E-7	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999997005139091	WITHOUT_CLASSIFICATION	2.994860909050608E-7	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999997196138388	WITHOUT_CLASSIFICATION	2.803861611388227E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129966113	WITHOUT_CLASSIFICATION	2.8700338873915194E-7	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9999989935066016	WITHOUT_CLASSIFICATION	1.0064933984607978E-6	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9999999023682943	WITHOUT_CLASSIFICATION	9.763170576713153E-8	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9999963161472336	WITHOUT_CLASSIFICATION	3.6838527663784255E-6	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999999047689201	WITHOUT_CLASSIFICATION	9.523107993685698E-8	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9999993396030361	WITHOUT_CLASSIFICATION	6.60396963892119E-7	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9999970822676985	WITHOUT_CLASSIFICATION	2.9177323015764366E-6	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9999997057083213	WITHOUT_CLASSIFICATION	2.9429167873906004E-7	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9999786286014348	WITHOUT_CLASSIFICATION	2.1371398565224562E-5	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9999806509756644	WITHOUT_CLASSIFICATION	1.9349024335618038E-5	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999997275626794	WITHOUT_CLASSIFICATION	2.72437320534863E-7	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999955627734064	WITHOUT_CLASSIFICATION	4.437226593635302E-6	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9999997523559258	WITHOUT_CLASSIFICATION	2.476440742746873E-7	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9999914197433646	WITHOUT_CLASSIFICATION	8.58025663549502E-6	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999997146407654	WITHOUT_CLASSIFICATION	2.8535923460962733E-7	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999993140552016	WITHOUT_CLASSIFICATION	6.85944798366003E-7	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999997164824508	WITHOUT_CLASSIFICATION	2.8351754927422013E-7	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999868069881073	WITHOUT_CLASSIFICATION	1.3193011892761971E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999998837388469	WITHOUT_CLASSIFICATION	1.162611530997956E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999822917763556	WITHOUT_CLASSIFICATION	1.770822364443268E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999886970145	WITHOUT_CLASSIFICATION	1.1302985545775903E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999886722515	WITHOUT_CLASSIFICATION	1.1327748510581423E-8	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999995399181537	WITHOUT_CLASSIFICATION	4.60081846268238E-7	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999822917763556	WITHOUT_CLASSIFICATION	1.770822364443268E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999999886970145	WITHOUT_CLASSIFICATION	1.1302985545775903E-8	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999999886722515	WITHOUT_CLASSIFICATION	1.1327748510581423E-8	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999937711683512	WITHOUT_CLASSIFICATION	6.228831648814463E-6	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999998873279048	WITHOUT_CLASSIFICATION	1.1267209519961874E-6	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9999975925936735	WITHOUT_CLASSIFICATION	2.407406326606811E-6	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9999850095786327	WITHOUT_CLASSIFICATION	1.4990421367261752E-5	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9997532371205947	WITHOUT_CLASSIFICATION	2.467628794053706E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999949701168204	WITHOUT_CLASSIFICATION	5.029883179618701E-6	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999084473491763	WITHOUT_CLASSIFICATION	9.155265082375804E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999999992821316	WITHOUT_CLASSIFICATION	7.178685018329932E-10	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999996932885332	WITHOUT_CLASSIFICATION	3.067114667777883E-7	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999996590138591	WITHOUT_CLASSIFICATION	3.409861409453765E-7	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9695994258220956	WITHOUT_CLASSIFICATION	0.030400574177904358	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9999999573337	WITHOUT_CLASSIFICATION	4.266630002089606E-8	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9999999030353883	WITHOUT_CLASSIFICATION	9.696461170768516E-8	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999999739864461	WITHOUT_CLASSIFICATION	2.6013553893872963E-8	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9999997806789589	WITHOUT_CLASSIFICATION	2.193210411228742E-7	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999999686611551	WITHOUT_CLASSIFICATION	3.1338844833492666E-8	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9999974524324216	WITHOUT_CLASSIFICATION	2.5475675784594784E-6	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999911315075309	WITHOUT_CLASSIFICATION	8.868492469062204E-6	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999729363421	WITHOUT_CLASSIFICATION	2.7063657870617183E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999877206883	WITHOUT_CLASSIFICATION	1.227931166826618E-8	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226721468	WITHOUT_CLASSIFICATION	9.773278532144008E-7	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967674000226	WITHOUT_CLASSIFICATION	3.2325999772624E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967674000226	WITHOUT_CLASSIFICATION	3.2325999772624E-6	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997437248389	WITHOUT_CLASSIFICATION	2.5627516107771044E-7	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9999997437248389	WITHOUT_CLASSIFICATION	2.5627516107771044E-7	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999965982082	WITHOUT_CLASSIFICATION	3.401791933462179E-9	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999999965982082	WITHOUT_CLASSIFICATION	3.401791933462179E-9	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999980979439	WITHOUT_CLASSIFICATION	1.9020561594408183E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989677227	WITHOUT_CLASSIFICATION	1.0322771883403822E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999758957181	WITHOUT_CLASSIFICATION	2.410428198418211E-8	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999999939590956	WITHOUT_CLASSIFICATION	6.0409044926733845E-9	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999999998184778	WITHOUT_CLASSIFICATION	1.815221907119975E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999984657054	WITHOUT_CLASSIFICATION	1.534294587995263E-9	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999999926111075	WITHOUT_CLASSIFICATION	7.38889247229526E-9	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999999293436083	WITHOUT_CLASSIFICATION	7.065639168801385E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999999980979439	WITHOUT_CLASSIFICATION	1.9020561594408183E-9	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999999989677227	WITHOUT_CLASSIFICATION	1.0322771883403822E-9	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999999758957181	WITHOUT_CLASSIFICATION	2.410428198418211E-8	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.999999998184778	WITHOUT_CLASSIFICATION	1.815221907119975E-9	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999999984657054	WITHOUT_CLASSIFICATION	1.534294587995263E-9	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999962348058545	WITHOUT_CLASSIFICATION	3.7651941454115007E-6	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999996488263703	WITHOUT_CLASSIFICATION	3.511736296382308E-7	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998361927881578	WITHOUT_CLASSIFICATION	1.638072118421324E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9998361927881578	WITHOUT_CLASSIFICATION	1.638072118421324E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9999996823437196	WITHOUT_CLASSIFICATION	3.1765628041865605E-7	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959113023685	WITHOUT_CLASSIFICATION	4.088697631515605E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999985620236411	WITHOUT_CLASSIFICATION	1.4379763588659453E-6	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995538651305	WITHOUT_CLASSIFICATION	4.4613486940706245E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995538651305	WITHOUT_CLASSIFICATION	4.4613486940706245E-7	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999984956132023	WITHOUT_CLASSIFICATION	1.5043867977286158E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999877920419	WITHOUT_CLASSIFICATION	1.2207958098047068E-7	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999998751177775	WITHOUT_CLASSIFICATION	1.248822223952214E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999998569040831	WITHOUT_CLASSIFICATION	1.4309591690261677E-7	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999883221723344	WITHOUT_CLASSIFICATION	1.1677827665597776E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658202808	WITHOUT_CLASSIFICATION	2.3417971924652522E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951292452673	WITHOUT_CLASSIFICATION	4.8707547326003165E-6	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999999488399255	WITHOUT_CLASSIFICATION	5.11600744827057E-8	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998072390912	WITHOUT_CLASSIFICATION	1.9276090871169323E-7	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.999998282158384	WITHOUT_CLASSIFICATION	1.7178416159609247E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999999827806363	WITHOUT_CLASSIFICATION	1.7219363721237494E-8	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9999984956132023	WITHOUT_CLASSIFICATION	1.5043867977286158E-6	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.999999877920419	WITHOUT_CLASSIFICATION	1.2207958098047068E-7	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999998569040831	WITHOUT_CLASSIFICATION	1.4309591690261677E-7	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999348317736	WITHOUT_CLASSIFICATION	6.516822628810974E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999985620236411	WITHOUT_CLASSIFICATION	1.4379763588659453E-6	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999985620236411	WITHOUT_CLASSIFICATION	1.4379763588659453E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129966113	WITHOUT_CLASSIFICATION	2.8700338873915194E-7	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129966113	WITHOUT_CLASSIFICATION	2.8700338873915194E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886159241539	WITHOUT_CLASSIFICATION	1.113840758461149E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886159241539	WITHOUT_CLASSIFICATION	1.113840758461149E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999999684347156	WITHOUT_CLASSIFICATION	3.156528444276884E-8	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9999999412844772	WITHOUT_CLASSIFICATION	5.87155227971297E-8	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999939252813813	WITHOUT_CLASSIFICATION	6.074718618626092E-6	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999958866308527	WITHOUT_CLASSIFICATION	4.113369147314392E-6	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999999701102286	WITHOUT_CLASSIFICATION	2.988977133541514E-8	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999999189173443	WITHOUT_CLASSIFICATION	8.10826557078882E-8	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998436609407095	WITHOUT_CLASSIFICATION	1.56339059290361E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999999991279891	WITHOUT_CLASSIFICATION	8.720109987783808E-10	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9999997931865204	WITHOUT_CLASSIFICATION	2.0681347969539979E-7	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999999959122401	WITHOUT_CLASSIFICATION	4.0877599013348134E-9	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999999411670312	WITHOUT_CLASSIFICATION	5.88329689517686E-8	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999974560906176	WITHOUT_CLASSIFICATION	2.5439093823332535E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999999833417056	WITHOUT_CLASSIFICATION	1.6658294444513822E-8	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999999714361247	WITHOUT_CLASSIFICATION	2.856387528140301E-8	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999999831325561	WITHOUT_CLASSIFICATION	1.686744388296509E-8	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999966927987227	WITHOUT_CLASSIFICATION	3.3072012772498927E-6	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9999989645221671	WITHOUT_CLASSIFICATION	1.03547783300055E-6	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999998091976056	WITHOUT_CLASSIFICATION	1.9080239429272166E-7	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9999999884624586	WITHOUT_CLASSIFICATION	1.1537541470503161E-8	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951292452673	WITHOUT_CLASSIFICATION	4.8707547326003165E-6	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999998072390912	WITHOUT_CLASSIFICATION	1.9276090871169323E-7	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999999348317736	WITHOUT_CLASSIFICATION	6.516822628810974E-8	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9999985620236411	WITHOUT_CLASSIFICATION	1.4379763588659453E-6	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999997129966113	WITHOUT_CLASSIFICATION	2.8700338873915194E-7	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886159241539	WITHOUT_CLASSIFICATION	1.113840758461149E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999983269264259	WITHOUT_CLASSIFICATION	1.6730735740868511E-6	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9998536053240765	WITHOUT_CLASSIFICATION	1.463946759234001E-4	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999999986508	WITHOUT_CLASSIFICATION	1.3492000682587825E-9	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9986755825202023	WITHOUT_CLASSIFICATION	0.0013244174797976908	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999998742886385	WITHOUT_CLASSIFICATION	1.2571136162177496E-7	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999998742886385	WITHOUT_CLASSIFICATION	1.2571136162177496E-7	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999999766372355	WITHOUT_CLASSIFICATION	2.3362764583355568E-8	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999999814726243	WITHOUT_CLASSIFICATION	1.8527375731389675E-8	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999286580706	WITHOUT_CLASSIFICATION	7.134192932548249E-8	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999998761442599	WITHOUT_CLASSIFICATION	1.2385574013660135E-7	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999488709965	WITHOUT_CLASSIFICATION	5.112900340005171E-8	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999488709965	WITHOUT_CLASSIFICATION	5.112900340005171E-8	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999999992866307	WITHOUT_CLASSIFICATION	7.133692521271559E-10	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999999978931051	WITHOUT_CLASSIFICATION	2.106894761199722E-9	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999999911807776	WITHOUT_CLASSIFICATION	8.819222308125202E-9	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9999979917877695	WITHOUT_CLASSIFICATION	2.00821223047504E-6	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.999999913176101	WITHOUT_CLASSIFICATION	8.682389893081573E-8	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.999999975437901	WITHOUT_CLASSIFICATION	2.456209899381457E-8	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999895702163344	WITHOUT_CLASSIFICATION	1.0429783665482609E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999999792427055	WITHOUT_CLASSIFICATION	2.0757294567183935E-8	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9989446493426134	WITHOUT_CLASSIFICATION	0.0010553506573866278	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9997723466043524	WITHOUT_CLASSIFICATION	2.276533956474988E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9998538082578734	WITHOUT_CLASSIFICATION	1.46191742126682E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999991914237178	WITHOUT_CLASSIFICATION	8.085762821571675E-7	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999999999578361	WITHOUT_CLASSIFICATION	4.2163873255374546E-11	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999999169928607	WITHOUT_CLASSIFICATION	8.300713934369595E-8	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9999999203301753	WITHOUT_CLASSIFICATION	7.966982479636069E-8	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9999999604784908	WITHOUT_CLASSIFICATION	3.95215090631211E-8	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9999996311188029	WITHOUT_CLASSIFICATION	3.688811971920943E-7	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.999988625755294	WITHOUT_CLASSIFICATION	1.1374244706066525E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9999995970826877	WITHOUT_CLASSIFICATION	4.0291731226840457E-7	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999607758154	WITHOUT_CLASSIFICATION	3.922418462462448E-8	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9999997581476281	WITHOUT_CLASSIFICATION	2.418523719403218E-7	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999986344693256	WITHOUT_CLASSIFICATION	1.3655306743876965E-6	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999986344693256	WITHOUT_CLASSIFICATION	1.3655306743876965E-6	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9999950549753454	WITHOUT_CLASSIFICATION	4.9450246546809475E-6	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998611849472552	WITHOUT_CLASSIFICATION	1.3881505274482124E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999998662146389	WITHOUT_CLASSIFICATION	1.337853611042493E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.999998662146389	WITHOUT_CLASSIFICATION	1.337853611042493E-6	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9805265671319077	DEFECT	0.01947343286809228	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9999843362026246	WITHOUT_CLASSIFICATION	1.5663797375402955E-5	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999953572990024	WITHOUT_CLASSIFICATION	4.6427009977086715E-6	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999999065585144	WITHOUT_CLASSIFICATION	9.344148560352555E-7	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999999065585144	WITHOUT_CLASSIFICATION	9.344148560352555E-7	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9999875160413789	WITHOUT_CLASSIFICATION	1.24839586209966E-5	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999997277471667	WITHOUT_CLASSIFICATION	2.7225283317233206E-7	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999997276467841	WITHOUT_CLASSIFICATION	2.7235321588580375E-7	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999980548346921	WITHOUT_CLASSIFICATION	1.9451653079794823E-6	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9999999896336224	WITHOUT_CLASSIFICATION	1.0366377666600344E-8	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999998340116849	WITHOUT_CLASSIFICATION	1.6598831512533263E-7	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999990185674905	WITHOUT_CLASSIFICATION	9.814325095654653E-7	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9999971387720554	WITHOUT_CLASSIFICATION	2.8612279446745876E-6	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.999999834141241	WITHOUT_CLASSIFICATION	1.6585875899441713E-7	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9998218174764709	WITHOUT_CLASSIFICATION	1.7818252352913395E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999985350815216	WITHOUT_CLASSIFICATION	1.4649184784112665E-6	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999998602747274	WITHOUT_CLASSIFICATION	1.397252724465356E-7	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999999524898612	WITHOUT_CLASSIFICATION	4.751013884629604E-8	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998663955864965	WITHOUT_CLASSIFICATION	1.336044135035392E-4	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999920550996417	WITHOUT_CLASSIFICATION	7.944900358231019E-6	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9987552125938873	WITHOUT_CLASSIFICATION	0.0012447874061126323	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999999591196977	WITHOUT_CLASSIFICATION	4.088030227452843E-8	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.999996202515717	WITHOUT_CLASSIFICATION	3.7974842830796223E-6	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999677244675564	WITHOUT_CLASSIFICATION	3.227553244360579E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999964323956295	WITHOUT_CLASSIFICATION	3.5676043704244117E-6	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999981018401034	WITHOUT_CLASSIFICATION	1.8981598965679315E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999997556317181	WITHOUT_CLASSIFICATION	2.443682818928973E-7	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999769984762282	WITHOUT_CLASSIFICATION	2.3001523771669407E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9999643440287007	WITHOUT_CLASSIFICATION	3.565597129925243E-5	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999998642557079	WITHOUT_CLASSIFICATION	1.3574429213823475E-7	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9985582892659245	WITHOUT_CLASSIFICATION	0.0014417107340754807	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9903519307647609	WITHOUT_CLASSIFICATION	0.009648069235239046	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999693843048	WITHOUT_CLASSIFICATION	3.061569512980452E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999964163124194	WITHOUT_CLASSIFICATION	3.5836875805351676E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999998453730478	WITHOUT_CLASSIFICATION	1.5462695219304078E-7	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999995330515	WITHOUT_CLASSIFICATION	4.669484743285696E-10	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9998663955864965	WITHOUT_CLASSIFICATION	1.336044135035392E-4	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9999999693843048	WITHOUT_CLASSIFICATION	3.061569512980452E-8	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999964163124194	WITHOUT_CLASSIFICATION	3.5836875805351676E-6	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999999995330515	WITHOUT_CLASSIFICATION	4.669484743285696E-10	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999999677522399	WITHOUT_CLASSIFICATION	3.22477601267359E-8	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999899864852442	WITHOUT_CLASSIFICATION	1.0013514755726167E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999769437077237	WITHOUT_CLASSIFICATION	2.3056292276347656E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.999999977708232	WITHOUT_CLASSIFICATION	2.2291767904483497E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999869079922	WITHOUT_CLASSIFICATION	1.309200783505943E-8	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9999999011231278	WITHOUT_CLASSIFICATION	9.887687227971588E-8	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999997228747519	WITHOUT_CLASSIFICATION	2.7712524801633113E-7	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9999999449221627	WITHOUT_CLASSIFICATION	5.507783721505093E-8	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999999257152469	WITHOUT_CLASSIFICATION	7.42847531048487E-8	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9998997452885421	WITHOUT_CLASSIFICATION	1.0025471145790002E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999939693809059	WITHOUT_CLASSIFICATION	6.030619094141957E-6	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9999939693809059	WITHOUT_CLASSIFICATION	6.030619094141957E-6	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999949887647426	WITHOUT_CLASSIFICATION	5.011235257416156E-6	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999983006323991	WITHOUT_CLASSIFICATION	1.69936760084976E-6	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999990734054066	WITHOUT_CLASSIFICATION	9.265945933570562E-7	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999999543223747	WITHOUT_CLASSIFICATION	4.567762521137468E-8	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9999977261139384	WITHOUT_CLASSIFICATION	2.273886061506894E-6	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9999960322937497	WITHOUT_CLASSIFICATION	3.9677062503427525E-6	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999982689700847	WITHOUT_CLASSIFICATION	1.7310299152384976E-6	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997885223319753	WITHOUT_CLASSIFICATION	2.1147766802464006E-4	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999999984773673	WITHOUT_CLASSIFICATION	1.5226327152047416E-9	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999896444071	WITHOUT_CLASSIFICATION	1.0355592966443433E-8	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999999632365995	WITHOUT_CLASSIFICATION	3.6763400569748035E-8	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999999281791971	WITHOUT_CLASSIFICATION	7.182080281094167E-8	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999999983201281	WITHOUT_CLASSIFICATION	1.6798718180648765E-9	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999998737566937	WITHOUT_CLASSIFICATION	1.2624330626991388E-7	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999999804638228	WITHOUT_CLASSIFICATION	1.953617728015747E-8	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999999343934296	WITHOUT_CLASSIFICATION	6.560657039158487E-8	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999999955185729	WITHOUT_CLASSIFICATION	4.481427124791017E-9	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999999629704776	WITHOUT_CLASSIFICATION	3.7029522392319206E-8	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999998973204324	WITHOUT_CLASSIFICATION	1.0267956759549461E-7	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999996628296591	WITHOUT_CLASSIFICATION	3.3717034094009816E-7	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999992610665078	WITHOUT_CLASSIFICATION	7.389334920877017E-7	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999985086253383	WITHOUT_CLASSIFICATION	1.4913746616740562E-6	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.999999995626588	WITHOUT_CLASSIFICATION	4.3734119548577235E-9	DEFECT
// others	WITHOUT_CLASSIFICATION	0.999999655297783	WITHOUT_CLASSIFICATION	3.447022169341591E-7	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999999152538884	WITHOUT_CLASSIFICATION	8.47461115586345E-8	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999996334355526	WITHOUT_CLASSIFICATION	3.6656444734157975E-7	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.998869548760319	WITHOUT_CLASSIFICATION	0.0011304512396810228	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9999369082984312	WITHOUT_CLASSIFICATION	6.309170156887416E-5	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.999997755627352	WITHOUT_CLASSIFICATION	2.2443726480732666E-6	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999992567848544	WITHOUT_CLASSIFICATION	7.432151457240202E-7	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999987990858912	WITHOUT_CLASSIFICATION	1.2009141087443907E-6	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999999160383235	WITHOUT_CLASSIFICATION	8.396167641674354E-8	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999999886329896	WITHOUT_CLASSIFICATION	1.1367010457754455E-8	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999998824018905	WITHOUT_CLASSIFICATION	1.1759810943355799E-7	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999999811925475	WITHOUT_CLASSIFICATION	1.8807452458907455E-8	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9999955705170634	WITHOUT_CLASSIFICATION	4.429482936619973E-6	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999999974651523	WITHOUT_CLASSIFICATION	2.534847774973467E-9	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999989078131267	WITHOUT_CLASSIFICATION	1.0921868732856543E-6	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999999409957028	WITHOUT_CLASSIFICATION	5.9004297139000564E-8	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.999999905023154	WITHOUT_CLASSIFICATION	9.497684602755417E-8	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9999283453857801	WITHOUT_CLASSIFICATION	7.165461421990457E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866313354	WITHOUT_CLASSIFICATION	2.051336866459129E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999978046274038	WITHOUT_CLASSIFICATION	2.1953725961166854E-6	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999987667823643	WITHOUT_CLASSIFICATION	1.2332176356800866E-6	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999882885152278	WITHOUT_CLASSIFICATION	1.1711484772197557E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9999990531290149	WITHOUT_CLASSIFICATION	9.468709850248959E-7	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999978852192843	WITHOUT_CLASSIFICATION	2.114780715666225E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9999986520122978	WITHOUT_CLASSIFICATION	1.3479877023018801E-6	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9999996035550274	WITHOUT_CLASSIFICATION	3.9644497255672114E-7	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9999998271578343	WITHOUT_CLASSIFICATION	1.7284216570076936E-7	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999968222303872	WITHOUT_CLASSIFICATION	3.1777696126566125E-6	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999999994197439	WITHOUT_CLASSIFICATION	5.802560019355317E-10	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9999992444233936	WITHOUT_CLASSIFICATION	7.555766064359358E-7	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9999958390447079	WITHOUT_CLASSIFICATION	4.1609552920645215E-6	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9999951162959297	WITHOUT_CLASSIFICATION	4.883704070200942E-6	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999972237805449	WITHOUT_CLASSIFICATION	2.7762194550208075E-6	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9999998728680882	WITHOUT_CLASSIFICATION	1.2713191182219958E-7	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9999997381594101	WITHOUT_CLASSIFICATION	2.6184058986520915E-7	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9993131636411388	WITHOUT_CLASSIFICATION	6.868363588612815E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999718161978726	WITHOUT_CLASSIFICATION	2.818380212745064E-5	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9999718161978726	WITHOUT_CLASSIFICATION	2.818380212745064E-5	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999947068051975	WITHOUT_CLASSIFICATION	5.293194802448171E-6	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999993018065716	WITHOUT_CLASSIFICATION	6.981934284549535E-7	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999848584958553	WITHOUT_CLASSIFICATION	1.5141504144641025E-5	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9999911959760509	WITHOUT_CLASSIFICATION	8.80402394905242E-6	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.999998412890775	WITHOUT_CLASSIFICATION	1.587109225037914E-6	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998641440453192	WITHOUT_CLASSIFICATION	1.35855954680802E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9999204465385606	WITHOUT_CLASSIFICATION	7.955346143939506E-5	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9999999630779284	WITHOUT_CLASSIFICATION	3.692207167512116E-8	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.999999994981311	WITHOUT_CLASSIFICATION	5.018689069023282E-9	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999999999552954	WITHOUT_CLASSIFICATION	4.470457984334931E-11	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.999999478044941	WITHOUT_CLASSIFICATION	5.219550589669873E-7	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999997480897724	WITHOUT_CLASSIFICATION	2.5191022755600917E-7	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999999007121977	WITHOUT_CLASSIFICATION	9.928780231760544E-8	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999999775726325	WITHOUT_CLASSIFICATION	2.2427367535622106E-8	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999996820040831	WITHOUT_CLASSIFICATION	3.179959169747016E-7	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999758890160575	WITHOUT_CLASSIFICATION	2.4110983942471633E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999998535947531	WITHOUT_CLASSIFICATION	1.4640524697122114E-7	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999951289236519	WITHOUT_CLASSIFICATION	4.871076348090885E-6	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9996286275401498	WITHOUT_CLASSIFICATION	3.7137245985020356E-4	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.999999956762037	WITHOUT_CLASSIFICATION	4.3237963038634765E-8	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999933508405693	WITHOUT_CLASSIFICATION	6.649159430747884E-6	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.999999644839777	WITHOUT_CLASSIFICATION	3.551602230523028E-7	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999992710056305	WITHOUT_CLASSIFICATION	7.289943696080239E-7	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999999632215707	WITHOUT_CLASSIFICATION	3.6778429434693935E-8	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9999993612161404	WITHOUT_CLASSIFICATION	6.387838595767401E-7	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.999998307167327	WITHOUT_CLASSIFICATION	1.692832673073801E-6	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999999954247131	WITHOUT_CLASSIFICATION	4.575286946848651E-9	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9999999989169525	WITHOUT_CLASSIFICATION	1.0830475898083192E-9	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999999016299694	WITHOUT_CLASSIFICATION	9.837003053254505E-8	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999677634487486	WITHOUT_CLASSIFICATION	3.223655125128865E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9999949993317134	WITHOUT_CLASSIFICATION	5.0006682865658474E-6	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9999992863180859	WITHOUT_CLASSIFICATION	7.136819141060334E-7	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424830993	WITHOUT_CLASSIFICATION	5.7516900682066755E-8	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999999363016876	WITHOUT_CLASSIFICATION	6.369831241574242E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424830993	WITHOUT_CLASSIFICATION	5.7516900682066755E-8	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9999994230860397	WITHOUT_CLASSIFICATION	5.769139603786709E-7	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243780325	WITHOUT_CLASSIFICATION	2.787562196740359E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243780325	WITHOUT_CLASSIFICATION	2.787562196740359E-5	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9999721243780325	WITHOUT_CLASSIFICATION	2.787562196740359E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999941069352	WITHOUT_CLASSIFICATION	5.893064807707983E-9	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999999941069352	WITHOUT_CLASSIFICATION	5.893064807707983E-9	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9999999901450255	WITHOUT_CLASSIFICATION	9.85497451307567E-9	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9998594645870676	WITHOUT_CLASSIFICATION	1.4053541293239385E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999999942890727	WITHOUT_CLASSIFICATION	5.71092723130673E-9	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.999999987911872	WITHOUT_CLASSIFICATION	1.2088128075590954E-8	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999987119990927	WITHOUT_CLASSIFICATION	1.2880009072711738E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999999690837591	WITHOUT_CLASSIFICATION	3.0916240915457904E-8	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9999998557530316	WITHOUT_CLASSIFICATION	1.4424696835532307E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998713693149	WITHOUT_CLASSIFICATION	1.2863068500852552E-7	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999999999046223	WITHOUT_CLASSIFICATION	9.537773235399792E-11	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999991953216643	WITHOUT_CLASSIFICATION	8.046783358527353E-7	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999998254521227	WITHOUT_CLASSIFICATION	1.7454787726487714E-7	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996730584282021	WITHOUT_CLASSIFICATION	3.269415717978896E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999991402657157	WITHOUT_CLASSIFICATION	8.597342843225894E-7	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999999658440777	WITHOUT_CLASSIFICATION	3.4155922330067226E-8	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999999314920222	WITHOUT_CLASSIFICATION	6.850797787471094E-8	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999999403069364	WITHOUT_CLASSIFICATION	5.969306358073546E-8	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9999975845482746	WITHOUT_CLASSIFICATION	2.4154517253286125E-6	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999993926557192	WITHOUT_CLASSIFICATION	6.073442807923432E-7	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999993926557192	WITHOUT_CLASSIFICATION	6.073442807923432E-7	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999995286007358	WITHOUT_CLASSIFICATION	4.7139926414680836E-7	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999773113727	WITHOUT_CLASSIFICATION	2.2688627350626068E-8	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999999773113727	WITHOUT_CLASSIFICATION	2.2688627350626068E-8	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.999987491897196	WITHOUT_CLASSIFICATION	1.2508102803914859E-5	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999999122160422	WITHOUT_CLASSIFICATION	8.778395778359479E-8	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999999378356693	WITHOUT_CLASSIFICATION	6.216433064242128E-8	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999997159907534	WITHOUT_CLASSIFICATION	2.8400924648864995E-7	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999996084849073	WITHOUT_CLASSIFICATION	3.9151509266546856E-7	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9999996949128989	WITHOUT_CLASSIFICATION	3.0508710108407724E-7	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999992275262118	WITHOUT_CLASSIFICATION	7.724737881270905E-7	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999967964953953	WITHOUT_CLASSIFICATION	3.2035046048092384E-6	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999999330038841	WITHOUT_CLASSIFICATION	6.699611581126057E-8	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999994435501139	WITHOUT_CLASSIFICATION	5.564498860113576E-7	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999997443101187	WITHOUT_CLASSIFICATION	2.556898813501949E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999971213685989	WITHOUT_CLASSIFICATION	2.8786314010814585E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999999152648698	WITHOUT_CLASSIFICATION	8.473513022332078E-8	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999994873601752	WITHOUT_CLASSIFICATION	5.126398248826451E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999998713693149	WITHOUT_CLASSIFICATION	1.2863068500852552E-7	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9999905806161181	WITHOUT_CLASSIFICATION	9.419383881786721E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550130221	WITHOUT_CLASSIFICATION	6.449869779076969E-7	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999749867204	WITHOUT_CLASSIFICATION	2.5013279476094674E-8	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999999749867204	WITHOUT_CLASSIFICATION	2.5013279476094674E-8	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9999893383858108	WITHOUT_CLASSIFICATION	1.0661614189131926E-5	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9999933647708507	WITHOUT_CLASSIFICATION	6.635229149270954E-6	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999997270691299	WITHOUT_CLASSIFICATION	2.7293087016376977E-7	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.999996822931255	WITHOUT_CLASSIFICATION	3.1770687449506363E-6	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999998918094295	WITHOUT_CLASSIFICATION	1.081905704285365E-7	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999999952393611	WITHOUT_CLASSIFICATION	4.760638903879274E-9	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999834905682199	WITHOUT_CLASSIFICATION	1.6509431780089043E-5	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9981002971406551	WITHOUT_CLASSIFICATION	0.0018997028593449358	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9999993625802489	WITHOUT_CLASSIFICATION	6.374197511752875E-7	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.999999217016206	WITHOUT_CLASSIFICATION	7.829837940065097E-7	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9999958611977731	WITHOUT_CLASSIFICATION	4.138802226890353E-6	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9999986783293693	WITHOUT_CLASSIFICATION	1.3216706307021003E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5917898170466886	WITHOUT_CLASSIFICATION	0.40821018295331135	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999998312473714	WITHOUT_CLASSIFICATION	1.6875262862495028E-7	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999999591651397	WITHOUT_CLASSIFICATION	4.083486031188597E-8	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9999962095351744	WITHOUT_CLASSIFICATION	3.790464825603574E-6	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.999999402777655	WITHOUT_CLASSIFICATION	5.972223450223466E-7	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999999967645419	WITHOUT_CLASSIFICATION	3.2354581032793395E-9	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.999999929915572	WITHOUT_CLASSIFICATION	7.008442800181921E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999947632521792	WITHOUT_CLASSIFICATION	5.236747820754074E-6	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999989737254943	WITHOUT_CLASSIFICATION	1.0262745056585562E-6	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9999996026562263	WITHOUT_CLASSIFICATION	3.973437736496819E-7	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999995209504073	WITHOUT_CLASSIFICATION	4.79049592591527E-7	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999999975922668	WITHOUT_CLASSIFICATION	2.407733237672755E-9	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9999999835642716	WITHOUT_CLASSIFICATION	1.6435728422588918E-8	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999987337490905	WITHOUT_CLASSIFICATION	1.2662509094028874E-6	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9998551838198206	WITHOUT_CLASSIFICATION	1.448161801793157E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9918566478260672	WITHOUT_CLASSIFICATION	0.00814335217393277	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999999918617701	WITHOUT_CLASSIFICATION	8.138229765817769E-9	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998937884463345	WITHOUT_CLASSIFICATION	1.0621155366553409E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9999823088925216	WITHOUT_CLASSIFICATION	1.769110747843044E-5	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9999999942515668	WITHOUT_CLASSIFICATION	5.748433154240584E-9	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999852570805773	WITHOUT_CLASSIFICATION	1.4742919422795624E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9935350606888712	WITHOUT_CLASSIFICATION	0.006464939311128774	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999962445001	WITHOUT_CLASSIFICATION	3.75549989404019E-9	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999989457944094	WITHOUT_CLASSIFICATION	1.0542055906059375E-6	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9918566478260672	WITHOUT_CLASSIFICATION	0.00814335217393277	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999024224262	WITHOUT_CLASSIFICATION	9.757757379823377E-8	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999999962445001	WITHOUT_CLASSIFICATION	3.75549989404019E-9	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9999998185576261	WITHOUT_CLASSIFICATION	1.8144237381084224E-7	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999999837706695	WITHOUT_CLASSIFICATION	1.6229330559383012E-8	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999999865792157	WITHOUT_CLASSIFICATION	1.3420784203883518E-8	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9999998479520538	WITHOUT_CLASSIFICATION	1.5204794622313026E-7	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999996228538398	WITHOUT_CLASSIFICATION	3.771461600980217E-7	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999928479560366	WITHOUT_CLASSIFICATION	7.152043963419403E-6	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9999928479560366	WITHOUT_CLASSIFICATION	7.152043963419403E-6	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999999785234881	WITHOUT_CLASSIFICATION	2.147651196406501E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999781156063	WITHOUT_CLASSIFICATION	2.1884393786623324E-8	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999820145147	WITHOUT_CLASSIFICATION	1.7985485307881926E-7	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999999820145147	WITHOUT_CLASSIFICATION	1.7985485307881926E-7	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999994110973679	WITHOUT_CLASSIFICATION	5.889026322120696E-7	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9998258761203755	WITHOUT_CLASSIFICATION	1.741238796244513E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999673369174946	WITHOUT_CLASSIFICATION	3.2663082505393355E-5	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9999673369174946	WITHOUT_CLASSIFICATION	3.2663082505393355E-5	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999944178991182	WITHOUT_CLASSIFICATION	5.5821008816585685E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999973827801735	WITHOUT_CLASSIFICATION	2.61721982659772E-6	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9999995605082029	WITHOUT_CLASSIFICATION	4.3949179713123715E-7	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999999126145751	WITHOUT_CLASSIFICATION	8.738542487811437E-8	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9999778904132716	WITHOUT_CLASSIFICATION	2.2109586728373783E-5	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999964324527667	WITHOUT_CLASSIFICATION	3.5675472333673136E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9999995222064936	WITHOUT_CLASSIFICATION	4.77793506425923E-7	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9999986996983115	WITHOUT_CLASSIFICATION	1.3003016885385372E-6	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999785712040643	WITHOUT_CLASSIFICATION	2.1428795935707495E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999997285598378	WITHOUT_CLASSIFICATION	2.7144016224329646E-7	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.999999447342552	WITHOUT_CLASSIFICATION	5.526574481447905E-7	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999779536690353	WITHOUT_CLASSIFICATION	2.2046330964678103E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.999995017928502	WITHOUT_CLASSIFICATION	4.982071498068559E-6	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999996432305432	WITHOUT_CLASSIFICATION	3.567694567330364E-7	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999979981669583	WITHOUT_CLASSIFICATION	2.0018330416041775E-6	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.999999566520665	WITHOUT_CLASSIFICATION	4.334793349529671E-7	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999097387057829	WITHOUT_CLASSIFICATION	9.026129421706272E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999955682191172	WITHOUT_CLASSIFICATION	4.43178088281014E-6	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999990880810778	WITHOUT_CLASSIFICATION	9.119189222108594E-7	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9999552956965565	WITHOUT_CLASSIFICATION	4.470430344340921E-5	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9999999078627436	WITHOUT_CLASSIFICATION	9.213725632108466E-8	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999998882378754	WITHOUT_CLASSIFICATION	1.117621244843668E-7	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9999965831666082	WITHOUT_CLASSIFICATION	3.4168333917564726E-6	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999995877662565	WITHOUT_CLASSIFICATION	4.122337435040648E-6	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999965703082806	WITHOUT_CLASSIFICATION	3.4296917194468693E-6	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999978707172394	WITHOUT_CLASSIFICATION	2.129282760608219E-6	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9999975775705937	WITHOUT_CLASSIFICATION	2.422429406228885E-6	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.99999631471381	WITHOUT_CLASSIFICATION	3.685286189946065E-6	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999818242061698	WITHOUT_CLASSIFICATION	1.8175793830173228E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999818242061698	WITHOUT_CLASSIFICATION	1.8175793830173228E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999948532533189	WITHOUT_CLASSIFICATION	5.146746681151699E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999998283345173	WITHOUT_CLASSIFICATION	1.7166548276161613E-7	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9999946632397027	WITHOUT_CLASSIFICATION	5.336760297410767E-6	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998958523499761	WITHOUT_CLASSIFICATION	1.0414765002392773E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999849935898938	WITHOUT_CLASSIFICATION	1.5006410106176501E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999755459591797	WITHOUT_CLASSIFICATION	2.4454040820369583E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999992853723826	WITHOUT_CLASSIFICATION	7.146276173415923E-7	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999998769102182	WITHOUT_CLASSIFICATION	1.2308978181479114E-7	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9999987459955836	WITHOUT_CLASSIFICATION	1.2540044163759392E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967104483	WITHOUT_CLASSIFICATION	3.289551666506011E-9	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999996697293674	WITHOUT_CLASSIFICATION	3.302706326697235E-7	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999999329037473	WITHOUT_CLASSIFICATION	6.70962526361381E-8	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9999989715607411	WITHOUT_CLASSIFICATION	1.0284392588962014E-6	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9999976212889297	WITHOUT_CLASSIFICATION	2.3787110702884045E-6	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999997635779295	WITHOUT_CLASSIFICATION	2.3642207040359388E-7	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999971140759834	WITHOUT_CLASSIFICATION	2.885924016552841E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999956916326256	WITHOUT_CLASSIFICATION	4.308367374511879E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.999994699384512	WITHOUT_CLASSIFICATION	5.3006154880104574E-6	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9999984695763372	WITHOUT_CLASSIFICATION	1.530423662851852E-6	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9999932970290094	WITHOUT_CLASSIFICATION	6.702970990562927E-6	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999999076750163	WITHOUT_CLASSIFICATION	9.232498371838955E-8	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.999987386218234	WITHOUT_CLASSIFICATION	1.2613781765991184E-5	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999999907332587	WITHOUT_CLASSIFICATION	9.266741205764001E-9	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999999729193169	WITHOUT_CLASSIFICATION	2.7080683159011875E-8	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999998680960062	WITHOUT_CLASSIFICATION	1.3190399374075717E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466239127	WITHOUT_CLASSIFICATION	3.533760872210895E-7	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9999894847236742	WITHOUT_CLASSIFICATION	1.0515276325758717E-5	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999986264233817	WITHOUT_CLASSIFICATION	1.3735766184054539E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999981332323395	WITHOUT_CLASSIFICATION	1.8667676603911194E-6	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999999080558946	WITHOUT_CLASSIFICATION	9.194410548156265E-8	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999979666338539	WITHOUT_CLASSIFICATION	2.033366146060029E-6	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999994440478535	WITHOUT_CLASSIFICATION	5.559521465152116E-7	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999999788736619	WITHOUT_CLASSIFICATION	2.11263381238002E-8	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999993837813558	WITHOUT_CLASSIFICATION	6.162186442481009E-7	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.999999959895122	WITHOUT_CLASSIFICATION	4.010487788925601E-8	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9999984760110012	WITHOUT_CLASSIFICATION	1.5239889988396337E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998379052872	WITHOUT_CLASSIFICATION	1.6209471272150278E-7	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999999239518172	WITHOUT_CLASSIFICATION	7.60481827858462E-7	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999999993489309	WITHOUT_CLASSIFICATION	6.510691259781075E-10	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9999999200221701	WITHOUT_CLASSIFICATION	7.997782992868145E-8	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9999352473324512	WITHOUT_CLASSIFICATION	6.475266754875643E-5	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999999484021581	WITHOUT_CLASSIFICATION	5.159784190615164E-8	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998296830063679	WITHOUT_CLASSIFICATION	1.7031699363206267E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998296830063679	WITHOUT_CLASSIFICATION	1.7031699363206267E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999997612057225	WITHOUT_CLASSIFICATION	2.387942774586872E-7	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9999826944856484	WITHOUT_CLASSIFICATION	1.7305514351606616E-5	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.999997744202263	WITHOUT_CLASSIFICATION	2.255797737034156E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999993794459489	WITHOUT_CLASSIFICATION	6.205540511684704E-7	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999999729363421	WITHOUT_CLASSIFICATION	2.7063657870617183E-8	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999999877206883	WITHOUT_CLASSIFICATION	1.227931166826618E-8	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999997372769055	WITHOUT_CLASSIFICATION	2.627230944698577E-7	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9999996208729588	WITHOUT_CLASSIFICATION	3.791270411676226E-7	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9554370185930114	WITHOUT_CLASSIFICATION	0.04456298140698847	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999874521080555	WITHOUT_CLASSIFICATION	1.2547891944366997E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999999114651452	WITHOUT_CLASSIFICATION	8.853485473419366E-8	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999999457866228	WITHOUT_CLASSIFICATION	5.4213377165298647E-8	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999998543051289	WITHOUT_CLASSIFICATION	1.4569487101338883E-7	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.999999909349455	WITHOUT_CLASSIFICATION	9.065054498528504E-8	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999999830027508	WITHOUT_CLASSIFICATION	1.6997249068267494E-8	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999996917154005	WITHOUT_CLASSIFICATION	3.082845995071428E-7	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999998996994329	WITHOUT_CLASSIFICATION	1.0030056702300597E-7	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999980016423264	WITHOUT_CLASSIFICATION	1.9983576734754102E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999996707750666	WITHOUT_CLASSIFICATION	3.2922493348406083E-7	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999928936969048	WITHOUT_CLASSIFICATION	7.106303095110568E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999995848617764	WITHOUT_CLASSIFICATION	4.151382235075882E-7	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999952702280254	WITHOUT_CLASSIFICATION	4.7297719745861335E-6	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999999633851464	WITHOUT_CLASSIFICATION	3.661485355270094E-8	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999999848766978	WITHOUT_CLASSIFICATION	1.5123302235265588E-8	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.999999960744308	WITHOUT_CLASSIFICATION	3.925569200195041E-8	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999011968305	WITHOUT_CLASSIFICATION	9.88031696396294E-8	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999997814671768	WITHOUT_CLASSIFICATION	2.1853282328966429E-7	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999999748046722	WITHOUT_CLASSIFICATION	2.519532788537072E-8	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.999999959601308	WITHOUT_CLASSIFICATION	4.039869199552488E-8	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999999687038937	WITHOUT_CLASSIFICATION	3.1296106279359664E-8	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999998064735235	WITHOUT_CLASSIFICATION	1.935264765719537E-7	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999999491729634	WITHOUT_CLASSIFICATION	5.082703658583007E-8	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999985085450197	WITHOUT_CLASSIFICATION	1.4914549803019706E-6	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.999998450103095	WITHOUT_CLASSIFICATION	1.5498969049617294E-6	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.999999239518172	WITHOUT_CLASSIFICATION	7.60481827858462E-7	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9999998470881417	WITHOUT_CLASSIFICATION	1.5291185828983662E-7	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999908931122	WITHOUT_CLASSIFICATION	9.106887897483732E-9	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999999908931122	WITHOUT_CLASSIFICATION	9.106887897483732E-9	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999993774537445	WITHOUT_CLASSIFICATION	6.22546255485266E-7	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9999997811350805	WITHOUT_CLASSIFICATION	2.188649196323167E-7	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999946193959949	WITHOUT_CLASSIFICATION	5.380604005119245E-6	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999999425884235	WITHOUT_CLASSIFICATION	5.741157639957913E-8	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999982626394398	WITHOUT_CLASSIFICATION	1.7373605602808674E-6	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999993911115033	WITHOUT_CLASSIFICATION	6.088884966255059E-7	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999995816495892	WITHOUT_CLASSIFICATION	4.1835041082678774E-7	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.999996005712089	WITHOUT_CLASSIFICATION	3.994287910970335E-6	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999905473168045	WITHOUT_CLASSIFICATION	9.452683195414101E-6	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999930617409485	WITHOUT_CLASSIFICATION	6.938259051502856E-6	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999379937673827	WITHOUT_CLASSIFICATION	6.200623261727364E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999768909037358	WITHOUT_CLASSIFICATION	2.3109096264271628E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999945037803086	WITHOUT_CLASSIFICATION	5.496219691411957E-6	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.999999185702138	WITHOUT_CLASSIFICATION	8.142978621528871E-7	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999999967160862	WITHOUT_CLASSIFICATION	3.283913907347831E-9	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999957837729564	WITHOUT_CLASSIFICATION	4.216227043708069E-6	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9999837181324417	WITHOUT_CLASSIFICATION	1.6281867558209502E-5	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.999981979082507	WITHOUT_CLASSIFICATION	1.8020917492995187E-5	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9999949278640159	WITHOUT_CLASSIFICATION	5.072135984094029E-6	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999962770621137	WITHOUT_CLASSIFICATION	3.722937886279735E-6	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9999633910439583	WITHOUT_CLASSIFICATION	3.660895604179339E-5	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999894114878878	WITHOUT_CLASSIFICATION	1.0588512112347003E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999999962348809	WITHOUT_CLASSIFICATION	3.7651191278273774E-9	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999995710203184	WITHOUT_CLASSIFICATION	4.2897968163209286E-7	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999960526216347	WITHOUT_CLASSIFICATION	3.947378365348315E-6	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999972621100934	WITHOUT_CLASSIFICATION	2.737889906592459E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999964045224	WITHOUT_CLASSIFICATION	3.5954776022752094E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999928830267	WITHOUT_CLASSIFICATION	7.116973396903639E-9	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999999137545459	WITHOUT_CLASSIFICATION	8.624545405916994E-8	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999916005471	WITHOUT_CLASSIFICATION	8.399452993046227E-9	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999999085240309	WITHOUT_CLASSIFICATION	9.147596917382721E-8	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999995648166531	WITHOUT_CLASSIFICATION	4.351833469330306E-7	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.99999978396651	WITHOUT_CLASSIFICATION	2.1603349003816992E-7	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999996266640281	WITHOUT_CLASSIFICATION	3.7333597200537726E-7	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999996388912812	WITHOUT_CLASSIFICATION	3.6110871879947474E-7	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999963031012867	WITHOUT_CLASSIFICATION	3.696898713280059E-6	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999996633152495	WITHOUT_CLASSIFICATION	3.366847505789766E-7	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999972621100934	WITHOUT_CLASSIFICATION	2.737889906592459E-6	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.999999964045224	WITHOUT_CLASSIFICATION	3.5954776022752094E-8	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999999928830267	WITHOUT_CLASSIFICATION	7.116973396903639E-9	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999999916005471	WITHOUT_CLASSIFICATION	8.399452993046227E-9	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999332892591823	WITHOUT_CLASSIFICATION	6.671074081764378E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999845205636	WITHOUT_CLASSIFICATION	1.547943638790508E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999950284972631	WITHOUT_CLASSIFICATION	4.971502736941149E-6	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999988783770467	WITHOUT_CLASSIFICATION	1.1216229532693212E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999822678943925	WITHOUT_CLASSIFICATION	1.7732105607544244E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999994108366967	WITHOUT_CLASSIFICATION	5.8916330330513416E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998487335927	WITHOUT_CLASSIFICATION	1.51266407335884E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999974253277722	WITHOUT_CLASSIFICATION	2.5746722278185627E-6	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999999688815377	WITHOUT_CLASSIFICATION	3.1118462216235424E-8	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999997688376857	WITHOUT_CLASSIFICATION	2.3116231432035442E-7	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999997347019475	WITHOUT_CLASSIFICATION	2.652980525142964E-7	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999999905018583	WITHOUT_CLASSIFICATION	9.498141706843593E-9	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.999997946438852	WITHOUT_CLASSIFICATION	2.0535611480502377E-6	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999999549598513	WITHOUT_CLASSIFICATION	4.504014877776146E-8	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999996916967148	WITHOUT_CLASSIFICATION	3.0830328527265507E-7	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999995463777895	WITHOUT_CLASSIFICATION	4.5362221050907186E-7	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999999563372183	WITHOUT_CLASSIFICATION	4.366278172509521E-8	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9999998950324567	WITHOUT_CLASSIFICATION	1.0496754334446747E-7	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.999999148006853	WITHOUT_CLASSIFICATION	8.519931469435039E-7	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999996633152495	WITHOUT_CLASSIFICATION	3.366847505789766E-7	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9999999845205636	WITHOUT_CLASSIFICATION	1.547943638790508E-8	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999950284972631	WITHOUT_CLASSIFICATION	4.971502736941149E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999822678943925	WITHOUT_CLASSIFICATION	1.7732105607544244E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999994108366967	WITHOUT_CLASSIFICATION	5.8916330330513416E-6	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999998487335927	WITHOUT_CLASSIFICATION	1.51266407335884E-7	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999974253277722	WITHOUT_CLASSIFICATION	2.5746722278185627E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999997520870512	WITHOUT_CLASSIFICATION	2.479129488571206E-7	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9999966024123257	WITHOUT_CLASSIFICATION	3.397587674315799E-6	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999998881127589	WITHOUT_CLASSIFICATION	1.1188724110294096E-7	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999999941831245	WITHOUT_CLASSIFICATION	5.8168755102788376E-9	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999942658737678	WITHOUT_CLASSIFICATION	5.734126232153952E-6	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9999942658737678	WITHOUT_CLASSIFICATION	5.734126232153952E-6	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999992199667856	WITHOUT_CLASSIFICATION	7.800332143268942E-7	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999999977251673	WITHOUT_CLASSIFICATION	2.2748327586559415E-9	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999991514161686	WITHOUT_CLASSIFICATION	8.485838313783944E-7	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999983809654106	WITHOUT_CLASSIFICATION	1.6190345894029025E-6	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999999902641922	WITHOUT_CLASSIFICATION	9.735807877650083E-9	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999980682339382	WITHOUT_CLASSIFICATION	1.9317660617935465E-6	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999999698801861	WITHOUT_CLASSIFICATION	3.011981384640258E-8	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999995087720038	WITHOUT_CLASSIFICATION	4.912279960817198E-7	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999992821994493	WITHOUT_CLASSIFICATION	7.178005507206533E-7	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9999999197832977	WITHOUT_CLASSIFICATION	8.021670227941883E-8	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9999999777269095	WITHOUT_CLASSIFICATION	2.227309040233843E-8	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999999133928635	WITHOUT_CLASSIFICATION	8.660713644790906E-8	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999907889105532	WITHOUT_CLASSIFICATION	9.211089446875991E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999992791389236	WITHOUT_CLASSIFICATION	7.208610764158503E-7	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999999939697984	WITHOUT_CLASSIFICATION	6.030201638167585E-9	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999999005058466	WITHOUT_CLASSIFICATION	9.949415338649065E-8	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999999943069703	WITHOUT_CLASSIFICATION	5.693029727024107E-9	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999999717854774	WITHOUT_CLASSIFICATION	2.8214522574644937E-8	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999995620385472	WITHOUT_CLASSIFICATION	4.379614526494431E-7	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999999825354532	WITHOUT_CLASSIFICATION	1.746454681342082E-8	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9999754280877815	WITHOUT_CLASSIFICATION	2.4571912218459782E-5	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9999999597215922	WITHOUT_CLASSIFICATION	4.0278407804135214E-8	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999999856354046	WITHOUT_CLASSIFICATION	1.436459537546197E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172889	WITHOUT_CLASSIFICATION	5.988271114636113E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999875452036613	WITHOUT_CLASSIFICATION	1.2454796338649145E-5	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999996331408374	WITHOUT_CLASSIFICATION	3.668591626349992E-7	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.999990655133415	WITHOUT_CLASSIFICATION	9.344866585060257E-6	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999953779859431	WITHOUT_CLASSIFICATION	4.6220140568834724E-6	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172889	WITHOUT_CLASSIFICATION	5.988271114636113E-8	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999875452036613	WITHOUT_CLASSIFICATION	1.2454796338649145E-5	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999992791389236	WITHOUT_CLASSIFICATION	7.208610764158503E-7	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999999374044238	WITHOUT_CLASSIFICATION	6.259557612779072E-8	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9999998003192629	WITHOUT_CLASSIFICATION	1.9968073696978284E-7	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.999963275629583	WITHOUT_CLASSIFICATION	3.672437041702679E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9999974544755673	WITHOUT_CLASSIFICATION	2.545524432665738E-6	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999999980274035	WITHOUT_CLASSIFICATION	1.972596446878936E-9	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999978149034228	WITHOUT_CLASSIFICATION	2.18509657725321E-6	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9999970616100858	WITHOUT_CLASSIFICATION	2.938389914235369E-6	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999998323742084	WITHOUT_CLASSIFICATION	1.6762579144304406E-7	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9998053162496188	WITHOUT_CLASSIFICATION	1.946837503812695E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9999720005857151	WITHOUT_CLASSIFICATION	2.7999414284932952E-5	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9993748623209902	WITHOUT_CLASSIFICATION	6.2513767900985E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999993497942891	WITHOUT_CLASSIFICATION	6.502057109952463E-7	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9999999632461679	WITHOUT_CLASSIFICATION	3.675383216257859E-8	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999999820715382	WITHOUT_CLASSIFICATION	1.792846192567488E-8	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999968054047684	WITHOUT_CLASSIFICATION	3.194595231590108E-6	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9999895386806082	WITHOUT_CLASSIFICATION	1.0461319391788403E-5	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998151987195758	WITHOUT_CLASSIFICATION	1.8480128042423704E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9999874749420675	WITHOUT_CLASSIFICATION	1.2525057932500542E-5	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999945269649	WITHOUT_CLASSIFICATION	5.473035229454516E-9	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9999995345274008	WITHOUT_CLASSIFICATION	4.6547259927668194E-7	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999999990414207	WITHOUT_CLASSIFICATION	9.585793675587628E-10	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9999992290611325	WITHOUT_CLASSIFICATION	7.709388674165206E-7	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9999996973856343	WITHOUT_CLASSIFICATION	3.0261436572462815E-7	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.999999999127203	WITHOUT_CLASSIFICATION	8.727968544363088E-10	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999999994637104	WITHOUT_CLASSIFICATION	5.362896287545315E-10	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9999994751945083	WITHOUT_CLASSIFICATION	5.248054917644665E-7	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9999994058843702	WITHOUT_CLASSIFICATION	5.941156298127276E-7	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9999992940088717	WITHOUT_CLASSIFICATION	7.059911283816144E-7	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999963565471908	WITHOUT_CLASSIFICATION	3.643452809088254E-6	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9991767497967587	WITHOUT_CLASSIFICATION	8.232502032412338E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999997188092842	WITHOUT_CLASSIFICATION	2.8119071580054274E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9999907889105532	WITHOUT_CLASSIFICATION	9.211089446875991E-6	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999997516696517	WITHOUT_CLASSIFICATION	2.4833034823079784E-7	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879318	WITHOUT_CLASSIFICATION	6.641206816733734E-8	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999989419073636	WITHOUT_CLASSIFICATION	1.058092636374362E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999993908810629	WITHOUT_CLASSIFICATION	6.091189370669251E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999993908810629	WITHOUT_CLASSIFICATION	6.091189370669251E-7	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999999664773852	WITHOUT_CLASSIFICATION	3.352261472841465E-8	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.999999993567758	WITHOUT_CLASSIFICATION	6.432242037337108E-9	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999999738025632	WITHOUT_CLASSIFICATION	2.619743678610443E-8	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999998374810792	WITHOUT_CLASSIFICATION	1.6251892078438597E-7	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999979056720839	WITHOUT_CLASSIFICATION	2.094327915955637E-6	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999999979276193	WITHOUT_CLASSIFICATION	2.0723807195972012E-9	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991442368661	WITHOUT_CLASSIFICATION	8.557631340273971E-7	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999999874654392	WITHOUT_CLASSIFICATION	1.2534560800367202E-8	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999496624799079	WITHOUT_CLASSIFICATION	5.03375200921264E-5	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999995083055135	WITHOUT_CLASSIFICATION	4.916944864357669E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999997457886297	WITHOUT_CLASSIFICATION	2.5421137032508044E-7	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998349489871	WITHOUT_CLASSIFICATION	1.6505101282963447E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999952122765312	WITHOUT_CLASSIFICATION	4.787723468855604E-6	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999933146306936	WITHOUT_CLASSIFICATION	6.685369306354858E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999711028740125	WITHOUT_CLASSIFICATION	2.8897125987526328E-5	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999984680367838	WITHOUT_CLASSIFICATION	1.5319632162332024E-6	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999812175073	WITHOUT_CLASSIFICATION	1.8782492637847587E-8	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999999812175073	WITHOUT_CLASSIFICATION	1.8782492637847587E-8	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988856656106	WITHOUT_CLASSIFICATION	1.1143343893661486E-6	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999988856656106	WITHOUT_CLASSIFICATION	1.1143343893661486E-6	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999999983463702	WITHOUT_CLASSIFICATION	1.6536297231246853E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999711871311425	WITHOUT_CLASSIFICATION	2.881286885748045E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991884063177618	WITHOUT_CLASSIFICATION	8.115936822381332E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.999999995581864	WITHOUT_CLASSIFICATION	4.418135997303732E-9	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999985873075155	WITHOUT_CLASSIFICATION	1.412692484538634E-6	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999989597686255	WITHOUT_CLASSIFICATION	1.0402313745255049E-6	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999999162341126	WITHOUT_CLASSIFICATION	8.376588738019198E-8	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999998349489871	WITHOUT_CLASSIFICATION	1.6505101282963447E-7	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9999952122765312	WITHOUT_CLASSIFICATION	4.787723468855604E-6	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9999711028740125	WITHOUT_CLASSIFICATION	2.8897125987526328E-5	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999988273105678	WITHOUT_CLASSIFICATION	1.1726894322189318E-6	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999965948605215	WITHOUT_CLASSIFICATION	3.405139478454007E-6	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9868632525337998	WITHOUT_CLASSIFICATION	0.013136747466200246	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999361033508296	WITHOUT_CLASSIFICATION	6.38966491703548E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999977508388241	WITHOUT_CLASSIFICATION	2.24916117584746E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9999855523778137	WITHOUT_CLASSIFICATION	1.4447622186388035E-5	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999990220449303	WITHOUT_CLASSIFICATION	9.779550697189865E-7	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999996350850706	WITHOUT_CLASSIFICATION	3.649149294393417E-7	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999993664502768	WITHOUT_CLASSIFICATION	6.335497232367665E-7	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.999999988126361	WITHOUT_CLASSIFICATION	1.1873638879501545E-8	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999831761558068	WITHOUT_CLASSIFICATION	1.682384419317308E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9994559743219732	WITHOUT_CLASSIFICATION	5.440256780267981E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9999937477940415	WITHOUT_CLASSIFICATION	6.2522059586074936E-6	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9998516202981251	WITHOUT_CLASSIFICATION	1.4837970187490455E-4	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.99998813114012	WITHOUT_CLASSIFICATION	1.1868859880067593E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999999468333853	WITHOUT_CLASSIFICATION	5.3166614755937755E-8	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.999989079335593	WITHOUT_CLASSIFICATION	1.0920664407025174E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999996237007849	WITHOUT_CLASSIFICATION	3.7629921519423684E-7	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999998724916578	WITHOUT_CLASSIFICATION	1.2750834215919275E-7	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999992243299041	WITHOUT_CLASSIFICATION	7.756700960002588E-7	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999999800514796	WITHOUT_CLASSIFICATION	1.994852041005612E-8	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999961528138975	WITHOUT_CLASSIFICATION	3.847186102547889E-6	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.999995794016215	WITHOUT_CLASSIFICATION	4.205983784957383E-6	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.999999900518174	WITHOUT_CLASSIFICATION	9.948182602439915E-8	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999999390288579	WITHOUT_CLASSIFICATION	6.097114220041863E-8	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999994776014023	WITHOUT_CLASSIFICATION	5.223985977814253E-7	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9999923971377657	WITHOUT_CLASSIFICATION	7.602862234267258E-6	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999883422091557	WITHOUT_CLASSIFICATION	1.1657790844412085E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999999260016723	WITHOUT_CLASSIFICATION	7.399832765651979E-8	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9999284169425533	WITHOUT_CLASSIFICATION	7.158305744674209E-5	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9999957753324771	WITHOUT_CLASSIFICATION	4.224667522930148E-6	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.999972835236772	WITHOUT_CLASSIFICATION	2.716476322787547E-5	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999945552522216	WITHOUT_CLASSIFICATION	5.444747778415238E-6	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.999995555434119	WITHOUT_CLASSIFICATION	4.4445658810362445E-6	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9996604840901789	WITHOUT_CLASSIFICATION	3.395159098210428E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9999999892580352	WITHOUT_CLASSIFICATION	1.0741964733921135E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992024174217	WITHOUT_CLASSIFICATION	7.975825783557824E-7	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9999953914931787	WITHOUT_CLASSIFICATION	4.608506821286074E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999934322202172	WITHOUT_CLASSIFICATION	6.5677797827963945E-6	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999932760686976	WITHOUT_CLASSIFICATION	6.723931302399357E-6	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999633070549481	WITHOUT_CLASSIFICATION	3.6692945051900174E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879318	WITHOUT_CLASSIFICATION	6.641206816733734E-8	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999992024174217	WITHOUT_CLASSIFICATION	7.975825783557824E-7	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999696187163923	WITHOUT_CLASSIFICATION	3.0381283607725455E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999519956938681	WITHOUT_CLASSIFICATION	4.800430613198576E-5	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.999970391602441	WITHOUT_CLASSIFICATION	2.9608397558926153E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997006830127351	WITHOUT_CLASSIFICATION	2.9931698726499506E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9997006830127351	WITHOUT_CLASSIFICATION	2.9931698726499506E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.999999999032872	WITHOUT_CLASSIFICATION	9.671280272404654E-10	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999999852293053	WITHOUT_CLASSIFICATION	1.4770694704280538E-8	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999994015807585	WITHOUT_CLASSIFICATION	5.984192415235004E-7	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999999993668693	WITHOUT_CLASSIFICATION	6.331305358138661E-10	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999869596254659	WITHOUT_CLASSIFICATION	1.3040374534074543E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999993453402978	WITHOUT_CLASSIFICATION	6.546597022169136E-7	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999999891938802	WITHOUT_CLASSIFICATION	1.0806119892380644E-8	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9999969589876826	WITHOUT_CLASSIFICATION	3.0410123173829875E-6	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998899005484	WITHOUT_CLASSIFICATION	1.1009945159920595E-7	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999998899005484	WITHOUT_CLASSIFICATION	1.1009945159920595E-7	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999999282942253	WITHOUT_CLASSIFICATION	7.170577457225766E-8	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9999986638878594	WITHOUT_CLASSIFICATION	1.3361121404984886E-6	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999999910066143	WITHOUT_CLASSIFICATION	8.99338580263865E-9	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999997453516027	WITHOUT_CLASSIFICATION	2.5464839732207404E-7	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999984215097438	WITHOUT_CLASSIFICATION	1.5784902561622613E-6	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999945201440427	WITHOUT_CLASSIFICATION	5.47985595728246E-6	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9996151154901439	WITHOUT_CLASSIFICATION	3.848845098560827E-4	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999998861942809	WITHOUT_CLASSIFICATION	1.1380571909326076E-7	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999998316188504	WITHOUT_CLASSIFICATION	1.6838114958063194E-7	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9999364149173794	WITHOUT_CLASSIFICATION	6.358508262067717E-5	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.999999737075147	WITHOUT_CLASSIFICATION	2.6292485295271624E-7	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999987092651108	WITHOUT_CLASSIFICATION	1.2907348892874053E-6	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999998163286729	WITHOUT_CLASSIFICATION	1.836713272348171E-7	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999986925753396	WITHOUT_CLASSIFICATION	1.3074246604557908E-6	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9999986925753396	WITHOUT_CLASSIFICATION	1.3074246604557908E-6	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999987571245191	WITHOUT_CLASSIFICATION	1.2428754808392356E-6	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999974253277722	WITHOUT_CLASSIFICATION	2.5746722278185627E-6	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9999976764132303	WITHOUT_CLASSIFICATION	2.323586769623209E-6	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999997517347959	WITHOUT_CLASSIFICATION	2.48265204014193E-7	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9999999105307674	WITHOUT_CLASSIFICATION	8.946923251177413E-8	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.999997021024071	WITHOUT_CLASSIFICATION	2.9789759290598395E-6	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999999110367325	WITHOUT_CLASSIFICATION	8.896326744558497E-8	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999880789742432	WITHOUT_CLASSIFICATION	1.1921025756797782E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999996769915733	WITHOUT_CLASSIFICATION	3.230084266657189E-7	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.999999649711141	WITHOUT_CLASSIFICATION	3.5028885898199376E-7	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9999997610675172	WITHOUT_CLASSIFICATION	2.3893248280896584E-7	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999998061147428	WITHOUT_CLASSIFICATION	1.9388525720533336E-7	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9999949835885376	WITHOUT_CLASSIFICATION	5.016411462496102E-6	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9999993231325088	WITHOUT_CLASSIFICATION	6.768674912416907E-7	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999984569619021	WITHOUT_CLASSIFICATION	1.5430380978843629E-6	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999999301509874	WITHOUT_CLASSIFICATION	6.984901257694879E-8	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999997085140859	WITHOUT_CLASSIFICATION	2.9148591410581313E-7	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9999995469313003	WITHOUT_CLASSIFICATION	4.5306869960790783E-7	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999997475764874	WITHOUT_CLASSIFICATION	2.524235126331473E-7	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9999922142805334	WITHOUT_CLASSIFICATION	7.785719466562955E-6	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.999964152432811	WITHOUT_CLASSIFICATION	3.58475671889706E-5	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999994657271698	WITHOUT_CLASSIFICATION	5.342728302425803E-7	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9999988488415958	WITHOUT_CLASSIFICATION	1.1511584041239963E-6	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9997732634444835	WITHOUT_CLASSIFICATION	2.267365555164562E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.6027077060361797	WITHOUT_CLASSIFICATION	0.39729229396382026	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9999184095682631	WITHOUT_CLASSIFICATION	8.159043173702238E-5	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999999871202833	WITHOUT_CLASSIFICATION	1.2879716618915072E-8	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999999845614025	WITHOUT_CLASSIFICATION	1.5438597543208943E-8	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999999930986848	WITHOUT_CLASSIFICATION	6.90131515175562E-9	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9999740500585723	WITHOUT_CLASSIFICATION	2.5949941427746877E-5	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999999871736536	WITHOUT_CLASSIFICATION	1.2826346474878432E-8	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999995635481509	WITHOUT_CLASSIFICATION	4.3645184919016615E-7	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999998837592557	WITHOUT_CLASSIFICATION	1.1624074427006441E-7	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999999991841642	WITHOUT_CLASSIFICATION	8.158357279779681E-10	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999994070721175	WITHOUT_CLASSIFICATION	5.929278825132966E-7	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999999925905658	WITHOUT_CLASSIFICATION	7.409434280828664E-9	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999999453999174	WITHOUT_CLASSIFICATION	5.460008254110626E-8	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.999876756171873	WITHOUT_CLASSIFICATION	1.2324382812690612E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9999894482401661	WITHOUT_CLASSIFICATION	1.0551759833893183E-5	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9999699020278211	WITHOUT_CLASSIFICATION	3.009797217885855E-5	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999999209720981	WITHOUT_CLASSIFICATION	7.902790189836224E-8	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9999825904515159	WITHOUT_CLASSIFICATION	1.740954848406207E-5	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999999147878017	WITHOUT_CLASSIFICATION	8.521219828637415E-8	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999971593439343	WITHOUT_CLASSIFICATION	2.840656065778095E-6	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999867957417237	WITHOUT_CLASSIFICATION	1.320425827624637E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371559674237	WITHOUT_CLASSIFICATION	6.284403257624435E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999403345448	WITHOUT_CLASSIFICATION	5.96654552905279E-8	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999999964666003	WITHOUT_CLASSIFICATION	3.533399707049546E-9	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844750848	WITHOUT_CLASSIFICATION	1.552491517867467E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172889	WITHOUT_CLASSIFICATION	5.988271114636113E-8	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172889	WITHOUT_CLASSIFICATION	5.988271114636113E-8	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999999943386166	WITHOUT_CLASSIFICATION	5.6613833241154755E-9	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9999982113967588	WITHOUT_CLASSIFICATION	1.7886032412878541E-6	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9999999283234112	WITHOUT_CLASSIFICATION	7.167658876651592E-8	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9101171145402511	DEFECT	0.08988288545974883	WITHOUT_CLASSIFICATION
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9999999928859801	WITHOUT_CLASSIFICATION	7.114019854923182E-9	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9999998094290363	WITHOUT_CLASSIFICATION	1.9057096370447454E-7	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9999831727804777	WITHOUT_CLASSIFICATION	1.6827219522362785E-5	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9999988263735989	WITHOUT_CLASSIFICATION	1.1736264010169822E-6	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9998548116589173	WITHOUT_CLASSIFICATION	1.4518834108262114E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999999461797198	WITHOUT_CLASSIFICATION	5.3820280310673604E-8	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943150083266	WITHOUT_CLASSIFICATION	5.684991673501144E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943150083266	WITHOUT_CLASSIFICATION	5.684991673501144E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999943150083266	WITHOUT_CLASSIFICATION	5.684991673501144E-6	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999994501462789	WITHOUT_CLASSIFICATION	5.498537210718775E-7	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999987168551674	WITHOUT_CLASSIFICATION	1.2831448325870485E-6	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.999998142934025	WITHOUT_CLASSIFICATION	1.8570659750696804E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999982972986915	WITHOUT_CLASSIFICATION	1.70270130860083E-6	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9999982972986915	WITHOUT_CLASSIFICATION	1.70270130860083E-6	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999977716571943	WITHOUT_CLASSIFICATION	2.2283428057034033E-6	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9999912313027729	WITHOUT_CLASSIFICATION	8.768697227038611E-6	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999999505061398	WITHOUT_CLASSIFICATION	4.949386019838842E-8	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.999999808073842	WITHOUT_CLASSIFICATION	1.9192615785423268E-7	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999968799723347	WITHOUT_CLASSIFICATION	3.1200276653411295E-6	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999990985987195	WITHOUT_CLASSIFICATION	9.014012805167199E-7	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999995235921771	WITHOUT_CLASSIFICATION	4.764078228327045E-7	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999942102889612	WITHOUT_CLASSIFICATION	5.7897110388448385E-6	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9972459701549101	WITHOUT_CLASSIFICATION	0.002754029845089871	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999991108056603	WITHOUT_CLASSIFICATION	8.891943397233037E-7	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999991108056603	WITHOUT_CLASSIFICATION	8.891943397233037E-7	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999997275461716	WITHOUT_CLASSIFICATION	2.724538283419719E-7	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9999817215622101	WITHOUT_CLASSIFICATION	1.8278437789886066E-5	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999987216241676	WITHOUT_CLASSIFICATION	1.2783758324666725E-6	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999886330468922	WITHOUT_CLASSIFICATION	1.1366953107800428E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.999998048991853	WITHOUT_CLASSIFICATION	1.951008147032526E-6	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.999999985372522	WITHOUT_CLASSIFICATION	1.4627477973899429E-8	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999990160733774	WITHOUT_CLASSIFICATION	9.83926622568288E-7	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999941261167765	WITHOUT_CLASSIFICATION	5.873883223569343E-6	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999974056839568	WITHOUT_CLASSIFICATION	2.5943160432030513E-6	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999971181839307	WITHOUT_CLASSIFICATION	2.881816069336547E-6	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9999998296963889	WITHOUT_CLASSIFICATION	1.703036110892096E-7	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999963575223186	WITHOUT_CLASSIFICATION	3.6424776813154928E-6	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999978922564754	WITHOUT_CLASSIFICATION	2.1077435245104336E-6	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9999997022330506	WITHOUT_CLASSIFICATION	2.977669493777783E-7	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9999932144376158	WITHOUT_CLASSIFICATION	6.785562384166684E-6	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999996033251167	WITHOUT_CLASSIFICATION	3.96674883227816E-7	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999887326869239	WITHOUT_CLASSIFICATION	1.126731307619749E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9999874179732391	WITHOUT_CLASSIFICATION	1.2582026760938825E-5	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999963500797144	WITHOUT_CLASSIFICATION	3.6499202855323515E-6	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999962644761476	WITHOUT_CLASSIFICATION	3.7355238524271335E-6	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9973827467837464	WITHOUT_CLASSIFICATION	0.0026172532162537132	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999999004643901	WITHOUT_CLASSIFICATION	9.953560984211389E-8	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9999996334096181	WITHOUT_CLASSIFICATION	3.6659038199669605E-7	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9999997081846189	WITHOUT_CLASSIFICATION	2.918153810804539E-7	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999976921154332	WITHOUT_CLASSIFICATION	2.3078845668089784E-6	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999986030214378	WITHOUT_CLASSIFICATION	1.3969785621719012E-6	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999997389805553	WITHOUT_CLASSIFICATION	2.610194446694555E-7	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999985427051005	WITHOUT_CLASSIFICATION	1.4572948995000006E-6	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9999681386947286	WITHOUT_CLASSIFICATION	3.186130527137751E-5	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999966416406809	WITHOUT_CLASSIFICATION	3.358359319032189E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999832164786453	WITHOUT_CLASSIFICATION	1.6783521354710483E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999991198212518	WITHOUT_CLASSIFICATION	8.8017874815905E-7	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999982393455218	WITHOUT_CLASSIFICATION	1.760654478248744E-6	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999832164786453	WITHOUT_CLASSIFICATION	1.6783521354710483E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999929637927054	WITHOUT_CLASSIFICATION	7.0362072945313235E-6	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999996923887077	WITHOUT_CLASSIFICATION	3.0761129236864104E-7	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999997267835088	WITHOUT_CLASSIFICATION	2.732164911797639E-7	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999986978864198	WITHOUT_CLASSIFICATION	1.302113580244398E-6	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.999995065654604	WITHOUT_CLASSIFICATION	4.934345395863848E-6	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9999076974988712	WITHOUT_CLASSIFICATION	9.230250112874641E-5	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999993960213348	WITHOUT_CLASSIFICATION	6.039786652527761E-7	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999788631552806	WITHOUT_CLASSIFICATION	2.113684471930759E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999295049497807	WITHOUT_CLASSIFICATION	7.049505021932664E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999745722956884	WITHOUT_CLASSIFICATION	2.5427704311540498E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999425376678194	WITHOUT_CLASSIFICATION	5.7462332180558464E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9997901088205126	WITHOUT_CLASSIFICATION	2.0989117948734832E-4	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9998327937090661	WITHOUT_CLASSIFICATION	1.672062909338275E-4	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9988961658446023	WITHOUT_CLASSIFICATION	0.001103834155397709	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999994654544777	WITHOUT_CLASSIFICATION	5.345455223755472E-7	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.999996682797895	WITHOUT_CLASSIFICATION	3.3172021050804403E-6	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999986704912865	WITHOUT_CLASSIFICATION	1.3295087135379283E-6	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9999838318304161	WITHOUT_CLASSIFICATION	1.616816958390253E-5	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999998244660118	WITHOUT_CLASSIFICATION	1.7553398813647958E-7	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999657071261235	WITHOUT_CLASSIFICATION	3.42928738763654E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.999981049868308	WITHOUT_CLASSIFICATION	1.8950131692004608E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999852950763781	WITHOUT_CLASSIFICATION	1.4704923621951263E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999679424022405	WITHOUT_CLASSIFICATION	3.205759775941819E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999887084348982	WITHOUT_CLASSIFICATION	1.1291565101755963E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999884759822795	WITHOUT_CLASSIFICATION	1.1524017720629982E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.99999966446302	WITHOUT_CLASSIFICATION	3.3553697989628426E-7	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9999653665785085	WITHOUT_CLASSIFICATION	3.463342149154032E-5	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.999999922086566	WITHOUT_CLASSIFICATION	7.791343413172297E-8	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999999119331021	WITHOUT_CLASSIFICATION	8.806689795123712E-8	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999996796954903	WITHOUT_CLASSIFICATION	3.2030450970323357E-7	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999988948193347	WITHOUT_CLASSIFICATION	1.1051806653605636E-6	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9979345614563476	WITHOUT_CLASSIFICATION	0.002065438543652331	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9810552957459823	WITHOUT_CLASSIFICATION	0.01894470425401774	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9999685660594008	WITHOUT_CLASSIFICATION	3.143394059926939E-5	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999982209186942	WITHOUT_CLASSIFICATION	1.7790813057705688E-6	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999993953281492	WITHOUT_CLASSIFICATION	6.04671850785208E-7	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999985106023708	WITHOUT_CLASSIFICATION	1.4893976291906701E-6	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9999850465352405	WITHOUT_CLASSIFICATION	1.49534647595675E-5	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999999895153642	WITHOUT_CLASSIFICATION	1.0484635838327039E-8	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999995860178879	WITHOUT_CLASSIFICATION	4.13982112106643E-7	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999978532819217	WITHOUT_CLASSIFICATION	2.146718078389551E-6	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999990143973932	WITHOUT_CLASSIFICATION	9.856026067773965E-7	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999997588170341	WITHOUT_CLASSIFICATION	2.4118296590642605E-7	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999984284612903	WITHOUT_CLASSIFICATION	1.5715387097827932E-6	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999999022644709	WITHOUT_CLASSIFICATION	9.773552912811693E-8	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999996180308353	WITHOUT_CLASSIFICATION	3.8196916473906103E-7	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999987449066	WITHOUT_CLASSIFICATION	1.2550933999491234E-6	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999994798522427	WITHOUT_CLASSIFICATION	5.201477572883637E-7	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992307174418	WITHOUT_CLASSIFICATION	7.692825582148672E-7	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999998329312076	WITHOUT_CLASSIFICATION	1.6706879239495162E-7	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9999991193539557	WITHOUT_CLASSIFICATION	8.806460443631978E-7	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999966233849642	WITHOUT_CLASSIFICATION	3.37661503583842E-6	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9999987189081803	WITHOUT_CLASSIFICATION	1.2810918197925628E-6	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9999992307174418	WITHOUT_CLASSIFICATION	7.692825582148672E-7	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7374270512963732	WITHOUT_CLASSIFICATION	0.26257294870362685	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.7374270512963732	WITHOUT_CLASSIFICATION	0.26257294870362685	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.999999987762607	WITHOUT_CLASSIFICATION	1.2237392939782325E-8	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9999987685111452	WITHOUT_CLASSIFICATION	1.2314888547924457E-6	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9999989812826386	WITHOUT_CLASSIFICATION	1.0187173613594461E-6	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.999999990843738	WITHOUT_CLASSIFICATION	9.156261939528748E-9	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999996053147279	WITHOUT_CLASSIFICATION	3.9468527214656926E-7	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9999994301478455	WITHOUT_CLASSIFICATION	5.698521545684249E-7	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999951391860237	WITHOUT_CLASSIFICATION	4.860813976410864E-6	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.5776253231343753	DEFECT	0.4223746768656246	WITHOUT_CLASSIFICATION
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.999999895640287	WITHOUT_CLASSIFICATION	1.0435971288899904E-7	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9999465576202367	WITHOUT_CLASSIFICATION	5.3442379763246885E-5	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999999895521328	WITHOUT_CLASSIFICATION	1.0447867329226248E-8	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.999999501341352	WITHOUT_CLASSIFICATION	4.986586480185235E-7	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9999606752177306	WITHOUT_CLASSIFICATION	3.9324782269340415E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999998985123136	WITHOUT_CLASSIFICATION	1.0148768639278789E-7	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998390930687446	WITHOUT_CLASSIFICATION	1.6090693125542856E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999207209999027	WITHOUT_CLASSIFICATION	7.927900009730487E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9999998232754566	WITHOUT_CLASSIFICATION	1.7672454339198575E-7	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999964550314259	WITHOUT_CLASSIFICATION	3.544968574115718E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214153775	WITHOUT_CLASSIFICATION	1.5785846225438993E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999943351946076	WITHOUT_CLASSIFICATION	5.664805392407524E-6	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9996120273151241	WITHOUT_CLASSIFICATION	3.8797268487590083E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.999999983541095	WITHOUT_CLASSIFICATION	1.6458904994662447E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996951378314	WITHOUT_CLASSIFICATION	3.0486216854306847E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999996794722859	WITHOUT_CLASSIFICATION	3.2052771410006725E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986858049801	WITHOUT_CLASSIFICATION	1.314195019887597E-6	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999978845292569	WITHOUT_CLASSIFICATION	2.1154707431127195E-6	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999966099311995	WITHOUT_CLASSIFICATION	3.390068800475138E-6	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999950791366178	WITHOUT_CLASSIFICATION	4.920863382182499E-6	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999998214125103	WITHOUT_CLASSIFICATION	1.7858748970452544E-6	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999997105903927	WITHOUT_CLASSIFICATION	2.894096072976709E-6	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999962760530606	WITHOUT_CLASSIFICATION	3.723946939404547E-6	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999967370088846	WITHOUT_CLASSIFICATION	3.2629911153710487E-6	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999978824432413	WITHOUT_CLASSIFICATION	2.1175567586520895E-6	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999971842330941	WITHOUT_CLASSIFICATION	2.8157669058641997E-6	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999964845368199	WITHOUT_CLASSIFICATION	3.515463180125486E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999967325528748	WITHOUT_CLASSIFICATION	3.2674471252454545E-6	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999955811524454	WITHOUT_CLASSIFICATION	4.418847554598022E-6	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999958719061959	WITHOUT_CLASSIFICATION	4.1280938040733246E-6	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999940036789244	WITHOUT_CLASSIFICATION	5.996321075564158E-6	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999965779910786	WITHOUT_CLASSIFICATION	3.422008921392047E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999966482407601	WITHOUT_CLASSIFICATION	3.3517592398298342E-6	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999961977150078	WITHOUT_CLASSIFICATION	3.8022849922664073E-6	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999975591521371	WITHOUT_CLASSIFICATION	2.440847862916732E-6	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999968487812538	WITHOUT_CLASSIFICATION	3.1512187462061623E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999942650499335	WITHOUT_CLASSIFICATION	5.734950066522043E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999956307238832	WITHOUT_CLASSIFICATION	4.369276116755837E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940617707386	WITHOUT_CLASSIFICATION	5.938229261360201E-6	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999963515875421	WITHOUT_CLASSIFICATION	3.6484124579931595E-6	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999952348548548	WITHOUT_CLASSIFICATION	4.7651451451967125E-6	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999953177849411	WITHOUT_CLASSIFICATION	4.6822150589200625E-6	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999925655588768	WITHOUT_CLASSIFICATION	7.434441123176756E-6	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999933206309001	WITHOUT_CLASSIFICATION	6.679369099818322E-6	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999957986983234	WITHOUT_CLASSIFICATION	4.201301676561333E-6	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999950059168172	WITHOUT_CLASSIFICATION	4.994083182774557E-6	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999965886055796	WITHOUT_CLASSIFICATION	3.4113944204327493E-6	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999952841567946	WITHOUT_CLASSIFICATION	4.715843205312511E-6	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999969751639818	WITHOUT_CLASSIFICATION	3.0248360182851408E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999958868388431	WITHOUT_CLASSIFICATION	4.1131611568852705E-6	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999950498861142	WITHOUT_CLASSIFICATION	4.95011388573157E-6	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999963400856252	WITHOUT_CLASSIFICATION	3.659914374857026E-6	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999993164110372	WITHOUT_CLASSIFICATION	6.835889627975075E-6	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999886274625204	WITHOUT_CLASSIFICATION	1.1372537479670971E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999917035021082	WITHOUT_CLASSIFICATION	8.296497891719877E-6	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999975441021832	WITHOUT_CLASSIFICATION	2.455897816781448E-6	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999948060150887	WITHOUT_CLASSIFICATION	5.1939849113740385E-6	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999900591733621	WITHOUT_CLASSIFICATION	9.940826637931664E-6	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927631503177	WITHOUT_CLASSIFICATION	7.236849682259388E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999941630135426	WITHOUT_CLASSIFICATION	5.836986457416857E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999907057475169	WITHOUT_CLASSIFICATION	9.294252483172817E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999908681132754	WITHOUT_CLASSIFICATION	9.131886724553641E-6	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999923737918828	WITHOUT_CLASSIFICATION	7.626208117151136E-6	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999934105129319	WITHOUT_CLASSIFICATION	6.589487068162512E-6	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999890072110323	WITHOUT_CLASSIFICATION	1.0992788967578246E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999914271609829	WITHOUT_CLASSIFICATION	8.57283901708374E-6	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999898841463793	WITHOUT_CLASSIFICATION	1.0115853620738494E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999897002925382	WITHOUT_CLASSIFICATION	1.0299707461840505E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999933170624553	WITHOUT_CLASSIFICATION	6.682937544761634E-6	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999938559152873	WITHOUT_CLASSIFICATION	6.144084712641654E-6	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999907806783459	WITHOUT_CLASSIFICATION	9.219321654072422E-6	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999918384998413	WITHOUT_CLASSIFICATION	8.16150015868796E-6	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999938831850017	WITHOUT_CLASSIFICATION	6.1168149982607185E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999970777068873	WITHOUT_CLASSIFICATION	2.9222931128130186E-6	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999932634877057	WITHOUT_CLASSIFICATION	6.736512294260843E-6	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999950415636435	WITHOUT_CLASSIFICATION	4.958436356544375E-6	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999933015421774	WITHOUT_CLASSIFICATION	6.698457822618309E-6	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999949948837644	WITHOUT_CLASSIFICATION	5.005116235655949E-6	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999919151800292	WITHOUT_CLASSIFICATION	8.08481997074885E-6	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999939416752404	WITHOUT_CLASSIFICATION	6.058324759599653E-6	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999920632158408	WITHOUT_CLASSIFICATION	7.936784159219281E-6	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999952653933186	WITHOUT_CLASSIFICATION	4.7346066814098805E-6	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999941871426585	WITHOUT_CLASSIFICATION	5.812857341458211E-6	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999950962969528	WITHOUT_CLASSIFICATION	4.903703047247851E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999910226300769	WITHOUT_CLASSIFICATION	8.9773699231283E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999940070123072	WITHOUT_CLASSIFICATION	5.992987692765818E-6	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999977358882379	WITHOUT_CLASSIFICATION	2.264111762158101E-6	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999969681032925	WITHOUT_CLASSIFICATION	3.031896707474669E-6	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999954727279932	WITHOUT_CLASSIFICATION	4.527272006786708E-6	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999939188827098	WITHOUT_CLASSIFICATION	6.081117290129073E-6	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999953328864786	WITHOUT_CLASSIFICATION	4.66711352148215E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999957938868157	WITHOUT_CLASSIFICATION	4.206113184307712E-6	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999941340557383	WITHOUT_CLASSIFICATION	5.865944261624646E-6	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999970600549192	WITHOUT_CLASSIFICATION	2.9399450807559405E-6	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999956460691125	WITHOUT_CLASSIFICATION	4.353930887562594E-6	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999930152579146	WITHOUT_CLASSIFICATION	6.984742085450959E-6	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999932069551167	WITHOUT_CLASSIFICATION	6.793044883237137E-6	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999967303371026	WITHOUT_CLASSIFICATION	3.2696628973344092E-6	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.999995135841765	WITHOUT_CLASSIFICATION	4.864158235000264E-6	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999956019458044	WITHOUT_CLASSIFICATION	4.398054195577668E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999994910616484	WITHOUT_CLASSIFICATION	5.089383515958669E-6	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999931367471964	WITHOUT_CLASSIFICATION	6.863252803693967E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999965125090392	WITHOUT_CLASSIFICATION	3.4874909608803026E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999973777574979	WITHOUT_CLASSIFICATION	2.622242502220202E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999971552574913	WITHOUT_CLASSIFICATION	2.8447425086950656E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999954758752296	WITHOUT_CLASSIFICATION	4.524124770468718E-6	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999960595263166	WITHOUT_CLASSIFICATION	3.940473683306651E-6	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999945475863289	WITHOUT_CLASSIFICATION	5.452413671137032E-6	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999960574217652	WITHOUT_CLASSIFICATION	3.942578234678706E-6	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999959472427477	WITHOUT_CLASSIFICATION	4.052757252416471E-6	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999963097850568	WITHOUT_CLASSIFICATION	3.6902149431996287E-6	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999981589538299	WITHOUT_CLASSIFICATION	1.841046170090344E-6	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999975576306506	WITHOUT_CLASSIFICATION	2.442369349451613E-6	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999961787369298	WITHOUT_CLASSIFICATION	3.821263070170457E-6	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999978861088573	WITHOUT_CLASSIFICATION	2.1138911426638215E-6	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999969799904925	WITHOUT_CLASSIFICATION	3.0200095075054357E-6	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999963561206345	WITHOUT_CLASSIFICATION	3.6438793655526187E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999966431110892	WITHOUT_CLASSIFICATION	3.3568889108725166E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999958078875416	WITHOUT_CLASSIFICATION	4.19211245833159E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999968679577147	WITHOUT_CLASSIFICATION	3.132042285289976E-6	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999943407335777	WITHOUT_CLASSIFICATION	5.65926642225724E-6	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999958572151644	WITHOUT_CLASSIFICATION	4.142784835637627E-6	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999971317830695	WITHOUT_CLASSIFICATION	2.8682169306174554E-6	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999967559526133	WITHOUT_CLASSIFICATION	3.244047386745394E-6	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999979115645812	WITHOUT_CLASSIFICATION	2.088435418846261E-6	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999964796417254	WITHOUT_CLASSIFICATION	3.5203582745763956E-6	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.99999651683949	WITHOUT_CLASSIFICATION	3.4831605100986777E-6	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999967779625488	WITHOUT_CLASSIFICATION	3.22203745124722E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999948266416528	WITHOUT_CLASSIFICATION	5.173358347171009E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999962798079991	WITHOUT_CLASSIFICATION	3.7201920008543375E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967567755437	WITHOUT_CLASSIFICATION	3.2432244563741212E-6	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999918053134321	WITHOUT_CLASSIFICATION	8.194686567841441E-6	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999955807880002	WITHOUT_CLASSIFICATION	4.419211999769596E-6	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.99999437187946	WITHOUT_CLASSIFICATION	5.628120539982521E-6	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999995498803898	WITHOUT_CLASSIFICATION	4.501196101942847E-6	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999943720059735	WITHOUT_CLASSIFICATION	5.627994026478227E-6	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999939900506433	WITHOUT_CLASSIFICATION	6.009949356741173E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999936106700064	WITHOUT_CLASSIFICATION	6.389329993640529E-6	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999933779635801	WITHOUT_CLASSIFICATION	6.622036419884575E-6	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999958029216908	WITHOUT_CLASSIFICATION	4.197078309178807E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999949890038464	WITHOUT_CLASSIFICATION	5.010996153637519E-6	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999952703068652	WITHOUT_CLASSIFICATION	4.72969313474256E-6	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999917753926326	WITHOUT_CLASSIFICATION	8.224607367304777E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999955409287502	WITHOUT_CLASSIFICATION	4.459071249836957E-6	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999942296761443	WITHOUT_CLASSIFICATION	5.770323855732763E-6	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999945254276815	WITHOUT_CLASSIFICATION	5.474572318531879E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999920836701296	WITHOUT_CLASSIFICATION	7.916329870356897E-6	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999954803875405	WITHOUT_CLASSIFICATION	4.519612459443258E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999970847574213	WITHOUT_CLASSIFICATION	2.915242578693242E-6	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999995855365307	WITHOUT_CLASSIFICATION	4.144634692914473E-6	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999955047444147	WITHOUT_CLASSIFICATION	4.495255585360497E-6	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999944520959488	WITHOUT_CLASSIFICATION	5.5479040510671175E-6	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999976556259599	WITHOUT_CLASSIFICATION	2.3443740400945566E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999962660231371	WITHOUT_CLASSIFICATION	3.7339768628413636E-6	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999967404145699	WITHOUT_CLASSIFICATION	3.2595854301227134E-6	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999977027904134	WITHOUT_CLASSIFICATION	2.297209586604263E-6	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999973528163189	WITHOUT_CLASSIFICATION	2.647183681147756E-6	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999995949841767	WITHOUT_CLASSIFICATION	4.050158233002989E-6	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999959192662837	WITHOUT_CLASSIFICATION	4.080733716318676E-6	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999951028263423	WITHOUT_CLASSIFICATION	4.897173657696104E-6	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999972825883628	WITHOUT_CLASSIFICATION	2.7174116370453868E-6	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999971033061623	WITHOUT_CLASSIFICATION	2.8966938377733997E-6	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999967640764278	WITHOUT_CLASSIFICATION	3.235923572129896E-6	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999985642281688	WITHOUT_CLASSIFICATION	1.435771831100151E-6	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999972254036119	WITHOUT_CLASSIFICATION	2.774596388215104E-6	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999973378318583	WITHOUT_CLASSIFICATION	2.6621681416641412E-6	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999974631902839	WITHOUT_CLASSIFICATION	2.5368097160922187E-6	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999970586027425	WITHOUT_CLASSIFICATION	2.9413972574962864E-6	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999975502001375	WITHOUT_CLASSIFICATION	2.4497998624295198E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999962639589517	WITHOUT_CLASSIFICATION	3.7360410483717684E-6	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999985583185056	WITHOUT_CLASSIFICATION	1.4416814945151586E-6	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999971729876219	WITHOUT_CLASSIFICATION	2.8270123780069664E-6	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999984699555082	WITHOUT_CLASSIFICATION	1.530044491745608E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981880332313	WITHOUT_CLASSIFICATION	1.811966768742851E-6	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999974642508103	WITHOUT_CLASSIFICATION	2.535749189751429E-6	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999965354469311	WITHOUT_CLASSIFICATION	3.4645530688662282E-6	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999976735473992	WITHOUT_CLASSIFICATION	2.326452600716263E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983084641699	WITHOUT_CLASSIFICATION	1.6915358300915246E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999997577673516	WITHOUT_CLASSIFICATION	2.4223264840383067E-6	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999960531370501	WITHOUT_CLASSIFICATION	3.946862949890529E-6	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999973512988696	WITHOUT_CLASSIFICATION	2.6487011305598462E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999978517488723	WITHOUT_CLASSIFICATION	2.1482511276368715E-6	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999971886404758	WITHOUT_CLASSIFICATION	2.8113595242356725E-6	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999962532229303	WITHOUT_CLASSIFICATION	3.7467770696740955E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968636725666	WITHOUT_CLASSIFICATION	3.136327433507304E-6	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999970674357026	WITHOUT_CLASSIFICATION	2.932564297522701E-6	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999921179952805	WITHOUT_CLASSIFICATION	7.882004719449756E-6	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999997080957693	WITHOUT_CLASSIFICATION	2.919042307045194E-6	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999981372440838	WITHOUT_CLASSIFICATION	1.8627559161627368E-6	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999981063770456	WITHOUT_CLASSIFICATION	1.8936229545425828E-6	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999956224221377	WITHOUT_CLASSIFICATION	4.377577862349617E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.99999429614505	WITHOUT_CLASSIFICATION	5.70385494995243E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999957049604355	WITHOUT_CLASSIFICATION	4.2950395644375115E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999980742549637	WITHOUT_CLASSIFICATION	1.9257450363072696E-6	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999958398297972	WITHOUT_CLASSIFICATION	4.160170202847905E-6	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999960753161782	WITHOUT_CLASSIFICATION	3.9246838217723005E-6	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999957259737505	WITHOUT_CLASSIFICATION	4.274026249497173E-6	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999935466703764	WITHOUT_CLASSIFICATION	6.4533296235947485E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999948579789395	WITHOUT_CLASSIFICATION	5.142021060498431E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999945849199554	WITHOUT_CLASSIFICATION	5.415080044552361E-6	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999935107746439	WITHOUT_CLASSIFICATION	6.489225356095539E-6	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999941325985158	WITHOUT_CLASSIFICATION	5.867401484259163E-6	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999972786845879	WITHOUT_CLASSIFICATION	2.7213154120542276E-6	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999957386606134	WITHOUT_CLASSIFICATION	4.2613393865980846E-6	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999969351948604	WITHOUT_CLASSIFICATION	3.064805139658055E-6	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999952138526399	WITHOUT_CLASSIFICATION	4.7861473600985435E-6	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999958274862459	WITHOUT_CLASSIFICATION	4.172513754112736E-6	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999959884005734	WITHOUT_CLASSIFICATION	4.01159942666549E-6	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999955177946889	WITHOUT_CLASSIFICATION	4.4822053111673275E-6	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999966721027592	WITHOUT_CLASSIFICATION	3.3278972408090004E-6	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999948231487166	WITHOUT_CLASSIFICATION	5.17685128353122E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964715138809	WITHOUT_CLASSIFICATION	3.528486119105148E-6	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999966922434853	WITHOUT_CLASSIFICATION	3.307756514639565E-6	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999952828097626	WITHOUT_CLASSIFICATION	4.71719023749074E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999966029378995	WITHOUT_CLASSIFICATION	3.3970621005247435E-6	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999935807352134	WITHOUT_CLASSIFICATION	6.41926478662828E-6	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999955244783822	WITHOUT_CLASSIFICATION	4.475521617802777E-6	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999959706550138	WITHOUT_CLASSIFICATION	4.029344986200184E-6	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999975322994269	WITHOUT_CLASSIFICATION	2.4677005732068954E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970872121254	WITHOUT_CLASSIFICATION	2.9127878746159684E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999956863004675	WITHOUT_CLASSIFICATION	4.313699532450627E-6	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999938326169264	WITHOUT_CLASSIFICATION	6.1673830735941186E-6	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999960421311661	WITHOUT_CLASSIFICATION	3.957868833816231E-6	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999962613529356	WITHOUT_CLASSIFICATION	3.738647064422852E-6	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999967406388672	WITHOUT_CLASSIFICATION	3.2593611328822095E-6	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999948006671623	WITHOUT_CLASSIFICATION	5.199332837711503E-6	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999931265146978	WITHOUT_CLASSIFICATION	6.8734853022316345E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999925725954464	WITHOUT_CLASSIFICATION	7.427404553666607E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999938355343998	WITHOUT_CLASSIFICATION	6.16446560024423E-6	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999919459119362	WITHOUT_CLASSIFICATION	8.054088063810321E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999965202176974	WITHOUT_CLASSIFICATION	3.4797823026857406E-6	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999959523524289	WITHOUT_CLASSIFICATION	4.047647571081168E-6	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999971505804834	WITHOUT_CLASSIFICATION	2.8494195166667465E-6	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999941307982282	WITHOUT_CLASSIFICATION	5.8692017717937286E-6	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999967258519656	WITHOUT_CLASSIFICATION	3.274148034289298E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999945799353844	WITHOUT_CLASSIFICATION	5.420064615491407E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999993402445516	WITHOUT_CLASSIFICATION	6.597554484025646E-6	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999978050474513	WITHOUT_CLASSIFICATION	2.1949525486967134E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999949370218173	WITHOUT_CLASSIFICATION	5.0629781827365065E-6	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.99999511604818	WITHOUT_CLASSIFICATION	4.8839518199376316E-6	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999950924028026	WITHOUT_CLASSIFICATION	4.9075971973909744E-6	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.999996505651979	WITHOUT_CLASSIFICATION	3.494348021195601E-6	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999948925033414	WITHOUT_CLASSIFICATION	5.107496658614428E-6	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999943273536547	WITHOUT_CLASSIFICATION	5.672646345369756E-6	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999935043881519	WITHOUT_CLASSIFICATION	6.495611848037844E-6	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.999994353222293	WITHOUT_CLASSIFICATION	5.646777706923869E-6	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999952728832617	WITHOUT_CLASSIFICATION	4.727116738227241E-6	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999936993722253	WITHOUT_CLASSIFICATION	6.300627774725975E-6	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.99999448435569	WITHOUT_CLASSIFICATION	5.5156443100204205E-6	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999954344170667	WITHOUT_CLASSIFICATION	4.565582933344241E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999945760550374	WITHOUT_CLASSIFICATION	5.423944962625283E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952717113428	WITHOUT_CLASSIFICATION	4.728288657244379E-6	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999960435603752	WITHOUT_CLASSIFICATION	3.956439624798851E-6	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999943477190765	WITHOUT_CLASSIFICATION	5.652280923635396E-6	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999947881185537	WITHOUT_CLASSIFICATION	5.2118814463151046E-6	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.999995424473578	WITHOUT_CLASSIFICATION	4.575526421900349E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999958774331328	WITHOUT_CLASSIFICATION	4.122566867195591E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999953215812949	WITHOUT_CLASSIFICATION	4.6784187051488715E-6	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999967368534741	WITHOUT_CLASSIFICATION	3.2631465258420133E-6	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.999996220986511	WITHOUT_CLASSIFICATION	3.779013489082914E-6	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999960775191602	WITHOUT_CLASSIFICATION	3.922480839798218E-6	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999953317484254	WITHOUT_CLASSIFICATION	4.668251574632876E-6	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999948496624594	WITHOUT_CLASSIFICATION	5.150337540469476E-6	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999950539956437	WITHOUT_CLASSIFICATION	4.946004356323136E-6	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999964110539343	WITHOUT_CLASSIFICATION	3.5889460655884653E-6	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.999994165499487	WITHOUT_CLASSIFICATION	5.834500512947626E-6	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999962942946728	WITHOUT_CLASSIFICATION	3.7057053270780705E-6	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999966291546468	WITHOUT_CLASSIFICATION	3.3708453530541733E-6	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999950011116263	WITHOUT_CLASSIFICATION	4.998888373670942E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999864547548246	WITHOUT_CLASSIFICATION	1.3545245175375629E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999990434396855	WITHOUT_CLASSIFICATION	9.565603145151566E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999776844077146	WITHOUT_CLASSIFICATION	2.23155922854163E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999937402402651	WITHOUT_CLASSIFICATION	6.2597597349162445E-6	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999917237398608	WITHOUT_CLASSIFICATION	8.276260139166722E-6	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999893671022361	WITHOUT_CLASSIFICATION	1.0632897763954725E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999926578412037	WITHOUT_CLASSIFICATION	7.3421587962753634E-6	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999860685648414	WITHOUT_CLASSIFICATION	1.3931435158574164E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999923644256492	WITHOUT_CLASSIFICATION	7.635574350759214E-6	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999911660979993	WITHOUT_CLASSIFICATION	8.833902000736211E-6	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999880858357051	WITHOUT_CLASSIFICATION	1.1914164294870397E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999945240077781	WITHOUT_CLASSIFICATION	5.475992221958079E-6	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999966695300355	WITHOUT_CLASSIFICATION	3.330469964423239E-6	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999971179960627	WITHOUT_CLASSIFICATION	2.8820039372350778E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976423863118	WITHOUT_CLASSIFICATION	2.357613688264268E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999971586896345	WITHOUT_CLASSIFICATION	2.8413103654104497E-6	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988659639966	WITHOUT_CLASSIFICATION	1.1340360033897026E-6	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9999071960894064	WITHOUT_CLASSIFICATION	9.280391059370948E-5	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9999910645743711	WITHOUT_CLASSIFICATION	8.935425628779771E-6	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999802333054573	WITHOUT_CLASSIFICATION	1.9766694542784617E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998291033180342	WITHOUT_CLASSIFICATION	1.708966819656628E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996242314480713	WITHOUT_CLASSIFICATION	3.757685519286109E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999922245048047	WITHOUT_CLASSIFICATION	7.775495195392591E-6	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999883990760522	WITHOUT_CLASSIFICATION	1.1600923947844246E-5	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9999989284655383	WITHOUT_CLASSIFICATION	1.0715344617452679E-6	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999171029968921	WITHOUT_CLASSIFICATION	8.289700310794172E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9999564213045233	WITHOUT_CLASSIFICATION	4.3578695476686666E-5	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999925352451595	WITHOUT_CLASSIFICATION	7.464754840474505E-6	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954763785659	WITHOUT_CLASSIFICATION	4.523621434081366E-6	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9994939866280891	WITHOUT_CLASSIFICATION	5.060133719110109E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999959807943104	WITHOUT_CLASSIFICATION	4.019205689530952E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9994632092820754	WITHOUT_CLASSIFICATION	5.367907179245105E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998416961209036	WITHOUT_CLASSIFICATION	1.5830387909651273E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997011804354772	WITHOUT_CLASSIFICATION	2.9881956452276894E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9999995948514021	WITHOUT_CLASSIFICATION	4.051485978313347E-7	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999081473945025	WITHOUT_CLASSIFICATION	9.185260549748799E-5	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9999988463717402	WITHOUT_CLASSIFICATION	1.1536282598261697E-6	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999999583088548	WITHOUT_CLASSIFICATION	4.1691145199199844E-8	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999966940346	WITHOUT_CLASSIFICATION	3.305965405247218E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999966940346	WITHOUT_CLASSIFICATION	3.305965405247218E-9	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9999962345422492	WITHOUT_CLASSIFICATION	3.76545775094996E-6	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9999733719218016	WITHOUT_CLASSIFICATION	2.66280781984381E-5	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9999601286493676	WITHOUT_CLASSIFICATION	3.987135063237474E-5	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9999823382093602	WITHOUT_CLASSIFICATION	1.766179063971726E-5	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9999880099043026	WITHOUT_CLASSIFICATION	1.1990095697399017E-5	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999989409476613	WITHOUT_CLASSIFICATION	1.0590523387091549E-6	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9999322792177152	WITHOUT_CLASSIFICATION	6.772078228480582E-5	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9999892457298323	WITHOUT_CLASSIFICATION	1.0754270167675626E-5	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.998144919280927	WITHOUT_CLASSIFICATION	0.0018550807190730943	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9999998304677674	WITHOUT_CLASSIFICATION	1.6953223254613392E-7	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999996938307175	WITHOUT_CLASSIFICATION	3.061692824858656E-7	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9998148459669325	WITHOUT_CLASSIFICATION	1.8515403306748181E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9993585295244	WITHOUT_CLASSIFICATION	6.414704756000526E-4	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999982010935795	WITHOUT_CLASSIFICATION	1.798906420376578E-6	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999997140984616	WITHOUT_CLASSIFICATION	2.8590153841983046E-7	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999970751930868	WITHOUT_CLASSIFICATION	2.924806913275888E-6	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999999218544888	WITHOUT_CLASSIFICATION	7.814551114864102E-8	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.999765208101086	WITHOUT_CLASSIFICATION	2.347918989139602E-4	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.999766127722973	WITHOUT_CLASSIFICATION	2.338722770269648E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999449259978608	WITHOUT_CLASSIFICATION	5.507400213923136E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999999839170388	WITHOUT_CLASSIFICATION	1.608296120181318E-8	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999982392383099	WITHOUT_CLASSIFICATION	1.7607616901888605E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152042632270247	WITHOUT_CLASSIFICATION	0.28479573677297537	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9999999192241926	WITHOUT_CLASSIFICATION	8.077580734770326E-8	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152042632270247	WITHOUT_CLASSIFICATION	0.28479573677297537	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9999994933795855	WITHOUT_CLASSIFICATION	5.06620414492908E-7	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9999998673193345	WITHOUT_CLASSIFICATION	1.3268066537584207E-7	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.720966806188313	DEFECT	0.27903319381168695	WITHOUT_CLASSIFICATION
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999927040083236	WITHOUT_CLASSIFICATION	7.295991676402513E-6	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9999086195781003	WITHOUT_CLASSIFICATION	9.138042189968959E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999980388855504	WITHOUT_CLASSIFICATION	1.9611144496758785E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999980388855504	WITHOUT_CLASSIFICATION	1.9611144496758785E-6	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999980388855504	WITHOUT_CLASSIFICATION	1.9611144496758785E-6	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9999963634347807	WITHOUT_CLASSIFICATION	3.636565219176281E-6	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9999924823207891	WITHOUT_CLASSIFICATION	7.517679210920037E-6	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999999657950227	WITHOUT_CLASSIFICATION	3.420497739022649E-8	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.999927188891087	WITHOUT_CLASSIFICATION	7.281110891299434E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999907652139305	WITHOUT_CLASSIFICATION	9.234786069426627E-6	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999710419215603	WITHOUT_CLASSIFICATION	2.895807843982519E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998222755024783	WITHOUT_CLASSIFICATION	1.7772449752168732E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9997825757108202	WITHOUT_CLASSIFICATION	2.1742428917986847E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999063050564002	WITHOUT_CLASSIFICATION	9.369494359979067E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999943351946076	WITHOUT_CLASSIFICATION	5.664805392407524E-6	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.999999983541095	WITHOUT_CLASSIFICATION	1.6458904994662447E-8	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999996951378314	WITHOUT_CLASSIFICATION	3.0486216854306847E-7	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999996794722859	WITHOUT_CLASSIFICATION	3.2052771410006725E-7	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999986858049801	WITHOUT_CLASSIFICATION	1.314195019887597E-6	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999973827801735	WITHOUT_CLASSIFICATION	2.61721982659772E-6	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999967325528748	WITHOUT_CLASSIFICATION	3.2674471252454545E-6	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999966482407601	WITHOUT_CLASSIFICATION	3.3517592398298342E-6	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999942650499335	WITHOUT_CLASSIFICATION	5.734950066522043E-6	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999956307238832	WITHOUT_CLASSIFICATION	4.369276116755837E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999944764988117	WITHOUT_CLASSIFICATION	5.523501188283944E-6	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999940617707386	WITHOUT_CLASSIFICATION	5.938229261360201E-6	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999979240046059	WITHOUT_CLASSIFICATION	2.075995394203009E-6	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999967432610746	WITHOUT_CLASSIFICATION	3.256738925405869E-6	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999964332856007	WITHOUT_CLASSIFICATION	3.5667143991622525E-6	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999958930272705	WITHOUT_CLASSIFICATION	4.106972729416966E-6	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999963461573541	WITHOUT_CLASSIFICATION	3.653842645927764E-6	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999978594496919	WITHOUT_CLASSIFICATION	2.140550308182507E-6	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999970242689613	WITHOUT_CLASSIFICATION	2.9757310386652617E-6	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999966159119892	WITHOUT_CLASSIFICATION	3.384088010748142E-6	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999952888514453	WITHOUT_CLASSIFICATION	4.711148554783029E-6	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999941020074435	WITHOUT_CLASSIFICATION	5.897992556411071E-6	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999966459553471	WITHOUT_CLASSIFICATION	3.354044652808211E-6	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.999994721738726	WITHOUT_CLASSIFICATION	5.278261274064476E-6	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999964802377469	WITHOUT_CLASSIFICATION	3.5197622531777197E-6	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999958407868307	WITHOUT_CLASSIFICATION	4.159213169319132E-6	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999974681303645	WITHOUT_CLASSIFICATION	2.5318696354898353E-6	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999957513208486	WITHOUT_CLASSIFICATION	4.248679151417163E-6	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999955963241653	WITHOUT_CLASSIFICATION	4.40367583465756E-6	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999954455260597	WITHOUT_CLASSIFICATION	4.554473940343284E-6	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999951111260187	WITHOUT_CLASSIFICATION	4.88887398125107E-6	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999949212922841	WITHOUT_CLASSIFICATION	5.078707715919791E-6	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999938441503604	WITHOUT_CLASSIFICATION	6.155849639624166E-6	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999965908805675	WITHOUT_CLASSIFICATION	3.4091194324458213E-6	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999950574707795	WITHOUT_CLASSIFICATION	4.942529220409256E-6	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999935693675792	WITHOUT_CLASSIFICATION	6.43063242075247E-6	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999952858061331	WITHOUT_CLASSIFICATION	4.714193867004845E-6	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.999994528487122	WITHOUT_CLASSIFICATION	5.471512878108162E-6	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999964503362939	WITHOUT_CLASSIFICATION	3.5496637060675373E-6	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999974883230527	WITHOUT_CLASSIFICATION	2.5116769472298775E-6	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999968358272584	WITHOUT_CLASSIFICATION	3.1641727415771782E-6	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999960498789155	WITHOUT_CLASSIFICATION	3.950121084463709E-6	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999948730293876	WITHOUT_CLASSIFICATION	5.1269706124090524E-6	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999984210558086	WITHOUT_CLASSIFICATION	1.5789441914007457E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999882356689003	WITHOUT_CLASSIFICATION	1.1764331099839441E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999878967305488	WITHOUT_CLASSIFICATION	1.2103269451190051E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999943778546555	WITHOUT_CLASSIFICATION	5.6221453444142636E-6	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.99999434662154	WITHOUT_CLASSIFICATION	5.653378460056725E-6	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999900359323811	WITHOUT_CLASSIFICATION	9.964067618923818E-6	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999941630135426	WITHOUT_CLASSIFICATION	5.836986457416857E-6	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999907057475169	WITHOUT_CLASSIFICATION	9.294252483172817E-6	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999908681132754	WITHOUT_CLASSIFICATION	9.131886724553641E-6	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999914271609829	WITHOUT_CLASSIFICATION	8.57283901708374E-6	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999970777068873	WITHOUT_CLASSIFICATION	2.9222931128130186E-6	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999910226300769	WITHOUT_CLASSIFICATION	8.9773699231283E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999951652793424	WITHOUT_CLASSIFICATION	4.834720657581285E-6	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999940070123072	WITHOUT_CLASSIFICATION	5.992987692765818E-6	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999994910616484	WITHOUT_CLASSIFICATION	5.089383515958669E-6	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999965125090392	WITHOUT_CLASSIFICATION	3.4874909608803026E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999952784479679	WITHOUT_CLASSIFICATION	4.721552032156068E-6	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999973777574979	WITHOUT_CLASSIFICATION	2.622242502220202E-6	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999971552574913	WITHOUT_CLASSIFICATION	2.8447425086950656E-6	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999927839334454	WITHOUT_CLASSIFICATION	7.216066554536486E-6	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.999991713210338	WITHOUT_CLASSIFICATION	8.286789662037506E-6	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.99999187129008	WITHOUT_CLASSIFICATION	8.12870992002497E-6	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999946992928147	WITHOUT_CLASSIFICATION	5.300707185314414E-6	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999928218423357	WITHOUT_CLASSIFICATION	7.178157664241535E-6	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999946993577641	WITHOUT_CLASSIFICATION	5.300642235889799E-6	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999915056696297	WITHOUT_CLASSIFICATION	8.494330370393635E-6	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.99999116112195	WITHOUT_CLASSIFICATION	8.838878050060255E-6	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999929102181627	WITHOUT_CLASSIFICATION	7.089781837261633E-6	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999937443170672	WITHOUT_CLASSIFICATION	6.255682932857529E-6	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999991235863163	WITHOUT_CLASSIFICATION	8.764136837026306E-6	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999923912469454	WITHOUT_CLASSIFICATION	7.608753054687956E-6	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999933224547166	WITHOUT_CLASSIFICATION	6.677545283348349E-6	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999908162985891	WITHOUT_CLASSIFICATION	9.183701410844404E-6	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999922051847068	WITHOUT_CLASSIFICATION	7.794815293313115E-6	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999957097771334	WITHOUT_CLASSIFICATION	4.290222866639323E-6	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999938708621873	WITHOUT_CLASSIFICATION	6.129137812741928E-6	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999931871646199	WITHOUT_CLASSIFICATION	6.8128353801123626E-6	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999942040659937	WITHOUT_CLASSIFICATION	5.7959340062971135E-6	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.999990178472254	WITHOUT_CLASSIFICATION	9.821527745958558E-6	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999954006882599	WITHOUT_CLASSIFICATION	4.599311740169735E-6	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999948422156626	WITHOUT_CLASSIFICATION	5.157784337369217E-6	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999949957186322	WITHOUT_CLASSIFICATION	5.004281367888621E-6	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999939202554362	WITHOUT_CLASSIFICATION	6.079744563850713E-6	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999954275064644	WITHOUT_CLASSIFICATION	4.572493535583524E-6	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999931534531696	WITHOUT_CLASSIFICATION	6.8465468303832725E-6	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999951624295895	WITHOUT_CLASSIFICATION	4.8375704104206705E-6	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999958262553028	WITHOUT_CLASSIFICATION	4.173744697246262E-6	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999958594240704	WITHOUT_CLASSIFICATION	4.140575929665694E-6	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999966140174755	WITHOUT_CLASSIFICATION	3.3859825244724775E-6	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999924419541915	WITHOUT_CLASSIFICATION	7.55804580846332E-6	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999963204988024	WITHOUT_CLASSIFICATION	3.679501197535923E-6	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999978881243169	WITHOUT_CLASSIFICATION	2.1118756831685583E-6	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999964882460411	WITHOUT_CLASSIFICATION	3.5117539588913138E-6	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999984340315228	WITHOUT_CLASSIFICATION	1.5659684772361022E-6	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999967364283686	WITHOUT_CLASSIFICATION	3.2635716313868265E-6	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999958078875416	WITHOUT_CLASSIFICATION	4.19211245833159E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.99999461457546	WITHOUT_CLASSIFICATION	5.385424540068694E-6	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999968679577147	WITHOUT_CLASSIFICATION	3.132042285289976E-6	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999948266416528	WITHOUT_CLASSIFICATION	5.173358347171009E-6	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999967567755437	WITHOUT_CLASSIFICATION	3.2432244563741212E-6	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999936106700064	WITHOUT_CLASSIFICATION	6.389329993640529E-6	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999949890038464	WITHOUT_CLASSIFICATION	5.010996153637519E-6	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999955409287502	WITHOUT_CLASSIFICATION	4.459071249836957E-6	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999970847574213	WITHOUT_CLASSIFICATION	2.915242578693242E-6	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999962660231371	WITHOUT_CLASSIFICATION	3.7339768628413636E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999971680320966	WITHOUT_CLASSIFICATION	2.831967903436076E-6	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999967505767509	WITHOUT_CLASSIFICATION	3.2494232491941706E-6	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999956995253142	WITHOUT_CLASSIFICATION	4.3004746858185575E-6	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999967035107243	WITHOUT_CLASSIFICATION	3.2964892756695138E-6	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999964642646308	WITHOUT_CLASSIFICATION	3.5357353691129537E-6	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999997058964238	WITHOUT_CLASSIFICATION	2.9410357619774937E-6	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999949176271392	WITHOUT_CLASSIFICATION	5.08237286084262E-6	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999970493968126	WITHOUT_CLASSIFICATION	2.9506031873188744E-6	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.999995607626127	WITHOUT_CLASSIFICATION	4.3923738730013985E-6	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999965758269682	WITHOUT_CLASSIFICATION	3.4241730318257668E-6	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999960316111873	WITHOUT_CLASSIFICATION	3.968388812645679E-6	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999935029739319	WITHOUT_CLASSIFICATION	6.49702606808928E-6	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999970687982569	WITHOUT_CLASSIFICATION	2.9312017431937254E-6	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999972448960901	WITHOUT_CLASSIFICATION	2.7551039099738196E-6	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999976591651392	WITHOUT_CLASSIFICATION	2.340834860930442E-6	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999943987568902	WITHOUT_CLASSIFICATION	5.601243109708555E-6	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999949396340688	WITHOUT_CLASSIFICATION	5.060365931121164E-6	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999959098223778	WITHOUT_CLASSIFICATION	4.090177622161486E-6	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999960263645626	WITHOUT_CLASSIFICATION	3.973635437336914E-6	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999959731669592	WITHOUT_CLASSIFICATION	4.02683304085878E-6	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999958009192149	WITHOUT_CLASSIFICATION	4.199080785053912E-6	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999959863606552	WITHOUT_CLASSIFICATION	4.013639344754658E-6	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999943763182455	WITHOUT_CLASSIFICATION	5.623681754460381E-6	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999995945958783	WITHOUT_CLASSIFICATION	4.054041216934494E-6	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999937910358702	WITHOUT_CLASSIFICATION	6.208964129827218E-6	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999914093459996	WITHOUT_CLASSIFICATION	8.590654000317019E-6	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999951702375873	WITHOUT_CLASSIFICATION	4.829762412747285E-6	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999949710699382	WITHOUT_CLASSIFICATION	5.028930061852524E-6	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999953865614013	WITHOUT_CLASSIFICATION	4.613438598757819E-6	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999975272916548	WITHOUT_CLASSIFICATION	2.4727083451569626E-6	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999967913242072	WITHOUT_CLASSIFICATION	3.2086757929213518E-6	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999943494972862	WITHOUT_CLASSIFICATION	5.6505027138894705E-6	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999972582360357	WITHOUT_CLASSIFICATION	2.7417639644264327E-6	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.999996201442749	WITHOUT_CLASSIFICATION	3.7985572511077985E-6	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999961280010865	WITHOUT_CLASSIFICATION	3.871998913498957E-6	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.999995826350558	WITHOUT_CLASSIFICATION	4.173649442045528E-6	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999978229497737	WITHOUT_CLASSIFICATION	2.1770502263567613E-6	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999965443636815	WITHOUT_CLASSIFICATION	3.4556363185511104E-6	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999953135973612	WITHOUT_CLASSIFICATION	4.686402638841623E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999972466011798	WITHOUT_CLASSIFICATION	2.7533988200950444E-6	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999981880332313	WITHOUT_CLASSIFICATION	1.811966768742851E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999978347824392	WITHOUT_CLASSIFICATION	2.165217560724512E-6	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999983084641699	WITHOUT_CLASSIFICATION	1.6915358300915246E-6	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999978517488723	WITHOUT_CLASSIFICATION	2.1482511276368715E-6	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999968636725666	WITHOUT_CLASSIFICATION	3.136327433507304E-6	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.99999429614505	WITHOUT_CLASSIFICATION	5.70385494995243E-6	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999957049604355	WITHOUT_CLASSIFICATION	4.2950395644375115E-6	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999948579789395	WITHOUT_CLASSIFICATION	5.142021060498431E-6	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999945849199554	WITHOUT_CLASSIFICATION	5.415080044552361E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999949057516974	WITHOUT_CLASSIFICATION	5.094248302603486E-6	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.999998118851055	WITHOUT_CLASSIFICATION	1.8811489449679797E-6	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999973807747929	WITHOUT_CLASSIFICATION	2.6192252070146426E-6	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999975395089196	WITHOUT_CLASSIFICATION	2.460491080481398E-6	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999979481093412	WITHOUT_CLASSIFICATION	2.051890658915692E-6	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999930882273927	WITHOUT_CLASSIFICATION	6.911772607298867E-6	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999976201924867	WITHOUT_CLASSIFICATION	2.379807513313825E-6	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999975590674728	WITHOUT_CLASSIFICATION	2.4409325270840034E-6	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999983552385054	WITHOUT_CLASSIFICATION	1.6447614946023736E-6	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999972578586028	WITHOUT_CLASSIFICATION	2.742141397114349E-6	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999969101388329	WITHOUT_CLASSIFICATION	3.089861167202317E-6	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999998021878714	WITHOUT_CLASSIFICATION	1.9781212859774034E-6	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999972666734769	WITHOUT_CLASSIFICATION	2.733326523150763E-6	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999969449754869	WITHOUT_CLASSIFICATION	3.0550245131672812E-6	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999966010236233	WITHOUT_CLASSIFICATION	3.3989763765603973E-6	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999966411450331	WITHOUT_CLASSIFICATION	3.3588549669347767E-6	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999957326990291	WITHOUT_CLASSIFICATION	4.267300970950319E-6	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999961420238588	WITHOUT_CLASSIFICATION	3.857976141184765E-6	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999978099639375	WITHOUT_CLASSIFICATION	2.1900360625076886E-6	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999979705662965	WITHOUT_CLASSIFICATION	2.02943370345533E-6	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999968538721491	WITHOUT_CLASSIFICATION	3.146127850872407E-6	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999955342702027	WITHOUT_CLASSIFICATION	4.465729797226635E-6	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999944822105545	WITHOUT_CLASSIFICATION	5.517789445448449E-6	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999964215811936	WITHOUT_CLASSIFICATION	3.578418806389149E-6	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999953011879049	WITHOUT_CLASSIFICATION	4.698812095066461E-6	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999954289520341	WITHOUT_CLASSIFICATION	4.571047965887785E-6	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999927665160133	WITHOUT_CLASSIFICATION	7.233483986637684E-6	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999993956040664	WITHOUT_CLASSIFICATION	6.043959336060087E-6	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999943515684445	WITHOUT_CLASSIFICATION	5.64843155545558E-6	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999964602674534	WITHOUT_CLASSIFICATION	3.539732546494329E-6	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999946141496677	WITHOUT_CLASSIFICATION	5.385850332295177E-6	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999953123431357	WITHOUT_CLASSIFICATION	4.687656864309685E-6	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999950908114325	WITHOUT_CLASSIFICATION	4.909188567503449E-6	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.999996598194079	WITHOUT_CLASSIFICATION	3.4018059209782947E-6	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999962908561589	WITHOUT_CLASSIFICATION	3.7091438409835797E-6	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999963661880653	WITHOUT_CLASSIFICATION	3.6338119346956992E-6	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999939693000028	WITHOUT_CLASSIFICATION	6.030699997229036E-6	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999966130787266	WITHOUT_CLASSIFICATION	3.3869212734193073E-6	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999943239516962	WITHOUT_CLASSIFICATION	5.6760483037600816E-6	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999966029378995	WITHOUT_CLASSIFICATION	3.3970621005247435E-6	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999970872121254	WITHOUT_CLASSIFICATION	2.9127878746159684E-6	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999956863004675	WITHOUT_CLASSIFICATION	4.313699532450627E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999962802499687	WITHOUT_CLASSIFICATION	3.7197500312764695E-6	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999938355343998	WITHOUT_CLASSIFICATION	6.16446560024423E-6	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999965202176974	WITHOUT_CLASSIFICATION	3.4797823026857406E-6	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999945799353844	WITHOUT_CLASSIFICATION	5.420064615491407E-6	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999993402445516	WITHOUT_CLASSIFICATION	6.597554484025646E-6	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999945760550374	WITHOUT_CLASSIFICATION	5.423944962625283E-6	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999952717113428	WITHOUT_CLASSIFICATION	4.728288657244379E-6	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999963191073439	WITHOUT_CLASSIFICATION	3.6808926561885388E-6	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999997803066571	WITHOUT_CLASSIFICATION	2.196933429024904E-6	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999954187915062	WITHOUT_CLASSIFICATION	4.581208493788871E-6	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999962090002118	WITHOUT_CLASSIFICATION	3.7909997882700763E-6	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999952466837498	WITHOUT_CLASSIFICATION	4.753316250137924E-6	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999963543258332	WITHOUT_CLASSIFICATION	3.6456741666645416E-6	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999968257950301	WITHOUT_CLASSIFICATION	3.174204969736691E-6	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999952284284845	WITHOUT_CLASSIFICATION	4.771571515434226E-6	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999940263626746	WITHOUT_CLASSIFICATION	5.9736373253301095E-6	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999946540422849	WITHOUT_CLASSIFICATION	5.345957715043177E-6	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999944856553972	WITHOUT_CLASSIFICATION	5.5143446027222325E-6	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999960091521485	WITHOUT_CLASSIFICATION	3.990847851607767E-6	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999953742955406	WITHOUT_CLASSIFICATION	4.6257044593453495E-6	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999960296083434	WITHOUT_CLASSIFICATION	3.970391656557715E-6	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999963138219988	WITHOUT_CLASSIFICATION	3.6861780011801043E-6	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999970815357542	WITHOUT_CLASSIFICATION	2.9184642458918125E-6	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999960697954536	WITHOUT_CLASSIFICATION	3.930204546356372E-6	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999964415592785	WITHOUT_CLASSIFICATION	3.5584407216341163E-6	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999946985951543	WITHOUT_CLASSIFICATION	5.301404845617729E-6	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999941282866522	WITHOUT_CLASSIFICATION	5.8717133478584E-6	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999956630088197	WITHOUT_CLASSIFICATION	4.3369911802043415E-6	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999951608327632	WITHOUT_CLASSIFICATION	4.83916723680645E-6	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999969114860776	WITHOUT_CLASSIFICATION	3.0885139222868757E-6	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999958653254728	WITHOUT_CLASSIFICATION	4.134674527152316E-6	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999947956829881	WITHOUT_CLASSIFICATION	5.2043170118837724E-6	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999947715550193	WITHOUT_CLASSIFICATION	5.228444980780126E-6	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999932832461249	WITHOUT_CLASSIFICATION	6.716753875125877E-6	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999946850670953	WITHOUT_CLASSIFICATION	5.31493290473959E-6	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999956843277975	WITHOUT_CLASSIFICATION	4.315672202592638E-6	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999996244501121	WITHOUT_CLASSIFICATION	3.7554988790900965E-6	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999924697930416	WITHOUT_CLASSIFICATION	7.530206958386373E-6	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999949854393072	WITHOUT_CLASSIFICATION	5.014560692804483E-6	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999953563994246	WITHOUT_CLASSIFICATION	4.64360057540496E-6	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.99999425426006	WITHOUT_CLASSIFICATION	5.745739940008107E-6	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999959927855101	WITHOUT_CLASSIFICATION	4.007214489856181E-6	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999930752537423	WITHOUT_CLASSIFICATION	6.9247462577048055E-6	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.999994908915168	WITHOUT_CLASSIFICATION	5.0910848320206145E-6	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999927597530966	WITHOUT_CLASSIFICATION	7.240246903289453E-6	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999951116696211	WITHOUT_CLASSIFICATION	4.8883303789241715E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999936366906443	WITHOUT_CLASSIFICATION	6.3633093556959035E-6	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999958774331328	WITHOUT_CLASSIFICATION	4.122566867195591E-6	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999953215812949	WITHOUT_CLASSIFICATION	4.6784187051488715E-6	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999864547548246	WITHOUT_CLASSIFICATION	1.3545245175375629E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939998249555	WITHOUT_CLASSIFICATION	6.0001750444824E-6	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999776844077146	WITHOUT_CLASSIFICATION	2.23155922854163E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999917237398608	WITHOUT_CLASSIFICATION	8.276260139166722E-6	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999926578412037	WITHOUT_CLASSIFICATION	7.3421587962753634E-6	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999976423863118	WITHOUT_CLASSIFICATION	2.357613688264268E-6	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999971586896345	WITHOUT_CLASSIFICATION	2.8413103654104497E-6	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999996022298306	WITHOUT_CLASSIFICATION	3.977701694007457E-6	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999979796314077	WITHOUT_CLASSIFICATION	2.020368592324972E-6	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999960707703249	WITHOUT_CLASSIFICATION	3.929229675085551E-6	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999910513361092	WITHOUT_CLASSIFICATION	8.948663890800409E-6	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999962998060508	WITHOUT_CLASSIFICATION	3.700193949259578E-6	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999955582861532	WITHOUT_CLASSIFICATION	4.441713846796411E-6	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999956216379831	WITHOUT_CLASSIFICATION	4.378362016943036E-6	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999955664708624	WITHOUT_CLASSIFICATION	4.43352913755536E-6	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999936276149554	WITHOUT_CLASSIFICATION	6.372385044704756E-6	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999969271284164	WITHOUT_CLASSIFICATION	3.072871583586437E-6	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.99999542866114	WITHOUT_CLASSIFICATION	4.571338859981114E-6	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999967476619717	WITHOUT_CLASSIFICATION	3.2523380283884663E-6	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999898043677716	WITHOUT_CLASSIFICATION	1.0195632228369697E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999967235871645	WITHOUT_CLASSIFICATION	3.2764128355080726E-6	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.99999429370009	WITHOUT_CLASSIFICATION	5.706299909987709E-6	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999920851191603	WITHOUT_CLASSIFICATION	7.914880839643455E-6	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999942233705964	WITHOUT_CLASSIFICATION	5.776629403645118E-6	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999931893096516	WITHOUT_CLASSIFICATION	6.810690348394116E-6	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999948881487396	WITHOUT_CLASSIFICATION	5.111851260372423E-6	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999919177598773	WITHOUT_CLASSIFICATION	8.082240122802887E-6	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999813587566512	WITHOUT_CLASSIFICATION	1.8641243348807684E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9999875440643688	WITHOUT_CLASSIFICATION	1.245593563108561E-5	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999933699719786	WITHOUT_CLASSIFICATION	6.630028021349515E-6	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999940020937522	WITHOUT_CLASSIFICATION	5.99790624775189E-6	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999935443954636	WITHOUT_CLASSIFICATION	6.455604536288815E-6	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999939505827461	WITHOUT_CLASSIFICATION	6.049417253848573E-6	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999918099823756	WITHOUT_CLASSIFICATION	8.190017624483242E-6	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999954514436604	WITHOUT_CLASSIFICATION	4.548556339636934E-6	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999940771117427	WITHOUT_CLASSIFICATION	5.922888257330055E-6	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999931717574667	WITHOUT_CLASSIFICATION	6.828242533349124E-6	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999973297715314	WITHOUT_CLASSIFICATION	2.670228468528652E-6	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.999994829050669	WITHOUT_CLASSIFICATION	5.17094933104775E-6	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999962609457158	WITHOUT_CLASSIFICATION	3.739054284189817E-6	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999961564543424	WITHOUT_CLASSIFICATION	3.843545657592347E-6	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999958043441565	WITHOUT_CLASSIFICATION	4.195655843491867E-6	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999935105839686	WITHOUT_CLASSIFICATION	6.48941603141752E-6	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999970295352656	WITHOUT_CLASSIFICATION	2.970464734472699E-6	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999973897902866	WITHOUT_CLASSIFICATION	2.610209713362317E-6	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.999996680394542	WITHOUT_CLASSIFICATION	3.319605457835953E-6	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9999922245048047	WITHOUT_CLASSIFICATION	7.775495195392591E-6	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9999883990760522	WITHOUT_CLASSIFICATION	1.1600923947844246E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999954763785659	WITHOUT_CLASSIFICATION	4.523621434081366E-6	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999959807943104	WITHOUT_CLASSIFICATION	4.019205689530952E-6	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9994632092820754	WITHOUT_CLASSIFICATION	5.367907179245105E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9998416961209036	WITHOUT_CLASSIFICATION	1.5830387909651273E-4	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9997011804354772	WITHOUT_CLASSIFICATION	2.9881956452276894E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999886715361441	WITHOUT_CLASSIFICATION	1.1328463855908211E-5	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999955489457958	WITHOUT_CLASSIFICATION	4.451054204192098E-6	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999962585345469	WITHOUT_CLASSIFICATION	3.74146545324028E-6	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999956446031109	WITHOUT_CLASSIFICATION	4.355396889154236E-6	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999972337291413	WITHOUT_CLASSIFICATION	2.7662708585987177E-6	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999970072712593	WITHOUT_CLASSIFICATION	2.992728740697032E-6	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999975441900116	WITHOUT_CLASSIFICATION	2.4558099884278568E-6	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999951890624358	WITHOUT_CLASSIFICATION	4.810937564218788E-6	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999931645488553	WITHOUT_CLASSIFICATION	6.835451144619137E-6	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999974761879503	WITHOUT_CLASSIFICATION	2.5238120497570237E-6	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999971754764316	WITHOUT_CLASSIFICATION	2.8245235683153145E-6	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.999992167462124	WITHOUT_CLASSIFICATION	7.832537875909455E-6	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.999996074457853	WITHOUT_CLASSIFICATION	3.925542147073607E-6	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999932318113456	WITHOUT_CLASSIFICATION	6.768188654449852E-6	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999955442534396	WITHOUT_CLASSIFICATION	4.45574656033309E-6	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999960758181791	WITHOUT_CLASSIFICATION	3.924181820963103E-6	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999941621396985	WITHOUT_CLASSIFICATION	5.837860301460004E-6	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999958921102803	WITHOUT_CLASSIFICATION	4.107889719759958E-6	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999932209507244	WITHOUT_CLASSIFICATION	6.779049275687923E-6	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999959589761781	WITHOUT_CLASSIFICATION	4.041023821840775E-6	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999932881043629	WITHOUT_CLASSIFICATION	6.711895637055741E-6	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9999885667839471	WITHOUT_CLASSIFICATION	1.1433216053020915E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999796102859242	WITHOUT_CLASSIFICATION	2.0389714075793966E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999978831265142	WITHOUT_CLASSIFICATION	2.1168734858240816E-6	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999992753852638	WITHOUT_CLASSIFICATION	7.24614736181823E-7	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999986196137375	WITHOUT_CLASSIFICATION	1.3803862625402165E-6	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9996723973717362	WITHOUT_CLASSIFICATION	3.2760262826380055E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999996350957024	WITHOUT_CLASSIFICATION	3.649042976256681E-7	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9999993939333478	WITHOUT_CLASSIFICATION	6.060666522381042E-7	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9999817625815037	WITHOUT_CLASSIFICATION	1.8237418496297964E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9999081473945025	WITHOUT_CLASSIFICATION	9.185260549748799E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999966940346	WITHOUT_CLASSIFICATION	3.305965405247218E-9	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999999966940346	WITHOUT_CLASSIFICATION	3.305965405247218E-9	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9929058949358924	WITHOUT_CLASSIFICATION	0.007094105064107558	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999949853216051	WITHOUT_CLASSIFICATION	5.0146783948308925E-6	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999978818333214	WITHOUT_CLASSIFICATION	2.1181666786139845E-6	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9999986384954999	WITHOUT_CLASSIFICATION	1.3615045000726473E-6	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.999999535576073	WITHOUT_CLASSIFICATION	4.644239269212399E-7	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9999995273445857	WITHOUT_CLASSIFICATION	4.726554142639126E-7	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9999996304360915	WITHOUT_CLASSIFICATION	3.695639085338637E-7	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999986938496208	WITHOUT_CLASSIFICATION	1.3061503792696883E-6	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999999855079884	WITHOUT_CLASSIFICATION	1.4492011601195577E-8	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999999860439737	WITHOUT_CLASSIFICATION	1.3956026412363918E-8	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9999997031217782	WITHOUT_CLASSIFICATION	2.968782217671793E-7	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9999999658997626	WITHOUT_CLASSIFICATION	3.410023740796518E-8	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999999784817872	WITHOUT_CLASSIFICATION	2.1518212716937474E-8	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999999865602358	WITHOUT_CLASSIFICATION	1.3439764214491093E-8	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994889259263	WITHOUT_CLASSIFICATION	5.11074073751434E-7	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999994889259263	WITHOUT_CLASSIFICATION	5.11074073751434E-7	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999974853132813	WITHOUT_CLASSIFICATION	2.5146867187906482E-6	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999614589484	WITHOUT_CLASSIFICATION	3.854105165371354E-8	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999999982948964	WITHOUT_CLASSIFICATION	1.7051035465296954E-9	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9999998972378459	WITHOUT_CLASSIFICATION	1.0276215402077386E-7	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617744949	WITHOUT_CLASSIFICATION	3.822550502389553E-8	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996851423756	WITHOUT_CLASSIFICATION	3.1485762446705684E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617744949	WITHOUT_CLASSIFICATION	3.822550502389553E-8	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999951011883457	WITHOUT_CLASSIFICATION	4.89881165434063E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9848000560572079	WITHOUT_CLASSIFICATION	0.015199943942792159	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9966763586417445	WITHOUT_CLASSIFICATION	0.0033236413582554106	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9999887370683387	WITHOUT_CLASSIFICATION	1.1262931661233678E-5	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9999991333234896	WITHOUT_CLASSIFICATION	8.666765104000511E-7	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999999971644848	WITHOUT_CLASSIFICATION	2.835515108839419E-9	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999996825562326	WITHOUT_CLASSIFICATION	3.174437674034995E-6	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999991684935051	WITHOUT_CLASSIFICATION	8.315064948088416E-7	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9699442863615805	WITHOUT_CLASSIFICATION	0.030055713638419496	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999999451004113	WITHOUT_CLASSIFICATION	5.4899588550214977E-8	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999979140872036	WITHOUT_CLASSIFICATION	2.085912796386933E-6	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9999902894423993	WITHOUT_CLASSIFICATION	9.710557600584565E-6	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751713678	WITHOUT_CLASSIFICATION	7.592482863220877E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999999994180692	WITHOUT_CLASSIFICATION	5.819308132949511E-9	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999999994180692	WITHOUT_CLASSIFICATION	5.819308132949511E-9	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999989750438265	WITHOUT_CLASSIFICATION	1.0249561734742032E-6	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999999669037524	WITHOUT_CLASSIFICATION	3.309624759409318E-8	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999999038838235	WITHOUT_CLASSIFICATION	9.611617637221898E-8	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9992781740754197	WITHOUT_CLASSIFICATION	7.218259245801662E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999995750385763	WITHOUT_CLASSIFICATION	4.2496142364421836E-7	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999999617744949	WITHOUT_CLASSIFICATION	3.822550502389553E-8	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999994361610792	WITHOUT_CLASSIFICATION	5.638389207107367E-7	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999999001885282	WITHOUT_CLASSIFICATION	9.98114718069854E-8	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9999992528721952	WITHOUT_CLASSIFICATION	7.471278047493196E-7	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999994321155107	WITHOUT_CLASSIFICATION	5.678844893528174E-7	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999999974198875	WITHOUT_CLASSIFICATION	2.5801124558931015E-9	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.999999998451368	WITHOUT_CLASSIFICATION	1.548631953207363E-9	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999998765020178	WITHOUT_CLASSIFICATION	1.2349798229258183E-7	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.99999948937787	WITHOUT_CLASSIFICATION	5.106221301142016E-7	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999999998865624	WITHOUT_CLASSIFICATION	1.1343760681842187E-10	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999999838678568	WITHOUT_CLASSIFICATION	1.6132143253155435E-8	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999999959039727	WITHOUT_CLASSIFICATION	4.096027218514451E-9	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999999970919758	WITHOUT_CLASSIFICATION	2.908024225595645E-9	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9998463801686014	WITHOUT_CLASSIFICATION	1.536198313985203E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450111934	WITHOUT_CLASSIFICATION	1.5498880647322108E-7	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9999714160409418	WITHOUT_CLASSIFICATION	2.8583959058274248E-5	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999990343875564	WITHOUT_CLASSIFICATION	9.656124436358012E-7	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999984726696289	WITHOUT_CLASSIFICATION	1.5273303710935757E-6	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9998348626168412	WITHOUT_CLASSIFICATION	1.651373831588143E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999993818383693	WITHOUT_CLASSIFICATION	6.181616305793506E-7	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999998614408151	WITHOUT_CLASSIFICATION	1.3855918487589726E-7	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999999769719093	WITHOUT_CLASSIFICATION	2.302809075236655E-8	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9997460121049092	WITHOUT_CLASSIFICATION	2.539878950907813E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999999950571264	WITHOUT_CLASSIFICATION	4.9428734956593815E-9	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9999999494069096	WITHOUT_CLASSIFICATION	5.059309029095698E-8	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9999988458786266	WITHOUT_CLASSIFICATION	1.1541213733552111E-6	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999999924120794	WITHOUT_CLASSIFICATION	7.58792059331752E-9	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999999663344327	WITHOUT_CLASSIFICATION	3.366556723933019E-8	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9999980849304329	WITHOUT_CLASSIFICATION	1.915069567210236E-6	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9999830230957937	WITHOUT_CLASSIFICATION	1.697690420632811E-5	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999999058541198	WITHOUT_CLASSIFICATION	9.414588025450565E-8	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999748311869971	WITHOUT_CLASSIFICATION	2.5168813002768985E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.999999881263446	WITHOUT_CLASSIFICATION	1.1873655412211085E-7	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999999963157646	WITHOUT_CLASSIFICATION	3.6842354300475606E-9	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9983982913223045	WITHOUT_CLASSIFICATION	0.0016017086776954669	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.999998522815845	WITHOUT_CLASSIFICATION	1.4771841549932236E-6	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9999999102328494	WITHOUT_CLASSIFICATION	8.976715062402513E-8	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999839503811168	WITHOUT_CLASSIFICATION	1.6049618883208222E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999999683190768	WITHOUT_CLASSIFICATION	3.168092330135059E-8	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999999434898217	WITHOUT_CLASSIFICATION	5.6510178171935147E-8	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999999949659492	WITHOUT_CLASSIFICATION	5.034050904648826E-9	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999886715361441	WITHOUT_CLASSIFICATION	1.1328463855908211E-5	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997950744736	WITHOUT_CLASSIFICATION	2.0492552653551418E-7	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999989898320165	WITHOUT_CLASSIFICATION	1.0101679834405167E-6	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999371559674237	WITHOUT_CLASSIFICATION	6.284403257624435E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999999403345448	WITHOUT_CLASSIFICATION	5.96654552905279E-8	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999969595099856	WITHOUT_CLASSIFICATION	3.0404900143986297E-6	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999995581010296	WITHOUT_CLASSIFICATION	4.418989704536139E-7	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999891428730887	WITHOUT_CLASSIFICATION	1.0857126911252584E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741371967	WITHOUT_CLASSIFICATION	2.5862803352024436E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741371967	WITHOUT_CLASSIFICATION	2.5862803352024436E-8	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993714528	WITHOUT_CLASSIFICATION	5.900628547146232E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993714528	WITHOUT_CLASSIFICATION	5.900628547146232E-6	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999940993714528	WITHOUT_CLASSIFICATION	5.900628547146232E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999988300601541	WITHOUT_CLASSIFICATION	1.1699398458087047E-6	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999988300601541	WITHOUT_CLASSIFICATION	1.1699398458087047E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999942797262014	WITHOUT_CLASSIFICATION	5.7202737985610316E-6	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999942797262014	WITHOUT_CLASSIFICATION	5.7202737985610316E-6	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9999995260889125	WITHOUT_CLASSIFICATION	4.73911087506118E-7	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9999824798423185	WITHOUT_CLASSIFICATION	1.7520157681450215E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997136562079	WITHOUT_CLASSIFICATION	2.8634379209451744E-7	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999997136562079	WITHOUT_CLASSIFICATION	2.8634379209451744E-7	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9999998507277573	WITHOUT_CLASSIFICATION	1.492722427553482E-7	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999998351654474	WITHOUT_CLASSIFICATION	1.6483455252902917E-7	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999806676109396	WITHOUT_CLASSIFICATION	1.9332389060442866E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999999605869572	WITHOUT_CLASSIFICATION	3.941304280699267E-8	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9999910454013688	WITHOUT_CLASSIFICATION	8.954598631175046E-6	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999999502078835	WITHOUT_CLASSIFICATION	4.979211660504699E-8	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.999999925643438	WITHOUT_CLASSIFICATION	7.435656197732032E-8	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999666563309062	WITHOUT_CLASSIFICATION	3.334366909376959E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9999959280305634	WITHOUT_CLASSIFICATION	4.071969436537919E-6	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999938118108593	WITHOUT_CLASSIFICATION	6.1881891406610934E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.999999896877089	WITHOUT_CLASSIFICATION	1.0312291102360956E-7	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999991381346292	WITHOUT_CLASSIFICATION	8.618653707868967E-7	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9999876689887004	WITHOUT_CLASSIFICATION	1.2331011299602336E-5	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999866398099988	WITHOUT_CLASSIFICATION	1.3360190001084113E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999986069191679	WITHOUT_CLASSIFICATION	1.3930808321327857E-6	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9999564274677682	WITHOUT_CLASSIFICATION	4.357253223175006E-5	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999820567648604	WITHOUT_CLASSIFICATION	1.7943235139577535E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999877877138572	WITHOUT_CLASSIFICATION	1.2212286142787927E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999851590029143	WITHOUT_CLASSIFICATION	1.484099708564909E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.999954787038863	WITHOUT_CLASSIFICATION	4.521296113705553E-5	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999993212631945	WITHOUT_CLASSIFICATION	6.787368055080561E-7	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999996801656157	WITHOUT_CLASSIFICATION	3.1983438429493384E-6	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999981313794444	WITHOUT_CLASSIFICATION	1.8686205556020076E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999962036319776	WITHOUT_CLASSIFICATION	3.7963680223978285E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9999989992287195	WITHOUT_CLASSIFICATION	1.0007712805369662E-6	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999997587247455	WITHOUT_CLASSIFICATION	2.4127525449677265E-6	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999854607132054	WITHOUT_CLASSIFICATION	1.4539286794522674E-5	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999896727405166	WITHOUT_CLASSIFICATION	1.032725948338483E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999965512271164	WITHOUT_CLASSIFICATION	3.44877288354121E-6	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999990908594869	WITHOUT_CLASSIFICATION	9.091405130198546E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9999978081591541	WITHOUT_CLASSIFICATION	2.1918408459200143E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9997842372403585	WITHOUT_CLASSIFICATION	2.157627596416425E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9996720770610886	WITHOUT_CLASSIFICATION	3.279229389113098E-4	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999981711532326	WITHOUT_CLASSIFICATION	1.8288467673078042E-6	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997315602115272	WITHOUT_CLASSIFICATION	2.6843978847274953E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999911091420686	WITHOUT_CLASSIFICATION	8.890857931496786E-6	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9999917199198972	WITHOUT_CLASSIFICATION	8.280080102821224E-6	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999999821054603	WITHOUT_CLASSIFICATION	1.789453968491925E-8	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999997795697937	WITHOUT_CLASSIFICATION	2.2043020626817204E-7	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9999992772932382	WITHOUT_CLASSIFICATION	7.227067616855983E-7	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.999999518276342	WITHOUT_CLASSIFICATION	4.817236579642763E-7	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9999894813644936	WITHOUT_CLASSIFICATION	1.0518635506392458E-5	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.999999957925536	WITHOUT_CLASSIFICATION	4.2074464098256304E-8	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999997553830563	WITHOUT_CLASSIFICATION	2.4461694380128825E-7	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999999915101101	WITHOUT_CLASSIFICATION	8.489890009113295E-9	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999999591491198	WITHOUT_CLASSIFICATION	4.0850880265779306E-8	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999997898156947	WITHOUT_CLASSIFICATION	2.1018430523450297E-7	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999937730026767	WITHOUT_CLASSIFICATION	6.226997323277858E-6	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999976464407502	WITHOUT_CLASSIFICATION	2.3535592498858314E-6	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.999998851863041	WITHOUT_CLASSIFICATION	1.1481369589022498E-6	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999913770829918	WITHOUT_CLASSIFICATION	8.622917008102092E-6	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999998545553276	WITHOUT_CLASSIFICATION	1.454446724729334E-7	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.999999214957838	WITHOUT_CLASSIFICATION	7.850421621431507E-7	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999996851423756	WITHOUT_CLASSIFICATION	3.1485762446705684E-7	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9986549091494696	WITHOUT_CLASSIFICATION	0.0013450908505303393	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9999489859149349	WITHOUT_CLASSIFICATION	5.1014085065209796E-5	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.999999913822946	WITHOUT_CLASSIFICATION	8.617705400853837E-8	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999996826531078	WITHOUT_CLASSIFICATION	3.1734689215863563E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076112976	WITHOUT_CLASSIFICATION	1.6923887025065846E-6	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999939937409698	WITHOUT_CLASSIFICATION	6.006259030325606E-6	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999620585798752	WITHOUT_CLASSIFICATION	3.794142012483197E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999970841148159	WITHOUT_CLASSIFICATION	2.9158851840039196E-6	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999995189450883	WITHOUT_CLASSIFICATION	4.810549116371284E-7	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999536352800141	WITHOUT_CLASSIFICATION	4.6364719985885377E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999997907550006	WITHOUT_CLASSIFICATION	2.092449995197387E-7	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999998160824229	WITHOUT_CLASSIFICATION	1.839175771064326E-7	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999998443421495	WITHOUT_CLASSIFICATION	1.5565785047340729E-7	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999999106131388	WITHOUT_CLASSIFICATION	8.938686125009E-8	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9999884758629822	WITHOUT_CLASSIFICATION	1.1524137017811253E-5	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.999998067916675	WITHOUT_CLASSIFICATION	1.932083325015521E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999979753290049	WITHOUT_CLASSIFICATION	2.0246709950647864E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933593114243	WITHOUT_CLASSIFICATION	6.640688575692429E-6	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999999919014513	WITHOUT_CLASSIFICATION	8.098548759555196E-9	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999999819250412	WITHOUT_CLASSIFICATION	1.8074958809139636E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999395954203	WITHOUT_CLASSIFICATION	6.040457965776833E-8	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9999999395954203	WITHOUT_CLASSIFICATION	6.040457965776833E-8	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998689884249	WITHOUT_CLASSIFICATION	1.3101157504593973E-7	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999998689884249	WITHOUT_CLASSIFICATION	1.3101157504593973E-7	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999453156565	WITHOUT_CLASSIFICATION	5.468434351435219E-8	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9999999453156565	WITHOUT_CLASSIFICATION	5.468434351435219E-8	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999940245535768	WITHOUT_CLASSIFICATION	5.97544642319129E-6	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.999999963432488	WITHOUT_CLASSIFICATION	3.6567512059774775E-8	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999997737876638	WITHOUT_CLASSIFICATION	2.2621233620121343E-7	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999999700502313	WITHOUT_CLASSIFICATION	2.994976872705005E-8	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.999998345153639	WITHOUT_CLASSIFICATION	1.6548463611086766E-6	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9999972912360496	WITHOUT_CLASSIFICATION	2.7087639503804094E-6	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999999664233283	WITHOUT_CLASSIFICATION	3.357667177562383E-8	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999919833083374	WITHOUT_CLASSIFICATION	8.016691662669294E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9999999351930924	WITHOUT_CLASSIFICATION	6.480690758240289E-8	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999953967986408	WITHOUT_CLASSIFICATION	4.603201359267689E-6	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999814411401349	WITHOUT_CLASSIFICATION	1.8558859865111958E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999989835811564	WITHOUT_CLASSIFICATION	1.016418843597531E-6	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9999988363896035	WITHOUT_CLASSIFICATION	1.1636103964215484E-6	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.999744185997308	WITHOUT_CLASSIFICATION	2.5581400269208303E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9999973394054354	WITHOUT_CLASSIFICATION	2.660594564654082E-6	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999995359082716	WITHOUT_CLASSIFICATION	4.6409172837233884E-7	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999993826589458	WITHOUT_CLASSIFICATION	6.173410542665274E-7	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999618042776335	WITHOUT_CLASSIFICATION	3.8195722366408406E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9999998974018623	WITHOUT_CLASSIFICATION	1.0259813767702169E-7	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999996553866596	WITHOUT_CLASSIFICATION	3.44613340433612E-7	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999994677427069	WITHOUT_CLASSIFICATION	5.322572931064673E-7	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.999945879370961	WITHOUT_CLASSIFICATION	5.412062903906966E-5	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999993102993509	WITHOUT_CLASSIFICATION	6.897006490794853E-7	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999993323193282	WITHOUT_CLASSIFICATION	6.676806718051397E-7	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999998958052873	WITHOUT_CLASSIFICATION	1.0419471269125566E-7	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999979333326007	WITHOUT_CLASSIFICATION	2.0666673992696195E-6	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999992173299909	WITHOUT_CLASSIFICATION	7.826700090768898E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445004	WITHOUT_CLASSIFICATION	1.2554995189786085E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445004	WITHOUT_CLASSIFICATION	1.2554995189786085E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450111934	WITHOUT_CLASSIFICATION	1.5498880647322108E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450111934	WITHOUT_CLASSIFICATION	1.5498880647322108E-7	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999999997564147	WITHOUT_CLASSIFICATION	2.435852775239323E-10	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.8866091352672489	WITHOUT_CLASSIFICATION	0.11339086473275109	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999999584042122	WITHOUT_CLASSIFICATION	4.159578789773387E-8	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999995192299982	WITHOUT_CLASSIFICATION	4.807700018451842E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9999996756725846	WITHOUT_CLASSIFICATION	3.2432741530167845E-7	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445004	WITHOUT_CLASSIFICATION	1.2554995189786085E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445004	WITHOUT_CLASSIFICATION	1.2554995189786085E-9	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999999987445004	WITHOUT_CLASSIFICATION	1.2554995189786085E-9	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450111934	WITHOUT_CLASSIFICATION	1.5498880647322108E-7	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999998450111934	WITHOUT_CLASSIFICATION	1.5498880647322108E-7	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.999999943719834	WITHOUT_CLASSIFICATION	5.6280166070944513E-8	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999999838221206	WITHOUT_CLASSIFICATION	1.617787933313806E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999997243809577	WITHOUT_CLASSIFICATION	2.756190422886943E-7	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999991633264518	WITHOUT_CLASSIFICATION	8.366735481505378E-7	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9995809785234798	WITHOUT_CLASSIFICATION	4.19021476520235E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9999996973462074	WITHOUT_CLASSIFICATION	3.026537926910828E-7	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999993969816928	WITHOUT_CLASSIFICATION	6.030183071958798E-7	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.999998887087459	WITHOUT_CLASSIFICATION	1.1129125410123974E-6	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9999952045644653	WITHOUT_CLASSIFICATION	4.7954355346551565E-6	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999987213410091	WITHOUT_CLASSIFICATION	1.2786589908983124E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999999367537615	WITHOUT_CLASSIFICATION	6.324623856014495E-8	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999990875653614	WITHOUT_CLASSIFICATION	9.124346385941835E-7	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9999774256792768	WITHOUT_CLASSIFICATION	2.2574320723189517E-5	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999992814521815	WITHOUT_CLASSIFICATION	7.185478185822895E-7	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9995347150142775	WITHOUT_CLASSIFICATION	4.6528498572248156E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999966695181411	WITHOUT_CLASSIFICATION	3.3304818588863414E-6	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9999952452031323	WITHOUT_CLASSIFICATION	4.754796867606279E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642485966	WITHOUT_CLASSIFICATION	1.035751403382581E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642485966	WITHOUT_CLASSIFICATION	1.035751403382581E-6	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999989642485966	WITHOUT_CLASSIFICATION	1.035751403382581E-6	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999792798959384	WITHOUT_CLASSIFICATION	2.0720104061644303E-5	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9999792806715524	WITHOUT_CLASSIFICATION	2.0719328447497935E-5	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999997157144748	WITHOUT_CLASSIFICATION	2.8428552525761123E-7	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999996964244658	WITHOUT_CLASSIFICATION	3.035755341493027E-7	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9999996837890093	WITHOUT_CLASSIFICATION	3.1621099071205495E-7	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9999953532851652	WITHOUT_CLASSIFICATION	4.646714834782989E-6	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9999983717151689	WITHOUT_CLASSIFICATION	1.6282848310697227E-6	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999999242391993	WITHOUT_CLASSIFICATION	7.576080068401031E-8	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9999998058324118	WITHOUT_CLASSIFICATION	1.941675881260635E-7	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999946428728491	WITHOUT_CLASSIFICATION	5.35712715091509E-6	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999972768067881	WITHOUT_CLASSIFICATION	2.723193211907104E-6	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999999046162611	WITHOUT_CLASSIFICATION	9.53837389489163E-8	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999987521817962	WITHOUT_CLASSIFICATION	1.2478182037708684E-6	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999999978234002	WITHOUT_CLASSIFICATION	2.176599779934963E-9	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999999968830596	WITHOUT_CLASSIFICATION	3.116940250465812E-9	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999941244457085	WITHOUT_CLASSIFICATION	5.875554291529704E-6	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999987795228911	WITHOUT_CLASSIFICATION	1.2204771089990141E-6	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999999811239638	WITHOUT_CLASSIFICATION	1.8876036138809772E-8	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999997840571099	WITHOUT_CLASSIFICATION	2.1594289014037444E-7	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9999618880276265	WITHOUT_CLASSIFICATION	3.8111972373384314E-5	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9995049880861236	WITHOUT_CLASSIFICATION	4.950119138763035E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9999978026859393	WITHOUT_CLASSIFICATION	2.1973140607341077E-6	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9996620719575604	WITHOUT_CLASSIFICATION	3.3792804243968516E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999991496635166	WITHOUT_CLASSIFICATION	8.503364834741621E-7	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999983803959719	WITHOUT_CLASSIFICATION	1.6196040281306852E-6	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999982752223414	WITHOUT_CLASSIFICATION	1.7247776585999814E-6	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999991497716842	WITHOUT_CLASSIFICATION	8.502283158362877E-7	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999984483149126	WITHOUT_CLASSIFICATION	1.5516850874019852E-6	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.999988726464265	WITHOUT_CLASSIFICATION	1.127353573503732E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9999840669925598	WITHOUT_CLASSIFICATION	1.5933007440076954E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9999690741345179	WITHOUT_CLASSIFICATION	3.092586548212531E-5	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999820379093933	WITHOUT_CLASSIFICATION	1.7962090606646787E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999678300161328	WITHOUT_CLASSIFICATION	3.216998386720981E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999546561271039	WITHOUT_CLASSIFICATION	4.5343872896144813E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999522523370835	WITHOUT_CLASSIFICATION	4.7747662916550066E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.999976860860238	WITHOUT_CLASSIFICATION	2.3139139762125494E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999991813712408	WITHOUT_CLASSIFICATION	8.186287593094269E-7	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999987505999837	WITHOUT_CLASSIFICATION	1.2494000162610368E-6	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9999999977144817	WITHOUT_CLASSIFICATION	2.2855184055853883E-9	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9995837319471106	WITHOUT_CLASSIFICATION	4.162680528894523E-4	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9999666841994714	WITHOUT_CLASSIFICATION	3.331580052863315E-5	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9996253619405514	WITHOUT_CLASSIFICATION	3.7463805944859004E-4	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.999984930173741	WITHOUT_CLASSIFICATION	1.5069826258948245E-5	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9999971463055781	WITHOUT_CLASSIFICATION	2.8536944217992453E-6	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.999999225391612	WITHOUT_CLASSIFICATION	7.746083878583705E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9999897985677004	WITHOUT_CLASSIFICATION	1.0201432299479018E-5	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999953590647598	WITHOUT_CLASSIFICATION	4.640935240155302E-6	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9999953590647598	WITHOUT_CLASSIFICATION	4.640935240155302E-6	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9999996278002562	WITHOUT_CLASSIFICATION	3.7219974383181296E-7	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999992401191534	WITHOUT_CLASSIFICATION	7.598808465889224E-7	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9999861002354143	WITHOUT_CLASSIFICATION	1.3899764585691918E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999893869837192	WITHOUT_CLASSIFICATION	1.0613016280930168E-5	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9999995124959918	WITHOUT_CLASSIFICATION	4.875040080376332E-7	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.999999880630859	WITHOUT_CLASSIFICATION	1.19369141112849E-7	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999999528985697	WITHOUT_CLASSIFICATION	4.71014302270086E-8	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999767159998	WITHOUT_CLASSIFICATION	2.328400021489349E-8	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999999208008808	WITHOUT_CLASSIFICATION	7.919911916242001E-8	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999989697107866	WITHOUT_CLASSIFICATION	1.0302892134035894E-6	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441801103	WITHOUT_CLASSIFICATION	5.581988971769622E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441801103	WITHOUT_CLASSIFICATION	5.581988971769622E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441801103	WITHOUT_CLASSIFICATION	5.581988971769622E-8	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999999441801103	WITHOUT_CLASSIFICATION	5.581988971769622E-8	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999991617460466	WITHOUT_CLASSIFICATION	8.382539534220145E-7	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999997862938966	WITHOUT_CLASSIFICATION	2.1370610326674828E-7	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999999255958457	WITHOUT_CLASSIFICATION	7.440415421455882E-8	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999992631232043	WITHOUT_CLASSIFICATION	7.368767956359501E-7	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9999780430715038	WITHOUT_CLASSIFICATION	2.1956928496188122E-5	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9999910113998419	WITHOUT_CLASSIFICATION	8.98860015805001E-6	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9999894014743285	WITHOUT_CLASSIFICATION	1.0598525671593849E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968819271612	WITHOUT_CLASSIFICATION	3.118072838823186E-6	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999968819271612	WITHOUT_CLASSIFICATION	3.118072838823186E-6	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999916163325614	WITHOUT_CLASSIFICATION	8.383667438552178E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9999996151149707	WITHOUT_CLASSIFICATION	3.848850292659862E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999999973038788	WITHOUT_CLASSIFICATION	2.696121193131049E-8	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998713332402546	WITHOUT_CLASSIFICATION	1.2866675974545615E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9998713332402546	WITHOUT_CLASSIFICATION	1.2866675974545615E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9999585986142531	WITHOUT_CLASSIFICATION	4.1401385747008424E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998253425205	WITHOUT_CLASSIFICATION	1.746574794398124E-7	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999998253425205	WITHOUT_CLASSIFICATION	1.746574794398124E-7	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9996490149837757	WITHOUT_CLASSIFICATION	3.5098501622435633E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999999921075248	WITHOUT_CLASSIFICATION	7.892475200904442E-9	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999982052498124	WITHOUT_CLASSIFICATION	1.7947501875565273E-6	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.998935444563471	WITHOUT_CLASSIFICATION	0.0010645554365290126	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.99999446885117	WITHOUT_CLASSIFICATION	5.531148829918292E-6	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999999968424281	WITHOUT_CLASSIFICATION	3.1575718753308214E-9	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9999806190613697	WITHOUT_CLASSIFICATION	1.9380938630360923E-5	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999991979714559	WITHOUT_CLASSIFICATION	8.020285439843322E-7	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.999999993363541	WITHOUT_CLASSIFICATION	6.636459013061697E-9	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999974117227113	WITHOUT_CLASSIFICATION	2.5882772887384895E-6	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999947212725558	WITHOUT_CLASSIFICATION	5.278727444073084E-6	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999998054152341	WITHOUT_CLASSIFICATION	1.945847659440611E-7	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9999817270252127	WITHOUT_CLASSIFICATION	1.827297478733976E-5	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9999916497404845	WITHOUT_CLASSIFICATION	8.350259515636478E-6	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999995435164898	WITHOUT_CLASSIFICATION	4.564835102271559E-7	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9999882272400767	WITHOUT_CLASSIFICATION	1.177275992326545E-5	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999991100241169	WITHOUT_CLASSIFICATION	8.899758831035534E-7	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999998679497883	WITHOUT_CLASSIFICATION	1.3205021157236819E-7	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999784254955	WITHOUT_CLASSIFICATION	2.157450450210846E-8	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9969677130067568	WITHOUT_CLASSIFICATION	0.0030322869932431296	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9994141546408908	WITHOUT_CLASSIFICATION	5.858453591092737E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9999979310220143	WITHOUT_CLASSIFICATION	2.068977985722489E-6	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9999982221554483	WITHOUT_CLASSIFICATION	1.7778445516788837E-6	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9995424375328511	WITHOUT_CLASSIFICATION	4.5756246714894855E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997244278141963	WITHOUT_CLASSIFICATION	2.7557218580360094E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9998442073971822	WITHOUT_CLASSIFICATION	1.5579260281797168E-4	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999997011868892	WITHOUT_CLASSIFICATION	2.988131107594633E-7	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999895217406991	WITHOUT_CLASSIFICATION	1.0478259300928387E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999997223216278	WITHOUT_CLASSIFICATION	2.7767837220426E-7	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9999990222136368	WITHOUT_CLASSIFICATION	9.777863632531538E-7	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9999851445792555	WITHOUT_CLASSIFICATION	1.485542074454049E-5	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999993483767011	WITHOUT_CLASSIFICATION	6.51623298873165E-7	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9971882787058092	DEFECT	0.0028117212941906984	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9999856518373553	WITHOUT_CLASSIFICATION	1.4348162644680644E-5	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999999946857085	WITHOUT_CLASSIFICATION	5.314291425844386E-9	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999816196834274	WITHOUT_CLASSIFICATION	1.8380316572653004E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999997612000805	WITHOUT_CLASSIFICATION	2.387999195107272E-6	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9999999882004659	WITHOUT_CLASSIFICATION	1.17995340660397E-8	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.999999983754201	WITHOUT_CLASSIFICATION	1.624579895575072E-8	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999816196834274	WITHOUT_CLASSIFICATION	1.8380316572653004E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.999997612000805	WITHOUT_CLASSIFICATION	2.387999195107272E-6	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9999918016197181	WITHOUT_CLASSIFICATION	8.198380281844035E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970690882786	WITHOUT_CLASSIFICATION	2.9309117213521635E-6	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999970690882786	WITHOUT_CLASSIFICATION	2.9309117213521635E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999991331902415	WITHOUT_CLASSIFICATION	8.668097584952072E-7	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998624492344032	WITHOUT_CLASSIFICATION	1.3755076559683182E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999955131878618	WITHOUT_CLASSIFICATION	4.48681213810309E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999985010082992	WITHOUT_CLASSIFICATION	1.4989917007654494E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998622055971136	WITHOUT_CLASSIFICATION	1.3779440288649446E-4	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.990580040699847	WITHOUT_CLASSIFICATION	0.009419959300153014	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999993914809439	WITHOUT_CLASSIFICATION	6.085190561119576E-7	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9999999020282135	WITHOUT_CLASSIFICATION	9.797178654772928E-8	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116638137	WITHOUT_CLASSIFICATION	6.883361862682562E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999961020167422	WITHOUT_CLASSIFICATION	3.897983257807924E-6	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9999985013436471	WITHOUT_CLASSIFICATION	1.4986563530126734E-6	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.999999773620323	WITHOUT_CLASSIFICATION	2.263796770584503E-7	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9999950595196235	WITHOUT_CLASSIFICATION	4.940480376487268E-6	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999999191364933	WITHOUT_CLASSIFICATION	8.086350667576267E-8	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999999191364933	WITHOUT_CLASSIFICATION	8.086350667576267E-8	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999994889796537	WITHOUT_CLASSIFICATION	5.110203463078536E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.999994889796537	WITHOUT_CLASSIFICATION	5.110203463078536E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999999813590324	WITHOUT_CLASSIFICATION	1.8640967608122744E-7	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.999999801763645	WITHOUT_CLASSIFICATION	1.9823635505819057E-7	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.999999396757855	WITHOUT_CLASSIFICATION	6.032421450322634E-7	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9999971805975588	WITHOUT_CLASSIFICATION	2.8194024411726773E-6	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999994611740204	WITHOUT_CLASSIFICATION	5.388259796639118E-7	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9999999192955326	WITHOUT_CLASSIFICATION	8.070446748679062E-8	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999955131878618	WITHOUT_CLASSIFICATION	4.48681213810309E-6	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999985010082992	WITHOUT_CLASSIFICATION	1.4989917007654494E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116638137	WITHOUT_CLASSIFICATION	6.883361862682562E-7	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999961020167422	WITHOUT_CLASSIFICATION	3.897983257807924E-6	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9999998600587683	WITHOUT_CLASSIFICATION	1.399412318199103E-7	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999993991693098	WITHOUT_CLASSIFICATION	6.008306901826672E-7	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999996161648679	WITHOUT_CLASSIFICATION	3.838351321063784E-6	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999997466250093	WITHOUT_CLASSIFICATION	2.533749906583617E-7	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9999999555677335	WITHOUT_CLASSIFICATION	4.4432266513743187E-8	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999984560992793	WITHOUT_CLASSIFICATION	1.5439007206986315E-6	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999373606830347	WITHOUT_CLASSIFICATION	6.26393169653424E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999992236396265	WITHOUT_CLASSIFICATION	7.763603735419412E-7	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9999956897998399	WITHOUT_CLASSIFICATION	4.310200160180249E-6	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999994366557942	WITHOUT_CLASSIFICATION	5.633442058718366E-7	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9999995154639468	WITHOUT_CLASSIFICATION	4.845360532241483E-7	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999998910007264	WITHOUT_CLASSIFICATION	1.0899927371587338E-7	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999998944131603	WITHOUT_CLASSIFICATION	1.0558683971134817E-7	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999488272398341	WITHOUT_CLASSIFICATION	5.117276016587098E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999955304849707	WITHOUT_CLASSIFICATION	4.469515029329558E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.999953886655019	WITHOUT_CLASSIFICATION	4.61133449808725E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999990160332324	WITHOUT_CLASSIFICATION	9.839667676184787E-7	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9999983165793519	WITHOUT_CLASSIFICATION	1.683420648011428E-6	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999995509565417	WITHOUT_CLASSIFICATION	4.4904345826516673E-7	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999453788441	WITHOUT_CLASSIFICATION	5.4621155996079614E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999337064811	WITHOUT_CLASSIFICATION	6.629351881615465E-8	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999999337064811	WITHOUT_CLASSIFICATION	6.629351881615465E-8	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9999941961463549	WITHOUT_CLASSIFICATION	5.803853645077975E-6	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999982435449615	WITHOUT_CLASSIFICATION	1.7564550384416123E-6	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9993448215768603	WITHOUT_CLASSIFICATION	6.551784231395374E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999508469858	WITHOUT_CLASSIFICATION	4.915301430743688E-8	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9999999508469858	WITHOUT_CLASSIFICATION	4.915301430743688E-8	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999996161648679	WITHOUT_CLASSIFICATION	3.838351321063784E-6	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9999995314416876	WITHOUT_CLASSIFICATION	4.685583124806119E-7	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9999999634048531	WITHOUT_CLASSIFICATION	3.659514688934697E-8	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9999999723023004	WITHOUT_CLASSIFICATION	2.769769947082939E-8	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.999999940370539	WITHOUT_CLASSIFICATION	5.962946103025827E-8	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9999999855931004	WITHOUT_CLASSIFICATION	1.4406899611487802E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9999999622528655	WITHOUT_CLASSIFICATION	3.774713455190529E-8	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999999610475424	WITHOUT_CLASSIFICATION	3.895245757880291E-8	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999997308708203	WITHOUT_CLASSIFICATION	2.691291796274118E-7	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9999996660503914	WITHOUT_CLASSIFICATION	3.33949608706653E-7	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9999698482896274	WITHOUT_CLASSIFICATION	3.0151710372511072E-5	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9999993329405568	WITHOUT_CLASSIFICATION	6.67059443224726E-7	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.999999919153134	WITHOUT_CLASSIFICATION	8.084686604342363E-8	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9999948554202018	WITHOUT_CLASSIFICATION	5.144579798122476E-6	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999994766867485	WITHOUT_CLASSIFICATION	5.233132515233162E-7	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9999978174691648	WITHOUT_CLASSIFICATION	2.182530835168535E-6	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999997613778869	WITHOUT_CLASSIFICATION	2.386221131203348E-7	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999930440420197	WITHOUT_CLASSIFICATION	6.95595798029508E-6	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9999999776697702	WITHOUT_CLASSIFICATION	2.233022975168801E-8	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999999999638215	WITHOUT_CLASSIFICATION	3.617836802745776E-11	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.999999594996679	WITHOUT_CLASSIFICATION	4.050033208881995E-7	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.999996197671805	WITHOUT_CLASSIFICATION	3.802328195045667E-6	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.999999645092275	WITHOUT_CLASSIFICATION	3.5490772500632543E-7	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623415	WITHOUT_CLASSIFICATION	1.4376584954011896E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685053711	WITHOUT_CLASSIFICATION	4.3149462892634796E-7	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999996476730272	WITHOUT_CLASSIFICATION	3.5232697290504126E-7	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999997675007533	WITHOUT_CLASSIFICATION	2.324992467236316E-7	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999999995739234	WITHOUT_CLASSIFICATION	4.2607665877047605E-10	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.999999818393814	WITHOUT_CLASSIFICATION	1.8160618604052185E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999999568830732	WITHOUT_CLASSIFICATION	4.311692693410762E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999764884234	WITHOUT_CLASSIFICATION	2.351157656628538E-8	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999999764884234	WITHOUT_CLASSIFICATION	2.351157656628538E-8	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999989082336413	WITHOUT_CLASSIFICATION	1.091766358563382E-6	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999989082336413	WITHOUT_CLASSIFICATION	1.091766358563382E-6	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999999420629725	WITHOUT_CLASSIFICATION	5.793702751330843E-8	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999996892501897	WITHOUT_CLASSIFICATION	3.107498102824954E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221751029	WITHOUT_CLASSIFICATION	1.7782489722633588E-7	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999999889613105	WITHOUT_CLASSIFICATION	1.103868956954583E-8	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623415	WITHOUT_CLASSIFICATION	1.4376584954011896E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623415	WITHOUT_CLASSIFICATION	1.4376584954011896E-9	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999999985623415	WITHOUT_CLASSIFICATION	1.4376584954011896E-9	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685053711	WITHOUT_CLASSIFICATION	4.3149462892634796E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221751029	WITHOUT_CLASSIFICATION	1.7782489722633588E-7	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999998221751029	WITHOUT_CLASSIFICATION	1.7782489722633588E-7	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999994126313198	WITHOUT_CLASSIFICATION	5.873686802789321E-7	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999999821467693	WITHOUT_CLASSIFICATION	1.785323064130837E-8	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999921308376	WITHOUT_CLASSIFICATION	7.869162438457117E-9	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.5716649933410964	DEFECT	0.42833500665890356	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999991785462484	WITHOUT_CLASSIFICATION	8.214537515769621E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999996914091158	WITHOUT_CLASSIFICATION	3.0859088426280353E-7	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999996914091158	WITHOUT_CLASSIFICATION	3.0859088426280353E-7	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995785719552	WITHOUT_CLASSIFICATION	4.2142804483052537E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411590977	WITHOUT_CLASSIFICATION	5.884090217560405E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411590977	WITHOUT_CLASSIFICATION	5.884090217560405E-8	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411590977	WITHOUT_CLASSIFICATION	5.884090217560405E-8	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999999813862043	WITHOUT_CLASSIFICATION	1.8613795761801913E-8	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999999802199456	WITHOUT_CLASSIFICATION	1.9780054439429844E-8	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999995685053711	WITHOUT_CLASSIFICATION	4.3149462892634796E-7	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999999147739997	WITHOUT_CLASSIFICATION	8.522600028219605E-8	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999999411590977	WITHOUT_CLASSIFICATION	5.884090217560405E-8	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9999995785719552	WITHOUT_CLASSIFICATION	4.2142804483052537E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999965750347054	WITHOUT_CLASSIFICATION	3.4249652945646456E-6	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999999039506163	WITHOUT_CLASSIFICATION	9.604938355966042E-8	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999954490650945	WITHOUT_CLASSIFICATION	4.550934905503505E-6	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999979183152035	WITHOUT_CLASSIFICATION	2.081684796448417E-6	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.99999987433021	WITHOUT_CLASSIFICATION	1.256697900424729E-7	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.999999947042365	WITHOUT_CLASSIFICATION	5.295763507209797E-8	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506755934	WITHOUT_CLASSIFICATION	1.3749324406534737E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999986472372886	WITHOUT_CLASSIFICATION	1.3527627114224595E-6	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999999202141595	WITHOUT_CLASSIFICATION	7.978584043372735E-8	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999999988331777	WITHOUT_CLASSIFICATION	1.1668222595865315E-9	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999999933238584	WITHOUT_CLASSIFICATION	6.676141591951192E-8	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999999875566663	WITHOUT_CLASSIFICATION	1.2443333656850181E-8	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.99999974780353	WITHOUT_CLASSIFICATION	2.521964700944798E-7	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999997021046404	WITHOUT_CLASSIFICATION	2.978953595812084E-7	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999999034351178	WITHOUT_CLASSIFICATION	9.65648822701733E-8	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9999984067290691	WITHOUT_CLASSIFICATION	1.5932709308868556E-6	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999999828819679	WITHOUT_CLASSIFICATION	1.7118032111844327E-8	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9998084297746409	WITHOUT_CLASSIFICATION	1.9157022535902073E-4	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9999705733129527	WITHOUT_CLASSIFICATION	2.9426687047368574E-5	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999999289452022	WITHOUT_CLASSIFICATION	7.105479785418017E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999528825320971	WITHOUT_CLASSIFICATION	4.711746790287262E-5	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.999999997644507	WITHOUT_CLASSIFICATION	2.3554930499600263E-9	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999999998767817	WITHOUT_CLASSIFICATION	1.232183095411485E-10	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999998962705091	WITHOUT_CLASSIFICATION	1.0372949084544377E-7	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999798006525166	WITHOUT_CLASSIFICATION	2.0199347483460857E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999977645523881	WITHOUT_CLASSIFICATION	2.2354476119571437E-6	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999987850732192	WITHOUT_CLASSIFICATION	1.2149267807790852E-6	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.999999234369244	WITHOUT_CLASSIFICATION	7.656307559833158E-7	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9999996722985974	WITHOUT_CLASSIFICATION	3.2770140260500864E-7	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999948141836213	WITHOUT_CLASSIFICATION	5.185816378693046E-6	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999999946981867	WITHOUT_CLASSIFICATION	5.30181335597284E-9	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999999862094243	WITHOUT_CLASSIFICATION	1.3790575532891507E-8	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999980632027273	WITHOUT_CLASSIFICATION	1.9367972727508944E-6	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999990571774264	WITHOUT_CLASSIFICATION	9.428225736546455E-7	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999965750347054	WITHOUT_CLASSIFICATION	3.4249652945646456E-6	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.999999987444794	WITHOUT_CLASSIFICATION	1.2555205936273746E-8	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9999999597916917	WITHOUT_CLASSIFICATION	4.020830831409538E-8	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9999599966714444	WITHOUT_CLASSIFICATION	4.000332855548434E-5	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997647428871	WITHOUT_CLASSIFICATION	2.3525711285907708E-7	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999997647428871	WITHOUT_CLASSIFICATION	2.3525711285907708E-7	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999989448073252	WITHOUT_CLASSIFICATION	1.05519267474581E-6	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999989448073252	WITHOUT_CLASSIFICATION	1.05519267474581E-6	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999993537419798	WITHOUT_CLASSIFICATION	6.462580202384843E-7	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9995987703173365	WITHOUT_CLASSIFICATION	4.012296826635935E-4	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999995740734797	WITHOUT_CLASSIFICATION	4.2592652021854385E-7	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999998589827962	WITHOUT_CLASSIFICATION	1.41017203849085E-7	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999999411452641	WITHOUT_CLASSIFICATION	5.885473585772183E-8	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999999147899182	WITHOUT_CLASSIFICATION	8.521008180121323E-7	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.99994485524886	WITHOUT_CLASSIFICATION	5.514475113996918E-5	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999987517348896	WITHOUT_CLASSIFICATION	1.2482651103860065E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999990452392157	WITHOUT_CLASSIFICATION	9.5476078427267E-7	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999995463680076	WITHOUT_CLASSIFICATION	4.536319924037514E-7	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999990014257428	WITHOUT_CLASSIFICATION	9.985742571121194E-7	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999326897648	WITHOUT_CLASSIFICATION	6.731023510086085E-8	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999999326897648	WITHOUT_CLASSIFICATION	6.731023510086085E-8	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9999960352258951	WITHOUT_CLASSIFICATION	3.964774104876057E-6	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999999578593146	WITHOUT_CLASSIFICATION	4.214068546341527E-8	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998883909345	WITHOUT_CLASSIFICATION	1.116090654543716E-7	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999998883909345	WITHOUT_CLASSIFICATION	1.116090654543716E-7	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999980135467821	WITHOUT_CLASSIFICATION	1.986453217806472E-6	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999847949255801	WITHOUT_CLASSIFICATION	1.52050744197759E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.999984641138321	WITHOUT_CLASSIFICATION	1.5358861679021712E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9999974079416624	WITHOUT_CLASSIFICATION	2.592058337657602E-6	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999999684763203	WITHOUT_CLASSIFICATION	3.152367969709972E-8	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9999997351377895	WITHOUT_CLASSIFICATION	2.64862210514074E-7	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999993912200736	WITHOUT_CLASSIFICATION	6.08779926295294E-7	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999999772279795	WITHOUT_CLASSIFICATION	2.277202047008833E-8	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9996822888120426	WITHOUT_CLASSIFICATION	3.177111879574974E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999999335955275	WITHOUT_CLASSIFICATION	6.640447249383385E-8	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9999999735060775	WITHOUT_CLASSIFICATION	2.6493922516255918E-8	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999996089740923	WITHOUT_CLASSIFICATION	3.910259075830256E-7	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999999718977505	WITHOUT_CLASSIFICATION	2.8102249476045807E-8	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9999997185358598	WITHOUT_CLASSIFICATION	2.814641401591012E-7	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.999999882123987	WITHOUT_CLASSIFICATION	1.1787601296568321E-7	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9999927142113936	WITHOUT_CLASSIFICATION	7.285788606511878E-6	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9999925674477552	WITHOUT_CLASSIFICATION	7.43255224479203E-6	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999996358466869	WITHOUT_CLASSIFICATION	3.641533130450626E-7	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9999997871474133	WITHOUT_CLASSIFICATION	2.1285258676327554E-7	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982804585258	WITHOUT_CLASSIFICATION	1.7195414742480243E-6	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9703721098651845	WITHOUT_CLASSIFICATION	0.02962789013481557	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.999998772991768	WITHOUT_CLASSIFICATION	1.227008232009384E-6	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.99999842591875	WITHOUT_CLASSIFICATION	1.5740812500418312E-6	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999998589108923	WITHOUT_CLASSIFICATION	1.4108910770431114E-7	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999959874240553	WITHOUT_CLASSIFICATION	4.0125759447177405E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999672402628399	WITHOUT_CLASSIFICATION	3.275973716007442E-5	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999925938684306	WITHOUT_CLASSIFICATION	7.406131569343658E-6	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999995185004831	WITHOUT_CLASSIFICATION	4.814995168179363E-7	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999940950661053	WITHOUT_CLASSIFICATION	5.9049338947181996E-6	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999999721247648	WITHOUT_CLASSIFICATION	2.787523521737601E-8	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9999991699734023	WITHOUT_CLASSIFICATION	8.300265976994469E-7	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999999711541395	WITHOUT_CLASSIFICATION	2.884586050642445E-8	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9999983629014156	WITHOUT_CLASSIFICATION	1.637098584422913E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999933365777228	WITHOUT_CLASSIFICATION	6.663422277130013E-6	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999933365777228	WITHOUT_CLASSIFICATION	6.663422277130013E-6	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999981950856675	WITHOUT_CLASSIFICATION	1.8049143325736638E-6	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999999354697421	WITHOUT_CLASSIFICATION	6.453025796301149E-8	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9999999823953224	WITHOUT_CLASSIFICATION	1.7604677574254537E-8	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999912926342165	WITHOUT_CLASSIFICATION	8.707365783524155E-6	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999482832477294	WITHOUT_CLASSIFICATION	5.1716752270446806E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999999912729518	WITHOUT_CLASSIFICATION	8.72704822591464E-9	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.999767890724149	WITHOUT_CLASSIFICATION	2.32109275851094E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9967927696169321	WITHOUT_CLASSIFICATION	0.0032072303830680106	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9998082130952943	WITHOUT_CLASSIFICATION	1.917869047056511E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999815384201347	WITHOUT_CLASSIFICATION	1.8461579865251923E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9999996440826072	WITHOUT_CLASSIFICATION	3.559173926913623E-7	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9987675522183425	WITHOUT_CLASSIFICATION	0.0012324477816574924	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.999999865425077	WITHOUT_CLASSIFICATION	1.3457492300545133E-7	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9998690316850928	WITHOUT_CLASSIFICATION	1.309683149072582E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999999974097123	WITHOUT_CLASSIFICATION	2.590287645468536E-9	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999998258480991	WITHOUT_CLASSIFICATION	1.7415190085913916E-7	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9999999356060774	WITHOUT_CLASSIFICATION	6.439392265939466E-8	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9999968971384047	WITHOUT_CLASSIFICATION	3.1028615952906586E-6	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999996846042717	WITHOUT_CLASSIFICATION	3.153957282882467E-7	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999928556138178	WITHOUT_CLASSIFICATION	7.1443861822045904E-6	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999996850434637	WITHOUT_CLASSIFICATION	3.149565362704194E-7	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999999881849368	WITHOUT_CLASSIFICATION	1.1815063134393803E-8	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999952664553177	WITHOUT_CLASSIFICATION	4.733544682424393E-6	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9999956300363076	WITHOUT_CLASSIFICATION	4.3699636923878705E-6	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9999977294331368	WITHOUT_CLASSIFICATION	2.2705668632723788E-6	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.999996987113766	WITHOUT_CLASSIFICATION	3.0128862340543886E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9999999649838868	WITHOUT_CLASSIFICATION	3.501611327912105E-8	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9999998645071634	WITHOUT_CLASSIFICATION	1.3549283652119962E-7	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9985342914680706	WITHOUT_CLASSIFICATION	0.0014657085319294627	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9992230588755197	WITHOUT_CLASSIFICATION	7.769411244804755E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999973108118216	WITHOUT_CLASSIFICATION	2.689188178427889E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999999991911961	WITHOUT_CLASSIFICATION	8.088038268438814E-10	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999988892762761	WITHOUT_CLASSIFICATION	1.1107237238265894E-6	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9999989739667025	WITHOUT_CLASSIFICATION	1.0260332975453331E-6	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999978288799477	WITHOUT_CLASSIFICATION	2.171120052370356E-6	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999999655281974	WITHOUT_CLASSIFICATION	3.4471802657212615E-8	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9999942942210333	WITHOUT_CLASSIFICATION	5.705778966713071E-6	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999995191441182	WITHOUT_CLASSIFICATION	4.808558818617029E-7	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999992436939027	WITHOUT_CLASSIFICATION	7.563060972598167E-7	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.999999985825593	WITHOUT_CLASSIFICATION	1.4174406953890184E-8	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999997874745128	WITHOUT_CLASSIFICATION	2.125254872844211E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994441029099	WITHOUT_CLASSIFICATION	5.558970902386148E-7	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999994441029099	WITHOUT_CLASSIFICATION	5.558970902386148E-7	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999978728880956	WITHOUT_CLASSIFICATION	2.127111904386898E-6	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999999912738093	WITHOUT_CLASSIFICATION	8.726190608370855E-9	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999997081891245	WITHOUT_CLASSIFICATION	2.9181087547096616E-7	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999996214359997	WITHOUT_CLASSIFICATION	3.785640003326234E-7	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9999999313451451	WITHOUT_CLASSIFICATION	6.865485498078786E-8	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999999877246216	WITHOUT_CLASSIFICATION	1.227537826632338E-8	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.990740201020037	WITHOUT_CLASSIFICATION	0.009259798979962978	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999998790250165	WITHOUT_CLASSIFICATION	1.2097498339231046E-7	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999536043658	WITHOUT_CLASSIFICATION	4.6395634355199637E-8	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.999999575759943	WITHOUT_CLASSIFICATION	4.2424005698341625E-7	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9999994583731872	WITHOUT_CLASSIFICATION	5.416268129174703E-7	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9999050290273529	WITHOUT_CLASSIFICATION	9.497097264708537E-5	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9999999867735044	WITHOUT_CLASSIFICATION	1.3226495562184323E-8	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9999999368876474	WITHOUT_CLASSIFICATION	6.311235251030414E-8	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9996680503173521	WITHOUT_CLASSIFICATION	3.3194968264795417E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9999519956938681	WITHOUT_CLASSIFICATION	4.800430613198576E-5	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9999998030552547	WITHOUT_CLASSIFICATION	1.9694474539506365E-7	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999999999620127	WITHOUT_CLASSIFICATION	3.798731717913474E-11	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.8277469761764734	WITHOUT_CLASSIFICATION	0.17225302382352664	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9999998985874101	WITHOUT_CLASSIFICATION	1.0141258993661343E-7	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999987503721672	WITHOUT_CLASSIFICATION	1.2496278327879097E-5	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999999999806645	WITHOUT_CLASSIFICATION	1.933554624270306E-11	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999991605063026	WITHOUT_CLASSIFICATION	8.394936975882397E-7	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9999496624799079	WITHOUT_CLASSIFICATION	5.03375200921264E-5	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999995191112597	WITHOUT_CLASSIFICATION	4.808887402311348E-7	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999999927360749	WITHOUT_CLASSIFICATION	7.263925024625316E-9	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999998893801147	WITHOUT_CLASSIFICATION	1.106198851958525E-7	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999648440503449	WITHOUT_CLASSIFICATION	3.515594965499057E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999989168543075	WITHOUT_CLASSIFICATION	1.0831456924358577E-6	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999472160380173	WITHOUT_CLASSIFICATION	5.278396198269986E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999997204296064	WITHOUT_CLASSIFICATION	2.795703935957019E-6	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999989168543075	WITHOUT_CLASSIFICATION	1.0831456924358577E-6	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999989227220781	WITHOUT_CLASSIFICATION	1.077277921954627E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997244278141963	WITHOUT_CLASSIFICATION	2.7557218580360094E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9548427455403138	WITHOUT_CLASSIFICATION	0.04515725445968619	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.5649472658494494	WITHOUT_CLASSIFICATION	0.4350527341505505	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999999288356016	WITHOUT_CLASSIFICATION	7.116439829532884E-8	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9999999984645687	WITHOUT_CLASSIFICATION	1.5354313620046176E-9	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9999999844936359	WITHOUT_CLASSIFICATION	1.5506364159215007E-8	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999973297018816	WITHOUT_CLASSIFICATION	2.670298118336598E-6	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9998624492344032	WITHOUT_CLASSIFICATION	1.3755076559683182E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999982804585258	WITHOUT_CLASSIFICATION	1.7195414742480243E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999999921308376	WITHOUT_CLASSIFICATION	7.869162438457117E-9	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423531683648	WITHOUT_CLASSIFICATION	1.5764683163523426E-4	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999995971173294	WITHOUT_CLASSIFICATION	4.0288267050741156E-7	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.99999997495585	WITHOUT_CLASSIFICATION	2.5044149964486265E-8	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9999882642969474	WITHOUT_CLASSIFICATION	1.173570305248136E-5	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999999072150939	WITHOUT_CLASSIFICATION	9.278490604941975E-8	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9999924551976777	WITHOUT_CLASSIFICATION	7.544802322361263E-6	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999999856020836	WITHOUT_CLASSIFICATION	1.4397916405915067E-8	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.999548660906632	WITHOUT_CLASSIFICATION	4.513390933679985E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999999192499742	WITHOUT_CLASSIFICATION	8.075002584649534E-8	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999993264486972	WITHOUT_CLASSIFICATION	6.735513028244286E-7	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999996081287911	WITHOUT_CLASSIFICATION	3.918712089221046E-7	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999999751625477	WITHOUT_CLASSIFICATION	2.4837452413125574E-8	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9999990335000807	WITHOUT_CLASSIFICATION	9.664999192785097E-7	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999999021905365	WITHOUT_CLASSIFICATION	9.780946360168263E-8	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999944764988117	WITHOUT_CLASSIFICATION	5.523501188283944E-6	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999958868388431	WITHOUT_CLASSIFICATION	4.1131611568852705E-6	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9999873371306568	WITHOUT_CLASSIFICATION	1.2662869343259804E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999999985652426	WITHOUT_CLASSIFICATION	1.4347575226909108E-9	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852211316582	WITHOUT_CLASSIFICATION	1.4778868341821599E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852211316582	WITHOUT_CLASSIFICATION	1.4778868341821599E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999997200405437	WITHOUT_CLASSIFICATION	2.799594563323347E-7	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.999999971407591	WITHOUT_CLASSIFICATION	2.8592408903245624E-8	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9999999781156063	WITHOUT_CLASSIFICATION	2.1884393786623324E-8	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999996773962626	WITHOUT_CLASSIFICATION	3.226037373534417E-7	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999999812843603	WITHOUT_CLASSIFICATION	1.8715639665057773E-8	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999997251438626	WITHOUT_CLASSIFICATION	2.74856137408711E-7	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9994390686864347	WITHOUT_CLASSIFICATION	5.609313135653053E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999999401172889	WITHOUT_CLASSIFICATION	5.988271114636113E-8	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999027529583304	WITHOUT_CLASSIFICATION	9.724704166961169E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554118795	WITHOUT_CLASSIFICATION	4.445881205744945E-7	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9999995554118795	WITHOUT_CLASSIFICATION	4.445881205744945E-7	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9997943386191667	WITHOUT_CLASSIFICATION	2.0566138083333833E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9998180808864875	WITHOUT_CLASSIFICATION	1.8191911351240567E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999980241801216	WITHOUT_CLASSIFICATION	1.9758198784088138E-6	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.99948783435662	WITHOUT_CLASSIFICATION	5.121656433800493E-4	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999993766889674	WITHOUT_CLASSIFICATION	6.23311032507022E-7	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9999999773318069	WITHOUT_CLASSIFICATION	2.266819305668056E-8	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9999999181434276	WITHOUT_CLASSIFICATION	8.185657237377886E-8	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9999983582482683	WITHOUT_CLASSIFICATION	1.6417517316904522E-6	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999899252387916	WITHOUT_CLASSIFICATION	1.0074761208489656E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.999997204296064	WITHOUT_CLASSIFICATION	2.795703935957019E-6	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999995751693637	WITHOUT_CLASSIFICATION	4.248306363005727E-6	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999931383289462	WITHOUT_CLASSIFICATION	6.861671053863337E-6	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.999995750648104	WITHOUT_CLASSIFICATION	4.249351895932968E-6	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999999840984141	WITHOUT_CLASSIFICATION	1.590158591656759E-8	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997052891760723	WITHOUT_CLASSIFICATION	2.947108239277489E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999998904689467	WITHOUT_CLASSIFICATION	1.0953105343032051E-7	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999989901505655	WITHOUT_CLASSIFICATION	1.0098494345401154E-6	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226721468	WITHOUT_CLASSIFICATION	9.773278532144008E-7	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999990226721468	WITHOUT_CLASSIFICATION	9.773278532144008E-7	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999988449462324	WITHOUT_CLASSIFICATION	1.15505376765748E-6	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999999642795288	WITHOUT_CLASSIFICATION	3.5720471243720886E-8	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999977474285942	WITHOUT_CLASSIFICATION	2.25257140590204E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999967674000226	WITHOUT_CLASSIFICATION	3.2325999772624E-6	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999998098538598	WITHOUT_CLASSIFICATION	1.901461401350747E-7	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.999798741745207	WITHOUT_CLASSIFICATION	2.0125825479304883E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9999972339573864	WITHOUT_CLASSIFICATION	2.7660426136293825E-6	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748216	WITHOUT_CLASSIFICATION	2.9251783584006055E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748216	WITHOUT_CLASSIFICATION	2.9251783584006055E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748216	WITHOUT_CLASSIFICATION	2.9251783584006055E-9	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999999970748216	WITHOUT_CLASSIFICATION	2.9251783584006055E-9	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.999999065585144	WITHOUT_CLASSIFICATION	9.344148560352555E-7	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9999985164591338	WITHOUT_CLASSIFICATION	1.483540866134771E-6	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999097387057829	WITHOUT_CLASSIFICATION	9.026129421706272E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999997050010927	WITHOUT_CLASSIFICATION	2.9499890725846664E-7	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999947876974096	WITHOUT_CLASSIFICATION	5.212302590415603E-6	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997702964067139	WITHOUT_CLASSIFICATION	2.2970359328621054E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999999613410844	WITHOUT_CLASSIFICATION	3.865891564143439E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9999999836859519	WITHOUT_CLASSIFICATION	1.631404803388654E-8	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999959113023685	WITHOUT_CLASSIFICATION	4.088697631515605E-6	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9995993190455776	WITHOUT_CLASSIFICATION	4.006809544223709E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424830993	WITHOUT_CLASSIFICATION	5.7516900682066755E-8	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999999424830993	WITHOUT_CLASSIFICATION	5.7516900682066755E-8	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999995877662565	WITHOUT_CLASSIFICATION	4.122337435040648E-6	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999999998043395	WITHOUT_CLASSIFICATION	1.9566054172829897E-10	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999999700448443	WITHOUT_CLASSIFICATION	2.995515565382153E-8	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9998112693184126	WITHOUT_CLASSIFICATION	1.887306815875017E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999997960384377	WITHOUT_CLASSIFICATION	2.039615623538776E-7	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999997553938808	WITHOUT_CLASSIFICATION	2.446061193200098E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658202808	WITHOUT_CLASSIFICATION	2.3417971924652522E-7	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9999997658202808	WITHOUT_CLASSIFICATION	2.3417971924652522E-7	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999995538651305	WITHOUT_CLASSIFICATION	4.4613486940706245E-7	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9975198026035755	WITHOUT_CLASSIFICATION	0.002480197396424535	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9999999870528854	WITHOUT_CLASSIFICATION	1.2947114626023999E-8	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9999989343158631	WITHOUT_CLASSIFICATION	1.0656841368797581E-6	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999914677469601	WITHOUT_CLASSIFICATION	8.532253039973209E-6	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.99999998038685	WITHOUT_CLASSIFICATION	1.9613150075583833E-8	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999997224894089	WITHOUT_CLASSIFICATION	2.7751059104689924E-7	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999815758691336	WITHOUT_CLASSIFICATION	1.8424130866296334E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9996120273151241	WITHOUT_CLASSIFICATION	3.8797268487590083E-4	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999998374059743	WITHOUT_CLASSIFICATION	1.625940257146596E-7	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999997915760772	WITHOUT_CLASSIFICATION	2.0842392275744963E-7	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999951292452673	WITHOUT_CLASSIFICATION	4.8707547326003165E-6	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998886159241539	WITHOUT_CLASSIFICATION	1.113840758461149E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999981794429396	WITHOUT_CLASSIFICATION	1.8205570604544252E-6	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999999967104483	WITHOUT_CLASSIFICATION	3.289551666506011E-9	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999999828432322	WITHOUT_CLASSIFICATION	1.7156767751636227E-8	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999701461073297	WITHOUT_CLASSIFICATION	2.985389267037027E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999999935900081	WITHOUT_CLASSIFICATION	6.409991851875383E-9	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9999994337433668	WITHOUT_CLASSIFICATION	5.662566331734117E-7	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9999978556489469	WITHOUT_CLASSIFICATION	2.144351053123683E-6	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999998453730478	WITHOUT_CLASSIFICATION	1.5462695219304078E-7	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999332892591823	WITHOUT_CLASSIFICATION	6.671074081764378E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999997888297639	WITHOUT_CLASSIFICATION	2.111702361126692E-7	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9991884063177618	WITHOUT_CLASSIFICATION	8.115936822381332E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999273002694894	WITHOUT_CLASSIFICATION	7.269973051057714E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9999912915507676	WITHOUT_CLASSIFICATION	8.708449232290402E-6	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.982935816060926	WITHOUT_CLASSIFICATION	0.017064183939074003	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999909073174407	WITHOUT_CLASSIFICATION	9.092682559253362E-6	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9999999797833772	WITHOUT_CLASSIFICATION	2.0216622804691653E-8	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999998410021005	WITHOUT_CLASSIFICATION	1.5899789945646326E-7	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999999971766989	WITHOUT_CLASSIFICATION	2.8233011850425102E-9	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9999666109545218	WITHOUT_CLASSIFICATION	3.338904547821097E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999963031012867	WITHOUT_CLASSIFICATION	3.696898713280059E-6	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.99999925001567	WITHOUT_CLASSIFICATION	7.499843299711597E-7	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999993772948318	WITHOUT_CLASSIFICATION	6.227051681967229E-7	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9985686337845262	WITHOUT_CLASSIFICATION	0.0014313662154737561	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9999997549997907	WITHOUT_CLASSIFICATION	2.450002092842965E-7	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999998101945638	WITHOUT_CLASSIFICATION	1.8980543620778782E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9999998742886385	WITHOUT_CLASSIFICATION	1.2571136162177496E-7	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999971213685989	WITHOUT_CLASSIFICATION	2.8786314010814585E-6	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999911571075168	WITHOUT_CLASSIFICATION	8.842892483120032E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999999280897314	WITHOUT_CLASSIFICATION	7.191026864463864E-8	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999546353887745	WITHOUT_CLASSIFICATION	4.536461122544076E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999999286580706	WITHOUT_CLASSIFICATION	7.134192932548249E-8	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999999869079922	WITHOUT_CLASSIFICATION	1.309200783505943E-8	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999956301632223	WITHOUT_CLASSIFICATION	4.369836777641943E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466239127	WITHOUT_CLASSIFICATION	3.533760872210895E-7	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9999996466239127	WITHOUT_CLASSIFICATION	3.533760872210895E-7	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999988783770467	WITHOUT_CLASSIFICATION	1.1216229532693212E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9999999335879318	WITHOUT_CLASSIFICATION	6.641206816733734E-8	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9999902166208591	WITHOUT_CLASSIFICATION	9.783379140998622E-6	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9995661195180712	WITHOUT_CLASSIFICATION	4.338804819287781E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899439777	WITHOUT_CLASSIFICATION	3.1005602222130867E-7	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999996899439777	WITHOUT_CLASSIFICATION	3.1005602222130867E-7	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999999720080487	WITHOUT_CLASSIFICATION	2.7991951329560414E-8	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9999924535255361	WITHOUT_CLASSIFICATION	7.546474463835889E-6	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999621135501738	WITHOUT_CLASSIFICATION	3.7886449826084275E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9999816941854783	WITHOUT_CLASSIFICATION	1.8305814521652276E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999999488709965	WITHOUT_CLASSIFICATION	5.112900340005171E-8	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550130221	WITHOUT_CLASSIFICATION	6.449869779076969E-7	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999993550130221	WITHOUT_CLASSIFICATION	6.449869779076969E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997299262327	WITHOUT_CLASSIFICATION	2.7007376734069967E-7	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999997299262327	WITHOUT_CLASSIFICATION	2.7007376734069967E-7	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999997520870512	WITHOUT_CLASSIFICATION	2.479129488571206E-7	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999993908810629	WITHOUT_CLASSIFICATION	6.091189370669251E-7	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999953022511028	WITHOUT_CLASSIFICATION	4.697748897151439E-6	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999953326507143	WITHOUT_CLASSIFICATION	4.667349285778337E-6	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999881433570725	WITHOUT_CLASSIFICATION	1.1856642927502266E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999880604130268	WITHOUT_CLASSIFICATION	1.1939586973114923E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999999999364912	WITHOUT_CLASSIFICATION	6.350879159837429E-11	DEFECT
// block	WITHOUT_CLASSIFICATION	0.999998609437713	WITHOUT_CLASSIFICATION	1.3905622870020693E-6	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999999905006942	WITHOUT_CLASSIFICATION	9.499305824893904E-9	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999958024547424	WITHOUT_CLASSIFICATION	4.1975452576719896E-6	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.5917898170466886	WITHOUT_CLASSIFICATION	0.40821018295331135	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999986264233817	WITHOUT_CLASSIFICATION	1.3735766184054539E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999995892936961	WITHOUT_CLASSIFICATION	4.1070630381718503E-7	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9999991442368661	WITHOUT_CLASSIFICATION	8.557631340273971E-7	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999996580023099	WITHOUT_CLASSIFICATION	3.419976900758654E-7	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9999999247408876	WITHOUT_CLASSIFICATION	7.525911234035787E-8	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9999998232205066	WITHOUT_CLASSIFICATION	1.7677949350688242E-7	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.999998846361737	WITHOUT_CLASSIFICATION	1.15363826311812E-6	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999866690808678	WITHOUT_CLASSIFICATION	1.3330919132198916E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999998230855351	WITHOUT_CLASSIFICATION	1.7691446477058876E-7	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9998423531683648	WITHOUT_CLASSIFICATION	1.5764683163523426E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9999475232825071	WITHOUT_CLASSIFICATION	5.247671749293049E-5	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999999409206616	WITHOUT_CLASSIFICATION	5.907933848842378E-8	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999993186149442	WITHOUT_CLASSIFICATION	6.813850557871082E-7	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999999701437171	WITHOUT_CLASSIFICATION	2.985628287802417E-8	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9999987947069522	WITHOUT_CLASSIFICATION	1.2052930478549834E-6	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999934322202172	WITHOUT_CLASSIFICATION	6.5677797827963945E-6	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999999969249439	WITHOUT_CLASSIFICATION	3.0750561854607357E-9	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9999997157204544	WITHOUT_CLASSIFICATION	2.8427954567115793E-7	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9999906697412522	WITHOUT_CLASSIFICATION	9.330258747820987E-6	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999999459792727	WITHOUT_CLASSIFICATION	5.402072724731562E-8	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9999996160032013	WITHOUT_CLASSIFICATION	3.839967987625597E-7	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999987434629111	WITHOUT_CLASSIFICATION	1.2565370888632096E-6	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999999288309718	WITHOUT_CLASSIFICATION	7.116902817137016E-8	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999999920260387	WITHOUT_CLASSIFICATION	7.97396127149715E-9	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9999957415089709	WITHOUT_CLASSIFICATION	4.258491029160215E-6	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999999944270606	WITHOUT_CLASSIFICATION	5.572939429560562E-9	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999999806150609	WITHOUT_CLASSIFICATION	1.93849390544658E-8	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999993964417965	WITHOUT_CLASSIFICATION	6.035582036134898E-7	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9997885223319753	WITHOUT_CLASSIFICATION	2.1147766802464006E-4	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999964616495685	WITHOUT_CLASSIFICATION	3.538350431600956E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999979666338539	WITHOUT_CLASSIFICATION	2.033366146060029E-6	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9999999956882822	WITHOUT_CLASSIFICATION	4.311717771434548E-9	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999995363452322	WITHOUT_CLASSIFICATION	4.6365476790232597E-7	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9993350550933511	WITHOUT_CLASSIFICATION	6.649449066488694E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9999999844750848	WITHOUT_CLASSIFICATION	1.552491517867467E-8	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999999884960373	WITHOUT_CLASSIFICATION	1.1503962748123857E-8	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9999999943073026	WITHOUT_CLASSIFICATION	5.692697368260991E-9	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.999998974173076	WITHOUT_CLASSIFICATION	1.0258269238965275E-6	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999932025827117	WITHOUT_CLASSIFICATION	6.7974172882216265E-6	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999981900166817	WITHOUT_CLASSIFICATION	1.8099833183688952E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999986726293718	WITHOUT_CLASSIFICATION	1.3273706281194348E-6	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999986726293718	WITHOUT_CLASSIFICATION	1.3273706281194348E-6	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997809540225	WITHOUT_CLASSIFICATION	2.1904597741489713E-7	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999997809540225	WITHOUT_CLASSIFICATION	2.1904597741489713E-7	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866313354	WITHOUT_CLASSIFICATION	2.051336866459129E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999794866313354	WITHOUT_CLASSIFICATION	2.051336866459129E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646479544	WITHOUT_CLASSIFICATION	5.353520456115741E-7	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999994646479544	WITHOUT_CLASSIFICATION	5.353520456115741E-7	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999999803359044	WITHOUT_CLASSIFICATION	1.9664095665734257E-8	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979095229	WITHOUT_CLASSIFICATION	1.1020904771570836E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979095229	WITHOUT_CLASSIFICATION	1.1020904771570836E-6	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9999988979095229	WITHOUT_CLASSIFICATION	1.1020904771570836E-6	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999995083055135	WITHOUT_CLASSIFICATION	4.916944864357669E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999991141955158	WITHOUT_CLASSIFICATION	8.858044842757051E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872914889	WITHOUT_CLASSIFICATION	2.127085111236023E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872914889	WITHOUT_CLASSIFICATION	2.127085111236023E-7	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9999997872914889	WITHOUT_CLASSIFICATION	2.127085111236023E-7	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9999865393251746	WITHOUT_CLASSIFICATION	1.3460674825499725E-5	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.999999823785168	WITHOUT_CLASSIFICATION	1.7621483201165784E-7	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999453519826056	WITHOUT_CLASSIFICATION	5.464801739445618E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999404802419616	WITHOUT_CLASSIFICATION	5.951975803832416E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999977449142554	WITHOUT_CLASSIFICATION	2.2550857444901815E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999912574762707	WITHOUT_CLASSIFICATION	8.742523729293312E-6	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999912574762707	WITHOUT_CLASSIFICATION	8.742523729293312E-6	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9998383472264091	WITHOUT_CLASSIFICATION	1.6165277359090347E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999944843196	WITHOUT_CLASSIFICATION	5.515680405700417E-9	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999999944843196	WITHOUT_CLASSIFICATION	5.515680405700417E-9	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.7804975492842774	WITHOUT_CLASSIFICATION	0.21950245071572266	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9999997950744736	WITHOUT_CLASSIFICATION	2.0492552653551418E-7	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999998840762483	WITHOUT_CLASSIFICATION	1.1592375172828987E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9999991649596853	WITHOUT_CLASSIFICATION	8.350403146794769E-7	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999996292773596	WITHOUT_CLASSIFICATION	3.707226402964837E-7	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999998551335876	WITHOUT_CLASSIFICATION	1.4486641249183424E-7	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999992755990356	WITHOUT_CLASSIFICATION	7.244009643869208E-7	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.998698848533037	WITHOUT_CLASSIFICATION	0.0013011514669629132	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.999999652735066	WITHOUT_CLASSIFICATION	3.472649341002009E-7	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.999999929915572	WITHOUT_CLASSIFICATION	7.008442800181921E-8	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999998379052872	WITHOUT_CLASSIFICATION	1.6209471272150278E-7	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9999997324921653	WITHOUT_CLASSIFICATION	2.6750783463083845E-7	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9999997457886297	WITHOUT_CLASSIFICATION	2.5421137032508044E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9999911821515529	WITHOUT_CLASSIFICATION	8.817848446997327E-6	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9999993987111336	WITHOUT_CLASSIFICATION	6.012888664767919E-7	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.9823806802703244	WITHOUT_CLASSIFICATION	0.017619319729675623	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9994268714611119	WITHOUT_CLASSIFICATION	5.731285388881723E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999999310248153	WITHOUT_CLASSIFICATION	6.897518474307543E-8	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999999607758154	WITHOUT_CLASSIFICATION	3.922418462462448E-8	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9999947632521792	WITHOUT_CLASSIFICATION	5.236747820754074E-6	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.999987503721672	WITHOUT_CLASSIFICATION	1.2496278327879097E-5	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999995262811066	WITHOUT_CLASSIFICATION	4.7371889343417923E-7	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999999976333148	WITHOUT_CLASSIFICATION	2.3666852489990196E-9	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9999915871684643	WITHOUT_CLASSIFICATION	8.412831535824426E-6	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9999847036778807	WITHOUT_CLASSIFICATION	1.5296322119312964E-5	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999999976951696	WITHOUT_CLASSIFICATION	2.304830407031484E-9	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999999999919432	WITHOUT_CLASSIFICATION	8.05679271156078E-11	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999990326460839	WITHOUT_CLASSIFICATION	9.67353916026888E-7	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999997221936641	WITHOUT_CLASSIFICATION	2.7780633595342867E-7	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.9999992264144981	WITHOUT_CLASSIFICATION	7.735855018326233E-7	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999905152480336	WITHOUT_CLASSIFICATION	9.484751966415846E-6	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999999536043658	WITHOUT_CLASSIFICATION	4.6395634355199637E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777296411	WITHOUT_CLASSIFICATION	2.227035886715688E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777296411	WITHOUT_CLASSIFICATION	2.227035886715688E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777296411	WITHOUT_CLASSIFICATION	2.227035886715688E-8	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9999999777296411	WITHOUT_CLASSIFICATION	2.227035886715688E-8	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999893086252956	WITHOUT_CLASSIFICATION	1.0691374704358805E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9998963849407925	WITHOUT_CLASSIFICATION	1.0361505920760727E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999996164997471	WITHOUT_CLASSIFICATION	3.83500252900043E-7	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999996164997471	WITHOUT_CLASSIFICATION	3.83500252900043E-7	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.999998837388469	WITHOUT_CLASSIFICATION	1.162611530997956E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999973643251768	WITHOUT_CLASSIFICATION	2.6356748231885024E-6	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9999999024224262	WITHOUT_CLASSIFICATION	9.757757379823377E-8	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999999933476075	WITHOUT_CLASSIFICATION	6.652392506637391E-9	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999711871311425	WITHOUT_CLASSIFICATION	2.881286885748045E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9999994854788777	WITHOUT_CLASSIFICATION	5.14521122331891E-7	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9999961015816086	WITHOUT_CLASSIFICATION	3.8984183913786315E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944002657	WITHOUT_CLASSIFICATION	1.7055997342936988E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944002657	WITHOUT_CLASSIFICATION	1.7055997342936988E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944002657	WITHOUT_CLASSIFICATION	1.7055997342936988E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999982944002657	WITHOUT_CLASSIFICATION	1.7055997342936988E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9986616099501279	WITHOUT_CLASSIFICATION	0.0013383900498720486	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995254996684	WITHOUT_CLASSIFICATION	4.745003315207672E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995254996684	WITHOUT_CLASSIFICATION	4.745003315207672E-7	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9999995254996684	WITHOUT_CLASSIFICATION	4.745003315207672E-7	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9999999698824255	WITHOUT_CLASSIFICATION	3.011757451059786E-8	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999986552310132	WITHOUT_CLASSIFICATION	1.3447689869153012E-6	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999997632317305	WITHOUT_CLASSIFICATION	2.3676826960871455E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9999997554310307	WITHOUT_CLASSIFICATION	2.4456896932633135E-7	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9998696553663456	WITHOUT_CLASSIFICATION	1.3034463365427858E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999596884208954	WITHOUT_CLASSIFICATION	4.0311579104592724E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999596884208954	WITHOUT_CLASSIFICATION	4.0311579104592724E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340340819	WITHOUT_CLASSIFICATION	3.476596591807561E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999652340340819	WITHOUT_CLASSIFICATION	3.476596591807561E-5	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.999999986952962	WITHOUT_CLASSIFICATION	1.3047037984956715E-8	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999999854859869	WITHOUT_CLASSIFICATION	1.451401320595134E-8	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9999999947102168	WITHOUT_CLASSIFICATION	5.289783180492134E-9	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9961891919980705	WITHOUT_CLASSIFICATION	0.00381080800192954	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999987633364136	WITHOUT_CLASSIFICATION	1.2366635864616872E-6	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999999886615274	WITHOUT_CLASSIFICATION	1.1338472613400068E-8	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9999999907393294	WITHOUT_CLASSIFICATION	9.260670488816202E-9	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999969451295047	WITHOUT_CLASSIFICATION	3.0548704953358083E-6	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.999999956468491	WITHOUT_CLASSIFICATION	4.35315088711361E-8	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893796	WITHOUT_CLASSIFICATION	5.106204065526806E-10	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999999994893796	WITHOUT_CLASSIFICATION	5.106204065526806E-10	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901285549	WITHOUT_CLASSIFICATION	2.098714451429144E-7	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999997901285549	WITHOUT_CLASSIFICATION	2.098714451429144E-7	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9999868651660905	WITHOUT_CLASSIFICATION	1.3134833909548651E-5	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9999995648107807	WITHOUT_CLASSIFICATION	4.351892193808958E-7	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999793678883365	WITHOUT_CLASSIFICATION	2.06321116635603E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214153775	WITHOUT_CLASSIFICATION	1.5785846225438993E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214153775	WITHOUT_CLASSIFICATION	1.5785846225438993E-6	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9999984214153775	WITHOUT_CLASSIFICATION	1.5785846225438993E-6	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999967863404939	WITHOUT_CLASSIFICATION	3.213659506030328E-6	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999952337948875	WITHOUT_CLASSIFICATION	4.7662051124972965E-6	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999943351154297	WITHOUT_CLASSIFICATION	5.664884570366539E-6	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999960528167864	WITHOUT_CLASSIFICATION	3.947183213666679E-6	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.999993397246128	WITHOUT_CLASSIFICATION	6.6027538719546025E-6	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999927631503177	WITHOUT_CLASSIFICATION	7.236849682259388E-6	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999960393408484	WITHOUT_CLASSIFICATION	3.960659151656226E-6	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999995109906431	WITHOUT_CLASSIFICATION	4.890093569609706E-7	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9999689353063819	WITHOUT_CLASSIFICATION	3.106469361812395E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.999998873279048	WITHOUT_CLASSIFICATION	1.1267209519961874E-6	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9999997854692443	WITHOUT_CLASSIFICATION	2.1453075568248776E-7	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9999999605420199	WITHOUT_CLASSIFICATION	3.945798007877424E-8	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999993157938893	WITHOUT_CLASSIFICATION	6.842061106154309E-7	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9970728158664564	WITHOUT_CLASSIFICATION	0.0029271841335436937	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9999971293370108	WITHOUT_CLASSIFICATION	2.8706629893021614E-6	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9999916046011473	WITHOUT_CLASSIFICATION	8.395398852696498E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999852211316582	WITHOUT_CLASSIFICATION	1.4778868341821599E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999825384341442	WITHOUT_CLASSIFICATION	1.7461565855818725E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9999150853760356	WITHOUT_CLASSIFICATION	8.491462396444173E-5	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999995706163766	WITHOUT_CLASSIFICATION	4.293836233421609E-7	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9999974846558235	WITHOUT_CLASSIFICATION	2.515344176477201E-6	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.5766747764966835	DEFECT	0.4233252235033165	WITHOUT_CLASSIFICATION
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9999185053526022	WITHOUT_CLASSIFICATION	8.149464739780736E-5	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9999894031834915	WITHOUT_CLASSIFICATION	1.0596816508509122E-5	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999966233849642	WITHOUT_CLASSIFICATION	3.37661503583842E-6	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999999992879381	WITHOUT_CLASSIFICATION	7.12061728436083E-10	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999881536993771	WITHOUT_CLASSIFICATION	1.1846300622908374E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999954743619535	WITHOUT_CLASSIFICATION	4.525638046556143E-6	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999954743619535	WITHOUT_CLASSIFICATION	4.525638046556143E-6	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999842318701958	WITHOUT_CLASSIFICATION	1.576812980428477E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999927732921777	WITHOUT_CLASSIFICATION	7.226707822276567E-6	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999951652793424	WITHOUT_CLASSIFICATION	4.834720657581285E-6	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999943398937393	WITHOUT_CLASSIFICATION	5.660106260704989E-6	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999957938868157	WITHOUT_CLASSIFICATION	4.206113184307712E-6	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999938430171625	WITHOUT_CLASSIFICATION	6.1569828374962325E-6	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.99999620808678	WITHOUT_CLASSIFICATION	3.7919132200641896E-6	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999952784479679	WITHOUT_CLASSIFICATION	4.721552032156068E-6	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999954758752296	WITHOUT_CLASSIFICATION	4.524124770468718E-6	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999971981000328	WITHOUT_CLASSIFICATION	2.80189996717849E-6	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999973204572745	WITHOUT_CLASSIFICATION	2.679542725406955E-6	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999966150011731	WITHOUT_CLASSIFICATION	3.3849988268731084E-6	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999966431110892	WITHOUT_CLASSIFICATION	3.3568889108725166E-6	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.99999461457546	WITHOUT_CLASSIFICATION	5.385424540068694E-6	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999961767368082	WITHOUT_CLASSIFICATION	3.823263191774135E-6	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999968293335915	WITHOUT_CLASSIFICATION	3.1706664085369605E-6	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999962798079991	WITHOUT_CLASSIFICATION	3.7201920008543375E-6	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999976131177151	WITHOUT_CLASSIFICATION	2.3868822849514214E-6	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999963251763181	WITHOUT_CLASSIFICATION	3.6748236817925693E-6	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999917860943932	WITHOUT_CLASSIFICATION	8.213905606701026E-6	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999957520252221	WITHOUT_CLASSIFICATION	4.24797477793172E-6	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999920836701296	WITHOUT_CLASSIFICATION	7.916329870356897E-6	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999965824539583	WITHOUT_CLASSIFICATION	3.417546041627531E-6	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999987527731592	WITHOUT_CLASSIFICATION	1.247226840862026E-6	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999965481482767	WITHOUT_CLASSIFICATION	3.4518517233853676E-6	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999971680320966	WITHOUT_CLASSIFICATION	2.831967903436076E-6	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.999996845893892	WITHOUT_CLASSIFICATION	3.1541061079574317E-6	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999960825229214	WITHOUT_CLASSIFICATION	3.917477078701685E-6	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999962639589517	WITHOUT_CLASSIFICATION	3.7360410483717684E-6	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999972466011798	WITHOUT_CLASSIFICATION	2.7533988200950444E-6	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999978347824392	WITHOUT_CLASSIFICATION	2.165217560724512E-6	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999997577673516	WITHOUT_CLASSIFICATION	2.4223264840383067E-6	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999955772333103	WITHOUT_CLASSIFICATION	4.422766689669094E-6	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999969356876758	WITHOUT_CLASSIFICATION	3.064312324251429E-6	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999962205751225	WITHOUT_CLASSIFICATION	3.779424877437126E-6	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999980742549637	WITHOUT_CLASSIFICATION	1.9257450363072696E-6	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999968298895248	WITHOUT_CLASSIFICATION	3.170110475254727E-6	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999949057516974	WITHOUT_CLASSIFICATION	5.094248302603486E-6	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999963559258812	WITHOUT_CLASSIFICATION	3.6440741187117253E-6	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999933443098957	WITHOUT_CLASSIFICATION	6.655690104354331E-6	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999968404327914	WITHOUT_CLASSIFICATION	3.1595672087085963E-6	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999964715138809	WITHOUT_CLASSIFICATION	3.528486119105148E-6	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999924090636585	WITHOUT_CLASSIFICATION	7.590936341522904E-6	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999956093843861	WITHOUT_CLASSIFICATION	4.390615613842602E-6	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999968097665906	WITHOUT_CLASSIFICATION	3.190233409426044E-6	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999962802499687	WITHOUT_CLASSIFICATION	3.7197500312764695E-6	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999925725954464	WITHOUT_CLASSIFICATION	7.427404553666607E-6	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999994686823261	WITHOUT_CLASSIFICATION	5.313176739075815E-6	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999948089940273	WITHOUT_CLASSIFICATION	5.191005972781024E-6	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999949370218173	WITHOUT_CLASSIFICATION	5.0629781827365065E-6	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999993036426851	WITHOUT_CLASSIFICATION	6.963573149036138E-6	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999920414076896	WITHOUT_CLASSIFICATION	7.958592310276952E-6	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999946287538679	WITHOUT_CLASSIFICATION	5.371246132085487E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999926358020762	WITHOUT_CLASSIFICATION	7.364197923858973E-6	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999926358020762	WITHOUT_CLASSIFICATION	7.364197923858973E-6	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999936366906443	WITHOUT_CLASSIFICATION	6.3633093556959035E-6	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999958310256477	WITHOUT_CLASSIFICATION	4.168974352318168E-6	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999934891018333	WITHOUT_CLASSIFICATION	6.5108981666667845E-6	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999929042948206	WITHOUT_CLASSIFICATION	7.0957051794433344E-6	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999971441971961	WITHOUT_CLASSIFICATION	2.855802803886604E-6	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999990434396855	WITHOUT_CLASSIFICATION	9.565603145151566E-6	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999939998249555	WITHOUT_CLASSIFICATION	6.0001750444824E-6	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999876115189226	WITHOUT_CLASSIFICATION	1.2388481077467519E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999911660979993	WITHOUT_CLASSIFICATION	8.833902000736211E-6	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999948494846752	WITHOUT_CLASSIFICATION	5.150515324730941E-6	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993299631372	WITHOUT_CLASSIFICATION	6.700368627790431E-7	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999993299631372	WITHOUT_CLASSIFICATION	6.700368627790431E-7	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999988659639966	WITHOUT_CLASSIFICATION	1.1340360033897026E-6	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9998291033180342	WITHOUT_CLASSIFICATION	1.708966819656628E-4	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996242314480713	WITHOUT_CLASSIFICATION	3.757685519286109E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999999999834561	WITHOUT_CLASSIFICATION	1.6543857849986976E-11	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999999779890212	WITHOUT_CLASSIFICATION	2.2010978841024533E-8	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.7152042632270247	WITHOUT_CLASSIFICATION	0.28479573677297537	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9972537881664266	WITHOUT_CLASSIFICATION	0.0027462118335733958	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999973601330264	WITHOUT_CLASSIFICATION	2.63986697355103E-6	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.999996900075912	WITHOUT_CLASSIFICATION	3.0999240879701623E-6	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999967336618257	WITHOUT_CLASSIFICATION	3.2663381741958973E-6	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999957903236976	WITHOUT_CLASSIFICATION	4.209676302405809E-6	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.999996134821835	WITHOUT_CLASSIFICATION	3.865178164949E-6	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999937535055085	WITHOUT_CLASSIFICATION	6.246494491547577E-6	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999989270071446	WITHOUT_CLASSIFICATION	1.0729928554110923E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999951716852588	WITHOUT_CLASSIFICATION	4.828314741278393E-6	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999940226857682	WITHOUT_CLASSIFICATION	5.977314231831634E-6	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999927717046132	WITHOUT_CLASSIFICATION	7.228295386860685E-6	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999938290215401	WITHOUT_CLASSIFICATION	6.1709784598750415E-6	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999943245280765	WITHOUT_CLASSIFICATION	5.67547192348423E-6	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999936355984081	WITHOUT_CLASSIFICATION	6.364401591767966E-6	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999934485009839	WITHOUT_CLASSIFICATION	6.551499016052994E-6	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.999996281204262	WITHOUT_CLASSIFICATION	3.718795738050062E-6	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999974651847746	WITHOUT_CLASSIFICATION	2.5348152253681704E-6	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999960024847666	WITHOUT_CLASSIFICATION	3.997515233323184E-6	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999952849553464	WITHOUT_CLASSIFICATION	4.715044653585777E-6	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999953862860368	WITHOUT_CLASSIFICATION	4.61371396322664E-6	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999920416737109	WITHOUT_CLASSIFICATION	7.95832628904756E-6	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999903373903244	WITHOUT_CLASSIFICATION	9.662609675504846E-6	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999942708196219	WITHOUT_CLASSIFICATION	5.729180378160339E-6	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999946866743892	WITHOUT_CLASSIFICATION	5.31332561083174E-6	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999968020875151	WITHOUT_CLASSIFICATION	3.1979124848450508E-6	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999963042131598	WITHOUT_CLASSIFICATION	3.69578684016837E-6	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999979161157486	WITHOUT_CLASSIFICATION	2.0838842514554736E-6	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999982070684348	WITHOUT_CLASSIFICATION	1.792931565260161E-6	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999970616433873	WITHOUT_CLASSIFICATION	2.9383566126447694E-6	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999976152384018	WITHOUT_CLASSIFICATION	2.3847615982331054E-6	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999969977307894	WITHOUT_CLASSIFICATION	3.002269210606426E-6	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999958443837675	WITHOUT_CLASSIFICATION	4.155616232528159E-6	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999946471672959	WITHOUT_CLASSIFICATION	5.352832704128649E-6	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999957950286088	WITHOUT_CLASSIFICATION	4.204971391262946E-6	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999971977510056	WITHOUT_CLASSIFICATION	2.802248994447854E-6	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999964397647348	WITHOUT_CLASSIFICATION	3.560235265194629E-6	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999969097768904	WITHOUT_CLASSIFICATION	3.090223109616147E-6	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999949264853115	WITHOUT_CLASSIFICATION	5.07351468847821E-6	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999940149840024	WITHOUT_CLASSIFICATION	5.985015997695402E-6	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.999995472085483	WITHOUT_CLASSIFICATION	4.527914516977472E-6	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999952326919155	WITHOUT_CLASSIFICATION	4.767308084541172E-6	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999951373637145	WITHOUT_CLASSIFICATION	4.862636285511595E-6	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999950382196201	WITHOUT_CLASSIFICATION	4.961780379919349E-6	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999959471867438	WITHOUT_CLASSIFICATION	4.052813256268076E-6	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999969771045949	WITHOUT_CLASSIFICATION	3.022895405080675E-6	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999947884315393	WITHOUT_CLASSIFICATION	5.2115684606680165E-6	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999958720481847	WITHOUT_CLASSIFICATION	4.1279518152229665E-6	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999920507575354	WITHOUT_CLASSIFICATION	7.949242464604917E-6	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999852151536973	WITHOUT_CLASSIFICATION	1.4784846302596373E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999936126082253	WITHOUT_CLASSIFICATION	6.387391774698875E-6	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999921655017732	WITHOUT_CLASSIFICATION	7.834498226920346E-6	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999969534455789	WITHOUT_CLASSIFICATION	3.04655442110496E-6	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999968803258088	WITHOUT_CLASSIFICATION	3.1196741911819347E-6	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999953378610862	WITHOUT_CLASSIFICATION	4.662138913838397E-6	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999914355782111	WITHOUT_CLASSIFICATION	8.564421788865822E-6	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999953483601137	WITHOUT_CLASSIFICATION	4.651639886359579E-6	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999952736236184	WITHOUT_CLASSIFICATION	4.726376381612956E-6	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999947367394397	WITHOUT_CLASSIFICATION	5.2632605602298205E-6	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999999893336353	WITHOUT_CLASSIFICATION	1.0666364769961945E-8	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9999999614589484	WITHOUT_CLASSIFICATION	3.854105165371354E-8	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9999930264042007	WITHOUT_CLASSIFICATION	6.973595799196213E-6	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999949643528349	WITHOUT_CLASSIFICATION	5.0356471651029766E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751713678	WITHOUT_CLASSIFICATION	7.592482863220877E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9999240751713678	WITHOUT_CLASSIFICATION	7.592482863220877E-5	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9999999816749996	WITHOUT_CLASSIFICATION	1.8325000469618227E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741371967	WITHOUT_CLASSIFICATION	2.5862803352024436E-8	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999999741371967	WITHOUT_CLASSIFICATION	2.5862803352024436E-8	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9999999332647149	WITHOUT_CLASSIFICATION	6.673528514167722E-8	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999997817960866	WITHOUT_CLASSIFICATION	2.182039133587476E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999990628133429	WITHOUT_CLASSIFICATION	9.371866569848682E-7	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997529461025	WITHOUT_CLASSIFICATION	2.4705389744644235E-7	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9999997659405444	WITHOUT_CLASSIFICATION	2.340594555425605E-7	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076112976	WITHOUT_CLASSIFICATION	1.6923887025065846E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999983076112976	WITHOUT_CLASSIFICATION	1.6923887025065846E-6	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.999999662268885	WITHOUT_CLASSIFICATION	3.377311150588962E-7	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933593114243	WITHOUT_CLASSIFICATION	6.640688575692429E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999933593114243	WITHOUT_CLASSIFICATION	6.640688575692429E-6	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9999999989671691	WITHOUT_CLASSIFICATION	1.0328309460080143E-9	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.6617454517256866	DEFECT	0.3382545482743135	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9999985120692064	WITHOUT_CLASSIFICATION	1.4879307935520634E-6	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9998611817666005	WITHOUT_CLASSIFICATION	1.3881823339953215E-4	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9999997555407307	WITHOUT_CLASSIFICATION	2.4445926921238944E-7	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9999991193140004	WITHOUT_CLASSIFICATION	8.806859995833191E-7	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999987631825	WITHOUT_CLASSIFICATION	1.2368174998649981E-6	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999998443900162	WITHOUT_CLASSIFICATION	1.556099836999266E-7	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.999999973038788	WITHOUT_CLASSIFICATION	2.696121193131049E-8	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9999809612893672	WITHOUT_CLASSIFICATION	1.9038710632745296E-5	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9999893869837192	WITHOUT_CLASSIFICATION	1.0613016280930168E-5	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999998115196981	WITHOUT_CLASSIFICATION	1.884803018393456E-7	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999999767159998	WITHOUT_CLASSIFICATION	2.328400021489349E-8	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999958960642461	WITHOUT_CLASSIFICATION	4.103935753869138E-6	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9999991331902415	WITHOUT_CLASSIFICATION	8.668097584952072E-7	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999935406232658	WITHOUT_CLASSIFICATION	6.459376734135166E-6	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9999999938906518	WITHOUT_CLASSIFICATION	6.109348280385849E-9	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9998622055971136	WITHOUT_CLASSIFICATION	1.3779440288649446E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116638137	WITHOUT_CLASSIFICATION	6.883361862682562E-7	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999993116638137	WITHOUT_CLASSIFICATION	6.883361862682562E-7	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9999996888995057	WITHOUT_CLASSIFICATION	3.11100494243785E-7	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999999967393671	WITHOUT_CLASSIFICATION	3.260632841698021E-9	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9999995331479008	WITHOUT_CLASSIFICATION	4.668520992544653E-7	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9999944502115097	WITHOUT_CLASSIFICATION	5.549788490340725E-6	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506755934	WITHOUT_CLASSIFICATION	1.3749324406534737E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506755934	WITHOUT_CLASSIFICATION	1.3749324406534737E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999862506755934	WITHOUT_CLASSIFICATION	1.3749324406534737E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.999999933238584	WITHOUT_CLASSIFICATION	6.676141591951192E-8	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9999528825320971	WITHOUT_CLASSIFICATION	4.711746790287262E-5	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999998896520913	WITHOUT_CLASSIFICATION	1.1034790865763342E-7	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999968333398295	WITHOUT_CLASSIFICATION	3.1666601705046095E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.999997750312288	WITHOUT_CLASSIFICATION	2.249687712054714E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999999934809546	WITHOUT_CLASSIFICATION	6.519045425236907E-9	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9999557097544403	WITHOUT_CLASSIFICATION	4.429024555964266E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9999995463680076	WITHOUT_CLASSIFICATION	4.536319924037514E-7	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999990452392157	WITHOUT_CLASSIFICATION	9.5476078427267E-7	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999998810929923	WITHOUT_CLASSIFICATION	1.1890700767025383E-7	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999994534112063	WITHOUT_CLASSIFICATION	5.465887936973258E-7	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999996273031506	WITHOUT_CLASSIFICATION	3.7269684937794864E-7	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9703721098651845	WITHOUT_CLASSIFICATION	0.02962789013481557	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999069913733869	WITHOUT_CLASSIFICATION	9.300862661305588E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999999999281395	WITHOUT_CLASSIFICATION	7.18605713074285E-11	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9999998026023063	WITHOUT_CLASSIFICATION	1.9739769376456942E-7	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999991138954663	WITHOUT_CLASSIFICATION	8.861045337532063E-7	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999973108118216	WITHOUT_CLASSIFICATION	2.689188178427889E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.999998734390183	WITHOUT_CLASSIFICATION	1.265609817037002E-6	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9060752891104797	DEFECT	0.09392471088952031	WITHOUT_CLASSIFICATION
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9982334575890904	DEFECT	0.0017665424109095389	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9865057694771326	WITHOUT_CLASSIFICATION	0.01349423052286731	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.7931450549874175	DEFECT	0.2068549450125825	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9993007246620271	DEFECT	6.992753379729061E-4	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9028218864653091	WITHOUT_CLASSIFICATION	0.09717811353469084	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.6590514738130986	WITHOUT_CLASSIFICATION	0.34094852618690147	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9131075698873785	WITHOUT_CLASSIFICATION	0.0868924301126214	DEFECT
// FIXME: not correct exception	DEFECT	0.9987978625924581	DEFECT	0.0012021374075419304	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9992131581510055	WITHOUT_CLASSIFICATION	7.868418489943776E-4	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9999094502623022	WITHOUT_CLASSIFICATION	9.054973769779501E-5	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9113002156799349	WITHOUT_CLASSIFICATION	0.08869978432006512	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9992200861648446	WITHOUT_CLASSIFICATION	7.799138351553105E-4	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.8970198996147173	DEFECT	0.10298010038528276	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.858812529747734	WITHOUT_CLASSIFICATION	0.1411874702522659	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9444575442786385	WITHOUT_CLASSIFICATION	0.0555424557213616	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9444575442786385	WITHOUT_CLASSIFICATION	0.0555424557213616	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.997185257275346	WITHOUT_CLASSIFICATION	0.0028147427246540016	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9896460859032381	WITHOUT_CLASSIFICATION	0.010353914096761905	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.7204054788742933	WITHOUT_CLASSIFICATION	0.2795945211257067	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995481303436569	WITHOUT_CLASSIFICATION	4.5186965634312816E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9995481303436569	WITHOUT_CLASSIFICATION	4.5186965634312816E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9714023012341733	DEFECT	0.028597698765826678	WITHOUT_CLASSIFICATION
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9822724092851765	DEFECT	0.017727590714823563	WITHOUT_CLASSIFICATION
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.8284115542088064	WITHOUT_CLASSIFICATION	0.17158844579119348	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.656693716961707	WITHOUT_CLASSIFICATION	0.3433062830382931	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.6038804425294075	DEFECT	0.39611955747059246	WITHOUT_CLASSIFICATION
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7449884271998999	DEFECT	0.2550115728001002	WITHOUT_CLASSIFICATION
// TODO: proper sign	DEFECT	0.9987454432185724	WITHOUT_CLASSIFICATION	0.0012545567814276257	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9993704328005443	DEFECT	6.295671994556082E-4	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.5222502171929755	WITHOUT_CLASSIFICATION	0.4777497828070245	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.9629456050543828	DEFECT	0.03705439494561725	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9515735193103709	DEFECT	0.04842648068962912	WITHOUT_CLASSIFICATION
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9809301943543374	DEFECT	0.01906980564566259	WITHOUT_CLASSIFICATION
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8713026408678793	WITHOUT_CLASSIFICATION	0.12869735913212063	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.80425434859495	DEFECT	0.19574565140504988	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.6566318106142781	WITHOUT_CLASSIFICATION	0.34336818938572194	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9821822615727919	WITHOUT_CLASSIFICATION	0.017817738427208192	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.5747895096346473	DEFECT	0.42521049036535274	WITHOUT_CLASSIFICATION
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9992083796742868	DEFECT	7.916203257132076E-4	WITHOUT_CLASSIFICATION
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9982077507042646	WITHOUT_CLASSIFICATION	0.0017922492957355137	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9999929152413655	WITHOUT_CLASSIFICATION	7.084758634545609E-6	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.6376887152922719	WITHOUT_CLASSIFICATION	0.36231128470772805	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.6376887152922719	WITHOUT_CLASSIFICATION	0.36231128470772805	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6965463665266958	WITHOUT_CLASSIFICATION	0.3034536334733042	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9981198733760545	WITHOUT_CLASSIFICATION	0.0018801266239455356	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9999869434302467	DEFECT	1.3056569753292426E-5	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9952115551834134	WITHOUT_CLASSIFICATION	0.004788444816586601	DEFECT
// FIXME: This is wrong	DEFECT	0.9299636333862055	DEFECT	0.07003636661379457	WITHOUT_CLASSIFICATION
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.5308308760385283	DEFECT	0.46916912396147165	WITHOUT_CLASSIFICATION
// XXX Wrong, but will have to do for now	DEFECT	0.9999499622669807	WITHOUT_CLASSIFICATION	5.003773301925543E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7069992986488078	DEFECT	0.2930007013511921	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9865293898792479	WITHOUT_CLASSIFICATION	0.013470610120752138	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9999546108856839	WITHOUT_CLASSIFICATION	4.53891143160582E-5	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998273040457056	DEFECT	1.7269595429442647E-4	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635783733951159	WITHOUT_CLASSIFICATION	0.03642162660488411	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635783733951159	WITHOUT_CLASSIFICATION	0.03642162660488411	DEFECT
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9994357145012318	DEFECT	5.642854987681728E-4	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9979077777098747	DEFECT	0.0020922222901252883	WITHOUT_CLASSIFICATION
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9997416630399776	WITHOUT_CLASSIFICATION	2.583369600224514E-4	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.996487883325789	DEFECT	0.0035121166742110876	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9992112889246695	DEFECT	7.88711075330515E-4	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9998000324959748	WITHOUT_CLASSIFICATION	1.9996750402522605E-4	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9970925866188776	DEFECT	0.0029074133811223886	WITHOUT_CLASSIFICATION
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.6965463665266958	WITHOUT_CLASSIFICATION	0.3034536334733042	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9999371913046711	WITHOUT_CLASSIFICATION	6.280869532889917E-5	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9090012004732767	DEFECT	0.09099879952672332	WITHOUT_CLASSIFICATION
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9990379682805289	WITHOUT_CLASSIFICATION	9.620317194710568E-4	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.656693716961707	WITHOUT_CLASSIFICATION	0.3433062830382931	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9155313364220459	WITHOUT_CLASSIFICATION	0.08446866357795407	DEFECT
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8658075183578353	DEFECT	0.13419248164216463	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9821822615727919	WITHOUT_CLASSIFICATION	0.017817738427208192	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.995614272612647	WITHOUT_CLASSIFICATION	0.004385727387352953	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998273040457056	DEFECT	1.7269595429442647E-4	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9985632463744494	DEFECT	0.0014367536255505643	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// TODO: don't require pop	DEFECT	0.708556704147852	WITHOUT_CLASSIFICATION	0.2914432958521482	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.7069992986488078	DEFECT	0.2930007013511921	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9975010203116721	WITHOUT_CLASSIFICATION	0.002498979688327814	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635783733951159	WITHOUT_CLASSIFICATION	0.03642162660488411	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9635783733951159	WITHOUT_CLASSIFICATION	0.03642162660488411	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.8849291846675588	DEFECT	0.11507081533244118	WITHOUT_CLASSIFICATION
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.999071685167861	WITHOUT_CLASSIFICATION	9.283148321390131E-4	DEFECT
