WITHOUT_CLASSIFICATION	// Delete the ActionContributionItems with matching action. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Recompute the read only state. //
WITHOUT_CLASSIFICATION	// Refresh any actions that may become enabled or disabled. //
WITHOUT_CLASSIFICATION	// Create the command stack that will notify this editor as commands are executed. //
WITHOUT_CLASSIFICATION	// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Try to select the affected objects. //
WITHOUT_CLASSIFICATION	// Create the editing domain with a special command stack. //
WITHOUT_CLASSIFICATION	// Make sure it's okay. //
WITHOUT_CLASSIFICATION	// Create an adapter factory that yields item providers. //
WITHOUT_CLASSIFICATION	// Try to select the items in the current content viewer of the editor. //
WITHOUT_CLASSIFICATION	// If it is changing... //
WITHOUT_CLASSIFICATION	// Create the listener on demand. //
WITHOUT_CLASSIFICATION	// Stop listening to the old one. //
WITHOUT_CLASSIFICATION	// Start listening to the new one. //
WITHOUT_CLASSIFICATION	// Remember it. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Set the editors selection based on the current viewer's selection. //
WITHOUT_CLASSIFICATION	// Load the resource through the editing domain. //
WITHOUT_CLASSIFICATION	// Create a page for the selection tree view. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Ensures that this editor will only display the page's tab // area if there are more than one page //
WITHOUT_CLASSIFICATION	// The content outline is just a tree. //
WITHOUT_CLASSIFICATION	// This is the page for the list viewer //
WITHOUT_CLASSIFICATION	// This is the page for the tree viewer //
WITHOUT_CLASSIFICATION	// This is the page for the table viewer. //
WITHOUT_CLASSIFICATION	// This is the page for the table tree viewer. //
WITHOUT_CLASSIFICATION	// Make sure our popups work. //
WITHOUT_CLASSIFICATION	// Select the root object in the view. //
WITHOUT_CLASSIFICATION	// Listen to selection so that we can handle it is a special way. //
WITHOUT_CLASSIFICATION	// This ensures that we handle selections correctly. //
WITHOUT_CLASSIFICATION	// Set the selection to the widget. //
WITHOUT_CLASSIFICATION	// Save only resources that have actually changed. //
WITHOUT_CLASSIFICATION	// Do the work within an operation because this is a long running activity that modifies the workbench. //
WITHOUT_CLASSIFICATION	// Set the input to the widget. //
WITHOUT_CLASSIFICATION	// Save the resources to the file system. //
WITHOUT_CLASSIFICATION	// This runs the options, and shows progress. //
WITHOUT_CLASSIFICATION	// Refresh the necessary state. //
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Create a default .jetsettings file file
WITHOUT_CLASSIFICATION	// Something went wrong that shouldn't. //
WITHOUT_CLASSIFICATION	// Set the new variables. //
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getPackage(java.lang.String)   */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//Ecore2XMLResourceFactoryImpl
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	//Ecore2XMLAdapterFactory
WITHOUT_CLASSIFICATION	//Ecore2XMLSwitch
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	//Ecore2XMLResourceFactoryImpl
WITHOUT_CLASSIFICATION	//FunctionNamePairImpl
WITHOUT_CLASSIFICATION	//MappingFactoryImpl
WITHOUT_CLASSIFICATION	//ComplexTypeConverterImpl
WITHOUT_CLASSIFICATION	//MappingHelperImpl
WITHOUT_CLASSIFICATION	//MappingStrategyImpl
WITHOUT_CLASSIFICATION	//FunctionPairImpl
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	//MappingImpl
WITHOUT_CLASSIFICATION	// Remove zero width non-breaking space, which may be used as a byte order marker,  // and may be ignored according to the Unicode FAQ: http://www.unicode.org/unicode/faq/utf_bom.html#38 //
WITHOUT_CLASSIFICATION	//TypeConverterImpl
WITHOUT_CLASSIFICATION	// Barring a better result, this will be the result. //
WITHOUT_CLASSIFICATION	// If the intersection is empty, i.e., no ancestor is in the mapping... //
WITHOUT_CLASSIFICATION	// If this mapping isn't a parent, it's children definitely won't be either. //
WITHOUT_CLASSIFICATION	// Make sure the collections aren't identical... //
WITHOUT_CLASSIFICATION	//FB used to check for parent != null. // Need to find the top most model object not including the resource. // parent instanceof Eobject only checks for trees in model object space.
WITHOUT_CLASSIFICATION	// printAdapters();
WITHOUT_CLASSIFICATION	//MappingRootImpl
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	// Try to select the items in the current content viewer of the editor. //
WITHOUT_CLASSIFICATION	// If it is changing... //
WITHOUT_CLASSIFICATION	// Create the listener on demand. //
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// VAJ kludge //
WITHOUT_CLASSIFICATION	// This just notifies those things that are affected by the selection. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Stop listening to the old one. //
WITHOUT_CLASSIFICATION	// Start listening to the new one. //
WITHOUT_CLASSIFICATION	// Remember it. //
WITHOUT_CLASSIFICATION	/* EATM getDecoratedAdapterFactory().*/
WITHOUT_CLASSIFICATION	/* EATM getDecoratedAdapterFactory().*/
WITHOUT_CLASSIFICATION	/* EATM getDecoratedAdapterFactory().*/
WITHOUT_CLASSIFICATION	// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
WITHOUT_CLASSIFICATION	// I assume that the editorInput is a file object. //
WITHOUT_CLASSIFICATION	// Handle the creation of the model from the modelFile. //
WITHOUT_CLASSIFICATION	// Restore the persistent command stack, if need be. //
WITHOUT_CLASSIFICATION	// Create a page for the selection tree view. //
WITHOUT_CLASSIFICATION	// Set up the tree viewer. //
WITHOUT_CLASSIFICATION	// Make sure our popups work. //
WITHOUT_CLASSIFICATION	// Select the root object in the view. //
WITHOUT_CLASSIFICATION	// This ensures that we handle selections correctly. //
WITHOUT_CLASSIFICATION	// Do the work within an operation because this is a long running activity that modifies the workbench. //
WITHOUT_CLASSIFICATION	// Load the resource through the editing domain. // This will create a context and associate it with the resource set. //
WITHOUT_CLASSIFICATION	// The one object in the resource's extent should be the root object. //
WITHOUT_CLASSIFICATION	// Save the resource to the file system. //
WITHOUT_CLASSIFICATION	// Update the workbench's knowledge of the file's contents. //
WITHOUT_CLASSIFICATION	// Add the binding to the provided hash table: //
WITHOUT_CLASSIFICATION	// Refresh the necessary state. //
WITHOUT_CLASSIFICATION	// Something went wrong that shouldn't. //
WITHOUT_CLASSIFICATION	// Parse as an attribute=value:
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Create the mapping domain with a special command stack. // 
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Doing this just makes focus go to the default control, not the control that last has focus. // // super.setFocus();
WITHOUT_CLASSIFICATION	// If the object is an input or output object, then use it. //
WITHOUT_CLASSIFICATION	// Process the children recursively. //
WITHOUT_CLASSIFICATION	// Look for a single-char work delimiter: //
WITHOUT_CLASSIFICATION	// oldWidth = table.getClientArea().width;
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((ComplexTypeConverter)object).ePackageMapping();
WITHOUT_CLASSIFICATION	// This is for the in2out feature. //
WITHOUT_CLASSIFICATION	// This is for the out2in feature. //
WITHOUT_CLASSIFICATION	// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	// This is for the in2out feature. //
WITHOUT_CLASSIFICATION	// This is for the topDown feature. //
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((MappingRoot)msg.getNotifier()).ePackageMapping();
WITHOUT_CLASSIFICATION	//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((FunctionNamePair)object).ePackageMapping();
WITHOUT_CLASSIFICATION	// This is for the in2out feature. //
WITHOUT_CLASSIFICATION	// This is for the out2in feature. //
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((FunctionNamePair)msg.getNotifier()).ePackageMapping();
WITHOUT_CLASSIFICATION	// HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((FunctionPair)object).ePackageMapping();
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((FunctionPair)msg.getNotifier()).ePackageMapping();
WITHOUT_CLASSIFICATION	//HGD::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getStructuralFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	// This is here only to support deprecated adapt(object) rather than adapt(object, Interface.class). // // supportedTypes.add(null);
WITHOUT_CLASSIFICATION	// supportedTypes.add(IUpdateableItemText.class);
WITHOUT_CLASSIFICATION	//FB ????? 
WITHOUT_CLASSIFICATION	// This is for the helper feature. //
WITHOUT_CLASSIFICATION	// This is for the typeMapping feature. //
WITHOUT_CLASSIFICATION	//FIX:::
WITHOUT_CLASSIFICATION	//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	//fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), msg.getOldValue(), msg.getNewValue(), msg.getPosition());
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	// Create a resource set and load the model file into it. //
WITHOUT_CLASSIFICATION	// This is the path of the target directory. //
WITHOUT_CLASSIFICATION	// Break the cycle. //
WITHOUT_CLASSIFICATION	//MappingAdapterFactory
WITHOUT_CLASSIFICATION	// This ensures that we are dealing with actual MOF objects. //
WITHOUT_CLASSIFICATION	//MappingSwitch
WITHOUT_CLASSIFICATION	// This is the name of the model. //
WITHOUT_CLASSIFICATION	// Create a resource set and load the model file into it. //
WITHOUT_CLASSIFICATION	// This is the path of the target directory. //
WITHOUT_CLASSIFICATION	// This is to handle a genmodel produced by rose2genmodel. //
WITHOUT_CLASSIFICATION	// This is to handle a genmodel produced by rose2genmodel. //
WITHOUT_CLASSIFICATION	// Clean up any old project information. //
WITHOUT_CLASSIFICATION	// Remove variables since the plugin.xml should provide the complete path information. //
WITHOUT_CLASSIFICATION	// Look for a likely plugin name. //
WITHOUT_CLASSIFICATION	// Clean up any old project information. //
WITHOUT_CLASSIFICATION	// Remove variables since the plugin.xml should provide the complete path information. //
WITHOUT_CLASSIFICATION	// Consult the generator option for backwards compatibility. //
WITHOUT_CLASSIFICATION	// Apply a redirection pattern, if specified. //
WITHOUT_CLASSIFICATION	// If the target is read-only, we can ask the platform to release it. //
WITHOUT_CLASSIFICATION	// Multiple jet directives.
WITHOUT_CLASSIFICATION	// If the target is read-only, we can ask the platform to release it. //
WITHOUT_CLASSIFICATION	// Merge with an existing file. //
WITHOUT_CLASSIFICATION	// If the target is read-only, we can ask the platform to release it, and it may be updated in the process. //
WITHOUT_CLASSIFICATION	// If the target is read-only, we can ask the platform to release it, and it may be updated in the process. //
WITHOUT_CLASSIFICATION	// Create a code formatter for this compilation unit, if needed. //
WITHOUT_CLASSIFICATION	// If a newline from the previous character data remains, add a generator for it. //
WITHOUT_CLASSIFICATION	// If we can't determine it by reading the file, // look at the preferences instead.
WITHOUT_CLASSIFICATION	// Since we're invoking plugged-in code, we must be defensive against cycles. //
WITHOUT_CLASSIFICATION	// Compute the GeneratorData for the given object and its children, then for the parents of the given object. //
WITHOUT_CLASSIFICATION	// Combine the two lists. //
WITHOUT_CLASSIFICATION	// Give all generator adapters the chance to do setup work. //
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// Give all generator adapters the chance to do tear down. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// returns the package in which this enum literal is defined // returns the name of the enum literal get method in the package interface
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// String getCapPackageID(); // Includes features in other packages that delegate to those in this one.
WITHOUT_CLASSIFICATION	// returns the package in which this feature is defined // returns the name of the feature get method in the package interface (e.g. Company_Name) // returns the name of the feature get method in the package interface (e.g. Xyz.eINSTANCE.getCompany_Name)
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// // EMF.Editor generation //
WITHOUT_CLASSIFICATION	// // Tests generation //
WITHOUT_CLASSIFICATION	// boolean isGenerateEditPlugin(); // boolean isGenerateEditorPlugin();
WITHOUT_CLASSIFICATION	//  Remove any non-Java dependencies from being added. //
WITHOUT_CLASSIFICATION	// This URI handler redirect the URI based on the mapping. //
WITHOUT_CLASSIFICATION	// There must be at least one match. //
WITHOUT_CLASSIFICATION	// Ignore if there is not substantial change. //
WITHOUT_CLASSIFICATION	// Do allow an existing build.properties to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	// Do allow an existing build.properties to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	// Do not allow an existing MANIFEST.MF to be overwritten, as the tests project is originally generated from scratch. //
WITHOUT_CLASSIFICATION	// Do not allow an existing build.properties to be overwritten, as the tests project is originally generated from scratch. //
WITHOUT_CLASSIFICATION	//We are not generating the manifest file if the plugin.xml exists. //
WITHOUT_CLASSIFICATION	// Use an alternate if we can't write to this one. //
WITHOUT_CLASSIFICATION	// J9 2.2 has problems assigning null to a Class variable. // 
WITHOUT_CLASSIFICATION	// Create the options model. //
WITHOUT_CLASSIFICATION	//  Remove any non-Java dependencies from being added. //
WITHOUT_CLASSIFICATION	// Escape a string that will terminate the comment in which this will all be nested. //
WITHOUT_CLASSIFICATION	// If it is an unqualified name, we will assume it refers to a type parameter, since we don't support default package. //
WITHOUT_CLASSIFICATION	// Search the local scope for a resolution of the type parameter name. //
WITHOUT_CLASSIFICATION	// Check if we found a resolution for it. //
WITHOUT_CLASSIFICATION	// If not we'll erase it to java.lang.Object. //
WITHOUT_CLASSIFICATION	// Otherwise, recursively call ourselves to substitute it in context if necessary. //
WITHOUT_CLASSIFICATION	// Add back in the array indices if there are any. //
WITHOUT_CLASSIFICATION	// Just import the name or use it directly. //
WITHOUT_CLASSIFICATION	// We treat the feature as volatile if it is volatile itself or if it is  // a reference whose opposite end is volatile,  // unless that opposite volatile reference delegates to a feature map, // in which case, a full implementation of the references can be generated. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	/////////////////////////////////  HEADLESS INVOCATION  /////////////////////////////////////
WITHOUT_CLASSIFICATION	// for Ecore or something that explicitly extends it, we need to exclude // EObject, which is already handled by the default case
WITHOUT_CLASSIFICATION	// We assume that the rootExtendsClass already implements it. //
WITHOUT_CLASSIFICATION	// We assume that the rootExtendsClass already implements it. //
WITHOUT_CLASSIFICATION	// If the flag will straddle two fields, bump it to the next one. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// Ignore the exception.
WITHOUT_CLASSIFICATION	// An interface should be abstract, but this makes sure of that fact. //
WITHOUT_CLASSIFICATION	// Simple cases: no mix-ins for no inheritance or for a single base class. //
WITHOUT_CLASSIFICATION	// If extending an interface, its mix-ins must be included, since there is no implementation to handle them. //
WITHOUT_CLASSIFICATION	// Mix-ins are everything after the base class. //
WITHOUT_CLASSIFICATION	// If this is class has mixed content, the mixed feature should always be included, even if inherited, and come first. //
WITHOUT_CLASSIFICATION	// Add all other create child features that this item provider is responsible for. //
WITHOUT_CLASSIFICATION	// Many inherited methods must be overridden to handle this case. //
WITHOUT_CLASSIFICATION	// If this looks like a feature getter, a kind property will allow it to be recognized properly. //
WITHOUT_CLASSIFICATION	// Since we only use this right on an operation, we always want to include the keyType and valueType, and we never // want to qualify the property names. //
WITHOUT_CLASSIFICATION	// Type parameter casts can't be checked. //
WITHOUT_CLASSIFICATION	// If there are any arguments and they are not unbounded wildcards, casts can't be checked. //
WITHOUT_CLASSIFICATION	// Optimize the performance of applying the import regular  // expressions locating the last import line //      
WITHOUT_CLASSIFICATION	// Some XML types declare nebulous Object mappings. // They actually map to internal types that shouldn't be generated into code. //
WITHOUT_CLASSIFICATION	// If there is a base XML or Ecore type, use one of the two corresponding built-in factories to create a value from the literal string. //
WITHOUT_CLASSIFICATION	// Get the Java literal expression for the value. //
WITHOUT_CLASSIFICATION	// Otherwise, produce an expression that uses the appropriate factory to create a value from the literal. //
WITHOUT_CLASSIFICATION	// If the base package isn't set but there is a parent package, us it's information instead. //
WITHOUT_CLASSIFICATION	// Add all classes from this package first, to guarantee they get the // simple names
WITHOUT_CLASSIFICATION	// Do this here because getExtendedMetaData() is used during initialization  // and the mappings are are populated the first time it's fetched // which will miss the packages we add as we initialize the tree. //
WITHOUT_CLASSIFICATION	// Set the mapper to build an XSD2EcoreMappingRoot, if available. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// if there are no groups defined or matched, but the whole pattern matches, // then markup nodes with pattern name //
WITHOUT_CLASSIFICATION	// Restore original resource URI values. //
WITHOUT_CLASSIFICATION	// The "suffix" can actually be a substitution pattern for the package name. //
WITHOUT_CLASSIFICATION	// Walk up the superpackages, collecting the package names. // Because empty packages are ommitted from the GenModel, we need to walk up the EPackages. //
WITHOUT_CLASSIFICATION	// Any features that delegate to features in this package. //
WITHOUT_CLASSIFICATION	// If there are delegated features, add only those that aren't already in this package to the end of the list. //
WITHOUT_CLASSIFICATION	// We need to screen out duplicates in the unlikely event that we have two //  features with the same class-qualified name. We'll only generate one property //  string in that case and let the user add the second one manually, if necessary. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// source method return type is array (getExceptions), target is not array (i.e. addException)
WITHOUT_CLASSIFICATION	// We also need to set it on any GenModels holding any used or static packages that may be refered to. //
WITHOUT_CLASSIFICATION	// We also need to set it on any GenModels holding any used or static packages that may be refered to. //
WITHOUT_CLASSIFICATION	// And we need to set it on any cached GenModels holding the special Ecore and XML packages. //
WITHOUT_CLASSIFICATION	// And we need to set it on any cached GenModels holding the special Ecore and XML packages. //
WITHOUT_CLASSIFICATION	// It's okay for there not be a precompiled template, so fail quietly. // exception.printStackTrace();
WITHOUT_CLASSIFICATION	// If there are any warnings other than raw type warnings, include all the warnings. //
WITHOUT_CLASSIFICATION	// Force the project to be setup properly. //
WITHOUT_CLASSIFICATION	// Force the project to be setup properly. //
WITHOUT_CLASSIFICATION	// node is not marked up by now, but keep checking other rules 
WITHOUT_CLASSIFICATION	// Subclasses may override this method
WITHOUT_CLASSIFICATION	// // Tests generation //
WITHOUT_CLASSIFICATION	// If we change to pattern defaults, will have to specify plain suffix in no main package case. //
WITHOUT_CLASSIFICATION	// If we change to pattern defaults, will have to specify plain suffix in no main package case. //
WITHOUT_CLASSIFICATION	// If we change to pattern defaults, will have to specify plain suffix in no main package case. //
WITHOUT_CLASSIFICATION	// Subclasses may override this method
WITHOUT_CLASSIFICATION	// See if a GenModel is registered for the package's URI, and if so, try to load it. //
WITHOUT_CLASSIFICATION	// If that didn't work, just synthesize one. //
WITHOUT_CLASSIFICATION	// Different than the Edit and Editor projects, this method is invoked while  // generating the model plugin xml.
WITHOUT_CLASSIFICATION	// EATM  // Foreign Model
WITHOUT_CLASSIFICATION	// Any features from one package that delegate to features in another. //
WITHOUT_CLASSIFICATION	// If there are features delegating across packages, add only those that aren't already being generated. //
WITHOUT_CLASSIFICATION	// Recompute the read only state. //
WITHOUT_CLASSIFICATION	// Refresh any actions that may become enabled or disabled. //
WITHOUT_CLASSIFICATION	// Create the command stack that will notify this editor as commands are executed. //
WITHOUT_CLASSIFICATION	// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
WITHOUT_CLASSIFICATION	// Try to select the affected objects. //
WITHOUT_CLASSIFICATION	// Create the editing domain with a special command stack. //
WITHOUT_CLASSIFICATION	// Make sure it's okay. //
WITHOUT_CLASSIFICATION	// Try to select the items in the current content viewer of the editor. //
WITHOUT_CLASSIFICATION	// If it is changing... //
WITHOUT_CLASSIFICATION	// Create the listener on demand. //
WITHOUT_CLASSIFICATION	// This just notifies those things that are affected by the section. //
WITHOUT_CLASSIFICATION	// Stop listening to the old one. //
WITHOUT_CLASSIFICATION	// Start listening to the new one. //
WITHOUT_CLASSIFICATION	// Remember it. //
WITHOUT_CLASSIFICATION	// Set the editors selection based on the current viewer's selection. //
WITHOUT_CLASSIFICATION	// Load the resource through the editing domain. //
WITHOUT_CLASSIFICATION	// Creates the model from the editor input //
WITHOUT_CLASSIFICATION	// Only creates the other pages if there is something that can be edited //
WITHOUT_CLASSIFICATION	// Create a page for the selection tree view. //
WITHOUT_CLASSIFICATION	// Ensures that this editor will only display the page's tab // area if there are more than one page //
WITHOUT_CLASSIFICATION	// The content outline is just a tree. //
WITHOUT_CLASSIFICATION	// Set up the tree viewer. //
WITHOUT_CLASSIFICATION	// Make sure our popups work. //
WITHOUT_CLASSIFICATION	// Select the root object in the view. //
WITHOUT_CLASSIFICATION	// Listen to selection so that we can handle it is a special way. //
WITHOUT_CLASSIFICATION	// This ensures that we handle selections correctly. //
WITHOUT_CLASSIFICATION	// Get the first selected element. //
WITHOUT_CLASSIFICATION	// log the error, ignore the change and continue
WITHOUT_CLASSIFICATION	// Save the resources to the file system. //
WITHOUT_CLASSIFICATION	// Set the selection to the widget. //
WITHOUT_CLASSIFICATION	// Do the work within an operation because this is a long running activity that modifies the workbench. //
WITHOUT_CLASSIFICATION	// Save only resources that have actually changed. //
WITHOUT_CLASSIFICATION	// This is the method that gets invoked when the operation runs. //
WITHOUT_CLASSIFICATION	// loop for all commented out nodes
WITHOUT_CLASSIFICATION	// Do the work within an operation because this is a long running activity that modifies the workbench. //
WITHOUT_CLASSIFICATION	// Refresh the necessary state. //
WITHOUT_CLASSIFICATION	// This runs the options, and shows progress. //
WITHOUT_CLASSIFICATION	// insert line break and comment out the first line if needed // note that first line might move backward beyond node start (e.g. if a comma of the previous enum constant has been commented out)
WITHOUT_CLASSIFICATION	// Something went wrong that shouldn't. //
WITHOUT_CLASSIFICATION	// Nothing to do
WITHOUT_CLASSIFICATION	// This is the method that gets invoked when the operation runs. //
WITHOUT_CLASSIFICATION	// Something went wrong that shouldn't. //
WITHOUT_CLASSIFICATION	// Stop only on cancel. //
WITHOUT_CLASSIFICATION	// insert line break at the first line if there is something before the node start and the beginning of the line
WITHOUT_CLASSIFICATION	// Switch to the new selection provider. //
WITHOUT_CLASSIFICATION	// Fake a selection changed event to update the menus. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	//Class/genFeature.override.javajetinc //for
WITHOUT_CLASSIFICATION	// Kick of a Java build if not already in a build. //
WITHOUT_CLASSIFICATION	//Class/implementedGenOperation.override.javajetinc //for
WITHOUT_CLASSIFICATION	// do not add a new line if there is one
WITHOUT_CLASSIFICATION	// This call should get the files checked out from version control if the project is a 'team' project. //
WITHOUT_CLASSIFICATION	// there is only whitespace on this line - no need for line break
WITHOUT_CLASSIFICATION	// Check which directive it is. //
WITHOUT_CLASSIFICATION	//reader.reset(start); //return false;
WITHOUT_CLASSIFICATION	// Parse the attr-val pairs. //
WITHOUT_CLASSIFICATION	// If the template path points at a project with a JET Nature,  // then we will assume that the templates we want to use are already compiled in this plugin Java project. // 
WITHOUT_CLASSIFICATION	// Compute the URL for where the classes for this project will be located. //
WITHOUT_CLASSIFICATION	// Compute the URLs for all the output folder of all the project dependencies. //
WITHOUT_CLASSIFICATION	// Define a class loader that will look in the URLs first,  // and if it doesn't find the class there, uses the emitter's loader. //
WITHOUT_CLASSIFICATION	// Define a class loader that will look up the class in the bundle, // and if it doesn't find it there, will look in the parent. //
WITHOUT_CLASSIFICATION	// Strip off the trailing "_" and load that class. //
WITHOUT_CLASSIFICATION	// Check that the class is actually different from the one that's directly visible to the JETEmitter. //
WITHOUT_CLASSIFICATION	// Don't do any of the other normally dynamic JETEmitter project processing. //
WITHOUT_CLASSIFICATION	// Get the existing classpath and remove the project root if necessary. // Any new non-duplicate entries will be added to this. //
WITHOUT_CLASSIFICATION	// Add the new entries, including source, JRE container, and added variables and classpath containers.  //
WITHOUT_CLASSIFICATION	// Construct a proper URL for relative lookup. //
WITHOUT_CLASSIFICATION	// Determine all the bundles that this project depends on. //
WITHOUT_CLASSIFICATION	// If it doesn't correspond to a bundle, then try to process it as a project in the workspace. //
WITHOUT_CLASSIFICATION	// Add JETBuilder //
WITHOUT_CLASSIFICATION	// Create .jetproperties file //
WITHOUT_CLASSIFICATION	// clone includeStack without cloning contents //
WITHOUT_CLASSIFICATION	// Store the current state in stack. //
WITHOUT_CLASSIFICATION	// Set the new variables. //
WITHOUT_CLASSIFICATION	// Make sure we have something to pop. //
WITHOUT_CLASSIFICATION	// Get previous state in stack. //
WITHOUT_CLASSIFICATION	// Until the encoding can be specified within the template  // we need to assume an encoding capable of working with any character set.
WITHOUT_CLASSIFICATION	// Register the file, and read its content: //
WITHOUT_CLASSIFICATION	// Is stack created ? (will happen if the JET file we're looking at is missing. //
WITHOUT_CLASSIFICATION	// Restore parser state: //
WITHOUT_CLASSIFICATION	// Consume the open quote: //
WITHOUT_CLASSIFICATION	// Check end of quote, skip closing quote: //
WITHOUT_CLASSIFICATION	// Get the attribute name: //
WITHOUT_CLASSIFICATION	// Check for an equal sign: //
WITHOUT_CLASSIFICATION	// Get the attribute value: //
WITHOUT_CLASSIFICATION	// insert line break if there is non-whitespace before end of the line
WITHOUT_CLASSIFICATION	// End of the useBean tag. //
WITHOUT_CLASSIFICATION	// XMLesque Close tags //
WITHOUT_CLASSIFICATION	// Parse as an attribute=value: //
WITHOUT_CLASSIFICATION	// Reached EOF: //
WITHOUT_CLASSIFICATION	// Look for an end-of-comment or end-of-tag: //
WITHOUT_CLASSIFICATION	// The include succeeded, so if there is an alternative and we're not skipping, we need to start. //
WITHOUT_CLASSIFICATION	// If a newline from the previous character data remains, leave it around to be processed as if it appeared in the included file. //
WITHOUT_CLASSIFICATION	// The include failed, so if there is an alternative, we don't skip it. //
WITHOUT_CLASSIFICATION	// A section is not allowed without a preceding include with alternative. //
WITHOUT_CLASSIFICATION	// This pop is safe because a section couldn't have been started without an include that pushed. //
WITHOUT_CLASSIFICATION	// Process this first. //
WITHOUT_CLASSIFICATION	// Ignore this now //
WITHOUT_CLASSIFICATION	// If a newline from the previous character data remains, add a generator for it. //
WITHOUT_CLASSIFICATION	// An expression with more that 931 "+" will break Sun and IBM javac compilers. //
WITHOUT_CLASSIFICATION	// Register our directive. //
WITHOUT_CLASSIFICATION	// Ignore it if there are multiple comments. //
WITHOUT_CLASSIFICATION	// Three arguments are expected: the .xml jControlModel URI, the source java URI, and the target java URI. //
WITHOUT_CLASSIFICATION	// Create the source and target JDOMs. //
WITHOUT_CLASSIFICATION	// Create a pattern dictionary for each. //
WITHOUT_CLASSIFICATION	//  We expect this failure when running stand-alone //
WITHOUT_CLASSIFICATION	// JControlModel.class is used with classNames that were not found //
WITHOUT_CLASSIFICATION	// Ignore the further-most javadoc //
WITHOUT_CLASSIFICATION	// retrieve source node corresponding to target //
WITHOUT_CLASSIFICATION	// convert the target node to a compatible node //
WITHOUT_CLASSIFICATION	// There must be at least one match. //
WITHOUT_CLASSIFICATION	// Ignore if there is not substantial change. //
WITHOUT_CLASSIFICATION	// Create the options model. //
WITHOUT_CLASSIFICATION	// Create a pattern dictionary for each. //
WITHOUT_CLASSIFICATION	// retrieve source node corresponding to target //
WITHOUT_CLASSIFICATION	// convert the target node to a compatible node //
WITHOUT_CLASSIFICATION	// Method created to increase the performance of regular expressions // by reducing the length of the string that is matched. //
WITHOUT_CLASSIFICATION	// Skip if there's an equality filter and the values aren't equal. //
WITHOUT_CLASSIFICATION	// The methods were matched by a process that doesn't consider the // parameters
WITHOUT_CLASSIFICATION	// Don't push method annotations into redirected methods. //
WITHOUT_CLASSIFICATION	// Three arguments are expected: the .xml getControlModel() URI, the source java URI, and the target java URI. //
WITHOUT_CLASSIFICATION	// Create the source and target JCompilationUnit. //
WITHOUT_CLASSIFICATION	// apply changes using ASTRewrite //
WITHOUT_CLASSIFICATION	// apply additional edits like replacing or commenting out nodes //
WITHOUT_CLASSIFICATION	// if the node is less than 1 line long, but its contents is replaced by multiple lines, // comment out each line in it
WITHOUT_CLASSIFICATION	// replace existing InsertEdit at this position // (case when previous node ends at the same position that current node starts at)
WITHOUT_CLASSIFICATION	// create and try to add dummy edit to find the ReplaceEdit // this should be faster than lookup since underneath of addChild() binary search is used
WITHOUT_CLASSIFICATION	// caching parser does not parse 2nd file in the same way (javadoc of package for example) // hence, new parser is created every time this method is called
WITHOUT_CLASSIFICATION	// adding 'at' allows distinguish annotations from other members // (i.e. inner class verses annotation of a class) //
WITHOUT_CLASSIFICATION	// find insertion point from returned result (-(insertion point) - 1) // commentIndex is the index of the first element with end position > rangeEndPos
WITHOUT_CLASSIFICATION	// find insertion point from returned result (-(insertion point) - 1) // commentIndex is an index of the first element that has start position > rangeStartPos 
WITHOUT_CLASSIFICATION	// extend to include the comment at the same line as the position  // if there is nothing between the position and the comment
WITHOUT_CLASSIFICATION	// there is anything else but comma after constant - insert line break
WITHOUT_CLASSIFICATION	// we don't want to include the line comments immediately before an import in the  // returned range
WITHOUT_CLASSIFICATION	// since enum constants are separated by commas, they should always have the default range // we can not extend their range or reduce it
WITHOUT_CLASSIFICATION	// check if given node should use the default range (i.e. node removed), // or extended range (i.e. surrounding nodes removed)
WITHOUT_CLASSIFICATION	// replace arguments that match the name of the fields with the initializer value of the field //
WITHOUT_CLASSIFICATION	// move all children to the type, converting enum constants to fields // // fields that are created by conversion from enum constants must be inserted after // the last final field that is used in constructors for initializers
WITHOUT_CLASSIFICATION	// Three arguments are expected: the .xml jControlModel URI, the source java URI, and the target java URI. //
WITHOUT_CLASSIFICATION	// Create the source and target JDOMs. //
WITHOUT_CLASSIFICATION	// indicate that initializer has been changed // (required to not overwrite initializer if variables are split later)
WITHOUT_CLASSIFICATION	// lower all except the last upper case character if there are // more than one upper case characters in the beginning. // e.g. XSDElementContent -> xsdElementContent // However if the whole string is upper case, the whole string // is turned into lower case. // e.g. CPU -> cpu
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Don't do replacement if we just did one, or if previous line // ended with a semicolon. //
WITHOUT_CLASSIFICATION	// Don't do replacement if previous line ended with a comment. //
WITHOUT_CLASSIFICATION	// If the path isn't within the root of the archive,  // create a new URI for the folder location of the archive,  // so we can look in the folder that contains it. //
WITHOUT_CLASSIFICATION	// Trim off the "bin" or "runtime" segment. //
WITHOUT_CLASSIFICATION	// Platform.resolve() doesn't work if the project is encoded. //
WITHOUT_CLASSIFICATION	// There needs to be another URL protocol right after the archive protocol, and not a "/". //
WITHOUT_CLASSIFICATION	// There must be at least one archive path. //
WITHOUT_CLASSIFICATION	// There must be at least one archive path. //
WITHOUT_CLASSIFICATION	// Parse to count the archive paths that must will be delegated to the nested URL based on the number of schemes at the start. //
WITHOUT_CLASSIFICATION	// There should be at least one archive separator per scheme. //
WITHOUT_CLASSIFICATION	// Parse to extract the archives that will be delegated to the nested URL based on the number of schemes at the start. //
WITHOUT_CLASSIFICATION	// Skip a scheme for the archive accessor to be handled directly here. //
WITHOUT_CLASSIFICATION	// Skip an archive accessor to be handled by delegation to the scheme in nested URL. //
WITHOUT_CLASSIFICATION	// Create the delegate URL. //
WITHOUT_CLASSIFICATION	// The cutoff point to the next archive. //
WITHOUT_CLASSIFICATION	// The cutoff point to the next archive. //
WITHOUT_CLASSIFICATION	// Construct the input stream in a special efficient way for case of a file scheme. //
WITHOUT_CLASSIFICATION	// Just get the stream from the URL. //
WITHOUT_CLASSIFICATION	// The name to be used for the entry. //
WITHOUT_CLASSIFICATION	// Skip over this archive path to the next one, since we are handling this one special. //
WITHOUT_CLASSIFICATION	// Loop over the archive paths. //
WITHOUT_CLASSIFICATION	// The entry name to be matched. //
WITHOUT_CLASSIFICATION	// Wrap the input stream as a zip stream to scan it's contents for a match. //
WITHOUT_CLASSIFICATION	// Skip to the next archive path and continue the loop. //
WITHOUT_CLASSIFICATION	// Create the delegate URL //
WITHOUT_CLASSIFICATION	// Create a temporary file where the existing contents of the archive can be written  // before the new contents are added. //
WITHOUT_CLASSIFICATION	// Record the input and output streams for closing in case of failure so that handles are not left open. //
WITHOUT_CLASSIFICATION	// Create the output stream to the temporary file and the input stream for the delegate URL. //
WITHOUT_CLASSIFICATION	// The most deeply nested output stream that will be returned wrapped as the result. //
WITHOUT_CLASSIFICATION	// A buffer for transferring archive contents. //
WITHOUT_CLASSIFICATION	// We expect there to be at least one archive path. //
WITHOUT_CLASSIFICATION	// The name that will be used as the archive entry. //
WITHOUT_CLASSIFICATION	// Wrap the current result as a zip stream, and record it for loop-based recursion. //
WITHOUT_CLASSIFICATION	// Wrap the current input as a zip stream, and record it for loop-based recursion. //
WITHOUT_CLASSIFICATION	// Loop over the entries in the zip stream. //
WITHOUT_CLASSIFICATION	// Transfer the entry and its contents. //
WITHOUT_CLASSIFICATION	// Find the next archive path and continue "recursively" if there is one. //
WITHOUT_CLASSIFICATION	// Create no entry since we are deleting and return immediately. //
WITHOUT_CLASSIFICATION	// Create a new or replaced entry and continue processing the remaining archives. //
WITHOUT_CLASSIFICATION	// Ensure that it won't be closed in the finally block. //
WITHOUT_CLASSIFICATION	// Wrap the deepest result so that on close, the results are finally transferred. //
WITHOUT_CLASSIFICATION	// Make sure we close only once. //
WITHOUT_CLASSIFICATION	// Close for real so that the temporary file is ready to be read. //
WITHOUT_CLASSIFICATION	// Make sure they are closed no matter what bad thing happens. //
WITHOUT_CLASSIFICATION	// Close in case of failure to complete. //
WITHOUT_CLASSIFICATION	// Close if we created this. //
WITHOUT_CLASSIFICATION	// Go through the commands of the list. //
WITHOUT_CLASSIFICATION	// If there are some... //
WITHOUT_CLASSIFICATION	// The termination guard is in the body. //
WITHOUT_CLASSIFICATION	// We can't undo it, so we'd better give up. //
WITHOUT_CLASSIFICATION	// Now is the best time to record isUndoable because later we would have to do all the executes again! // This makes canUndo very simple! //
WITHOUT_CLASSIFICATION	// If we can't execute this one, we just can't do it at all. //
WITHOUT_CLASSIFICATION	// If we are pessimistic, then we need to undo all the commands that we have executed so far. //
WITHOUT_CLASSIFICATION	// The most recently processed command will never have been executed. //
WITHOUT_CLASSIFICATION	// We want to unroll all the effects of the previous commands. //
WITHOUT_CLASSIFICATION	// Skip over the command that threw the exception. //
WITHOUT_CLASSIFICATION	// Iterate back over the executed commands to undo them. //
WITHOUT_CLASSIFICATION	// If the command is executable, record and execute it. //
WITHOUT_CLASSIFICATION	// Clear the list past the top. //
WITHOUT_CLASSIFICATION	// Record the successfully executed command. //
WITHOUT_CLASSIFICATION	// note that string place holder adjusts indentation // to correct this trackAndReplace method is used below
WITHOUT_CLASSIFICATION	// Iterate back over the executed commands to undo them. //
WITHOUT_CLASSIFICATION	// Clear the list past the top. //
WITHOUT_CLASSIFICATION	// This forces isSaveNeded to always be true. //
WITHOUT_CLASSIFICATION	// Clear the list. //
WITHOUT_CLASSIFICATION	//  Remember where we are now. //
WITHOUT_CLASSIFICATION	// Only if we are at the remembered index do we NOT need to save. // //return top != saveIndex;
WITHOUT_CLASSIFICATION	// Skip over the command that threw the exception. //
WITHOUT_CLASSIFICATION	// Skip over the command that threw the exception. //
WITHOUT_CLASSIFICATION	// Iterate back over the executed commands to undo them. //
WITHOUT_CLASSIFICATION	// Iterate forward over the undone commands to redo them. //
WITHOUT_CLASSIFICATION	// This ensures that these useless state variables at least reflect the right value. //
WITHOUT_CLASSIFICATION	// Copy to a list and allocate positions. //
WITHOUT_CLASSIFICATION	// Copy to a list and allocate positions. //
WITHOUT_CLASSIFICATION	// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
WITHOUT_CLASSIFICATION	// If any objects are matched. //
WITHOUT_CLASSIFICATION	// Remove from by position in reverse order. //
WITHOUT_CLASSIFICATION	// Remove from by position in reverse order. //
WITHOUT_CLASSIFICATION	// Compact the results to remove unmatched objects //
WITHOUT_CLASSIFICATION	// If any objects are matched. //
WITHOUT_CLASSIFICATION	// Remove from by position in reverse order. //
WITHOUT_CLASSIFICATION	// Compact the results to remove unmatched objects //
WITHOUT_CLASSIFICATION	// Create view form.     //control = new ViewForm(parent, getStyle());
WITHOUT_CLASSIFICATION	// Listen to title changes. // getViewPart().addPropertyListener(this);
WITHOUT_CLASSIFICATION	//titleLabel.setBackground(WorkbenchColors.getActiveGradient(), WorkbenchColors.getActiveGradientPercents()); // titleLabel.setForeground(titleLabel.getDisplay().getSystemColor(SWT.COLOR_TITLE_FOREGROUND));
WITHOUT_CLASSIFICATION	//actionBar.setBackground(WorkbenchColors.getActiveGradientEnd()); //systemBar.setBackground(WorkbenchColors.getActiveGradientEnd());
WITHOUT_CLASSIFICATION	//titleLabel.setBackground(null, null); // titleLabel.setForeground(null);
WITHOUT_CLASSIFICATION	// IViewPart view = getViewPart(); // titleLabel.setText(view.getTitle()); // titleLabel.setImage(view.getTitleImage());
WITHOUT_CLASSIFICATION	// If there are objects to populate... //
WITHOUT_CLASSIFICATION	// Create a new array. //
WITHOUT_CLASSIFICATION	// Fill in the result array with labels and re-populate the original list in order. //
WITHOUT_CLASSIFICATION	// Fill in the array with labels. //
WITHOUT_CLASSIFICATION	// Get the index into the list via this call to super. //
WITHOUT_CLASSIFICATION	// Set the index of the object value in the list via this call to super. //
WITHOUT_CLASSIFICATION	// Ensure there are no extraneous style bits. //
WITHOUT_CLASSIFICATION	// Assign default style bits, if necessary, and ensure none conflict. //
WITHOUT_CLASSIFICATION	// Paint over the selected padding spaces with the // background colour.  On GTK, the whole item, not just // the text, is selected, so we don't do this. //
WITHOUT_CLASSIFICATION	// On Motif, selection color may be set as background. //
WITHOUT_CLASSIFICATION	// Draw the extra first-column image. //
WITHOUT_CLASSIFICATION	// Stop if the next item will be out the event bounds. // The event bounds values are also misaligned on GTK. //
WITHOUT_CLASSIFICATION	// If the table is indenting, draw tree lines. //
WITHOUT_CLASSIFICATION	//private final boolean iri; //private URI cachedASCIIURI;
WITHOUT_CLASSIFICATION	// Additional useful character classes, including characters valid in certain // URI components and separators used in parsing them out of a string.  // // | ucschar | escaped
WITHOUT_CLASSIFICATION	//  private static final long SCHEME_CHAR_HI = ALPHANUM_HI | highBitmask("+-."); //  private static final long SCHEME_CHAR_LO = ALPHANUM_LO | lowBitmask("+-.");
WITHOUT_CLASSIFICATION	// Returns the lower half bitmask for all ASCII characters between the two // given characters, inclusive.
WITHOUT_CLASSIFICATION	// Returns the upper half bitmask for all AsCII characters between the two // given characters, inclusive.
WITHOUT_CLASSIFICATION	// Returns the lower half bitmask for all the ASCII characters in the given // string.
WITHOUT_CLASSIFICATION	// Returns whether the given character is in the set specified by the given // bitmask.
WITHOUT_CLASSIFICATION	// Converts null to length-zero array, and clones array to ensure // immutability.
WITHOUT_CLASSIFICATION	// Checks whether the string contains any more segments after the one that // starts at position i.
WITHOUT_CLASSIFICATION	// Validates all of the URI components.  Factory methods should call this // before using the constructor, though they must ensure that the // inter-component requirements described in their own Javadocs are all // satisfied, themselves.  If a new URI is being constructed out of // an existing URI, this need not be called.  Instead, just the new // components may be validated individually.
WITHOUT_CLASSIFICATION	// Alternate, stricter implementations of the following validation methods // are provided, commented out, for possible future use...
WITHOUT_CLASSIFICATION	// <p>A valid scheme may be null, or consist of a single letter followed // by any number of letters, numbers, and the following characters: // <code>+ - .</code>
WITHOUT_CLASSIFICATION	// <p>A valid opaque part must be non-null and non-empty. It may contain // any allowed URI characters, but its first character may not be // <code>/</code> 
WITHOUT_CLASSIFICATION	//return value != null && value.length() != 0 && //  value.charAt(0) != SEGMENT_SEPARATOR && //  validate(value, URIC_HI, URIC_LO, true, true);
WITHOUT_CLASSIFICATION	// A valid authority may be null or contain any allowed URI characters except // for the following: <code>/ ?</code>
WITHOUT_CLASSIFICATION	// <p>A valid path segment must be non-null and may contain any allowed URI // characters except for the following: <code>/ ?</code> 
WITHOUT_CLASSIFICATION	// Returns null if the specified value is null or would be a valid path // segment array of a URI; otherwise, the value of the first invalid // segment. 
WITHOUT_CLASSIFICATION	// Searches the specified string for any characters in the set represented // by the 128-bit bitmask.  Returns true if any occur, or false otherwise.
WITHOUT_CLASSIFICATION	// note: (absolutePath || authority == null) -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
WITHOUT_CLASSIFICATION	// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
WITHOUT_CLASSIFICATION	// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
WITHOUT_CLASSIFICATION	// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
WITHOUT_CLASSIFICATION	// Returns true if the given value is an archive scheme, as defined by // the org.eclipse.emf.common.util.URI.archiveSchemes system property. // By default, "jar", "zip", and "archive" are considered archives.
WITHOUT_CLASSIFICATION	// Tests whether this URI's path segment array is equal to that of the // given uri.
WITHOUT_CLASSIFICATION	// Tests two objects for equality, tolerating nulls; null is considered // to be a valid value that is only equal to itself.
WITHOUT_CLASSIFICATION	// Tests two strings for equality, tolerating nulls and optionally // ignoring case.
WITHOUT_CLASSIFICATION	// note: it's okay for two URIs to share a segments array, since // neither will ever modify it
WITHOUT_CLASSIFICATION	// relative path: merge with base and keep query (note: if the // base has no path and this a non-empty relative path, there is // an implied root in the resulting path) 
WITHOUT_CLASSIFICATION	// always keep fragment, even if null, and use scheme from base; // no validation needed since all components are from existing URIs
WITHOUT_CLASSIFICATION	// use a stack to accumulate segments of base, except for the last // (i.e. skip trailing separator and anything following it), and of // relative path
WITHOUT_CLASSIFICATION	// Adds a segment to a stack, skipping empty segments and self references, // and interpreting parent references.
WITHOUT_CLASSIFICATION	// special care must be taken for a root's parent reference: it is // either ignored or the symbolic reference itself is pushed
WITHOUT_CLASSIFICATION	// unless we're already accumulating root parent references, // parent references simply pop the last segment descended
WITHOUT_CLASSIFICATION	// note: these assertions imply that neither this nor the base URI has a // relative path; thus, both have either an absolute path or no path
WITHOUT_CLASSIFICATION	// Returns the shortest relative path between the the non-relative path of // the given base and this absolute path.  If the base has no path, it is // treated as the root absolute path.
WITHOUT_CLASSIFICATION	// note that the copied tree should not be modified by wrapped ASTJField // // the copied tree will have source ranges for all nodes in the source file, // hence, the get methods in the new ASTJField will not return the right contents
WITHOUT_CLASSIFICATION	// a single separator, possibly preceded by some parent reference // segments, is redundant
WITHOUT_CLASSIFICATION	// an empty path needs to be replaced by a single "." if there is no // query, to distinguish it from a current document reference
WITHOUT_CLASSIFICATION	// Collapses non-ending empty segments, parent references, and self // references in a non-relative path, returning the same path that would // be produced from the base hierarchical URI as part of a resolve.
WITHOUT_CLASSIFICATION	// if the path is non-empty and originally ended in an empty segment, a // parent reference, or a self reference, add a trailing separator
WITHOUT_CLASSIFICATION	// Returns a string representation of this URI for debugging, explicitly // showing each of the components.
WITHOUT_CLASSIFICATION	// If the new prefix has segments, it is not the root absolute path, // and we need to drop the trailing empty segment and append the tail // segments.
WITHOUT_CLASSIFICATION	// If this is a hierarchical URI reference and prefix is a prefix of it, // returns the portion of the path remaining after that prefix has been // trimmed; null otherwise.
WITHOUT_CLASSIFICATION	// Don't even consider it unless this is hierarchical and has scheme, // authority, device and path absoluteness equal to those of the prefix.
WITHOUT_CLASSIFICATION	// If the prefix has no segments, then it is the root absolute path, and // we know this is an absolute path, too.
WITHOUT_CLASSIFICATION	// This must have no fewer segments than the prefix.  Since the prefix // is not the root absolute path, its last segment is empty; all others // must match.
WITHOUT_CLASSIFICATION	// create new field and replace it all by original contents
WITHOUT_CLASSIFICATION	// The prefix really is a prefix of this.  If this has just one more, // empty segment, the paths are the same.
WITHOUT_CLASSIFICATION	// Encodes a complete URI, optionally leaving % characters unescaped when // beginning a valid three-character escape sequence.  We can either treat // the first or # as a fragment separator, or encode them all.
WITHOUT_CLASSIFICATION	// range to look for comments
WITHOUT_CLASSIFICATION	// Encodes the given string, replacing each ASCII character that is not in // the set specified by the 128-bit bitmask and each non-ASCII character // below 0xA0 by an escape sequence of % followed by two hex digits.  If // % is not in the set but ignoreEscaped is true, then % will not be encoded // iff it already begins a valid escape sequence.
WITHOUT_CLASSIFICATION	// Tests whether an escape occurs in the given string, starting at index i. // An escape sequence is a % followed by two hex digits.
WITHOUT_CLASSIFICATION	// find start position of farthest preceding comment
WITHOUT_CLASSIFICATION	// The byte is automatically widened into an int, with sign extension, // for shifting.  This can introduce 1's to the left of the byte, which // must be cleared by masking before looking up the hex digit. //
WITHOUT_CLASSIFICATION	// Returns the character encoded by % followed by the two given hex digits, // which is always 0xFF or less, so can safely be casted to a byte.  If // either character is not a hex digit, a bogus result will be returned.
WITHOUT_CLASSIFICATION	// Determine the base URL by looking for the plugin.properties file in the standard way. //
WITHOUT_CLASSIFICATION	// add leading hanging comments to the previous node, // hence, only comments immediately preceding the node will be in the range for removal
WITHOUT_CLASSIFICATION	// for enum constants use special range
WITHOUT_CLASSIFICATION	//  /** //   * Simpler implementation that sets the range of any node to be the node and all preceding comments //   */ //  public SourceRange computeSourceRange(ASTNode node) //  { //    SourceRange range = new SourceRange(node.getStartPosition(), node.getLength()); // //    range = extendRangeBackward(findLeadingComment(node, getPreviousNode(node), false), range); // //    return range; //  }
WITHOUT_CLASSIFICATION	// default implementation does nothing
WITHOUT_CLASSIFICATION	// clear old values
WITHOUT_CLASSIFICATION	// Trim off the segments corresponding to the package nesting. //
WITHOUT_CLASSIFICATION	// For an archive URI, check for the plugin.properties in the archive. //
WITHOUT_CLASSIFICATION	// append extra dimensions since they are not stored in Type object
WITHOUT_CLASSIFICATION	// Trim off the "bin" or "runtime" segment. //
WITHOUT_CLASSIFICATION	// If the plugin.properties isn't within the root of the archive, // create a new URI for the folder location of the archive, // so we can look in the folder that contains it. //
WITHOUT_CLASSIFICATION	// If we didn't find the plugin.properties in the usual place nor in the archive... //
WITHOUT_CLASSIFICATION	// If we can open  an input stream, then the plugin.properties is in the folder, and we have a good base URL. //
WITHOUT_CLASSIFICATION	// If we still don't have a good base URL, complain about it. //
WITHOUT_CLASSIFICATION	// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext.
WITHOUT_CLASSIFICATION	// If we are still on the root mapping itself... //
WITHOUT_CLASSIFICATION	// Yield that mapping, create a stack, record it as the next one to prune, and add it to the stack. //
WITHOUT_CLASSIFICATION	// Get the top iterator, retrieve it's result, and record it as the one to which remove will be delegated. //
WITHOUT_CLASSIFICATION	// If the result about to be returned has children... //
WITHOUT_CLASSIFICATION	// Record the iterator as the next one to prune, and add it to the stack. //
WITHOUT_CLASSIFICATION	// There will be no iterator to prune. //
WITHOUT_CLASSIFICATION	// While the current iterator has no next... //
WITHOUT_CLASSIFICATION	// Pop it from the stack. //
WITHOUT_CLASSIFICATION	// If the stack is empty, we're done. //
WITHOUT_CLASSIFICATION	// if the given class is subclass of enum and node is of subclass of type
WITHOUT_CLASSIFICATION	// Pop it off the stack. //
WITHOUT_CLASSIFICATION	// Get the next one down and then test it for has next. //
WITHOUT_CLASSIFICATION	// If there is an iterator to prune. //
WITHOUT_CLASSIFICATION	// You can only prune once. //
WITHOUT_CLASSIFICATION	// If that iterator is still at the top of the stack... //
WITHOUT_CLASSIFICATION	// Allow for a bit-shift of growth. //
WITHOUT_CLASSIFICATION	// Keep popping the stack until an iterator that has a next is at the top. //
WITHOUT_CLASSIFICATION	// Conditionally create the data. //
WITHOUT_CLASSIFICATION	//  ++modCount //
WITHOUT_CLASSIFICATION	// Guard for no data. //
WITHOUT_CLASSIFICATION	// Guard for no data. //
WITHOUT_CLASSIFICATION	// ++modCount //
WITHOUT_CLASSIFICATION	// ++modCount //
WITHOUT_CLASSIFICATION	// Conditionally create the data. //
WITHOUT_CLASSIFICATION	// ++modCount //
WITHOUT_CLASSIFICATION	// Don't hold onto a duplicate reference to the last object. //
WITHOUT_CLASSIFICATION	// Give it all back to the garbage collector. //
WITHOUT_CLASSIFICATION	// Give it all back to the garbage collector. //
WITHOUT_CLASSIFICATION	// Write the capacity. //
WITHOUT_CLASSIFICATION	// create map of public static final field initializers to fields
WITHOUT_CLASSIFICATION	// This seems to be a pretty sweet formula that supports good growth. // Adding an object to a list will create a list of capacity 4,  // which is just about the average list size. //
WITHOUT_CLASSIFICATION	// This should be transparent. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Write all the entryData; there will be size of them. //
WITHOUT_CLASSIFICATION	// Restore the capacity, if there was any. //
WITHOUT_CLASSIFICATION	// Read all size number of entryData. //
WITHOUT_CLASSIFICATION	//0000 0000 0001 //0000 0000 0010 //0000 0000 0100 //0000 0000 1000 //0001 0000 0000 //0010 0000 0000 //0100 0000 0000 //1000 0000 0000
WITHOUT_CLASSIFICATION	//0000 0000 1111 //1111 0000 0000
WITHOUT_CLASSIFICATION	// This just represents going back to the unset state, but that doesn't affect the contents of the list. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// add all converted fields after the last final field  // that is used in initializers of the converted fields
WITHOUT_CLASSIFICATION	// Internal bootstrap uses Literals constants, so we must force initialization this inner interface first. //
WITHOUT_CLASSIFICATION	// Open an editor on the new file. //
WITHOUT_CLASSIFICATION	// create field initializer from enum constant's arguments and body
WITHOUT_CLASSIFICATION	// Apply the change. //
WITHOUT_CLASSIFICATION	// Delete the change information because it is invalid now that the objects have been changed. //
WITHOUT_CLASSIFICATION	// Apply the change and reverse the change information. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// set original node of annotations (to allow get methods to work correctly)
WITHOUT_CLASSIFICATION	// The next line leaves objectsBeforeApply with all the objects that were // added during the last recording.
WITHOUT_CLASSIFICATION	// Reverse the objects to attach and detach lists. //
WITHOUT_CLASSIFICATION	// Make sure the changed values of bidirectional reference lists are cached before we //  start to apply the change. //
WITHOUT_CLASSIFICATION	// This case will be handled special during apply //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// New Template Container Entryfield
WITHOUT_CLASSIFICATION	// If there's no position, the list is being cleared. //
WITHOUT_CLASSIFICATION	// If there's no position, the list is being cleared. //
WITHOUT_CLASSIFICATION	// EEnumImpl overrides this to do nothing. // The only case that is special is when a more specific instance of AbstractEnumerator is generated/reused. //
WITHOUT_CLASSIFICATION	// When we attached we have to recompute the erasure of the type parameter. //
WITHOUT_CLASSIFICATION	// Interprets escaped characters within the string according to Java // literal rules, with two exceptions: an unescaped " does not terminate // the string, and a \ not followed by b, t, n, f, r, ", ', u, or an octal // digit is taken literally, not as an error
WITHOUT_CLASSIFICATION	// Create annotations // http:///org/eclipse/emf/ecore/util/ExtendedMetaData
WITHOUT_CLASSIFICATION	// This is needed for internal bootstrapping of EGenericType's default value for eRawType. // It's simply not available before Ecore is constructed so we make it available and then patch what's missing. //
WITHOUT_CLASSIFICATION	// Create a key set that supports add. //
WITHOUT_CLASSIFICATION	// Skip derived features. //
WITHOUT_CLASSIFICATION	// Include derived relations only if they won't also come from mixed or a group. //
WITHOUT_CLASSIFICATION	// If this is just a proxy being resolved... //
WITHOUT_CLASSIFICATION	// Force the raw type to be resolved so we don't resolve this endlessly. //
WITHOUT_CLASSIFICATION	// Update the classifier and hence the raw type as normal. //
WITHOUT_CLASSIFICATION	// The notification for this list is being thrown by the // delegating list //
WITHOUT_CLASSIFICATION	// At development time, the real factory may not be available. Just return null. //
WITHOUT_CLASSIFICATION	// Interprets escaped characters according to Java literal rules, with one // exception: a single \ is taken literally, not as an error.
WITHOUT_CLASSIFICATION	// protected static final EStructuralFeature CONTAINING_FEATURE = new EReferenceImpl(); // protected static final EStructuralFeature CONTAINER = new EReferenceImpl();
WITHOUT_CLASSIFICATION	// Entry entry = new Entry(eObject, CONTAINER); // return (InternalEObject)map.get(entry);
WITHOUT_CLASSIFICATION	// This should never be called. //
WITHOUT_CLASSIFICATION	// Entry entry = new Entry(eObject, CONTAINING_FEATURE); // return (EStructuralFeature)map.get(entry);
WITHOUT_CLASSIFICATION	// eContainer = newContainer; // eContainerFeatureID = newContainerFeatureID;
WITHOUT_CLASSIFICATION	// Since the cycle is detected by checking if we hit "this" again, after many iterations we'll call this method recursively  // in case we started with something that wasn't part of a cycle but later traversed up to a cycle. //
WITHOUT_CLASSIFICATION	// When setting the resource to null we assume that detach has already been called in the resource implementation //
WITHOUT_CLASSIFICATION	/**   * Performs escape encoding on the given string so that it can be represented using 1-byte characters.   * Any characters higher than 0xFF are replaced with an escape of the form \\uXXXX, where XXXX is the   * four-digit hex representation of the Unicode code point.   */
WITHOUT_CLASSIFICATION	// Compute the offset in the sequence of bit patterns for this feature ID // and then get the bit pattern at that index. //
WITHOUT_CLASSIFICATION	// Compute the index within that bit pattern for this feature ID // and fetch that bit at that index. //
WITHOUT_CLASSIFICATION	// For isSet, we only need to check the bit and return -1 when the bit is 0. //
WITHOUT_CLASSIFICATION	// If the value index set, there's no index to return. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Count just the bits up to this one. // Note that shifting 32 bits is a no op. //
WITHOUT_CLASSIFICATION	// Count all the bits in the bit patterns up to this one in the sequence of bit patterns. //
WITHOUT_CLASSIFICATION	// Determine the index for the feature and return the value at that index, if an index is assigned. //
WITHOUT_CLASSIFICATION	// Determine if an index is assigned. //
WITHOUT_CLASSIFICATION	// Determine the index. //
WITHOUT_CLASSIFICATION	// If it's newly allocated, add a new value, and indicate there was no previous value. //
WITHOUT_CLASSIFICATION	// Set the value at the previously allocated index and return the previous value there. //
WITHOUT_CLASSIFICATION	// Forward the interned value. //
WITHOUT_CLASSIFICATION	// If it's a parameterized type... //
WITHOUT_CLASSIFICATION	// The instance class name is the erasure. //
WITHOUT_CLASSIFICATION	// If the name isn't a qualified name and isn't a primitive type, it's assumed to denote some arbitrary type parameter. //
WITHOUT_CLASSIFICATION	// Be sure to pick up any trailing [] brackets. //
WITHOUT_CLASSIFICATION	// If there is a cached result, return it. // We expect that if the package is set to be a proxy,  // the code in EPackageImpl.eSetProxyURI override will have cleared this value. //
WITHOUT_CLASSIFICATION	// If the result is not a proxy, cache it. //
WITHOUT_CLASSIFICATION	// If we turn the package into a proxy, ensure that the child classifiers clear their cached container. //
WITHOUT_CLASSIFICATION	// Is the first character a special character, i.e., something other than '@'? //
WITHOUT_CLASSIFICATION	// Is it the start of a source URI of an annotation? //
WITHOUT_CLASSIFICATION	// Recompute the read only state. //
WITHOUT_CLASSIFICATION	// Refresh any actions that may become enabled or disabled. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// If this is just a proxy being resolved... //
WITHOUT_CLASSIFICATION	// Force the raw type to be resolved so we don't resolve this endlessly. //
WITHOUT_CLASSIFICATION	// Update the classifier and hence the raw type as normal. //
WITHOUT_CLASSIFICATION	// Find the closing '%' //
WITHOUT_CLASSIFICATION	// Decode all encoded characters. //
WITHOUT_CLASSIFICATION	// Check for a count, i.e., a '.' followed by a number. //
WITHOUT_CLASSIFICATION	// Look for the annotation with the matching source. //
WITHOUT_CLASSIFICATION	// Look for trailing count. //
WITHOUT_CLASSIFICATION	// Look for a matching named element. //
WITHOUT_CLASSIFICATION	// Find the uppermost class loader in the hierarchy that can load the class. //
WITHOUT_CLASSIFICATION	// We can't find the class, so we don't want this class loader, // but instead want the last result that was able to load the class. //
WITHOUT_CLASSIFICATION	// Register with the upper most class loader that's able to load the class. //
WITHOUT_CLASSIFICATION	// This let's us test whether the string exists as a file. // If not, we try as a URI. //
WITHOUT_CLASSIFICATION	// First try to see if this class has an eInstance  //
WITHOUT_CLASSIFICATION	// First try to see if this class has an eInstance  //
WITHOUT_CLASSIFICATION	// Remember the file. //
WITHOUT_CLASSIFICATION	// Do the work within an operation. //
WITHOUT_CLASSIFICATION	// Create a resource set //
WITHOUT_CLASSIFICATION	// Get the URI of the model file. //
WITHOUT_CLASSIFICATION	// Create a resource for this file. //
WITHOUT_CLASSIFICATION	// Add the initial model object to the contents. //
WITHOUT_CLASSIFICATION	// Save the contents of the resource to the file system. //
WITHOUT_CLASSIFICATION	// Select the new file resource in the current view. //
WITHOUT_CLASSIFICATION	// Make sure the file ends in ".ecore". //
WITHOUT_CLASSIFICATION	// Create a page, set the title, and the initial model file name. //
WITHOUT_CLASSIFICATION	// Try and get the resource selection to determine a current directory for the file dialog. //
WITHOUT_CLASSIFICATION	// Get the resource... //
WITHOUT_CLASSIFICATION	// Get the resource parent, if its a file. //
WITHOUT_CLASSIFICATION	// This gives us a directory... //
WITHOUT_CLASSIFICATION	// Set this for the container. //
WITHOUT_CLASSIFICATION	// Make up a unique new name here. //
WITHOUT_CLASSIFICATION	// Create an adapter factory that yields item providers. //
WITHOUT_CLASSIFICATION	// Create the command stack that will notify this editor as commands are executed. //
WITHOUT_CLASSIFICATION	// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus. //
WITHOUT_CLASSIFICATION	// Try to select the affected objects. //
WITHOUT_CLASSIFICATION	// Create the editing domain with a special command stack. //
WITHOUT_CLASSIFICATION	// Make sure it's okay. //
WITHOUT_CLASSIFICATION	// Try to select the items in the current content viewer of the editor. //
WITHOUT_CLASSIFICATION	// If it is changing... //
WITHOUT_CLASSIFICATION	// Create the listener on demand. //
WITHOUT_CLASSIFICATION	// This just notifies those things that are affected by the section. //
WITHOUT_CLASSIFICATION	// Stop listening to the old one. //
WITHOUT_CLASSIFICATION	// Start listening to the new one. //
WITHOUT_CLASSIFICATION	// Remember it. //
WITHOUT_CLASSIFICATION	// Set the editors selection based on the current viewer's selection. //
WITHOUT_CLASSIFICATION	// Load the resource through the editing domain. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Create a page for the selection tree view. //
WITHOUT_CLASSIFICATION	// Ensures that this editor will only display the page's tab // area if there are more than one page //
WITHOUT_CLASSIFICATION	// The content outline is just a tree. //
WITHOUT_CLASSIFICATION	// Set up the tree viewer. //
WITHOUT_CLASSIFICATION	// Make sure our popups work. //
WITHOUT_CLASSIFICATION	// Select the root object in the view. //
WITHOUT_CLASSIFICATION	// Listen to selection so that we can handle it is a special way. //
WITHOUT_CLASSIFICATION	// Get the first selected element. //
WITHOUT_CLASSIFICATION	// Set the selection to the widget. //
WITHOUT_CLASSIFICATION	// Save only resources that have actually changed. //
WITHOUT_CLASSIFICATION	// This is the method that gets invoked when the operation runs. //
WITHOUT_CLASSIFICATION	// Save the resources to the file system. //
WITHOUT_CLASSIFICATION	// This runs the options, and shows progress. //
WITHOUT_CLASSIFICATION	// Refresh the necessary state. //
WITHOUT_CLASSIFICATION	// Something went wrong that shouldn't. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Remember the file. //
WITHOUT_CLASSIFICATION	// Do the work within an operation. //
WITHOUT_CLASSIFICATION	// Create a resource set //
WITHOUT_CLASSIFICATION	// Get the URI of the model file. //
WITHOUT_CLASSIFICATION	// Save the contents of the resource to the file system. //
WITHOUT_CLASSIFICATION	// Select the new file resource in the current view. //
WITHOUT_CLASSIFICATION	// We can't have a null name, in case we're using EMOF serialization. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Switch to the new selection provider. //
WITHOUT_CLASSIFICATION	// Fake a selection changed event to update the menus. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Try and get the resource selection to determine a current directory for the file dialog. //
WITHOUT_CLASSIFICATION	// Get the resource... //
WITHOUT_CLASSIFICATION	// Get the resource parent, if its a file. //
WITHOUT_CLASSIFICATION	// This gives us a directory... //
WITHOUT_CLASSIFICATION	// Make up a unique new name here. //
WITHOUT_CLASSIFICATION	// Prepare for CreateChild item addition or removal. //
WITHOUT_CLASSIFICATION	// Prepare for CreateSibling item addition or removal. //
WITHOUT_CLASSIFICATION	// Force an update because Eclipse hides empty menus now. //
WITHOUT_CLASSIFICATION	// Remove any menu items for old selection. //
WITHOUT_CLASSIFICATION	// Query the new selection for appropriate new child/sibling descriptors //
WITHOUT_CLASSIFICATION	// Generate actions for selection; populate and redraw the menus. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Look into SubContributionItems //
WITHOUT_CLASSIFICATION	// Delete the ActionContributionItems with matching action. //
WITHOUT_CLASSIFICATION	// If it's really a contained child, return the feature for it. //
WITHOUT_CLASSIFICATION	// Changes to the parameters should also update the label. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// If it's really a contained child, return the feature for it. //
WITHOUT_CLASSIFICATION	// Set the instance type name instead, since that will also set the instance class name  // but this way will make undo restore the current instance type name correctly //
WITHOUT_CLASSIFICATION	// Changes to parameter types should also update the operation's label. //
WITHOUT_CLASSIFICATION	// Filter out types that aren't permitted. //
WITHOUT_CLASSIFICATION	// Filter out types that aren't permitted. //
WITHOUT_CLASSIFICATION	// Avoid allowing choices that will lead to duplicates. //
WITHOUT_CLASSIFICATION	//  Avoid allowing a choice that will lead to duplicates. //
WITHOUT_CLASSIFICATION	// Ensure that there are enough type arguments to match the number of type parameters. //
WITHOUT_CLASSIFICATION	// You can only add type arguments if there are type parameters not yet used up. //
WITHOUT_CLASSIFICATION	// You cannot add any children for a type parameter. //
WITHOUT_CLASSIFICATION	// Only if you are contained by a generic type can you have bounds, // and only if there is no classifier or type parameter // and in that case the lower bound is returned only if that's the one that's set. //
WITHOUT_CLASSIFICATION	// Otherwise you can't make it a child. //
WITHOUT_CLASSIFICATION	// Let them choose type parameters as well. //
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Handle eOpposite specially. //
WITHOUT_CLASSIFICATION	// Don't use the normal reference copying for eOpposite. //
WITHOUT_CLASSIFICATION	// Write a signature that will be obviously corrupt // if the binary contents end up being UTF-8 encoded // or altered by line feed or carriage return changes. //
WITHOUT_CLASSIFICATION	// Filter out classes that aren't permitted. //
WITHOUT_CLASSIFICATION	// Read all the values into an array. //
WITHOUT_CLASSIFICATION	// Read all the values into an array. //
WITHOUT_CLASSIFICATION	// If the list is empty, we need to add all the objects, // otherwise, the reference is bidirectional and the list is at least partially populated. //
WITHOUT_CLASSIFICATION	// If an input stream can't be created, ensure that the resource is still considered loaded after the failure, // and do all the same processing we'd do if we actually were able to create a valid input stream. //
WITHOUT_CLASSIFICATION	// This guard is needed to ensure that clear doesn't make the resource become loaded. //
WITHOUT_CLASSIFICATION	// If we haven't yet encrypted or decrypted, generate a key. This key will  // only be used for encryption. Decryption keys are always derived from // the header of the input stream itself.
WITHOUT_CLASSIFICATION	// write the header to the output stream. this has the format  // (delimeters are not written): // PBE IV|ENCRYPTION IV|ENCRYPTED KEY LENGTH|ENCRYPTED KEY
WITHOUT_CLASSIFICATION	// The CipherOutputStream shoudln't close the underlying stream //
WITHOUT_CLASSIFICATION	// Build a list of the keys //
WITHOUT_CLASSIFICATION	// The classifier of an references's generic type must be a class. //
WITHOUT_CLASSIFICATION	// If they are the same classifier, they are of course equal. //
WITHOUT_CLASSIFICATION	// Ignore derived features. //
WITHOUT_CLASSIFICATION	// Don't set the type if it's already set. //
WITHOUT_CLASSIFICATION	// Look through all the references... //
WITHOUT_CLASSIFICATION	// Do the extent processing that should have been done for the root but was actualljy done for the document root. //
WITHOUT_CLASSIFICATION	// Ensure that the map for Ecore is not repeatedly populated and that Property maps to EReference rather than EAttribute. //
WITHOUT_CLASSIFICATION	// Create annotations // http:///org/eclipse/emf/ecore/util/ExtendedMetaData
WITHOUT_CLASSIFICATION	// Internal use only. // The @ always matches line beginnings.
WITHOUT_CLASSIFICATION	// Reserve a place to insert xmlns declarations after we know what they all are. //
WITHOUT_CLASSIFICATION	// result = new XMLResource.XMLInfoImpl(); // result.setXMLRepresentation(XMLResource.XMLInfo.UNSPECIFIED);
WITHOUT_CLASSIFICATION	// Need not to call setSource() because // a caller can not access this match instance.
WITHOUT_CLASSIFICATION	// src:    o--------o // sub:      o----o // res:    o-o    o-o // Reuse src(=right res)
WITHOUT_CLASSIFICATION	// Ignore CHAR tokens. // ** // **
WITHOUT_CLASSIFICATION	//missing Specials add manually // 84
WITHOUT_CLASSIFICATION	//Check if they are PAD characters //Two PAD e.g. 3c[Pad][Pad] //last 4 bits should be zero
WITHOUT_CLASSIFICATION	// Path segments cannot contain '[' or ']' since pchar // production was not changed by RFC 2732.
WITHOUT_CLASSIFICATION	// // Data //
WITHOUT_CLASSIFICATION	// Check for scheme, which must be before '/', '?' or '#'. Also handle // names with DOS drive letters ('D:'), so 1-character schemes are not // allowed.
WITHOUT_CLASSIFICATION	// Check for scheme, which must be before '/', '?' or '#'. Also handle // names with DOS drive letters ('D:'), so 1-character schemes are not // allowed.
WITHOUT_CLASSIFICATION	// 6e - remove all "<segment>/../" where "<segment>" is a complete // path segment not equal to ".."
WITHOUT_CLASSIFICATION	// If the second character wasn't ':', in order to be valid, // the remainder of the string must match IPv4Address,  // and we must have read exactly 6 16-bit groups.
WITHOUT_CLASSIFICATION	// userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 49 // Fill 26 of value (byte) -3 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Trying to match the following productions: // hexseq = hex4 *( ":" hex4) // hex4   = 1*4HEXDIG
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Check whether there is an opposite that needs attention. //
WITHOUT_CLASSIFICATION	// Return whether there is a list, the value is in the list, and index is in range... //
WITHOUT_CLASSIFICATION	// If we're creating a child under an object in a feature map, the selection will be the feature map entry. // We want to replace it with the model object. //
WITHOUT_CLASSIFICATION	// If there isn't an executable command we should maybe try a link operation, but only if we're allowed and not doing a link. //
WITHOUT_CLASSIFICATION	// Only return the feedback for an executable command. //
WITHOUT_CLASSIFICATION	// No image is a good default. //
WITHOUT_CLASSIFICATION	// Add it to the list and remove it from the other list. //
WITHOUT_CLASSIFICATION	// Commands should operate on the values, not their wrappers.  If the command's values needed to be unwrapped, // we'll back get a new CommandParameter. //
WITHOUT_CLASSIFICATION	// When an object is controlled, the only change will be in the new resource's contents, so it must // refresh the whole viewer to hit the object's label. //
WITHOUT_CLASSIFICATION	// Record the part. //
WITHOUT_CLASSIFICATION	// give up if we couldn't create the command; otherwise, use a // CommandActionDelegate to set the action's text, tool-tip, icon, // etc. or just use the default icon
WITHOUT_CLASSIFICATION	// This came from trial and error, yielding decent results on all // platforms.  It should be consistent with activate(). //
WITHOUT_CLASSIFICATION	// If we don't already have it, try to get the source early. We can't give // feedback if it's not available yet (this is platform-dependent). //
WITHOUT_CLASSIFICATION	// Load the model and if it's not one already considered, e.g., a local version in the workspace, process its GenPackages. //
WITHOUT_CLASSIFICATION	// If we've found thing with type parameters, search them for a match. //
WITHOUT_CLASSIFICATION	// process documentation info and create eEnumLiteral for each line //
WITHOUT_CLASSIFICATION	// This just notifies those things that are affected by the section. //
WITHOUT_CLASSIFICATION	// Creates the model from the editor input //
WITHOUT_CLASSIFICATION	// This is the method that gets invoked when the operation runs. //
WITHOUT_CLASSIFICATION	// Generate actions for selection; populate and redraw the menus. //
WITHOUT_CLASSIFICATION	// this is the case that starting process rose file by passing cat file name // this is a special case. // normally, user should pass mdl file instead of cat file //  // file is a cat file // modelTree did contain quid info
WITHOUT_CLASSIFICATION	// Create a page for the parent tree view. //
WITHOUT_CLASSIFICATION	// Make sure it's okay. //
WITHOUT_CLASSIFICATION	// We either remove the root mapping or we use the iterator that returned the most recent next mapping. //
WITHOUT_CLASSIFICATION	// Cache the tree path for each object. //
WITHOUT_CLASSIFICATION	// Set the editor's selection based on the current viewer's selection. //
WITHOUT_CLASSIFICATION	// The helper part assumes that the summary is likely based on the helper and will change when the helper is set. //
WITHOUT_CLASSIFICATION	// This is the method that gets invoked when the operation runs. //
WITHOUT_CLASSIFICATION	// This is for the out2in feature. //
WITHOUT_CLASSIFICATION	// This is for the topDown feature. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// There needs to be another URL protocol right after the archive protocol, and not a "/". //
WITHOUT_CLASSIFICATION	// Go directly to the right entry in the zip file,  // get the stream,  // and wrap it so that closing it closes the zip file. //
WITHOUT_CLASSIFICATION	// Record them as generic streams to record state during the loop that emulates recursion. //
WITHOUT_CLASSIFICATION	// If this entry isn't the end marker  // and isn't the matching one that we are replacing... //
WITHOUT_CLASSIFICATION	// Try to transfer it by reading the contents of the temporary file  // and writing them to the output stream of the delegate. //
WITHOUT_CLASSIFICATION	// Either execute or redo the command, as appropriate. //
WITHOUT_CLASSIFICATION	// Skip over the command that threw the exception. //
WITHOUT_CLASSIFICATION	// This is kind of tricky. // If the saveIndex was in the redo part of the command list which has now been wiped out, // then we can never reach a point where a save is not necessary, not even if we undo all the way back to the beginning. //
WITHOUT_CLASSIFICATION	// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
WITHOUT_CLASSIFICATION	// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
WITHOUT_CLASSIFICATION	// Count up the objects that will be removed. // The objects are exchanged to produce this list's order //
WITHOUT_CLASSIFICATION	// Remove from by position in reverse order. //
WITHOUT_CLASSIFICATION	// remove/add the action bar from the view so to avoid // having an empty action bar participating in the view's // layout calculation (and maybe causing an empty bar to appear)
WITHOUT_CLASSIFICATION	//actionBar.setBackground(WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND)); //systemBar.setBackground(WorkbenchColors.getSystemColor(SWT.COLOR_WIDGET_BACKGROUND));
WITHOUT_CLASSIFICATION	// Define gradient (blue to widget background color)
WITHOUT_CLASSIFICATION	// Create a new array. //
WITHOUT_CLASSIFICATION	// buttonComposite has to be the first child of composite because subclasses are expecting this.
WITHOUT_CLASSIFICATION	// Common to all URI types.
WITHOUT_CLASSIFICATION	// A cache of URIs, keyed by the strings from which they were created. // The fragment of any URI is removed before caching it here, to minimize // the size of the cache in the usual case where most URIs only differ by // the fragment.
WITHOUT_CLASSIFICATION	// The lower-cased schemes that will be used to identify archive URIs.
WITHOUT_CLASSIFICATION	// Special segment values interpreted at resolve and resolve time.
WITHOUT_CLASSIFICATION	// Some character classes, as defined in RFC 2396's BNF for URI. // These are 128-bit bitmasks, stored as two longs, where the Nth bit is set // iff the ASCII character with value N is included in the set.  These are // created with the highBitmask() and lowBitmask() methods defined below, // and a character is tested against them using matches(). //
WITHOUT_CLASSIFICATION	// | ucschar | escaped
WITHOUT_CLASSIFICATION	// We can't want to do encoding of platform resource URIs by default yet.    //
WITHOUT_CLASSIFICATION	// Returns the upper half bitmask for all the ASCII characters in the given // string.
WITHOUT_CLASSIFICATION	// Uses a cache to speed up creation of a URI from a string.  The cache // is consulted to see if the URI, less any fragment, has already been // created.  If needed, the fragment is re-appended to the cached URI, // which is considerably more efficient than creating the whole URI from // scratch.  If the URI wasn't found in the cache, it is created using // parseIntoURI() and then cached.  This method should always be used // by string-parsing factory methods, instead of parseIntoURI() directly.
WITHOUT_CLASSIFICATION	// Finds the next occurrence of one of the characters in the set represented // by the given bitmask in the given string, beginning at index i. The index // of the first found character, or s.length() if there is none, is // returned.  Before searching, i is limited to the range [0, s.length()]. //
WITHOUT_CLASSIFICATION	//boolean iri = false;
WITHOUT_CLASSIFICATION	//iri = iri || containsNonASCII(segments[i]);
WITHOUT_CLASSIFICATION	// <p>A valid query may be null or contain any allowed URI characters.
WITHOUT_CLASSIFICATION	//return value == null || validate(value, URIC_HI, URIC_LO, true, true);
WITHOUT_CLASSIFICATION	// Tests the non-null string value to see if it contains only ASCII // characters in the set represented by the specified 128-bit bitmask, // as well as, optionally, non-ASCII characters 0xA0 and above, and, // also optionally, escape sequences of % followed by two hex digits. // This method is used for the new, strict URI validation that is not // not currently in place.
WITHOUT_CLASSIFICATION	// note: authority == null -> hierarchical // (authority == null && device == null && !absolutePath) -> scheme == null
WITHOUT_CLASSIFICATION	// current document reference: use base path and query
WITHOUT_CLASSIFICATION	// else keep device, path, and query
WITHOUT_CLASSIFICATION	// else keep authority, device, path, and query
WITHOUT_CLASSIFICATION	// Merges this URI's relative path with the base non-relative path.  If // base has no path, treat it as the root absolute path, unless this has // no path either.
WITHOUT_CLASSIFICATION	// if the relative path is empty or ends in an empty segment, a parent  // reference, or a self reference, add a trailing separator to a // non-empty path
WITHOUT_CLASSIFICATION	// since base must be hierarchical, and since a non-hierarchical URI // must have both scheme and opaque part, the complete absolute URI is // needed to resolve to a non-hierarchical URI
WITHOUT_CLASSIFICATION	// path form demands an absolute path: keep it and query
WITHOUT_CLASSIFICATION	// always include fragment, even if null; // no validation needed since all components are from existing URIs
WITHOUT_CLASSIFICATION	// Returns true if the non-relative path includes segments that would be // collapsed when resolving; false otherwise.  If preserveRootParents is // true, collapsible segments include any empty segments, except for the // last segment, as well as and parent and self references.  If // preserveRootsParents is false, parent references are not collapsible if // they are the first segment or preceded only by other parent // references.
WITHOUT_CLASSIFICATION	// if endPath is shorter than startPath, the last segment of endPath may // not be compared: because startPath has been collapsed and had its // last segment removed, all preceding segments can be considered non- // empty and followed by a separator, while the last segment of endPath // will either be non-empty and not followed by a separator, or just empty
WITHOUT_CLASSIFICATION	// absolute path or no path -> absolute path
WITHOUT_CLASSIFICATION	// Computes a three-character escape sequence for the byte, appending // it to the StringBuffer.  Only characters up to 0xFF should be escaped; // all but the least significant byte will be ignored.
WITHOUT_CLASSIFICATION	/*   * Returns <code>true</code> if this URI contains non-ASCII characters;   * <code>false</code> otherwise.   *   * This unused code is included for possible future use...    */
WITHOUT_CLASSIFICATION	// If that fails, determine the URL for the class itself. // The URL will be of one of the following forms, // so there are a few good places to consider looking for the plugin.properties. // // For a plugin.xml with runtime="common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="runtime/common.jar": // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/runtime/common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is jarred: // jar:file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common.jar!/org/eclipse/common/CommonPlugin.class // // For a plugin.xml with runtime="." where the plugin is not jarred. // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/org/eclipse/emf/common/CommonPlugin.class // // Running in PDE with bin on classpath: // file:/D:/sandbox/unpackage1-3.1M7/eclipse/plugins/org.eclipse.emf.common/bin/org/eclipse/emf/common/CommonPlugin.class //
WITHOUT_CLASSIFICATION	// If we can open  an input stream, then the plugin.properties is there, and we have a good base URL. //
WITHOUT_CLASSIFICATION	// If the bundle can't be found the normal way, try to find it as the base URL. // If that also doesn't work, rethrow the original exception. //
WITHOUT_CLASSIFICATION	// ++modCount //
WITHOUT_CLASSIFICATION	// ++modCount //
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Open an editor on the new file. //
WITHOUT_CLASSIFICATION	// Open an editor on the new file. //
WITHOUT_CLASSIFICATION	// feature is instance of EAttribute
WITHOUT_CLASSIFICATION	// Create a proper feature map entry. //
WITHOUT_CLASSIFICATION	// Bidirectional references need to use this less efficient approach because some //  or all of the changes may already have been made from the other end. //
WITHOUT_CLASSIFICATION	// caches the list value.
WITHOUT_CLASSIFICATION	// caches the list value.
WITHOUT_CLASSIFICATION	// caches the list value.
WITHOUT_CLASSIFICATION	// Maintain a (weak hash) set on the type parameter of all referencing generic types. //
WITHOUT_CLASSIFICATION	// The algorithm for the order of the features in this list should never change. // Also, the fact that a new list is created whenever the contents change  // is something else that should never change. // There are clients who rely on both these behaviors,  // and they will need to agree to any change, // so that they can adjust their own code. //
WITHOUT_CLASSIFICATION	// The notification for this list is being thrown by the // delegating list //
WITHOUT_CLASSIFICATION	// Keep trying until all else has failed.
WITHOUT_CLASSIFICATION	// return eContainerFeatureID;
WITHOUT_CLASSIFICATION	// If we're not setting a new resource, attach it to the old container's resource.
WITHOUT_CLASSIFICATION	// If we didn't detach it from an old resource already, detach it from the old container's resource. //
WITHOUT_CLASSIFICATION	/* backward compatibility with old generated overrides */
WITHOUT_CLASSIFICATION	/* backward compatibility with old generated overrides */
WITHOUT_CLASSIFICATION	// Depending on the action and the current state, we'll toggle the state. // i.e., for unset, we need to turn it off if it's on,  // and for set we need to turn it on if it's off. //
WITHOUT_CLASSIFICATION	// If the index was previously assigned, return it. // Otherwise, return a negative result that encodes the newly assigned index. //
WITHOUT_CLASSIFICATION	// We set it and get back the interned string. // This way, when instanceClassName == instanceTypeName we know we should serialize only the class name. //
WITHOUT_CLASSIFICATION	// The container class must be null for the open content features of the document root // to ensure that they are looked up in the actual eClass()  // rather than assumed to be a feature with a feature ID relative to the actual class. // Otherwise, it's good to have this optimization. //
WITHOUT_CLASSIFICATION	// Interpret it as part of the name. //
WITHOUT_CLASSIFICATION	// The class address was not equal, so we don't want this class loader, // but instead want the last result that was able to load the class. //
WITHOUT_CLASSIFICATION	//Platform.getBundle(element.getNamespaceIdentifier()).loadClass(contributorClassName);
WITHOUT_CLASSIFICATION	// First try to see if this class has an eInstance  //
WITHOUT_CLASSIFICATION	// Create a resource for this file. //
WITHOUT_CLASSIFICATION	// Add the initial model object to the contents. //
WITHOUT_CLASSIFICATION	// Create a page, set the title, and the initial model file name. //
WITHOUT_CLASSIFICATION	// Set this for the container. //
WITHOUT_CLASSIFICATION	// Load the schema and packages that were used to load the instance into this resource set. //
WITHOUT_CLASSIFICATION	// Create a resource for this file. Don't specify a content type, as it could be Ecore or EMOF. //
WITHOUT_CLASSIFICATION	// Put all static package in the package registry. //
WITHOUT_CLASSIFICATION	// Look into SubContributionItems //
WITHOUT_CLASSIFICATION	//return;
WITHOUT_CLASSIFICATION	// super.collectNewChildDescriptors(newChildDescriptors, object);
WITHOUT_CLASSIFICATION	// If the list is empty, we need to add all the objects, // otherwise, the reference is bidirectional and the list is at least partially populated. //
WITHOUT_CLASSIFICATION	// List subList(EStructuralFeature feature, int from, int to); // EList list(EStructuralFeature feature);
WITHOUT_CLASSIFICATION	// We do not want to diagnose any errors that have already been diagnosed by a super type. // Although we ignore all the first super's features, there may be mixin classes that still would result in duplicates. //
WITHOUT_CLASSIFICATION	// There is no match if the types are different // and they don't each specify the same non-null instance class name. //
WITHOUT_CLASSIFICATION	// We need to be conservative and diagnose a problem only if we are quite sure that type is built-in  // and hence that the lack of a default value really represents a problem with being unable to convert the literal to a value. // 
WITHOUT_CLASSIFICATION	// And even if it is contained, it must not be a forward reference. // eTypeParameterIndex == index is allowed when the type parameter is  // the type argument of the bound, though //
WITHOUT_CLASSIFICATION	// A primitive type can only be used as the generic type of a typed element. //
WITHOUT_CLASSIFICATION	// Check if the bound specifies a classifier... //
WITHOUT_CLASSIFICATION	// Since we will do the processing recursively, we need to ensure we don't stack overflow if there is a circular super type. //
WITHOUT_CLASSIFICATION	// Or we test their relationship via their instance classes, if they have them. //
WITHOUT_CLASSIFICATION	// The bound is a wildcard with no constraints. //
WITHOUT_CLASSIFICATION	// The bound is a wildcard with no constraints. //
WITHOUT_CLASSIFICATION	/*        featureMap.add(eStructuralFeature, cursor++, o);        expectedModCount = featureMap.getModCount();        ++entryCursor;        ++lastCursor;        // lastCursor = -1;        // prepared = 0;*/
WITHOUT_CLASSIFICATION	// Don't remove the adapter if the object is in a different resource  // and that resource (and hence all its contents) are being cross referenced. //
WITHOUT_CLASSIFICATION	/*  public List subList(EStructuralFeature feature, int from, int to)  {    return null;  }*/
WITHOUT_CLASSIFICATION	// Mark the bound as unspecified so that it won't be considered many // but can nevertheless be recognized as being unspecified and perhaps still be treat as many. //
WITHOUT_CLASSIFICATION	// Mark the bound as unspecified so that it won't be considered many // but can nevertheless be recognized as being unspecified and perhaps still be treat as many. //
WITHOUT_CLASSIFICATION	// If we can't add it, it must already be in the list so find it and move it to the end. //
WITHOUT_CLASSIFICATION	// Both eObject1 and eObject2 are not null. // If eObject1 has been compared already... //
WITHOUT_CLASSIFICATION	// There's no reason they aren't equal, so they are. //
WITHOUT_CLASSIFICATION	// If the set states are the same, and the values of the feature are the structurally equal, they are equal. //
WITHOUT_CLASSIFICATION	// If entries don't have the same feature, the feature maps aren't equal. //
WITHOUT_CLASSIFICATION	// Do a base 64 conversion by turning every 3 bytes into 4 base 64 characters //
WITHOUT_CLASSIFICATION	// Get the current time in milliseconds since the epoch  // and adjust it to match the epoch required by the specification. //
WITHOUT_CLASSIFICATION	// The system time hasn't changed so add some increment of 100s of nanoseconds to guarantee uniqueness. //
WITHOUT_CLASSIFICATION	// Since the granularity of time in Java is only milliseconds,  // add an adjustment so that the time is represented in 100s of nanoseconds. // The version number (1) is multiplexed into the most significant hex digit. //
WITHOUT_CLASSIFICATION	// Cc
WITHOUT_CLASSIFICATION	// The entity handler is the best place to resolve and deresolve URIs since it can do it there just once to produce the entity. // So most often the entity handler will be a URI handler as well and when used as a URI handler will be an identity handler. //
WITHOUT_CLASSIFICATION	// Handle the same document proxies, which may have problems resulting from the // other end of a bidirectional reference being handled as an IDREF rather than as a proxy. // When we are done with these, we know that funny proxies are now resolved as if they were handled as IDREFs. //
WITHOUT_CLASSIFICATION	// So if the resolved object is also present... //
WITHOUT_CLASSIFICATION	// If there is no root object, we're dealing with an EAttribute feature instead of an EReference feature. // So create an instance of simple any type and prepare it to handle the text content. //
WITHOUT_CLASSIFICATION	// Continue with a different approach.
WITHOUT_CLASSIFICATION	// Look for the first non-XMI element. //
WITHOUT_CLASSIFICATION	// set features and properties
WITHOUT_CLASSIFICATION	// Include only non-duplicate namespace declarations. //
WITHOUT_CLASSIFICATION	// We need to be careful that we don't end up requiring the no namespace package  // just because the feature is unqualified. //
WITHOUT_CLASSIFICATION	// We must have a qualifier for an attribute that needs qualified. //
WITHOUT_CLASSIFICATION	// see if prefix already exists in current context
WITHOUT_CLASSIFICATION	// Walk up the super types until we reach a root. //
WITHOUT_CLASSIFICATION	// Look for a matching element in the classifier's package but don't bother with the XML type package's document root. //
WITHOUT_CLASSIFICATION	/*   * INTERNAL: this is a specialized method to add attributes for a top/root element   */
WITHOUT_CLASSIFICATION	// it's intentional to keep going
WITHOUT_CLASSIFICATION	// it's intentional to keep going
WITHOUT_CLASSIFICATION	// it's intentional to keep going
WITHOUT_CLASSIFICATION	// it's intentional to keep going
WITHOUT_CLASSIFICATION	// Produce the supplemental character as an entity
WITHOUT_CLASSIFICATION	// We not sure the encoding supports this code point, so we write it as a character entity reference.
WITHOUT_CLASSIFICATION	// no property
WITHOUT_CLASSIFICATION	// no property
WITHOUT_CLASSIFICATION	// no property
WITHOUT_CLASSIFICATION	// Only handle classifiers from this package. //
WITHOUT_CLASSIFICATION	// We effectively passed null, "" to look up the general-content feature. //
WITHOUT_CLASSIFICATION	// DocumentRoot
WITHOUT_CLASSIFICATION	// Keep trying other member types until all have failed.
WITHOUT_CLASSIFICATION	// Keep trying other member types until all have failed.
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// Need not to call setSource() because // a caller can not access this match instance.
WITHOUT_CLASSIFICATION	// Need not to call setSource() because // a caller can not access this match instance.
WITHOUT_CLASSIFICATION	/*           * The pattern has only fixed string.           * The engine uses Boyer-Moore.           */
WITHOUT_CLASSIFICATION	/*           * The pattern has only fixed string.           * The engine uses Boyer-Moore.           */
WITHOUT_CLASSIFICATION	/*           * The pattern contains a fixed string.           * The engine checks with Boyer-Moore whether the text contains the fixed string or not.           * If not, it return with false.           */
WITHOUT_CLASSIFICATION	// ModifierOp // CharOp  for CHAR, BACKREFERENCE, CAPTURE, ANCHOR, 
WITHOUT_CLASSIFICATION	// STRING
WITHOUT_CLASSIFICATION	// for RANGE or NRANGE
WITHOUT_CLASSIFICATION	// Overlapped // src:    o--------o // sub:  o----o // sub:      o----o // sub:          o----o // sub:  o------------o
WITHOUT_CLASSIFICATION	// this.ranges is sorted and compacted.
WITHOUT_CLASSIFICATION	// src1:    o--------o // src2:          o----o // res:           o--o // Reuse src2
WITHOUT_CLASSIFICATION	//this.setLocale(Locale.getDefault());
WITHOUT_CLASSIFICATION	/*      public RegularExpression createRegex(String regex, int options) throws ParseException {          Token tok = this.parse(regex, options);          return new RegularExpression(regex, tok, this.parennumber, this.hasBackReferences, options);      }      */
WITHOUT_CLASSIFICATION	// ')'
WITHOUT_CLASSIFICATION	// Skips ')'
WITHOUT_CLASSIFICATION	// off -> next of '}'
WITHOUT_CLASSIFICATION	// \ + c // backsolidus // POSIX Character class such as [:alnum:]
WITHOUT_CLASSIFICATION	//tok.dumpRanges();
WITHOUT_CLASSIFICATION	// Skips ']'
WITHOUT_CLASSIFICATION	// ESCAPE U+001B // FORM FEED U+000C // LINE FEED U+000A // CRRIAGE RETURN U+000D // HORIZONTAL TABULATION U+0009 //case 'v':  c = 0x0b;  break; // VERTICAL TABULATION U+000B
WITHOUT_CLASSIFICATION	// for CLOSURE
WITHOUT_CLASSIFICATION	// for STRING
WITHOUT_CLASSIFICATION	// ****
WITHOUT_CLASSIFICATION	/*                  result.addRange(0, RegularExpression.LINE_FEED-1);                  result.addRange(RegularExpression.LINE_FEED+1, RegularExpression.CARRIAGE_RETURN-1);                  result.addRange(RegularExpression.CARRIAGE_RETURN+1,                                  RegularExpression.LINE_SEPARATOR-1);                  result.addRange(RegularExpression.PARAGRAPH_SEPARATOR+1, UTF16_MAX);                  return 1;                  */
WITHOUT_CLASSIFICATION	// ------------------------------------------------------
WITHOUT_CLASSIFICATION	// ------------------------------------------------------
WITHOUT_CLASSIFICATION	// 28 // 29, 30 // 31-37
WITHOUT_CLASSIFICATION	// Schema Rec. {Datatypes} - Punctuation  // Pi - initial quote // Pf - final quote
WITHOUT_CLASSIFICATION	/*0590..05FF;*/
WITHOUT_CLASSIFICATION	/*0A00..0A7F;*/
WITHOUT_CLASSIFICATION	/*0D00..0D7F;*/
WITHOUT_CLASSIFICATION	/*10A0..10FF;*/
WITHOUT_CLASSIFICATION	/*16A0..16FF;*/
WITHOUT_CLASSIFICATION	/*2000..206F;*/
WITHOUT_CLASSIFICATION	/*2190..21FF;*/
WITHOUT_CLASSIFICATION	/*2500..257F;*/
WITHOUT_CLASSIFICATION	/*2FF0..2FFF;*/
WITHOUT_CLASSIFICATION	/*3190..319F;*/
WITHOUT_CLASSIFICATION	/*A000..A48F;*/
WITHOUT_CLASSIFICATION	/*FB50..FDFF;*/
WITHOUT_CLASSIFICATION	/*FF00..FFEF;*/
WITHOUT_CLASSIFICATION	/*1D400..1D7FF;*/
WITHOUT_CLASSIFICATION	//ADD THOSE MANUALLY //F0000..FFFFD; "Private Use", //100000..10FFFD; "Private Use" //FFF0..FFFD; "Specials", 
WITHOUT_CLASSIFICATION	// ;DEVANAGARI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;BENGALI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GURMUKHI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;GUJARATI SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;ORIYA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TAMIL SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;TELUGU SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;KANNADA SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;MALAYALAM SIGN VIRAMA;Mn;9;ON;;;;;N;;;;; //;THAI CHARACTER PHINTHU;Mn;9;ON;;;;;N;THAI VOWEL SIGN PHINTHU;;;; //;TIBETAN MARK HALANTA;Mn;9;ON;;;;;N;TIBETAN VIRAMA;;;;
WITHOUT_CLASSIFICATION	// Don't use 'cotinue' for this loop. // single-range | from-to-range | subtraction
WITHOUT_CLASSIFICATION	// both prefix (if any) a localpart must be valid NCName
WITHOUT_CLASSIFICATION	// Empty.
WITHOUT_CLASSIFICATION	// Empty.
WITHOUT_CLASSIFICATION	// Empty.
WITHOUT_CLASSIFICATION	// Empty.
WITHOUT_CLASSIFICATION	/* * This class provides encode/decode for RFC 2045 Base64 as * defined by RFC 2045, N. Freed and N. Borenstein. * RFC 2045: Multipurpose Internet Mail Extensions (MIME) * Part One: Format of Internet Message Bodies. Reference * 1996 Available at: http://www.ietf.org/rfc/rfc2045.txt * This class is used by XML Schema binary format validation * * This implementation does not encode/decode streaming * data. You need the data that you will encode/decode * already on a byte array. * * @author Jeffrey Rodriguez * @author Sandy Gao */
WITHOUT_CLASSIFICATION	//if found "no data" just return null
WITHOUT_CLASSIFICATION	/* * EncodingMap is a convenience class which handles conversions between  * IANA encoding names and Java encoding names, and vice versa. The * encoding names used in XML instance documents <strong>must</strong> * be the IANA encoding names specified or one of the aliases for those names * which IANA defines. * <p> * <TABLE BORDER="0" WIDTH="100%"> *  <TR> *      <TD WIDTH="33%"> *          <P ALIGN="CENTER"><B>Common Name</B> *      </TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER"><B>Use this name in XML files</B> *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER"><B>Name Type</B> *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER"><B>Xerces converts to this Java Encoder Name</B> *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">8 bit Unicode</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">UTF-8 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">UTF8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin 1</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-1 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-1 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin 2</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-2 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-2 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin 3</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-3 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-3 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin 4</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-4 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-4 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin Cyrillic</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-5 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin Arabic</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-6 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-6 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin Greek</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-7 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-7 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin Hebrew</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-8 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-8 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">ISO Latin 5</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ISO-8859-9 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">ISO-8859-9 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: US</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-us *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Canada</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-ca *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Netherlands</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-nl *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp037 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Denmark</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-dk *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Norway</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-no *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp277 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Finland</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-fi *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Sweden</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-se *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp278 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Italy</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-it *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp280 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Spain, Latin America</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-es *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp284 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Great Britain</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-gb *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp285 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: France</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-fr *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp297 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Arabic</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-ar1 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp420 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Hebrew</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-he *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp424 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Switzerland</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-ch *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp500 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Roece</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-roece *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Yugoslavia</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-yu *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp870 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Iceland</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-is *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp871 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">EBCDIC: Urdu</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">ebcdic-cp-ar2 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">IANA *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">cp918 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Chinese for PRC, mixed 1/2 byte</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">gb2312 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">GB2312 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Extended Unix Code, packed for Japanese</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">euc-jp *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">eucjis *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Japanese: iso-2022-jp</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">iso-2020-jp *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">JIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Japanese: Shift JIS</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">Shift_JIS *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">SJIS *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Chinese: Big5</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">Big5 *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">Big5 *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Extended Unix Code, packed for Korean</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">euc-kr *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">iso2022kr *      </TD> *  </TR> *  <TR> *      <TD WIDTH="33%">Cyrillic</TD> *      <TD WIDTH="15%"> *          <P ALIGN="CENTER">koi8-r *      </TD> *      <TD WIDTH="12%"> *          <P ALIGN="CENTER">MIME *      </TD> *      <TD WIDTH="31%"> *          <P ALIGN="CENTER">koi8-r *      </TD> *  </TR> * </TABLE> *  * @author TAMURA Kent, IBM * @author Andy Clark, IBM */
WITHOUT_CLASSIFICATION	// // Static initialization //
WITHOUT_CLASSIFICATION	// // Static initialization //
WITHOUT_CLASSIFICATION	// add IANA to Java encoding mappings.
WITHOUT_CLASSIFICATION	// support for 1047, as proposed to be added to the  // IANA registry in  // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0049.html
WITHOUT_CLASSIFICATION	// support for 1047, as proposed to be added to the  // IANA registry in  // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0049.html
WITHOUT_CLASSIFICATION	// <clinit>()
WITHOUT_CLASSIFICATION	// <clinit>()
WITHOUT_CLASSIFICATION	// putJava2IANAMapping(String,String)
WITHOUT_CLASSIFICATION	// getJava2IANAMapping(String):String
WITHOUT_CLASSIFICATION	// removeJava2IANAMapping
WITHOUT_CLASSIFICATION	// Add ASCII Letters
WITHOUT_CLASSIFICATION	// Add Mark Characters
WITHOUT_CLASSIFICATION	// Add Userinfo Characters
WITHOUT_CLASSIFICATION	// just make a copy of the base if spec is empty
WITHOUT_CLASSIFICATION	// A standalone base is a valid URI according to spec
WITHOUT_CLASSIFICATION	// Two slashes means we may have authority, but definitely means we're either // matching net_path or abs_path. These two productions are ambiguous in that // every net_path (except those containing an IPv6Reference) is an abs_path.  // RFC 2396 resolves this ambiguity by applying a greedy left most matching rule.  // Try matching net_path first, and if that fails we don't have authority so  // then attempt to match abs_path. // // net_path = "//" authority [ abs_path ] // abs_path = "/"  path_segments
WITHOUT_CLASSIFICATION	// Two slashes means we may have authority, but definitely means we're either // matching net_path or abs_path. These two productions are ambiguous in that // every net_path (except those containing an IPv6Reference) is an abs_path.  // RFC 2396 resolves this ambiguity by applying a greedy left most matching rule.  // Try matching net_path first, and if that fails we don't have authority so  // then attempt to match abs_path. // // net_path = "//" authority [ abs_path ] // abs_path = "/"  path_segments
WITHOUT_CLASSIFICATION	// If we didn't find authority we need to back up. Attempt to // match against abs_path next.
WITHOUT_CLASSIFICATION	// create message
WITHOUT_CLASSIFICATION	// check to see if this is the current doc - RFC 2396 5.2 #2 // note that this is slightly different from the RFC spec in that // we don't include the check for query string being null // - this handles cases where the urispec is just a query // string or a fragment (e.g. "?y" or "#s") - // see <http://www.ics.uci.edu/~fielding/url/test1.html> which // identified this as a bug in the RFC
WITHOUT_CLASSIFICATION	// check for scheme - RFC 2396 5.2 #3 // if we found a scheme, it means absolute URI, so we're done
WITHOUT_CLASSIFICATION	// if we get to this point, we need to resolve relative path // RFC 2396 5.2 #6
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// If the scheme specific part is opaque, it can contain '[' // and ']'. uric_no_slash wasn't modified by RFC 2732, which // I've interpreted as an error in the spec, since the  // production should be equivalent to (uric - '/'), and uric // contains '[' and ']'. - mrglavas
WITHOUT_CLASSIFICATION	// If the scheme specific part is opaque, it can contain '[' // and ']'. uric_no_slash wasn't modified by RFC 2732, which // I've interpreted as an error in the spec, since the  // production should be equivalent to (uric - '/'), and uric // contains '[' and ']'. - mrglavas
WITHOUT_CLASSIFICATION	// hostname      = *( domainlabel "." ) toplabel [ "." ] // domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum // toplabel      = alpha | alpha *( alphanum | "-" ) alphanum
WITHOUT_CLASSIFICATION	// make sure that 1) we see only digits and dot separators, 2) that // any dot separator is preceded and followed by a digit and // 3) that we find 3 dots // // RFC 2732 amended RFC 2396 by replacing the definition  // of IPv4address with the one defined by RFC 2373. - mrglavas // // IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT // // One to three digits must be in each segment.
WITHOUT_CLASSIFICATION	// make sure that 1) we see only digits and dot separators, 2) that // any dot separator is preceded and followed by a digit and // 3) that we find 3 dots // // RFC 2732 amended RFC 2396 by replacing the definition  // of IPv4address with the one defined by RFC 2373. - mrglavas // // IPv4address = 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT "." 1*3DIGIT // // One to three digits must be in each segment.
WITHOUT_CLASSIFICATION	// We've either reached the end of the string, the address ends in // an IPv4 address, or it is invalid. scanHexSequence has already  // made sure that we have the right number of bits. 
WITHOUT_CLASSIFICATION	// This might be invalid or an IPv4address. If it's potentially an IPv4address, // backup to just after the last valid character that matches hexseq.
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 49 // Fill 26 of value (byte) -3 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 26 of value (byte) -3 // Fill 60 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 68 of value (byte) -19 // Fill 9 of value (byte) 33 // Fill 36 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 30 of value (byte) -19 // Fill 56 of value (byte) 33 // Fill 89 of value (byte) -19 // Fill 18 of value (byte) 33 // Fill 7 of value (byte) -19 // Fill 14 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 46 of value (byte) 33 // Fill 70 of value (byte) -87 // Fill 26 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 36 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 68 of value (byte) -19 // Fill 9 of value (byte) 33 // Fill 36 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 30 of value (byte) -19 // Fill 56 of value (byte) 33 // Fill 89 of value (byte) -19 // Fill 18 of value (byte) 33 // Fill 7 of value (byte) -19 // Fill 14 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 46 of value (byte) 33 // Fill 70 of value (byte) -87 // Fill 26 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 36 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 28 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 55 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 17 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 11 of value (byte) 33 // Fill 27 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 46 of value (byte) 33 // Fill 26 of value (byte) -19 // Fill 5 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 519 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 16 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 10 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// }}
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 8 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) 33 // Fill 9 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// cause a syntax error
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Look for a likely plugin name. //
WITHOUT_CLASSIFICATION	/*   * Returns the dynamic template path, an ordered list of URIs corresponding to locations under which to find   * templates.   */
WITHOUT_CLASSIFICATION	/*   * Returns the base portion of the dynamic template path.   */
WITHOUT_CLASSIFICATION	// It's okay for there not be a precompiled template, so fail quietly.
WITHOUT_CLASSIFICATION	// Returns whether this class implements any of the given features.
WITHOUT_CLASSIFICATION	// GenTypedElement
WITHOUT_CLASSIFICATION	// GenTypeParameter
WITHOUT_CLASSIFICATION	//GenRuntimeVersion
WITHOUT_CLASSIFICATION	//GenModelPackage
WITHOUT_CLASSIFICATION	// String getPackageID();
WITHOUT_CLASSIFICATION	// getFirstFileExtension?
WITHOUT_CLASSIFICATION	// this returns either "attribute", "attribute list", "reference", or "reference list"
WITHOUT_CLASSIFICATION	// add variable fragment to new declaration
WITHOUT_CLASSIFICATION	// Filtered for property keys to remove duplicates.
WITHOUT_CLASSIFICATION	//GenModelFactory
WITHOUT_CLASSIFICATION	// GenAnnotation
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// add added super interfaces to the array
WITHOUT_CLASSIFICATION	// always returns original value
WITHOUT_CLASSIFICATION	// only 1 fragment left - revert the changes
WITHOUT_CLASSIFICATION	// split is performed
WITHOUT_CLASSIFICATION	// name already contains ".*" - unset on demand property
WITHOUT_CLASSIFICATION	// not supported in JDOM
WITHOUT_CLASSIFICATION	// not supported in JDOM    
WITHOUT_CLASSIFICATION	//The shared instance.
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	//GenAnnotationImpl
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Create enums
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize enums and add enum literals
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	//GenModelPackageImpl
WITHOUT_CLASSIFICATION	// Does nothing
WITHOUT_CLASSIFICATION	// Create an import manager for this compilation unit
WITHOUT_CLASSIFICATION	// Create a code formatter for this compilation unit, if needed
WITHOUT_CLASSIFICATION	// InputStream contents = new ByteArrayInputStream(bytes);
WITHOUT_CLASSIFICATION	// Clear the import manager
WITHOUT_CLASSIFICATION	//FB TBD different objects for ecore model!
WITHOUT_CLASSIFICATION	// BasicEMap.this.removeEntry(index, j);
WITHOUT_CLASSIFICATION	//FB TBD different objects for ecore model!
WITHOUT_CLASSIFICATION	//(eType instanceof EDataType)
WITHOUT_CLASSIFICATION	// order genPackages by putting firstGenPackage (if non-null) first
WITHOUT_CLASSIFICATION	// generateColor();
WITHOUT_CLASSIFICATION	// If the value is null, the key is a referenced object
WITHOUT_CLASSIFICATION	// If we've found thing with type parameters, search them for a match.
WITHOUT_CLASSIFICATION	/*   * Set from {@link #isChildren children} if unset, and return value.   */
WITHOUT_CLASSIFICATION	//  && eReverseFeature.isNavigable();
WITHOUT_CLASSIFICATION	//GenFeatureImpl
WITHOUT_CLASSIFICATION	// Returns whether this class implements any of the given features.
WITHOUT_CLASSIFICATION	//GenEnumImpl
WITHOUT_CLASSIFICATION	//GenModelFactoryImpl
WITHOUT_CLASSIFICATION	// build mapping from classes to list of features that use them
WITHOUT_CLASSIFICATION	// scan feature lists for those with multiple elements and return them
WITHOUT_CLASSIFICATION	//data type
WITHOUT_CLASSIFICATION	//GenTypeParameterImpl
WITHOUT_CLASSIFICATION	//GenTypedElementImpl
WITHOUT_CLASSIFICATION	// escaped unicode form
WITHOUT_CLASSIFICATION	// EObject is handled by default case
WITHOUT_CLASSIFICATION	// Go through class super types to catch any from other packages
WITHOUT_CLASSIFICATION	// Go through class super types to catch constraints from other packages
WITHOUT_CLASSIFICATION	// Create helpers to cache and supply information for unique naming
WITHOUT_CLASSIFICATION	// Ignore this soft dependency when it's not satisfied.
WITHOUT_CLASSIFICATION	// return getPrefixedName("EditPlugin");
WITHOUT_CLASSIFICATION	// return getProviderPackageName() + "." + getEditPluginClassName();
WITHOUT_CLASSIFICATION	// return getPrefixedName("EditorPlugin");
WITHOUT_CLASSIFICATION	// return getPresentationPackageName() + "." + getEditorPluginClassName();
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	//TBD 
WITHOUT_CLASSIFICATION	//TBD 
WITHOUT_CLASSIFICATION	//GenPackageImpl
WITHOUT_CLASSIFICATION	// Don't care about plugin class; we can generate a model without one.
WITHOUT_CLASSIFICATION	// genPackage can be a broken proxy
WITHOUT_CLASSIFICATION	//   protected JETEmitter extendedItemProviderEmitter = null;
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//GenModelImpl
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// TODO
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc 
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc
WITHOUT_CLASSIFICATION	/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	// (
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	//GenModelSwitch
WITHOUT_CLASSIFICATION	//GenModelAdapterFactory
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	//GenModelValidator
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//ItemProvider/getText.override.javajetinc
WITHOUT_CLASSIFICATION	//ItemProvider/addPropertyDescriptor.override.javajetinc
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc 
WITHOUT_CLASSIFICATION	//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	// return eProperties;
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	//Class/reflectiveDelegation.override.javajetinc
WITHOUT_CLASSIFICATION	//Editor/addItemproviderFactories.override.javajetinc"
WITHOUT_CLASSIFICATION	//ResourceFactoryClass/createResource.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/declaredFieldGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	///////////////////////
WITHOUT_CLASSIFICATION	///////////////////////
WITHOUT_CLASSIFICATION	//volatile
WITHOUT_CLASSIFICATION	//Class/getGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/getGenFeature.javadoc.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/getGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/getGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicGetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicGetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicGetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicSetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicSetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicSetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/setGenFeature.javadoc.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/setGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/setGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/setGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicUnsetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/basicUnsetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class.basicUnsetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/unsetGenFeature.javadoc.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/unsetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/unsetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/unsetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/isSetGenFeature.javadoc.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/isSetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/isSetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/isSetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/genOperation.javadoc.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/genOperation.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//Class/implementedGenOperation.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//Class/eUnset.override.javajetinc
WITHOUT_CLASSIFICATION	//datatype
WITHOUT_CLASSIFICATION	//Class/eIsSet.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/getGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/getGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/getGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/setGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	//TestCase/setGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/setGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/unsetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/unsetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/unsetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/isSetGenFeature.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/isSetGenFeature.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/implementedGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/genOperation.annotations.insert.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/implementedGenOperation.todo.override.javajetinc
WITHOUT_CLASSIFICATION	//TestCase/implementedGenOperation.override.javajetinc
WITHOUT_CLASSIFICATION	/*   * Char buffer for HTML data   */
WITHOUT_CLASSIFICATION	// Match close.
WITHOUT_CLASSIFICATION	// Continue processing dynamically as normal.
WITHOUT_CLASSIFICATION	// Ignore because we'll rethrow the original exception eventually.
WITHOUT_CLASSIFICATION	// pure obfuscated genius!
WITHOUT_CLASSIFICATION	// Read value until delimiter is found:
WITHOUT_CLASSIFICATION	// Take care of the quoting here.
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// (
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Close NCSA like attributes "->"
WITHOUT_CLASSIFICATION	// Close variable like attributes "%>"
WITHOUT_CLASSIFICATION	// XMLesque Close tags
WITHOUT_CLASSIFICATION	// Reached EOF:
WITHOUT_CLASSIFICATION	// Ignore the version
WITHOUT_CLASSIFICATION	//dumpNodeContents(node);
WITHOUT_CLASSIFICATION	// dumpNodeContents(node);
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	/////////////////////////////////  PULL  /////////////////////////////////////
WITHOUT_CLASSIFICATION	/*    // PULL Name    //    targetPackage.setName(sourcePackage.getName());*/
WITHOUT_CLASSIFICATION	/////////////////////////////////  PUSH  /////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////  SWEEP  /////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////  SORT  /////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////  CLONE AND MAP  /////////////////////////////////////
WITHOUT_CLASSIFICATION	// System.err.println("Warning: Cannot clone '" + sourceNode.getContents() + "'");
WITHOUT_CLASSIFICATION	// apply target parent pattern first
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	/////////////////////////////////  HEADLESS INVOCATION  /////////////////////////////////////
WITHOUT_CLASSIFICATION	// Ignore the exception.
WITHOUT_CLASSIFICATION	// use new node from now on
WITHOUT_CLASSIFICATION	// redo the markup since nodes changed now
WITHOUT_CLASSIFICATION	// super is called on converted node
WITHOUT_CLASSIFICATION	// Back up over the whitespace.
WITHOUT_CLASSIFICATION	// target method is NOT addSuperInterface
WITHOUT_CLASSIFICATION	// if the parent is not in target, there is no point on checking the child
WITHOUT_CLASSIFICATION	// by default nodes are marked up
WITHOUT_CLASSIFICATION	// ignore rules for nodes of different class
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// use new node from now on
WITHOUT_CLASSIFICATION	// redo the markup since nodes changed now
WITHOUT_CLASSIFICATION	// super is called on converted node
WITHOUT_CLASSIFICATION	// Command line execution methods
WITHOUT_CLASSIFICATION	// do not crash when control model is not set
WITHOUT_CLASSIFICATION	// Subclasses may override this method
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode)   */
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Not instantiable
WITHOUT_CLASSIFICATION	// replace or append
WITHOUT_CLASSIFICATION	// enable tracking for nodes that have string content
WITHOUT_CLASSIFICATION	// enable tracking for commented out nodes
WITHOUT_CLASSIFICATION	// apply header
WITHOUT_CLASSIFICATION	// skip whitespace, up to the end of the line
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// this should never happen
WITHOUT_CLASSIFICATION	// revert all current edits for this node
WITHOUT_CLASSIFICATION	// log the error, ignore the change and continue
WITHOUT_CLASSIFICATION	// comment out all lines of the node itself, from firstLine to last line
WITHOUT_CLASSIFICATION	// if there is anything after the node on the same line, insert line break
WITHOUT_CLASSIFICATION	// reset text edits; since this node is processed successfully, there is no need to revert these changes
WITHOUT_CLASSIFICATION	// this line has been commented out, return next line number
WITHOUT_CLASSIFICATION	// return the line number of the start of the node
WITHOUT_CLASSIFICATION	// handle the case when there is a replace edit that covers these lines
WITHOUT_CLASSIFICATION	// skip all lines that replace edit covers
WITHOUT_CLASSIFICATION	// should not happen, re-throw exception
WITHOUT_CLASSIFICATION	// make sure that dummy edit is not in the tree
WITHOUT_CLASSIFICATION	// assume length will grow by 10% (average line length is 20 characters)
WITHOUT_CLASSIFICATION	// next position is checked as well
WITHOUT_CLASSIFICATION	// char at currentPos is copied as well
WITHOUT_CLASSIFICATION	// lastPos, currentPos points at the next chars that will be copied later
WITHOUT_CLASSIFICATION	// copy last piece if any
WITHOUT_CLASSIFICATION	// if needed, comment out a comma of the previous enum constant
WITHOUT_CLASSIFICATION	// if there is anything before the node on the same line, create line break and comment out the first line of the node
WITHOUT_CLASSIFICATION	// there is only whitespace on this line - no need for line break
WITHOUT_CLASSIFICATION	// for enum constants, insert line break after the comma if there is anything after the comma
WITHOUT_CLASSIFICATION	// if there is any content after the node on the same line, insert line break (to prevent commenting out extra content)
WITHOUT_CLASSIFICATION	// if previous node is not commented out, but all the following nodes are, comment out a comma (constant separator)
WITHOUT_CLASSIFICATION	// if previous node is not commented out, but all following are
WITHOUT_CLASSIFICATION	// insert new line at the end of previous constant
WITHOUT_CLASSIFICATION	// if comma is on a line by itself, comment it out but do not insert the line break
WITHOUT_CLASSIFICATION	// delete variable fragment from old declaration
WITHOUT_CLASSIFICATION	// do not insert line break if there is only whitespace after comma
WITHOUT_CLASSIFICATION	// there is only whitespace after enum constant on the same line - do not add line breaks
WITHOUT_CLASSIFICATION	//listRewrite.remove((ASTNode)modifier, null);
WITHOUT_CLASSIFICATION	// add added super interfaces to the array
WITHOUT_CLASSIFICATION	// this could be method body, for example
WITHOUT_CLASSIFICATION	// for field declarations use variable declaration fragments instead
WITHOUT_CLASSIFICATION	// for all nodes but some use default extended range
WITHOUT_CLASSIFICATION	// remove all existing modifiers
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// append extra dimensions if any
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// create new modifiers and add to rewrite
WITHOUT_CLASSIFICATION	// parse
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// specify the exact parent of annotations
WITHOUT_CLASSIFICATION	// set source
WITHOUT_CLASSIFICATION	// create rewriter to record changes
WITHOUT_CLASSIFICATION	// keep comments between nodes when removing or moving nodes
WITHOUT_CLASSIFICATION	// set properties
WITHOUT_CLASSIFICATION	// create JNode and set properties
WITHOUT_CLASSIFICATION	// Set of options that we want to copy from the current definition        
WITHOUT_CLASSIFICATION	// Set of options that we want to control
WITHOUT_CLASSIFICATION	// separate fields with an empty line
WITHOUT_CLASSIFICATION	// make all enum constants to be on separate lines
WITHOUT_CLASSIFICATION	// handle field declarations separately
WITHOUT_CLASSIFICATION	// create new node and replace it all by original contents
WITHOUT_CLASSIFICATION	// set rewriter on the new node
WITHOUT_CLASSIFICATION	// if there are multiple variables in the same field declaration, create declaration with only 1 variable
WITHOUT_CLASSIFICATION	// rewriter is required for set methods
WITHOUT_CLASSIFICATION	// set comment and initializer as strings
WITHOUT_CLASSIFICATION	// set annotation contents
WITHOUT_CLASSIFICATION	// skip nodes in hierarchy that can not be converted to JNode (i.e. VariableDeclarationFragment)
WITHOUT_CLASSIFICATION	// get rewriter
WITHOUT_CLASSIFICATION	// update the wrapped object map
WITHOUT_CLASSIFICATION	// range to look for comments
WITHOUT_CLASSIFICATION	// get the end position of the range for the previous node
WITHOUT_CLASSIFICATION	//previousNode.getStartPosition() + previousNode.getLength();
WITHOUT_CLASSIFICATION	// if there is an element with end position <= rangeEndPos
WITHOUT_CLASSIFICATION	// the previous element must have end position <= rangeEndPos
WITHOUT_CLASSIFICATION	// else - there is a comment that ends exactly at rangeEndPos    
WITHOUT_CLASSIFICATION	// if there is a comment with start position > rangeStartPos
WITHOUT_CLASSIFICATION	// else - there is a comment that starts exactly at rangeStartPos
WITHOUT_CLASSIFICATION	// find start position of farthest preceding comment
WITHOUT_CLASSIFICATION	// check if there is just whitespace between position and start of the comment
WITHOUT_CLASSIFICATION	// extend to include the comment at the same line as the position 
WITHOUT_CLASSIFICATION	// extend range backward
WITHOUT_CLASSIFICATION	// extend range forward
WITHOUT_CLASSIFICATION	// add trailing whitespace
WITHOUT_CLASSIFICATION	// increments the position to add the white spaces
WITHOUT_CLASSIFICATION	// for all nodes but some use default extended range
WITHOUT_CLASSIFICATION	// include line comments following end of the nodes into the range
WITHOUT_CLASSIFICATION	// add leading comments
WITHOUT_CLASSIFICATION	// add trailing comments if necessary
WITHOUT_CLASSIFICATION	// insert new declaration before this one
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// append extra dimensions if any
WITHOUT_CLASSIFICATION	// default implementation does nothing
WITHOUT_CLASSIFICATION	// disable commenting out
WITHOUT_CLASSIFICATION	// enable commenting out
WITHOUT_CLASSIFICATION	// mark the node as moved if node has been removed      
WITHOUT_CLASSIFICATION	// if are dealing with original, not cloned node
WITHOUT_CLASSIFICATION	// mark the node to be removed
WITHOUT_CLASSIFICATION	// assume that the node is being moved (to allow insertion after)
WITHOUT_CLASSIFICATION	// remove the node
WITHOUT_CLASSIFICATION	// insert new values
WITHOUT_CLASSIFICATION	// stringValue not null, nodeValue is null
WITHOUT_CLASSIFICATION	// always returns original value
WITHOUT_CLASSIFICATION	// append extra dimensions since they are not stored in Type object
WITHOUT_CLASSIFICATION	// create map of field names to fields
WITHOUT_CLASSIFICATION	// move all children to the enum, converting some fields to constants
WITHOUT_CLASSIFICATION	// remove type, insert enum
WITHOUT_CLASSIFICATION	// convert only public static final fields
WITHOUT_CLASSIFICATION	// convert only fields of the same type as parent
WITHOUT_CLASSIFICATION	// set arguments and body
WITHOUT_CLASSIFICATION	// move annotations
WITHOUT_CLASSIFICATION	// unable to set arguments or body
WITHOUT_CLASSIFICATION	// update the wrapped object
WITHOUT_CLASSIFICATION	// move annotations
WITHOUT_CLASSIFICATION	// convert enum constants and add to list of converted constants
WITHOUT_CLASSIFICATION	// move the node
WITHOUT_CLASSIFICATION	// insert nodeToInsert after targetNode
WITHOUT_CLASSIFICATION	// replace type by enum
WITHOUT_CLASSIFICATION	// create field declaration with 1 variable declaration fragment
WITHOUT_CLASSIFICATION	// set the type to create
WITHOUT_CLASSIFICATION	// set arguments
WITHOUT_CLASSIFICATION	// replace some arguments by another field names (constants)
WITHOUT_CLASSIFICATION	// update last field that is used
WITHOUT_CLASSIFICATION	// set the arguments to the constructor
WITHOUT_CLASSIFICATION	// set the body
WITHOUT_CLASSIFICATION	// set the whole initializer
WITHOUT_CLASSIFICATION	// return the whole declaration contents (not just variableDeclarationFragment)
WITHOUT_CLASSIFICATION	// check number of fragments
WITHOUT_CLASSIFICATION	// create a copy of declaration
WITHOUT_CLASSIFICATION	// new declaration will not have fragments until performSplit() is called
WITHOUT_CLASSIFICATION	// set rewritten node to be the original
WITHOUT_CLASSIFICATION	// perform split if there is more than 1 fragment
WITHOUT_CLASSIFICATION	// set javadoc
WITHOUT_CLASSIFICATION	// set initializer
WITHOUT_CLASSIFICATION	// set annotations contents
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// generateColor();
WITHOUT_CLASSIFICATION	// exception.printStackTrace();
WITHOUT_CLASSIFICATION	// container specification group
WITHOUT_CLASSIFICATION	// New Template Container Label
WITHOUT_CLASSIFICATION	// New Template Container Label
WITHOUT_CLASSIFICATION	// New Template Container Entryfield
WITHOUT_CLASSIFICATION	// jetNature.setTemplateContainers(newTemplateContainers);
WITHOUT_CLASSIFICATION	// jetNature.setJavaSourceContainer(newJavaSourceContainer);
WITHOUT_CLASSIFICATION	// will point at the character after 0 to 3 octal digits
WITHOUT_CLASSIFICATION	/*   * @since 2.4   */
WITHOUT_CLASSIFICATION	// the for loop's condition finds the separator 
WITHOUT_CLASSIFICATION	// Assume that we aren't running.
WITHOUT_CLASSIFICATION	// Assume that it's not available.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*     * Javadoc copied from interface.     */
WITHOUT_CLASSIFICATION	/*     * Javadoc copied from interface.     */
WITHOUT_CLASSIFICATION	// System.err.println("Logged throwable: --------------------"); // throwable.printStackTrace();
WITHOUT_CLASSIFICATION	// System.err.println("Logged throwable: --------------------"); // throwable.printStackTrace();
WITHOUT_CLASSIFICATION	// Trim off the segments corresponding to the package nesting. //
WITHOUT_CLASSIFICATION	// For an archive URI, check for the path in the archive. //
WITHOUT_CLASSIFICATION	// Just print an error message.
WITHOUT_CLASSIFICATION	// Assume the class is not available.
WITHOUT_CLASSIFICATION	// Just return the default.
WITHOUT_CLASSIFICATION	// Ignore the exception and return the original URI.
WITHOUT_CLASSIFICATION	// Continue with the unresolved URI.
WITHOUT_CLASSIFICATION	// Return the original URI.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// If we can open  an input stream, then the path is there, and we have a good URL. //
WITHOUT_CLASSIFICATION	// If we didn't find the path in the usual place nor in the archive... //
WITHOUT_CLASSIFICATION	// Continue processing if the file doesn't exist so that we try create a new empty one.
WITHOUT_CLASSIFICATION	// This is just a marker interface.
WITHOUT_CLASSIFICATION	// This is just a marker interface.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * @deprecated   */
WITHOUT_CLASSIFICATION	/*   * @deprecated   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Create a title bar.
WITHOUT_CLASSIFICATION	// When the pane or any child gains focus, notify the workbench.
WITHOUT_CLASSIFICATION	// Only do this once.
WITHOUT_CLASSIFICATION	// Title.  
WITHOUT_CLASSIFICATION	// Action bar.
WITHOUT_CLASSIFICATION	// System bar.  
WITHOUT_CLASSIFICATION	// Define gradient (blue to widget background color)
WITHOUT_CLASSIFICATION	// colorMap.put(CLR_GRAD_START, clr1);
WITHOUT_CLASSIFICATION	// colorMap.put(CLR_GRAD_START, clr1);
WITHOUT_CLASSIFICATION	// Preload.
WITHOUT_CLASSIFICATION	// Preload.
WITHOUT_CLASSIFICATION	// was the details button pressed?
WITHOUT_CLASSIFICATION	// create OK and Details buttons
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Empty block
WITHOUT_CLASSIFICATION	// Empty block
WITHOUT_CLASSIFICATION	// Empty block
WITHOUT_CLASSIFICATION	// create a composite with standard margins and spacing
WITHOUT_CLASSIFICATION	//Create a label if there are no children to force a smaller layout
WITHOUT_CLASSIFICATION	//If it was not a warning or an diagnostic then return the diagnostic image
WITHOUT_CLASSIFICATION	// Closing the detail area
WITHOUT_CLASSIFICATION	// Opening the detail area
WITHOUT_CLASSIFICATION	//Only one example per wizard
WITHOUT_CLASSIFICATION	// null -> relative URI reference
WITHOUT_CLASSIFICATION	// Applicable only to a hierarchical URI.
WITHOUT_CLASSIFICATION	// empty last segment -> trailing separator
WITHOUT_CLASSIFICATION	// Identifies a file-type absolute URI.
WITHOUT_CLASSIFICATION	// Separators for parsing a URI string.
WITHOUT_CLASSIFICATION	// Characters to use in escaping.
WITHOUT_CLASSIFICATION	// | ucschar | escaped
WITHOUT_CLASSIFICATION	// Static initializer for archiveSchemes.
WITHOUT_CLASSIFICATION	// Returns the lower half bitmask for the given ASCII character.
WITHOUT_CLASSIFICATION	// Returns the upper half bitmask for the given ACSII character.
WITHOUT_CLASSIFICATION	// Debugging method: converts the given long to a string of binary digits.
WITHOUT_CLASSIFICATION	// String-parsing implementation.
WITHOUT_CLASSIFICATION	// && uri.charAt(i) == FRAGMENT_SEPARATOR (implied)
WITHOUT_CLASSIFICATION	// Private constructor for use of platform factory methods.
WITHOUT_CLASSIFICATION	// Private constructor for use of static factory methods.
WITHOUT_CLASSIFICATION	//iri = iri || containsNonASCII(authority);
WITHOUT_CLASSIFICATION	//iri = iri || containsNonASCII(device);
WITHOUT_CLASSIFICATION	//iri = iri || containsNonASCII(query);
WITHOUT_CLASSIFICATION	//iri = iri || containsNonASCII(fragment);
WITHOUT_CLASSIFICATION	//this.iri = iri;
WITHOUT_CLASSIFICATION	//return value == null || validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
WITHOUT_CLASSIFICATION	// Ignore the exception and return false.
WITHOUT_CLASSIFICATION	//return value != null && validate(value, SEGMENT_CHAR_HI, SEGMENT_CHAR_LO, true, true);
WITHOUT_CLASSIFICATION	//return value == null || validate(value, URIC_HI, URIC_LO, true, true);
WITHOUT_CLASSIFICATION	// <p>A valid fragment may be null or contain any allowed URI characters.
WITHOUT_CLASSIFICATION	// note: hierarchical -> authority != null
WITHOUT_CLASSIFICATION	// note: device != null -> hierarchical
WITHOUT_CLASSIFICATION	// note: absolutePath -> hierarchical
WITHOUT_CLASSIFICATION	// note: query != null -> hierarchical
WITHOUT_CLASSIFICATION	// an absolute URI needs no resolving
WITHOUT_CLASSIFICATION	// note: isRelative() -> hierarchical
WITHOUT_CLASSIFICATION	// no authority: use base's
WITHOUT_CLASSIFICATION	// no device: use base's
WITHOUT_CLASSIFICATION	// else keep device, path, and query
WITHOUT_CLASSIFICATION	// else absolute path: keep it and query
WITHOUT_CLASSIFICATION	// else keep authority, device, path, and query
WITHOUT_CLASSIFICATION	// return a correctly sized result
WITHOUT_CLASSIFICATION	// skip empty segments and self references; push everything else
WITHOUT_CLASSIFICATION	// different scheme: need complete, absolute URI
WITHOUT_CLASSIFICATION	// matching authorities and no device or path removal
WITHOUT_CLASSIFICATION	// matching devices and no path removal
WITHOUT_CLASSIFICATION	// user rejects a relative path: keep absolute or no path
WITHOUT_CLASSIFICATION	// current document reference: keep no path or query
WITHOUT_CLASSIFICATION	// no paths: keep query only
WITHOUT_CLASSIFICATION	// keep query and select relative or absolute path based on length
WITHOUT_CLASSIFICATION	// user demands a relative path or the absolute path is longer
WITHOUT_CLASSIFICATION	// else keep shorter absolute path
WITHOUT_CLASSIFICATION	// treat an empty base path as the root absolute path
WITHOUT_CLASSIFICATION	// drop last segment from base, as in resolving
WITHOUT_CLASSIFICATION	// index of first segment that is different between endPath and startPath
WITHOUT_CLASSIFICATION	// return a correctly sized result
WITHOUT_CLASSIFICATION	// return a correctly sized result
WITHOUT_CLASSIFICATION	// Empty statement.
WITHOUT_CLASSIFICATION	// use a stack to accumulate segments
WITHOUT_CLASSIFICATION	// absolute path or no path -> absolute path
WITHOUT_CLASSIFICATION	// note: segments.length > 0 -> hierarchical
WITHOUT_CLASSIFICATION	// note: segments.length > 0 -> hierarchical
WITHOUT_CLASSIFICATION	// Get what's left of the segments after trimming the prefix.
WITHOUT_CLASSIFICATION	// no validation needed since all components are from existing URIs
WITHOUT_CLASSIFICATION	// Otherwise, the path needs only the remaining segments.
WITHOUT_CLASSIFICATION	// Returns the int value of the given hex digit.
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 62 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 11 of value (byte) 33
WITHOUT_CLASSIFICATION	/*   * If this is an {@link #isIRI IRI}, converts it to a strict ASCII URI,   * using the procedure described in Section 3.1 of the   * <a href="http://www.w3.org/International/iri-edit/draft-duerst-iri-09.txt">IRI   * Draft RFC</a>.  Otherwise, this URI, itself, is returned.   *   * This unused code is included for possible future use...   */
WITHOUT_CLASSIFICATION	// Continue with the established base URL.
WITHOUT_CLASSIFICATION	// Ignore the exception since we will throw one when all else fails.
WITHOUT_CLASSIFICATION	// We'll rethrow the original exception, not this one.
WITHOUT_CLASSIFICATION	// Ignore this since we will throw an exception when all else fails.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from source.   */
WITHOUT_CLASSIFICATION	// Suppress default constructor for noninstantiability.
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 62 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 11 of value (byte) 33
WITHOUT_CLASSIFICATION	/*    * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*    * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	//EParameter
WITHOUT_CLASSIFICATION	// Subclasses may overrride 
WITHOUT_CLASSIFICATION	// WizardContainer variables
WITHOUT_CLASSIFICATION	// Sorting only the genModels
WITHOUT_CLASSIFICATION	//EOperation
WITHOUT_CLASSIFICATION	// This is only at avoid needing an @SuppressWarnings("unchecked") on the EMFObservableList
WITHOUT_CLASSIFICATION	// This is only at avoid needing an @SuppressWarnings("unchecked") on the EMFObservableList
WITHOUT_CLASSIFICATION	// Fill 230 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 39 of value (byte) -19 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	//ETypedElement
WITHOUT_CLASSIFICATION	// ETypeParameter
WITHOUT_CLASSIFICATION	//EDataType
WITHOUT_CLASSIFICATION	//EcoreFactory
WITHOUT_CLASSIFICATION	// EAnnotation
WITHOUT_CLASSIFICATION	// EGenericType
WITHOUT_CLASSIFICATION	//EcorePackage
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Create enums
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize enums and add enum literals
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	// ListChange
WITHOUT_CLASSIFICATION	// FeatureMapEntry
WITHOUT_CLASSIFICATION	// FeatureChange
WITHOUT_CLASSIFICATION	// ChangeDescription
WITHOUT_CLASSIFICATION	//ChangeFactory
WITHOUT_CLASSIFICATION	//ChangePackage
WITHOUT_CLASSIFICATION	// ResourceChange
WITHOUT_CLASSIFICATION	//ChangePackageImpl
WITHOUT_CLASSIFICATION	//EObjectToChangesMapEntryImpl
WITHOUT_CLASSIFICATION	//ListChangeImpl
WITHOUT_CLASSIFICATION	// cache result
WITHOUT_CLASSIFICATION	// cache result
WITHOUT_CLASSIFICATION	//ResourceChangeImpl
WITHOUT_CLASSIFICATION	// feature is instance of EAttribute
WITHOUT_CLASSIFICATION	// cached already?
WITHOUT_CLASSIFICATION	//FeatureChangeImpl
WITHOUT_CLASSIFICATION	//FeatureChangeImpl
WITHOUT_CLASSIFICATION	// Isolating the new objects
WITHOUT_CLASSIFICATION	// getObjectsToDetachGen() should be changed only if required
WITHOUT_CLASSIFICATION	// caches the list value.
WITHOUT_CLASSIFICATION	//ChangeDescriptionImpl
WITHOUT_CLASSIFICATION	//ChangeFactoryImpl
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Register package validator
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	/*   * @deprecated   */
WITHOUT_CLASSIFICATION	//ChangeSwitch
WITHOUT_CLASSIFICATION	//ChangeAdapterFactory
WITHOUT_CLASSIFICATION	// Make sure that all the old values are cached.
WITHOUT_CLASSIFICATION	//case Notification.REMOVE:
WITHOUT_CLASSIFICATION	//case Notification.REMOVE_MANY:
WITHOUT_CLASSIFICATION	// Continue with no instanceClass. 
WITHOUT_CLASSIFICATION	//EGenericTypeImpl
WITHOUT_CLASSIFICATION	//EParameterImpl
WITHOUT_CLASSIFICATION	// Create data types
WITHOUT_CLASSIFICATION	// Initialize data types
WITHOUT_CLASSIFICATION	//return eContainer;
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	//ETypeParameterImpl
WITHOUT_CLASSIFICATION	//EStringToStringMapEntryImpl
WITHOUT_CLASSIFICATION	// Don't really unset it.
WITHOUT_CLASSIFICATION	// create containment one.
WITHOUT_CLASSIFICATION	//getList(entry).clear();
WITHOUT_CLASSIFICATION	//ETypedElementImpl
WITHOUT_CLASSIFICATION	// Keep trying until all else has failed.
WITHOUT_CLASSIFICATION	// Continue to try a different approach.
WITHOUT_CLASSIFICATION	// Continue to try a different approach.
WITHOUT_CLASSIFICATION	// Keep trying until all else false.
WITHOUT_CLASSIFICATION	//EcoreFactoryImpl
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/* backward compatibility with old generated overrides */
WITHOUT_CLASSIFICATION	/* backward compatibility with old generated overrides */
WITHOUT_CLASSIFICATION	// Subclasses MUST override this function
WITHOUT_CLASSIFICATION	// return eVirtualIndexBits[offset];
WITHOUT_CLASSIFICATION	// eVirtualIndexBits[offset] = newIndexBits;
WITHOUT_CLASSIFICATION	// Continue to compute the offset.
WITHOUT_CLASSIFICATION	// return eVirtualValues;
WITHOUT_CLASSIFICATION	// eVirtualValues = newValues;
WITHOUT_CLASSIFICATION	// return minimumCapacity;
WITHOUT_CLASSIFICATION	// Ignore exceptions.
WITHOUT_CLASSIFICATION	// Continue and return null.
WITHOUT_CLASSIFICATION	// Ensure that cached ePackage is forgotten.
WITHOUT_CLASSIFICATION	//EAnnotationImpl
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Don't really unset it.
WITHOUT_CLASSIFICATION	// Force this to be initialized as well.
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	// (
WITHOUT_CLASSIFICATION	// We can also optimize single valued reverse.  //
WITHOUT_CLASSIFICATION	// all implementations of Java 1.5 should support AES
WITHOUT_CLASSIFICATION	// generate the key
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Continue and try to close.
WITHOUT_CLASSIFICATION	// Fill 3078 of value (byte) 33 // Fill 156 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 90 of value (byte) -19 // Fill 6 of value (byte) 33 // Fill 22 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3078 of value (byte) 33 // Fill 156 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 90 of value (byte) -19 // Fill 6 of value (byte) 33 // Fill 22 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// ...
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface.   */
WITHOUT_CLASSIFICATION	// Ignore exceptions.
WITHOUT_CLASSIFICATION	// Ignore exceptions.
WITHOUT_CLASSIFICATION	// encrypt the input
WITHOUT_CLASSIFICATION	// this is the key we will use to encrypt the data 
WITHOUT_CLASSIFICATION	// create the IV for the password generation algorithm
WITHOUT_CLASSIFICATION	// generate the IV for encryption
WITHOUT_CLASSIFICATION	// turn the password into an AES key
WITHOUT_CLASSIFICATION	// now create the encryption cipher 
WITHOUT_CLASSIFICATION	// Read the header of the encrypted file.				
WITHOUT_CLASSIFICATION	// Decrypt the key bytes
WITHOUT_CLASSIFICATION	// Create the key from the key bytes
WITHOUT_CLASSIFICATION	// If we haven't yet generated a key, just use this one
WITHOUT_CLASSIFICATION	// now create the decrypt cipher
WITHOUT_CLASSIFICATION	// Ignore any exceptions and assume the class isn't available.
WITHOUT_CLASSIFICATION	// Ignore any exceptions and assume the class isn't available.
WITHOUT_CLASSIFICATION	// No methods added.
WITHOUT_CLASSIFICATION	// ECLIPSE-DEPEND-BEGIN
WITHOUT_CLASSIFICATION	// ECLIPSE-DEPEND-BEGIN
WITHOUT_CLASSIFICATION	// ECLIPSE-DEPEND-END
WITHOUT_CLASSIFICATION	// ECLIPSE-DEPEND-END
WITHOUT_CLASSIFICATION	// We can't update any properties via just a URL connection.
WITHOUT_CLASSIFICATION	// Ignore the bound if the value is too big.
WITHOUT_CLASSIFICATION	// Ignore the bound if the value is too big.
WITHOUT_CLASSIFICATION	// Ignore features from the first super type. //
WITHOUT_CLASSIFICATION	// Match against every other operation but this one. //
WITHOUT_CLASSIFICATION	/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	// The CipherOutputStream shoudln't close the underlying stream //
WITHOUT_CLASSIFICATION	// List subList(EStructuralFeature feature, int from, int to); // EList list(EStructuralFeature feature);
WITHOUT_CLASSIFICATION	// Ensure that the class loader for this class will be used downstream. //
WITHOUT_CLASSIFICATION	// We do not want to diagnose any errors that have already been diagnosed by a super type. // Although we ignore all the first super's features, there may be mixin classes that still would result in duplicates. //
WITHOUT_CLASSIFICATION	//EcoreSwitch
WITHOUT_CLASSIFICATION	// A document root can have multiple ID attributes because there can be multiple global element or attribute declarations of type ID  // and these will be the ID in the complex types that reference them, // i.e., they aren't really the ID of the document root. //
WITHOUT_CLASSIFICATION	// For performance, skip matching all the features of the first super type. //
WITHOUT_CLASSIFICATION	// Don't bother complaining about things with no name, // since there are constraints for that problem. //
WITHOUT_CLASSIFICATION	// Drop the _ separators and normalize the case. //
WITHOUT_CLASSIFICATION	// Fill 31 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 53 of value (byte) -19
WITHOUT_CLASSIFICATION	// Match against every other operation but this one. //
WITHOUT_CLASSIFICATION	// Produce different levels of diagnostic depending whether the names are exactly the same or only matching. //
WITHOUT_CLASSIFICATION	// There is no match if the types are different // and they don't each specify the same non-null instance class name. //
WITHOUT_CLASSIFICATION	// Iterate over all the operations but skip all the operations in the first super. //
WITHOUT_CLASSIFICATION	// We do not want to diagnose any error that have already been diagnosed by a super type. //
WITHOUT_CLASSIFICATION	// Maintain a list of classifiers for looking up conflicts. //
WITHOUT_CLASSIFICATION	// Look for duplicates among the generic super types. //
WITHOUT_CLASSIFICATION	// Ignore it if it isn't a class. Not being a class is diagnosed for the generic type itself. //
WITHOUT_CLASSIFICATION	// The string must contain inappropriate whitespace, so find the index for the first difference. //
WITHOUT_CLASSIFICATION	// Don't complain about the literals if they are the same as the names and the names collide. //
WITHOUT_CLASSIFICATION	// Can't have both a classifier and a type parameter. //
WITHOUT_CLASSIFICATION	// The referencing generic type must be contained to be in scope //
WITHOUT_CLASSIFICATION	// The type parameter must be in scope and must not be a forward reference. //
WITHOUT_CLASSIFICATION	// When used as a generic super type, there must be a classifier that refers to a class. //
WITHOUT_CLASSIFICATION	// The type arguments of a generic super type must not be a wildcard. //
WITHOUT_CLASSIFICATION	// Wildcards are only allowed in type arguments. //
WITHOUT_CLASSIFICATION	// The classifier of an attribute's generic type must be a data type. //
WITHOUT_CLASSIFICATION	// Can't have both an upper and lower bound. //
WITHOUT_CLASSIFICATION	// Can't have a classifier or a type parameter as well as bounds. //
WITHOUT_CLASSIFICATION	// Can only have bounds when used as a type argument. //
WITHOUT_CLASSIFICATION	// Can't have type arguments unless there is a classifier //
WITHOUT_CLASSIFICATION	// Have no arguments when they are allowed is only a warning. //
WITHOUT_CLASSIFICATION	// Incorrect number of type arguments. //
WITHOUT_CLASSIFICATION	// Check if the bound specifies a classifier... //
WITHOUT_CLASSIFICATION	// If the type also specifies a classifier... //
WITHOUT_CLASSIFICATION	// If the are the same then it is bounded properly... //
WITHOUT_CLASSIFICATION	// We test their relationship either via them both being classes... //
WITHOUT_CLASSIFICATION	// namespace context
WITHOUT_CLASSIFICATION	// Determine if there is a bounding generic super type. //
WITHOUT_CLASSIFICATION	// Set up the substitutions of any type parameters this class has with respect to the type arguments for them. //
WITHOUT_CLASSIFICATION	// Test if there are type parameters that might require substitution. //
WITHOUT_CLASSIFICATION	// If none of the generic super types are bounded, then we've failed. //
WITHOUT_CLASSIFICATION	// If neither approach finds a contradiction, we must assume they are okay and then check all the arguments. //
WITHOUT_CLASSIFICATION	// If there is a type parameter, one of its bounds must be bounded by the bound. //
WITHOUT_CLASSIFICATION	// If there is a upper bound, the bound must bound it. //
WITHOUT_CLASSIFICATION	// Failing all those cases, there must be an lower bound that bounds it. //
WITHOUT_CLASSIFICATION	// If the generic type is a wildcard, it can't be bounded by another wildcard. //
WITHOUT_CLASSIFICATION	// If there is an lower bound, the type argument must bound it. //
WITHOUT_CLASSIFICATION	// If the type also specifies a classifier... //
WITHOUT_CLASSIFICATION	// If they are the same classifier, they are of course equal. //
WITHOUT_CLASSIFICATION	// Consider the instance type names they wrap  // to see if they are non-null and equal. //
WITHOUT_CLASSIFICATION	// Consider the instance type names they wrap  // to see if they are non-null and equal. //
WITHOUT_CLASSIFICATION	// I.e., the classifiers are considered equal if they wrap the same non-null type. //
WITHOUT_CLASSIFICATION	// I.e., the classifiers are considered equal if they wrap the same non-null type. //
WITHOUT_CLASSIFICATION	// If the generic type is a different wildcard, it doesn't match. //
WITHOUT_CLASSIFICATION	// Reverse the test. //
WITHOUT_CLASSIFICATION	// If they are the same instance they are equal. //
WITHOUT_CLASSIFICATION	// If one is null (but the other is not) then they are not equal. //
WITHOUT_CLASSIFICATION	// Consider the classifiers in a special way  // to take into account the fact they they often acts as wrappers for instance type names // and that two classifiers that wrap the same instance type name should be considered equal. //
WITHOUT_CLASSIFICATION	// If they both aren't null... //
WITHOUT_CLASSIFICATION	// If one is null (but the other is not) then they can't be equal. //
WITHOUT_CLASSIFICATION	// The arguments, type parameters, lower bounds and upper bounds must be equal type arguments. //
WITHOUT_CLASSIFICATION	// Ignore leading whitespace
WITHOUT_CLASSIFICATION	// Ignore trailing whitespace
WITHOUT_CLASSIFICATION	//EcoreValidator
WITHOUT_CLASSIFICATION	//  Public
WITHOUT_CLASSIFICATION	// --entryCursor;
WITHOUT_CLASSIFICATION	//lastCursor = -1; //prepared = 0;
WITHOUT_CLASSIFICATION	/*    public List subList(int from, int to)    {      return featureMap.subList(getEStructuralFeature(), from, to);    }*/
WITHOUT_CLASSIFICATION	// Don't cache this one as it will cause leaks because to dynamic demand created document roots and demand created EClasses. //
WITHOUT_CLASSIFICATION	// For the extended meta data to be created. //
WITHOUT_CLASSIFICATION	// We can also optimize single valued reverse.  //
WITHOUT_CLASSIFICATION	// This forces the feature ids to be assigned. //
WITHOUT_CLASSIFICATION	// We can use == for EObjects and EnumLiterals. //
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	// We can use == for EObjects and EnumLiterals. //
WITHOUT_CLASSIFICATION	// This should be the same as the logic in ResourceImpl.getEObject(String). //
WITHOUT_CLASSIFICATION	//EcoreAdapterFactory
WITHOUT_CLASSIFICATION	// We need to be careful that the proxy may be resolved while we are attaching this adapter. // We need to avoid attaching the adapter during the resolve  // and also attaching it again as we walk the eContents() later. // Checking here avoids having to check during addAdapter. //
WITHOUT_CLASSIFICATION	/*  public List subList(EStructuralFeature feature, int from, int to)  {    return null;  }*/
WITHOUT_CLASSIFICATION	// Validate now since the call we make after will skip validating.
WITHOUT_CLASSIFICATION	// Index should be -1.
WITHOUT_CLASSIFICATION	// Index should be -1.
WITHOUT_CLASSIFICATION	// This may be called directly on an EObject for the case of a containment. //
WITHOUT_CLASSIFICATION	// demandDocumentRoot(ePackage);
WITHOUT_CLASSIFICATION	// For demand created created packages we allow the list of classifiers to grow  // so this should handle those additional instances. //
WITHOUT_CLASSIFICATION	// No new methods.
WITHOUT_CLASSIFICATION	// Undo the preparation for previous and continue.
WITHOUT_CLASSIFICATION	// Undo the preparation for next and continue.
WITHOUT_CLASSIFICATION	// Validate now since the call we make after will skip validating.
WITHOUT_CLASSIFICATION	// Index should be -1.
WITHOUT_CLASSIFICATION	// Index should be -1.
WITHOUT_CLASSIFICATION	// This may be called directly on an EObject for the case of a containment. //
WITHOUT_CLASSIFICATION	/*  List theList = new java.util.ArrayList();  protected List delegateList()  {    return theList;  }*/
WITHOUT_CLASSIFICATION	//   // Suppress default constructor for noninstantiability. //   private EcoreUtil() //   { //   }
WITHOUT_CLASSIFICATION	// Failure to resolve is ignored.
WITHOUT_CLASSIFICATION	// The loop resolves the cross references by visiting them.
WITHOUT_CLASSIFICATION	// We don't create an iterator stack until the root mapping itself has been returned by next once. // After that the stack should be non-empty and the top iterator should yield true for hasNext. //
WITHOUT_CLASSIFICATION	// If we are on the special resource set iterator, and there isn't really a next object at this point... //
WITHOUT_CLASSIFICATION	// Skip the dummy null object and test again. //
WITHOUT_CLASSIFICATION	// {
WITHOUT_CLASSIFICATION	// {
WITHOUT_CLASSIFICATION	// If the first object is null, the second object must be null. //
WITHOUT_CLASSIFICATION	// We know the first object isn't null, so if the second one is, it can't be equal. //
WITHOUT_CLASSIFICATION	// Then eObject2 must be that previous match. //
WITHOUT_CLASSIFICATION	// If eObject2 has been compared already... //
WITHOUT_CLASSIFICATION	// Then eObject1 must be that match. //
WITHOUT_CLASSIFICATION	// Neither eObject1 nor eObject2 have been compared yet.
WITHOUT_CLASSIFICATION	// If eObject1 and eObject2 are the same instance... //
WITHOUT_CLASSIFICATION	// Match them and return true. //
WITHOUT_CLASSIFICATION	// If they don't have the same class, they can't be equal. //
WITHOUT_CLASSIFICATION	// Assume from now on that they match. //
WITHOUT_CLASSIFICATION	// Check all the values. //
WITHOUT_CLASSIFICATION	// If the first value is null, the second value must be null. //
WITHOUT_CLASSIFICATION	// Since the first value isn't null, if the second one is, they aren't equal. //
WITHOUT_CLASSIFICATION	// If this is a feature map... //
WITHOUT_CLASSIFICATION	// The feature maps must be equal. //
WITHOUT_CLASSIFICATION	// The values must be Java equal. //
WITHOUT_CLASSIFICATION	// If they don't have the same size, the feature maps aren't equal. //
WITHOUT_CLASSIFICATION	// Compare entries in order. //
WITHOUT_CLASSIFICATION	// There is no reason they aren't equals. //
WITHOUT_CLASSIFICATION	// If the referenced EObjects aren't equal, the feature maps aren't equal. //
WITHOUT_CLASSIFICATION	// If the values aren't Java equal, the feature maps aren't equal. //
WITHOUT_CLASSIFICATION	// EqualityHelper
WITHOUT_CLASSIFICATION	// If it's a proxy, use that. //
WITHOUT_CLASSIFICATION	// If it is in a resource, form the URI relative to that resource. //
WITHOUT_CLASSIFICATION	// Keys that will be used to record visibility for the accessors. //
WITHOUT_CLASSIFICATION	// Value used to suppress visibility. //
WITHOUT_CLASSIFICATION	// Handle the last byte at the end. //
WITHOUT_CLASSIFICATION	// Generate a 48 bit node identifier;  // This is an alternative to the IEEE 802 host address, which is not available in Java. //
WITHOUT_CLASSIFICATION	// Set the most significant bit of the first octet to 1 so as to distinguish it from IEEE node addresses //
WITHOUT_CLASSIFICATION	// The node identifier is already in network byte order,  // so there is no need to do any byte order reversing. //
WITHOUT_CLASSIFICATION	// clockseq_hi
WITHOUT_CLASSIFICATION	// clockseq_low
WITHOUT_CLASSIFICATION	// The system clock has been rewound so the clock sequence must be incremented  // to ensure that a duplicate UUID is not generated. //
WITHOUT_CLASSIFICATION	// Wait so that the clock can catch up and the time adjustment won't overflow.
WITHOUT_CLASSIFICATION	// We just woke up.
WITHOUT_CLASSIFICATION	// We just woke up.
WITHOUT_CLASSIFICATION	// Place the time into the byte array in network byte order. //
WITHOUT_CLASSIFICATION	// time_low //
WITHOUT_CLASSIFICATION	// time_mid //
WITHOUT_CLASSIFICATION	// time_hi //
WITHOUT_CLASSIFICATION	// Ignore if we can't freeze.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.DOMHelper#getValue(org.w3c.dom.Node)   */
WITHOUT_CLASSIFICATION	// fall through
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	//fall through...
WITHOUT_CLASSIFICATION	// Deresolve all the URI against the current base URI. //
WITHOUT_CLASSIFICATION	// System.err.println("add = ["+newString+"]");
WITHOUT_CLASSIFICATION	// If there is a temporary file... //
WITHOUT_CLASSIFICATION	// This is the cheapest and most common case. //
WITHOUT_CLASSIFICATION	// The first case is the most common case. // It is slightly cheaper to call add without an index since an index will be range checked. //  
WITHOUT_CLASSIFICATION	// This case can only happen if we are reset to a mark and we've got lots of XMLNS attributes to write. //
WITHOUT_CLASSIFICATION	// If we can't create one, too bad.
WITHOUT_CLASSIFICATION	// SAXXMIHandler
WITHOUT_CLASSIFICATION	// EMOF.isReadOnly = !Ecore.changeable
WITHOUT_CLASSIFICATION	// Ecore.changeable = !EMOF.isReadOnly
WITHOUT_CLASSIFICATION	// Ignore it if we've already set generic versions of these //
WITHOUT_CLASSIFICATION	// Ignore whatever was set before. //
WITHOUT_CLASSIFICATION	// external schema locations should only be processed once, i.e. in the subsequent parse // there is no need to process those again.
WITHOUT_CLASSIFICATION	// throws SAXException
WITHOUT_CLASSIFICATION	// The entity handler is the best place to resolve and deresolve URIs since it can do it there just once to produce the entity. // So most often the entity handler will be a URI handler as well and when used as a URI handler will be an identity handler. //
WITHOUT_CLASSIFICATION	// // Overwrite DefaultHandler methods //
WITHOUT_CLASSIFICATION	// // Implement LexicalHandler methods //
WITHOUT_CLASSIFICATION	// // Implement DTDHandler methods //
WITHOUT_CLASSIFICATION	// // Implement EntityResolver methods //
WITHOUT_CLASSIFICATION	// And find the one that holds this proxy. //
WITHOUT_CLASSIFICATION	// Try to resolve the proxy locally. //
WITHOUT_CLASSIFICATION	// We won't need to process this again later. //
WITHOUT_CLASSIFICATION	// Compute the holder of the proxy //
WITHOUT_CLASSIFICATION	// If the proxy holder can hold many values, // it may contain a duplicate that resulted when the other end was processed as an IDREF // and hence did both sides of the bidirectional relation. //
WITHOUT_CLASSIFICATION	// Move the resolved object to the right place, remove the proxy, and we're done. //
WITHOUT_CLASSIFICATION	// If the resolved object doesn't contain a reference to the proxy holder as it should. //
WITHOUT_CLASSIFICATION	// The proxy needs to be replaced in a way that updates both ends of the reference. //
WITHOUT_CLASSIFICATION	// We won't need to process this again later.
WITHOUT_CLASSIFICATION	// At least set the references that we were able to resolve, if any. //
WITHOUT_CLASSIFICATION	// Pretend there is an xmlns="" because we really need to ensure that the null prefix  // isn't used to denote something other than the null namespace. //
WITHOUT_CLASSIFICATION	// EATM temporary for debug purposes only. //
WITHOUT_CLASSIFICATION	// check for simple feature
WITHOUT_CLASSIFICATION	// Set up a deferred extent so the document root we create definitely will not be added to the resource. //
WITHOUT_CLASSIFICATION	// Remove the document root's information from the top of the stacks. //
WITHOUT_CLASSIFICATION	// Process the new root object if any. //
WITHOUT_CLASSIFICATION	// There's an EObject on the stack already. //
WITHOUT_CLASSIFICATION	// Excise the new root from the document root. //
WITHOUT_CLASSIFICATION	// handler.ignorableWhitespace(ch, start, length);
WITHOUT_CLASSIFICATION	// Excise the new root from the document root. //
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	// The new root object is the actual new object since all sign of the document root will now have disappeared. //
WITHOUT_CLASSIFICATION	// Ignore a whitespace only text entry at the beginning. //
WITHOUT_CLASSIFICATION	// Handle namespaces
WITHOUT_CLASSIFICATION	// If processSchemaLocations is specified, treat these as XML Schema locations
WITHOUT_CLASSIFICATION	// If externalSchemaLocations are specified, process these ones as well
WITHOUT_CLASSIFICATION	// Ensure that anything can be handled, even if it's not recognized. //
WITHOUT_CLASSIFICATION	// This happens when processing an element with simple content that has elements content even though it shouldn't. //
WITHOUT_CLASSIFICATION	// Try to get a general-content feature. // Use a pattern that's not possible any other way. //
WITHOUT_CLASSIFICATION	// This is for the case for a local unqualified element that has been bound. //
WITHOUT_CLASSIFICATION	// This handles the case of a substitution group. //
WITHOUT_CLASSIFICATION	// This check is redundant -- see handleFeature method (EL)
WITHOUT_CLASSIFICATION	// processing unknown feature with xsi:type (xmi:type)
WITHOUT_CLASSIFICATION	// This only works for old globally registered things.
WITHOUT_CLASSIFICATION	// Ignore it if we can't find it since we'll fail anyway.
WITHOUT_CLASSIFICATION	// Continue with a different approach.
WITHOUT_CLASSIFICATION	// We use null here instead of "" because an attribute without a prefix is considered to have the null target namespace...
WITHOUT_CLASSIFICATION	// Create a proxy in the correct way and pop it. //
WITHOUT_CLASSIFICATION	// Test for a same document reference that would usually be handled as an IDREF. //
WITHOUT_CLASSIFICATION	// EATM Demand create metadata.
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from interface   */
WITHOUT_CLASSIFICATION	// add the key/value pairs to the output string
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ensure that anything can be handled, even if it's not recognized. //
WITHOUT_CLASSIFICATION	// xmlResource.getResourceSet().getResources().addAll(generatedResources);
WITHOUT_CLASSIFICATION	// use the pool to retrieve the parser
WITHOUT_CLASSIFICATION	// use the pool to retrieve the parser
WITHOUT_CLASSIFICATION	// set features and properties
WITHOUT_CLASSIFICATION	// set lexical handler
WITHOUT_CLASSIFICATION	// set lexical handler
WITHOUT_CLASSIFICATION	// release parser back to the pool
WITHOUT_CLASSIFICATION	// release parser back to the pool
WITHOUT_CLASSIFICATION	// Don't read encoding - rely on XML parser to provide one via Locator2
WITHOUT_CLASSIFICATION	// record node's attributes
WITHOUT_CLASSIFICATION	// Include only non-duplicate namespace declarations. //
WITHOUT_CLASSIFICATION	// record namespaces in scope //
WITHOUT_CLASSIFICATION	// traverse element node
WITHOUT_CLASSIFICATION	// class AttributesProxy
WITHOUT_CLASSIFICATION	// XMLLoad
WITHOUT_CLASSIFICATION	// Ignore close since we don't want to let the parser close the stream when it's done.
WITHOUT_CLASSIFICATION	// Ignore since we expect this to fail because of early termination // and if there is some other kind of failure, then we'll simply not be able to match the content type.
WITHOUT_CLASSIFICATION	// handler.skippedEntity(name);
WITHOUT_CLASSIFICATION	// handler.resolveEntity(publicId, systemId);
WITHOUT_CLASSIFICATION	// Skips '-'
WITHOUT_CLASSIFICATION	// We need to be careful that we don't end up requiring the no namespace package  // just because the feature is unqualified. //
WITHOUT_CLASSIFICATION	// handler.notationDecl(name, publicId, systemId);
WITHOUT_CLASSIFICATION	// handler.unparsedEntityDecl(name, publicId, systemId, notationName);
WITHOUT_CLASSIFICATION	// SAXXMLHandler
WITHOUT_CLASSIFICATION	// true if seen xmlns="" declaration
WITHOUT_CLASSIFICATION	// There really must be a package. //
WITHOUT_CLASSIFICATION	// There really must be a package. //
WITHOUT_CLASSIFICATION	// We must have a qualifier for an attribute that needs qualified. //
WITHOUT_CLASSIFICATION	// for any content prefix to URI mapping could be in namespace context
WITHOUT_CLASSIFICATION	// Once we see a lookup of an element in the null namespace, we should behave as if there has been an explicit xmlns="" //
WITHOUT_CLASSIFICATION	// Only if the feature kind is unspecified should we return a match. // Otherwise, we might return an attribute feature when an element is required,  // or vice versa. This also can be controlled by XMLResource.OPTION_LAX_FEATURE_PROCESSING. //
WITHOUT_CLASSIFICATION	// Sort and eliminate duplicates caused by having both a regular package and a demanded package for the same nsURI. //
WITHOUT_CLASSIFICATION	// If we are substituting an EAttribute for an EReference... //
WITHOUT_CLASSIFICATION	// Create an simple any type wrapper for the attribute value and use that with the EReference. //
WITHOUT_CLASSIFICATION	// Make sure that the list will appear to be set to be empty. //
WITHOUT_CLASSIFICATION	// xmlns="" declaration // Example #1: <a><q-name>q</q-name><b xmlns="abc"/></a> // Example #2: <a xmlns="abc"><b xmlns=""/><c xmlns="abc2"/></a> // Example #3: <a xmlns:a="abc"><b xmlns:a="abc2"/></a>
WITHOUT_CLASSIFICATION	// since xmlns="" is default declaration, remove ""->empty_URI mapping
WITHOUT_CLASSIFICATION	// record default ns declaration as duplicate if seen QName (#1) or seen xmlns="" (#2)
WITHOUT_CLASSIFICATION	// record duplicate declaration for a given prefix (#3)
WITHOUT_CLASSIFICATION	// recording a first declaration for a given prefix
WITHOUT_CLASSIFICATION	// extend the array, if necessary
WITHOUT_CLASSIFICATION	// push context
WITHOUT_CLASSIFICATION	// resize array, if needed
WITHOUT_CLASSIFICATION	// bind prefix to uri in current context
WITHOUT_CLASSIFICATION	// find prefix in current context
WITHOUT_CLASSIFICATION	// prefix not found
WITHOUT_CLASSIFICATION	// find uri in current context
WITHOUT_CLASSIFICATION	// uri not found
WITHOUT_CLASSIFICATION	// getDeclaredPrefixAt(int):String
WITHOUT_CLASSIFICATION	/*     *  Convert attribute values:     *  & to &amp;     *  < to &lt;     *  " to &quot;     *  \t to &#x9;     *  \n to &#xA;     *  \r to &#xD;     */
WITHOUT_CLASSIFICATION	// Look for a matching element in the specified packages if there are any. //
WITHOUT_CLASSIFICATION	// Look for a substitution group feature in the feature's containing class' containing package. //
WITHOUT_CLASSIFICATION	// Look for a substitution group feature in the classifier's containing package. //
WITHOUT_CLASSIFICATION	// Look for a substitution group feature in the additional packages. //
WITHOUT_CLASSIFICATION	// Process the super types if that's been specified. //
WITHOUT_CLASSIFICATION	// XMIHandler
WITHOUT_CLASSIFICATION	// xsi:nil // xsi:type // xmlns:xsi // xsi:schemaLocation // xsi:noNamespaceSchemaLocation
WITHOUT_CLASSIFICATION	// set serialization options
WITHOUT_CLASSIFICATION	// If we can't create a temp file then we have to ignore the option.
WITHOUT_CLASSIFICATION	// DOM serialization
WITHOUT_CLASSIFICATION	// caching turned on by the user
WITHOUT_CLASSIFICATION	//no caching
WITHOUT_CLASSIFICATION	// If there is no field, then we can't do this.
WITHOUT_CLASSIFICATION	// Entities aren't supported for DOM.
WITHOUT_CLASSIFICATION	// this is a root element
WITHOUT_CLASSIFICATION	// Process XML attributes
WITHOUT_CLASSIFICATION	// it's intentional to keep going
WITHOUT_CLASSIFICATION	// It's intentional to keep going.
WITHOUT_CLASSIFICATION	// Process XML elements
WITHOUT_CLASSIFICATION	// for performance reasons saveNil and saveElement are not used
WITHOUT_CLASSIFICATION	// value[outputPos];
WITHOUT_CLASSIFICATION	// Every codepoint is supported! 
WITHOUT_CLASSIFICATION	// Produce the supplemental character as an entity
WITHOUT_CLASSIFICATION	// Normal (BMP) unicode code point. See if we know for a fact that the encoding supports it:
WITHOUT_CLASSIFICATION	// value[outputPos];
WITHOUT_CLASSIFICATION	// Go back and add all the XMLNS stuff. //
WITHOUT_CLASSIFICATION	// First try to see if this package's implementation class has an eInstance. //
WITHOUT_CLASSIFICATION	// Check if it's an anonymous type. //
WITHOUT_CLASSIFICATION	// We only get here if we should do this. //
WITHOUT_CLASSIFICATION	// 2^N // 2^N-1    
WITHOUT_CLASSIFICATION	// Every codepoint is supported! 
WITHOUT_CLASSIFICATION	// Normal (BMP) unicode code point. See if we know for a fact that the encoding supports it:
WITHOUT_CLASSIFICATION	/*     *  Convert element values:     *  & to &amp;     *  < to &lt;     *  " to &quot;     *  \n to line separator     *  \r should be escaped to &xD;     */
WITHOUT_CLASSIFICATION	// We not sure the encoding supports this code point, so we write it as a character entity reference.
WITHOUT_CLASSIFICATION	/*     *  Convert:     *  \n to line separator     */
WITHOUT_CLASSIFICATION	// continue with default processing
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 13 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// write doctype
WITHOUT_CLASSIFICATION	// Avoid a function call... //
WITHOUT_CLASSIFICATION	// create dummy documentElement
WITHOUT_CLASSIFICATION	// no property
WITHOUT_CLASSIFICATION	// no property
WITHOUT_CLASSIFICATION	// boolean not
WITHOUT_CLASSIFICATION	// ownedProperty???
WITHOUT_CLASSIFICATION	// We will use an xmi:Extension element for these
WITHOUT_CLASSIFICATION	// set parser features and properties
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Register package validator
WITHOUT_CLASSIFICATION	// Register package validator
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Create enums
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize enums and add enum literals
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	// Create data types
WITHOUT_CLASSIFICATION	// Initialize data types
WITHOUT_CLASSIFICATION	// Ensure correct indentation for a top level attribute. // // elementNames.add("mark");
WITHOUT_CLASSIFICATION	// xmi:id // xmi:XMI // xmi:type // xmi:version // xmlns:xmi
WITHOUT_CLASSIFICATION	// no property // no property // no property
WITHOUT_CLASSIFICATION	// no property // no property
WITHOUT_CLASSIFICATION	//  Interpret the body of a nested ownedComment as a comment-type and assign it as the EAnnotation.source of the parent. //
WITHOUT_CLASSIFICATION	// EAnnotations denoting specific EMOF elements are serialized as their EMOF elements.  // Other EAnnotations are serialized as xmi:Extensions. //
WITHOUT_CLASSIFICATION	// register default options
WITHOUT_CLASSIFICATION	/*   * Create an XML processor that is aware of XML Schema specified.   * @param schemaURIs - a URI {@link org.eclipse.common.util.URI} which point to an XML Schema   */
WITHOUT_CLASSIFICATION	// Assume the class isn't available.
WITHOUT_CLASSIFICATION	//XMLNamespaceFactory
WITHOUT_CLASSIFICATION	// DocumentRoot
WITHOUT_CLASSIFICATION	//XMLNamespacePackage
WITHOUT_CLASSIFICATION	//SpaceType
WITHOUT_CLASSIFICATION	// http:///org/eclipse/emf/ecore/util/ExtendedMetaData
WITHOUT_CLASSIFICATION	//XMLNamespacePackageImpl
WITHOUT_CLASSIFICATION	//XMLNamespaceDocumentRootImpl
WITHOUT_CLASSIFICATION	//XMLNamespaceFactoryImpl
WITHOUT_CLASSIFICATION	//XMLNamespaceValidator
WITHOUT_CLASSIFICATION	// AnyType
WITHOUT_CLASSIFICATION	// SimpleAnyType
WITHOUT_CLASSIFICATION	// ProcessingInstructionType
WITHOUT_CLASSIFICATION	//XMLTypeFactory
WITHOUT_CLASSIFICATION	//XMLTypePackage
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	// Create data types
WITHOUT_CLASSIFICATION	// Initialize data types
WITHOUT_CLASSIFICATION	// {
WITHOUT_CLASSIFICATION	// Create annotations // http://www.w3.org/XML/1998/namespace
WITHOUT_CLASSIFICATION	// Don't create anything.
WITHOUT_CLASSIFICATION	//XMLTypePackageImpl
WITHOUT_CLASSIFICATION	//AnyTypeImpl
WITHOUT_CLASSIFICATION	//ProcessingInstructionTypeImpl
WITHOUT_CLASSIFICATION	// do not validate on load. Check validity using Diagnostician.
WITHOUT_CLASSIFICATION	// do not validate on load. Check validity using Diagnostician.
WITHOUT_CLASSIFICATION	//XMLTypeFactoryImpl
WITHOUT_CLASSIFICATION	//DocumentRootImpl
WITHOUT_CLASSIFICATION	//SimpleAnyTypeImpl
WITHOUT_CLASSIFICATION	//System.err.println("Starts at "+index);
WITHOUT_CLASSIFICATION	//System.err.println("Starts at "+index);
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// ================================================================
WITHOUT_CLASSIFICATION	// Skips a white space.
WITHOUT_CLASSIFICATION	// Skips characters between '#' and a line end.
WITHOUT_CLASSIFICATION	// Strips an escaped white space.
WITHOUT_CLASSIFICATION	// Other escaped character.
WITHOUT_CLASSIFICATION	// As is.
WITHOUT_CLASSIFICATION	// ret.next is null.
WITHOUT_CLASSIFICATION	// {n}
WITHOUT_CLASSIFICATION	// X{2,6} -> XX(X(X(XX?)?)?)?
WITHOUT_CLASSIFICATION	// Token.CLOSURE
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: matchEnd="+matchEnd);
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: matchEnd="+matchEnd);
WITHOUT_CLASSIFICATION	/*           * The pattern has only fixed string.           * The engine uses Boyer-Moore.           */
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: fixed-only: "+this.fixedString);
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: fixed-only: "+this.fixedString);
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: fixed-only: "+this.fixedString);
WITHOUT_CLASSIFICATION	/*           * The pattern contains a fixed string.           * The engine checks with Boyer-Moore whether the text contains the fixed string or not.           * If not, it return with false.           */
WITHOUT_CLASSIFICATION	/*           * The pattern contains a fixed string.           * The engine checks with Boyer-Moore whether the text contains the fixed string or not.           * If not, it return with false.           */
WITHOUT_CLASSIFICATION	//System.err.println("Non-match in fixed-string search.");
WITHOUT_CLASSIFICATION	//System.err.println("Non-match in fixed-string search.");
WITHOUT_CLASSIFICATION	//System.err.println("Non-match in fixed-string search.");
WITHOUT_CLASSIFICATION	/*           * Checks whether the expression starts with ".*".           */
WITHOUT_CLASSIFICATION	/*           * Checks whether the expression starts with ".*".           */
WITHOUT_CLASSIFICATION	/*           * Checks whether the expression starts with ".*".           */
WITHOUT_CLASSIFICATION	/*           * Optimization against the first character.           */
WITHOUT_CLASSIFICATION	/*           * Optimization against the first character.           */
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);
WITHOUT_CLASSIFICATION	/*           * Straightforward matching.           */
WITHOUT_CLASSIFICATION	/*           * Straightforward matching.           */
WITHOUT_CLASSIFICATION	// Internal use only. // The @ always matches line beginnings.
WITHOUT_CLASSIFICATION	// Internal use only. // The @ always matches line beginnings.
WITHOUT_CLASSIFICATION	// switch anchor type
WITHOUT_CLASSIFICATION	// switch anchor type
WITHOUT_CLASSIFICATION	// ********
WITHOUT_CLASSIFICATION	// ********
WITHOUT_CLASSIFICATION	/*                       * Saves current position to avoid                       * zero-width repeats.                       */
WITHOUT_CLASSIFICATION	/*                       * Saves current position to avoid                       * zero-width repeats.                       */
WITHOUT_CLASSIFICATION	/*           * Optimization against the first character.           */
WITHOUT_CLASSIFICATION	//System.err.println("DEBUG: with firstchar-matching: "+this.firstChar);
WITHOUT_CLASSIFICATION	/*           * Straightforward matching.           */
WITHOUT_CLASSIFICATION	// switch anchor type
WITHOUT_CLASSIFICATION	// ********
WITHOUT_CLASSIFICATION	/*                       * Saves current position to avoid                       * zero-width repeats.                       */
WITHOUT_CLASSIFICATION	// "w"
WITHOUT_CLASSIFICATION	// Op.CHAR
WITHOUT_CLASSIFICATION	//+this.fixedString
WITHOUT_CLASSIFICATION	// This pattern has a fixed string of which length is more than one.
WITHOUT_CLASSIFICATION	// Cf // Mn // Mc
WITHOUT_CLASSIFICATION	// "u"
WITHOUT_CLASSIFICATION	/*    public ParseException(String mes) {        this(mes, -1);    }    */
WITHOUT_CLASSIFICATION	// L // L // L // L // L // N // N // N // Mc
WITHOUT_CLASSIFICATION	// Single character // [a-zA-Z] // [^a-zA-Z] // ^ $ ... // literal String  // X* // X*? // X? // X?? // X|Y // ( and ) // \1 \2 ... // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(..)yes|no)
WITHOUT_CLASSIFICATION	// Legacy word characters
WITHOUT_CLASSIFICATION	// for UNION
WITHOUT_CLASSIFICATION	//System.err.println("Creates UnionOp");
WITHOUT_CLASSIFICATION	// ModifierOp
WITHOUT_CLASSIFICATION	// for CLOSURE, QUESTION
WITHOUT_CLASSIFICATION	// for UNIoN
WITHOUT_CLASSIFICATION	// STRING
WITHOUT_CLASSIFICATION	// RANGE, NRANGE
WITHOUT_CLASSIFICATION	//case 0x0b:  ret = "\\v";  break;
WITHOUT_CLASSIFICATION	// for RANGE or NRANGE
WITHOUT_CLASSIFICATION	//System.err.println("Token#addRange(): "+start+" "+end);
WITHOUT_CLASSIFICATION	//System.err.println("Do sorting: "+this.ranges.length);
WITHOUT_CLASSIFICATION	// Index of writing point // Index of processing point
WITHOUT_CLASSIFICATION	//System.err.println("Token#substractRanges(): Entry: "+this.ranges.length+", "+tok.ranges.length);
WITHOUT_CLASSIFICATION	// Not overlapped // src: o-----o // sub:         o-----o // res: o-----o // Reuse sub
WITHOUT_CLASSIFICATION	// src:    o--------o // sub:  o------------o // res: empty // Reuse sub
WITHOUT_CLASSIFICATION	// src:    o--------o // sub:  o----o // res:       o-----o // Reuse src(=res)
WITHOUT_CLASSIFICATION	// src:    o--------o // sub:          o----o // res:    o-----o // Reuse sub
WITHOUT_CLASSIFICATION	// Not overlapped // src:          o-----o // sub: o----o
WITHOUT_CLASSIFICATION	// this.ranges is sorted and compacted.
WITHOUT_CLASSIFICATION	// Not overlapped // src1: o-----o // src2:         o-----o // res:  empty // Reuse src2
WITHOUT_CLASSIFICATION	// Overlapped // src1:    o--------o // src2:  o----o // src2:      o----o // src2:          o----o // src2:  o------------o
WITHOUT_CLASSIFICATION	// src1:    o--------o // src2:  o------------o // res:     o--------o // Reuse src2
WITHOUT_CLASSIFICATION	// src1:    o--------o // src2:  o----o // res:     o--o // Reuse the rest of src1
WITHOUT_CLASSIFICATION	// src1:    o--------o // src2:      o----o // res:       o----o // Reuse the rest of src1
WITHOUT_CLASSIFICATION	// Not overlapped // src1:          o-----o // src2: o----o
WITHOUT_CLASSIFICATION	// 32 is the number of bits in `int'.
WITHOUT_CLASSIFICATION	// s&0x1f : 0-31
WITHOUT_CLASSIFICATION	// '|' // '*' // '+' // '?' // '(' // ')' // '.' // '[' // '\' // '^' // '$' // '(?:' // '(?=' // '(?!' // '(?<=' // '(?<!' // '(?>' // '(?[' // '[:' in a character class // '(?#' // '(?' [\-,a-z,A-Z] // '(?(' // '-[' in a character class
WITHOUT_CLASSIFICATION	//this.setLocale(Locale.getDefault());
WITHOUT_CLASSIFICATION	//this.setLocale(locale);
WITHOUT_CLASSIFICATION	// In a character class, this.chardata has one character, that is to say, // a pair of surrogates is composed and stored to this.chardata.
WITHOUT_CLASSIFICATION	// Through down
WITHOUT_CLASSIFICATION	// Options
WITHOUT_CLASSIFICATION	// conditional // this.offsets points the next of '('.
WITHOUT_CLASSIFICATION	// '|'
WITHOUT_CLASSIFICATION	//tok = Token.createConcat(tok, this.parseFactor());
WITHOUT_CLASSIFICATION	// ----------------------------------------------------------------
WITHOUT_CLASSIFICATION	// ----------------------------------------------------------------
WITHOUT_CLASSIFICATION	// ')'
WITHOUT_CLASSIFICATION	// ')'
WITHOUT_CLASSIFICATION	// ')'
WITHOUT_CLASSIFICATION	// X+ -> XX*
WITHOUT_CLASSIFICATION	// X? -> X|
WITHOUT_CLASSIFICATION	// Skips ')'
WITHOUT_CLASSIFICATION	// Skips ')'
WITHOUT_CLASSIFICATION	// this.offset points the next of '('
WITHOUT_CLASSIFICATION	// Parses a condition.
WITHOUT_CLASSIFICATION	// Points '('.
WITHOUT_CLASSIFICATION	// Parses yes/no-patterns.
WITHOUT_CLASSIFICATION	// this.offset points the next of '?'. // modifiers ::= [imsw]* ('-' [imsw]*)? ':'
WITHOUT_CLASSIFICATION	// '-' or ':'?
WITHOUT_CLASSIFICATION	// ':'?
WITHOUT_CLASSIFICATION	// such as (?-i)
WITHOUT_CLASSIFICATION	// Must be in 0x0040-0x005f
WITHOUT_CLASSIFICATION	// through down
WITHOUT_CLASSIFICATION	// this.offset -> next of '{'
WITHOUT_CLASSIFICATION	// {min,max}
WITHOUT_CLASSIFICATION	// assume {min,}
WITHOUT_CLASSIFICATION	//System.err.println("CLOSURE: "+min+", "+max);
WITHOUT_CLASSIFICATION	// '(?:' // '(?(' // (?modifiers ... )
WITHOUT_CLASSIFICATION	// Skips '.'
WITHOUT_CLASSIFICATION	// handle category escape
WITHOUT_CLASSIFICATION	// '['
WITHOUT_CLASSIFICATION	// '^'
WITHOUT_CLASSIFICATION	// Literal char // . // XY // X|Y|Z // X* // [a-zA-Z] etc. // [^a-zA-Z] etc. // (X) or (?:X) // // ^ $ \b \B \< \> \A \Z \z // *? +? // strings // back references // (?=...) // (?!...) // (?<=...) // (?<!...) // (?>...) // (?ims-ims:...) // (?(...)yes|no)
WITHOUT_CLASSIFICATION	// if not shorthands... // Here is no '-'.
WITHOUT_CLASSIFICATION	//tok.dumpRanges();
WITHOUT_CLASSIFICATION	// *** It is not a bug.
WITHOUT_CLASSIFICATION	// for CLOSURE
WITHOUT_CLASSIFICATION	// for CLOSURE
WITHOUT_CLASSIFICATION	// for CLOSURE
WITHOUT_CLASSIFICATION	// for STRING
WITHOUT_CLASSIFICATION	// for STRING
WITHOUT_CLASSIFICATION	// *******
WITHOUT_CLASSIFICATION	// ***** Really?
WITHOUT_CLASSIFICATION	// ***** Really?
WITHOUT_CLASSIFICATION	// infinity
WITHOUT_CLASSIFICATION	// When this.child.getMaxLength() < 0, // this returns minus value
WITHOUT_CLASSIFICATION	// ******
WITHOUT_CLASSIFICATION	/*               *  a|b|c -> FC_TERMINAL               *  a|.|c -> FC_ANY               *  a|b|  -> FC_CONTINUE               */
WITHOUT_CLASSIFICATION	// ****
WITHOUT_CLASSIFICATION	// **** We can not optimize.
WITHOUT_CLASSIFICATION	// **** We can not optimize.
WITHOUT_CLASSIFICATION	// ------------------------------------------------------
WITHOUT_CLASSIFICATION	//blockNames in UNICODE 3.1 that supported by XML Schema REC             
WITHOUT_CLASSIFICATION	/*0000..007F;*/
WITHOUT_CLASSIFICATION	/*0080..00FF;*/
WITHOUT_CLASSIFICATION	/*0100..017F;*/
WITHOUT_CLASSIFICATION	/*0180..024F;*/
WITHOUT_CLASSIFICATION	/*0250..02AF;*/
WITHOUT_CLASSIFICATION	/*02B0..02FF;*/
WITHOUT_CLASSIFICATION	/*0300..036F;*/
WITHOUT_CLASSIFICATION	/*0370..03FF;*/
WITHOUT_CLASSIFICATION	/*0400..04FF;*/
WITHOUT_CLASSIFICATION	/*0530..058F;*/
WITHOUT_CLASSIFICATION	/*0600..06FF;*/
WITHOUT_CLASSIFICATION	/*0700..074F;*/
WITHOUT_CLASSIFICATION	/*0780..07BF;*/
WITHOUT_CLASSIFICATION	/*0900..097F;*/
WITHOUT_CLASSIFICATION	/*0980..09FF;*/
WITHOUT_CLASSIFICATION	/*0A80..0AFF;*/
WITHOUT_CLASSIFICATION	/*0B00..0B7F;*/
WITHOUT_CLASSIFICATION	/*0B80..0BFF;*/
WITHOUT_CLASSIFICATION	/*0C00..0C7F;*/
WITHOUT_CLASSIFICATION	/*0C80..0CFF;*/
WITHOUT_CLASSIFICATION	/*0D80..0DFF;*/
WITHOUT_CLASSIFICATION	/*0E00..0E7F;*/
WITHOUT_CLASSIFICATION	/*0E80..0EFF;*/
WITHOUT_CLASSIFICATION	/*0F00..0FFF;*/
WITHOUT_CLASSIFICATION	/*1000..109F;*/
WITHOUT_CLASSIFICATION	/*1100..11FF;*/
WITHOUT_CLASSIFICATION	/*1200..137F;*/
WITHOUT_CLASSIFICATION	/*13A0..13FF;*/
WITHOUT_CLASSIFICATION	/*1400..167F;*/
WITHOUT_CLASSIFICATION	/*1680..169F;*/
WITHOUT_CLASSIFICATION	/*1780..17FF;*/
WITHOUT_CLASSIFICATION	/*1800..18AF;*/
WITHOUT_CLASSIFICATION	/*1E00..1EFF;*/
WITHOUT_CLASSIFICATION	/*1F00..1FFF;*/
WITHOUT_CLASSIFICATION	/*2070..209F;*/
WITHOUT_CLASSIFICATION	/*20A0..20CF;*/
WITHOUT_CLASSIFICATION	/*20D0..20FF;*/
WITHOUT_CLASSIFICATION	/*2100..214F;*/
WITHOUT_CLASSIFICATION	/*2150..218F;*/
WITHOUT_CLASSIFICATION	/*2200..22FF;*/
WITHOUT_CLASSIFICATION	/*2300..23FF;*/
WITHOUT_CLASSIFICATION	/*2400..243F;*/
WITHOUT_CLASSIFICATION	/*2440..245F;*/
WITHOUT_CLASSIFICATION	/*2460..24FF;*/
WITHOUT_CLASSIFICATION	/*2580..259F;*/
WITHOUT_CLASSIFICATION	/*25A0..25FF;*/
WITHOUT_CLASSIFICATION	/*2600..26FF;*/
WITHOUT_CLASSIFICATION	/*2700..27BF;*/
WITHOUT_CLASSIFICATION	/*2800..28FF;*/
WITHOUT_CLASSIFICATION	/*2E80..2EFF;*/
WITHOUT_CLASSIFICATION	/*2F00..2FDF;*/
WITHOUT_CLASSIFICATION	/*3000..303F;*/
WITHOUT_CLASSIFICATION	/*3040..309F;*/
WITHOUT_CLASSIFICATION	/*30A0..30FF;*/
WITHOUT_CLASSIFICATION	/*3100..312F;*/
WITHOUT_CLASSIFICATION	/*3130..318F;*/
WITHOUT_CLASSIFICATION	/*31A0..31BF;*/
WITHOUT_CLASSIFICATION	/*3200..32FF;*/
WITHOUT_CLASSIFICATION	/*3300..33FF;*/
WITHOUT_CLASSIFICATION	/*3400..4DB5;*/
WITHOUT_CLASSIFICATION	/*4E00..9FFF;*/
WITHOUT_CLASSIFICATION	/*A490..A4CF;*/
WITHOUT_CLASSIFICATION	/*AC00..D7A3;*/
WITHOUT_CLASSIFICATION	/*E000..F8FF;*/
WITHOUT_CLASSIFICATION	/*F900..FAFF;*/
WITHOUT_CLASSIFICATION	/*FB00..FB4F;*/
WITHOUT_CLASSIFICATION	/*FE20..FE2F;*/
WITHOUT_CLASSIFICATION	/*FE30..FE4F;*/
WITHOUT_CLASSIFICATION	/*FE50..FE6F;*/
WITHOUT_CLASSIFICATION	/*FE70..FEFE;*/
WITHOUT_CLASSIFICATION	/*FEFF..FEFF;*/
WITHOUT_CLASSIFICATION	/*10300..1032F;*/
WITHOUT_CLASSIFICATION	/*10330..1034F;*/
WITHOUT_CLASSIFICATION	/*10400..1044F;*/
WITHOUT_CLASSIFICATION	/*1D000..1D0FF;*/
WITHOUT_CLASSIFICATION	/*1D100..1D1FF;*/
WITHOUT_CLASSIFICATION	/*20000..2A6D6;*/
WITHOUT_CLASSIFICATION	/*2F800..2FA1F;*/
WITHOUT_CLASSIFICATION	/*E0000..E007F;*/
WITHOUT_CLASSIFICATION	//missing 2 private use add manually
WITHOUT_CLASSIFICATION	// 84
WITHOUT_CLASSIFICATION	//build table of Pi values
WITHOUT_CLASSIFICATION	//build table of Pf values
WITHOUT_CLASSIFICATION	// for all characters
WITHOUT_CLASSIFICATION	// Unassigned
WITHOUT_CLASSIFICATION	// TR#18 1.2
WITHOUT_CLASSIFICATION	// Z
WITHOUT_CLASSIFICATION	// Lu Ll Lo Nd
WITHOUT_CLASSIFICATION	// Perl extension
WITHOUT_CLASSIFICATION	//this.setLocale(locale);
WITHOUT_CLASSIFICATION	// X+ -> XX*
WITHOUT_CLASSIFICATION	// X? -> X|
WITHOUT_CLASSIFICATION	// Skips ')'
WITHOUT_CLASSIFICATION	// '['
WITHOUT_CLASSIFICATION	// '^'
WITHOUT_CLASSIFICATION	// Skips ']'
WITHOUT_CLASSIFICATION	// for STRING
WITHOUT_CLASSIFICATION	// ------------------------------------------------------
WITHOUT_CLASSIFICATION	// \pM* // \PM + \pM*
WITHOUT_CLASSIFICATION	// Lu // Ll // Lo
WITHOUT_CLASSIFICATION	// Lu Ll Lo // Nd
WITHOUT_CLASSIFICATION	// synchronized // if null
WITHOUT_CLASSIFICATION	//DEBUG //System.err.println("isRegisterNonXS: "+name);
WITHOUT_CLASSIFICATION	// [{ASSIGNED}]-[{M},{C}]
WITHOUT_CLASSIFICATION	// hangul_medial and hangul_final // extras
WITHOUT_CLASSIFICATION	// base_char?
WITHOUT_CLASSIFICATION	//case 0x0b:  ret = "\\v";  break;
WITHOUT_CLASSIFICATION	// This is CONCAT, and new child is CONCAT.
WITHOUT_CLASSIFICATION	// Recursion
WITHOUT_CLASSIFICATION	//System.err.println("Merge '"+previous+"' and '"+tok+"'.");
WITHOUT_CLASSIFICATION	// Replace previous token by STRING
WITHOUT_CLASSIFICATION	// Subraction
WITHOUT_CLASSIFICATION	// Exit this loop
WITHOUT_CLASSIFICATION	// if not shorthands...
WITHOUT_CLASSIFICATION	// Here is no '-'.
WITHOUT_CLASSIFICATION	// c '-' ']' -> '-' is a single-range.
WITHOUT_CLASSIFICATION	// if - is at the last position of the group
WITHOUT_CLASSIFICATION	// LINE FEED U+000A
WITHOUT_CLASSIFICATION	// CRRIAGE RETURN U+000D
WITHOUT_CLASSIFICATION	// HORIZONTAL TABULATION U+0009
WITHOUT_CLASSIFICATION	// return actucal char
WITHOUT_CLASSIFICATION	// \ + c // backsolidus
WITHOUT_CLASSIFICATION	// Found '-' // Is this '-' is a from-to token?? // Skips '-'
WITHOUT_CLASSIFICATION	// getIANA2JavaMapping(String):String
WITHOUT_CLASSIFICATION	// This implementation was changed to not introduce multi line content.
WITHOUT_CLASSIFICATION	// form integral number of 6-bit groups
WITHOUT_CLASSIFICATION	//encodedData[encodedIndex] = 0xa;
WITHOUT_CLASSIFICATION	// remove white spaces
WITHOUT_CLASSIFICATION	//should be divisible by four
WITHOUT_CLASSIFICATION	//if found "no data" just return null
WITHOUT_CLASSIFICATION	//if found "no data" just return null
WITHOUT_CLASSIFICATION	//Check if they are PAD characters //Two PAD e.g. 3c[Pad][Pad] //last 4 bits should be zero
WITHOUT_CLASSIFICATION	//One PAD  e.g. 3cQ[Pad]
WITHOUT_CLASSIFICATION	//last 2 bits should be zero
WITHOUT_CLASSIFICATION	//an error  like "3c[Pad]r", "3cdX", "3cXd", "3cXX" where X is non data
WITHOUT_CLASSIFICATION	//No PAD e.g 3cQl
WITHOUT_CLASSIFICATION	// count characters that's not whitespace
WITHOUT_CLASSIFICATION	/* * format validation * * This class encodes/decodes hexadecimal data * @author Jeffrey Rodriguez */
WITHOUT_CLASSIFICATION	// add IANA to Java encoding mappings.
WITHOUT_CLASSIFICATION	// proposed addition (see above for details):
WITHOUT_CLASSIFICATION	// Add support for Cp1252 and its friends
WITHOUT_CLASSIFICATION	// <clinit>()
WITHOUT_CLASSIFICATION	// added since this encoding only differs w.r.t. presentation 
WITHOUT_CLASSIFICATION	// removeIANA2JavaMapping(String):String
WITHOUT_CLASSIFICATION	// putIANA2JavaMapping(String,String)
WITHOUT_CLASSIFICATION	// putJava2IANAMapping(String,String)
WITHOUT_CLASSIFICATION	// getJava2IANAMapping(String):String
WITHOUT_CLASSIFICATION	// Adding new aliases as proposed in // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0058.html
WITHOUT_CLASSIFICATION	// REVISIT: //   j:CNS11643 -> EUC-TW? //   ISO-2022-CN? ISO-2022-CN-EXT?
WITHOUT_CLASSIFICATION	// add Java to IANA encoding mappings //fJava2IANAMap.put("8859_1",    "US-ASCII"); // ?
WITHOUT_CLASSIFICATION	// // Public static methods //
WITHOUT_CLASSIFICATION	// removeJava2IANAMapping
WITHOUT_CLASSIFICATION	// class EncodingMap
WITHOUT_CLASSIFICATION	//RFC 2732 added '[' and ']' as reserved characters
WITHOUT_CLASSIFICATION	// Add ASCII Digits and ASCII Hex Numbers
WITHOUT_CLASSIFICATION	// Add ASCII Letters and ASCII Hex Numbers
WITHOUT_CLASSIFICATION	// Add ASCII Letters
WITHOUT_CLASSIFICATION	// Add Reserved Characters
WITHOUT_CLASSIFICATION	// Add Mark Characters
WITHOUT_CLASSIFICATION	// Add Scheme Characters
WITHOUT_CLASSIFICATION	// Add Path Characters
WITHOUT_CLASSIFICATION	// Just use null.
WITHOUT_CLASSIFICATION	// just make a copy of the base if spec is empty
WITHOUT_CLASSIFICATION	// search backwards starting from character before ':'.
WITHOUT_CLASSIFICATION	// Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
WITHOUT_CLASSIFICATION	// Authority will be everything up to path, query or fragment
WITHOUT_CLASSIFICATION	// Attempt to parse authority. If the section is an empty string // this is a valid server based authority, so set the host to this // value.
WITHOUT_CLASSIFICATION	// Resolve relative URI to base URI - see RFC 2396 Section 5.2 // In some cases, it might make more sense to throw an exception // (when scheme is specified is the string spec and the base URI // is also specified, for example), but we're just following the // RFC specifications
WITHOUT_CLASSIFICATION	// check for absolute path - RFC 2396 5.2 #5
WITHOUT_CLASSIFICATION	// 6a - get all but the last segment of the base URI path
WITHOUT_CLASSIFICATION	// check for scheme - RFC 2396 5.2 #3 // if we found a scheme, it means absolute URI, so we're done
WITHOUT_CLASSIFICATION	// check for authority - RFC 2396 5.2 #4 // if we found a host, then we've got a network path, so we're done
WITHOUT_CLASSIFICATION	// if we get to this point, we need to resolve relative path // RFC 2396 5.2 #6
WITHOUT_CLASSIFICATION	// 6b - append the relative URI path
WITHOUT_CLASSIFICATION	// 6c - remove all "./" where "." is a complete path segment
WITHOUT_CLASSIFICATION	// 6d - remove "." if path ends with "." as a complete path segment
WITHOUT_CLASSIFICATION	// 6f - remove ending "<segment>/.." where "<segment>" is a // complete path segment
WITHOUT_CLASSIFICATION	// userinfo is everything up to @
WITHOUT_CLASSIFICATION	// host is everything up to last ':', or up to  // and including ']' if followed by ':'.
WITHOUT_CLASSIFICATION	// port
WITHOUT_CLASSIFICATION	// Check if the host is well formed.
WITHOUT_CLASSIFICATION	// Check that port is well formed if it exists. // REVISIT: There's no restriction on port value ranges, but // perform the same check as in setPort to be consistent. Pass // in a string to this method instead of an integer.
WITHOUT_CLASSIFICATION	// Check that userinfo is well formed if it exists.
WITHOUT_CLASSIFICATION	// Userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// can check against path characters because the set // is the same except for '/' which we've already excluded.
WITHOUT_CLASSIFICATION	// path - everything up to query string or fragment
WITHOUT_CLASSIFICATION	// RFC 2732 only allows '[' and ']' to appear in the opaque part.
WITHOUT_CLASSIFICATION	// Scan path. // abs_path = "/"  path_segments // rel_path = rel_segment [ abs_path ]
WITHOUT_CLASSIFICATION	// Path segments cannot contain '[' or ']' since pchar // production was not changed by RFC 2732.
WITHOUT_CLASSIFICATION	// Scan opaque part. // opaque_part = uric_no_slash *uric
WITHOUT_CLASSIFICATION	// query - starts with ? and up to fragment or end
WITHOUT_CLASSIFICATION	// fragment - starts with #
WITHOUT_CLASSIFICATION	// Server based authority.
WITHOUT_CLASSIFICATION	// the second hex character if a character needs to be escaped
WITHOUT_CLASSIFICATION	// Registry based authority.
WITHOUT_CLASSIFICATION	// reg_name = 1*( unreserved | escaped | "$" | "," |  //            ";" | ":" | "@" | "&" | "=" | "+" )
WITHOUT_CLASSIFICATION	// presence of the host (whether valid or empty) means // double-slashes which means generic uri
WITHOUT_CLASSIFICATION	// Check if the host is a valid IPv6reference.
WITHOUT_CLASSIFICATION	// Cannot start with a '.', '-', or end with a '-'.
WITHOUT_CLASSIFICATION	// rightmost domain label starting with digit indicates IP address // since top level domain label can only start with an alpha // see RFC 2396 Section 3.2.2
WITHOUT_CLASSIFICATION	// hostname      = *( domainlabel "." ) toplabel [ "." ] // domainlabel   = alphanum | alphanum *( alphanum | "-" ) alphanum // toplabel      = alpha | alpha *( alphanum | "-" ) alphanum
WITHOUT_CLASSIFICATION	// RFC 2396 states that hostnames take the form described in  // RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According // to RFC 1034, hostnames are limited to 255 characters.
WITHOUT_CLASSIFICATION	// domain labels can contain alphanumerics and '-" // but must start and end with an alphanumeric
WITHOUT_CLASSIFICATION	// RFC 1034: Labels must be 63 characters or less.
WITHOUT_CLASSIFICATION	// Check that that there are no more than three digits // in this segment.
WITHOUT_CLASSIFICATION	// Check that this segment is not greater than 255.
WITHOUT_CLASSIFICATION	// Check if string is a potential match for IPv6reference.
WITHOUT_CLASSIFICATION	// Counter for the number of 16-bit sections read in the address.
WITHOUT_CLASSIFICATION	// Scan hex sequence before possible '::' or IPv4 address.
WITHOUT_CLASSIFICATION	// Address must contain 128-bits of information.
WITHOUT_CLASSIFICATION	// '::' represents at least one 16-bit group of zeros.
WITHOUT_CLASSIFICATION	// Trailing zeros will fill out the rest of the address.
WITHOUT_CLASSIFICATION	// If the second character wasn't ':', in order to be valid, // the remainder of the string must match IPv4Address,  // and we must have read exactly 6 16-bit groups.
WITHOUT_CLASSIFICATION	// 3. Scan hex sequence after '::'.
WITHOUT_CLASSIFICATION	// We've either reached the end of the string, the address ends in // an IPv4 address, or it is invalid. scanHexSequence has already  // made sure that we have the right number of bits. 
WITHOUT_CLASSIFICATION	// IPv6 addresses are 128-bit, so there can be at most eight sections.
WITHOUT_CLASSIFICATION	// This could be '::'.
WITHOUT_CLASSIFICATION	// There can be at most 4 hex digits per group.
WITHOUT_CLASSIFICATION	// which ASCII characters need to be escaped
WITHOUT_CLASSIFICATION	// // Static initialization //
WITHOUT_CLASSIFICATION	// we saw some non-ascii character
WITHOUT_CLASSIFICATION	// for each byte
WITHOUT_CLASSIFICATION	// for non-ascii character: make it positive, then escape
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// isValidName(String):boolean
WITHOUT_CLASSIFICATION	// // XML Schema anyURI specific information //
WITHOUT_CLASSIFICATION	// To encode special characters in anyURI, by using %HH to represent // special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', etc. // and non-ASCII characters (whose value >= 128).
WITHOUT_CLASSIFICATION	// for each character in the anyURI
WITHOUT_CLASSIFICATION	// If encoding happened, create a new string; // otherwise, return the orginal one.
WITHOUT_CLASSIFICATION	// // Constants //
WITHOUT_CLASSIFICATION	// Initializing the Character Flag Array // Code generated by: XMLCharGenerator.
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 49
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) 49 // Fill 2 of value (byte) -71
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -71
WITHOUT_CLASSIFICATION	// Fill 26 of value (byte) -3 // Fill 60 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33 // Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 31 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 58 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 11 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 53 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 20 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 44 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 18 of value (byte) -19 // Fill 13 of value (byte) 33 // Fill 12 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 66 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 12 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 36 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 17 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 11 of value (byte) 33 // Fill 27 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 46 of value (byte) 33 // Fill 26 of value (byte) -19 // Fill 5 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19 // Fill 8 of value (byte) -87 // Fill 13 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 6 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 71 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 16 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 10 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 16 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) 33 // Fill 12 of value (byte) -87 // Fill 3 of value (byte) -19 // Fill 12 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87 // Fill 18 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 5 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) 33 // Fill 9 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 7 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 16 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 145 of value (byte) 33 // Fill 46 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 7 of value (byte) -87 // Fill 5 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 9 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -87 // Fill 39 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) 33 // Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 33 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 20 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 21 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 230 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 10 of value (byte) 33 // Fill 39 of value (byte) -19 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 41 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 11 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 40 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 40 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 68 of value (byte) 33
WITHOUT_CLASSIFICATION	// // Public static methods //
WITHOUT_CLASSIFICATION	// Fill 31 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 53 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 13 of value (byte) -19 // Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 211 of value (byte) 33 // Fill 13 of value (byte) -87 // Fill 4 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 81 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3714 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 25 of value (byte) 33 // Fill 9 of value (byte) -19 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 84 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 90 of value (byte) -19
WITHOUT_CLASSIFICATION	// isValid(int):boolean
WITHOUT_CLASSIFICATION	// isInvalid(int):boolean
WITHOUT_CLASSIFICATION	// isContent(int):boolean
WITHOUT_CLASSIFICATION	// isMarkup(int):boolean
WITHOUT_CLASSIFICATION	// isSpace(int):boolean
WITHOUT_CLASSIFICATION	// isNameStart(int):boolean
WITHOUT_CLASSIFICATION	// isName(int):boolean
WITHOUT_CLASSIFICATION	// isNCNameStart(int):boolean
WITHOUT_CLASSIFICATION	// isNCName(int):boolean
WITHOUT_CLASSIFICATION	// isPubid(int):boolean
WITHOUT_CLASSIFICATION	/*      * [5] Name ::= (Letter | '_' | ':') (NameChar)*      */
WITHOUT_CLASSIFICATION	// isValidName(String):boolean
WITHOUT_CLASSIFICATION	/*      * from the namespace rec      * [4] NCName ::= (Letter | '_') (NCNameChar)*      */
WITHOUT_CLASSIFICATION	// isValidNCName(String):boolean
WITHOUT_CLASSIFICATION	/*      * [7] Nmtoken ::= (NameChar)+      */
WITHOUT_CLASSIFICATION	// encodings
WITHOUT_CLASSIFICATION	// isValidIANAEncoding(String):boolean
WITHOUT_CLASSIFICATION	// class XMLChar
WITHOUT_CLASSIFICATION	//order constants
WITHOUT_CLASSIFICATION	// check whether the character is in the range 0x30 ~ 0x39
WITHOUT_CLASSIFICATION	// interface TypeValidator
WITHOUT_CLASSIFICATION	// This implementation was changed to not introduce multi line content.
WITHOUT_CLASSIFICATION	// form integral number of 6-bit groups
WITHOUT_CLASSIFICATION	//encodedData[encodedIndex] = 0xa;
WITHOUT_CLASSIFICATION	// remove white spaces
WITHOUT_CLASSIFICATION	//should be divisible by four
WITHOUT_CLASSIFICATION	//if found "no data" just return null
WITHOUT_CLASSIFICATION	//One PAD  e.g. 3cQ[Pad]
WITHOUT_CLASSIFICATION	//last 2 bits should be zero
WITHOUT_CLASSIFICATION	//an error  like "3c[Pad]r", "3cdX", "3cXd", "3cXX" where X is non data
WITHOUT_CLASSIFICATION	//No PAD e.g 3cQl
WITHOUT_CLASSIFICATION	// count characters that's not whitespace
WITHOUT_CLASSIFICATION	// // Data //
WITHOUT_CLASSIFICATION	// // Static initialization //
WITHOUT_CLASSIFICATION	// Add support for Cp1252 and its friends
WITHOUT_CLASSIFICATION	// added since this encoding only differs w.r.t. presentation 
WITHOUT_CLASSIFICATION	// Adding new aliases as proposed in // http://lists.w3.org/Archives/Public/ietf-charset/2002JulSep/0058.html
WITHOUT_CLASSIFICATION	// REVISIT: //   j:CNS11643 -> EUC-TW? //   ISO-2022-CN? ISO-2022-CN-EXT?
WITHOUT_CLASSIFICATION	// add Java to IANA encoding mappings //fJava2IANAMap.put("8859_1",    "US-ASCII"); // ?
WITHOUT_CLASSIFICATION	// proposed addition (see above for details):
WITHOUT_CLASSIFICATION	// <clinit>()
WITHOUT_CLASSIFICATION	// // Public static methods //
WITHOUT_CLASSIFICATION	// putIANA2JavaMapping(String,String)
WITHOUT_CLASSIFICATION	// getIANA2JavaMapping(String):String
WITHOUT_CLASSIFICATION	// removeIANA2JavaMapping(String):String
WITHOUT_CLASSIFICATION	//RFC 2732 added '[' and ']' as reserved characters
WITHOUT_CLASSIFICATION	// Add ASCII Digits and ASCII Hex Numbers
WITHOUT_CLASSIFICATION	// Add ASCII Letters and ASCII Hex Numbers
WITHOUT_CLASSIFICATION	// isValidName(String):boolean
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 40 of value (byte) -19 // Fill 7379 of value (byte) 33 // Fill 20902 of value (byte) -19 // Fill 3162 of value (byte) 33 // Fill 11172 of value (byte) -19 // Fill 92 of value (byte) 33 // Fill 8190 of value (byte) 33
WITHOUT_CLASSIFICATION	// if the character is in the range 0x30 ~ 0x39, return its int value (0~9), // otherwise, return -1
WITHOUT_CLASSIFICATION	// Add Reserved Characters
WITHOUT_CLASSIFICATION	// Add Scheme Characters
WITHOUT_CLASSIFICATION	// Add Userinfo Characters
WITHOUT_CLASSIFICATION	// Add Path Characters
WITHOUT_CLASSIFICATION	// Just use null.
WITHOUT_CLASSIFICATION	// search backwards starting from character before ':'.
WITHOUT_CLASSIFICATION	// A standalone base is a valid URI according to spec
WITHOUT_CLASSIFICATION	// Neither 'scheme:' or 'scheme:#fragment' are valid URIs.
WITHOUT_CLASSIFICATION	// Authority will be everything up to path, query or fragment
WITHOUT_CLASSIFICATION	// Attempt to parse authority. If the section is an empty string // this is a valid server based authority, so set the host to this // value.
WITHOUT_CLASSIFICATION	// If we didn't find authority we need to back up. Attempt to // match against abs_path next.
WITHOUT_CLASSIFICATION	// Resolve relative URI to base URI - see RFC 2396 Section 5.2 // In some cases, it might make more sense to throw an exception // (when scheme is specified is the string spec and the base URI // is also specified, for example), but we're just following the // RFC specifications
WITHOUT_CLASSIFICATION	// check to see if this is the current doc - RFC 2396 5.2 #2 // note that this is slightly different from the RFC spec in that // we don't include the check for query string being null // - this handles cases where the urispec is just a query // string or a fragment (e.g. "?y" or "#s") - // see <http://www.ics.uci.edu/~fielding/url/test1.html> which // identified this as a bug in the RFC
WITHOUT_CLASSIFICATION	// check for authority - RFC 2396 5.2 #4 // if we found a host, then we've got a network path, so we're done
WITHOUT_CLASSIFICATION	// check for absolute path - RFC 2396 5.2 #5
WITHOUT_CLASSIFICATION	// 6a - get all but the last segment of the base URI path
WITHOUT_CLASSIFICATION	// 6b - append the relative URI path
WITHOUT_CLASSIFICATION	// 6c - remove all "./" where "." is a complete path segment
WITHOUT_CLASSIFICATION	// 6d - remove "." if path ends with "." as a complete path segment
WITHOUT_CLASSIFICATION	// 6e - remove all "<segment>/../" where "<segment>" is a complete // path segment not equal to ".."
WITHOUT_CLASSIFICATION	// 6f - remove ending "<segment>/.." where "<segment>" is a // complete path segment
WITHOUT_CLASSIFICATION	// userinfo is everything up to @
WITHOUT_CLASSIFICATION	// host is everything up to last ':', or up to  // and including ']' if followed by ':'.
WITHOUT_CLASSIFICATION	// port
WITHOUT_CLASSIFICATION	// Check if the host is well formed.
WITHOUT_CLASSIFICATION	// Check that port is well formed if it exists. // REVISIT: There's no restriction on port value ranges, but // perform the same check as in setPort to be consistent. Pass // in a string to this method instead of an integer.
WITHOUT_CLASSIFICATION	// Check that userinfo is well formed if it exists.
WITHOUT_CLASSIFICATION	// Userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// check for valid escape sequence
WITHOUT_CLASSIFICATION	// can check against path characters because the set // is the same except for '/' which we've already excluded.
WITHOUT_CLASSIFICATION	// path - everything up to query string or fragment
WITHOUT_CLASSIFICATION	// RFC 2732 only allows '[' and ']' to appear in the opaque part.
WITHOUT_CLASSIFICATION	// Scan path. // abs_path = "/"  path_segments // rel_path = rel_segment [ abs_path ]
WITHOUT_CLASSIFICATION	// Scan opaque part. // opaque_part = uric_no_slash *uric
WITHOUT_CLASSIFICATION	// query - starts with ? and up to fragment or end
WITHOUT_CLASSIFICATION	// fragment - starts with #
WITHOUT_CLASSIFICATION	// Server based authority.
WITHOUT_CLASSIFICATION	// Registry based authority.
WITHOUT_CLASSIFICATION	// userinfo can contain alphanumerics, mark characters, escaped // and ';',':','&','=','+','$',','
WITHOUT_CLASSIFICATION	// reg_name = 1*( unreserved | escaped | "$" | "," |  //            ";" | ":" | "@" | "&" | "=" | "+" )
WITHOUT_CLASSIFICATION	// presence of the host (whether valid or empty) means // double-slashes which means generic uri
WITHOUT_CLASSIFICATION	// Check if the host is a valid IPv6reference.
WITHOUT_CLASSIFICATION	// Cannot start with a '.', '-', or end with a '-'.
WITHOUT_CLASSIFICATION	// rightmost domain label starting with digit indicates IP address // since top level domain label can only start with an alpha // see RFC 2396 Section 3.2.2
WITHOUT_CLASSIFICATION	// RFC 2396 states that hostnames take the form described in  // RFC 1034 (Section 3) and RFC 1123 (Section 2.1). According // to RFC 1034, hostnames are limited to 255 characters.
WITHOUT_CLASSIFICATION	// domain labels can contain alphanumerics and '-" // but must start and end with an alphanumeric
WITHOUT_CLASSIFICATION	// RFC 1034: Labels must be 63 characters or less.
WITHOUT_CLASSIFICATION	// Check that that there are no more than three digits // in this segment.
WITHOUT_CLASSIFICATION	// Check that this segment is not greater than 255.
WITHOUT_CLASSIFICATION	// Check if string is a potential match for IPv6reference.
WITHOUT_CLASSIFICATION	// Counter for the number of 16-bit sections read in the address.
WITHOUT_CLASSIFICATION	// Scan hex sequence before possible '::' or IPv4 address.
WITHOUT_CLASSIFICATION	// Address must contain 128-bits of information.
WITHOUT_CLASSIFICATION	// '::' represents at least one 16-bit group of zeros.
WITHOUT_CLASSIFICATION	// Trailing zeros will fill out the rest of the address.
WITHOUT_CLASSIFICATION	// 3. Scan hex sequence after '::'.
WITHOUT_CLASSIFICATION	// IPv6 addresses are 128-bit, so there can be at most eight sections.
WITHOUT_CLASSIFICATION	// This could be '::'.
WITHOUT_CLASSIFICATION	// There can be at most 4 hex digits per group.
WITHOUT_CLASSIFICATION	// which ASCII characters need to be escaped
WITHOUT_CLASSIFICATION	// Trying to match the following productions: // hexseq = hex4 *( ":" hex4) // hex4   = 1*4HEXDIG
WITHOUT_CLASSIFICATION	// initialize the above 3 arrays
WITHOUT_CLASSIFICATION	// if it's not an ASCII character, break here, and use UTF-8 encoding
WITHOUT_CLASSIFICATION	// we saw some non-ascii character
WITHOUT_CLASSIFICATION	// get UTF-8 bytes for the remaining sub-string
WITHOUT_CLASSIFICATION	// for each byte
WITHOUT_CLASSIFICATION	// for non-ascii character: make it positive, then escape
WITHOUT_CLASSIFICATION	// should never happen
WITHOUT_CLASSIFICATION	// This might be invalid or an IPv4address. If it's potentially an IPv4address, // backup to just after the last valid character that matches hexseq.
WITHOUT_CLASSIFICATION	// // XML Schema anyURI specific information //
WITHOUT_CLASSIFICATION	// To encode special characters in anyURI, by using %HH to represent // special ASCII characters: 0x00~0x1F, 0x7F, ' ', '<', '>', etc. // and non-ASCII characters (whose value >= 128).
WITHOUT_CLASSIFICATION	// for each character in the anyURI
WITHOUT_CLASSIFICATION	// If encoding happened, create a new string; // otherwise, return the orginal one.
WITHOUT_CLASSIFICATION	// // Constants //
WITHOUT_CLASSIFICATION	// Initializing the Character Flag Array // Code generated by: XMLCharGenerator.
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 49
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) 49 // Fill 2 of value (byte) -71
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -71
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33 // Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 31 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 58 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 11 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 53 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 20 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 44 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 3 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 18 of value (byte) -19 // Fill 13 of value (byte) 33 // Fill 12 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 66 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 12 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 36 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33 // Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 28 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 55 of value (byte) 33 // Fill 38 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19 // Fill 8 of value (byte) -87 // Fill 13 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 6 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 71 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 15 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 519 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 53 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 4 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 2 of value (byte) -19 // Fill 16 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33 // Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) 33 // Fill 12 of value (byte) -87 // Fill 3 of value (byte) -19 // Fill 12 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 22 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87 // Fill 18 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 17 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87 // Fill 8 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 5 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 7 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) -87 // Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 23 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 18 of value (byte) 33 // Fill 2 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 16 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 3 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 10 of value (byte) -87 // Fill 145 of value (byte) 33 // Fill 46 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 7 of value (byte) -87 // Fill 5 of value (byte) 33 // Fill 6 of value (byte) -19 // Fill 9 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 10 of value (byte) -87 // Fill 39 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) 33 // Fill 4 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 5 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 8 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 33 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 20 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 6 of value (byte) -87 // Fill 4 of value (byte) 33 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 21 of value (byte) -87 // Fill 3 of value (byte) 33 // Fill 7 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -19 // Fill 41 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 11 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 40 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 9 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 2 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 7 of value (byte) 33 // Fill 2 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 40 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 4 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 8 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 68 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 3 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 7 of value (byte) -19 // Fill 211 of value (byte) 33 // Fill 13 of value (byte) -87 // Fill 4 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) 33 // Fill 2 of value (byte) -19 // Fill 2 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 81 of value (byte) 33 // Fill 3 of value (byte) -19 // Fill 3714 of value (byte) 33
WITHOUT_CLASSIFICATION	// Fill 25 of value (byte) 33 // Fill 9 of value (byte) -19 // Fill 6 of value (byte) -87
WITHOUT_CLASSIFICATION	// Fill 5 of value (byte) -87 // Fill 11 of value (byte) 33 // Fill 84 of value (byte) -19 // Fill 4 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 2 of value (byte) -87 // Fill 2 of value (byte) 33 // Fill 90 of value (byte) -19
WITHOUT_CLASSIFICATION	// Fill 3 of value (byte) -87 // Fill 6 of value (byte) 33 // Fill 40 of value (byte) -19 // Fill 7379 of value (byte) 33 // Fill 20902 of value (byte) -19 // Fill 3162 of value (byte) 33 // Fill 11172 of value (byte) -19 // Fill 92 of value (byte) 33 // Fill 8190 of value (byte) 33
WITHOUT_CLASSIFICATION	// isValid(int):boolean
WITHOUT_CLASSIFICATION	// isInvalid(int):boolean
WITHOUT_CLASSIFICATION	// isContent(int):boolean
WITHOUT_CLASSIFICATION	// isMarkup(int):boolean
WITHOUT_CLASSIFICATION	// isSpace(int):boolean
WITHOUT_CLASSIFICATION	// isNameStart(int):boolean
WITHOUT_CLASSIFICATION	// isName(int):boolean
WITHOUT_CLASSIFICATION	// isNCNameStart(int):boolean
WITHOUT_CLASSIFICATION	// isNCName(int):boolean
WITHOUT_CLASSIFICATION	// isPubid(int):boolean
WITHOUT_CLASSIFICATION	/*      * [5] Name ::= (Letter | '_' | ':') (NameChar)*      */
WITHOUT_CLASSIFICATION	// isValidName(String):boolean
WITHOUT_CLASSIFICATION	/*      * from the namespace rec      * [4] NCName ::= (Letter | '_') (NCNameChar)*      */
WITHOUT_CLASSIFICATION	// isValidNCName(String):boolean
WITHOUT_CLASSIFICATION	/*      * [7] Nmtoken ::= (NameChar)+      */
WITHOUT_CLASSIFICATION	// encodings
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// // Public static methods //
WITHOUT_CLASSIFICATION	// isValidIANAEncoding(String):boolean
WITHOUT_CLASSIFICATION	// isValidIANAEncoding(String):boolean
WITHOUT_CLASSIFICATION	//order constants
WITHOUT_CLASSIFICATION	// check whether the character is in the range 0x30 ~ 0x39
WITHOUT_CLASSIFICATION	// if the character is in the range 0x30 ~ 0x39, return its int value (0~9), // otherwise, return -1
WITHOUT_CLASSIFICATION	// There are attributes to handle.
WITHOUT_CLASSIFICATION	// There are attributes to handle.
WITHOUT_CLASSIFICATION	//XMLTypeResourceImpl
WITHOUT_CLASSIFICATION	//XMLTypeValidator
WITHOUT_CLASSIFICATION	// If the feature is a bidirectional reference with a multiplicity-many reverse, a composite reverse, // or a multiplicity-1 reverse that is already set (on value), then we'll switch things around and  // execute this command a little differently, because otherwise it's not undoable. //
WITHOUT_CLASSIFICATION	// We never directly set a multiplicity-many feature to a list directly.  Instead, we remove the old values // values, move the values that remain, and insert the new values.  If all old values are removed, we'll still // set it to an empty list, or unset it, as appropriate.  //
WITHOUT_CLASSIFICATION	// If we aren't simply removing all the old values... //
WITHOUT_CLASSIFICATION	// If there are values to remove, append a command for them. //
WITHOUT_CLASSIFICATION	// Determine the values that will remain and move them into the right order, if necessary. //
WITHOUT_CLASSIFICATION	// end setting whole list
WITHOUT_CLASSIFICATION	// For a 1-to-many association, doing the set as a remove and add from the other end will make it undoable. // In particular, if there is an existing non-null value, we first need to remove it from the other end, so // that it will be reinserted at the correct index on undo.  //
WITHOUT_CLASSIFICATION	// (value == null) && (oldValue == null) // A simple set/unset will suffice. //
WITHOUT_CLASSIFICATION	// (value == null) && (oldValue != null) // Remove owner from the old value and unset if necessary. //
WITHOUT_CLASSIFICATION	// ((value != null) 
WITHOUT_CLASSIFICATION	// (value != null) && (oldValue == null) // Add owner to new value. //
WITHOUT_CLASSIFICATION	// ((value != null) && (oldValue != null)) // Need a compound command to remove owner from old value and add it to new value. //
WITHOUT_CLASSIFICATION	// For consistency, we always set 1-1 container relations from the container end. //
WITHOUT_CLASSIFICATION	// For a many-to-1 or 1-to-1 association, if the opposite reference on the new value is already set to // something, we need a compound command that first explicitly removes that reference, so that it will be // restored in the undo. //
WITHOUT_CLASSIFICATION	// For a many-to-1, we use SetCommand.create() to create the command to remove the opposite reference; // a RemoveCommand on its opposite will actually result. //
WITHOUT_CLASSIFICATION	// For a 1-to-1, we can directly create a SetCommand. //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// If there is an owner. //
WITHOUT_CLASSIFICATION	// Get the owner's meta object. //
WITHOUT_CLASSIFICATION	// Is the feature an attribute of the owner... //
WITHOUT_CLASSIFICATION	// If must be of this type then. //
WITHOUT_CLASSIFICATION	// Setting at an index. Make sure the index is valid, the type is valid, and the value isn't already in a // unique feature. Record the old value. //
WITHOUT_CLASSIFICATION	// If the attribute is set, record it's old value. //
WITHOUT_CLASSIFICATION	// oldValue = owner.eGet(feature);
WITHOUT_CLASSIFICATION	// Make sure the container is not being put into a contained object. //
WITHOUT_CLASSIFICATION	// If the other end is a many, then we should remove the owner from the old value's opposite feature so that undo will put it back. //
WITHOUT_CLASSIFICATION	// If the other end is single, then we should unset the owner from the old value's opposite feature so that undo will put it back. //
WITHOUT_CLASSIFICATION	// Either set or unset the feature. //
WITHOUT_CLASSIFICATION	// Either set or unset the feature. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Either set or unset the old value. //
WITHOUT_CLASSIFICATION	// If there is no list to add to, no collection or an empty collection from which to add, or the index is out of range... //
WITHOUT_CLASSIFICATION	// If it's a feature map, we'll need to validate the entry feature and enforce its multiplicity restraints. //
WITHOUT_CLASSIFICATION	// Keep track of all the entry features that are already in the feature map and that will be added, excluding // XML text, CDATA, and comments (if we're in a mixed type). //
WITHOUT_CLASSIFICATION	// Check each object...  //
WITHOUT_CLASSIFICATION	// Check type of object. //
WITHOUT_CLASSIFICATION	// Check that the object isn't already in a unique list. //
WITHOUT_CLASSIFICATION	// For feature maps, test that the entry feature is a valid type, that the entry value is an instance of it, // that there is not already something in a document root, and that there is not already something in a // single-valued entry feature. //
WITHOUT_CLASSIFICATION	// Check to see if a container is being put into a contained object. //
WITHOUT_CLASSIFICATION	// Simply add the collection to the list. //
WITHOUT_CLASSIFICATION	// Simply add the collection to the list. //
WITHOUT_CLASSIFICATION	// We'd like the collection of things added to be selected after this command completes. //
WITHOUT_CLASSIFICATION	// We'd like the collection of things added to be selected after this command completes. //
WITHOUT_CLASSIFICATION	// Remove the collection from the list by index. //
WITHOUT_CLASSIFICATION	// We'd like the owner selected after this undo completes. //
WITHOUT_CLASSIFICATION	// It must be an unsettable feature to be null and considered set. //
WITHOUT_CLASSIFICATION	// It must be an unsettable feature to be empty and considered set. //
WITHOUT_CLASSIFICATION	// if one is null, they'll all be null
WITHOUT_CLASSIFICATION	// Possible scope for the ChangeRecorder
WITHOUT_CLASSIFICATION	// Create commands to create copies of the children. //
WITHOUT_CLASSIFICATION	// We'll default to this. //
WITHOUT_CLASSIFICATION	// If there isn't something obviously wrong with the arguments... //
WITHOUT_CLASSIFICATION	// If the location is near the boundary, we'll start by trying to do a drop insert. //
WITHOUT_CLASSIFICATION	// If we could do a drop insert operation... //
WITHOUT_CLASSIFICATION	// Set the bounds so that we re-check when we are closer to the middle. //
WITHOUT_CLASSIFICATION	// We can try to do a drop on instead. //
WITHOUT_CLASSIFICATION	// Set the bounds so that we re-check when we get near the other end. //
WITHOUT_CLASSIFICATION	// We are near the middle, so we'll start by trying to do a drop on. //
WITHOUT_CLASSIFICATION	// If we can do a drop on operation. //
WITHOUT_CLASSIFICATION	// Set the range so that we re-check when we get aren't in the middle. //
WITHOUT_CLASSIFICATION	// We can reset and try a drop insert instead. //
WITHOUT_CLASSIFICATION	// We'll always be wrong for these arguments, so don't bother re-checking. //
WITHOUT_CLASSIFICATION	// This will be the default return value. //
WITHOUT_CLASSIFICATION	// The feedback is set based on which half we are in. // If the command isn't executable, these values won't be used. //
WITHOUT_CLASSIFICATION	// If we can't determine the parent. //
WITHOUT_CLASSIFICATION	// Iterate over the children to find the owner. //
WITHOUT_CLASSIFICATION	// When we match the owner, we're done. //
WITHOUT_CLASSIFICATION	// Try to create a specific command based on the current desired operation. //
WITHOUT_CLASSIFICATION	// If there isn't an executable command we should maybe try a copy operation, but only if we're allowed and not doing a link. //
WITHOUT_CLASSIFICATION	// Try again. //
WITHOUT_CLASSIFICATION	// We've switch the operation! //
WITHOUT_CLASSIFICATION	// We've switch the operation! //
WITHOUT_CLASSIFICATION	// We don't want to move insert an object before or after itself... //
WITHOUT_CLASSIFICATION	// If the dragged objects share a parent... //
WITHOUT_CLASSIFICATION	// Just remove the objects and add them. //
WITHOUT_CLASSIFICATION	// We don't want to copy insert an object before or after itself... //
WITHOUT_CLASSIFICATION	// Copy the collection //
WITHOUT_CLASSIFICATION	// And add the copy. //
WITHOUT_CLASSIFICATION	// if optimize // if collection
WITHOUT_CLASSIFICATION	// We don't want to insert an object before or after itself... //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// If there isn't an executable command we should maybe try a copy operation, but only if we're allowed and not doing a link. //
WITHOUT_CLASSIFICATION	// If there isn't an executable command we should maybe try a link operation, but only if we're allowed and not doing a link. //
WITHOUT_CLASSIFICATION	// Add the collection //
WITHOUT_CLASSIFICATION	// This is the default return value. //
WITHOUT_CLASSIFICATION	// This is the feedback we use to indicate drop on; it will only be used if the command is executable. //
WITHOUT_CLASSIFICATION	// Prepare the right type of operation. //
WITHOUT_CLASSIFICATION	// If we can't set the collection, try setting use the single value of the collection. //
WITHOUT_CLASSIFICATION	// We'll assume that the copy command can execute and that adding a copy of the clipboard // is the same test as adding the clipboard contents itself. //
WITHOUT_CLASSIFICATION	// Reset as in the constructor. //
WITHOUT_CLASSIFICATION	// If the operation has changed significantly... //
WITHOUT_CLASSIFICATION	// Clean it up. //
WITHOUT_CLASSIFICATION	// Set the arguments again. //
WITHOUT_CLASSIFICATION	// Determine if the operation is executable. //
WITHOUT_CLASSIFICATION	// Just return the cached result. //
WITHOUT_CLASSIFICATION	// Only return the operation for an executable command. //
WITHOUT_CLASSIFICATION	// Thread.dumpStack();
WITHOUT_CLASSIFICATION	// This can't execute if there is no owner list  // or the owner list doesn't contain the value being replaced or  // there are not replacements. //
WITHOUT_CLASSIFICATION	// An extent allows anything to be added. //
WITHOUT_CLASSIFICATION	// Make sure each object conforms to the type of the feature. //
WITHOUT_CLASSIFICATION	// Record the position of the value in the owner list. //
WITHOUT_CLASSIFICATION	// Simply remove the object from the owner list. //
WITHOUT_CLASSIFICATION	// Insert the collection at the right place. //
WITHOUT_CLASSIFICATION	// We'd like the collection of replacements selected after this replace completes. //
WITHOUT_CLASSIFICATION	// Remove the collection of replacements. //
WITHOUT_CLASSIFICATION	// Add the value back in the right place. //
WITHOUT_CLASSIFICATION	// We'd like the replaced selected after this undo replace completes. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// We'll assume that the copy command can execute and that adding a copy of the clipboard // is the same test as adding the clipboard contents itself. //
WITHOUT_CLASSIFICATION	// Thread.dumpStack();
WITHOUT_CLASSIFICATION	// Create a strict compound command to do a copy and then add the result //
WITHOUT_CLASSIFICATION	// Create a command to copy the clipboard. //
WITHOUT_CLASSIFICATION	// Create a proxy that will create an add command. //
WITHOUT_CLASSIFICATION	// Use the original to do the add, but only if it's of the same type as the copy. // This ensures that if there is conversion being done as part of the copy, // as would be the case for a cross domain copy in the mapping framework, // that we do actually use the converted instance. //
WITHOUT_CLASSIFICATION	// This will determine canExecute as efficiently as possible. //
WITHOUT_CLASSIFICATION	// This will actually execute the copy command in order to check if the add can execute. //
WITHOUT_CLASSIFICATION	// We need to check canExecute() here in case prepare() went down the "optimize" path. //
WITHOUT_CLASSIFICATION	// This can execute if there is an owner list and a collection and the owner list contains all the objects of the collection. //
WITHOUT_CLASSIFICATION	// If this owned object is one from the collection... //
WITHOUT_CLASSIFICATION	// Remove the object from the collection and add it to the identity list. //
WITHOUT_CLASSIFICATION	// Record the index. //
WITHOUT_CLASSIFICATION	// Record the index. //
WITHOUT_CLASSIFICATION	// Second pass: match by value equality. //
WITHOUT_CLASSIFICATION	// If this owned object is equal to one from the collection... //
WITHOUT_CLASSIFICATION	// Remove the object from the collection and add it to the equality list.  //
WITHOUT_CLASSIFICATION	// Merge the lists. //
WITHOUT_CLASSIFICATION	// Remove objects from the owner list by index, starting from the end. //
WITHOUT_CLASSIFICATION	// We'd like the owner selected after this remove completes. //
WITHOUT_CLASSIFICATION	// If either list is empty, the result is simply the other. //
WITHOUT_CLASSIFICATION	// Allocate list and array for objects and indices. //
WITHOUT_CLASSIFICATION	// Index counters into indices1, indices2, and indices.  //
WITHOUT_CLASSIFICATION	// Object iterators. //
WITHOUT_CLASSIFICATION	// Repeatedly select the lower index and corresponding object, and advance past the selected pair. //
WITHOUT_CLASSIFICATION	// We'd like the collection of things added to be selected after this command completes. //
WITHOUT_CLASSIFICATION	// Create commands to create copies of the children. //
WITHOUT_CLASSIFICATION	// Thread.dumpStack();
WITHOUT_CLASSIFICATION	// Remove objects from the owner list by index, starting from the end. //
WITHOUT_CLASSIFICATION	// We'd like the owner selected after this remove completes. //
WITHOUT_CLASSIFICATION	// Create commands to create the copy object(s). //
WITHOUT_CLASSIFICATION	// Create an initialize copy command for each of the created objects. //
WITHOUT_CLASSIFICATION	// Record it for execution. //
WITHOUT_CLASSIFICATION	// This ensures that the CreateCopyCommand will be executed by StrictCompoundCommand.prepare(). //
WITHOUT_CLASSIFICATION	// This will execute the CreateCopyCommand's and then call canExecute on the InitializeCopyCommand's. //
WITHOUT_CLASSIFICATION	// We'll assume that all the CreateCopyCommand's and InitializeCopyCommand's can execute. //
WITHOUT_CLASSIFICATION	// This will call prepare() which will partially execute the command. //
WITHOUT_CLASSIFICATION	// We need to check canExecute() in case optimize is true. //
WITHOUT_CLASSIFICATION	// Create a command to create a copy of the object. //
WITHOUT_CLASSIFICATION	// This handles IStructuredSelection. //
WITHOUT_CLASSIFICATION	// setResourceFactoryRegister(new ExtensibleContextResourceFactoryRegister()); //EATM setResourceFactoryRegister(new ContextResourceFactoryRegister());
WITHOUT_CLASSIFICATION	// If the owner parameter is set, we delegate to the owner's adapter //
WITHOUT_CLASSIFICATION	// If there is an adapter of the correct type... //
WITHOUT_CLASSIFICATION	// If command has no owner specified //
WITHOUT_CLASSIFICATION	// For RemoveCommand, we will find the owner by calling EditingDomain.getParent() on the object(s) being removed. //
WITHOUT_CLASSIFICATION	// If there is a column object, just convert it to a string. //
WITHOUT_CLASSIFICATION	// If there is an adapter of the correct type... //
WITHOUT_CLASSIFICATION	// If there is an adapter of the correct type... //
WITHOUT_CLASSIFICATION	// If there is an adapter of the correct type... //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// We will iterate over the whole collection, removing some as we go. //
WITHOUT_CLASSIFICATION	// Take the first object, and remove it. //
WITHOUT_CLASSIFICATION	// Determine the object's parent. //
WITHOUT_CLASSIFICATION	// Now we want to find all the other objects with this same parent. // So we can collection siblings together and give the parent control over their removal. //
WITHOUT_CLASSIFICATION	// Get the next object and check if it has the same parent. //
WITHOUT_CLASSIFICATION	// Remove the object and add it as a sibling. //
WITHOUT_CLASSIFICATION	// We will now create a command with this implied parent //
WITHOUT_CLASSIFICATION	// The parent is null, which implies a top-level removal, so create a self-removing command. //
WITHOUT_CLASSIFICATION	// If no object is specified, but an existing sibling is, the object is // its parent. //
WITHOUT_CLASSIFICATION	// protected Object labelProvider;
WITHOUT_CLASSIFICATION	//return getDefaultValue(attribute.getEType());
WITHOUT_CLASSIFICATION	// If any children were added or removed, reset the indices.
WITHOUT_CLASSIFICATION	// Get the URI of the model file. //
WITHOUT_CLASSIFICATION	// isValidIANAEncoding(String):boolean
WITHOUT_CLASSIFICATION	// Wrap any new children and add them to the map. Remove each current child from the set of old children. //
WITHOUT_CLASSIFICATION	// Remove and dispose any wrappers for remaining old children. //
WITHOUT_CLASSIFICATION	// A SetCommand needs to go through SetCommand.create() to ensure it can execute and undo. //
WITHOUT_CLASSIFICATION	/*  protected Command createSetCommand(EditingDomain domain, Object owner, Object feature, Object value)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, SetCommand.class, new CommandParameter(owner, feature, value));  }  protected Command createCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)  {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createCreateCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, CreateCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createInitializeCopyCommand(EditingDomain domain, Object owner, CopyCommand.Helper helper)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, InitializeCopyCommand.class, new CommandParameter(owner, null, helper));  }  protected Command createRemoveCommand(EditingDomain domain, Object owner, Object feature, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, RemoveCommand.class, new CommandParameter(owner, feature, collection));  }  protected Command createReplaceCommand(EditingDomain domain, Object owner, Object feature, Object value, Collection collection)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, collection));  }  protected Command createAddCommand(EditingDomain domain, Object owner, Object feature, Collection collection, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, collection, index));  }  protected Command createMoveCommand(EditingDomain domain, Object owner, Object feature, Object value, int index)   {    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, ReplaceCommand.class, new CommandParameter(owner, feature, value, index));  }  protected Command createDragAndDropCommand    (EditingDomain domain, Object owner, float location, int operations, int operation, Collection collection)  {    DragAndDropCommand.Detail detail = new DragAndDropCommand.Detail(location, operations, operation);    return       ((IEditingDomainItemProvider)decoratedItemProvider).createCommand        (owner, domain, DragAndDropCommand.class, new CommandParameter(owner, detail, collection));  }*/
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemLabelProvider. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemLabelProvider. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemFontProvider. //
WITHOUT_CLASSIFICATION	// No font is a good default. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemFontProvider. //
WITHOUT_CLASSIFICATION	// No color is a good default. //
WITHOUT_CLASSIFICATION	// No color is a good default. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemColorProvider. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemColorProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	//public String getUpdateableText(Object object)
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return needsEncoding(feature) ? encode((String)getEntryValue()) : getEntryValue();
WITHOUT_CLASSIFICATION	// Check that the value is type compatible with the entry feature. //
WITHOUT_CLASSIFICATION	// When the value is changed, the property sheet page doesn't update the property sheet viewer input // before refreshing, and this gets called on the obsolete wrapper. So, we need to read directly from the // model object. // //return value;
WITHOUT_CLASSIFICATION	// If the last object was deleted and the selection was in the property sheet view, the obsolete wrapper will // reference past the end of the list. //
WITHOUT_CLASSIFICATION	// Either the IEditingDomainItemProvider or ITreeItemContentProvider item provider interface can give us // the children. //
WITHOUT_CLASSIFICATION	// Use an existing getReferenceValue() override. //
WITHOUT_CLASSIFICATION	// First, try an existing implementation of getChildReference().  This provides backwards compatibility if that // method, now deprecated, was overridden. //
WITHOUT_CLASSIFICATION	// Iterate over all the child references to factor each child to the right reference. //
WITHOUT_CLASSIFICATION	// If this object is compatible with this reference... //
WITHOUT_CLASSIFICATION	// Iterate over all the set feature to factor each child to the right reference. //
WITHOUT_CLASSIFICATION	// Build the collection of new child descriptors. //
WITHOUT_CLASSIFICATION	// Add child descriptors contributed by extenders. //
WITHOUT_CLASSIFICATION	// If a sibling has been specified, add the best index possible to each CommandParameter. //
WITHOUT_CLASSIFICATION	// Find the index of a feature containing the sibling, or an equivalent value, in the collection of children // features. //
WITHOUT_CLASSIFICATION	// For each CommandParameter with a non-null, multi-valued structural feature... //
WITHOUT_CLASSIFICATION	// Look for the sibling value or an equivalent in the new child's feature. If it is found, the child should // immediately follow it. //
WITHOUT_CLASSIFICATION	// Otherwise, if a sibling feature was found, iterate through the children features to find the index of // the child feature...  //
WITHOUT_CLASSIFICATION	// If the child feature follows the sibling feature, the child should be first in its feature. //
WITHOUT_CLASSIFICATION	// Subclasses may override to add descriptors.
WITHOUT_CLASSIFICATION	// If necessary, get a command that replaces unwrapped values by their wrappers in the result and affected objects. //
WITHOUT_CLASSIFICATION	// Iterator over all the child references to factor each child to the right reference. //
WITHOUT_CLASSIFICATION	// If it is a list type value... // 
WITHOUT_CLASSIFICATION	// If it is a list type value... // 
WITHOUT_CLASSIFICATION	// Is this object in this feature... //
WITHOUT_CLASSIFICATION	// Is this object in this feature... //
WITHOUT_CLASSIFICATION	// Add it to the list and remove it from the other list. //
WITHOUT_CLASSIFICATION	// If we have children to remove for this feature, create a command for it. //
WITHOUT_CLASSIFICATION	// It's just a single value //
WITHOUT_CLASSIFICATION	// Create a command to set this to null and remove the object from the other list. //
WITHOUT_CLASSIFICATION	// If all the objects are used up by the above, then we can't do the command. //
WITHOUT_CLASSIFICATION	// Correct the index, if necessary. //
WITHOUT_CLASSIFICATION	// Consume the rest of the appropriate children. //
WITHOUT_CLASSIFICATION	// Is this child in this feature... //
WITHOUT_CLASSIFICATION	// Create a command for this feature,  //
WITHOUT_CLASSIFICATION	// If all the objects aren't used up by the above, then we can't do the command. //
WITHOUT_CLASSIFICATION	// Compute the relative index as best as possible. //
WITHOUT_CLASSIFICATION	// Create a command for this feature, //
WITHOUT_CLASSIFICATION	// continue to next case
WITHOUT_CLASSIFICATION	// All this logic is so that we only create a list if the adapter is set to more than one target. //
WITHOUT_CLASSIFICATION	// Dispose the child wrappers. //
WITHOUT_CLASSIFICATION	// Ignore the unset notification for an isMany feature; the value is boolean in this case. //
WITHOUT_CLASSIFICATION	// No index specified when removing all elements. //
WITHOUT_CLASSIFICATION	// We need the wrapper, not the item provider, to handle a DragAndDropCommand; the move, add, remove, etc. commands // that implement it will have their values unwrapped as usual. //
WITHOUT_CLASSIFICATION	// Unwrap collection. //
WITHOUT_CLASSIFICATION	// If the first wrapped value is found... //
WITHOUT_CLASSIFICATION	// Allocate the new collection, and populate it up to this point. //
WITHOUT_CLASSIFICATION	// If a new collection was allocated, continue to populate it. //
WITHOUT_CLASSIFICATION	// Unwrap value. //
WITHOUT_CLASSIFICATION	// Wrappers from the old command parameter must be considered in order for cut and paste to work. //
WITHOUT_CLASSIFICATION	// If the adapter factory is composeable, we'll adapt using the root. //
WITHOUT_CLASSIFICATION	// Build list of wrapped children from the appropriate adapters. //
WITHOUT_CLASSIFICATION	// Add in additional wrappers to search. //
WITHOUT_CLASSIFICATION	/*   * Returns the help context id for this property.   */
WITHOUT_CLASSIFICATION	/*      ResourceSet resourceSet = (ResourceSet)object;      childrenFeatures.add(ResourcePackage.eINSTANCE.getResourceSet_Resources());*/
WITHOUT_CLASSIFICATION	// Does this part provide an editing domain? //
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	// There are attributes to handle.
WITHOUT_CLASSIFICATION	// This ensure that this package itself is traversed even if the reference type is EObject... //
WITHOUT_CLASSIFICATION	// Look for each unwrapped object as a value of a wrapper, replacing it with the first one found. //
WITHOUT_CLASSIFICATION	// Is this a containment reference child? //
WITHOUT_CLASSIFICATION	// Is this the label feature? //
WITHOUT_CLASSIFICATION	// Or a feature map child? //
WITHOUT_CLASSIFICATION	// Don't include controlled children here, they'll show up under their container. //
WITHOUT_CLASSIFICATION	// Resource resource = (Resource)object; // childrenFeatures.add(ResourcePackage.eINSTANCE.getResource_Contents());
WITHOUT_CLASSIFICATION	// Overlay if the resource is the target for any controlled objects.  //
WITHOUT_CLASSIFICATION	// case Resource.RESOURCE__IS_MODIFIED: // case Resource.RESOURCE__IS_LOADED: // case Resource.RESOURCE__IS_TRACKING_MODIFICATION: // case Resource.RESOURCE__RESOURCE_SET:
WITHOUT_CLASSIFICATION	// TreeNode
WITHOUT_CLASSIFICATION	//TreeFactory
WITHOUT_CLASSIFICATION	//TreePackage
WITHOUT_CLASSIFICATION	//TreeFactoryImpl
WITHOUT_CLASSIFICATION	//TreeNodeImpl
WITHOUT_CLASSIFICATION	//TreePackageImpl
WITHOUT_CLASSIFICATION	/*    super.collectNewChildDescriptors(newChildDescriptors, object);*/
WITHOUT_CLASSIFICATION	//TreeAdapterFactory
WITHOUT_CLASSIFICATION	//TreeSwitch
WITHOUT_CLASSIFICATION	// This is for backwards compatibility, since the constructor may have been overridden before it was expected // to set actionDelegate. //
WITHOUT_CLASSIFICATION	// If there is a new one... //
WITHOUT_CLASSIFICATION	// This guard is for extra security, but should not be necessary. //
WITHOUT_CLASSIFICATION	// Use up the command. // Note that notification will cause a new command to be created. //
WITHOUT_CLASSIFICATION	// We will only deal with structured selections. //
WITHOUT_CLASSIFICATION	// If we aren't getting the domain from the workbench part... // This happens when this action is used for a global popup action. // We try to get the editing domain from one of the objects in the selection. // //DMS editingDomain == null) ?
WITHOUT_CLASSIFICATION	// If we have a good editing domain... //
WITHOUT_CLASSIFICATION	// Delegate the action for this object to the editing domain. //
WITHOUT_CLASSIFICATION	// We can enable the action as indicated by the command, // and we can set all the other values from the command. //
WITHOUT_CLASSIFICATION	// Nothing more to do and we don't want to do the default stuff below. //
WITHOUT_CLASSIFICATION	// We just can't do it. //
WITHOUT_CLASSIFICATION	// No point in keeping garbage. //
WITHOUT_CLASSIFICATION	// Show the colourless image. //
WITHOUT_CLASSIFICATION	// try to get editing domain from workbench part
WITHOUT_CLASSIFICATION	// only handle structured selections
WITHOUT_CLASSIFICATION	// convert the selection to a collection of the selected objects
WITHOUT_CLASSIFICATION	// if the editing domain wasn't given by the workbench part, try to get // it from the selection
WITHOUT_CLASSIFICATION	// if we found an editing domain, create command
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// use up the command
WITHOUT_CLASSIFICATION	// Add our standard marker. //
WITHOUT_CLASSIFICATION	// Add the edit menu actions. //
WITHOUT_CLASSIFICATION	// Add our other standard marker. //
WITHOUT_CLASSIFICATION	// For the control case, we need a dialog to ask for the URI and obtain the resource, then we create the command. //
WITHOUT_CLASSIFICATION	// Ensure that all proxies are resolved so that references into the controlled object will be saved to reference the new resource. //
WITHOUT_CLASSIFICATION	// grabHorizontal = true;
WITHOUT_CLASSIFICATION	// We use multi even for a single line because we want to respond to the enter key. //
WITHOUT_CLASSIFICATION	// event is null when choiceTableViewer is double clicked
WITHOUT_CLASSIFICATION	// event is null when featureTableViewer is double clicked 
WITHOUT_CLASSIFICATION	// In column 0, the drop-down is indented past the collapse/expand icon. //
WITHOUT_CLASSIFICATION	// dropDown.addListener(SWT.Paint, dropDownListener);
WITHOUT_CLASSIFICATION	// This should be consistent with paintControl(). // 
WITHOUT_CLASSIFICATION	// setEditor(null, null, -1);
WITHOUT_CLASSIFICATION	// Fill with background. //
WITHOUT_CLASSIFICATION	// Draw the icons. //
WITHOUT_CLASSIFICATION	// Draw the text. //
WITHOUT_CLASSIFICATION	// EATM Color startColor = display.getSystemColor(SWT.COLOR_LIST_SELECTION);
WITHOUT_CLASSIFICATION	// Remember the requested operation.
WITHOUT_CLASSIFICATION	// Remember the requested operation.
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.eclipse.jface.window.Window#configureShell(org.eclipse.swt.widgets.Shell)     */
WITHOUT_CLASSIFICATION	// Draw background of right-side button. //
WITHOUT_CLASSIFICATION	// Draw down arrow, offset if dropped. //
WITHOUT_CLASSIFICATION	// Draw ellipses, offset if down. //
WITHOUT_CLASSIFICATION	// Draw outline. //
WITHOUT_CLASSIFICATION	// Draw 3D effect on right-side button. //
WITHOUT_CLASSIFICATION	// Remember the viewer and listen to SWT.DragDetect to alert the start of the drag operation. //
WITHOUT_CLASSIFICATION	// Clear the source data.  We won't need this again, since, if it was // available, it's already in the command. //
WITHOUT_CLASSIFICATION	// A command was created if the source was available early, and the // information used to create it was cached... //
WITHOUT_CLASSIFICATION	// Recreate the command. //
WITHOUT_CLASSIFICATION	// Otherwise, the source should be available now as event.data, and we // can create the command. //
WITHOUT_CLASSIFICATION	// If the command can execute... //
WITHOUT_CLASSIFICATION	// Execute it. //
WITHOUT_CLASSIFICATION	// Otherwise, let's call the whole thing off. //
WITHOUT_CLASSIFICATION	// Clean up the state. //
WITHOUT_CLASSIFICATION	// If we can't do anything else, we'll provide the default select feedback // and enable auto-scroll and auto-expand effects.
WITHOUT_CLASSIFICATION	// Clear out any old information from a previous drag. //
WITHOUT_CLASSIFICATION	// Get the target object from the item widget and the mouse location in it. //
WITHOUT_CLASSIFICATION	// Determine if we can create a valid command at the current location. //
WITHOUT_CLASSIFICATION	// If we don't have a previous cached command... //
WITHOUT_CLASSIFICATION	// Remember the target; create the command and test if it is executable. //
WITHOUT_CLASSIFICATION	// Keep track of any changes to the command information.
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc) Method declared on Dialog.     */
WITHOUT_CLASSIFICATION	// create OK and Cancel buttons by default
WITHOUT_CLASSIFICATION	// create composite
WITHOUT_CLASSIFICATION	// generateColor();
WITHOUT_CLASSIFICATION	// }}
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Check if the cached command can provide DND feedback/revalidation. //
WITHOUT_CLASSIFICATION	// If so, revalidate the command. //
WITHOUT_CLASSIFICATION	// If not, dispose the current command and create a new one. //
WITHOUT_CLASSIFICATION	// If this command can provide detailed drag and drop feedback... //
WITHOUT_CLASSIFICATION	// Use it for the operation and drag under effect. //
WITHOUT_CLASSIFICATION	// There is no executable command, so we'd better nix the whole deal. //
WITHOUT_CLASSIFICATION	// Check whether the current data type can be transfered locally. //
WITHOUT_CLASSIFICATION	// Iterate over the data types to see if there is a data type that supports a local transfer. //
WITHOUT_CLASSIFICATION	// If the local transfer supports this data type, switch to that data type //
WITHOUT_CLASSIFICATION	// Transfer the data and, if non-null, extract it. //
WITHOUT_CLASSIFICATION	// Transfer the data and convert the structured selection to a collection of objects. //
WITHOUT_CLASSIFICATION	//do this here because setting the text will set enablement on the OK // button
WITHOUT_CLASSIFICATION	/* | GridData.GRAB_VERTICAL */
WITHOUT_CLASSIFICATION	// Set the error message text // See https://bugs.eclipse.org/bugs/show_bug.cgi?id=66292
WITHOUT_CLASSIFICATION	// If there was no old input, then we must be providing content for this part for the first time... //
WITHOUT_CLASSIFICATION	// If the notification is an IViewerNotification, it specifies how ViewerRefresh should behave.  Otherwise fall // back to NotifyChangedToViewerRefresh, which determines how to refresh the viewer directly from the model // notification. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemLabelProvider. //
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemLabelProvider. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemLabelProvider. //
WITHOUT_CLASSIFICATION	// No image is a good default. //
WITHOUT_CLASSIFICATION	// This implements the following order of preference: //   1. full refresh and update //   2. full refresh (add update if necessary) //   3. refresh element with update //   4. refresh element (if necessary) //   5. update element // 
WITHOUT_CLASSIFICATION	// n2.isLabelUpdate()
WITHOUT_CLASSIFICATION	// Previously, we never updated the viewer on a resolve.  Now we post and merge it as appropriate. //
WITHOUT_CLASSIFICATION	// ???
WITHOUT_CLASSIFICATION	//    case Notification.TOUCH:
WITHOUT_CLASSIFICATION	// We ignore non-changes for now. //
WITHOUT_CLASSIFICATION	// fireLabelProviderChanged();
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	// Ignore any exceptions and assume the class isn't available.
WITHOUT_CLASSIFICATION	// Ignore any exceptions and assume the class isn't available.
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// If there is a column object, just convert it to a string. //
WITHOUT_CLASSIFICATION	// No font is a good default. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemFontProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemFontProvider. //
WITHOUT_CLASSIFICATION	// No color is a good default. //
WITHOUT_CLASSIFICATION	// No color is a good default. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemColorProvider. //
WITHOUT_CLASSIFICATION	// Now we could check that the adapter implements interface ITableItemColorProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
WITHOUT_CLASSIFICATION	// Otherwise, we could check that the adapter implements interface IItemColorProvider. //
WITHOUT_CLASSIFICATION	// The class is not available.
WITHOUT_CLASSIFICATION	// Nested GenAnnotations
WITHOUT_CLASSIFICATION	/*   * For debugging purposes.  May be removed in the future.   */
WITHOUT_CLASSIFICATION	// We don't need to encode here because the only platform resource URIs in the map are for projects // whose names are the same as corresponding plug-in IDs, and hence never need to be encoded // (see EcorePlugin.computePlatformResourceToPlatformPluginMap()). //
WITHOUT_CLASSIFICATION	// Create resources for all the root EPackages. //
WITHOUT_CLASSIFICATION	// removing the first space
WITHOUT_CLASSIFICATION	// Subclasses may overwrite
WITHOUT_CLASSIFICATION	// Create resources for all the referenced EPackages // The referencedEPackage is a "local" instance of the realEPackage.  We  // will add the former to a resource that has the same URI of the later.
WITHOUT_CLASSIFICATION	// Initialize the GenModel with all the computed data. //
WITHOUT_CLASSIFICATION	// Restore all configured settings from the original. //
WITHOUT_CLASSIFICATION	// Handle application genmodel stub //
WITHOUT_CLASSIFICATION	// Determine which projects will need to be referenced. //
WITHOUT_CLASSIFICATION	// Create the model project. //
WITHOUT_CLASSIFICATION	// Add a dummy GenModel for referenced packages. //
WITHOUT_CLASSIFICATION	// Special case for a reference to Ecore to ensure that flag settings are respected and are set only for Ecore itself. //
WITHOUT_CLASSIFICATION	// Walk the project looking for .java files to analyze. //
WITHOUT_CLASSIFICATION	// If we have resolved to an EClass but we have an EAttribute, we can change it to be an EReference. //
WITHOUT_CLASSIFICATION	// Now we need to hook up opposites by finding the named feature in the type. //
WITHOUT_CLASSIFICATION	// Containers are transient by default unless explicitly annotated otherwise. //
WITHOUT_CLASSIFICATION	// Now we need to hook up keys by finding the named feature in the type. //
WITHOUT_CLASSIFICATION	// Clean up the temporary container annotations for holding map entry classes until they are for sure needed. //
WITHOUT_CLASSIFICATION	// Now we should sort. //
WITHOUT_CLASSIFICATION	// Find the fragment root so that we can generate to the right location (by default). //
WITHOUT_CLASSIFICATION	// Iterate over all projects to look at the manifests. //
WITHOUT_CLASSIFICATION	// Determine the required plugins. //
WITHOUT_CLASSIFICATION	// Iterate over all the plugin IDs to determine the dependency closure. // The list grows as the plugins are visited. //
WITHOUT_CLASSIFICATION	// Also add each required plugin for consideration in the loop. //
WITHOUT_CLASSIFICATION	// If it's a platform plugin URI, include it in the map. //
WITHOUT_CLASSIFICATION	// Keep only the plugins that have GenModels for consideration. //
WITHOUT_CLASSIFICATION	// Consider each GenModel location URI for each required plugin. //
WITHOUT_CLASSIFICATION	// Compute the closure. //
WITHOUT_CLASSIFICATION	// use no encoding
WITHOUT_CLASSIFICATION	// Walk the fields. //
WITHOUT_CLASSIFICATION	// Create the EPackage on demand. //
WITHOUT_CLASSIFICATION	// Check whether this has @model annotation contents. // If not, it might be a package interface, for backwards compatibility. //
WITHOUT_CLASSIFICATION	// Get the package name and see if there's an EPackage for it. //
WITHOUT_CLASSIFICATION	// If it's an interface, then it will be treated as an EClass //
WITHOUT_CLASSIFICATION	// Create a generic super type with an EClass as the classifier for each super interface in the Java representation. //
WITHOUT_CLASSIFICATION	// Create a generic super type with an EClass as the classifier for each super interface in the @model representation //
WITHOUT_CLASSIFICATION	// Match them and accumulate the appropriate result. //
WITHOUT_CLASSIFICATION	// Walk the methods. //
WITHOUT_CLASSIFICATION	// Additional attributes and references may be defined directly on the interface in order to allow the // get accessor method to have suppressed visibility. //
WITHOUT_CLASSIFICATION	// Otherwise it's treated as an EEnum //
WITHOUT_CLASSIFICATION	// Find Packages and Factories
WITHOUT_CLASSIFICATION	// It's definitely a package if it was declared as such. //
WITHOUT_CLASSIFICATION	// It's definitely a package if expected constants eNAME, eNS_PREFIX, or eNS_URI appear. //
WITHOUT_CLASSIFICATION	// This will catch inherited features, or additional things we don't want to worry about.
WITHOUT_CLASSIFICATION	// Check whether this has @model annotation contents. //
WITHOUT_CLASSIFICATION	// An operation is declared via the kind property or, for backwards compatibility, by specifying parameters // (though attribute or reference kind takes precedence). //
WITHOUT_CLASSIFICATION	// Map to an EEnum.
WITHOUT_CLASSIFICATION	// The feature name is extracted lower cased. //
WITHOUT_CLASSIFICATION	// The name is extracted and lower cased. //
WITHOUT_CLASSIFICATION	// Each token in parameters will specify a dataType for the corresponding parameter, but can be overridden by a // parameter-name-prefixed dataType property. //
WITHOUT_CLASSIFICATION	// Each token in exceptions will specify a data type for the corresponding exception. //
WITHOUT_CLASSIFICATION	// If we aren't doing an operation... //
WITHOUT_CLASSIFICATION	// We'll create one of these. //
WITHOUT_CLASSIFICATION	// If any of these attributes appear, this must be a reference. //
WITHOUT_CLASSIFICATION	// Set the EReference attributes. //
WITHOUT_CLASSIFICATION	// Defer the handling of the opposite. //
WITHOUT_CLASSIFICATION	// Set the visibility annotations for the EstructuralFeature. //
WITHOUT_CLASSIFICATION	// Set the EAttribute attributes. //
WITHOUT_CLASSIFICATION	// Handle the type, multiplicity and other ETypedElement attributes. //
WITHOUT_CLASSIFICATION	// Set the EStructuralFeature attributes. //
WITHOUT_CLASSIFICATION	// Process the annotations. //
WITHOUT_CLASSIFICATION	// For lists, maps, and feature maps, the default is many-valued, which can be overridden by an upper-bound declaration. //
WITHOUT_CLASSIFICATION	// The type can be augmented by specifying the it explicitly in the annotation. // This mostly makes sense only for many-valued typed elements, where the Java // type is a list and the item type needs to be specified. //
WITHOUT_CLASSIFICATION	// Allow the value to be defined by an annotation or by the field's initializer //
WITHOUT_CLASSIFICATION	// Allow a distinct literal value to be provided, too. //
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Allow a mixed case version of the name to be provided. //
WITHOUT_CLASSIFICATION	// But, if name doesn't expand into field name, ignore it. //
WITHOUT_CLASSIFICATION	// If there is no Ecore representation or it's invalid, e.g., when - is used to omit a specification, then just use the Java representation. //
WITHOUT_CLASSIFICATION	// We want to resolve to this. //
WITHOUT_CLASSIFICATION	// Check if it is exactly the name of a type parameter that's in scope. //
WITHOUT_CLASSIFICATION	// Check if the name is qualified //
WITHOUT_CLASSIFICATION	// For arrays, consider the element type. //
WITHOUT_CLASSIFICATION	// Find an explicit import or the first wildcard import. //
WITHOUT_CLASSIFICATION	// Find the modeled package for the import and look up the name there. //
WITHOUT_CLASSIFICATION	// If we can't find it, try the simple name in the package... //
WITHOUT_CLASSIFICATION	// Find the modeled package for the name and look up the name there. //
WITHOUT_CLASSIFICATION	// If we still don't have one, we'll have to settle for an EDataType or EClass with an instance class name. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// See if we already have the EDataType. //
WITHOUT_CLASSIFICATION	// Just to be helpful, we'll recognize a type of org.eclipse.emf.ecore.util.FeatureMap and convert it to EFeatureMapEntry. // This way a dataType need not be specified. But, we won't do this if recordDemandCreateEDataType is false, so we don't // change the instanceClass of a new EDataType that's implicitly being defined for FeatureMap. //
WITHOUT_CLASSIFICATION	// If we don't have one yet, maybe it's one of the special types... //
WITHOUT_CLASSIFICATION	// If we still don't have one, we'll have to settle for a demand created EDataType or EClass, // so create a new EClassifier with a nice unique name. //
WITHOUT_CLASSIFICATION	// If the name isn't qualified, it might be a primitive or from java.lang. Otherwise, assume it's in the current // package and use the nsPrefix for the qualified package name. //
WITHOUT_CLASSIFICATION	// Even primitives should be represented by a data type with a conventional (i.e. capitalized) name. //
WITHOUT_CLASSIFICATION	// Make array names legal. //
WITHOUT_CLASSIFICATION	// Avoid classifier name collisions. //
WITHOUT_CLASSIFICATION	// For the model information. //
WITHOUT_CLASSIFICATION	// This is package,  // so check the package information if this is in cat file. // If it is, then load the .cat file into the tree thereby traversing it; // otherwise, just traverse the tree. //
WITHOUT_CLASSIFICATION	// The package is in a .cat file. //
WITHOUT_CLASSIFICATION	// The package not in a .cat file. //
WITHOUT_CLASSIFICATION	// This could potentially map every created model element to its corresponding Rose node. // However, for now we're only using it as needed. //
WITHOUT_CLASSIFICATION	// Get the parent object. //
WITHOUT_CLASSIFICATION	// Map to an EPackage. //
WITHOUT_CLASSIFICATION	// Add to package. //
WITHOUT_CLASSIFICATION	// Map to an EClass. //
WITHOUT_CLASSIFICATION	//do nothing
WITHOUT_CLASSIFICATION	// Map to an EDataType. //
WITHOUT_CLASSIFICATION	// Map to an EDataType. //
WITHOUT_CLASSIFICATION	// Map to an eClass. //
WITHOUT_CLASSIFICATION	// Map to an EOperation.
WITHOUT_CLASSIFICATION	// Add to an EClass //
WITHOUT_CLASSIFICATION	// Map to an EParameter as input parameter for operation. //
WITHOUT_CLASSIFICATION	// Do this first for better error message during setEParameterProperties. //
WITHOUT_CLASSIFICATION	// Map to EAttribute, or EEnumLiteral. //
WITHOUT_CLASSIFICATION	// We will need to check the containment if we have to convert the EAttribute to an EReference later.  //
WITHOUT_CLASSIFICATION	// Convert to an EReference. //
WITHOUT_CLASSIFICATION	// map to EReference when is navigable //
WITHOUT_CLASSIFICATION	// eReference.setNavigable(roseNode.isNavigable());
WITHOUT_CLASSIFICATION	/*        eClass.getESuperTypes().addAll(extend);        eClass.getESuperTypes().addAll(unspecified);        eClass.getESuperTypes().addAll(mixin);        eClass.getESuperTypes().addAll(nonClass);        */
WITHOUT_CLASSIFICATION	// try to retrieve the fully qualified name of the specified type...
WITHOUT_CLASSIFICATION	// convert to dot-separated format if necessary...
WITHOUT_CLASSIFICATION	// remove garbage characters...
WITHOUT_CLASSIFICATION	// qualify type name if not already qualified...
WITHOUT_CLASSIFICATION	// default value //
WITHOUT_CLASSIFICATION	// Order first by number of features (descending) and then alphabetically (ascending) //
WITHOUT_CLASSIFICATION	// Temporary WAS/WSAD migration option. //
WITHOUT_CLASSIFICATION	// A container must be transient. //
WITHOUT_CLASSIFICATION	// setup attribute and parameter type //
WITHOUT_CLASSIFICATION	// Convert attributes of with EClass type to references. //
WITHOUT_CLASSIFICATION	// It was not found in the model class so check if primitive type. //
WITHOUT_CLASSIFICATION	// Convert reference to attribute if its type is an EDataType...  //
WITHOUT_CLASSIFICATION	// Store the base name for relative .cat file references. //
WITHOUT_CLASSIFICATION	// read mdl file...
WITHOUT_CLASSIFICATION	// special case, traverse cat file or mdl file //
WITHOUT_CLASSIFICATION	// file is a mdl file // // get model name
WITHOUT_CLASSIFICATION	// cat(unit) file referenced by mdl file
WITHOUT_CLASSIFICATION	// Process the children of the UnitTreeNode recursively. //
WITHOUT_CLASSIFICATION	//directoryName.length() > 0 && directoryName.charAt(0) == '$') 
WITHOUT_CLASSIFICATION	// map properties even when isTreeOnly == true
WITHOUT_CLASSIFICATION	//    top++;
WITHOUT_CLASSIFICATION	// 7 is the size of (object
WITHOUT_CLASSIFICATION	// 5 is the size of (list
WITHOUT_CLASSIFICATION	// 6 is the size of (value
WITHOUT_CLASSIFICATION	// size should be 1
WITHOUT_CLASSIFICATION	// could this happen?
WITHOUT_CLASSIFICATION	// Process the children of the UnitTreeNode recursively. //
WITHOUT_CLASSIFICATION	// Process the contents of the extent //
WITHOUT_CLASSIFICATION	// Load the Rose .mdl or .cat file, and create mappings for the objects. //
WITHOUT_CLASSIFICATION	// This sets the parent so that the nodes can traverse to the root to find default eCore settings. //
WITHOUT_CLASSIFICATION	// Start second traverse to create mapping objects in memory. //
WITHOUT_CLASSIFICATION	// Only one open quote. //
WITHOUT_CLASSIFICATION	// This will not add duplicates. //
WITHOUT_CLASSIFICATION	// No additional features // MappingStrategy
WITHOUT_CLASSIFICATION	//MappingPackage
WITHOUT_CLASSIFICATION	// ComplexTypeConverter
WITHOUT_CLASSIFICATION	// No additional features // TypeConverter
WITHOUT_CLASSIFICATION	// MappingRoot
WITHOUT_CLASSIFICATION	// FunctionNamePair
WITHOUT_CLASSIFICATION	// MappingHelper
WITHOUT_CLASSIFICATION	//MappingFactory
WITHOUT_CLASSIFICATION	// FunctionPair
WITHOUT_CLASSIFICATION	//mappingRoot.ePackageMapping().getMapping_Outputs() : //mappingRoot.ePackageMapping().getMapping_Inputs(),
WITHOUT_CLASSIFICATION	//mappingRoot.ePackageMapping().getMapping_Inputs() : //mappingRoot.ePackageMapping().getMapping_Outputs(),
WITHOUT_CLASSIFICATION	// This will deal with all the subcommands to modifying the root mapping tree. //
WITHOUT_CLASSIFICATION	// For each mapping being removed... //
WITHOUT_CLASSIFICATION	// Make sure the back pointers to this mapping from the mapped objects is set. //
WITHOUT_CLASSIFICATION	//subcommands.appendAndExecute(new RemoveCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), nestedMappings)); //subcommands.appendAndExecute(new AddCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), nestedMappings));
WITHOUT_CLASSIFICATION	// Since input objects are read-only, we don't need to make a copy of them for the clipboard. // We can just put a pointer to the original object(s) on the clipboard. //
WITHOUT_CLASSIFICATION	// Do we also have some non-input objects to copy? //
WITHOUT_CLASSIFICATION	// Just remember it; it's encoded later during execution, which is more efficient. //
WITHOUT_CLASSIFICATION	// Do the encoding. //
WITHOUT_CLASSIFICATION	// Record the records for the executed commands on the stack. //
WITHOUT_CLASSIFICATION	// If there is more than one exact match, we must get an index number; //
WITHOUT_CLASSIFICATION	// Iterate over the whole tree to do this. //
WITHOUT_CLASSIFICATION	//Resource resource = EcoreUtil.getURI(refObject).; FIX:::
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootTopAction#getTopsToAdd()   */
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// Make sure the back pointers to this mapping from the mapped objects is set. //
WITHOUT_CLASSIFICATION	// Iterate over the whole tree to do this. //
WITHOUT_CLASSIFICATION	// This is tricky and is done for each object here rather than once for the owner of the addCommnd. // We want to make sure the object is really part of the conceptual tree induced by the domain. //
WITHOUT_CLASSIFICATION	// For each mapping being added... //
WITHOUT_CLASSIFICATION	// Check all the siblings to see which if any should now be nested under this new mapping. // The are accumulated into a list so that they can be removed as a single command with a single notification. //
WITHOUT_CLASSIFICATION	// If there are siblings that need to be reparented. //
WITHOUT_CLASSIFICATION	// Create commands to do parentMapping.getNested().removeAll(siblingsToReparent). //
WITHOUT_CLASSIFICATION	//(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
WITHOUT_CLASSIFICATION	// Create commands to do mapping.getNested().addAll(siblingsToReparent). //
WITHOUT_CLASSIFICATION	// return false if iteration should continue.
WITHOUT_CLASSIFICATION	// Now we'll do recursive MatchMapping. // (We need to iterate over a copy, since we modify the underlying list in the loop.)
WITHOUT_CLASSIFICATION	//(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object)));
WITHOUT_CLASSIFICATION	// Get the corresponding type. //
WITHOUT_CLASSIFICATION	// Create the copy from this corresponding type. //
WITHOUT_CLASSIFICATION	// This is done to ensure that this new copy is treated as an output by the domain. // The CreateMappingCommand will rely on this setting. //
WITHOUT_CLASSIFICATION	// Type matching never matches inputs that are already mapped
WITHOUT_CLASSIFICATION	//commandList.add(RemoveCommand.create(mappingDomain, mapping, mapping.ePackageMapping().getMapping_Outputs(), object));
WITHOUT_CLASSIFICATION	// Copy the children references  //
WITHOUT_CLASSIFICATION	// this will create the mapping as well
WITHOUT_CLASSIFICATION	// Copy the name //
WITHOUT_CLASSIFICATION	// Copy the type //
WITHOUT_CLASSIFICATION	// We have done our preparation. Now ask the super to validate. //
WITHOUT_CLASSIFICATION	// Remove all the mappings from the root. //
WITHOUT_CLASSIFICATION	//removeCommand = RemoveCommand.create(domain, mappingRoot, mappingRoot.ePackageMapping().getMapping_Nested(), mappingRoot.getNested());
WITHOUT_CLASSIFICATION	// This is the tricky part where we set the encoding  // that we'd like to have decoded as a series of commands to execute after this command has completed. //
WITHOUT_CLASSIFICATION	//domain.getMappingRoot().removeMapping(newMapping);
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.mapping.action.AddRootBottomAction#getBottomsToAdd()   */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// If eCore, return the ENamedElement name //
WITHOUT_CLASSIFICATION	// If there is an adapter of the correct type, return the item label //
WITHOUT_CLASSIFICATION	// If eCore, set the ENamedElement name //
WITHOUT_CLASSIFICATION	// This turns a featureless set command into an operation to create a mapping. // This is invoked during drag and drop. //
WITHOUT_CLASSIFICATION	// If this is a RemoveCommand for a root input object, direct it to the MappingRoot. //
WITHOUT_CLASSIFICATION	// If the owner and the copy are of the same type, we can proceed with the command, i.e. no override. // If not, we will skip this command by returning a do-nothing override. //
WITHOUT_CLASSIFICATION	// remove all sourceSeparator characters
WITHOUT_CLASSIFICATION	// sourceSeparator == LABEL_NO_SEPARATOR
WITHOUT_CLASSIFICATION	// add a targetSeparator in front of every upper case character
WITHOUT_CLASSIFICATION	// type-mappings
WITHOUT_CLASSIFICATION	// top-label-separator
WITHOUT_CLASSIFICATION	// bottom-label-separator
WITHOUT_CLASSIFICATION	// top-label-case
WITHOUT_CLASSIFICATION	// bottom-label-case
WITHOUT_CLASSIFICATION	// top-label-forms
WITHOUT_CLASSIFICATION	// bottom-label-forms
WITHOUT_CLASSIFICATION	//if // for // for
WITHOUT_CLASSIFICATION	/*     * The type string must be qualified by its package uri, e.g. DTD.xmi:DTDElement.     * The package uri is used to look up the package by calling RefRegister.getPackage(uri).     */
WITHOUT_CLASSIFICATION	//Ecore2EcorePackage
WITHOUT_CLASSIFICATION	// Ecore2EcoreMappingRoot
WITHOUT_CLASSIFICATION	//Ecore2EcoreFactory
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getInputEPackage()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcoreMapping#getOutputEPackage()   */
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * The switch that delegates to the <code>createXXX</code> methods.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	// Open an editor on the new file. //
WITHOUT_CLASSIFICATION	// Remember the file. //
WITHOUT_CLASSIFICATION	// Do the work within an operation. //
WITHOUT_CLASSIFICATION	// Create a resource set //
WITHOUT_CLASSIFICATION	// Get the URI of the model file. //
WITHOUT_CLASSIFICATION	// Create a resource for this file. //
WITHOUT_CLASSIFICATION	// Add the initial model object to the contents. //
WITHOUT_CLASSIFICATION	// Save the contents of the resource to the file system. //
WITHOUT_CLASSIFICATION	// Select the new file resource in the current view. //
WITHOUT_CLASSIFICATION	// Determine the values to be added and add them at the right position. //
WITHOUT_CLASSIFICATION	//Ecore2EcorePackageImpl
WITHOUT_CLASSIFICATION	//Ecore2EcoreFactoryImpl
WITHOUT_CLASSIFICATION	//Ecore2EcoreMappingRootImpl
WITHOUT_CLASSIFICATION	//Ecore2EcoreResourceFactoryImpl
WITHOUT_CLASSIFICATION	//Ecore2EcoreResourceFactoryImpl
WITHOUT_CLASSIFICATION	//Ecore2EcoreAdapterFactory
WITHOUT_CLASSIFICATION	//Ecore2EcoreSwitch
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ 
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)   */
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// Create classes and their features
WITHOUT_CLASSIFICATION	// Initialize package
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Add supertypes to classes
WITHOUT_CLASSIFICATION	// Create resource
WITHOUT_CLASSIFICATION	// Remember the file. //
WITHOUT_CLASSIFICATION	// Do the work within an operation. //
WITHOUT_CLASSIFICATION	// Create a resource set //
WITHOUT_CLASSIFICATION	// Create a page, set the title, and the initial model file name. //
WITHOUT_CLASSIFICATION	// Try and get the resource selection to determine a current directory for the file dialog. //
WITHOUT_CLASSIFICATION	// Get the resource... //
WITHOUT_CLASSIFICATION	// Get the resource parent, if its a file. //
WITHOUT_CLASSIFICATION	// This gives us a directory... //
WITHOUT_CLASSIFICATION	// Set this for the container. //
WITHOUT_CLASSIFICATION	// Make up a unique new name here. //
WITHOUT_CLASSIFICATION	// For a many-to-many association, the command can only be undoable if the value or owner is last in its // respective list, since the undo will include an inverse add.  So, if the value is last, but the owner is // not, we create an undoable compound command that removes from the opposite end and then inserts the new // value. //
WITHOUT_CLASSIFICATION	//Ecore2XMLPackage
WITHOUT_CLASSIFICATION	//Ecore2XMLFactory
WITHOUT_CLASSIFICATION	// XMLInfo
WITHOUT_CLASSIFICATION	// XMLMap
WITHOUT_CLASSIFICATION	// missing attribute
WITHOUT_CLASSIFICATION	// invalid element
WITHOUT_CLASSIFICATION	//XMLMapImpl
WITHOUT_CLASSIFICATION	//ENamedElementToXMLInfoMapEntryImpl
WITHOUT_CLASSIFICATION	//Ecore2XMLFactoryImpl
WITHOUT_CLASSIFICATION	//Ecore2XMLPackageImpl
WITHOUT_CLASSIFICATION	//XMLInfoImpl
WITHOUT_CLASSIFICATION	// Switch to the new selection provider. //
WITHOUT_CLASSIFICATION	// Fake a selection changed event to update the menus. //
WITHOUT_CLASSIFICATION	// Open an editor on the new file. //
WITHOUT_CLASSIFICATION	// Add the initial model object to the contents. //
WITHOUT_CLASSIFICATION	// Save the contents of the resource to the file system. //
WITHOUT_CLASSIFICATION	// Select the new file resource in the current view. //
WITHOUT_CLASSIFICATION	// Try and get the resource selection to determine a current directory for the file dialog. //
WITHOUT_CLASSIFICATION	// Get the resource... //
WITHOUT_CLASSIFICATION	// Get the resource parent, if its a file. //
WITHOUT_CLASSIFICATION	// This gives us a directory... //
WITHOUT_CLASSIFICATION	// Set this for the container. //
WITHOUT_CLASSIFICATION	// Force an update because Eclipse hides empty menus now. //
WITHOUT_CLASSIFICATION	// Remove any menu items for old selection. //
WITHOUT_CLASSIFICATION	// Query the new selection for appropriate new child/sibling descriptors //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// Initialize all the fields from the command parameter. //
WITHOUT_CLASSIFICATION	// If the attribute is set, record it's old value. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Update the containing map, if necessary. //
WITHOUT_CLASSIFICATION	// Create the copy //
WITHOUT_CLASSIFICATION	// EATM Leave this disabled for now. //
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	/*   * Javadoc copied from base class.   */
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Remember the static instance. //
WITHOUT_CLASSIFICATION	// Set the range so that we re-check when we get into the other half. //
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// Subclasses may override
WITHOUT_CLASSIFICATION	// If the location indicates after, add one more. //
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	// Empty extension to limit the effect of suppressing the deprecation warning.
WITHOUT_CLASSIFICATION	// Try again. //
WITHOUT_CLASSIFICATION	// This is the name of the model. //
WITHOUT_CLASSIFICATION	// Create move commands for all the objects in the collection. //
WITHOUT_CLASSIFICATION	// Apply a redirection pattern, if specified. //
WITHOUT_CLASSIFICATION	// Apply a redirection pattern, if specified. //
WITHOUT_CLASSIFICATION	// Thread.dumpStack();
WITHOUT_CLASSIFICATION	// Apply a redirection pattern, if specified. //
WITHOUT_CLASSIFICATION	// Simply remove the object from the owner list. //
WITHOUT_CLASSIFICATION	// Insert the collection at the right place. //
WITHOUT_CLASSIFICATION	// We'd like the collection of replacements selected after this replace completes. //
WITHOUT_CLASSIFICATION	/*   * All Eclipse-dependent operations are delegated to this class. This pattern avoids any runtime failure due to   * missing dependencies in the stand-alone case.   */
WITHOUT_CLASSIFICATION	/*   * All Eclipse-dependent operations are delegated to this class. This pattern avoids any runtime failure due to   * missing dependencies in the stand-alone case.   */
WITHOUT_CLASSIFICATION	// Initialization is deferred until adapters are attached to all the objects of interest and we're // about to ask them to generate. //
WITHOUT_CLASSIFICATION	// Invoke generator adapters for each object. //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// // EMFEdit generation //
WITHOUT_CLASSIFICATION	// Iterate over the owner list twice, first matching objects from the collection by identity (==), then matching // objects by value equality (.equals()). The positions of matched objects in the owner list are recorded, and // the objects are stored in the same order. The lists are then merged to form a final, in-order list of objects // and corresponding indices in ownerList. This is very important for undo to interpret the indices correctly. // Also, this yields exactly one object removed for each object in the collection, with preference given to // identity over value equality. //
WITHOUT_CLASSIFICATION	// callers that plan to use this name without appending a suffix should call f.safeName(f.getName()) to make sure its not a keyword // this is a safe guaranteed uncapitalized form of the name // the safe name and cast to EObject, if necessary.
WITHOUT_CLASSIFICATION	// Add any remaining object-index pairs from either set. //
WITHOUT_CLASSIFICATION	// For CreateChildCommand, we will find the owner by calling EditingDomain.getParent() on the first selected object
WITHOUT_CLASSIFICATION	// This guards the switch. //
WITHOUT_CLASSIFICATION	// A set command without a feature sets the value of this wrapper, hence replacing it with a new wrapper. So, // we need a special command wrapper that selects this new wrapper as the affected object. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	// Get the adapter from the factory. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Create a page, set the title, and the initial model file name. // //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Prepare for CreateChild item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// Make up a unique new name here. // //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Prepare for CreateSibling item addition or removal. // //$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// And delegate the call. //
WITHOUT_CLASSIFICATION	// Either delegate the call or return nothing. //
WITHOUT_CLASSIFICATION	// Either the IEditingDomainItemProvider or ITreeItemContentProvider item provider interface can give us // the children. //
WITHOUT_CLASSIFICATION	// These will be the children belonging to this feature. //
WITHOUT_CLASSIFICATION	// These will be the children belonging to this feature. //
WITHOUT_CLASSIFICATION	// The try/catch provides backwards compatibility with the old resource // key, "_UI_CreateChild_label", and should be removed at the next // release, when we can expect users to regenerate. //
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EClassifier)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getName(org.eclipse.emf.ecore.EStructuralFeature)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getNamespace(org.eclipse.emf.ecore.EPackage)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getType(org.eclipse.emf.ecore.EPackage,   *      java.lang.String)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.ExtendedMetaData#getFeatureKind(org.eclipse.emf.ecore.EStructuralFeature)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.emf.ecore.util.BasicExtendedMetaData#isFeatureKindSpecific()   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	// Do nothing.
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2xml.Ecore2XMLPackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.MappingPackage * @generated */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource#load(org.w3c.dom.Node, java.util.Map)   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.codegen.ecore.genmodel.GenModelPackage * @generated */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJAbstractType#getChildren()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#computeQualifiedName()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#remove(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#insertSibling(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode, boolean)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode#addChild(org.eclipse.emf.codegen.merge.java.facade.ast.ASTJNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#getChildren()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#createCompilationUnit(java.lang.String, java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#getContext(org.eclipse.emf.codegen.merge.java.facade.JNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#doConvertToNode(java.lang.Object)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#addChild(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.FacadeHelper#insertSibling(org.eclipse.emf.codegen.merge.java.facade.JNode, org.eclipse.emf.codegen.merge.java.facade.JNode, boolean)   */
WITHOUT_CLASSIFICATION	// append [] if it is variable arity parameter (@see JLS3 8.4.1, http://java.sun.com/docs/books/jls/third_edition/html/classes.html#300870)
WITHOUT_CLASSIFICATION	// append [] if it is variable arity parameter (@see JLS3 8.4.1, http://java.sun.com/docs/books/jls/third_edition/html/classes.html#300870)
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.codegen.merge.java.facade.AbstractJNode#computeQualifiedName()   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#init(org.eclipse.ui.IWorkbenchWindow)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction, org.eclipse.jface.viewers.ISelection)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.ui.IWorkbenchWindowActionDelegate#dispose()   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.jface.window.Window#close()   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.change.ChangePackage * @generated */
WITHOUT_CLASSIFICATION	/*    * @see org.eclipse.emf.ecore.EObject#eIsProxy()   */
WITHOUT_CLASSIFICATION	/*    * @see org.eclipse.emf.ecore.InternalEObject#eSetProxyURI(org.eclipse.emf.common.util.URI)   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.ecore.EcorePackage * @generated */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLLoad#load(org.eclipse.emf.ecore.xmi.XMLResource, org.w3c.dom.Node, java.util.Map)   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)}  * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object  * and proceeding up the inheritance hierarchy * until a non-null result is returned,  * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.edit.tree.TreePackage * @generated */
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc)     *      * @see org.eclipse.jface.dialogs.Dialog#createButtonsForButtonBar(org.eclipse.swt.widgets.Composite)     */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#run(org.eclipse.jface.action.IAction)   */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,   *      org.eclipse.jface.viewers.ISelection)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.mapping.MappingRoot#canCreateMapping(java.util.Collection, java.util.Collection, org.eclipse.emf.mapping.Mapping)   */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Adapter Factory</b> for the model. * It provides an adapter <code>createXXX</code> method for each class of the model. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */
WITHOUT_CLASSIFICATION	/** * <!-- begin-user-doc --> * The <b>Switch</b> for the model's inheritance hierarchy. * It supports the call {@link #doSwitch(EObject) doSwitch(object)} * to invoke the <code>caseXXX</code> method for each class of the model, * starting with the actual class of the object * and proceeding up the inheritance hierarchy * until a non-null result is returned, * which is the result of the switch. * <!-- end-user-doc --> * @see org.eclipse.emf.mapping.ecore2ecore.Ecore2EcorePackage * @generated */
WITHOUT_CLASSIFICATION	/*   * (non-Javadoc)   *    * @see org.eclipse.ui.IActionDelegate#selectionChanged(org.eclipse.jface.action.IAction,   *      org.eclipse.jface.viewers.ISelection)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#add(org.eclipse.emf.ecore.ENamedElement, org.eclipse.emf.ecore.xmi.XMLResource.XMLInfo)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getClassifier(java.lang.String, java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeature(org.eclipse.emf.ecore.EClass, java.lang.String, java.lang.String)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getFeatures(org.eclipse.emf.ecore.EClass)   */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)   * @see org.eclipse.emf.ecore.xmi.XMLResource.XMLMap#getInfo(org.eclipse.emf.ecore.ENamedElement)   */
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	//
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Do nothing
WITHOUT_CLASSIFICATION	// Attribute
WITHOUT_CLASSIFICATION	// If the workbench part changes... //
WITHOUT_CLASSIFICATION	// Discard the old editing domain. //
WITHOUT_CLASSIFICATION	// Convert the selection to a collection of the selected objects. //
WITHOUT_CLASSIFICATION	// This returns a name like employeeNumber formatted like 'Employee Number' // This returns the same as getCapName unless it starts with "is" in which case the "is" is stripped  // This returns the name to be used in accessor method names; it's the same as getCapName, unless this is the key or value of a map entry, for which "Typed" is prepended // This returns the name of the get array-based accessor method for the list feature. // This returns the name of the get accessor method for the feature, i.e., either "is" or "get" is prefixed to getAccessorName
WITHOUT_CLASSIFICATION	// This is for backwards compatibility, since the constructor may have been overridden before it was expected // to set actionDelegate. //
WITHOUT_CLASSIFICATION	// this returns either "EAttribute" or "EReference"
WITHOUT_CLASSIFICATION	// this guard is for extra security, but should not be necessary
WITHOUT_CLASSIFICATION	// // EMF.Edit generation //
WITHOUT_CLASSIFICATION	// We can create the RemoveCommand for an uncontrol, but we must defer creating an AddCommand // to control until run(), when the user specifies a target resource. //
WITHOUT_CLASSIFICATION	//  Remove any non-Java dependencies from being added. //
WITHOUT_CLASSIFICATION	// Get extra icon and bounds for first column of ExtendedTableTreeItem. //
WITHOUT_CLASSIFICATION	/*   * Computes the default path for the given GenModel. This was previously the implementation of getTemplatePath().   */
WITHOUT_CLASSIFICATION	// Clean up the command if there is one.  If we need it again in drop, // we'll recreate it from dragAndDropCommandInformation. //
WITHOUT_CLASSIFICATION	// Compute a map of resource location URIs to logical namespace URIs // so that cross references will be resolved via package registry when deserialized.  //
WITHOUT_CLASSIFICATION	// We'll need to keep track of the information we use to create the // command, so that we can recreate it in drop.
WITHOUT_CLASSIFICATION	// Do allow an existing MANIFEST.MF to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	// Do allow an existing MANIFEST.MF to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	// Do allow an existing MANIFEST.MF to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	/*     * (non-Javadoc) Method declared on Dialog.     */
WITHOUT_CLASSIFICATION	// Do allow an existing build.properties to be overwritten, since it may have been created as part of an empty EMF project. // Use the existence of a plugin.xml as a guard against overwriting in a project that has already been generated. //
WITHOUT_CLASSIFICATION	/*        text = new Text(composite, SWT.SINGLE | SWT.BORDER);        text.setLayoutData(new GridData(GridData.GRAB_HORIZONTAL                | GridData.HORIZONTAL_ALIGN_FILL));*/
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// Obtain or create and register package
WITHOUT_CLASSIFICATION	// CellEditor.setValue() calls isCorrect() to validate the value that is about to be set. We are doing conversion // between the value and a corresponding string, and we would usually like to validate the string. Because // setValue() is final, we cannot do that conversion there, so we need to record what we're trying to validate and // work around the problem in isCorrect(). // 
WITHOUT_CLASSIFICATION	// Initialize simple dependencies
WITHOUT_CLASSIFICATION	// The referencedEPackages list is used to track the packages for // which is necessary to create the stub GenModel.  So if the ePackage // is referenced by an existing GenPackage, it doesn't need to be added to // referencedEPackages.
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Create package meta-data objects
WITHOUT_CLASSIFICATION	// Determine the required plugins. //
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Initialize created meta-data
WITHOUT_CLASSIFICATION	// Include each required plugin of the starting project and the exported ones of all the required projects. //
WITHOUT_CLASSIFICATION	// Register package validator
WITHOUT_CLASSIFICATION	// Determine the inverse map from plugin IDs to their registered GenModel locations. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Mark meta-data to indicate it can't be changed
WITHOUT_CLASSIFICATION	// Walk the fields. //
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Obtain other dependent packages
WITHOUT_CLASSIFICATION	// Filter out explicit EObject from super types, except in the Ecore package itself, or if it appears in the @model superTypes. //
WITHOUT_CLASSIFICATION	// Create type parameters
WITHOUT_CLASSIFICATION	// We will create an EAttribute, EReference, or an EOperation. //
WITHOUT_CLASSIFICATION	// Set bounds for type parameters
WITHOUT_CLASSIFICATION	// Check whether there are parameters; the special attribute and reference rules only apply for the case of no arguments. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters
WITHOUT_CLASSIFICATION	// The method is not a structural feature, so it's modeled as an operation. //
WITHOUT_CLASSIFICATION	// Initialize classes and features; add operations and parameters //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-1$ //$NON-NLS-2$
WITHOUT_CLASSIFICATION	// Create annotations // http://www.eclipse.org/emf/2002/Ecore
WITHOUT_CLASSIFICATION	// Don't overwrite exising file
WITHOUT_CLASSIFICATION	// Don't overwrite exising file
WITHOUT_CLASSIFICATION	// Look through the imports of the containing compilation unit. //
WITHOUT_CLASSIFICATION	// Use an alternate if we can't write to this one. //
WITHOUT_CLASSIFICATION	// Map to EClass, EEnum or EInerface. // Note that we do not map structure and primitive type class. //
WITHOUT_CLASSIFICATION	//purpose: using charset from 'targetFile' to encode in-memory  //         'newContents' object into bytes //modifer: Wu Zhi Qiang //date:    Aug 25, 2004 //action:  first get the charset from 'targetFile', then use it  //         to encode the 'newContents' object into bytes
WITHOUT_CLASSIFICATION	// Map to an EClass. //
WITHOUT_CLASSIFICATION	// Map to an EClass. //
WITHOUT_CLASSIFICATION	//FB TBD different objects for ecore model!
WITHOUT_CLASSIFICATION	//FB TBD different objects for ecore model!
WITHOUT_CLASSIFICATION	// Map to an eClass. //
WITHOUT_CLASSIFICATION	// generateColor();
WITHOUT_CLASSIFICATION	// This handles Rose 2003 format, e.g., // Logical View::JavaException[40722F9D0294] //
WITHOUT_CLASSIFICATION	// Strip off the array indices if any. //
WITHOUT_CLASSIFICATION	// process eStructuralFeatures for association end(Role) //
WITHOUT_CLASSIFICATION	// If we find a match, make this generic type be for this type parameter, // and then stop the whole process.
WITHOUT_CLASSIFICATION	// If we find a match, make this generic type be for this type parameter, // and then stop the whole process.
WITHOUT_CLASSIFICATION	// ...or if it's a wildcard or group feature.  Also, make it FeatureMap-typed. //
WITHOUT_CLASSIFICATION	// We don't want keyType and valueType on a map type specification in a package interface. // But, we also use qualified model information when defining a feature with suppressed get accessor // on the interface, and we do want to include these properties in that case. //
WITHOUT_CLASSIFICATION	// starting traverse file and build unit tree and table info
WITHOUT_CLASSIFICATION	/*  public String getImportedInstanceClassName()  {    return getGenModel().getImportedName("org.eclipse.emf.ecore.EEnumLiteral");   }*/
WITHOUT_CLASSIFICATION	// Process the children of the UnitTreeNode recursively. //
WITHOUT_CLASSIFICATION	// If the flag will straddle two fields, bump it to the next one. //
WITHOUT_CLASSIFICATION	//************************************************************************ //*    class RoseToken                                                   * //************************************************************************
WITHOUT_CLASSIFICATION	// If there is a provider base class from outside this class that has already been generated, get the create // child references from it. We'll check for any type-compatible classes introduced in this package. //
WITHOUT_CLASSIFICATION	// This will deal with all the subcommands to modifying the root mapping tree. //
WITHOUT_CLASSIFICATION	// Like isStringType(), but still returns true even if multiplicity-many. //
WITHOUT_CLASSIFICATION	// Create a command to do parentMapping.getNested().remove(mapping). // //subcommands.appendAndExecute(new RemoveCommand(domain, parentMapping, parentMapping.ePackageMapping().getMapping_Nested(), mapping));
WITHOUT_CLASSIFICATION	// EDate is far too often overridden to provide a different mapping, and therefor the default is somewhat obscure. // So, it's best to delegate to the factory. //
WITHOUT_CLASSIFICATION	// Find the appropriate parent mapping, which at the very least, should be the mapping root itself. //
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// }
WITHOUT_CLASSIFICATION	// If the type isn't Object, we need to cast. If it's a primitive, we need to unbox. //
WITHOUT_CLASSIFICATION	//(new AddCommand(domain, mapping, mapping.ePackageMapping().getMapping_Nested(), siblingsToReparent));
WITHOUT_CLASSIFICATION	// Suppress default constructor for non-instantiability.
WITHOUT_CLASSIFICATION	// This is tricky and is done for each object here rather than once for the owner of the addCommnd. // We want to make sure the object is really part of the conceptual tree induced by the domain. //
WITHOUT_CLASSIFICATION	// See java.lang.Class.getName() javadoc for explanation of array encoding.
WITHOUT_CLASSIFICATION	// We'll try adding a shallow copy of the clipboard contents, instead of a full copy. // Note: we can't just try adding the clipboard contents itself, because the copy may be a //       different type then what's on the clipboard (e.g. EJB Field -> RDB Column). //
WITHOUT_CLASSIFICATION	// We'll try adding a shallow copy of the clipboard contents, instead of a full copy. // Note: we can't just try adding the clipboard contents itself, because the copy may be a //       different type then what's on the clipboard (e.g. EJB Field -> RDB Column). //
WITHOUT_CLASSIFICATION	// We can't blindly cache the genModel, since we need to support moving the GenPackage to another container, // but the cast is expensive, so we'd like to do it no more than absolutely necessary. //
WITHOUT_CLASSIFICATION	//FB The following method is copied from com.ibm.etools.b2b.util.StringUtility //FB because the mapping framework cannot have a dependency on b2b. What we really //FB need to do is get methods like this moved to vabase so that everyone can //FB use them. // change all occurrences of oldPat to newPat
WITHOUT_CLASSIFICATION	// Ignore this soft dependency when it's not satisfied.
WITHOUT_CLASSIFICATION	// If it's the selection viewer, then we want it to select the same selection as this selection. //
WITHOUT_CLASSIFICATION	// Set URIs of EPackage-containing resources: output resource to desired target URI, and others to package // namespace URIs (so cross-references will be resolved via package registry when deserialized).  //
WITHOUT_CLASSIFICATION	//MappingPackageImpl
WITHOUT_CLASSIFICATION	// Iterate over the mappings in the tree. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//   public String getExtendedItemProviderClassName() //   { //     return getPrefixedName("ItemProviderAdapter"); //   }
WITHOUT_CLASSIFICATION	// Check to make sure that every object in the collection has an ancestor that is contained in this mapping. //
WITHOUT_CLASSIFICATION	// It belongs to this package if the delegate feature is from this package, // or the class is from this package and either there is no delegate feature or the delegate feature is from some used package. //
WITHOUT_CLASSIFICATION	// Ensure that this is a touch notification so to resource aren't marked as dirty. //
WITHOUT_CLASSIFICATION	// Force the project to be setup properly. //
WITHOUT_CLASSIFICATION	/* EATM getDecoratedAdapterFactory().*/
WITHOUT_CLASSIFICATION	// This case happens when the IDE is brought up with the editor already open //
WITHOUT_CLASSIFICATION	// We need to filer out duplicates in the unlikely event that we have two // features with the same class-qualified name. We'll only generate one property // string in that case and let the user add the second one manually, if necessary. //
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((ComplexTypeConverter)msg.getNotifier()).ePackageMapping();
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// while
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Ignore.
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Empty
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// Ignore
WITHOUT_CLASSIFICATION	// the first hex character if a character needs to be escaped
WITHOUT_CLASSIFICATION	// the first hex character if a character needs to be escaped
WITHOUT_CLASSIFICATION	// the second hex character if a character needs to be escaped
WITHOUT_CLASSIFICATION	// initialize the above 3 arrays
WITHOUT_CLASSIFICATION	// if it's not an ASCII character, break here, and use UTF-8 encoding
WITHOUT_CLASSIFICATION	// get UTF-8 bytes for the remaining sub-string
WITHOUT_CLASSIFICATION	//MappingPackage ePackage = ((MappingRoot)object).ePackageMapping();
WITHOUT_CLASSIFICATION	// Try to select the affected objects. //
WITHOUT_CLASSIFICATION	// this should never happen
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// no-op
WITHOUT_CLASSIFICATION	// && commandParameter instanceof MappingCommandParameter)
WITHOUT_CLASSIFICATION	// Creates the model from the editor input //
WITHOUT_CLASSIFICATION	// Returning null here causes RemoveCommand.create(domain, mappedObjectItemProvider) to be delegated //  to MappedObjectItemProvider.createCommand() and there we return a command to remove mappedObject instead. // // return null;
WITHOUT_CLASSIFICATION	// Only creates the other pages if there is something that can be edited //
WITHOUT_CLASSIFICATION	// Only creates the other pages if there is something that can be edited //
WITHOUT_CLASSIFICATION	//hgd::fireNotifyChanged(msg.getNotifier(), msg.getEventType(), msg.getFeature(), substituteOldValue, substituteNewValue, msg.getPosition());
WITHOUT_CLASSIFICATION	// The content outline is just a tree. //
WITHOUT_CLASSIFICATION	// Set up the tree viewer. //
WITHOUT_CLASSIFICATION	// Select the root object in the view. //
WITHOUT_CLASSIFICATION	// This ensures that we handle selections correctly. //
WITHOUT_CLASSIFICATION	// Get the first selected element. //
WITHOUT_CLASSIFICATION	// Do the work within an operation because this is a long running activity that modifies the workbench. //
WITHOUT_CLASSIFICATION	// generateMenuManager.add(new Separator("schema-actions")); // generateMenuManager.add(generateSchemaAction);    
WITHOUT_CLASSIFICATION	// generateSchemaAction.setEnabled(generateSchemaAction.isEnabled());
WITHOUT_CLASSIFICATION	// menuManager.insertBefore("additions", new Separator("schema-actions")); // menuManager.insertAfter("schema-actions", generateSchemaAction);
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	// Check the type of the specified child object and return the proper feature to use for // adding (see {@link AddCommand}) it as a child.
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	//)
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @return the first non-null result returned by a <code>caseXXX</code> call.   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	/**   * Calls <code>validateXXX</code> for the corresponding classifier of the model.   * <!-- begin-user-doc -->   * <!-- end-user-doc -->   * @generated   */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	/* Trick to import java.util.* without warnings */
WITHOUT_CLASSIFICATION	// // Constructors //
WITHOUT_CLASSIFICATION	// // Constructors //
WITHOUT_CLASSIFICATION	//TestCase/isSetGenFeature.override.javajetinc
WITHOUT_CLASSIFICATION	// Avoid unnecessary out.write("") statements...
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// For any entry that doesn't correspond to a plugin in the running JVM, compute a URL for the classes. //
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$ //$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	//$NON-NLS-1$
WITHOUT_CLASSIFICATION	// Define a class loader that looks up classes using the URLs or the parent class loader, // and failing those, tries to look up the class in each bundle in the running JVM. //
DEFECT	// EATM in JDK 1.4 there will be an indexOf on StringBuffer. //
DEFECT	// line comments at the end of annotations are not a part of the range of annotation // TODO is not including line comments at the end of annotations a bug?
DEFECT	// EATM must fix isSet bits.
DEFECT	// EATM must fix isSet bits.
DEFECT	// Bug 124306: we should rely on XMLCalendar to normalize Dave value, to ensure that all Date value // fields are taken into account.
DEFECT	// is this an error???
DEFECT	// is this an error???
DEFECT	//FB Won't compile with VAJ or NO_JIKES  //FB Object adapter = adapterFactory.adapt(mapping);
WITHOUT_CLASSIFICATION	// TBLRC // 01011 - bottom, right and center
WITHOUT_CLASSIFICATION	// TBLRC // 01100
WITHOUT_CLASSIFICATION	// TBLRC // 01101 - bottom, left and center
WITHOUT_CLASSIFICATION	// TBLRC // 01110 - bottom. left and right
WITHOUT_CLASSIFICATION	// TBLRC // 01111
WITHOUT_CLASSIFICATION	// TBLRC // 10000 - top item only
WITHOUT_CLASSIFICATION	// TBLRC // 10001 - top and center only
WITHOUT_CLASSIFICATION	// TBLRC // 10010 - right and top only
WITHOUT_CLASSIFICATION	// TBLRC // 10011 - top, right and center
WITHOUT_CLASSIFICATION	// TBLRC // 10100 - top and left only
WITHOUT_CLASSIFICATION	// range
WITHOUT_CLASSIFICATION	// units
WITHOUT_CLASSIFICATION	// interval
WITHOUT_CLASSIFICATION	// dial outline paint
WITHOUT_CLASSIFICATION	// dial shape
WITHOUT_CLASSIFICATION	// dial background paint
WITHOUT_CLASSIFICATION	// seriesPaint
WITHOUT_CLASSIFICATION	// seriesPaintList
WITHOUT_CLASSIFICATION	// baseSeriesPaint
WITHOUT_CLASSIFICATION	// seriesOutlinePaint
WITHOUT_CLASSIFICATION	// seriesOutlinePaintList
WITHOUT_CLASSIFICATION	// baseSeriesOutlinePaint
WITHOUT_CLASSIFICATION	// seriesOutlineStroke
WITHOUT_CLASSIFICATION	// seriesOutlineStrokeList
WITHOUT_CLASSIFICATION	// add an empty series
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// high
WITHOUT_CLASSIFICATION	// low
WITHOUT_CLASSIFICATION	// close
WITHOUT_CLASSIFICATION	/* XYSeries s = */
WITHOUT_CLASSIFICATION	// there should be no change event when clearing an empty series
WITHOUT_CLASSIFICATION	// clean up
WITHOUT_CLASSIFICATION	// shape
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	// labelFont
WITHOUT_CLASSIFICATION	// labelPaint
WITHOUT_CLASSIFICATION	// upperBound
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// super.drawSecondaryPass(g2, plot, dataset, pass, series, item, // domainAxis, dataArea, rangeAxis, crosshairState, entities);
WITHOUT_CLASSIFICATION	// properties // save // print // zoom // tooltips
WITHOUT_CLASSIFICATION	// properties // save // print // zoom // tooltips
WITHOUT_CLASSIFICATION	// properties // save // print // zoom // tooltips
WITHOUT_CLASSIFICATION	// do we need to redraw the buffer?
WITHOUT_CLASSIFICATION	// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
WITHOUT_CLASSIFICATION	// suppresses compiler warning
WITHOUT_CLASSIFICATION	// create the chart...
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	// we clone the chart because presumably there can be some delay // between putting this instance on the system clipboard and // actually having the getTransferData() method called...
WITHOUT_CLASSIFICATION	// for efficiency, we just use the first, last and middle items to // compute a hashCode...
WITHOUT_CLASSIFICATION	// create a legend, if requested...
WITHOUT_CLASSIFICATION	// pass the click on to the plot... // rely on the plot to post a plot change event and redraw the chart...
WITHOUT_CLASSIFICATION	// don't zoom unless the mouse pointer is in the plot's data area
WITHOUT_CLASSIFICATION	// draw the label
WITHOUT_CLASSIFICATION	// now try to reject equality...
WITHOUT_CLASSIFICATION	// no plot, no data
WITHOUT_CLASSIFICATION	// no plot, no data
WITHOUT_CLASSIFICATION	// if fixed auto range, then derive lower bound...
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// add minor ticks (for gridlines)
WITHOUT_CLASSIFICATION	// select a tick unit that is the next one bigger than the current // (log) range divided by 50
WITHOUT_CLASSIFICATION	// look at lower and upper bounds...
WITHOUT_CLASSIFICATION	// it is unlikely that 'state' will be null, but check anyway...
WITHOUT_CLASSIFICATION	// create a new space object if one wasn't supplied...
WITHOUT_CLASSIFICATION	// work out the number of periods to skip for labelling
WITHOUT_CLASSIFICATION	// draw the arrow...
WITHOUT_CLASSIFICATION	// set flag true if negative values not allowed and the // lower bound is between 0 and 10:
WITHOUT_CLASSIFICATION	//parameter value is < -10 //calculate log using positive value:
WITHOUT_CLASSIFICATION	//calculate power using positive value; then negate
WITHOUT_CLASSIFICATION	//parameter value is <= 0 //use as-is
WITHOUT_CLASSIFICATION	//if less than 1.0 then make it 1.0 //subtract out margin and get exponential value:
WITHOUT_CLASSIFICATION	//negatives not allowed and lower range bound is zero //use data range bound instead
WITHOUT_CLASSIFICATION	//get positive exponent //create multiplier value //multiply, round up, and divide for bound value:
WITHOUT_CLASSIFICATION	//negatives allowed or upper bound not between 0 & 1 //if flag then change to log version of highest value to // make range begin at a 10^n value; else use nearest int
WITHOUT_CLASSIFICATION	//get log10 version of lower bound and round to integer:
WITHOUT_CLASSIFICATION	//first tick of series, or not too small a value and // one of first 3 ticks, or last tick to be displayed // set exact number of fractional digits to be shown // (no effect if showing "1e#"-style ticks):
WITHOUT_CLASSIFICATION	//did zero tick last iteration //clear flag //create tick label string: //show tick label if "1e#"-style and it's one // of the first two, if it's the first or last // in the set, or if it's 1-5; beyond that // show fewer as the values get larger:
WITHOUT_CLASSIFICATION	// as far as I know, the Locale for the calendar only affects week // number calculations, and since DateTickUnit doesn't do week // arithmetic, the default locale (whatever it is) should be fine // here...
WITHOUT_CLASSIFICATION	// as far as I know, the Locale for the calendar only affects week // number calculations, and since DateTickUnit doesn't do week // arithmetic, the default locale (whatever it is) should be fine // here...
WITHOUT_CLASSIFICATION	// start with the current tick unit...
WITHOUT_CLASSIFICATION	// all tick labels have the same width (equal to the height of // the font)...
WITHOUT_CLASSIFICATION	// draw the tick marks and labels...
WITHOUT_CLASSIFICATION	// we call refresh ticks just to get the maximum width or height
WITHOUT_CLASSIFICATION	// calculate midnight of first monday after 1/1/1900 relative to // current locale
WITHOUT_CLASSIFICATION	// cycle through all the segments contained in the BaseTimeline // exception segment
WITHOUT_CLASSIFICATION	// this is not one of our included segment, skip it
WITHOUT_CLASSIFICATION	// first test for equality (contains or contained)
WITHOUT_CLASSIFICATION	// key not found
WITHOUT_CLASSIFICATION	// Compute number of labels
WITHOUT_CLASSIFICATION	// TOP
WITHOUT_CLASSIFICATION	// RIGHT
WITHOUT_CLASSIFICATION	// argument checking delegated...
WITHOUT_CLASSIFICATION	//gets the outline stroke width of the plot
WITHOUT_CLASSIFICATION	// first arrange without constraints, and see if this fits within // the required ranges...
WITHOUT_CLASSIFICATION	// first arrange without constraints, and see if this fits within // the required ranges...
WITHOUT_CLASSIFICATION	// set a theme using the new shadow generator feature available in // 1.0.14 - for backwards compatibility it is not enabled by default
WITHOUT_CLASSIFICATION	// ****************************************************************** //  More than 150 demo applications are included with the JFreeChart //  Developer Guide...for more information, see: // //  >   http://www.object-refinery.com/jfreechart/guide.html // // ******************************************************************
WITHOUT_CLASSIFICATION	//dmo: added this panel for colorbar control. (start dmo additions)
WITHOUT_CLASSIFICATION	//dmo: (end dmo additions)
WITHOUT_CLASSIFICATION	//  No op
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	// pass on the event to the auxiliary handlers
WITHOUT_CLASSIFICATION	// pass on the event to the auxiliary handlers
WITHOUT_CLASSIFICATION	// does nothing unless overridden
WITHOUT_CLASSIFICATION	// does nothing unless overridden
WITHOUT_CLASSIFICATION	//no initial zoom rectangle exists but the handler is set //as life handler unregister
WITHOUT_CLASSIFICATION	//float midX = (float) (minX + (plotArea.getWidth() * getRotateX())); //float midY = (float) (minY + (plotArea.getHeight() * getRotateY()));
WITHOUT_CLASSIFICATION	/// we have rotation
WITHOUT_CLASSIFICATION	// store the plot and its weight
WITHOUT_CLASSIFICATION	// store the plot and its weight
WITHOUT_CLASSIFICATION	// work out the space required by the domain axis...
WITHOUT_CLASSIFICATION	// work out the maximum height or width of the non-shared axes...
WITHOUT_CLASSIFICATION	// calculate plotAreas of all sub-plots, maximum vertical/horizontal // axis width/height
WITHOUT_CLASSIFICATION	// set up info collection...
WITHOUT_CLASSIFICATION	// set up info collection...
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// after setting up all the subplots, the shared range axis may need // reconfiguring
WITHOUT_CLASSIFICATION	// adjust the plot area by the interior spacing value
WITHOUT_CLASSIFICATION	// if we are drawing a perfect circle, we need to readjust the top left // coordinates of the drawing area for the arcs to arrive at this // effect.
WITHOUT_CLASSIFICATION	// establish the coordinates of the top left corner of the drawing area
WITHOUT_CLASSIFICATION	// draw the sections at the top of the pie (and set up tooltips)...
WITHOUT_CLASSIFICATION	// the pie sections are arranged ANTICLOCKWISE
WITHOUT_CLASSIFICATION	// starts at the back and finishes at the front // (wrapping the left side)
WITHOUT_CLASSIFICATION	// if the plot area is too small, just return...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	//turn off anti-aliasing when filling rectangles
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// delegate 'info' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	// is there an override?
WITHOUT_CLASSIFICATION	// is there an override?
WITHOUT_CLASSIFICATION	// nothing defined - do we autoPopulate?
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	// the explode area defines the max circle/ellipse for the exploded // pie sections.  it is defined by shrinking the linkArea by the // linkMargin factor.
WITHOUT_CLASSIFICATION	// work out the mid angle (0 - 90 and 270 - 360) = right, // otherwise left
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// no axis, no gridlines...
WITHOUT_CLASSIFICATION	// can't zoom domain axis
WITHOUT_CLASSIFICATION	// can't zoom domain axis
WITHOUT_CLASSIFICATION	// the above should cover all the options...
WITHOUT_CLASSIFICATION	// get the source coordinate - this plot has always a VERTICAL // orientation
WITHOUT_CLASSIFICATION	// get the source coordinate - this plot has always a VERTICAL // orientation
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// PlotOrientation.VERTICAL
WITHOUT_CLASSIFICATION	// PlotOrientation.VERTICAL
WITHOUT_CLASSIFICATION	// PlotOrientation.VERTICAL
WITHOUT_CLASSIFICATION	// no domain axis to zoom
WITHOUT_CLASSIFICATION	// no domain axis to zoom
WITHOUT_CLASSIFICATION	// the indicator bounds is calculated from the templateValue (which // determines the minimum size), the maxTemplateValue (which, if // specified, provides a maximum size) and the actual value
WITHOUT_CLASSIFICATION	// startAngle
WITHOUT_CLASSIFICATION	// startAngle
WITHOUT_CLASSIFICATION	// extent
WITHOUT_CLASSIFICATION	// majorTickIncrement // majorTickLength // majorTickPaint // majorTickStroke // minorTickCount // minorTickLength // minorTickPaint // minorTickStroke // tickLabelOffset // tickLabelFont // tickLabelsVisible // tickLabelFormatter // firstTickLabelsVisible
WITHOUT_CLASSIFICATION	// SERIES VISIBLE IN LEGEND (not yet respected by all renderers)
WITHOUT_CLASSIFICATION	// PAINT
WITHOUT_CLASSIFICATION	// STROKE
WITHOUT_CLASSIFICATION	// itemLabelFontList // baseItemLabelFont // itemLabelPaintList // baseItemLabelPaint // positiveItemLabelPositionList // basePositiveItemLabelPosition // negativeItemLabelPositionList // baseNegativeItemLabelPosition // itemLabelAnchorOffset // createEntityList // baseCreateEntities
WITHOUT_CLASSIFICATION	// for value in bounds, do the lookup...
WITHOUT_CLASSIFICATION	// for data in ascending order by x-value, we are (broadly) looking // for the index of the highest x-value that is less than xLow
WITHOUT_CLASSIFICATION	// we don't know anything about the ordering of the x-values, // but we can still skip any trailing values that fall outside the // range...
WITHOUT_CLASSIFICATION	// leave the y values (y1, y0) untranslated as it is going to be be // stacked up later by previous series values, after this it will be // translated.
WITHOUT_CLASSIFICATION	// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
WITHOUT_CLASSIFICATION	// FIXME: calculate xx0
WITHOUT_CLASSIFICATION	// LEFT POLYGON
WITHOUT_CLASSIFICATION	// calculate the bar width
WITHOUT_CLASSIFICATION	// wait till we are at the last item for the row then draw the // whole stack at once
WITHOUT_CLASSIFICATION	// a list to store the series index and bar region, so we can draw // all the labels at the end...
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// clip left and right bounds to data area
WITHOUT_CLASSIFICATION	// clip left and right bounds to data area
WITHOUT_CLASSIFICATION	// PlotOrientation.HORIZONTAL
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// calculate bar width...
WITHOUT_CLASSIFICATION	// FIXME: add setBaseItemLabelGenerator(CategoryItemLabelGenerator, //            boolean) ?
WITHOUT_CLASSIFICATION	//// ITEM LABEL PAINT  /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// last series, so we are ready to draw the min and max
WITHOUT_CLASSIFICATION	// draw mean - SPECIAL AIMS REQUIREMENT...
WITHOUT_CLASSIFICATION	// From outlier array sort out which are outliers and put these into a // list If there are any farouts, set the flag on the // OutlierListCollection
WITHOUT_CLASSIFICATION	// avoid possible sun.dc.pr.PRException: endPath: bad path
WITHOUT_CLASSIFICATION	// avoid possible sun.dc.pr.PRException: endPath: bad path
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// check if initial polygon needs to be clipped
WITHOUT_CLASSIFICATION	// never updated the subtrahend if it is implied to be zero
WITHOUT_CLASSIFICATION	// check if line segments are colinear
WITHOUT_CLASSIFICATION	// clear the point vectors
WITHOUT_CLASSIFICATION	//// ITEM LABELS VISIBLE //////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// we don't need the sign
WITHOUT_CLASSIFICATION	// fillType == TO_UPPER_BOUND
WITHOUT_CLASSIFICATION	/*      solve linear system with tridiagonal n by n matrix a        using Gaussian elimination *without* pivoting        where   a(i,i-1) = sub[i]  for 2<=i<=n        a(i,i)   = diag[i] for 1<=i<=n        a(i,i+1) = sup[i]  for 1<=i<=n-1        (the values sub[1], sup[n] are ignored)        right hand side vector b[1:n] is overwritten with solution        NOTE: 1...n is used in all arrays, 0 is unused */
WITHOUT_CLASSIFICATION	// this represents the situation // for drawing a horizontal bar.
WITHOUT_CLASSIFICATION	// draw median
WITHOUT_CLASSIFICATION	//  Check that the graph being served was created by the current user //  or that it begins with "public"
WITHOUT_CLASSIFICATION	// the textAlignment and the horizontalAlignment are separate things, // but it makes sense for the default textAlignment to match the // title's horizontal alignment...
WITHOUT_CLASSIFICATION	// we don't use the calendar or numberFormat fields, but equals(Object) // is failing without them being non-null
WITHOUT_CLASSIFICATION	/**/
WITHOUT_CLASSIFICATION	/**/
WITHOUT_CLASSIFICATION	// adjust text bounds to match string position
WITHOUT_CLASSIFICATION	// now fetch the row data - need to bear in mind that the row // structure may not have an entry for the column key, but that we // have already checked that the key is valid for the 2D structure
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// set up the series names...
WITHOUT_CLASSIFICATION	// is the category valid?
WITHOUT_CLASSIFICATION	//create a temporary vector // set x to some arbitary value (used below)
WITHOUT_CLASSIFICATION	// look for any keys that we don't already know about...
WITHOUT_CLASSIFICATION	//  Iterate and find all keys below threshold percentThreshold
WITHOUT_CLASSIFICATION	// handle special case of BoxAndWhiskerDataset
WITHOUT_CLASSIFICATION	// standard case - plain XYDataset
WITHOUT_CLASSIFICATION	// hasn't implemented RangeInfo, so we'll have to iterate...
WITHOUT_CLASSIFICATION	// hasn't implemented RangeInfo, so we'll have to iterate...
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Second object // -------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// remove old items if necessary, but // don't notify anyone, because that // happens next anyway...
WITHOUT_CLASSIFICATION	// get the current data item...
WITHOUT_CLASSIFICATION	// get the current data item...
WITHOUT_CLASSIFICATION	// The next 3 functions override the base-class implementation of // the DomainInfo interface.  Using saved limits (updated by // each updateTime() call), improves performance. //
WITHOUT_CLASSIFICATION	// deregister the collection as a change listener to each series in the // collection
WITHOUT_CLASSIFICATION	// alternatively, sometimes the first few days of the year are // considered to fall in the *last* week of the previous year...
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// if the series is sorted, the negative index is a result from // Collections.binarySearch() and tells us where to insert the // new item...otherwise it will be just -1 and we should just // append the value to the list...
WITHOUT_CLASSIFICATION	// pass mouse move event if some ChartMouseListener are listening
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// chart title // domain axis label // range axis label // data // orientation // include legend // tooltips? // URLs?
WITHOUT_CLASSIFICATION	// the SWTGraphics2D class doesn't handle GradientPaint well, so // replace the gradient painter from the default theme with a // standard painter...
WITHOUT_CLASSIFICATION	// Dispose of any fonts we have created
WITHOUT_CLASSIFICATION	// Create the new font and set it into the title // label
WITHOUT_CLASSIFICATION	// create the new color and set it to the // SwtPaintCanvas
WITHOUT_CLASSIFICATION	// row 2: outline color
WITHOUT_CLASSIFICATION	// Use a SwtPaintCanvas to show the color, note that we must set the // heightHint.
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// now create a new title and replace the existing title, several // things should happen: // (1) Adding the new title should trigger an immediate //     ChartChangeEvent; // (2) Modifying the new title should trigger a ChartChangeEvent; // (3) Modifying the old title should NOT trigger a ChartChangeEvent
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// labelFont
WITHOUT_CLASSIFICATION	// fillPaint
WITHOUT_CLASSIFICATION	// fillPaint
WITHOUT_CLASSIFICATION	// fillPaint
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// a null key should throw an IllegalArgumentException
WITHOUT_CLASSIFICATION	// a null key should throw an IllegalArgumentException
WITHOUT_CLASSIFICATION	//gridBandPaint
WITHOUT_CLASSIFICATION	//private double angle;
WITHOUT_CLASSIFICATION	//private double baseRadius;
WITHOUT_CLASSIFICATION	//private double arrowWidth;
WITHOUT_CLASSIFICATION	//private double labelOffset;
WITHOUT_CLASSIFICATION	// font
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// ok, exception is expected
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// dateFormatOverride
WITHOUT_CLASSIFICATION	// range
WITHOUT_CLASSIFICATION	// check that setting the max date to something on or before the // current min date works...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	//private boolean autoRangeStickyZero;
WITHOUT_CLASSIFICATION	// now replacing the dataset should update the axis range...
WITHOUT_CLASSIFICATION	// now replacing the dataset should update the axis range...
WITHOUT_CLASSIFICATION	// set axis bounds to be both greater than 1
WITHOUT_CLASSIFICATION	// check for bounds interval that includes 1
WITHOUT_CLASSIFICATION	// check for bounds interval that includes 1
WITHOUT_CLASSIFICATION	// tickLabelFont
WITHOUT_CLASSIFICATION	// advance line Paint
WITHOUT_CLASSIFICATION	// Add exception in included segments
WITHOUT_CLASSIFICATION	// Saturday and Sundays are non business hours
WITHOUT_CLASSIFICATION	/** These constants control test cycles in the validateXXXX methods. */
WITHOUT_CLASSIFICATION	/** These constants control test cycles in the validateXXXX methods. */
WITHOUT_CLASSIFICATION	// 1-ms test timeline using 5 included and 2 excluded segments. // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 .. // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. // |  |  |  |  |  |EE|EE|  |  |  |  |  |EE|EE|  |  |  |  |  |  |EE|EE|    <-- msTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+.. //  \_________  ________/            \_/ //            \/                      | //       segment group         segment size = 1 ms //
WITHOUT_CLASSIFICATION	// 1-ms test timeline (with a baseTimeline) using 2 included and 2 // excluded segments centered inside each base segment // // The ms2Timeline without a base would look like this: // //    timeline start time = 1 //      | //      v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //    \____  _____/            \_/ //         \/                   | //    segment group      segment size = 1 ms // // With the base timeline some originally included segments are now // removed (see "xx" below): // //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|EE|xx|xx|EE|EE|  |  |EE|    <-- ms2Timeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //
WITHOUT_CLASSIFICATION	// test monday though friday timeline
WITHOUT_CLASSIFICATION	// find first Monday after 2001-01-01
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test construction process //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// verify attributes set during object construction
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // main include and excluded segments //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test timeline translations //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// verify all timeline segments included in the // baseTimeline.segment are now exceptions
WITHOUT_CLASSIFICATION	// 1-Jan-2000
WITHOUT_CLASSIFICATION	// tick label insets...
WITHOUT_CLASSIFICATION	// tick mark paint...
WITHOUT_CLASSIFICATION	// negativeArrowVisible;
WITHOUT_CLASSIFICATION	// axisLinePaint
WITHOUT_CLASSIFICATION	// autoRange
WITHOUT_CLASSIFICATION	// autoRangeMinimumSize
WITHOUT_CLASSIFICATION	//private double fixedAutoRange;
WITHOUT_CLASSIFICATION	//private boolean autoTickUnitSelection;
WITHOUT_CLASSIFICATION	//private int autoTickIndex; //protected double reservedForTickLabels; //protected double reservedForAxisLabel;
WITHOUT_CLASSIFICATION	// TBLRC // 00001 - center item only
WITHOUT_CLASSIFICATION	// TBLRC // 00001 - center item only
WITHOUT_CLASSIFICATION	// TBLRC // 00100 - left item only
WITHOUT_CLASSIFICATION	// TBLRC // 10101 - top, left and center
WITHOUT_CLASSIFICATION	// TBLRC // 10110 - top, left and right
WITHOUT_CLASSIFICATION	// TBLRC // 11000 - top and bottom only
WITHOUT_CLASSIFICATION	// TBLRC // 11011
WITHOUT_CLASSIFICATION	// TBLRC // 11111 - all
WITHOUT_CLASSIFICATION	// standard test
WITHOUT_CLASSIFICATION	// Y format
WITHOUT_CLASSIFICATION	// some setup...
WITHOUT_CLASSIFICATION	// some setup...
WITHOUT_CLASSIFICATION	// parent plot...
WITHOUT_CLASSIFICATION	// innerSeparatorExtension
WITHOUT_CLASSIFICATION	// domainAxis - no longer a separate field but test anyway...
WITHOUT_CLASSIFICATION	// rangeAxis - no longer a separate field but test anyway...
WITHOUT_CLASSIFICATION	// renderer - no longer a separate field but test anyway...
WITHOUT_CLASSIFICATION	// domainGridlinesVisible
WITHOUT_CLASSIFICATION	// domainGridlinePosition
WITHOUT_CLASSIFICATION	// rangeGridlinePaint
WITHOUT_CLASSIFICATION	// anchorValue
WITHOUT_CLASSIFICATION	// rangeCrosshairPaint
WITHOUT_CLASSIFICATION	// rangeCrosshairPaint
WITHOUT_CLASSIFICATION	// range markers - no longer separate fields but test anyway...
WITHOUT_CLASSIFICATION	// fixed legend items
WITHOUT_CLASSIFICATION	// domainCrosshairPaint
WITHOUT_CLASSIFICATION	// check for independence
WITHOUT_CLASSIFICATION	// check for independence
WITHOUT_CLASSIFICATION	// now check that the chart is usable...
WITHOUT_CLASSIFICATION	// now check that the chart is usable...
WITHOUT_CLASSIFICATION	// now make a change to the renderer and see if it triggers a plot // change event...
WITHOUT_CLASSIFICATION	// should get IllegalArgumentException for negative index
WITHOUT_CLASSIFICATION	// if multiple axes are mapped, the first in the list should be // returned...
WITHOUT_CLASSIFICATION	// if multiple axes are mapped, the first in the list should be // returned...
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// units
WITHOUT_CLASSIFICATION	// tick labels visible
WITHOUT_CLASSIFICATION	// tick size
WITHOUT_CLASSIFICATION	// the clone and the original share a reference to the SAME dataset
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// labelType...
WITHOUT_CLASSIFICATION	// pieIndex...
WITHOUT_CLASSIFICATION	// ignoreZeroValues
WITHOUT_CLASSIFICATION	// sectionOutlinesVisible
WITHOUT_CLASSIFICATION	// sectionOutlineStroke
WITHOUT_CLASSIFICATION	// labelBackgroundPaint
WITHOUT_CLASSIFICATION	// labelGenerator
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// verify independence of fixed legend item collection
WITHOUT_CLASSIFICATION	// stroke sequence
WITHOUT_CLASSIFICATION	// stroke index
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// minorTickCount
WITHOUT_CLASSIFICATION	// try a default instance
WITHOUT_CLASSIFICATION	// try a customised instance
WITHOUT_CLASSIFICATION	// seriesVisibleInLegend
WITHOUT_CLASSIFICATION	//upper bound and margin OK; get log10 of upper bound
WITHOUT_CLASSIFICATION	// fillPaintList
WITHOUT_CLASSIFICATION	//apply upper margin by increasing upper bound:
WITHOUT_CLASSIFICATION	// baseStroke
WITHOUT_CLASSIFICATION	// Reference: http://www.antigrain.com/research/bezier_interpolation/
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// initialize ChartPanel-specific tool tip delays with // values the from ToolTipManager.sharedInstance()
WITHOUT_CLASSIFICATION	// only draw if we have good values
WITHOUT_CLASSIFICATION	// properties // save // print // zoom // tooltips
WITHOUT_CLASSIFICATION	// properties // save // print // zoom // tooltips
WITHOUT_CLASSIFICATION	// stop listening for changes to the existing chart
WITHOUT_CLASSIFICATION	// set up popup menu...
WITHOUT_CLASSIFICATION	// itemLabelsVisible
WITHOUT_CLASSIFICATION	// make the background of the buffer clear and transparent
WITHOUT_CLASSIFICATION	// for MacOSX we can't use the CTRL key for mouse drags, see: // http://developer.apple.com/qa/qa2004/qa1362.html
WITHOUT_CLASSIFICATION	// add the new chart
WITHOUT_CLASSIFICATION	// work out if scaling is required...
WITHOUT_CLASSIFICATION	// first determine the size of the chart rendering area...
WITHOUT_CLASSIFICATION	// do we need to resize the buffer?
WITHOUT_CLASSIFICATION	// are we using the chart buffer?
WITHOUT_CLASSIFICATION	// clear the flag
WITHOUT_CLASSIFICATION	// do we need to redraw the buffer?
WITHOUT_CLASSIFICATION	// redraw the zoom rectangle (if present) - if useBuffer is false, // we use XOR so we can XOR the rectangle away again without redrawing // the chart
WITHOUT_CLASSIFICATION	// redrawing the chart every time...
WITHOUT_CLASSIFICATION	// zap the buffer onto the panel...
WITHOUT_CLASSIFICATION	// does nothing - override if necessary
WITHOUT_CLASSIFICATION	// many of the zoom methods need a screen location - all we have is // the zoomPoint, but it might be null.  Here we grab the x and y // coordinates, or use defaults...
WITHOUT_CLASSIFICATION	// itemLabelFontList
WITHOUT_CLASSIFICATION	// restore original tooltip dealys
WITHOUT_CLASSIFICATION	// can we pan this plot?
WITHOUT_CLASSIFICATION	// the actual panning occurs later in the mouseDragged()  // method
WITHOUT_CLASSIFICATION	// if the popup menu has already been triggered, then ignore dragging...
WITHOUT_CLASSIFICATION	// handle panning if we have a start point
WITHOUT_CLASSIFICATION	// if no initial zoom point was set, ignore dragging...
WITHOUT_CLASSIFICATION	// erase the previous zoom rectangle (if any).  We only need to do // this is we are using XOR mode, which we do when we're not using // the buffer (if there is a buffer, then at the end of this method we // just trigger a repaint)
WITHOUT_CLASSIFICATION	// selected rectangle shouldn't extend outside the data area...
WITHOUT_CLASSIFICATION	// Draw the new zoom rectangle...
WITHOUT_CLASSIFICATION	// with no buffer, we use XOR to draw the rectangle "over" the // chart...
WITHOUT_CLASSIFICATION	// if we've been panning, we need to reset now that the mouse is  // released...
WITHOUT_CLASSIFICATION	// for mouseReleased event, (horizontalZoom || verticalZoom) // will be true, so we can just test for either being false; // otherwise both are true
WITHOUT_CLASSIFICATION	// erase the zoom rectangle
WITHOUT_CLASSIFICATION	// force a redraw // new entity code...
WITHOUT_CLASSIFICATION	// we need to guard against this.zoomPoint being null
WITHOUT_CLASSIFICATION	// we need to guard against this.zoomPoint being null
WITHOUT_CLASSIFICATION	// Set XOR mode to draw the zoom rectangle
WITHOUT_CLASSIFICATION	// null will be returned
WITHOUT_CLASSIFICATION	// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
WITHOUT_CLASSIFICATION	// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
WITHOUT_CLASSIFICATION	// use reflection to get the SVG string
WITHOUT_CLASSIFICATION	// Reset to the default 'overwrite' mode
WITHOUT_CLASSIFICATION	// Reset to the default 'overwrite' mode
WITHOUT_CLASSIFICATION	// Reset to the default 'overwrite' mode
WITHOUT_CLASSIFICATION	// null will be returned
WITHOUT_CLASSIFICATION	// we suppress shadow generation, because SVG is a vector format and // the shadow effect is applied via bitmap effects...
WITHOUT_CLASSIFICATION	// pdfDocument class will be null so the function will return false
WITHOUT_CLASSIFICATION	// null will be returned
WITHOUT_CLASSIFICATION	// null will be returned
WITHOUT_CLASSIFICATION	// null will be returned
WITHOUT_CLASSIFICATION	// fetch listeners from local storage
WITHOUT_CLASSIFICATION	// here we need to update the UI for the popup menu, if the panel // has one...
WITHOUT_CLASSIFICATION	// we suppress shadow generation, because PDF is a vector format and // the shadow effect is applied via bitmap effects...
WITHOUT_CLASSIFICATION	// register as a listener with sub-components...
WITHOUT_CLASSIFICATION	// go through each zoom menu item and decide whether or not to // enable it...
WITHOUT_CLASSIFICATION	// suppresses compiler warning
WITHOUT_CLASSIFICATION	// we create a new but empty chartMouseListeners list
WITHOUT_CLASSIFICATION	// suppresses compiler warning
WITHOUT_CLASSIFICATION	/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ----------------- * ChartFactory.java * ----------------- * (C) Copyright 2001-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Serge V. Grachov; *                   Joao Guilherme Del Valle; *                   Bill Kelemen; *                   Jon Iles; *                   Jelai Wang; *                   Richard Atkinson; *                   David Browning (for Australian Institute of Marine *                       Science); *                   Benoit Xhenseval; * * Changes * ------- * 19-Oct-2001 : Version 1, most methods transferred from JFreeChart.java (DG); * 22-Oct-2001 : Added methods to create stacked bar charts (DG); *               Renamed DataSource.java --> Dataset.java etc. (DG); * 31-Oct-2001 : Added 3D-effect vertical bar and stacked-bar charts, *               contributed by Serge V. Grachov (DG); * 07-Nov-2001 : Added a flag to control whether or not a legend is added to *               the chart (DG); * 17-Nov-2001 : For pie chart, changed dataset from CategoryDataset to *               PieDataset (DG); * 30-Nov-2001 : Removed try/catch handlers from chart creation, as the *               exception are now RuntimeExceptions, as suggested by Joao *               Guilherme Del Valle (DG); * 06-Dec-2001 : Added createCombinableXXXXXCharts methods (BK); * 12-Dec-2001 : Added createCandlestickChart() method (DG); * 13-Dec-2001 : Updated methods for charts with new renderers (DG); * 08-Jan-2002 : Added import for *               com.jrefinery.chart.combination.CombinedChart (DG); * 31-Jan-2002 : Changed the createCombinableVerticalXYBarChart() method to use *               renderer (DG); * 06-Feb-2002 : Added new method createWindPlot() (DG); * 23-Apr-2002 : Updates to the chart and plot constructor API (DG); * 21-May-2002 : Added new method createAreaChart() (JI); * 06-Jun-2002 : Added new method createGanttChart() (DG); * 11-Jun-2002 : Renamed createHorizontalStackedBarChart() *               --> createStackedHorizontalBarChart() for consistency (DG); * 06-Aug-2002 : Updated Javadoc comments (DG); * 21-Aug-2002 : Added createPieChart(CategoryDataset) method (DG); * 02-Oct-2002 : Fixed errors reported by Checkstyle (DG); * 09-Oct-2002 : Added methods including tooltips and URL flags (DG); * 06-Nov-2002 : Moved renderers into a separate package (DG); * 18-Nov-2002 : Changed CategoryDataset to TableDataset (DG); * 21-Mar-2003 : Incorporated HorizontalCategoryAxis3D, see bug id 685501 (DG); * 13-May-2003 : Merged some horizontal and vertical methods (DG); * 24-May-2003 : Added support for timeline in createHighLowChart (BK); * 07-Jul-2003 : Added createHistogram() method contributed by Jelai Wang (DG); * 27-Jul-2003 : Added createStackedAreaXYChart() method (RA); * 05-Aug-2003 : added new method createBoxAndWhiskerChart (DB); * 08-Sep-2003 : Changed ValueAxis API (DG); * 07-Oct-2003 : Added stepped area XY chart contributed by Matthias Rose (DG); * 06-Nov-2003 : Added createWaterfallChart() method (DG); * 20-Nov-2003 : Set rendering order for 3D bar charts to fix overlapping *               problems (DG); * 25-Nov-2003 : Added createWaferMapChart() method (DG); * 23-Dec-2003 : Renamed createPie3DChart() --> createPieChart3D for *               consistency (DG); * 20-Jan-2004 : Added createPolarChart() method (DG); * 28-Jan-2004 : Fixed bug (882890) with axis range in *               createStackedXYAreaChart() method (DG); * 25-Feb-2004 : Renamed XYToolTipGenerator --> XYItemLabelGenerator (DG); * 11-Mar-2004 : Updated for pie chart changes (DG); * 27-Apr-2004 : Added new createPieChart() method contributed by Benoit *               Xhenseval (see RFE 942195) (DG); * 11-May-2004 : Split StandardCategoryItemLabelGenerator *               --> StandardCategoryToolTipGenerator and *               StandardCategoryLabelGenerator (DG); * 06-Jan-2005 : Removed deprecated methods (DG); * 27-Jan-2005 : Added new constructor to LineAndShapeRenderer (DG); * 28-Feb-2005 : Added docs to createBubbleChart() method (DG); * 17-Mar-2005 : Added createRingPlot() method (DG); * 21-Apr-2005 : Replaced Insets with RectangleInsets (DG); * 29-Nov-2005 : Removed signal chart (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 26-Jan-2006 : Corrected API docs for createScatterPlot() (DG); * 23-Aug-2006 : Modified createStackedXYAreaChart() to use *               StackedXYAreaRenderer2, because StackedXYAreaRenderer doesn't *               handle negative values (DG); * 27-Sep-2006 : Update createPieChart() method for deprecated code (DG); * 29-Nov-2006 : Update createXYBarChart() to use a time based tool tip *               generator is a DateAxis is requested (DG); * 17-Jan-2007 : Added createBoxAndWhiskerChart() method from patch 1603937 *               submitted by Darren Jung (DG); * 10-Jul-2007 : Added new methods to create pie charts with locale for *               section label and tool tip formatting (DG); * 14-Aug-2008 : Added ChartTheme facility (DG); * 23-Oct-2008 : Check for legacy theme in setChartTheme() and reset default *               bar painters (DG); * 20-Dec-2008 : In createStackedAreaChart(), set category margin to 0.0 (DG); * 02-Jul-2013 : Use ParamChecks class (DG); *  */
WITHOUT_CLASSIFICATION	//get absolute value of log10 value
WITHOUT_CLASSIFICATION	// suppresses compiler warning
WITHOUT_CLASSIFICATION	// suppresses compiler warning
WITHOUT_CLASSIFICATION	// create the renderer...
WITHOUT_CLASSIFICATION	// create the plot...
WITHOUT_CLASSIFICATION	// create the chart...
WITHOUT_CLASSIFICATION	// forces recalculation of the axis range
WITHOUT_CLASSIFICATION	// reduce the default margins
WITHOUT_CLASSIFICATION	// override default
WITHOUT_CLASSIFICATION	// get desired width and height from somewhere then...
WITHOUT_CLASSIFICATION	// change rendering order to ensure that bar overlapping is the // right way around
WITHOUT_CLASSIFICATION	// change rendering order to ensure that bar overlapping is the // right way around
WITHOUT_CLASSIFICATION	// no need to instantiate this    
WITHOUT_CLASSIFICATION	// seems to be the same...
WITHOUT_CLASSIFICATION	/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------- * ChartUtilities.java * ------------------- * (C) Copyright 2001-2013, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Wolfgang Irler; *                   Richard Atkinson; *                   Xavier Poinsard; * * Changes * ------- * 11-Dec-2001 : Version 1.  The JPEG method comes from Wolfgang Irler's *               JFreeChartServletDemo class (DG); * 23-Jan-2002 : Changed saveChartAsXXX() methods to pass IOExceptions back to *               caller (DG); * 26-Jun-2002 : Added image map methods (DG); * 05-Aug-2002 : Added writeBufferedImage methods *               Modified writeImageMap method to support flexible image *               maps (RA); * 26-Aug-2002 : Added saveChartAsJPEG and writeChartAsJPEG methods with info *               objects (RA); * 05-Sep-2002 : Added writeImageMap() method to support OverLIB *               - http://www.bosrup.com/web/overlib (RA); * 26-Sep-2002 : Fixed errors reported by Checkstyle (DG); * 17-Oct-2002 : Exposed JPEG quality setting and PNG compression level as *               parameters (DG); * 25-Oct-2002 : Fixed writeChartAsJPEG() empty method bug (DG); * 13-Mar-2003 : Updated writeImageMap method as suggested by Xavier Poinsard *               (see Feature Request 688079) (DG); * 12-Aug-2003 : Added support for custom image maps using *               ToolTipTagFragmentGenerator and URLTagFragmentGenerator (RA); * 02-Sep-2003 : Separated PNG encoding from writing chart to an *               OutputStream (RA); * 04-Dec-2003 : Chart draw() method modified to include anchor point (DG); * 20-Feb-2004 : Edited Javadocs and added argument checking (DG); * 05-Apr-2004 : Fixed problem with buffered image type (DG); * 01-Aug-2004 : Modified to use EncoderUtil for all image encoding (RA); * 02-Aug-2004 : Delegated image map related functionality to ImageMapUtil (RA); * 13-Jan-2005 : Renamed ImageMapUtil --> ImageMapUtilities, removed method *               writeImageMap(PrintWriter, String, ChartRenderingInfo) which *               exists in ImageMapUtilities (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 06-Feb-2006 : API doc update (DG); * 19-Mar-2007 : Use try-finally to close output stream in saveChartAsXXX() *               methods (DG); * 10-Jan-2008 : Fix bug 1868251 - don't create image with transparency when *               saving to JPEG format (DG); * 02-Jul-2013 : Use ParamChecks class (DG); * */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	/* shape visible = */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape filled = */
WITHOUT_CLASSIFICATION	/* shape outlined */
WITHOUT_CLASSIFICATION	/* shape outlined = */
WITHOUT_CLASSIFICATION	/* line visible */
WITHOUT_CLASSIFICATION	/* line visible */
WITHOUT_CLASSIFICATION	/* shape outlined = */
WITHOUT_CLASSIFICATION	/* shape outlined = */
WITHOUT_CLASSIFICATION	/* shape outlined = */
WITHOUT_CLASSIFICATION	/* line visible = */
WITHOUT_CLASSIFICATION	/* line visible = */
WITHOUT_CLASSIFICATION	/* line visible = */
WITHOUT_CLASSIFICATION	// positiveItemLabelPosition;
WITHOUT_CLASSIFICATION	// work out if scaling is required...
WITHOUT_CLASSIFICATION	/* shape outlined = */
WITHOUT_CLASSIFICATION	/* line visible = */
WITHOUT_CLASSIFICATION	// negativeItemLabelPositionList;
WITHOUT_CLASSIFICATION	// ----------------- // --- Constants --- // -----------------
WITHOUT_CLASSIFICATION	// ------------------------ // --- Member Variables --- // ------------------------
WITHOUT_CLASSIFICATION	// -------------------- // --- Constructors --- // --------------------
WITHOUT_CLASSIFICATION	// -------------------------- // --- ChartPanel Methods --- // --------------------------
WITHOUT_CLASSIFICATION	// ---------------------- // --- Public Methods --- // ----------------------
WITHOUT_CLASSIFICATION	// ----------------------- // --- Private Methods --- // -----------------------
WITHOUT_CLASSIFICATION	// do nothing at all
WITHOUT_CLASSIFICATION	// now process the plot if there is one
WITHOUT_CLASSIFICATION	// process all domain axes
WITHOUT_CLASSIFICATION	// process all domain axes
WITHOUT_CLASSIFICATION	// process all range axes
WITHOUT_CLASSIFICATION	// process all range axes
WITHOUT_CLASSIFICATION	// process all renderers
WITHOUT_CLASSIFICATION	// process all renderers
WITHOUT_CLASSIFICATION	// process all annotations
WITHOUT_CLASSIFICATION	// BarRenderer
WITHOUT_CLASSIFICATION	// BarRenderer3D
WITHOUT_CLASSIFICATION	// LineRenderer3D
WITHOUT_CLASSIFICATION	//  StatisticalBarRenderer
WITHOUT_CLASSIFICATION	// MinMaxCategoryRenderer
WITHOUT_CLASSIFICATION	// handle GradientPaint as a special case
WITHOUT_CLASSIFICATION	// create storage for listeners...
WITHOUT_CLASSIFICATION	// add the chart title, if one has been specified...
WITHOUT_CLASSIFICATION	// this fires a ChartChangeEvent
WITHOUT_CLASSIFICATION	// if the flag is being set to true, there may be queued up changes...
WITHOUT_CLASSIFICATION	// register as a listener with sub-components...
WITHOUT_CLASSIFICATION	// seem to be the same...
WITHOUT_CLASSIFICATION	// draw the label
WITHOUT_CLASSIFICATION	// clear the section attributes so that the theme's DrawingSupplier // will be used
WITHOUT_CLASSIFICATION	// for efficiency, we just use the first, last and middle items to // compute a hashCode...
WITHOUT_CLASSIFICATION	// for efficiency, we just use the first, last and middle items to // compute a hashCode...
WITHOUT_CLASSIFICATION	// default is to notify listeners when the // chart changes
WITHOUT_CLASSIFICATION	// added the following hint because of  // http://stackoverflow.com/questions/7785082/
WITHOUT_CLASSIFICATION	// record the chart area, if info is requested...
WITHOUT_CLASSIFICATION	// ensure no drawing occurs outside chart area...
WITHOUT_CLASSIFICATION	// draw the chart background...
WITHOUT_CLASSIFICATION	// draw the title and subtitles...
WITHOUT_CLASSIFICATION	// draw the plot (axes and data visualisation)
WITHOUT_CLASSIFICATION	// private boolean borderVisible; // private transient Stroke borderStroke; // private transient Paint borderPaint;
WITHOUT_CLASSIFICATION	// get a locale-specific resource bundle...
WITHOUT_CLASSIFICATION	// load only when required
WITHOUT_CLASSIFICATION	// use ImageIcon because it waits for the image to load...
WITHOUT_CLASSIFICATION	// don't zoom unless the mouse pointer is in the plot's data area
WITHOUT_CLASSIFICATION	// do not notify while zooming each axis
WITHOUT_CLASSIFICATION	// this generates the change event too
WITHOUT_CLASSIFICATION	// if we don't have at least 2 (x, y) coordinates, just return
WITHOUT_CLASSIFICATION	// now try to reject equality
WITHOUT_CLASSIFICATION	// now try to reject equality
WITHOUT_CLASSIFICATION	// seem to be the same
WITHOUT_CLASSIFICATION	// seem to be the same
WITHOUT_CLASSIFICATION	// now try to reject equality...
WITHOUT_CLASSIFICATION	// now try to reject equality...
WITHOUT_CLASSIFICATION	/* Rectangle2D hotspot = */
WITHOUT_CLASSIFICATION	// seems to be the same...
WITHOUT_CLASSIFICATION	// FIXME //SerialUtilities.writeImage(this.image, stream);
WITHOUT_CLASSIFICATION	// FIXME //this.image = SerialUtilities.readImage(stream);
WITHOUT_CLASSIFICATION	// simple case
WITHOUT_CLASSIFICATION	// by default the outline and background won't be visible
WITHOUT_CLASSIFICATION	// now try to reject equality
WITHOUT_CLASSIFICATION	// create plot ...
WITHOUT_CLASSIFICATION	// add a second dataset and renderer...
WITHOUT_CLASSIFICATION	// return a new chart containing the overlaid plot...
WITHOUT_CLASSIFICATION	// create dataset 1...
WITHOUT_CLASSIFICATION	// seem to be the same
WITHOUT_CLASSIFICATION	// now try to reject equality...
WITHOUT_CLASSIFICATION	// seems to be the same...
WITHOUT_CLASSIFICATION	// baseNegativeItemLabelPosition;
WITHOUT_CLASSIFICATION	// here we change the AffineTransform so we can draw the annotation // to a larger area and scale it down into the display area // afterwards, the original transform is restored
WITHOUT_CLASSIFICATION	// compute transform matrix elements via sample points. Assume no // rotation or shear.
WITHOUT_CLASSIFICATION	//  create transform & transform shape
WITHOUT_CLASSIFICATION	//SerialUtilities.writeImage(this.image, stream);
WITHOUT_CLASSIFICATION	//this.image = SerialUtilities.readImage(stream);
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// ensure the autorange is at least <minRange> in size...
WITHOUT_CLASSIFICATION	// apply the margins - these should apply to the exponent range
WITHOUT_CLASSIFICATION	// even though the axis is not visible, we need ticks for the // gridlines...
WITHOUT_CLASSIFICATION	// add minor ticks (for gridlines)
WITHOUT_CLASSIFICATION	// select a tick unit that is the next one bigger than the current // (log) range divided by 50
WITHOUT_CLASSIFICATION	// while the tick labels overlap and there are more tick sizes available, // choose the next bigger label
WITHOUT_CLASSIFICATION	// while the tick labels overlap and there are more tick sizes available, // choose the next bigger label
WITHOUT_CLASSIFICATION	// what is the available space for one unit?
WITHOUT_CLASSIFICATION	// what is the available space for one unit?
WITHOUT_CLASSIFICATION	// there are no more candidates
WITHOUT_CLASSIFICATION	// there are no more candidates
WITHOUT_CLASSIFICATION	// all tick labels have the same width (equal to the height of the // font)...
WITHOUT_CLASSIFICATION	// look at lower and upper bounds...
WITHOUT_CLASSIFICATION	// no need to create entity if we can't save it anyways...
WITHOUT_CLASSIFICATION	// it is unlikely that 'state' will be null, but check anyway...
WITHOUT_CLASSIFICATION	// It's up to the plot which clones up to restore the correct references
WITHOUT_CLASSIFICATION	// draw the category labels and axis label
WITHOUT_CLASSIFICATION	// regular number axis
WITHOUT_CLASSIFICATION	// regular number axis
WITHOUT_CLASSIFICATION	// displayStart > displayEnd, need to handle split
WITHOUT_CLASSIFICATION	// displayStart > displayEnd, need to handle split
WITHOUT_CLASSIFICATION	// create a new space object if one wasn't supplied...
WITHOUT_CLASSIFICATION	// if the axis is not visible, no additional space is required...
WITHOUT_CLASSIFICATION	// if the axis has a fixed dimension, return it...
WITHOUT_CLASSIFICATION	// get the axis label size and update the space object...
WITHOUT_CLASSIFICATION	//negative values not allowed
WITHOUT_CLASSIFICATION	// no plot, no data.
WITHOUT_CLASSIFICATION	// no plot, no data
WITHOUT_CLASSIFICATION	// if the axis is not visible, no additional space is required...
WITHOUT_CLASSIFICATION	// if the axis has a fixed dimension, return it...
WITHOUT_CLASSIFICATION	// get the axis label size and update the space object...
WITHOUT_CLASSIFICATION	// baseCreateEntities;
WITHOUT_CLASSIFICATION	// add space for the outer tick labels, if any...
WITHOUT_CLASSIFICATION	// draw minor tick marks
WITHOUT_CLASSIFICATION	// work out the initial gap
WITHOUT_CLASSIFICATION	// this is the last period, but it is only partially visible // so check that the label will fit before displaying it...
WITHOUT_CLASSIFICATION	// this is the first period, but it is only partially visible // so check that the label will fit before displaying it...
WITHOUT_CLASSIFICATION	// work out the trailing gap
WITHOUT_CLASSIFICATION	// draw the arrow...
WITHOUT_CLASSIFICATION	// need to work out the space used by the tick labels... // so we can update the cursor...
WITHOUT_CLASSIFICATION	// calculate the max size of the tick labels (if visible)...
WITHOUT_CLASSIFICATION	// if autoRange is true, then the current range is irrelevant
WITHOUT_CLASSIFICATION	//setup number formatter obj
WITHOUT_CLASSIFICATION	//setup number formatter obj
WITHOUT_CLASSIFICATION	// if negative then set flag and make positive
WITHOUT_CLASSIFICATION	// if negative then set flag and make positive
WITHOUT_CLASSIFICATION	//return value; negate if original value was negative:
WITHOUT_CLASSIFICATION	//invert adjustLog10
WITHOUT_CLASSIFICATION	//calculate floor using negative value:
WITHOUT_CLASSIFICATION	//calculate power using positive value; then negate
WITHOUT_CLASSIFICATION	//negative values are allowed
WITHOUT_CLASSIFICATION	//calculate ceil using negative value:
WITHOUT_CLASSIFICATION	// ensure the autorange is at least <minRange> in size...
WITHOUT_CLASSIFICATION	// legendTextPaint
WITHOUT_CLASSIFICATION	//setup for "1e#"-style tick labels or regular // numeric tick labels, depending on flag:
WITHOUT_CLASSIFICATION	// if < 10 then //increase so 0 translates to 0
WITHOUT_CLASSIFICATION	//negative values are allowed //parameter value is > 10 // The Math.log() function is based on e not 10.
WITHOUT_CLASSIFICATION	//parameter value is < -10 //calculate log using positive value:
WITHOUT_CLASSIFICATION	//parameter value is -10 > val < 10 //use as-is
WITHOUT_CLASSIFICATION	//parameter value is -10 > val < 10 //use as-is
WITHOUT_CLASSIFICATION	//negative values not allowed //parameter value is > 0 // The Math.log() function is based on e not 10.
WITHOUT_CLASSIFICATION	//parameter value is <= 0 //use as-is
WITHOUT_CLASSIFICATION	//parameter value is > 10 // The Math.log() function is based on e not 10.
WITHOUT_CLASSIFICATION	//parameter value is > 0 // The Math.log() function is based on e not 10.
WITHOUT_CLASSIFICATION	//no real data present
WITHOUT_CLASSIFICATION	//get lower bound value
WITHOUT_CLASSIFICATION	//actual data is present //get lower bound value
WITHOUT_CLASSIFICATION	//strict flag set, allow-negatives not set and values <= 0
WITHOUT_CLASSIFICATION	//apply lower margin by decreasing lower bound:
WITHOUT_CLASSIFICATION	//lower bound and margin OK; get log10 of lower bound
WITHOUT_CLASSIFICATION	//get absolute value of log10 value
WITHOUT_CLASSIFICATION	//need to account for case where upper==0.0
WITHOUT_CLASSIFICATION	//setup flag based on bounds values
WITHOUT_CLASSIFICATION	//get lower bound value:
WITHOUT_CLASSIFICATION	//get upper bound value
WITHOUT_CLASSIFICATION	//get log10 version of upper bound and round to integer:
WITHOUT_CLASSIFICATION	//for each power of 10 value; create ten ticks
WITHOUT_CLASSIFICATION	//for each tick to be displayed
WITHOUT_CLASSIFICATION	//small log values in use; create numeric value for tick
WITHOUT_CLASSIFICATION	//create tick label (force use of fmt obj):
WITHOUT_CLASSIFICATION	//no tick label to be shown
WITHOUT_CLASSIFICATION	//create tick label:
WITHOUT_CLASSIFICATION	//get lower bound value:
WITHOUT_CLASSIFICATION	//if autorange still below minimum then adjust by 1% // (can be needed when minRange is very small):
WITHOUT_CLASSIFICATION	//get upper bound value
WITHOUT_CLASSIFICATION	//if small log values and lower bound value too small // then set to a small value (don't allow <= 0):
WITHOUT_CLASSIFICATION	//get log10 version of lower bound and round to integer:
WITHOUT_CLASSIFICATION	//get log10 version of upper bound and round to integer:
WITHOUT_CLASSIFICATION	//for each tick to be displayed
WITHOUT_CLASSIFICATION	//only 1 power of 10 value, it's > 0 and its resulting // tick value will be larger than lower bound of data //decrement to generate more ticks
WITHOUT_CLASSIFICATION	//showing "1e#"-style ticks or negative exponent // generating tick value between 0 & 1; show fewer
WITHOUT_CLASSIFICATION	//tick value not between 0 & 1 //show tick label if it's the first or last in // the set, or if it's 1-5; beyond that show // fewer as the values get larger:
WITHOUT_CLASSIFICATION	//not small log values in use; allow for values <= 0 //if did zero tick last iter then //decrement to do 1.0 tick now //calculate power-of-ten value for tick:
WITHOUT_CLASSIFICATION	// did not do zero tick last iteration
WITHOUT_CLASSIFICATION	//tick value is 1.0 and 0.0 is within data range //set tick value to zero //indicate zero tick
WITHOUT_CLASSIFICATION	// if past highest data value then exit // method
WITHOUT_CLASSIFICATION	//tick value not below lowest data value
WITHOUT_CLASSIFICATION	//for each tick with a label to be displayed
WITHOUT_CLASSIFICATION	//small log values in use
WITHOUT_CLASSIFICATION	//first tick of group; create label text
WITHOUT_CLASSIFICATION	//not "log10"-type label
WITHOUT_CLASSIFICATION	//if small log values and lower bound value too small // then set to a small value (don't allow <= 0):
WITHOUT_CLASSIFICATION	//only 1 power of 10 value, it's > 0 and its resulting // tick value will be larger than lower bound of data //decrement to generate more ticks
WITHOUT_CLASSIFICATION	//tick value not below lowest data value
WITHOUT_CLASSIFICATION	// ITEM_LABEL_PAINT
WITHOUT_CLASSIFICATION	//if flag then //create "log10"-type label
WITHOUT_CLASSIFICATION	//if flag then //create "1e#"-type label
WITHOUT_CLASSIFICATION	//not "1e#"-type label // if positive exponent then // make integer
WITHOUT_CLASSIFICATION	//negative exponent; create fractional value //set exact number of fractional digits to // be shown:
WITHOUT_CLASSIFICATION	//not small log values in use; allow for values <= 0 //if did zero tick last iter then
WITHOUT_CLASSIFICATION	//decrement to do 1.0 tick now
WITHOUT_CLASSIFICATION	//first tick of group // did not do zero tick last // iteration
WITHOUT_CLASSIFICATION	// not first or last tick on graph and value // is 1.0 //change value to 0.0 //indicate zero tick //create label for tick
WITHOUT_CLASSIFICATION	//first or last tick on graph or value is 1.0 //create label for tick:
WITHOUT_CLASSIFICATION	//create "log10"-type label
WITHOUT_CLASSIFICATION	//create "1e#"-type label
WITHOUT_CLASSIFICATION	// did zero tick last iteration //no label //clear flag
WITHOUT_CLASSIFICATION	// not first tick of group //no label //make sure flag cleared
WITHOUT_CLASSIFICATION	//if past highest data value then exit method
WITHOUT_CLASSIFICATION	//create tick object and add to list:
WITHOUT_CLASSIFICATION	//using exponents or force-formatter flag is set // (convert 'E' to lower-case 'e'):
WITHOUT_CLASSIFICATION	// populate deprecated fields
WITHOUT_CLASSIFICATION	// usually the range will be a DateRange, but if it isn't do a // conversion...
WITHOUT_CLASSIFICATION	// check the new minimum date relative to the current maximum date
WITHOUT_CLASSIFICATION	// check the new maximum date relative to the current minimum date
WITHOUT_CLASSIFICATION	// long result = calendar.getTimeInMillis(); // won't work with JDK 1.3
WITHOUT_CLASSIFICATION	// date formatters
WITHOUT_CLASSIFICATION	// milliseconds
WITHOUT_CLASSIFICATION	// look at lower and upper bounds...
WITHOUT_CLASSIFICATION	// create a new space object if one wasn't supplied...
WITHOUT_CLASSIFICATION	// if the axis is not visible, no additional space is required...
WITHOUT_CLASSIFICATION	// seconds
WITHOUT_CLASSIFICATION	// minutes
WITHOUT_CLASSIFICATION	// hours
WITHOUT_CLASSIFICATION	// days
WITHOUT_CLASSIFICATION	// months
WITHOUT_CLASSIFICATION	// years
WITHOUT_CLASSIFICATION	//Timeline hasn't method getStartTime()
WITHOUT_CLASSIFICATION	// start with the current tick unit...
WITHOUT_CLASSIFICATION	// then extrapolate...
WITHOUT_CLASSIFICATION	// start with a unit that is at least 1/10th of the axis length
WITHOUT_CLASSIFICATION	// now extrapolate based on label height and unit height...
WITHOUT_CLASSIFICATION	// make final selection...
WITHOUT_CLASSIFICATION	// all tick labels have the same width (equal to the height of // the font)...
WITHOUT_CLASSIFICATION	// could add a flag to make the following correction optional...
WITHOUT_CLASSIFICATION	// could add a flag to make the following correction optional...
WITHOUT_CLASSIFICATION	// work out the value, label and position
WITHOUT_CLASSIFICATION	// work out the value, label and position
WITHOUT_CLASSIFICATION	// even though the axis is not visible, we need to refresh ticks in // case the grid is being drawn...
WITHOUT_CLASSIFICATION	// draw the tick marks and labels...
WITHOUT_CLASSIFICATION	// draw the axis label (note that 'state' is passed in *and* // returned)...
WITHOUT_CLASSIFICATION	// when zooming to sub-millisecond ranges, it can be the case that // adjEnd == adjStart...and we can't have an axis with zero length // so we apply this instead:
WITHOUT_CLASSIFICATION	// 'dateTickUnit' is immutable : no need to clone
WITHOUT_CLASSIFICATION	// 'tickMarkPosition' is immutable : no need to clone
WITHOUT_CLASSIFICATION	// if there is no specific font, use the general one...
WITHOUT_CLASSIFICATION	// if there is no specific paint, use the general one...
WITHOUT_CLASSIFICATION	// find first excluded base segment starting fromDomainValue
WITHOUT_CLASSIFICATION	// draw the category labels and axis label
WITHOUT_CLASSIFICATION	// get the axis label size and update the space object...
WITHOUT_CLASSIFICATION	// calculate the max size of the tick labels (if visible)...
WITHOUT_CLASSIFICATION	// nothing required
WITHOUT_CLASSIFICATION	// sanity check for data area...
WITHOUT_CLASSIFICATION	// step down in size until the current size is too small or there are  // no more units
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // predetermined segments sizes ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // other constants ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // private attributes ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // static block ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// make a time zone with no DST for our Calendar calculations
WITHOUT_CLASSIFICATION	// calculate midnight of first monday after 1/1/1900 relative to // current locale
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // constructors and factory methods ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // operations ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// verify that baseTimeline is compatible with us
WITHOUT_CLASSIFICATION	// - partialTimeInException;
WITHOUT_CLASSIFICATION	// - partialTimeInException;
WITHOUT_CLASSIFICATION	//return toTimelineValue(dateDomainValue.getTime());
WITHOUT_CLASSIFICATION	// calculate the result as if no exceptions
WITHOUT_CLASSIFICATION	// adjust result for any exceptions in the result calculated
WITHOUT_CLASSIFICATION	// skip all whole exception segments in the range
WITHOUT_CLASSIFICATION	// skip exception or excluded segments we may fall on
WITHOUT_CLASSIFICATION	//addException(exceptionDate.getTime());
WITHOUT_CLASSIFICATION	// find all consecutive included segments
WITHOUT_CLASSIFICATION	// add the interval as an exception
WITHOUT_CLASSIFICATION	// find all consecutive included segments
WITHOUT_CLASSIFICATION	// move forward exceptionSegmentCount segments skipping // excluded segments
WITHOUT_CLASSIFICATION	// empty
WITHOUT_CLASSIFICATION	// add the interval as an exception
WITHOUT_CLASSIFICATION	// this is not one of our included segment, skip it
WITHOUT_CLASSIFICATION	// first check that autoPopulate==false works as expected
WITHOUT_CLASSIFICATION	// cycle over all the base segments groups in the range
WITHOUT_CLASSIFICATION	// cycle through all the segments contained in the base exclusion // area
WITHOUT_CLASSIFICATION	// go to next base segment group
WITHOUT_CLASSIFICATION	// key not found
WITHOUT_CLASSIFICATION	// Segment fromSegment = getSegment(from); // fromSegment.inc(); // Segment toSegment = getSegment(to); // toSegment.dec();
WITHOUT_CLASSIFICATION	// long start = Math.max( //     fromSegment.getSegmentStart(), this.segmentStart // ); // long end = Math.min(toSegment.getSegmentEnd(), this.segmentEnd);
WITHOUT_CLASSIFICATION	// Compute number of labels
WITHOUT_CLASSIFICATION	// Cycle when necessary
WITHOUT_CLASSIFICATION	// Cycle when necessary
WITHOUT_CLASSIFICATION	// If tick overlap when cycling, update last tick too
WITHOUT_CLASSIFICATION	// continue and separate the labels only if necessary
WITHOUT_CLASSIFICATION	// TOP
WITHOUT_CLASSIFICATION	// TOP
WITHOUT_CLASSIFICATION	// TOP
WITHOUT_CLASSIFICATION	// BOTTOM
WITHOUT_CLASSIFICATION	// BOTTOM
WITHOUT_CLASSIFICATION	// BOTTOM
WITHOUT_CLASSIFICATION	// LEFT
WITHOUT_CLASSIFICATION	// LEFT
WITHOUT_CLASSIFICATION	// LEFT
WITHOUT_CLASSIFICATION	// RIGHT
WITHOUT_CLASSIFICATION	// RIGHT
WITHOUT_CLASSIFICATION	// no plot, no data
WITHOUT_CLASSIFICATION	// no plot, no data
WITHOUT_CLASSIFICATION	// if fixed auto range, then derive lower bound...
WITHOUT_CLASSIFICATION	// ensure the autorange is at least <minRange> in size...
WITHOUT_CLASSIFICATION	// ensure the autorange is at least <minRange> in size...
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// even though the axis is not visible, we need ticks for the // gridlines...
WITHOUT_CLASSIFICATION	// look at lower and upper bounds...
WITHOUT_CLASSIFICATION	// draw the tick marks and labels...
WITHOUT_CLASSIFICATION	// TOP
WITHOUT_CLASSIFICATION	// BOTTOM
WITHOUT_CLASSIFICATION	// BOTTOM
WITHOUT_CLASSIFICATION	// LEFT
WITHOUT_CLASSIFICATION	// LEFT
WITHOUT_CLASSIFICATION	// RIGHT
WITHOUT_CLASSIFICATION	// RIGHT
WITHOUT_CLASSIFICATION	// first check that autoPopulate==false works as expected
WITHOUT_CLASSIFICATION	// default make height of plotArea
WITHOUT_CLASSIFICATION	// allow fixed thickness
WITHOUT_CLASSIFICATION	// update, but dont draw tick marks (needed for stepped colors)
WITHOUT_CLASSIFICATION	// suppresses compiler warnings
WITHOUT_CLASSIFICATION	// setTickValues was missing from ColorPalette v. 0.96 //colorPalette.setTickValues(this.axis.getTicks());
WITHOUT_CLASSIFICATION	// calculate the adjusted data area taking into account the 3D effect...
WITHOUT_CLASSIFICATION	// argument checking delegated...
WITHOUT_CLASSIFICATION	// transparent
WITHOUT_CLASSIFICATION	//gets the outline stroke width of the plot
WITHOUT_CLASSIFICATION	// ensure that all the symbols are displayed
WITHOUT_CLASSIFICATION	// this ensure that the grid bands will be displayed correctly.
WITHOUT_CLASSIFICATION	// avoid to draw overlapping tick labels
WITHOUT_CLASSIFICATION	// avoid to draw overlapping tick labels
WITHOUT_CLASSIFICATION	// don't draw this tick label
WITHOUT_CLASSIFICATION	// don't draw this tick label
WITHOUT_CLASSIFICATION	// remember these values for next comparison
WITHOUT_CLASSIFICATION	// remember these values for next comparison
WITHOUT_CLASSIFICATION	// first check that autoPopulate==false works as expected
WITHOUT_CLASSIFICATION	// if the axis is not visible, don't draw it...
WITHOUT_CLASSIFICATION	// even though the axis is not visible, we need ticks for the // gridlines...
WITHOUT_CLASSIFICATION	// all tick labels have the same width (equal to the height of the // font)...
WITHOUT_CLASSIFICATION	// draw the category labels and axis label
WITHOUT_CLASSIFICATION	// create a new space object if one wasn't supplied...
WITHOUT_CLASSIFICATION	// if the axis is not visible, no additional space is required...
WITHOUT_CLASSIFICATION	// start with the current tick unit...
WITHOUT_CLASSIFICATION	// start with the current tick unit...
WITHOUT_CLASSIFICATION	// then extrapolate...
WITHOUT_CLASSIFICATION	// then extrapolate...
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// must be top or bottom
WITHOUT_CLASSIFICATION	// catches null also
WITHOUT_CLASSIFICATION	// no action required.
WITHOUT_CLASSIFICATION	// no action required.
WITHOUT_CLASSIFICATION	// check if we need to collect chart entities from the container
WITHOUT_CLASSIFICATION	// place in this row (truncated) anyway
WITHOUT_CLASSIFICATION	// start new row
WITHOUT_CLASSIFICATION	//Block b = (Block) blocks.get(i);
WITHOUT_CLASSIFICATION	// can safely ignore
WITHOUT_CLASSIFICATION	// find optimum height, then map to range
WITHOUT_CLASSIFICATION	// find optimum height
WITHOUT_CLASSIFICATION	// find optimum height
WITHOUT_CLASSIFICATION	// find optimum height and map to range
WITHOUT_CLASSIFICATION	// find optimum width and map to range
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// since the flow layout is relatively straightforward, // no information needs to be recorded here
WITHOUT_CLASSIFICATION	// no action required.
WITHOUT_CLASSIFICATION	// first arrange without constraints, and see if this fits within // the required ranges...
WITHOUT_CLASSIFICATION	// first arrange without constraints, then see if the width fits // within the required range...if not, call arrangeFN() at max width
WITHOUT_CLASSIFICATION	// first arrange without constraints, then see if the width fits // within the required range...if not, call arrangeFN() at max width
WITHOUT_CLASSIFICATION	// check if we need to collect chart entities from the container
WITHOUT_CLASSIFICATION	//Block b = (Block) blocks.get(i);
WITHOUT_CLASSIFICATION	// this default implementation will just fill the available // border space with a single color
WITHOUT_CLASSIFICATION	// backgroundImage
WITHOUT_CLASSIFICATION	// fixed width
WITHOUT_CLASSIFICATION	// width is OK, but height must be constrained
WITHOUT_CLASSIFICATION	// height is OK, but width must be constrained
WITHOUT_CLASSIFICATION	// nothing to clear
WITHOUT_CLASSIFICATION	// if the area has zero height or width, we shouldn't draw anything
WITHOUT_CLASSIFICATION	// since the flow layout is relatively straightforward, no information // needs to be recorded here
WITHOUT_CLASSIFICATION	// place in this column (truncated) anyway
WITHOUT_CLASSIFICATION	// start new column
WITHOUT_CLASSIFICATION	// set a theme using the new shadow generator feature available in // 1.0.14 - for backwards compatibility it is not enabled by default
WITHOUT_CLASSIFICATION	/* x-axis label*/
WITHOUT_CLASSIFICATION	/* y-axis label */
WITHOUT_CLASSIFICATION	// chart title // data // no legend // tooltips // no URL generation
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// ****************************************************************** //  More than 150 demo applications are included with the JFreeChart //  Developer Guide...for more information, see: // //  >   http://www.object-refinery.com/jfreechart/guide.html // // ******************************************************************
WITHOUT_CLASSIFICATION	// title // x-axis label // y-axis label // data // create legend? // generate tooltips? // generate URLs?
WITHOUT_CLASSIFICATION	// set a custom background for the chart
WITHOUT_CLASSIFICATION	// customise the title position and font
WITHOUT_CLASSIFICATION	// use gradients and white borders for the section colours
WITHOUT_CLASSIFICATION	// customise the section label appearance
WITHOUT_CLASSIFICATION	// add a subtitle giving the data source
WITHOUT_CLASSIFICATION	// pass to the super-class for handling
WITHOUT_CLASSIFICATION	// pass to the super-class for handling
WITHOUT_CLASSIFICATION	// pass to the super-class for handling
WITHOUT_CLASSIFICATION	// don't need to do anything
WITHOUT_CLASSIFICATION	// don't need to do anything
WITHOUT_CLASSIFICATION	//    /** Insets text field. */ //    private InsetsTextField tickLabelInsetsTextField; // //    /** Label insets text field. */ //    private InsetsTextField labelInsetsTextField;
WITHOUT_CLASSIFICATION	// figure out what type of axis we have and instantiate the // appropriate panel
WITHOUT_CLASSIFICATION	// Insets values
WITHOUT_CLASSIFICATION	// axis.setTickMarkStroke(getTickMarkStroke());
WITHOUT_CLASSIFICATION	// create a panel for the settings...
WITHOUT_CLASSIFICATION	//dmo: added this panel for colorbar control. (start dmo additions)
WITHOUT_CLASSIFICATION	//      end fix by rfuller
WITHOUT_CLASSIFICATION	//dmo: (end dmo additions)
WITHOUT_CLASSIFICATION	// set the plot properties...
WITHOUT_CLASSIFICATION	// then the axis properties...
WITHOUT_CLASSIFICATION	// pass to super-class for handling
WITHOUT_CLASSIFICATION	//  No op
WITHOUT_CLASSIFICATION	//  No op
WITHOUT_CLASSIFICATION	// defer argument checks...
WITHOUT_CLASSIFICATION	//      fix by rfuller
WITHOUT_CLASSIFICATION	// populate the deprecated fields
WITHOUT_CLASSIFICATION	//same as for ChartEntity!
WITHOUT_CLASSIFICATION	//same as for ChartEntity!
WITHOUT_CLASSIFICATION	//same as for ChartEntity!
WITHOUT_CLASSIFICATION	// update the deprecated field
WITHOUT_CLASSIFICATION	// update the deprecated fields
WITHOUT_CLASSIFICATION	// check the deprecated fields
WITHOUT_CLASSIFICATION	// try the parent plot
WITHOUT_CLASSIFICATION	// do not notify while zooming each axis
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// this generates the change event too
WITHOUT_CLASSIFICATION	/* x-axis label*/
WITHOUT_CLASSIFICATION	/* y-axis label */
WITHOUT_CLASSIFICATION	// set a custom background for the chart
WITHOUT_CLASSIFICATION	// customise the title position and font
WITHOUT_CLASSIFICATION	// use gradients and white borders for the section colours
WITHOUT_CLASSIFICATION	// customise the section label appearance
WITHOUT_CLASSIFICATION	// add a subtitle giving the data source
WITHOUT_CLASSIFICATION	//same as for ChartEntity!
WITHOUT_CLASSIFICATION	//dmo added //dmo added
WITHOUT_CLASSIFICATION	// if there is a tool tip, we expect it to generate the title and // alt values, so we only add an empty alt if there is no tooltip
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// FIXME
WITHOUT_CLASSIFICATION	// this is a paint we don't recognise
WITHOUT_CLASSIFICATION	// null is handled fine here...
WITHOUT_CLASSIFICATION	// we can't do anything
WITHOUT_CLASSIFICATION	// force a redraw
WITHOUT_CLASSIFICATION	// pass on the event to the auxiliary handlers
WITHOUT_CLASSIFICATION	// pass on the event to the auxiliary handlers
WITHOUT_CLASSIFICATION	// relay the event from the canvas to our registered listeners
WITHOUT_CLASSIFICATION	// relay the event from the canvas to our registered listeners
WITHOUT_CLASSIFICATION	// set the default stroke for all series
WITHOUT_CLASSIFICATION	//this.chartPanel.isDomainZoomable()) {
WITHOUT_CLASSIFICATION	//this.chartPanel.isRangeZoomable()) {
WITHOUT_CLASSIFICATION	// does nothing unless overridden
WITHOUT_CLASSIFICATION	// does nothing unless overridden
WITHOUT_CLASSIFICATION	// does nothing unless overridden        
WITHOUT_CLASSIFICATION	// selected rectangle shouldn't extend outside the data area...
WITHOUT_CLASSIFICATION	// for mouseReleased event, (horizontalZoom || verticalZoom) // will be true, so we can just test for either being false; // otherwise both are true
WITHOUT_CLASSIFICATION	// chart title // data // no legend // tooltips // no URL generation
WITHOUT_CLASSIFICATION	// does nothing unless overridden
WITHOUT_CLASSIFICATION	// special case - if the underlying rectangle uses ints we // need to create one that uses doubles
WITHOUT_CLASSIFICATION	// title // x-axis label // y-axis label
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// the actual panning occurs later in the mouseDragged() method
WITHOUT_CLASSIFICATION	//handle panning if we have a start point else unregister
WITHOUT_CLASSIFICATION	//if we have been panning reset the cursor //unregister in any case
WITHOUT_CLASSIFICATION	// the URL text should already have been escaped by the URL generator
WITHOUT_CLASSIFICATION	// no fields to test
WITHOUT_CLASSIFICATION	/// we have rotation huston, please spin me
WITHOUT_CLASSIFICATION	/// we have rotation huston, please spin me
WITHOUT_CLASSIFICATION	/// we have rotation
WITHOUT_CLASSIFICATION	/// we have rotation
WITHOUT_CLASSIFICATION	/// we have rotation
WITHOUT_CLASSIFICATION	// isArrowAtTop
WITHOUT_CLASSIFICATION	//int maxX = (int) (plotArea.getMaxX());
WITHOUT_CLASSIFICATION	//int maxX = (int) (plotArea.getMaxX());
WITHOUT_CLASSIFICATION	//int midY = (int) (plotArea.getMinY() + (plotArea.getHeight() / 2));
WITHOUT_CLASSIFICATION	//int midY = (int) (plotArea.getMinY() + (plotArea.getHeight() / 2));
WITHOUT_CLASSIFICATION	/// we have rotation houston, please spin me
WITHOUT_CLASSIFICATION	// horizontal
WITHOUT_CLASSIFICATION	// store the plot and its weight
WITHOUT_CLASSIFICATION	// configure the range axis...
WITHOUT_CLASSIFICATION	// work out the space required by the domain axis...
WITHOUT_CLASSIFICATION	// work out the maximum height or width of the non-shared axes...
WITHOUT_CLASSIFICATION	// we expect the line to be vertical or horizontal // vertical
WITHOUT_CLASSIFICATION	// calculate plotAreas of all sub-plots, maximum vertical/horizontal // axis width/height
WITHOUT_CLASSIFICATION	// calculate sub-plot area
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// calculate the data area...
WITHOUT_CLASSIFICATION	// set the width and height of non-shared axis of all sub-plots
WITHOUT_CLASSIFICATION	// draw the shared axis
WITHOUT_CLASSIFICATION	// draw all the charts
WITHOUT_CLASSIFICATION	// the range axis is deserialized before the subplots, so its value // range is likely to be incorrect...
WITHOUT_CLASSIFICATION	// default preserves previous // behaviour
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// make the link area a square if the pie chart is to be circular... // is circular?
WITHOUT_CLASSIFICATION	// the link area defines the dog leg points for the linking lines to // the labels
WITHOUT_CLASSIFICATION	// the explode area defines the max circle/ellipse for the exploded pie // sections. // it is defined by shrinking the linkArea by the linkMargin factor.
WITHOUT_CLASSIFICATION	// the pie area defines the circle/ellipse for regular pie sections. // it is defined by shrinking the explodeArea by the explodeMargin // factor.
WITHOUT_CLASSIFICATION	// the link area defines the dog-leg point for the linking lines to // the labels
WITHOUT_CLASSIFICATION	// get the data source - return if null;
WITHOUT_CLASSIFICATION	// if too any elements
WITHOUT_CLASSIFICATION	// get a list of keys...
WITHOUT_CLASSIFICATION	// do nothing by default.
WITHOUT_CLASSIFICATION	//g2.clip(clipArea);
WITHOUT_CLASSIFICATION	// if depth is negative don't draw anything
WITHOUT_CLASSIFICATION	// draw the bottom circle
WITHOUT_CLASSIFICATION	// draw the height
WITHOUT_CLASSIFICATION	// cycle through once drawing only the sides at the back...
WITHOUT_CLASSIFICATION	// cycle through again drawing only the sides at the front...
WITHOUT_CLASSIFICATION	// add a tooltip for the section...
WITHOUT_CLASSIFICATION	// @mgs: using the method's return value was missing
WITHOUT_CLASSIFICATION	// for CLOCKWISE charts, the extent will be negative...
WITHOUT_CLASSIFICATION	// start at front
WITHOUT_CLASSIFICATION	// the segment starts at the front, and wraps all // the way around // the back and finishes at the front again
WITHOUT_CLASSIFICATION	// starts at the front, finishes at the back (going // around the left side)
WITHOUT_CLASSIFICATION	// the segment starts at the back (still extending // CLOCKWISE)
WITHOUT_CLASSIFICATION	// whole segment stays at the back
WITHOUT_CLASSIFICATION	// starts at the back, wraps around front, and // finishes at back again
WITHOUT_CLASSIFICATION	// starts at back, finishes at front (CLOCKWISE)
WITHOUT_CLASSIFICATION	// segment starts at the front
WITHOUT_CLASSIFICATION	// and finishes at the front
WITHOUT_CLASSIFICATION	// segment only occupies the front
WITHOUT_CLASSIFICATION	// segments wraps right around the back...
WITHOUT_CLASSIFICATION	// segments starts at front and finishes at back...
WITHOUT_CLASSIFICATION	// segment starts at back
WITHOUT_CLASSIFICATION	// and finishes at back
WITHOUT_CLASSIFICATION	//dmo //zero when the parameter is not set
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// plot is likely registered as a listener with the existing axis...
WITHOUT_CLASSIFICATION	// plot is likely registered as a listener with the existing axis...
WITHOUT_CLASSIFICATION	// if the plot area is too small, just return...
WITHOUT_CLASSIFICATION	// record the plot area...
WITHOUT_CLASSIFICATION	// additional dataArea modifications //check whether modification is
WITHOUT_CLASSIFICATION	// ratio represents pixels
WITHOUT_CLASSIFICATION	// ratio represents axis units
WITHOUT_CLASSIFICATION	// draw the plot background...
WITHOUT_CLASSIFICATION	// draw vertical crosshair if required...
WITHOUT_CLASSIFICATION	// draw horizontal crosshair if required...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// delegate 'info' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// work out the space required by the domain axis...
WITHOUT_CLASSIFICATION	// delegate 'info' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// now get the data and plot it (the visual representation will depend // on the renderer that has been set)...
WITHOUT_CLASSIFICATION	// get the data points
WITHOUT_CLASSIFICATION	// this is a new column
WITHOUT_CLASSIFICATION	// end of column
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	//              }
WITHOUT_CLASSIFICATION	// both axes
WITHOUT_CLASSIFICATION	// just the horizontal axis...
WITHOUT_CLASSIFICATION	// just the vertical axis...
WITHOUT_CLASSIFICATION	// check a series with repeating items
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// adjust the plot area by the interior spacing value
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	//turn off anti-aliasing when filling rectangles
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// both axes
WITHOUT_CLASSIFICATION	// just the horizontal axis...
WITHOUT_CLASSIFICATION	// just the vertical axis...
WITHOUT_CLASSIFICATION	// draw the background
WITHOUT_CLASSIFICATION	//Object oldValue = this.toolTipGenerator;
WITHOUT_CLASSIFICATION	//Object oldValue = this.urlGenerator;
WITHOUT_CLASSIFICATION	// plot the data (unless the dataset is null)...
WITHOUT_CLASSIFICATION	// the following relies on the fact that the intervals are immutable
WITHOUT_CLASSIFICATION	// intentionally blank
WITHOUT_CLASSIFICATION	// can't find any difference
WITHOUT_CLASSIFICATION	// we're doing this for testing only, and make sure that we // only add data in descending order by x-value
WITHOUT_CLASSIFICATION	// work out the maximum height or width of the non-shared axes...
WITHOUT_CLASSIFICATION	// calculate sub-plot area
WITHOUT_CLASSIFICATION	// calculate sub-plot area
WITHOUT_CLASSIFICATION	// set up info collection...
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// calculate the data area...
WITHOUT_CLASSIFICATION	// set the width and height of non-shared axis of all sub-plots
WITHOUT_CLASSIFICATION	// draw the shared axis
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// record the plot area...
WITHOUT_CLASSIFICATION	//  range = this.rangeAxis.getRange().getLength(); //  scaledRange = range * percent; //   rangeAxis.setAnchoredRange(scaledRange);
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	// draw all the subplots
WITHOUT_CLASSIFICATION	// override is only for documentation purposes
WITHOUT_CLASSIFICATION	// send a dataset change event to self to trigger plot change event
WITHOUT_CLASSIFICATION	// adjust the drawing area for the plot insets (if any)...
WITHOUT_CLASSIFICATION	// y is minor
WITHOUT_CLASSIFICATION	// y is minor
WITHOUT_CLASSIFICATION	//get major dimension
WITHOUT_CLASSIFICATION	//ellipse diameter is the minor dimension
WITHOUT_CLASSIFICATION	// draw the wafer
WITHOUT_CLASSIFICATION	// no data in the parent plot
WITHOUT_CLASSIFICATION	// set up info collection...
WITHOUT_CLASSIFICATION	// set the width and height of non-shared axis of all sub-plots
WITHOUT_CLASSIFICATION	// draw the shared axis
WITHOUT_CLASSIFICATION	// draw all the charts
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// delegate 'info' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	//set upperLeft point // x is minor
WITHOUT_CLASSIFICATION	//set upperLeft point // x is minor
WITHOUT_CLASSIFICATION	// calculate and draw the notch // horizontal orientation is considered notch right // vertical orientation is considered notch down
WITHOUT_CLASSIFICATION	//this.axisOffset.trim(dataArea);
WITHOUT_CLASSIFICATION	//// SECTION PAINT ////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// is there an override?
WITHOUT_CLASSIFICATION	// if not, check if there is a paint defined for the specified key
WITHOUT_CLASSIFICATION	// if not, check if there is a paint defined for the specified key
WITHOUT_CLASSIFICATION	// nothing defined - do we autoPopulate?
WITHOUT_CLASSIFICATION	// nothing defined - do we autoPopulate?
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	// null argument check delegated...
WITHOUT_CLASSIFICATION	//// SECTION OUTLINE PAINT ////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// SECTION OUTLINE STROKE ///////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// if not, check if there is a stroke defined for the specified key
WITHOUT_CLASSIFICATION	// adjust the plot area for interior spacing and labels...
WITHOUT_CLASSIFICATION	// make the link area a square if the pie chart is to be circular...
WITHOUT_CLASSIFICATION	// work out the space required by the domain axis...
WITHOUT_CLASSIFICATION	// work out the maximum height or width of the non-shared axes...
WITHOUT_CLASSIFICATION	// calculate sub-plot area
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// the pie area defines the circle/ellipse for regular pie sections. // it is defined by shrinking the explodeArea by the explodeMargin // factor.
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// plot the data (unless the dataset is null)...
WITHOUT_CLASSIFICATION	// no data in the parent plot
WITHOUT_CLASSIFICATION	// update the linking line target for later // add an entity for the pie section
WITHOUT_CLASSIFICATION	// work out the mid angle (0 - 90 and 270 - 360) = right, // otherwise left
WITHOUT_CLASSIFICATION	// classify the keys according to which side the label will appear...
WITHOUT_CLASSIFICATION	// calculate the max label width from the plot dimensions, because // a circular pie can leave a lot more room for labels...
WITHOUT_CLASSIFICATION	// draw the labels...
WITHOUT_CLASSIFICATION	// draw the right labels...
WITHOUT_CLASSIFICATION	//hh * getInteriorGap();
WITHOUT_CLASSIFICATION	// line not visible
WITHOUT_CLASSIFICATION	// for a RadialGradientPaint we adjust the center and radius to match // the current pie segment...
WITHOUT_CLASSIFICATION	// can't find any difference...
WITHOUT_CLASSIFICATION	// DEPRECATED FIELDS AND METHODS...
WITHOUT_CLASSIFICATION	// no range axis // no renderer
WITHOUT_CLASSIFICATION	// backgroundImage
WITHOUT_CLASSIFICATION	// set the width and height of non-shared axis of all sub-plots
WITHOUT_CLASSIFICATION	// draw the shared axis
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// delegate 'info' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	// draw all the subplots
WITHOUT_CLASSIFICATION	// send a dataset change event to self to trigger plot change event
WITHOUT_CLASSIFICATION	// adjust the drawing area for the plot insets (if any)...
WITHOUT_CLASSIFICATION	// delegate 'state' and 'source' argument checks...
WITHOUT_CLASSIFICATION	// after setting up all the subplots, the shared domain axis may need // reconfiguring
WITHOUT_CLASSIFICATION	// 20% // 20% // 20%
WITHOUT_CLASSIFICATION	// create the bounds for the inner arc
WITHOUT_CLASSIFICATION	// calculate inner arc in reverse direction, for later // GeneralPath construction
WITHOUT_CLASSIFICATION	// add an entity for the pie section
WITHOUT_CLASSIFICATION	// check that there is some data to display...
WITHOUT_CLASSIFICATION	// the columns variable is always >= rows
WITHOUT_CLASSIFICATION	// swap rows and columns to match plotArea shape
WITHOUT_CLASSIFICATION	// update the section colors to match the global colors...
WITHOUT_CLASSIFICATION	// pre-fetch the colors for each key...this is because the subplots // may not display every key, but we need the coloring to be // consistent...
WITHOUT_CLASSIFICATION	// column keys provide potential keys for individual pies
WITHOUT_CLASSIFICATION	// row keys provide potential keys for individual pies
WITHOUT_CLASSIFICATION	/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates. * Other names may be trademarks of their respective owners.] * * ----------------- * CategoryPlot.java * ----------------- * (C) Copyright 2000-2014, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Jeremy Bowman; *                   Arnaud Lelievre; *                   Richard West, Advanced Micro Devices, Inc.; *                   Ulrich Voigt - patch 2686040; *                   Peter Kolb - patches 2603321 and 2809117; * * Changes * ------- * 21-Jun-2001 : Removed redundant JFreeChart parameter from constructors (DG); * 21-Aug-2001 : Added standard header. Fixed DOS encoding problem (DG); * 18-Sep-2001 : Updated header (DG); * 15-Oct-2001 : Data source classes moved to com.jrefinery.data.* (DG); * 22-Oct-2001 : Renamed DataSource.java --> Dataset.java etc. (DG); * 23-Oct-2001 : Changed intro and trail gaps on bar plots to use percentage of *               available space rather than a fixed number of units (DG); * 12-Dec-2001 : Changed constructors to protected (DG); * 13-Dec-2001 : Added tooltips (DG); * 16-Jan-2002 : Increased maximum intro and trail gap percents, plus added *               some argument checking code.  Thanks to Taoufik Romdhane for *               suggesting this (DG); * 05-Feb-2002 : Added accessor methods for the tooltip generator, incorporated *               alpha-transparency for Plot and subclasses (DG); * 06-Mar-2002 : Updated import statements (DG); * 14-Mar-2002 : Renamed BarPlot.java --> CategoryPlot.java, and changed code *               to use the CategoryItemRenderer interface (DG); * 22-Mar-2002 : Dropped the getCategories() method (DG); * 23-Apr-2002 : Moved the dataset from the JFreeChart class to the Plot *               class (DG); * 29-Apr-2002 : New methods to support printing values at the end of bars, *               contributed by Jeremy Bowman (DG); * 11-May-2002 : New methods for label visibility and overlaid plot support, *               contributed by Jeremy Bowman (DG); * 06-Jun-2002 : Removed the tooltip generator, this is now stored with the *               renderer.  Moved constants into the CategoryPlotConstants *               interface.  Updated Javadoc comments (DG); * 10-Jun-2002 : Overridden datasetChanged() method to update the upper and *               lower bound on the range axis (if necessary), updated *               Javadocs (DG); * 25-Jun-2002 : Removed redundant imports (DG); * 20-Aug-2002 : Changed the constructor for Marker (DG); * 28-Aug-2002 : Added listener notification to setDomainAxis() and *               setRangeAxis() (DG); * 23-Sep-2002 : Added getLegendItems() method and fixed errors reported by *               Checkstyle (DG); * 28-Oct-2002 : Changes to the CategoryDataset interface (DG); * 05-Nov-2002 : Base dataset is now TableDataset not CategoryDataset (DG); * 07-Nov-2002 : Renamed labelXXX as valueLabelXXX (DG); * 18-Nov-2002 : Added grid settings for both domain and range axis (previously *               these were set in the axes) (DG); * 19-Nov-2002 : Added axis location parameters to constructor (DG); * 17-Jan-2003 : Moved to com.jrefinery.chart.plot package (DG); * 14-Feb-2003 : Fixed bug in auto-range calculation for secondary axis (DG); * 26-Mar-2003 : Implemented Serializable (DG); * 02-May-2003 : Moved render() method up from subclasses. Added secondary *               range markers. Added an attribute to control the dataset *               rendering order.  Added a drawAnnotations() method.  Changed *               the axis location from an int to an AxisLocation (DG); * 07-May-2003 : Merged HorizontalCategoryPlot and VerticalCategoryPlot into *               this class (DG); * 02-Jun-2003 : Removed check for range axis compatibility (DG); * 04-Jul-2003 : Added a domain gridline position attribute (DG); * 21-Jul-2003 : Moved DrawingSupplier to Plot superclass (DG); * 19-Aug-2003 : Added equals() method and implemented Cloneable (DG); * 01-Sep-2003 : Fixed bug 797466 (no change event when secondary dataset *               changes) (DG); * 02-Sep-2003 : Fixed bug 795209 (wrong dataset checked in render2 method) and *               790407 (initialise method) (DG); * 08-Sep-2003 : Added internationalization via use of properties *               resourceBundle (RFE 690236) (AL); * 08-Sep-2003 : Fixed bug (wrong secondary range axis being used).  Changed *               ValueAxis API (DG); * 10-Sep-2003 : Fixed bug in setRangeAxis() method (DG); * 15-Sep-2003 : Fixed two bugs in serialization, implemented *               PublicCloneable (DG); * 23-Oct-2003 : Added event notification for changes to renderer (DG); * 26-Nov-2003 : Fixed bug (849645) in clearRangeMarkers() method (DG); * 03-Dec-2003 : Modified draw method to accept anchor (DG); * 21-Jan-2004 : Update for renamed method in ValueAxis (DG); * 10-Mar-2004 : Fixed bug in axis range calculation when secondary renderer is *               stacked (DG); * 12-May-2004 : Added fixed legend items (DG); * 19-May-2004 : Added check for null legend item from renderer (DG); * 02-Jun-2004 : Updated the DatasetRenderingOrder class (DG); * 05-Nov-2004 : Renamed getDatasetsMappedToRangeAxis() *               --> datasetsMappedToRangeAxis(), and ensured that returned *               list doesn't contain null datasets (DG); * 12-Nov-2004 : Implemented new Zoomable interface (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds() in *               CategoryItemRenderer (DG); * 04-May-2005 : Fixed serialization of range markers (DG); * 05-May-2005 : Updated draw() method parameters (DG); * 20-May-2005 : Added setDomainAxes() and setRangeAxes() methods, as per *               RFE 1183100 (DG); * 01-Jun-2005 : Upon deserialization, register plot as a listener with its *               axes, dataset(s) and renderer(s) - see patch 1209475 (DG); * 02-Jun-2005 : Added support for domain markers (DG); * 06-Jun-2005 : Fixed equals() method for use with GradientPaint (DG); * 09-Jun-2005 : Added setRenderers(), as per RFE 1183100 (DG); * 16-Jun-2005 : Added getDomainAxisCount() and getRangeAxisCount() methods, to *               match XYPlot (see RFE 1220495) (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 11-Jan-2006 : Added configureRangeAxes() to rendererChanged(), since the *               renderer might influence the axis range (DG); * 27-Jan-2006 : Added various null argument checks (DG); * 18-Aug-2006 : Added getDatasetCount() method, plus a fix for bug drawing *               category labels, thanks to Adriaan Joubert (1277726) (DG); * 05-Sep-2006 : Added MarkerChangeEvent support (DG); * 30-Oct-2006 : Added getDomainAxisIndex(), datasetsMappedToDomainAxis() and *               getCategoriesForAxis() methods (DG); * 22-Nov-2006 : Fire PlotChangeEvent from setColumnRenderingOrder() and *               setRowRenderingOrder() (DG); * 29-Nov-2006 : Fix for bug 1605207 (IntervalMarker exceeds bounds of data *               area) (DG); * 26-Feb-2007 : Fix for bug 1669218 (setDomainAxisLocation() notify argument *               ignored) (DG); * 13-Mar-2007 : Added null argument checks for setRangeCrosshairPaint() and *               setRangeCrosshairStroke(), fixed clipping for *               annotations (DG); * 07-Jun-2007 : Override drawBackground() for new GradientPaint handling (DG); * 10-Jul-2007 : Added getRangeAxisIndex(ValueAxis) method (DG); * 24-Sep-2007 : Implemented new zoom methods (DG); * 25-Oct-2007 : Added some argument checks (DG); * 05-Nov-2007 : Applied patch 1823697, by Richard West, for removal of domain *               and range markers (DG); * 14-Nov-2007 : Added missing event notifications (DG); * 25-Mar-2008 : Added new methods with optional notification - see patch *               1913751 (DG); * 07-Apr-2008 : Fixed NPE in removeDomainMarker() and *               removeRangeMarker() (DG); * 23-Apr-2008 : Fixed equals() and clone() methods (DG); * 26-Jun-2008 : Fixed crosshair support (DG); * 10-Jul-2008 : Fixed outline visibility for 3D renderers (DG); * 12-Aug-2008 : Added rendererCount() method (DG); * 25-Nov-2008 : Added facility to map datasets to multiples axes (DG); * 15-Dec-2008 : Cleaned up grid drawing methods (DG); * 18-Dec-2008 : Use ResourceBundleWrapper - see patch 1607918 by *               Jess Thrysoee (DG); * 21-Jan-2009 : Added rangeMinorGridlinesVisible flag (DG); * 18-Mar-2009 : Modified anchored zoom behaviour (DG); * 19-Mar-2009 : Implemented Pannable interface - see patch 2686040 (DG); * 19-Mar-2009 : Added entity support - see patch 2603321 by Peter Kolb (DG); * 24-Jun-2009 : Implemented AnnotationChangeListener (see patch 2809117 by *               PK) (DG); * 06-Jul-2009 : Fix for cloning of renderers - see bug 2817504 (DG) * 10-Jul-2009 : Added optional drop shadow generator (DG); * 27-Sep-2011 : Fixed annotation import (DG); * 18-Oct-2011 : Fixed tooltip offset with shadow generator (DG); * 20-Nov-2011 : Initialise shadow generator as null (DG); * 02-Jul-2013 : Use ParamChecks (DG); * 12-Sep-2013 : Check for KEY_SUPPRESS_SHADOW_GENERATION rendering hint (DG); * 10-Mar-2014 : Updated Javadocs for issue #1123 (DG); * 09-Apr-2014 : Remove use of ObjectList (DG); *  */
WITHOUT_CLASSIFICATION	// allocate storage for dataset, axes and renderers
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// calculate the data area...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// if the plot area is too small, just return...
WITHOUT_CLASSIFICATION	// record the plot area...
WITHOUT_CLASSIFICATION	// adjust the drawing area for the plot insets (if any)...
WITHOUT_CLASSIFICATION	// set the anchor value for the range axis...
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// fake a dataset change event to update axes...
WITHOUT_CLASSIFICATION	// fake a dataset change event to update axes...
WITHOUT_CLASSIFICATION	// the first axis in the list is used for data <--> Java2D
WITHOUT_CLASSIFICATION	// the first axis in the list is used for data <--> Java2D
WITHOUT_CLASSIFICATION	// get the legend items for the datasets...
WITHOUT_CLASSIFICATION	// this should never happen with the existing code, but throw // an exception in case future changes make it possible...
WITHOUT_CLASSIFICATION	// should be equal...
WITHOUT_CLASSIFICATION	// reserve some space for the domain axis...
WITHOUT_CLASSIFICATION	// reserve space for the primary domain axis...
WITHOUT_CLASSIFICATION	// reserve space for any domain axes...
WITHOUT_CLASSIFICATION	// reserve some space for the range axis...
WITHOUT_CLASSIFICATION	// reserve space for the range axes (if any)...
WITHOUT_CLASSIFICATION	// if the incoming state is null, no information will be passed // back to the caller - but we create a temporary state to record // the plot area, since that is used later by the axes
WITHOUT_CLASSIFICATION	// if there is a renderer, it draws the background, otherwise use the // default background...
WITHOUT_CLASSIFICATION	// the anchor point is typically the point where the mouse last // clicked - the crosshairs will be driven off this point...
WITHOUT_CLASSIFICATION	// specify the anchor X and Y coordinates in Java2D space, for the // cases where these are not updated during rendering (i.e. no lock // on data)
WITHOUT_CLASSIFICATION	// don't let anyone draw outside the data area
WITHOUT_CLASSIFICATION	// draw the markers...
WITHOUT_CLASSIFICATION	// now render data items...
WITHOUT_CLASSIFICATION	// set up the alpha-transparency...
WITHOUT_CLASSIFICATION	// if the flag is being set to true, there may be queued up changes...
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// draw the foreground markers...
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// draw the annotations (if any)...
WITHOUT_CLASSIFICATION	// draw domain crosshair if required...
WITHOUT_CLASSIFICATION	// draw range crosshair if required...
WITHOUT_CLASSIFICATION	// draw an outline around the plot area...
WITHOUT_CLASSIFICATION	// add domain axes to lists...
WITHOUT_CLASSIFICATION	// add range axes to lists...
WITHOUT_CLASSIFICATION	// draw the top axes
WITHOUT_CLASSIFICATION	// draw the bottom axes
WITHOUT_CLASSIFICATION	// draw the left axes
WITHOUT_CLASSIFICATION	// draw the right axes
WITHOUT_CLASSIFICATION	// draw the range grid lines, if any...
WITHOUT_CLASSIFICATION	// no renderer, no gridlines...
WITHOUT_CLASSIFICATION	// iterate through the datasets that map to the axis and get the union // of the ranges.
WITHOUT_CLASSIFICATION	// add the unique categories from this dataset
WITHOUT_CLASSIFICATION	// do nothing, because the plot is not pannable along the domain axes
WITHOUT_CLASSIFICATION	// can't zoom domain axis
WITHOUT_CLASSIFICATION	// delegate to other method
WITHOUT_CLASSIFICATION	// perform the zoom on each range axis
WITHOUT_CLASSIFICATION	// get the relevant source coordinate given the plot orientation
WITHOUT_CLASSIFICATION	// AxisLocation is immutable, so we can just copy the maps
WITHOUT_CLASSIFICATION	// not currently serialized
WITHOUT_CLASSIFICATION	// some subclasses override this method completely, so don't put // anything here that *must* be done
WITHOUT_CLASSIFICATION	// provides a 'no action' default
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// if the plot area is too small, just return...
WITHOUT_CLASSIFICATION	// record the plot area...
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// adjust the drawing area for the plot insets (if any)...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// try the parent plot
WITHOUT_CLASSIFICATION	// fake a dataset change event to update axes...
WITHOUT_CLASSIFICATION	// axisIndices can be: // 1.  null; // 2.  non-empty, containing only Integer objects that are unique.
WITHOUT_CLASSIFICATION	// the first axis in the list is used for data <--> Java2D
WITHOUT_CLASSIFICATION	// no renderer, no gridlines...
WITHOUT_CLASSIFICATION	// iterate through the datasets that map to the axis and get the union // of the ranges.
WITHOUT_CLASSIFICATION	// create the dataset...
WITHOUT_CLASSIFICATION	// the above should cover all the options...
WITHOUT_CLASSIFICATION	// define the default locations for up to 8 axes...
WITHOUT_CLASSIFICATION	// normalize angle
WITHOUT_CLASSIFICATION	// draw the plot background and axes...
WITHOUT_CLASSIFICATION	// now for each dataset, get the renderer and the appropriate axis // and render the dataset...
WITHOUT_CLASSIFICATION	// now get the data and plot it (the visual representation will depend // on the m_Renderer that has been set)...
WITHOUT_CLASSIFICATION	// draw the domain grid lines, if any...
WITHOUT_CLASSIFICATION	// draw the radius grid lines, if any...
WITHOUT_CLASSIFICATION	// the datasets are not cloned, but listeners need to be added...
WITHOUT_CLASSIFICATION	// square
WITHOUT_CLASSIFICATION	// circle
WITHOUT_CLASSIFICATION	// up-pointing triangle
WITHOUT_CLASSIFICATION	// diamond
WITHOUT_CLASSIFICATION	// horizontal rectangle
WITHOUT_CLASSIFICATION	// down-pointing triangle
WITHOUT_CLASSIFICATION	// horizontal ellipse
WITHOUT_CLASSIFICATION	// right-pointing triangle
WITHOUT_CLASSIFICATION	// vertical rectangle
WITHOUT_CLASSIFICATION	// left-pointing triangle
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// adjust the plot area by the interior spacing value
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// send a dataset change event to self to trigger plot change event
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	//// SERIES PAINT /////////////////////////
WITHOUT_CLASSIFICATION	// otherwise look up the paint list
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	//// SERIES OUTLINE PAINT ////////////////////////////
WITHOUT_CLASSIFICATION	// otherwise look up the paint list
WITHOUT_CLASSIFICATION	// otherwise look up the paint list
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// ensure we have a maximum value to use on the axes
WITHOUT_CLASSIFICATION	//// SERIES OUTLINE STROKE /////////////////////
WITHOUT_CLASSIFICATION	// Next, setup the plot area
WITHOUT_CLASSIFICATION	// make the chart area a square
WITHOUT_CLASSIFICATION	// draw the axis and category label
WITHOUT_CLASSIFICATION	// 1 = end of axis
WITHOUT_CLASSIFICATION	// Now actually plot each of the series polygons..
WITHOUT_CLASSIFICATION	// plot the data...
WITHOUT_CLASSIFICATION	// draw the polygon series...
WITHOUT_CLASSIFICATION	// Finds our starting angle from the centre for this axis
WITHOUT_CLASSIFICATION	// The following angle calc will ensure there isn't a top // vertical axis - this may be useful if you don't want any // given criteria to 'appear' move important than the // others.. //  + (getDirection().getFactor() //        * (cat + 0.5) * 360 / catCount);
WITHOUT_CLASSIFICATION	// find the point at the appropriate distance end point // along the axis/angle identified above and add it to the // polygon
WITHOUT_CLASSIFICATION	// put an elipse at the point being plotted..
WITHOUT_CLASSIFICATION	// Plot the polygon
WITHOUT_CLASSIFICATION	// set the anchor value for the horizontal axis...
WITHOUT_CLASSIFICATION	/* shapeFilled=*/
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// plot is likely registered as a listener with the existing axis...
WITHOUT_CLASSIFICATION	// if the plot area is too small, just return...
WITHOUT_CLASSIFICATION	// record the plot area...
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// draw the background
WITHOUT_CLASSIFICATION	// plot the data (unless the dataset is null)...
WITHOUT_CLASSIFICATION	// adjust the drawing area for the plot insets (if any)...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// delegate...
WITHOUT_CLASSIFICATION	// fake a dataset change event to update axes...
WITHOUT_CLASSIFICATION	// fake a dataset change event to update axes...
WITHOUT_CLASSIFICATION	// axisIndices can be: // 1.  null; // 2.  non-empty, containing only Integer objects that are unique.
WITHOUT_CLASSIFICATION	// reserve some space for the domain axis...
WITHOUT_CLASSIFICATION	// reserve some space for the range axis...
WITHOUT_CLASSIFICATION	// draw the plot background and axes...
WITHOUT_CLASSIFICATION	// check that a null dataset returns null bounds
WITHOUT_CLASSIFICATION	// Lastly, fill the web polygon if this is required
WITHOUT_CLASSIFICATION	// if series are in rows, then the categories are the column keys
WITHOUT_CLASSIFICATION	// if series are in columns, then the categories are the row keys
WITHOUT_CLASSIFICATION	//          negatives = true;
WITHOUT_CLASSIFICATION	//  value = Math.pow(10,value);
WITHOUT_CLASSIFICATION	//  izV = steps*numSteps*(int)((value/minZ)/(maxZlog-minZlog)) + 2;
WITHOUT_CLASSIFICATION	// super.setSeriesPaint(series, paint);
WITHOUT_CLASSIFICATION	/// Squares
WITHOUT_CLASSIFICATION	/// Draw N, S, E, W
WITHOUT_CLASSIFICATION	// no zooming possible
WITHOUT_CLASSIFICATION	// clone share data sets => add the clone as listener to the dataset
WITHOUT_CLASSIFICATION	// only relevant when this is a subplot
WITHOUT_CLASSIFICATION	// allocate storage for datasets, axes and renderers (all optional)
WITHOUT_CLASSIFICATION	// reserve space for the domain axes...
WITHOUT_CLASSIFICATION	// reserve space for the range axes...
WITHOUT_CLASSIFICATION	// the first axis in the list is used for data <--> Java2D
WITHOUT_CLASSIFICATION	// the first axis in the list is used for data <--> Java2D
WITHOUT_CLASSIFICATION	// draw domain crosshair if required...
WITHOUT_CLASSIFICATION	// draw range crosshair if required...
WITHOUT_CLASSIFICATION	// add domain axes to lists...
WITHOUT_CLASSIFICATION	// add range axes to lists...
WITHOUT_CLASSIFICATION	// draw the top axes
WITHOUT_CLASSIFICATION	// draw the bottom axes
WITHOUT_CLASSIFICATION	// draw the left axes
WITHOUT_CLASSIFICATION	// draw the right axes
WITHOUT_CLASSIFICATION	// draw the range grid lines, if any...
WITHOUT_CLASSIFICATION	// no renderer, no gridlines...
WITHOUT_CLASSIFICATION	// no renderer, no gridlines...
WITHOUT_CLASSIFICATION	// draw the domain grid lines, if any...
WITHOUT_CLASSIFICATION	// draw the markers that are associated with a specific dataset...
WITHOUT_CLASSIFICATION	// now draw annotations and render data items...
WITHOUT_CLASSIFICATION	// draw background annotations
WITHOUT_CLASSIFICATION	// render data items...
WITHOUT_CLASSIFICATION	// draw foreground annotations
WITHOUT_CLASSIFICATION	//  0 | 1 //  --+-- //  2 | 3
WITHOUT_CLASSIFICATION	// we can't draw quadrants without a valid x-axis
WITHOUT_CLASSIFICATION	// we can't draw quadrants without a valid y-axis
WITHOUT_CLASSIFICATION	// PlotOrientation.VERTICAL
WITHOUT_CLASSIFICATION	// can't render anything without axes
WITHOUT_CLASSIFICATION	// no default renderer available
WITHOUT_CLASSIFICATION	//render series in reverse order
WITHOUT_CLASSIFICATION	//render series in forward order
WITHOUT_CLASSIFICATION	// use the TextTitle class because it is a concrete subclass
WITHOUT_CLASSIFICATION	// set up info collection...
WITHOUT_CLASSIFICATION	// adjust the drawing area for plot insets (if any)...
WITHOUT_CLASSIFICATION	// try the parent plot
WITHOUT_CLASSIFICATION	// try the parent plot
WITHOUT_CLASSIFICATION	// iterate through the datasets that map to the axis and get the union // of the ranges.
WITHOUT_CLASSIFICATION	// delegate to other method
WITHOUT_CLASSIFICATION	// delegate to other method
WITHOUT_CLASSIFICATION	// perform the zoom on each range axis
WITHOUT_CLASSIFICATION	// get the relevant source coordinate given the plot orientation
WITHOUT_CLASSIFICATION	// get the relevant source coordinate given the plot orientation
WITHOUT_CLASSIFICATION	// draw the plot background and axes...
WITHOUT_CLASSIFICATION	// the datasets are not cloned, but listeners need to be added...
WITHOUT_CLASSIFICATION	// if the event was caused by a change to series visibility, then // the axis ranges might need updating...
WITHOUT_CLASSIFICATION	// check that the renderer has a corresponding dataset (it doesn't // matter if the dataset is null)
WITHOUT_CLASSIFICATION	// check that the renderer has a corresponding dataset (it doesn't // matter if the dataset is null)
WITHOUT_CLASSIFICATION	// set the anchor value for the vertical axis...
WITHOUT_CLASSIFICATION	// grab the plot's annotations
WITHOUT_CLASSIFICATION	// is it a domain axis?
WITHOUT_CLASSIFICATION	// or is it a range axis?
WITHOUT_CLASSIFICATION	// if the axes use a linear scale, you can uncomment the code below and // switch to the alternative transX/transY calculation inside the loop // that follows - it is a little bit faster then. // // int xx = (int) dataArea.getMinX(); // int ww = (int) dataArea.getWidth(); // int yy = (int) dataArea.getMaxY(); // int hh = (int) dataArea.getHeight(); // double domainMin = this.domainAxis.getLowerBound(); // double domainLength = this.domainAxis.getUpperBound() - domainMin; // double rangeMin = this.rangeAxis.getLowerBound(); // double rangeLength = this.rangeAxis.getUpperBound() - rangeMin;
WITHOUT_CLASSIFICATION	// register the plot as a listener with its axes, datasets, and // renderers...
WITHOUT_CLASSIFICATION	// perform the zoom on each domain axis
WITHOUT_CLASSIFICATION	// lineVisible
WITHOUT_CLASSIFICATION	// adjust for insets...
WITHOUT_CLASSIFICATION	// set the new dataset, and register the chart as a change listener...
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// draw the background
WITHOUT_CLASSIFICATION	// intentionally blank
WITHOUT_CLASSIFICATION	// get the source coordinate - this plot has always a VERTICAL // orientation
WITHOUT_CLASSIFICATION	// images considered equal only if they're the SAME object // TODO: is there a way to do a better test?
WITHOUT_CLASSIFICATION	//int transX = (int) (xx + ww * (x - domainMin) / domainLength); //int transY = (int) (yy - hh * (y - rangeMin) / rangeLength);
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list // of change listeners...
WITHOUT_CLASSIFICATION	// plot is registered as a listener with the existing axis...
WITHOUT_CLASSIFICATION	// adjust for padding...
WITHOUT_CLASSIFICATION	// already calculated // already calculated
WITHOUT_CLASSIFICATION	// draw range indicators...
WITHOUT_CLASSIFICATION	// draw start of normal range
WITHOUT_CLASSIFICATION	// draw start of warning range
WITHOUT_CLASSIFICATION	// draw start of critical range
WITHOUT_CLASSIFICATION	// draw the axis...
WITHOUT_CLASSIFICATION	//cursor = midX - COLUMN_RADIUS - AXIS_GAP;
WITHOUT_CLASSIFICATION	// draw text value on screen
WITHOUT_CLASSIFICATION	//  draw units indicator
WITHOUT_CLASSIFICATION	// draw thermometer outline
WITHOUT_CLASSIFICATION	// no domain axis to zoom
WITHOUT_CLASSIFICATION	// work out the anchor point
WITHOUT_CLASSIFICATION	// calculate the bounds of the template value
WITHOUT_CLASSIFICATION	// align this rectangle to the frameAnchor
WITHOUT_CLASSIFICATION	// add the insets
WITHOUT_CLASSIFICATION	// draw the border
WITHOUT_CLASSIFICATION	// now find the text anchor point
WITHOUT_CLASSIFICATION	/* lineVisible= */
WITHOUT_CLASSIFICATION	// send a dataset change event to self...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// otherwise look up the paint list
WITHOUT_CLASSIFICATION	// work out the anchor point
WITHOUT_CLASSIFICATION	// urlText
WITHOUT_CLASSIFICATION	// first, expand the viewing area into a drawing frame
WITHOUT_CLASSIFICATION	// draw the background if there is one...
WITHOUT_CLASSIFICATION	// draw the pointers
WITHOUT_CLASSIFICATION	// draw the cap if there is one...
WITHOUT_CLASSIFICATION	// now do the minor tick marks
WITHOUT_CLASSIFICATION	// lowerBound
WITHOUT_CLASSIFICATION	// upperBound
WITHOUT_CLASSIFICATION	// startAngle
WITHOUT_CLASSIFICATION	// extent
WITHOUT_CLASSIFICATION	// tickRadius
WITHOUT_CLASSIFICATION	// we don't clone the listeners
WITHOUT_CLASSIFICATION	// use item paint for fills by default
WITHOUT_CLASSIFICATION	// draw the outline of the filled polygon
WITHOUT_CLASSIFICATION	// just the lines, no filling
WITHOUT_CLASSIFICATION	// draw the item shapes
WITHOUT_CLASSIFICATION	// SERIES VISIBLE (not yet respected by all renderers)
WITHOUT_CLASSIFICATION	// SERIES VISIBLE IN LEGEND (not yet respected by all renderers)
WITHOUT_CLASSIFICATION	// PAINT
WITHOUT_CLASSIFICATION	//// FILL PAINT //////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// otherwise look up the paint table
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// return the override, if there is one...
WITHOUT_CLASSIFICATION	// we create an event with a special flag set...the purpose of // this is to communicate to the plot (the default receiver of // the event) that series visibility has changed so the axis // ranges might need updating...
WITHOUT_CLASSIFICATION	// otherwise look up the paint table
WITHOUT_CLASSIFICATION	// otherwise look up the paint table
WITHOUT_CLASSIFICATION	// OUTLINE PAINT //////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// STROKE
WITHOUT_CLASSIFICATION	// OUTLINE STROKE
WITHOUT_CLASSIFICATION	// otherwise look up the stroke table
WITHOUT_CLASSIFICATION	// SHAPE
WITHOUT_CLASSIFICATION	// otherwise look up the shape list
WITHOUT_CLASSIFICATION	// ITEM LABEL VISIBILITY...
WITHOUT_CLASSIFICATION	// otherwise look up the boolean table
WITHOUT_CLASSIFICATION	// this should have been defined as a boolean primitive, because // allowing null values is a nuisance...but it is part of the final // API now, so we'll have to support it.
WITHOUT_CLASSIFICATION	//// ITEM LABEL FONT //////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// ITEM LABEL PAINT  ////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// POSITIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	// otherwise look up the position table
WITHOUT_CLASSIFICATION	// NEGATIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	// otherwise look up the position list
WITHOUT_CLASSIFICATION	// the commented out code would be better, but only if // RendererChangeEvent is immutable, which it isn't.  See if there is // a way to fix this...
WITHOUT_CLASSIFICATION	// 'paint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'basePaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'outlinePaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseOutlinePaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'stroke' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseStroke' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// we create an event with a special flag set...the purpose of // this is to communicate to the plot (the default receiver of // the event) that series visibility has changed so the axis // ranges might need updating...
WITHOUT_CLASSIFICATION	// 'basePaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// shapeList // baseShape
WITHOUT_CLASSIFICATION	// 'outlineStroke' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseOutlineStroke' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'itemLabelsVisible' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'itemLabelFont' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseItemLabelFont' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'itemLabelPaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseItemLabelPaint' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'postiveItemLabelAnchor' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseItemLabelAnchor' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'negativeItemLabelAnchor' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// 'baseNegativeItemLabelAnchor' : immutable, no need to clone reference
WITHOUT_CLASSIFICATION	// listeners are not restored automatically, but storage must be // provided...
WITHOUT_CLASSIFICATION	// === DEPRECATED CODE ===
WITHOUT_CLASSIFICATION	// The following alternative is only supported in JDK 1.4 - we support // JDK 1.3.1 onwards // setItemLabelsVisible(Boolean.valueOf(visible));
WITHOUT_CLASSIFICATION	//System.err.print(" creating new outlier list ");
WITHOUT_CLASSIFICATION	//// TOOL TIP GENERATOR ///////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// URL GENERATOR ////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// handle value outside bounds...
WITHOUT_CLASSIFICATION	// handle special case where value is less that item zero
WITHOUT_CLASSIFICATION	// special case where the lowest x-value is >= xLow
WITHOUT_CLASSIFICATION	// special case where the highest x-value is < xLow
WITHOUT_CLASSIFICATION	// skip any items that don't need including...
WITHOUT_CLASSIFICATION	// skip any items that don't need including...
WITHOUT_CLASSIFICATION	// assign a color for each unique value
WITHOUT_CLASSIFICATION	// assign a color for each unique value
WITHOUT_CLASSIFICATION	// in this case, every color has a unique value
WITHOUT_CLASSIFICATION	// in this case, every color has a range of values
WITHOUT_CLASSIFICATION	// end class wafermaprenderer
WITHOUT_CLASSIFICATION	// if there is no plot, there is no dataset to access...
WITHOUT_CLASSIFICATION	// we don't know anything about the ordering of the x-values, // but we can still skip any initial values that fall outside the // range...
WITHOUT_CLASSIFICATION	// when the x-values are descending, the upper bound is found by // comparing against xLow
WITHOUT_CLASSIFICATION	// more values than paints so map // multiple values to the same color
WITHOUT_CLASSIFICATION	// end foreach map entry // end else
WITHOUT_CLASSIFICATION	// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
WITHOUT_CLASSIFICATION	// FIXME: calculate xxLeft and xxRight
WITHOUT_CLASSIFICATION	// handle positive value
WITHOUT_CLASSIFICATION	// LEFT POLYGON
WITHOUT_CLASSIFICATION	// LEFT POLYGON
WITHOUT_CLASSIFICATION	// RIGHT POLYGON
WITHOUT_CLASSIFICATION	// RIGHT POLYGON
WITHOUT_CLASSIFICATION	// handle negative value
WITHOUT_CLASSIFICATION	// calculate the bar width
WITHOUT_CLASSIFICATION	// '+' because v is negative
WITHOUT_CLASSIFICATION	// handle rendering separately for the two plot orientations...
WITHOUT_CLASSIFICATION	// draw the blocks
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// SHAPES VISIBLE
WITHOUT_CLASSIFICATION	// SHAPES FILLED
WITHOUT_CLASSIFICATION	// otherwise look up the paint table
WITHOUT_CLASSIFICATION	// a list to store the series index and bar region, so we can draw // all the labels at the end...
WITHOUT_CLASSIFICATION	// draw the blocks
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// LINES VISIBLE
WITHOUT_CLASSIFICATION	// preserves old behaviour
WITHOUT_CLASSIFICATION	// contained titles
WITHOUT_CLASSIFICATION	// SHAPES FILLED
WITHOUT_CLASSIFICATION	// return the overall setting, if there is one...
WITHOUT_CLASSIFICATION	// delegate
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// do nothing if both the line and shape are not visible
WITHOUT_CLASSIFICATION	// nothing is drawn for null...
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// previous data point...
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// set the default item label positions
WITHOUT_CLASSIFICATION	// fill background...
WITHOUT_CLASSIFICATION	// highlight the background corners...
WITHOUT_CLASSIFICATION	// draw background image, if there is one...
WITHOUT_CLASSIFICATION	// both axes
WITHOUT_CLASSIFICATION	// === DEPRECATED CODE ===
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// cases 5, 6, 7 and 8
WITHOUT_CLASSIFICATION	// put an outline around the data area...
WITHOUT_CLASSIFICATION	// check the value we are plotting...
WITHOUT_CLASSIFICATION	// the bar is not visible
WITHOUT_CLASSIFICATION	// draw the bar...
WITHOUT_CLASSIFICATION	// ITEM LABEL GENERATOR
WITHOUT_CLASSIFICATION	// return the generator for ALL series, if there is one...
WITHOUT_CLASSIFICATION	// return the generator for ALL series, if there is one...
WITHOUT_CLASSIFICATION	// otherwise look up the generator table
WITHOUT_CLASSIFICATION	// otherwise look up the generator table
WITHOUT_CLASSIFICATION	// TOOL TIP GENERATOR
WITHOUT_CLASSIFICATION	// URL GENERATOR
WITHOUT_CLASSIFICATION	// clip left and right bounds to data area
WITHOUT_CLASSIFICATION	// clip top and bottom bounds to data area
WITHOUT_CLASSIFICATION	// now draw the outlines, if visible...
WITHOUT_CLASSIFICATION	// PlotOrientation.HORIZONTAL
WITHOUT_CLASSIFICATION	// check that a legend item needs to be displayed...
WITHOUT_CLASSIFICATION	// defensive check
WITHOUT_CLASSIFICATION	// BAR Y
WITHOUT_CLASSIFICATION	// BAR X
WITHOUT_CLASSIFICATION	// cases 1, 2, 3 and 4
WITHOUT_CLASSIFICATION	// you can add a null list - it would have been better if this // required EMPTY_LIST
WITHOUT_CLASSIFICATION	// BAR Y
WITHOUT_CLASSIFICATION	// BAR X
WITHOUT_CLASSIFICATION	// cases 1, 2, 3 and 4
WITHOUT_CLASSIFICATION	// let the superclass handle it...
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// cases 5, 6, 7 and 8
WITHOUT_CLASSIFICATION	// cases 5, 6, 7 and 8
WITHOUT_CLASSIFICATION	// cases 9, 10, 11 and 12
WITHOUT_CLASSIFICATION	// cases 9, 10, 11 and 12
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// standard deviation lines
WITHOUT_CLASSIFICATION	// standard deviation lines
WITHOUT_CLASSIFICATION	// no new methods
WITHOUT_CLASSIFICATION	// value 0
WITHOUT_CLASSIFICATION	// get the clipping values...
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// draw the bar...
WITHOUT_CLASSIFICATION	// cases 1, 2, 3 and 4
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// cases 5, 6, 7 and 8
WITHOUT_CLASSIFICATION	// cases 9, 10, 11 and 12
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// if we modify the original list, it's best if the URL generator is // not affected
WITHOUT_CLASSIFICATION	// value 1
WITHOUT_CLASSIFICATION	// DRAW THE BARS...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// Y0
WITHOUT_CLASSIFICATION	// Y1
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// X
WITHOUT_CLASSIFICATION	// Y
WITHOUT_CLASSIFICATION	// subtitle 1 is the legend
WITHOUT_CLASSIFICATION	// calculate the bar width
WITHOUT_CLASSIFICATION	// draw the bar...
WITHOUT_CLASSIFICATION	// BAR Y
WITHOUT_CLASSIFICATION	// BAR X
WITHOUT_CLASSIFICATION	// cases 1, 2, 3 and 4
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// cases 9, 10, 11 and 12
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// the clone contains a reference to a CLONE of the original object
WITHOUT_CLASSIFICATION	// draw the item labels if there are any...
WITHOUT_CLASSIFICATION	// calculate bar width...
WITHOUT_CLASSIFICATION	// && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
WITHOUT_CLASSIFICATION	// no fields to compute...
WITHOUT_CLASSIFICATION	//plotBackgroundPaint;
WITHOUT_CLASSIFICATION	// PlotOrientation.VERTICAL
WITHOUT_CLASSIFICATION	// calculate the bar width
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// the bar is not visible
WITHOUT_CLASSIFICATION	// draw the bar...
WITHOUT_CLASSIFICATION	// check that a legend item needs to be displayed...
WITHOUT_CLASSIFICATION	// check that a legend item needs to be displayed...
WITHOUT_CLASSIFICATION	// check that a legend item needs to be displayed...
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// bar is not visible
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// draw the item labels if there are any...
WITHOUT_CLASSIFICATION	// calculate bar width...
WITHOUT_CLASSIFICATION	// check that clone is independent of the original
WITHOUT_CLASSIFICATION	// do nothing if item is not visible or null
WITHOUT_CLASSIFICATION	// 100 percent, so it will not apply unless changed
WITHOUT_CLASSIFICATION	// work out the label anchor point...
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesOutlinePaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	// add an item entity, if this information is being collected
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// previous data point...
WITHOUT_CLASSIFICATION	// draw the item labels if there are any...
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// in the following code, barL0 is (in Java2D coordinates) the LEFT // end of the bar for a horizontal bar chart, and the TOP end of the // bar for a vertical bar chart.  Whether this is the BASE of the bar // or not depends also on (a) whether the data value is 'negative' // relative to the base value and (b) whether or not the range axis is // inverted.  This only matters if/when we apply the minimumBarLength // attribute, because we should extend the non-base end of the bar
WITHOUT_CLASSIFICATION	// switch x and y
WITHOUT_CLASSIFICATION	// or: x1s + 2*(x1-x1s)
WITHOUT_CLASSIFICATION	// or: x0s + 2*(x0-x0s)
WITHOUT_CLASSIFICATION	// extend x0's flat bar
WITHOUT_CLASSIFICATION	// upright bar
WITHOUT_CLASSIFICATION	// x1's flat bar
WITHOUT_CLASSIFICATION	//standard deviation lines
WITHOUT_CLASSIFICATION	//// OUTLINE PAINT /////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//plotOutlinePaint;
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// previous data point...
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// BAR Y
WITHOUT_CLASSIFICATION	// BAR X
WITHOUT_CLASSIFICATION	// Y0
WITHOUT_CLASSIFICATION	// Y1
WITHOUT_CLASSIFICATION	// draw the standard deviation lines *before* the shapes (if they're // visible) - it looks better if the shape fill colour is different to // the line colour
WITHOUT_CLASSIFICATION	// BAR WIDTH
WITHOUT_CLASSIFICATION	// BAR HEIGHT
WITHOUT_CLASSIFICATION	// there are no fields to check
WITHOUT_CLASSIFICATION	/* =========================================================== * JFreeChart : a free chart library for the Java(tm) platform * =========================================================== * * (C) Copyright 2000-2013, by Object Refinery Limited and Contributors. * * Project Info:  http://www.jfree.org/jfreechart/index.html * * This library is free software; you can redistribute it and/or modify it * under the terms of the GNU Lesser General Public License as published by * the Free Software Foundation; either version 2.1 of the License, or * (at your option) any later version. * * This library is distributed in the hope that it will be useful, but * WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public * License for more details. * * You should have received a copy of the GNU Lesser General Public * License along with this library; if not, write to the Free Software * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, * USA. * * [Oracle and Java are registered trademarks of Oracle and/or its affiliates.  * Other names may be trademarks of their respective owners.] * * ------------------------- * CategoryItemRenderer.java * ------------------------- * * (C) Copyright 2001-2011, by Object Refinery Limited and Contributors. * * Original Author:  David Gilbert (for Object Refinery Limited); * Contributor(s):   Mark Watson (www.markwatson.com); * * Changes * ------- * 23-Oct-2001 : Version 1 (DG); * 16-Jan-2002 : Renamed HorizontalCategoryItemRenderer.java *               --> CategoryItemRenderer.java (DG); * 05-Feb-2002 : Changed return type of the drawCategoryItem method from void *               to Shape, as part of the tooltips implementation (DG) * *               NOTE (30-May-2002) : this has subsequently been changed back *               to void, tooltips are now collected along with entities in *               ChartRenderingInfo (DG); * * 14-Mar-2002 : Added the initialise method, and changed all bar plots to use *               this renderer (DG); * 23-May-2002 : Added ChartRenderingInfo to the initialise method (DG); * 29-May-2002 : Added the getAxisArea(Rectangle2D) method (DG); * 06-Jun-2002 : Updated Javadoc comments (DG); * 26-Jun-2002 : Added range axis to the initialise method (DG); * 24-Sep-2002 : Added getLegendItem() method (DG); * 23-Oct-2002 : Added methods to get/setToolTipGenerator (DG); * 05-Nov-2002 : Replaced references to CategoryDataset with TableDataset (DG); * 06-Nov-2002 : Added the domain axis to the drawCategoryItem method.  Renamed *               drawCategoryItem() --> drawItem() (DG); * 20-Nov-2002 : Changed signature of drawItem() method to reflect use of *               TableDataset (DG); * 26-Nov-2002 : Replaced the isStacked() method with the getRangeType() *               method (DG); * 08-Jan-2003 : Changed getSeriesCount() --> getRowCount() and *               getCategoryCount() --> getColumnCount() (DG); * 09-Jan-2003 : Changed name of grid-line methods (DG); * 21-Jan-2003 : Merged TableDataset with CategoryDataset (DG); * 10-Apr-2003 : Changed CategoryDataset to KeyedValues2DDataset in *               drawItem() method (DG); * 29-Apr-2003 : Eliminated Renderer interface (DG); * 02-Sep-2003 : Fix for bug 790407 (DG); * 16-Sep-2003 : Changed ChartRenderingInfo --> PlotRenderingInfo (DG); * 20-Oct-2003 : Added setOutlinePaint() method (DG); * 06-Feb-2004 : Added missing methods, and moved deprecated methods (DG); * 19-Feb-2004 : Added extra setXXXLabelsVisible() methods (DG); * 29-Apr-2004 : Changed Integer --> int in initialise() method (DG); * 18-May-2004 : Added methods for item label paint (DG); * 05-Nov-2004 : Added getPassCount() method and 'pass' parameter to drawItem() *               method (DG); * 07-Jan-2005 : Renamed getRangeExtent() --> findRangeBounds (DG); * 11-Jan-2005 : Removed deprecated code in preparation for 1.0.0 release (DG); * 23-Feb-2005 : Now extends LegendItemSource (DG); * 20-Apr-2005 : Renamed CategoryLabelGenerator *               --> CategoryItemLabelGenerator (DG); * 20-May-2005 : Added drawDomainMarker() method (DG); * ------------- JFREECHART 1.0.x --------------------------------------------- * 20-Feb-2007 : Updated API docs (DG); * 19-Apr-2007 : Deprecated seriesVisible and seriesVisibleInLegend flags (DG); * 20-Apr-2007 : Deprecated paint, fillPaint, outlinePaint, stroke, *               outlineStroke, shape, itemLabelsVisible, itemLabelFont, *               itemLabelPaint, positiveItemLabelPosition, *               negativeItemLabelPosition and createEntities override *               fields (DG); * 26-Jun-2008 : Added new method required for crosshair support - THIS CHANGES *               THE API as of version 1.0.11 (DG); * */
WITHOUT_CLASSIFICATION	//// PAINT /////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesPaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	// FIXME: add setBasePaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	//// FILL PAINT /////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// POSITIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	// NEGATIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	// ITEM LABEL GENERATOR
WITHOUT_CLASSIFICATION	// TOOL TIP GENERATOR
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesPaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	// ITEM LABELS VISIBLE
WITHOUT_CLASSIFICATION	// FIXME: add setBaseOutlinePaint(Paint, boolean)?
WITHOUT_CLASSIFICATION	//// STROKE ////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesStroke(int, Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseStroke(Stroke, boolean) ?
WITHOUT_CLASSIFICATION	//// OUTLINE STROKE ////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesOutlineStroke(int, Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseOutlineStroke(Stroke, boolean) ?
WITHOUT_CLASSIFICATION	//// SHAPE /////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesShape(int, Shape, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseShape(Shape, boolean) ?
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesItemLabelGenerator(int, CategoryItemLabelGenerator, //            boolean)
WITHOUT_CLASSIFICATION	// FIXME: add setBaseToolTipGenerator(CategoryToolTipGenerator, boolean) ?
WITHOUT_CLASSIFICATION	//// ITEM LABEL FONT  //////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesItemLabelFont(int, Font, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseItemLabelFont(Font, boolean) ?
WITHOUT_CLASSIFICATION	//// ITEM LABEL PAINT  /////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesItemLabelPaint(int, Paint, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseItemLabelPaint(Paint, boolean) ?
WITHOUT_CLASSIFICATION	// ITEM URL GENERATOR
WITHOUT_CLASSIFICATION	// as a special case, if the bar colour has alpha == 0, we draw // nothing.
WITHOUT_CLASSIFICATION	/*&& state.getBarWidth() > renderer.BAR_OUTLINE_WIDTH_THRESHOLD*/
WITHOUT_CLASSIFICATION	// standard ResourceBundle behaviour
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// nothing is drawn for null...
WITHOUT_CLASSIFICATION	// current data point...
WITHOUT_CLASSIFICATION	// previous data point...
WITHOUT_CLASSIFICATION	// previous data point...
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// submit the current data point as a crosshair candidate
WITHOUT_CLASSIFICATION	// fill background...
WITHOUT_CLASSIFICATION	// draw background image, if there is one...
WITHOUT_CLASSIFICATION	// put an outline around the data area...
WITHOUT_CLASSIFICATION	// draw the bar...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
WITHOUT_CLASSIFICATION	// 100 percent, so it will not apply unless // changed
WITHOUT_CLASSIFICATION	// set the outline paint to fully transparent, then the legend shape // will just have the same colour as the lines drawn by the renderer
WITHOUT_CLASSIFICATION	// first check the number we are plotting...
WITHOUT_CLASSIFICATION	// reset the min and max
WITHOUT_CLASSIFICATION	// connect to the previous point
WITHOUT_CLASSIFICATION	// create a line renderer only
WITHOUT_CLASSIFICATION	// higlight the background corners...
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// check that a legend item needs to be displayed...
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// Y0
WITHOUT_CLASSIFICATION	// Y1
WITHOUT_CLASSIFICATION	// nothing is drawn for null values...
WITHOUT_CLASSIFICATION	// BAR WIDTH
WITHOUT_CLASSIFICATION	// BAR HEIGHT
WITHOUT_CLASSIFICATION	// we'll set this to false if there is at // least one non-null data item...
WITHOUT_CLASSIFICATION	// set the default item label positions, which will only be used if // the user requests visible item labels...
WITHOUT_CLASSIFICATION	// treat the last column value as an absolute
WITHOUT_CLASSIFICATION	// only needed if calculating percentages
WITHOUT_CLASSIFICATION	// calculate the box width
WITHOUT_CLASSIFICATION	// offset the start of the boxes if the total width used is smaller // than the category width
WITHOUT_CLASSIFICATION	// offset the start of the box if the box width is smaller than // the category width
WITHOUT_CLASSIFICATION	// draw the box...
WITHOUT_CLASSIFICATION	// draw the upper shadow...
WITHOUT_CLASSIFICATION	// draw the lower shadow...
WITHOUT_CLASSIFICATION	// FIXME: add setBasePaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	// offset the start of the boxes if the total width used is smaller // than the category width
WITHOUT_CLASSIFICATION	// draw the upper shadow...
WITHOUT_CLASSIFICATION	// draw the lower shadow...
WITHOUT_CLASSIFICATION	// here we check that the average marker will in fact be // visible before drawing it...
WITHOUT_CLASSIFICATION	// draw mean - SPECIAL AIMS REQUIREMENT...
WITHOUT_CLASSIFICATION	// average radius
WITHOUT_CLASSIFICATION	// average radius
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// draw median...
WITHOUT_CLASSIFICATION	// draw median...
WITHOUT_CLASSIFICATION	// offset the start of the box if the box width is smaller than the // category width
WITHOUT_CLASSIFICATION	// draw the body...
WITHOUT_CLASSIFICATION	// draw yOutliers...
WITHOUT_CLASSIFICATION	// draw farout indicators
WITHOUT_CLASSIFICATION	// start from Y = rangeBase
WITHOUT_CLASSIFICATION	// Process outliers. Each outlier is either added to the // appropriate outlier list or a new outlier list is made
WITHOUT_CLASSIFICATION	// disable visible items optimisation - it doesn't work for this // renderer...
WITHOUT_CLASSIFICATION	// Get the item count for the series, so that we can know which is the // end of the series.
WITHOUT_CLASSIFICATION	// avoid possible sun.dc.pr.PRException: endPath: bad path
WITHOUT_CLASSIFICATION	// Create a new Area for the series
WITHOUT_CLASSIFICATION	// The first point is (x, this.baseYValue)
WITHOUT_CLASSIFICATION	// get the previous data point...
WITHOUT_CLASSIFICATION	// not just a horizontal bar but need to perform a 'step'.
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// avoid possible sun.dc.pr.PRException: endPath: bad path
WITHOUT_CLASSIFICATION	// retrieve an item
WITHOUT_CLASSIFICATION	// Add each point to Area (x, y)
WITHOUT_CLASSIFICATION	// Check if the item is the last item for the series or if it // is a NULL value and number of items > 0.  We can't draw an area for // a single point.
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// fill the polygon
WITHOUT_CLASSIFICATION	// draw an outline around the Area.
WITHOUT_CLASSIFICATION	// start new area when needed (see above)
WITHOUT_CLASSIFICATION	// do nothing...this is just a hook for subclasses
WITHOUT_CLASSIFICATION	// TODO getSeriesShape(n).getBounds().width / 2;
WITHOUT_CLASSIFICATION	// TODO getSeriesShape(n).getBounds().height / 2;
WITHOUT_CLASSIFICATION	// can't draw anything
WITHOUT_CLASSIFICATION	// draw optional guide lines
WITHOUT_CLASSIFICATION	// calculate the arrow head and draw it...
WITHOUT_CLASSIFICATION	// orientation is HORIZONTAL
WITHOUT_CLASSIFICATION	//labelLinkStyle;
WITHOUT_CLASSIFICATION	// request width index == itemCount
WITHOUT_CLASSIFICATION	// check if either series is a degenerate case (i.e. less than 2 points)
WITHOUT_CLASSIFICATION	// check if series are disjoint (i.e. domain-spans do not overlap)
WITHOUT_CLASSIFICATION	// polygon definitions
WITHOUT_CLASSIFICATION	// state
WITHOUT_CLASSIFICATION	// actual value set below
WITHOUT_CLASSIFICATION	// if a subtrahend is not specified, assume it is zero
WITHOUT_CLASSIFICATION	// fast-forward through leading tails
WITHOUT_CLASSIFICATION	// get the x and y coordinates
WITHOUT_CLASSIFICATION	// minuend needs to be fast forwarded
WITHOUT_CLASSIFICATION	// subtrahend needs to be fast forwarded
WITHOUT_CLASSIFICATION	// project onto subtrahend
WITHOUT_CLASSIFICATION	// project onto minuend
WITHOUT_CLASSIFICATION	// start of algorithm
WITHOUT_CLASSIFICATION	// this won't happen :)
WITHOUT_CLASSIFICATION	// deassert b_*FastForward (only matters for 1st time through loop)
WITHOUT_CLASSIFICATION	// check for intersect
WITHOUT_CLASSIFICATION	// check if line segments are colinear
WITHOUT_CLASSIFICATION	// compute common denominator
WITHOUT_CLASSIFICATION	// compute common deltas
WITHOUT_CLASSIFICATION	// compute numerators
WITHOUT_CLASSIFICATION	// check if previously colinear
WITHOUT_CLASSIFICATION	// clear colinear points and flag
WITHOUT_CLASSIFICATION	// set new starting point for the polygon
WITHOUT_CLASSIFICATION	// compute slope components
WITHOUT_CLASSIFICATION	// test if both grahphs have a vertical rise at the same x-value
WITHOUT_CLASSIFICATION	// check if the line segments intersect
WITHOUT_CLASSIFICATION	// compute the point of intersection
WITHOUT_CLASSIFICATION	// advance minuend and subtrahend to intesect
WITHOUT_CLASSIFICATION	// add intersection point to the polygon
WITHOUT_CLASSIFICATION	// add the subtrahend's points to the polygon in reverse
WITHOUT_CLASSIFICATION	// create an actual polygon
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// SERIES VISIBLE IN LEGEND (not yet respected by all renderers)
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// draw an outline around the Area.
WITHOUT_CLASSIFICATION	// project onto subtrahend
WITHOUT_CLASSIFICATION	// project onto minuend
WITHOUT_CLASSIFICATION	// add the subtrahend's points to the polygon in reverse
WITHOUT_CLASSIFICATION	// create an actual polygon
WITHOUT_CLASSIFICATION	// set the maxY and minY values to intersect y-value
WITHOUT_CLASSIFICATION	// add interection point to new polygon
WITHOUT_CLASSIFICATION	// advance the minuend if needed
WITHOUT_CLASSIFICATION	// advance the subtrahend if needed
WITHOUT_CLASSIFICATION	// check if the final polygon needs to be clipped
WITHOUT_CLASSIFICATION	// consider last point of minuend and subtrahend for determining // positivity
WITHOUT_CLASSIFICATION	// add the last point of the minuned and subtrahend
WITHOUT_CLASSIFICATION	// vertical orientation
WITHOUT_CLASSIFICATION	//// VISIBLE //////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// PAINT ////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesOutlinePaint(int, Paint, boolean)?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseOutlinePaint(Paint, boolean)?
WITHOUT_CLASSIFICATION	// create the polygon // add the minuend's points to polygon
WITHOUT_CLASSIFICATION	// Check if the item is the last item for the series. // and number of items > 0.  We can't draw an area for a single point.
WITHOUT_CLASSIFICATION	//// OUTLINE PAINT ////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// bad axisNumber
WITHOUT_CLASSIFICATION	// a Range object cannot be equal to a different object type
WITHOUT_CLASSIFICATION	// POSITIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	// NEGATIVE ITEM LABEL POSITION...
WITHOUT_CLASSIFICATION	//// TOOL TIP GENERATOR ///////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// URL GENERATOR ////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesStroke(int, Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseStroke(Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesOutlineStroke(int, Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseOutlineStroke(Stroke, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesShape(int, Shape, boolean) ?
WITHOUT_CLASSIFICATION	// FIXME: add setBaseShape(Shape, boolean) ?
WITHOUT_CLASSIFICATION	// allowDuplicateXValues
WITHOUT_CLASSIFICATION	//// STROKE ///////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// OUTLINE STROKE ///////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// SHAPE ////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// LEGEND ITEMS /////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// LEGEND ITEM LABEL GENERATOR //////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// ITEM LABEL GENERATOR /////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// FIXME:
WITHOUT_CLASSIFICATION	//// ITEM LABEL FONT ///////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// ANNOTATIONS //////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	//// DRAWING //////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// DEPRECATED METHODS
WITHOUT_CLASSIFICATION	// need to handle cluster centering as a special case
WITHOUT_CLASSIFICATION	// may be negative
WITHOUT_CLASSIFICATION	/*             * Legacy? Just return the original Paint.             * (this corresponds EXACTLY to how Paints used to be darkened)             */
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// Create a new Area for the series
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// first pass draws the shading
WITHOUT_CLASSIFICATION	// last item in series, draw the lot... // set up the alpha-transparency...
WITHOUT_CLASSIFICATION	// second pass adds shapes where the items are ..
WITHOUT_CLASSIFICATION	// return straight away if the item is not visible
WITHOUT_CLASSIFICATION	// add an entity if this info is being collected
WITHOUT_CLASSIFICATION	//  Get height adjustment based on stack and translate to Java2D values
WITHOUT_CLASSIFICATION	//  Get series Paint and Stroke
WITHOUT_CLASSIFICATION	//  On first pass render the areas, line and outlines
WITHOUT_CLASSIFICATION	// start from previous height (ph1)
WITHOUT_CLASSIFICATION	// should not get here
WITHOUT_CLASSIFICATION	// use item paint for fills by default
WITHOUT_CLASSIFICATION	// === DEPRECATED CODE ===
WITHOUT_CLASSIFICATION	// LINES VISIBLE
WITHOUT_CLASSIFICATION	// SHAPES VISIBLE
WITHOUT_CLASSIFICATION	// SHAPES FILLED
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// Get the item count for the series, so that we can know which is the // end of the series.
WITHOUT_CLASSIFICATION	// get the previous data point...
WITHOUT_CLASSIFICATION	// Add each point to Area (x, y)
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// in the rendering process, there is special handling for item // zero, so we can't support processing of visible data items only
WITHOUT_CLASSIFICATION	// The first point is (x, 0)
WITHOUT_CLASSIFICATION	//  Fill the polygon
WITHOUT_CLASSIFICATION	//  Draw an outline around the Area.
WITHOUT_CLASSIFICATION	// first pass draws the background (lines, for instance)
WITHOUT_CLASSIFICATION	//labelLinkPaint;
WITHOUT_CLASSIFICATION	// only draw if we have good values
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// get the data points
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// second pass adds shapes where the items are ..
WITHOUT_CLASSIFICATION	// Add points from last series to complete the base of the // polygon
WITHOUT_CLASSIFICATION	// On second pass render shapes and collect entity and tooltip // information
WITHOUT_CLASSIFICATION	// update path to reflect latest point
WITHOUT_CLASSIFICATION	// if this is the last item, draw the path ...
WITHOUT_CLASSIFICATION	// draw path
WITHOUT_CLASSIFICATION	// Collect points
WITHOUT_CLASSIFICATION	// construct path
WITHOUT_CLASSIFICATION	// we need at least two points to draw something
WITHOUT_CLASSIFICATION	// we need at least 3 points to spline. Draw simple line // for two points
WITHOUT_CLASSIFICATION	// construct spline // number of points // Newton form coefficients // x-coordinates of nodes
WITHOUT_CLASSIFICATION	// note that a[0]=a[np-1]=0
WITHOUT_CLASSIFICATION	// loop over intervals between nodes
WITHOUT_CLASSIFICATION	// we're running on JRE 1.3.1 so this is the best we have...
WITHOUT_CLASSIFICATION	// both axes
WITHOUT_CLASSIFICATION	// ITEM LABEL GENERATOR
WITHOUT_CLASSIFICATION	// return the generator for ALL series, if there is one...
WITHOUT_CLASSIFICATION	// return the generator for ALL series, if there is one...
WITHOUT_CLASSIFICATION	// otherwise look up the generator table
WITHOUT_CLASSIFICATION	// otherwise look up the generator table
WITHOUT_CLASSIFICATION	// TOOL TIP GENERATOR
WITHOUT_CLASSIFICATION	// URL GENERATOR
WITHOUT_CLASSIFICATION	// clip top and bottom bounds to data area
WITHOUT_CLASSIFICATION	// clip top and bottom bounds to data area
WITHOUT_CLASSIFICATION	// now draw the outlines, if visible...
WITHOUT_CLASSIFICATION	// now draw the outlines, if visible...
WITHOUT_CLASSIFICATION	// PlotOrientation.HORIZONTAL
WITHOUT_CLASSIFICATION	// PlotOrientation.HORIZONTAL
WITHOUT_CLASSIFICATION	// work out the label anchor point...
WITHOUT_CLASSIFICATION	// map a key to the default group
WITHOUT_CLASSIFICATION	// Add last point @ y=0 for fillPath and close path
WITHOUT_CLASSIFICATION	// fill under the curve...
WITHOUT_CLASSIFICATION	// then draw the line...
WITHOUT_CLASSIFICATION	// reset points vector
WITHOUT_CLASSIFICATION	/*      factorization and forward substitution */
WITHOUT_CLASSIFICATION	// now draw the real shape
WITHOUT_CLASSIFICATION	// should never get here
WITHOUT_CLASSIFICATION	// 'plot' : just retain reference, not a deep copy
WITHOUT_CLASSIFICATION	// just the domain axis...
WITHOUT_CLASSIFICATION	// just the range axis...
WITHOUT_CLASSIFICATION	// get the label position..
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// collect entity and tool tip information...
WITHOUT_CLASSIFICATION	// get the previous data point...
WITHOUT_CLASSIFICATION	// Add each point to Area (x, y)
WITHOUT_CLASSIFICATION	// vertical orientation
WITHOUT_CLASSIFICATION	// in the rendering process, there is special handling for item // zero, so we can't support processing of visible data items only
WITHOUT_CLASSIFICATION	// this represents the situation // for drawing a horizontal bar.
WITHOUT_CLASSIFICATION	//this handles the need to perform a 'step'.
WITHOUT_CLASSIFICATION	// calculate the step point
WITHOUT_CLASSIFICATION	//this handles the need to perform a 'step'. // calculate the step point
WITHOUT_CLASSIFICATION	// submit this data item as a candidate for the crosshair point
WITHOUT_CLASSIFICATION	// create a new area polygon for the series
WITHOUT_CLASSIFICATION	// the first point is (x, 0)
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// otherwise look up the paint table
WITHOUT_CLASSIFICATION	// SHAPES FILLED
WITHOUT_CLASSIFICATION	// return the overall setting, if there is one...
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// && state.getBarWidth() > BAR_OUTLINE_WIDTH_THRESHOLD) {
WITHOUT_CLASSIFICATION	// no fields to compute...
WITHOUT_CLASSIFICATION	// Add the last point (x,0)
WITHOUT_CLASSIFICATION	// draw an outline around the Area.
WITHOUT_CLASSIFICATION	// Check if the item is the last item for the series. // and number of items > 0.  We can't draw an area for a single point.
WITHOUT_CLASSIFICATION	// a new map always has 1 group (the default group)
WITHOUT_CLASSIFICATION	// we make the clip region slightly larger than the // dataArea so that the clipped edges don't show lines // on the chart
WITHOUT_CLASSIFICATION	// no change
WITHOUT_CLASSIFICATION	// here we use BooleanUtilities to remain compatible with JDKs < 1.4
WITHOUT_CLASSIFICATION	// need to make sure we are adding *after* any duplicates
WITHOUT_CLASSIFICATION	// update the max value
WITHOUT_CLASSIFICATION	// only draw if we have good values
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// draw the item label if there is one...
WITHOUT_CLASSIFICATION	// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
WITHOUT_CLASSIFICATION	// get the previous data point...
WITHOUT_CLASSIFICATION	// update path to reflect latest point
WITHOUT_CLASSIFICATION	// draw path
WITHOUT_CLASSIFICATION	// we are starting a new series path
WITHOUT_CLASSIFICATION	// only draw a line if the gap between the current and // previous data point is within the threshold
WITHOUT_CLASSIFICATION	// we needed to get this far even for invisible items, to ensure that // seriesPath updates happened, but now there is nothing more we need // to do for non-visible items...
WITHOUT_CLASSIFICATION	// this method must be overridden if you want to display images
WITHOUT_CLASSIFICATION	// draw the upper shadow
WITHOUT_CLASSIFICATION	// draw the lower shadow
WITHOUT_CLASSIFICATION	// draw the body
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// draw the upper shadow
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////// // PROTECTED METHODS // These provide the opportunity to subclass the standard renderer and // create custom effects. ////////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// draw the lower shadow
WITHOUT_CLASSIFICATION	// draw the body
WITHOUT_CLASSIFICATION	// draw median
WITHOUT_CLASSIFICATION	// draw average - SPECIAL AIMS REQUIREMENT
WITHOUT_CLASSIFICATION	// draw average - SPECIAL AIMS REQUIREMENT
WITHOUT_CLASSIFICATION	// here we check that the average marker will in fact be visible // before drawing it...
WITHOUT_CLASSIFICATION	// yOutliers can be null, but we'd prefer it to be an empty list in // that case...
WITHOUT_CLASSIFICATION	/* From outlier array sort out which are outliers and put these into         * an arraylist. If there are any farouts, set the flag on the         * OutlierListCollection         */
WITHOUT_CLASSIFICATION	// draw yOutliers
WITHOUT_CLASSIFICATION	// draw outliers
WITHOUT_CLASSIFICATION	// draw farout
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// get the data point...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// get the previous data point...
WITHOUT_CLASSIFICATION	// here we check that the average marker will in fact be visible // before drawing it...
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	// Process outliers. Each outlier is either added to the appropriate // outlier list or a new outlier list is made
WITHOUT_CLASSIFICATION	// for item labels, we have a special case because there is the // possibility to draw (a) the regular item label near to just the // upper y-value, or (b) the regular item label near the upper y-value // PLUS an additional item label near the lower y-value.
WITHOUT_CLASSIFICATION	// If null, don't draw line => then delegate to parent
WITHOUT_CLASSIFICATION	// If null, don't draw line at all
WITHOUT_CLASSIFICATION	// Now split the segment as needed
WITHOUT_CLASSIFICATION	// If the segment must be splitted, insert a new point // Strict test forces to have real segments (not 2 equal points) // and avoids division by 0
WITHOUT_CLASSIFICATION	// If the line is not wrapping, then parent is OK
WITHOUT_CLASSIFICATION	// calculate the highest volume in the dataset...
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// PlotOrientation.HORIZONTAL
WITHOUT_CLASSIFICATION	// draw the outline...
WITHOUT_CLASSIFICATION	// as a special case, if the bar colour has alpha == 0, we draw // nothing.
WITHOUT_CLASSIFICATION	// update path to reflect latest point
WITHOUT_CLASSIFICATION	// if this is the last item, draw the path ...
WITHOUT_CLASSIFICATION	// draw path
WITHOUT_CLASSIFICATION	// transpose the dimensions, because the title is rotated
WITHOUT_CLASSIFICATION	// The split may occur in either x splitted segments, if any, but // not in both
WITHOUT_CLASSIFICATION	// the x value is not within the axis range
WITHOUT_CLASSIFICATION	// not a HighLowDataset, so just draw a line connecting this point // with the previous point...
WITHOUT_CLASSIFICATION	// include the interval if there is one
WITHOUT_CLASSIFICATION	// include the interval if there is one
WITHOUT_CLASSIFICATION	// draw the error bar for the x-interval
WITHOUT_CLASSIFICATION	// draw the error bar for the y-interval
WITHOUT_CLASSIFICATION	//domainGridlinePaint;
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// get the previous point and the next point so we can calculate a // "hot spot" for the area (used by the chart entity)...
WITHOUT_CLASSIFICATION	// do nothing if item is not visible
WITHOUT_CLASSIFICATION	// no new methods
WITHOUT_CLASSIFICATION	// set the default item label positions, which will only be used if // the user requests visible item labels...
WITHOUT_CLASSIFICATION	// handle item label drawing, now that we know all the bars have // been drawn...
WITHOUT_CLASSIFICATION	// if the renderer isn't assigned to a plot, then we don't have a // dataset...
WITHOUT_CLASSIFICATION	//initalize xValues, yValues, and zValues arrays.
WITHOUT_CLASSIFICATION	// setup for collecting optional entity info...
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// handle positive value
WITHOUT_CLASSIFICATION	// LEFT POLYGON
WITHOUT_CLASSIFICATION	// RIGHT POLYGON
WITHOUT_CLASSIFICATION	// RIGHT POLYGON
WITHOUT_CLASSIFICATION	// handle negative value
WITHOUT_CLASSIFICATION	// clip left and right bounds to data area
WITHOUT_CLASSIFICATION	// clip top and bottom bounds to data area
WITHOUT_CLASSIFICATION	// work out the label anchor point...
WITHOUT_CLASSIFICATION	//  Get series Paint and Stroke
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	// is there an alignment adjustment to be made?
WITHOUT_CLASSIFICATION	// update the crosshair point
WITHOUT_CLASSIFICATION	// calculate the maximum allowed candle width from the axis...
WITHOUT_CLASSIFICATION	// Absolute value, since the relative x // positions are reversed for horizontal orientation
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	// pdfDocument class will be null so the function will return false
WITHOUT_CLASSIFICATION	// add an entity for the item...
WITHOUT_CLASSIFICATION	// draw the upper shadow
WITHOUT_CLASSIFICATION	// draw the lower shadow
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// draw the body
WITHOUT_CLASSIFICATION	// this won't happen :)
WITHOUT_CLASSIFICATION	// --- DEPRECATED CODE ----------------------------------------------------
WITHOUT_CLASSIFICATION	// create the temporary directory if it doesn't exist
WITHOUT_CLASSIFICATION	//  Add chart to deletion list in session
WITHOUT_CLASSIFICATION	//  Set HTTP headers
WITHOUT_CLASSIFICATION	//  Replace ".." with "" //  This is to prevent access to the rest of the file system
WITHOUT_CLASSIFICATION	//  Check the file exists
WITHOUT_CLASSIFICATION	//  Serve it up
WITHOUT_CLASSIFICATION	// draw the block without collecting entities
WITHOUT_CLASSIFICATION	// RectangleInsets is immutable => same reference in clone OK
WITHOUT_CLASSIFICATION	// suppress compiler warning
WITHOUT_CLASSIFICATION	// suppress compiler warning
WITHOUT_CLASSIFICATION	// determine the space required for the axis
WITHOUT_CLASSIFICATION	// transpose the dimensions, because the title is rotated
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// don't bother with parsing
WITHOUT_CLASSIFICATION	// don't bother with parsing
WITHOUT_CLASSIFICATION	// no need to instantiate this class   
WITHOUT_CLASSIFICATION	//yAdj = -descent - leading + (float) bounds.getHeight();
WITHOUT_CLASSIFICATION	// svgClass will be null so the function will return false
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// argument checking delegated...
WITHOUT_CLASSIFICATION	// don't bother with parsing
WITHOUT_CLASSIFICATION	// standard ResourceBundle behaviour
WITHOUT_CLASSIFICATION	// update (x1, y1), (x2, y2) and f1 and f2 using intersections // then recheck
WITHOUT_CLASSIFICATION	// first point is outside, so we update it against one of the // four sides then continue
WITHOUT_CLASSIFICATION	// second point is outside, so we update it against one of the // four sides then continue
WITHOUT_CLASSIFICATION	// the line is visible - if it wasn't, we'd have // returned false from within the while loop above
WITHOUT_CLASSIFICATION	/*                 * Lots can go wrong while fiddling with Images, Color Models                 * & such!  If anything at all goes awry, just return the original                 * TexturePaint.  (TexturePaint's are immutable anyway, so no harm                 * done)                 */
WITHOUT_CLASSIFICATION	/* Placeholder */
WITHOUT_CLASSIFICATION	/**/
WITHOUT_CLASSIFICATION	/**/
WITHOUT_CLASSIFICATION	/**/
WITHOUT_CLASSIFICATION	/* (pix-buffer is large enough for all pixels of one row) */
WITHOUT_CLASSIFICATION	// RGB (+ optional Alpha which we leave // unchanged)
WITHOUT_CLASSIFICATION	// Red // Green // Blue. Now map computed colour to // nearest in Palette...
WITHOUT_CLASSIFICATION	// Red // Green // Blue
WITHOUT_CLASSIFICATION	/* Ignore alpha-channel -> */
WITHOUT_CLASSIFICATION	// <- this is the code that actually COPIES the pixels
WITHOUT_CLASSIFICATION	/*         * Buffered Images may have properties, but NEVER disclose them!         * Nevertheless, just in case someone implements getPropertyNames()         * one day...         */
WITHOUT_CLASSIFICATION	// ALWAYS null
WITHOUT_CLASSIFICATION	// all methods are static, no need to instantiate
WITHOUT_CLASSIFICATION	// substitute the filtered URL list
WITHOUT_CLASSIFICATION	// adjust text bounds to match string position
WITHOUT_CLASSIFICATION	// horizontal pass
WITHOUT_CLASSIFICATION	// substract the oldest pixel from the sum
WITHOUT_CLASSIFICATION	// substract the oldest pixel from the sum
WITHOUT_CLASSIFICATION	// get the lastest pixel
WITHOUT_CLASSIFICATION	// get the lastest pixel
WITHOUT_CLASSIFICATION	// vertical pass
WITHOUT_CLASSIFICATION	//get the coordinates of the original GradientPaint
WITHOUT_CLASSIFICATION	//get the coordinates of the shape that is to be filled
WITHOUT_CLASSIFICATION	//reserve variables to store the coordinates of the resulting GradientPaint
WITHOUT_CLASSIFICATION	//start point is upper left corner
WITHOUT_CLASSIFICATION	//end point is lower right corner --> diagonal gradient
WITHOUT_CLASSIFICATION	//start point is lower left right corner --> diagonal gradient
WITHOUT_CLASSIFICATION	// delegate argument checking to XYDataItem...
WITHOUT_CLASSIFICATION	//end point is either lower left corner --> vertical gradient //or end point is upper right corner --> horizontal gradient
WITHOUT_CLASSIFICATION	// can't allow duplicate values, so we need to check whether // there is an item with the given x-value already
WITHOUT_CLASSIFICATION	// it is too slow to look at every data item, so let's just look at // the first, middle and last items...
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another ComparableObjectItem object // ---------------------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to a general object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// consider these to be ordered after general objects
WITHOUT_CLASSIFICATION	// the row may not have an entry for this key, in which case the // return value is null
WITHOUT_CLASSIFICATION	// check that the column key is defined in the 2D structure
WITHOUT_CLASSIFICATION	// 1. check whether the row is now empty.
WITHOUT_CLASSIFICATION	// 1. check whether the row is now empty.
WITHOUT_CLASSIFICATION	// 2. check whether the column is now empty.
WITHOUT_CLASSIFICATION	// 2. check whether the column is now empty.
WITHOUT_CLASSIFICATION	//int columnIndex = getColumnIndex(columnKey);
WITHOUT_CLASSIFICATION	// for the keys, a shallow copy should be fine because keys // should be immutable...
WITHOUT_CLASSIFICATION	// but the row data requires a deep copy
WITHOUT_CLASSIFICATION	// already know 'a' isn't null
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// this will include the case where the underlying dataset is null
WITHOUT_CLASSIFICATION	// this includes the case where the underlying dataset is null
WITHOUT_CLASSIFICATION	// we didn't find the key
WITHOUT_CLASSIFICATION	// set up the category names...
WITHOUT_CLASSIFICATION	// check arguments...
WITHOUT_CLASSIFICATION	// fetch the value...
WITHOUT_CLASSIFICATION	// does the series exist?
WITHOUT_CLASSIFICATION	// does the series exist?
WITHOUT_CLASSIFICATION	// is the category valid?
WITHOUT_CLASSIFICATION	// update the data...
WITHOUT_CLASSIFICATION	// update the data...
WITHOUT_CLASSIFICATION	// no additional methods required
WITHOUT_CLASSIFICATION	// Find min, max for the x and y axes
WITHOUT_CLASSIFICATION	// Determine the cell size
WITHOUT_CLASSIFICATION	// Generate the grid
WITHOUT_CLASSIFICATION	// Map the nongrid data into the new regular grid
WITHOUT_CLASSIFICATION	// scale by the inverse of distance^power
WITHOUT_CLASSIFICATION	//remove distance of the sum
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// we didn't find the key
WITHOUT_CLASSIFICATION	// handle the special case where the dataset has y-intervals that // we want to measure
WITHOUT_CLASSIFICATION	// the CategoryDataset interface expects a list of categories, but // we've stored them in an array...
WITHOUT_CLASSIFICATION	// the CategoryDataset interface expects a list of series, but // we've stored them in an array...
WITHOUT_CLASSIFICATION	// if d is real small set the inverse to a large number // to avoid INF
WITHOUT_CLASSIFICATION	//store data as Long
WITHOUT_CLASSIFICATION	// store Number as Double
WITHOUT_CLASSIFICATION	// check if starting new column
WITHOUT_CLASSIFICATION	//store index where new //column starts
WITHOUT_CLASSIFICATION	// set x to most recent value
WITHOUT_CLASSIFICATION	// create array xIndex to hold // new column indices
WITHOUT_CLASSIFICATION	// store y and z axes // as Doubles
WITHOUT_CLASSIFICATION	// calculate constant values
WITHOUT_CLASSIFICATION	// look for any keys that we don't already know about...
WITHOUT_CLASSIFICATION	// fetch the series, remove the change listener, then remove the series.
WITHOUT_CLASSIFICATION	// remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	//step through all the values and add them to the hash
WITHOUT_CLASSIFICATION	// no new methods required
WITHOUT_CLASSIFICATION	// can't find any differences
WITHOUT_CLASSIFICATION	// now try to instantiate this ;-)
WITHOUT_CLASSIFICATION	//  Create new dataset with keys above threshold percentThreshold
WITHOUT_CLASSIFICATION	//  Do not add key to dataset
WITHOUT_CLASSIFICATION	//  Add key to dataset
WITHOUT_CLASSIFICATION	//  Add other category if applicable
WITHOUT_CLASSIFICATION	// now do the work...
WITHOUT_CLASSIFICATION	// if the dataset implements DomainInfo, life is easier
WITHOUT_CLASSIFICATION	// handle the standard case (plain CategoryDataset)
WITHOUT_CLASSIFICATION	// update the min value
WITHOUT_CLASSIFICATION	// handle the standard case (plain CategoryDataset)
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From SeriesDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From XYDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From HighLowDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From IntervalXYDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // New methods from CombinationDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // New Methods ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // Private ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// handle the special case where the dataset has y-intervals that // we want to measure
WITHOUT_CLASSIFICATION	// handle three cases by dataset type
WITHOUT_CLASSIFICATION	// handle three cases by dataset type
WITHOUT_CLASSIFICATION	// handle special case of IntervalXYDataset
WITHOUT_CLASSIFICATION	// handle special case of IntervalXYDataset
WITHOUT_CLASSIFICATION	// handle special case of IntervalXYDataset
WITHOUT_CLASSIFICATION	// handle special case of OHLCDataset
WITHOUT_CLASSIFICATION	// handle special case of OHLCDataset
WITHOUT_CLASSIFICATION	// standard case - plain XYDataset
WITHOUT_CLASSIFICATION	// standard case - plain XYDataset
WITHOUT_CLASSIFICATION	// handle special case of BoxAndWhiskerXYDataset
WITHOUT_CLASSIFICATION	// if the dataset implements DomainInfo, life is easy
WITHOUT_CLASSIFICATION	// if the dataset implements DomainInfo, life is easy
WITHOUT_CLASSIFICATION	// hasn't implemented DomainInfo, so iterate...
WITHOUT_CLASSIFICATION	// hasn't implemented RangeInfo, so we'll have to iterate...
WITHOUT_CLASSIFICATION	// hasn't implemented RangeInfo, so we'll have to iterate...
WITHOUT_CLASSIFICATION	// work out the minimum value...
WITHOUT_CLASSIFICATION	// work out the minimum value...
WITHOUT_CLASSIFICATION	// work out the minimum value...
WITHOUT_CLASSIFICATION	// '+', remember value is negative
WITHOUT_CLASSIFICATION	// create an array holding the group indices for each series...
WITHOUT_CLASSIFICATION	// minimum and maximum for each group...
WITHOUT_CLASSIFICATION	// no new methods
WITHOUT_CLASSIFICATION	// no new methods
WITHOUT_CLASSIFICATION	// we'll set this to false if there is at // least one non-null data item...
WITHOUT_CLASSIFICATION	// no additional methods required
WITHOUT_CLASSIFICATION	// no new methods required
WITHOUT_CLASSIFICATION	// no new methods required
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From XYDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// handle the special case where the dataset has y-intervals that // we want to measure
WITHOUT_CLASSIFICATION	// '+', remember value is negative
WITHOUT_CLASSIFICATION	// '+', remember value is negative
WITHOUT_CLASSIFICATION	// we don't know anything about the ordering of the x-values, // so we iterate until we find the first crossing of x (if any) // we know there are at least 2 items in the series at this point
WITHOUT_CLASSIFICATION	// delegate null check on dataset
WITHOUT_CLASSIFICATION	// exact match on first item
WITHOUT_CLASSIFICATION	// no crossing of x
WITHOUT_CLASSIFICATION	// spanning match
WITHOUT_CLASSIFICATION	// exact match
WITHOUT_CLASSIFICATION	// maps our series into our parent's
WITHOUT_CLASSIFICATION	// prior to 1.0.14, we just fired a PropertyChange - so we need to // keep doing this
WITHOUT_CLASSIFICATION	// no new methods added.
WITHOUT_CLASSIFICATION	// first line contains column keys
WITHOUT_CLASSIFICATION	// remaining lines contain a row key and data values
WITHOUT_CLASSIFICATION	// first field contains the row key
WITHOUT_CLASSIFICATION	// update the max value
WITHOUT_CLASSIFICATION	// remaining fields contain values
WITHOUT_CLASSIFICATION	// Remove any previous old data
WITHOUT_CLASSIFICATION	// first column contains the row key...
WITHOUT_CLASSIFICATION	// suppress (value defaults to null)
WITHOUT_CLASSIFICATION	// not a value, can't use it (defaults to null)
WITHOUT_CLASSIFICATION	/// First column is X data
WITHOUT_CLASSIFICATION	/// Get the column names and cache them.
WITHOUT_CLASSIFICATION	// Might need to add, to free memory from any previous result sets
WITHOUT_CLASSIFICATION	// Are we working with a time series.
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// defer null argument check
WITHOUT_CLASSIFICATION	// check arguments...
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From SeriesDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From IntervalXYDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // New methods from CombinationDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // New methods from CombinationDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// if this series belongs to a dataset, the dataset might veto the // change if it results in two series within the dataset having the // same key
WITHOUT_CLASSIFICATION	// see comments about priority of // 10 in validateObject()
WITHOUT_CLASSIFICATION	// first field is ignored, since // column 0 is for row keys
WITHOUT_CLASSIFICATION	// Get all rows. // rows = new ArrayList();
WITHOUT_CLASSIFICATION	/// Determine max and min values.
WITHOUT_CLASSIFICATION	// Tell the listeners a new table has arrived.
WITHOUT_CLASSIFICATION	// fill the bins
WITHOUT_CLASSIFICATION	// generic map for each series
WITHOUT_CLASSIFICATION	// pretty sure this shouldn't ever happen
WITHOUT_CLASSIFICATION	// lower bounds are the same
WITHOUT_CLASSIFICATION	// overridden to make public
WITHOUT_CLASSIFICATION	// update the cached range values...
WITHOUT_CLASSIFICATION	// check that the new bin doesn't overlap with any existing bin
WITHOUT_CLASSIFICATION	// pass values to other constructor
WITHOUT_CLASSIFICATION	// update cached min and max values
WITHOUT_CLASSIFICATION	// defer null argument checks
WITHOUT_CLASSIFICATION	// check for zero pivot element
WITHOUT_CLASSIFICATION	// treat nulls the same as NaNs
WITHOUT_CLASSIFICATION	// calculate the sum and count
WITHOUT_CLASSIFICATION	// intercept
WITHOUT_CLASSIFICATION	// sum of x, x^2, x * y, y
WITHOUT_CLASSIFICATION	// holds the moving average sum
WITHOUT_CLASSIFICATION	// defer null argument checks
WITHOUT_CLASSIFICATION	// make sure bins[bins.length]'s upper boundary ends at maximum // to avoid the rounding issue. the bins[0] lower boundary is // guaranteed start from min
WITHOUT_CLASSIFICATION	// iterate over all data items and update mins and maxes
WITHOUT_CLASSIFICATION	// if this cell held a maximum and/or minimum value, we'll need to // update the cached bounds...
WITHOUT_CLASSIFICATION	// ********* stat function for linear slope ******** // y = a + bx // a = ybar - b * xbar //     sum(x * y) - (sum (x) * sum(y)) / n // b = ------------------------------------ //     sum (x^2) - (sum(x)^2 / n // *************************************************
WITHOUT_CLASSIFICATION	// update cached range values
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// update the min value
WITHOUT_CLASSIFICATION	// iterate over all data items and update mins and maxes
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// we are at the last minute in the hour...
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Minute object // -------------------------------------------
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// won't get here...
WITHOUT_CLASSIFICATION	// remove old items and notify if necessary
WITHOUT_CLASSIFICATION	// make the change (if it's not a duplicate time period)...
WITHOUT_CLASSIFICATION	// check if this addition will exceed the maximum item count...
WITHOUT_CLASSIFICATION	// check if this addition will exceed the maximum item count...
WITHOUT_CLASSIFICATION	// find the serial index of the period specified by 'latest'
WITHOUT_CLASSIFICATION	// it is too slow to look at every data item, so let's just look at // the first, middle and last items...
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// since the items are ordered, we could be more clever here and avoid // iterating over all the data
WITHOUT_CLASSIFICATION	// remove old items if necessary, but // don't notify anyone, because that // happens next anyway...
WITHOUT_CLASSIFICATION	// figure out if we need to iterate through all the y-values // to find the revised minY / maxY
WITHOUT_CLASSIFICATION	// check if there are any values earlier than specified by the history // count...
WITHOUT_CLASSIFICATION	// check if there are any values earlier than specified by the history // count...
WITHOUT_CLASSIFICATION	// start is after last data item
WITHOUT_CLASSIFICATION	// update the time series appropriately
WITHOUT_CLASSIFICATION	// we are at the first hour in the day...
WITHOUT_CLASSIFICATION	// we are at the last hour in the day...
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Hour object // -----------------------------------------
WITHOUT_CLASSIFICATION	// if the hour is 0 - 23 then create an hour
WITHOUT_CLASSIFICATION	// parse the string...
WITHOUT_CLASSIFICATION	// create the year...
WITHOUT_CLASSIFICATION	// get the current data item...
WITHOUT_CLASSIFICATION	// work out the average for the earlier values...
WITHOUT_CLASSIFICATION	// work out the average for the earlier values...
WITHOUT_CLASSIFICATION	// remove the point i-periodCount out of the rolling sum.
WITHOUT_CLASSIFICATION	// an arbitrary safe default value
WITHOUT_CLASSIFICATION	// default value;
WITHOUT_CLASSIFICATION	// as a class variable, initializes == 0
WITHOUT_CLASSIFICATION	// cached values used for interface DomainInfo:
WITHOUT_CLASSIFICATION	//rangeGridlinePaint;
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// autoinit's to null.
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Year object // -----------------------------------------
WITHOUT_CLASSIFICATION	// if the initial averaging period is to be excluded, then // calculate the lowest x-value to have an average calculated...
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	// if the initial averaging period is to be excluded, then // calculate the index of the // first data item to have an average calculated...
WITHOUT_CLASSIFICATION	// Cached values used for interface RangeInfo: (note minValue pinned at 0) //   A single set of extrema covers the entire SeriesCollection
WITHOUT_CLASSIFICATION	///  .. etc....
WITHOUT_CLASSIFICATION	/// Expand the following for all defined TimePeriods:
WITHOUT_CLASSIFICATION	// initialize the members of "seriesNames" array so they won't be null:
WITHOUT_CLASSIFICATION	//{ // deep copy from values[], caller // can safely discard that array
WITHOUT_CLASSIFICATION	// Avoid IndexOutOfBoundsException:
WITHOUT_CLASSIFICATION	// But if that series array already exists, just overwrite its contents
WITHOUT_CLASSIFICATION	// But if that series array already exists, just overwrite its contents //synchronized(this) //{
WITHOUT_CLASSIFICATION	// all arrays equal length, // so ignore argument:
WITHOUT_CLASSIFICATION	// Methods for managing the FIFO's:
WITHOUT_CLASSIFICATION	// no translation needed
WITHOUT_CLASSIFICATION	// else  [implicit here]
WITHOUT_CLASSIFICATION	// newestAt takes value previously held // by oldestAT
WITHOUT_CLASSIFICATION	// if the oldest data contained a maximum Y-value, invalidate the stored //   Y-max and Y-range data:
WITHOUT_CLASSIFICATION	// deregister the collection as a change listener to each series in the // collection
WITHOUT_CLASSIFICATION	//  wipe the next (about to be used) set of data slots
WITHOUT_CLASSIFICATION	// Update the array of TimePeriods:
WITHOUT_CLASSIFICATION	// Now advance "oldestAt", wrapping at end of the array
WITHOUT_CLASSIFICATION	// Update the domain limits: //(time is kept in msec)
WITHOUT_CLASSIFICATION	//  If data can be < 0, the next 2 methods should be modified
WITHOUT_CLASSIFICATION	// index to select the "series"
WITHOUT_CLASSIFICATION	/* // "Extras" found useful when analyzing/verifying class behavior:    public Number getUntranslatedXValue(int series, int item)    {      return super.getXValue(series, item);    }    public float getUntranslatedY(int series, int item)    {      return super.getY(series, item);    }  */
WITHOUT_CLASSIFICATION	// a Long kept updated by advanceTime()
WITHOUT_CLASSIFICATION	// a Long kept updated by advanceTime()
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// try a null argument
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// parse the string...
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// appendData() writes new data at the index position given by newestAt/ // When adding new data dynamically, use advanceTime(), followed by this:
WITHOUT_CLASSIFICATION	// check whether the "valueHistory" array member exists; if not, // create them:
WITHOUT_CLASSIFICATION	// getXxx() ftns can ignore the "series" argument: // Don't synchronize this!! Instead, synchronize the loop that calls it.
WITHOUT_CLASSIFICATION	// Don't synchronize this!! // Instead, synchronize the loop that calls it.
WITHOUT_CLASSIFICATION	// The next 3 functions implement the RangeInfo interface. // Using saved limits (updated by each updateTime() call) significantly // improves performance.  WARNING: this code makes the simplifying // assumption that data is never negative.  Expand as needed for the // general case.
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Quarter object // --------------------------------------------
WITHOUT_CLASSIFICATION	// find the Q and the integer following it (remove both from the // string)...
WITHOUT_CLASSIFICATION	// replace any / , or - with a space
WITHOUT_CLASSIFICATION	// do nothing, so null is returned
WITHOUT_CLASSIFICATION	//////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Day object // ----------------------------------------
WITHOUT_CLASSIFICATION	// check arguments...delegated // fetch the series name...
WITHOUT_CLASSIFICATION	// deregister the collection as a change listener to each series in the // collection
WITHOUT_CLASSIFICATION	// if it is not the series name, then we have no interest
WITHOUT_CLASSIFICATION	// to be defensive, let's check that the source series does in fact // belong to this collection
WITHOUT_CLASSIFICATION	// check if the new series name already exists for another series
WITHOUT_CLASSIFICATION	// we need to work out if the previous year has 52 or 53 weeks...
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to a general object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Second object // -------------------------------------------
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to another TimePeriod object // -----------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// more difficult case - evaluate later...
WITHOUT_CLASSIFICATION	// won't get here...
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// sometimes the last few days of the year are considered to fall in // the *first* week of the following year.  Refer to the Javadocs for // GregorianCalendar.
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Week object // --------------------------------------------
WITHOUT_CLASSIFICATION	// trim whitespace from either end of the string
WITHOUT_CLASSIFICATION	// trim whitespace from either end of the string
WITHOUT_CLASSIFICATION	// suppress
WITHOUT_CLASSIFICATION	// suppress
WITHOUT_CLASSIFICATION	// suppress
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Month object // --------------------------------------------
WITHOUT_CLASSIFICATION	// if there is no separator, we assume the first four characters // are YYYY
WITHOUT_CLASSIFICATION	// now it is trickier to determine if the month or year is first
WITHOUT_CLASSIFICATION	// --- DEPRECATED METHODS -------------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another TimeSeriesDataItem object // -------------------------------------------------------
WITHOUT_CLASSIFICATION	//private Comparable key;
WITHOUT_CLASSIFICATION	//this.key = null;
WITHOUT_CLASSIFICATION	// no attributes to read
WITHOUT_CLASSIFICATION	//axisOffset;
WITHOUT_CLASSIFICATION	// check arguments...
WITHOUT_CLASSIFICATION	// fetch the series, remove the change listener, then remove the series.
WITHOUT_CLASSIFICATION	// remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// if it is not the series name, then we have no interest
WITHOUT_CLASSIFICATION	// check if the new series name already exists for another series
WITHOUT_CLASSIFICATION	// Remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// XYDataset only provides methods for reading a dataset...
WITHOUT_CLASSIFICATION	// check arguments...delegated
WITHOUT_CLASSIFICATION	// check arguments...delegated
WITHOUT_CLASSIFICATION	// Remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// add a new series
WITHOUT_CLASSIFICATION	// need to configure the intervalDelegate to match the original
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// we can't be sure of the order
WITHOUT_CLASSIFICATION	// replace an existing series
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// either autoWidth is off or autoIntervalWidth was not set.
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// argument checking delegated...
WITHOUT_CLASSIFICATION	// argument checking delegated...
WITHOUT_CLASSIFICATION	// delegate argument checking to XYDataItem...
WITHOUT_CLASSIFICATION	// need to make sure we are adding *after* any duplicates
WITHOUT_CLASSIFICATION	// can't allow duplicate values, so we need to check whether // there is an item with the given x-value already
WITHOUT_CLASSIFICATION	// CASE 2 : Comparing to a general object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// check arguments...
WITHOUT_CLASSIFICATION	// consider time periods to be ordered after general objects
WITHOUT_CLASSIFICATION	// won't get here...
WITHOUT_CLASSIFICATION	// check if this addition will exceed the maximum item count...
WITHOUT_CLASSIFICATION	// to be defensive, let's check that the source series does in fact // belong to this collection
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// Remove all the series from the collection and notify listeners.
WITHOUT_CLASSIFICATION	// need to configure the intervalDelegate to match the original
WITHOUT_CLASSIFICATION	// add a new series
WITHOUT_CLASSIFICATION	// add a new series
WITHOUT_CLASSIFICATION	// replace an existing series
WITHOUT_CLASSIFICATION	// replace an existing series
WITHOUT_CLASSIFICATION	// null is ignored
WITHOUT_CLASSIFICATION	// everything is fine: autoWidth is on, and an autoIntervalWidth // was set.
WITHOUT_CLASSIFICATION	// first get the range without the interval, then expand it for the // interval width
WITHOUT_CLASSIFICATION	// all series have the same number of items in // this dataset
WITHOUT_CLASSIFICATION	// this.x is not allowed to be null...
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another TimeSeriesDataPair object // -------------------------------------------------------
WITHOUT_CLASSIFICATION	// In version 0.9.12, in response to several developer requests, I changed // the 'data' attribute from 'private' to 'protected', so that others can // make subclasses that work directly with the underlying data structure.
WITHOUT_CLASSIFICATION	// figure out if we need to iterate through all the y-values
WITHOUT_CLASSIFICATION	// figure out if we need to iterate through all the y-values
WITHOUT_CLASSIFICATION	// if we get to here, we know that duplicate X values are not permitted
WITHOUT_CLASSIFICATION	/*         * we assum super is always initialized to all-zero matrix, so the         * total sum should be 0 upon initialization. However, we set it to         * Double.MIN_VALUE to get the same effect and yet avoid division by 0         * upon initialization.         */
WITHOUT_CLASSIFICATION	// add the series...
WITHOUT_CLASSIFICATION	// try a class that isn't a listener
WITHOUT_CLASSIFICATION	// set up popup menu...
WITHOUT_CLASSIFICATION	// stop listening for changes to the existing chart
WITHOUT_CLASSIFICATION	// add the new chart
WITHOUT_CLASSIFICATION	// work out if scaling is required...
WITHOUT_CLASSIFICATION	// are we using the chart buffer?
WITHOUT_CLASSIFICATION	// does nothing - override if necessary
WITHOUT_CLASSIFICATION	// selected rectangle shouldn't extend outside the data area...
WITHOUT_CLASSIFICATION	// we need to guard against this.zoomPoint being null
WITHOUT_CLASSIFICATION	// we need to guard against this.zoomPoint being null
WITHOUT_CLASSIFICATION	// force a redraw
WITHOUT_CLASSIFICATION	// it is too slow to look at every data item, so let's just look at // the first, middle and last items...
WITHOUT_CLASSIFICATION	// fetch the series, remove the change listener, then remove the series.
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// Unregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// check that minItem limit is observed
WITHOUT_CLASSIFICATION	//assert itemIndex >= 0 && itemIndex < getItemCount();
WITHOUT_CLASSIFICATION	//assert itemIndex >= 0 && itemIndex < getItemCount();
WITHOUT_CLASSIFICATION	//TODO private boolean fillZoomRectangle = true;
WITHOUT_CLASSIFICATION	// create the canvas and add the required listeners
WITHOUT_CLASSIFICATION	//ChartEditorManager.getChartEditor(canvas.getDisplay(), this.chart);
WITHOUT_CLASSIFICATION	/* in the next zoomPoint.x and y replace by e.x and y for now.         * this helps to handle the mouse events and besides,         * those values are unused AFAIK. */
WITHOUT_CLASSIFICATION	// do nothing, override if necessary
WITHOUT_CLASSIFICATION	// new entity code
WITHOUT_CLASSIFICATION	// new entity code
WITHOUT_CLASSIFICATION	// pass mouse down event if some ChartMouseListener are listening
WITHOUT_CLASSIFICATION	// if the box has been drawn backwards, restore the auto bounds
WITHOUT_CLASSIFICATION	// handle axis trace
WITHOUT_CLASSIFICATION	// handle tool tips in a simple way
WITHOUT_CLASSIFICATION	// handle zoom box
WITHOUT_CLASSIFICATION	// skip if chart is null
WITHOUT_CLASSIFICATION	//axisLabelPaint;
WITHOUT_CLASSIFICATION	// get the origin of the zoom selection in the Java2D space used for // drawing the chart (that is, before any scaling to fit the panel)
WITHOUT_CLASSIFICATION	// go through each zoom menu item and decide whether or not to // enable it...
WITHOUT_CLASSIFICATION	// create the chart...
WITHOUT_CLASSIFICATION	// title // x-axis label // y-axis label // data // create legend? // generate tooltips? // generate URLs?
WITHOUT_CLASSIFICATION	// check that minItem limit is observed
WITHOUT_CLASSIFICATION	//SwtGraphics2D sg2 = new SwtGraphics2D(e.gc);
WITHOUT_CLASSIFICATION	// do we need to fill the buffer?
WITHOUT_CLASSIFICATION	// Performs the actual drawing here ...
WITHOUT_CLASSIFICATION	// anti-aliasing
WITHOUT_CLASSIFICATION	// zap the buffer onto the canvas...
WITHOUT_CLASSIFICATION	// or redrawing the chart every time...
WITHOUT_CLASSIFICATION	// de-register the composite as a listener for the chart.
WITHOUT_CLASSIFICATION	// AXIS 2
WITHOUT_CLASSIFICATION	// AXIS 3
WITHOUT_CLASSIFICATION	//axis3.setPositiveArrowVisible(true);
WITHOUT_CLASSIFICATION	// AXIS 4
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// create the dataset...
WITHOUT_CLASSIFICATION	// NOW DO SOME OPTIONAL CUSTOMISATION OF THE CHART...
WITHOUT_CLASSIFICATION	// get a reference to the plot for further customisation...
WITHOUT_CLASSIFICATION	// set the range axis to display integers only...
WITHOUT_CLASSIFICATION	// disable bar outlines...
WITHOUT_CLASSIFICATION	// OPTIONAL CUSTOMISATION COMPLETED.
WITHOUT_CLASSIFICATION	// chart title // data // include legend
WITHOUT_CLASSIFICATION	//frame.setDisplayToolTips(false);
WITHOUT_CLASSIFICATION	// row 1: antialiasing
WITHOUT_CLASSIFICATION	//row 2: background paint for the chart
WITHOUT_CLASSIFICATION	// row 1
WITHOUT_CLASSIFICATION	//empty cell // row 2
WITHOUT_CLASSIFICATION	// Create the color-change dialog
WITHOUT_CLASSIFICATION	// Dispose of any fonts we have created
WITHOUT_CLASSIFICATION	// build second tab
WITHOUT_CLASSIFICATION	// don't need to do anything
WITHOUT_CLASSIFICATION	// set the plot properties...
WITHOUT_CLASSIFICATION	// row 1
WITHOUT_CLASSIFICATION	// Create the color-change dialog
WITHOUT_CLASSIFICATION	// Create the color-change dialog
WITHOUT_CLASSIFICATION	// Dispose of any fonts we have created
WITHOUT_CLASSIFICATION	// check a regular value
WITHOUT_CLASSIFICATION	// Create the new font and set it into the title // label
WITHOUT_CLASSIFICATION	// Create the new font and set it into the title // label
WITHOUT_CLASSIFICATION	//label.setFont(font);
WITHOUT_CLASSIFICATION	// row 3
WITHOUT_CLASSIFICATION	// row 3
WITHOUT_CLASSIFICATION	// Use a colored text field to show the color
WITHOUT_CLASSIFICATION	//tickLabelFontField.setFont(SwtUtils.toSwtFontData(getDisplay(), // axis.getTickLabelFont()));
WITHOUT_CLASSIFICATION	// Create the font-change dialog
WITHOUT_CLASSIFICATION	// Create the font-change dialog
WITHOUT_CLASSIFICATION	//tickLabelFontField.setFont(font);
WITHOUT_CLASSIFICATION	// return the appropriate axis editor
WITHOUT_CLASSIFICATION	//this.minimumRangeValue.addModifyListener(this); //this.minimumRangeValue.addVerifyListener(this);
WITHOUT_CLASSIFICATION	//this.maximumRangeValue.addModifyListener(this); //this.maximumRangeValue.addVerifyListener(this);
WITHOUT_CLASSIFICATION	// verify min value
WITHOUT_CLASSIFICATION	// verify max value
WITHOUT_CLASSIFICATION	//deal with domain axis
WITHOUT_CLASSIFICATION	//deal with range axis
WITHOUT_CLASSIFICATION	//deal with plot appearance
WITHOUT_CLASSIFICATION	// set the axis properties
WITHOUT_CLASSIFICATION	// row 1: stroke
WITHOUT_CLASSIFICATION	// row 3: background paint
WITHOUT_CLASSIFICATION	// row 4: orientation
WITHOUT_CLASSIFICATION	// row 2
WITHOUT_CLASSIFICATION	//titleField.setFont(font);
WITHOUT_CLASSIFICATION	// row 4
WITHOUT_CLASSIFICATION	// build first tab
WITHOUT_CLASSIFICATION	// we can't do anything
WITHOUT_CLASSIFICATION	// backgroundImage
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// since this is only used by clearRect(), we don't update the GC yet
WITHOUT_CLASSIFICATION	// build the third tab
WITHOUT_CLASSIFICATION	// ok and cancel buttons
WITHOUT_CLASSIFICATION	// to be consistent with other Graphics2D implementations
WITHOUT_CLASSIFICATION	// padding
WITHOUT_CLASSIFICATION	// apply dash style if any
WITHOUT_CLASSIFICATION	// handle transparency and compositing.
WITHOUT_CLASSIFICATION	// we can't use the following valueOf() method, because it // won't compile with JDK1.4 // this.colorsPool.get(Integer.valueOf(awtColor.getRGB()));
WITHOUT_CLASSIFICATION	// set the line style to solid by default
WITHOUT_CLASSIFICATION	// retrieve the swt font description in an os indept way
WITHOUT_CLASSIFICATION	// Note that for consistency with the AWT implementation, it is // necessary to switch temporarily the foreground and background // colours
WITHOUT_CLASSIFICATION	// for now we simply want to extract the chars from the iterator // and call an unstyled text renderer
WITHOUT_CLASSIFICATION	// create a new awt font with the appropiate data
WITHOUT_CLASSIFICATION	// we dispose resources we own but user must dispose gc
WITHOUT_CLASSIFICATION	// see comment above //this.colorsPool.put(Integer.valueOf(awtColor.getRGB()), swtColor);
WITHOUT_CLASSIFICATION	// SWT and AWT share the same style constants.
WITHOUT_CLASSIFICATION	// convert the font size (in pt for awt) to height in pixels for swt
WITHOUT_CLASSIFICATION	//this.myColor = new Color(getDisplay(), color.getRGB());
WITHOUT_CLASSIFICATION	// renderingHints
WITHOUT_CLASSIFICATION	// borderStroke
WITHOUT_CLASSIFICATION	// borderVisible
WITHOUT_CLASSIFICATION	// borderPaint
WITHOUT_CLASSIFICATION	// title
WITHOUT_CLASSIFICATION	// subtitles
WITHOUT_CLASSIFICATION	// plot
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// backgroundImageAlignment
WITHOUT_CLASSIFICATION	// backgroundImageAlpha
WITHOUT_CLASSIFICATION	// no event is generated if the dataset is already empty
WITHOUT_CLASSIFICATION	// create the chart...
WITHOUT_CLASSIFICATION	// create the chart...
WITHOUT_CLASSIFICATION	// try a Double.POSITIVE_INFINITY
WITHOUT_CLASSIFICATION	// adding something to the returned list should NOT change the chart
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// fillPaintTransformer
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// labelFont
WITHOUT_CLASSIFICATION	// chart title
WITHOUT_CLASSIFICATION	// labelPaint
WITHOUT_CLASSIFICATION	// linePaint
WITHOUT_CLASSIFICATION	// fillPaint
WITHOUT_CLASSIFICATION	// chart title
WITHOUT_CLASSIFICATION	// the clone references the same dataset as the original
WITHOUT_CLASSIFICATION	// chart title
WITHOUT_CLASSIFICATION	// chart title
WITHOUT_CLASSIFICATION	// chart title
WITHOUT_CLASSIFICATION	// data // include legend // tooltips // urls
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// a null key should throw an IllegalArgumentException
WITHOUT_CLASSIFICATION	// a null key should throw an IllegalArgumentException
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// include legend
WITHOUT_CLASSIFICATION	// data
WITHOUT_CLASSIFICATION	// data
WITHOUT_CLASSIFICATION	// data
WITHOUT_CLASSIFICATION	// data
WITHOUT_CLASSIFICATION	/* BufferedImage img =*/
WITHOUT_CLASSIFICATION	// try a listener type that isn't registered
WITHOUT_CLASSIFICATION	// name
WITHOUT_CLASSIFICATION	//extraLargeFont
WITHOUT_CLASSIFICATION	//largeFont
WITHOUT_CLASSIFICATION	//regularFont;
WITHOUT_CLASSIFICATION	//titlePaint;
WITHOUT_CLASSIFICATION	//subtitlePaint;
WITHOUT_CLASSIFICATION	//chartBackgroundPaint;
WITHOUT_CLASSIFICATION	//legendBackgroundPaint;
WITHOUT_CLASSIFICATION	//legendItemPaint;
WITHOUT_CLASSIFICATION	//drawingSupplier;
WITHOUT_CLASSIFICATION	// value 1
WITHOUT_CLASSIFICATION	// create a dataset...
WITHOUT_CLASSIFICATION	// test independence
WITHOUT_CLASSIFICATION	//tickLabelPaint;
WITHOUT_CLASSIFICATION	//itemLabelPaint;
WITHOUT_CLASSIFICATION	//shadowVisible;
WITHOUT_CLASSIFICATION	//shadowPaint;
WITHOUT_CLASSIFICATION	//barPainter;
WITHOUT_CLASSIFICATION	//xyBarPainter;
WITHOUT_CLASSIFICATION	//thermometerPaint;
WITHOUT_CLASSIFICATION	//wallPaint;
WITHOUT_CLASSIFICATION	//errorIndicatorPaint;
WITHOUT_CLASSIFICATION	//gridBandAlternatePaint
WITHOUT_CLASSIFICATION	//private double angle;
WITHOUT_CLASSIFICATION	//private double tipRadius;
WITHOUT_CLASSIFICATION	//private double tipRadius;
WITHOUT_CLASSIFICATION	//private double baseRadius;
WITHOUT_CLASSIFICATION	//private double arrowLength;
WITHOUT_CLASSIFICATION	//private double arrowLength;
WITHOUT_CLASSIFICATION	//private double arrowWidth;
WITHOUT_CLASSIFICATION	//private Stroke arrowStroke;
WITHOUT_CLASSIFICATION	//private Stroke arrowStroke;
WITHOUT_CLASSIFICATION	//private Paint arrowPaint;
WITHOUT_CLASSIFICATION	//private Paint arrowPaint;
WITHOUT_CLASSIFICATION	//private double labelOffset;
WITHOUT_CLASSIFICATION	// text
WITHOUT_CLASSIFICATION	// text
WITHOUT_CLASSIFICATION	// x
WITHOUT_CLASSIFICATION	// y
WITHOUT_CLASSIFICATION	// font
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// rotation anchor
WITHOUT_CLASSIFICATION	// rotation angle
WITHOUT_CLASSIFICATION	// text anchor
WITHOUT_CLASSIFICATION	// textAnchor
WITHOUT_CLASSIFICATION	// rotationAnchor
WITHOUT_CLASSIFICATION	// rotationAngle
WITHOUT_CLASSIFICATION	// category 1
WITHOUT_CLASSIFICATION	// category 2
WITHOUT_CLASSIFICATION	// value 2
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// category
WITHOUT_CLASSIFICATION	// categoryAnchor
WITHOUT_CLASSIFICATION	// value
WITHOUT_CLASSIFICATION	// x0
WITHOUT_CLASSIFICATION	// tickUnit
WITHOUT_CLASSIFICATION	// tickMarkPosition
WITHOUT_CLASSIFICATION	// timeline
WITHOUT_CLASSIFICATION	// range
WITHOUT_CLASSIFICATION	// check that setting the min date to something on or after the // current min date works...
WITHOUT_CLASSIFICATION	// five dates to check...
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// START: check d0 and d1
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// MIDDLE: check d1, d2 and d3
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// END: check d3 and d4
WITHOUT_CLASSIFICATION	// START: check d0
WITHOUT_CLASSIFICATION	// START: check d0
WITHOUT_CLASSIFICATION	// END: check d0
WITHOUT_CLASSIFICATION	// MIDDLE: check d0
WITHOUT_CLASSIFICATION	// MIDDLE: check d0
WITHOUT_CLASSIFICATION	// END: check d0
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// test independence
WITHOUT_CLASSIFICATION	// now repeat for a vertical axis
WITHOUT_CLASSIFICATION	// set start and end date
WITHOUT_CLASSIFICATION	// if the bug is still present, this leads to an endless loop
WITHOUT_CLASSIFICATION	//private boolean autoRangeIncludesZero;
WITHOUT_CLASSIFICATION	//private NumberTickUnit tickUnit;
WITHOUT_CLASSIFICATION	//private NumberFormat numberFormatOverride;
WITHOUT_CLASSIFICATION	// now replacing the dataset should update the axis range...
WITHOUT_CLASSIFICATION	//axis.setRangeType(RangeType.POSITIVE); //axis.setLowerBound(-5.0); //assertEquals(0.0, axis.getLowerBound(), EPSILON);
WITHOUT_CLASSIFICATION	// check that changing a tick label font in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// check that changing a tick label paint in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// check that changing a category label tooltip in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// set axis bounds to be both greater than 1
WITHOUT_CLASSIFICATION	// check for bounds interval that includes 1
WITHOUT_CLASSIFICATION	// check for bounds interval that includes 1
WITHOUT_CLASSIFICATION	// check for both bounds smaller than 1
WITHOUT_CLASSIFICATION	// check for both bounds smaller than 1
WITHOUT_CLASSIFICATION	// lowerMargin
WITHOUT_CLASSIFICATION	// upperMargin
WITHOUT_CLASSIFICATION	// categoryMargin
WITHOUT_CLASSIFICATION	// maxCategoryLabelWidthRatio
WITHOUT_CLASSIFICATION	// categoryLabelPositionOffset
WITHOUT_CLASSIFICATION	// categoryLabelPositions
WITHOUT_CLASSIFICATION	// check that changing a tick label font in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// check that changing a tick label paint in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// check that changing a category label tooltip in a1 doesn't change a2
WITHOUT_CLASSIFICATION	// 4-ms test base timeline for ms2Timeline using 1 included and 1 // excluded segments // // timeline start time = 0 //   | //   v //   0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 ... // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... // |  |  |  |  |EE|EE|EE|EE|  |  |  |  |EE|EE|EE|EE|  |  |  |  |    <-- ms2BaseTimeline // +--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+--+... //  \__________  _________/            \____  _____/ //             \/                           \/ //        segment group              segment size = 4 ms //
WITHOUT_CLASSIFICATION	// categoryLabelToolTips
WITHOUT_CLASSIFICATION	// categoryLabelURLs
WITHOUT_CLASSIFICATION	// tickLabelPaint
WITHOUT_CLASSIFICATION	// tickLabelPaint2
WITHOUT_CLASSIFICATION	// period
WITHOUT_CLASSIFICATION	// offset
WITHOUT_CLASSIFICATION	// advance line Stroke
WITHOUT_CLASSIFICATION	// advance line Visible
WITHOUT_CLASSIFICATION	// cycle bound mapping
WITHOUT_CLASSIFICATION	// Create a segmented time line (segment size : 15 minutes)
WITHOUT_CLASSIFICATION	// Set start time
WITHOUT_CLASSIFICATION	/* PUT exclusions in test */
WITHOUT_CLASSIFICATION	/** These constants control test cycles in the validateXXXX methods. */
WITHOUT_CLASSIFICATION	// test 9am-4pm Monday through Friday timeline
WITHOUT_CLASSIFICATION	// calculate 9am on the first Monday after 2001-01-01
WITHOUT_CLASSIFICATION	// verify attributes set during object construction
WITHOUT_CLASSIFICATION	// verify attributes set during object construction
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test one-segment and adjacent segments //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// get two consecutive segments for various tests
WITHOUT_CLASSIFICATION	// verify segments are consecutive and correct
WITHOUT_CLASSIFICATION	// verify various indices inside a segment are the same segment
WITHOUT_CLASSIFICATION	// try next segment
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test inc methods //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// test inc() method
WITHOUT_CLASSIFICATION	// logically consecutive segments non-physically consecutive // (with non-contained time in between)
WITHOUT_CLASSIFICATION	// physically consecutive
WITHOUT_CLASSIFICATION	// test inc(n) method
WITHOUT_CLASSIFICATION	// go to another segment to continue test
WITHOUT_CLASSIFICATION	// clear any exceptions in this timeline
WITHOUT_CLASSIFICATION	// test some included and excluded segments
WITHOUT_CLASSIFICATION	// should be an included segment
WITHOUT_CLASSIFICATION	// should be an excluded segment
WITHOUT_CLASSIFICATION	// fill in the exceptions
WITHOUT_CLASSIFICATION	// verify list of exceptions
WITHOUT_CLASSIFICATION	// include current exception and last one
WITHOUT_CLASSIFICATION	// exclude current exception and last one
WITHOUT_CLASSIFICATION	// make sure there are no exceptions
WITHOUT_CLASSIFICATION	// add our exceptions and store locally in ArrayList of Longs
WITHOUT_CLASSIFICATION	// only add an exception if it is currently an included segment
WITHOUT_CLASSIFICATION	// make array of exceptions
WITHOUT_CLASSIFICATION	// add the base timeline exclusions as timeline's esceptions
WITHOUT_CLASSIFICATION	// validate base timeline exclusions added as timeline's esceptions
WITHOUT_CLASSIFICATION	// start time...
WITHOUT_CLASSIFICATION	// 1-Jan-2000
WITHOUT_CLASSIFICATION	//long v = stl.toTimelineValue(946684800020L);
WITHOUT_CLASSIFICATION	// tick labels visible flag...
WITHOUT_CLASSIFICATION	// lowerMargin
WITHOUT_CLASSIFICATION	// upperMargin
WITHOUT_CLASSIFICATION	// the reverse transformed value will be in the start of the // next non-excluded and non-exception segment
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test serialization //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// verify all timeline segments included in the // baseTimeline.segment are now exceptions
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // utility methods //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// subcategories
WITHOUT_CLASSIFICATION	// subLabelFont
WITHOUT_CLASSIFICATION	// subLabelPaint
WITHOUT_CLASSIFICATION	// some checks that the clone is independent of the original
WITHOUT_CLASSIFICATION	// visible flag...
WITHOUT_CLASSIFICATION	// label...
WITHOUT_CLASSIFICATION	// label font...
WITHOUT_CLASSIFICATION	// label paint...
WITHOUT_CLASSIFICATION	// attributed label...
WITHOUT_CLASSIFICATION	// label insets...
WITHOUT_CLASSIFICATION	// label angle...
WITHOUT_CLASSIFICATION	// label location...
WITHOUT_CLASSIFICATION	// axis line visible...
WITHOUT_CLASSIFICATION	// axis line stroke...
WITHOUT_CLASSIFICATION	// axis line paint...
WITHOUT_CLASSIFICATION	// tick label font...
WITHOUT_CLASSIFICATION	// tick label paint...
WITHOUT_CLASSIFICATION	// tick marks visible flag...
WITHOUT_CLASSIFICATION	// tick mark inside length...
WITHOUT_CLASSIFICATION	// tick mark outside length...
WITHOUT_CLASSIFICATION	// tick mark stroke...
WITHOUT_CLASSIFICATION	// fixed dimension...
WITHOUT_CLASSIFICATION	// axis line visible flag...
WITHOUT_CLASSIFICATION	// positiveArrowVisible;
WITHOUT_CLASSIFICATION	//private Shape upArrow;
WITHOUT_CLASSIFICATION	//private Shape downArrow;
WITHOUT_CLASSIFICATION	//private Shape leftArrow;
WITHOUT_CLASSIFICATION	//private Shape rightArrow;
WITHOUT_CLASSIFICATION	// axisLineStroke
WITHOUT_CLASSIFICATION	// inverted
WITHOUT_CLASSIFICATION	//private TickUnits standardTickUnits;
WITHOUT_CLASSIFICATION	// verticalTickLabels
WITHOUT_CLASSIFICATION	// time zone
WITHOUT_CLASSIFICATION	// locale
WITHOUT_CLASSIFICATION	// chars
WITHOUT_CLASSIFICATION	// showYear[]
WITHOUT_CLASSIFICATION	// yearFormatter
WITHOUT_CLASSIFICATION	// NONE / NONE
WITHOUT_CLASSIFICATION	// NONE / RANGE
WITHOUT_CLASSIFICATION	// NONE / FIXED
WITHOUT_CLASSIFICATION	// RANGE / NONE
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// RANGE / RANGE
WITHOUT_CLASSIFICATION	// RANGE / FIXED
WITHOUT_CLASSIFICATION	// FIXED / NONE
WITHOUT_CLASSIFICATION	// FIXED / RANGE
WITHOUT_CLASSIFICATION	// FIXED / FIXED
WITHOUT_CLASSIFICATION	// TBLRC // 00010 - right item only
WITHOUT_CLASSIFICATION	// TBLRC // 00010 - right item only
WITHOUT_CLASSIFICATION	// TBLRC // 00011 - right and center items
WITHOUT_CLASSIFICATION	// TBLRC // 00011 - right and center items
WITHOUT_CLASSIFICATION	// try case where right item is shorter than center item
WITHOUT_CLASSIFICATION	// TBLRC // 00100 - left item only
WITHOUT_CLASSIFICATION	// TBLRC // 00101 - left and center items
WITHOUT_CLASSIFICATION	// TBLRC // 00101 - left and center items
WITHOUT_CLASSIFICATION	// try case where left item is shorter than center item
WITHOUT_CLASSIFICATION	// TBLRC // 00110 - left and right items
WITHOUT_CLASSIFICATION	// TBLRC // 00111 - left, right and center items
WITHOUT_CLASSIFICATION	// TBLRC // 01000 - bottom item only
WITHOUT_CLASSIFICATION	// TBLRC // 01001 - bottom and center only
WITHOUT_CLASSIFICATION	// TBLRC // 01010 - bottom and right only
WITHOUT_CLASSIFICATION	// TBLRC // 10110 - top, left and right
WITHOUT_CLASSIFICATION	// TBLRC // 10111
WITHOUT_CLASSIFICATION	// TBLRC // 11000 - top and bottom only
WITHOUT_CLASSIFICATION	// TBLRC // 11001
WITHOUT_CLASSIFICATION	// TBLRC // 11010 - top, bottom and right
WITHOUT_CLASSIFICATION	// TBLRC // 11100
WITHOUT_CLASSIFICATION	// TBLRC // 11101
WITHOUT_CLASSIFICATION	// TBLRC // 11110
WITHOUT_CLASSIFICATION	// TBLRC // 11111 - all
WITHOUT_CLASSIFICATION	// create dataset 1...
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// TBLRC // 00110 - left and right items
WITHOUT_CLASSIFICATION	// TBLRC // 00111 - left, right and center items
WITHOUT_CLASSIFICATION	// TBLRC // 01000 - bottom item only
WITHOUT_CLASSIFICATION	// TBLRC // 01001 - bottom and center only
WITHOUT_CLASSIFICATION	// TBLRC // 01010 - bottom and right only
WITHOUT_CLASSIFICATION	// TBLRC // 01011 - bottom, right and center
WITHOUT_CLASSIFICATION	// TBLRC // 01100
WITHOUT_CLASSIFICATION	// TBLRC // 01101 - bottom, left and center
WITHOUT_CLASSIFICATION	// TBLRC // 01110 - bottom. left and right
WITHOUT_CLASSIFICATION	// TBLRC // 01111
WITHOUT_CLASSIFICATION	// TBLRC // 10000 - top item only
WITHOUT_CLASSIFICATION	// TBLRC // 10001 - top and center only
WITHOUT_CLASSIFICATION	// TBLRC // 10010 - right and top only
WITHOUT_CLASSIFICATION	// TBLRC // 10011 - top, right and center
WITHOUT_CLASSIFICATION	// TBLRC // 10100 - top and left only
WITHOUT_CLASSIFICATION	// TBLRC // 10101 - top, left and center
WITHOUT_CLASSIFICATION	// TBLRC // 10111
WITHOUT_CLASSIFICATION	// standard test
WITHOUT_CLASSIFICATION	// tooltip format
WITHOUT_CLASSIFICATION	// tooltip format
WITHOUT_CLASSIFICATION	// date format
WITHOUT_CLASSIFICATION	// Y format
WITHOUT_CLASSIFICATION	// some setup...
WITHOUT_CLASSIFICATION	// some setup...
WITHOUT_CLASSIFICATION	// another test...
WITHOUT_CLASSIFICATION	// try a null value
WITHOUT_CLASSIFICATION	// format string...
WITHOUT_CLASSIFICATION	// x number format
WITHOUT_CLASSIFICATION	// y number format
WITHOUT_CLASSIFICATION	// z number format
WITHOUT_CLASSIFICATION	// x date format
WITHOUT_CLASSIFICATION	// y date format
WITHOUT_CLASSIFICATION	// z date format
WITHOUT_CLASSIFICATION	// remove plot2, but plot1 is removed instead
WITHOUT_CLASSIFICATION	// create subplot 1...
WITHOUT_CLASSIFICATION	// create subplot 2...
WITHOUT_CLASSIFICATION	// add the subplots...
WITHOUT_CLASSIFICATION	// separatorsVisible
WITHOUT_CLASSIFICATION	// separatorStroke
WITHOUT_CLASSIFICATION	// separatorPaint
WITHOUT_CLASSIFICATION	// outerSeparatorExtension
WITHOUT_CLASSIFICATION	// sectionDepth
WITHOUT_CLASSIFICATION	// orientation...
WITHOUT_CLASSIFICATION	// axisOffset...
WITHOUT_CLASSIFICATION	// domainAxes...
WITHOUT_CLASSIFICATION	// TBLRC // 00000 - no items
WITHOUT_CLASSIFICATION	// TBLRC // 11001
WITHOUT_CLASSIFICATION	// TBLRC // 11010 - top, bottom and right
WITHOUT_CLASSIFICATION	// TBLRC // 11011
WITHOUT_CLASSIFICATION	// TBLRC // 11100
WITHOUT_CLASSIFICATION	// TBLRC // 11101
WITHOUT_CLASSIFICATION	// TBLRC // 11110
WITHOUT_CLASSIFICATION	// check handling when the dataset is a regular XYDataset, not an // XYZDataset...
WITHOUT_CLASSIFICATION	// domainAxisLocation - no longer a separate field but test anyway...
WITHOUT_CLASSIFICATION	// domainAxisLocations...
WITHOUT_CLASSIFICATION	// draw shared domain axis...
WITHOUT_CLASSIFICATION	// rangeAxes...
WITHOUT_CLASSIFICATION	// rangeAxisLocation - no longer a separate field but test anyway...
WITHOUT_CLASSIFICATION	// rangeAxisLocations...
WITHOUT_CLASSIFICATION	// datasetToDomainAxisMap...
WITHOUT_CLASSIFICATION	// datasetToRangeAxisMap...
WITHOUT_CLASSIFICATION	// renderers...
WITHOUT_CLASSIFICATION	// rendering order...
WITHOUT_CLASSIFICATION	// columnRenderingOrder...
WITHOUT_CLASSIFICATION	// rowRenderingOrder...
WITHOUT_CLASSIFICATION	// domainGridlinesVisible
WITHOUT_CLASSIFICATION	// domainGridlineStroke
WITHOUT_CLASSIFICATION	// domainGridlinePaint
WITHOUT_CLASSIFICATION	// rangeGridlinesVisible
WITHOUT_CLASSIFICATION	// rangeGridlineStroke
WITHOUT_CLASSIFICATION	// rangeGridlinePaint
WITHOUT_CLASSIFICATION	// rangeCrosshairVisible
WITHOUT_CLASSIFICATION	// rangeCrosshairValue
WITHOUT_CLASSIFICATION	// rangeCrosshairStroke
WITHOUT_CLASSIFICATION	// rangeCrosshairLockedOnData
WITHOUT_CLASSIFICATION	// foreground domain markers
WITHOUT_CLASSIFICATION	// background domain markers
WITHOUT_CLASSIFICATION	// foreground range markers...
WITHOUT_CLASSIFICATION	// background range markers...
WITHOUT_CLASSIFICATION	// annotations
WITHOUT_CLASSIFICATION	// weight
WITHOUT_CLASSIFICATION	// fixed domain axis space...
WITHOUT_CLASSIFICATION	// fixed range axis space...
WITHOUT_CLASSIFICATION	// crosshairDatasetIndex
WITHOUT_CLASSIFICATION	// domainCrosshairColumnKey
WITHOUT_CLASSIFICATION	// domainCrosshairRowKey
WITHOUT_CLASSIFICATION	// domainCrosshairVisible
WITHOUT_CLASSIFICATION	// domainCrosshairStroke
WITHOUT_CLASSIFICATION	// shadowGenerator
WITHOUT_CLASSIFICATION	// check for independence
WITHOUT_CLASSIFICATION	// we didn't get an exception so all is good
WITHOUT_CLASSIFICATION	// should get IllegalArgumentException for negative index
WITHOUT_CLASSIFICATION	// should get IllegalArgumentException for negative index
WITHOUT_CLASSIFICATION	// we should be able to give a dataset an arbitrary index
WITHOUT_CLASSIFICATION	// labelFont
WITHOUT_CLASSIFICATION	// labelPaint
WITHOUT_CLASSIFICATION	// dial outline paint
WITHOUT_CLASSIFICATION	// if multiple axes are mapped, the first in the list should be // returned...
WITHOUT_CLASSIFICATION	// we should be able to give a renderer an arbitrary index
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// by default, the renderer with index 0 is used
WITHOUT_CLASSIFICATION	// add a second renderer with the same index as dataset2, now it will // be used
WITHOUT_CLASSIFICATION	// now map the dataset to the second xAxis
WITHOUT_CLASSIFICATION	// now map the dataset to the second xAxis
WITHOUT_CLASSIFICATION	// add a second dataset, plotted against a second x axis
WITHOUT_CLASSIFICATION	// add a second dataset, plotted against a second axis
WITHOUT_CLASSIFICATION	// needle paint
WITHOUT_CLASSIFICATION	// value font
WITHOUT_CLASSIFICATION	// value paint
WITHOUT_CLASSIFICATION	// tick label font
WITHOUT_CLASSIFICATION	// tick label paint
WITHOUT_CLASSIFICATION	// tick label format
WITHOUT_CLASSIFICATION	// tick paint
WITHOUT_CLASSIFICATION	// draw border
WITHOUT_CLASSIFICATION	// meter angle
WITHOUT_CLASSIFICATION	//key
WITHOUT_CLASSIFICATION	//paint
WITHOUT_CLASSIFICATION	//stroke
WITHOUT_CLASSIFICATION	//outlinePaint
WITHOUT_CLASSIFICATION	//outlineStroke
WITHOUT_CLASSIFICATION	//alpha
WITHOUT_CLASSIFICATION	// check null argument...
WITHOUT_CLASSIFICATION	// drawBorder
WITHOUT_CLASSIFICATION	// rosePaint
WITHOUT_CLASSIFICATION	// roseCenterPaint
WITHOUT_CLASSIFICATION	// roseHighlightPaint
WITHOUT_CLASSIFICATION	// interiorGap...
WITHOUT_CLASSIFICATION	// circular
WITHOUT_CLASSIFICATION	// direction
WITHOUT_CLASSIFICATION	// ignoreNullValues
WITHOUT_CLASSIFICATION	// sectionPaint
WITHOUT_CLASSIFICATION	// sectionPaintMap
WITHOUT_CLASSIFICATION	// baseSectionPaint
WITHOUT_CLASSIFICATION	// sectionOutlinePaint
WITHOUT_CLASSIFICATION	// sectionOutlinePaintList
WITHOUT_CLASSIFICATION	// baseSectionOutlinePaint
WITHOUT_CLASSIFICATION	// sectionOutlineStrokeList
WITHOUT_CLASSIFICATION	// baseSectionOutlineStroke
WITHOUT_CLASSIFICATION	// shadowPaint
WITHOUT_CLASSIFICATION	// shadowXOffset
WITHOUT_CLASSIFICATION	// shadowYOffset
WITHOUT_CLASSIFICATION	// labelOutlinePaint
WITHOUT_CLASSIFICATION	// labelOutlineStroke
WITHOUT_CLASSIFICATION	// labelShadowPaint
WITHOUT_CLASSIFICATION	// explodePercentages
WITHOUT_CLASSIFICATION	// backgroundImage
WITHOUT_CLASSIFICATION	// startAngle
WITHOUT_CLASSIFICATION	// backgroundImageAlignment
WITHOUT_CLASSIFICATION	// backgroundImageAlpha
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// shadowGenerator
WITHOUT_CLASSIFICATION	// direction
WITHOUT_CLASSIFICATION	// labelLinkPaint
WITHOUT_CLASSIFICATION	// maximumLabelWidth
WITHOUT_CLASSIFICATION	// links visible
WITHOUT_CLASSIFICATION	// labelGap
WITHOUT_CLASSIFICATION	// toolTipGenerator
WITHOUT_CLASSIFICATION	// linkMargin
WITHOUT_CLASSIFICATION	// legendItemShape
WITHOUT_CLASSIFICATION	// labelLinkStroke
WITHOUT_CLASSIFICATION	// minimumArcAngleToDraw
WITHOUT_CLASSIFICATION	// urlGenerator
WITHOUT_CLASSIFICATION	// legendLabelGenerator
WITHOUT_CLASSIFICATION	// legendItemShape
WITHOUT_CLASSIFICATION	// legendLabelToolTipGenerator
WITHOUT_CLASSIFICATION	// legendLabelURLGenerator
WITHOUT_CLASSIFICATION	// autoPopulateSectionPaint
WITHOUT_CLASSIFICATION	// autoPopulateSectionOutlinePaint
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// autoPopulateSectionOutlineStroke
WITHOUT_CLASSIFICATION	// check that the URL generator has been cloned
WITHOUT_CLASSIFICATION	// check that the URL generator has been cloned
WITHOUT_CLASSIFICATION	// change the shape and make sure it only affects p1
WITHOUT_CLASSIFICATION	// change the generator and make sure it only affects p1
WITHOUT_CLASSIFICATION	// change the generator and make sure it only affects p1
WITHOUT_CLASSIFICATION	// check that null items are ignored if requested
WITHOUT_CLASSIFICATION	// check that zero items are ignored if requested
WITHOUT_CLASSIFICATION	// check that negative items are always ignored
WITHOUT_CLASSIFICATION	// noDataMessage
WITHOUT_CLASSIFICATION	// noDataMessageFont
WITHOUT_CLASSIFICATION	// noDataMessagePaint
WITHOUT_CLASSIFICATION	// outlineVisible
WITHOUT_CLASSIFICATION	// outlineStroke
WITHOUT_CLASSIFICATION	// foregroundAlpha
WITHOUT_CLASSIFICATION	// backgroundAlpha
WITHOUT_CLASSIFICATION	// drawingSupplier
WITHOUT_CLASSIFICATION	// try a null collection
WITHOUT_CLASSIFICATION	// dataExtractOrder
WITHOUT_CLASSIFICATION	// headPercent
WITHOUT_CLASSIFICATION	// interiorGap
WITHOUT_CLASSIFICATION	// maxValue
WITHOUT_CLASSIFICATION	// secondary renderers
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// row keys...
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// padding
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// column keys...
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// labelFont
WITHOUT_CLASSIFICATION	// labelPaint
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// axisLinePaint
WITHOUT_CLASSIFICATION	// axisLineStroke
WITHOUT_CLASSIFICATION	// remove plot2, but plot1 is removed instead
WITHOUT_CLASSIFICATION	// orientation...
WITHOUT_CLASSIFICATION	// axisOffset...
WITHOUT_CLASSIFICATION	// labelGenerator
WITHOUT_CLASSIFICATION	// toolTipGenerator
WITHOUT_CLASSIFICATION	// urlGenerator
WITHOUT_CLASSIFICATION	// change a series paint
WITHOUT_CLASSIFICATION	// baseSeriesOutlineStroke
WITHOUT_CLASSIFICATION	// valueFont
WITHOUT_CLASSIFICATION	// webFilled
WITHOUT_CLASSIFICATION	// change a series outline paint
WITHOUT_CLASSIFICATION	// axisLabelGap
WITHOUT_CLASSIFICATION	// thermometerPaint
WITHOUT_CLASSIFICATION	// change the legendItemShape
WITHOUT_CLASSIFICATION	// secondary DomainAxisLocations...
WITHOUT_CLASSIFICATION	// change a series outline stroke
WITHOUT_CLASSIFICATION	// valueLocation
WITHOUT_CLASSIFICATION	// thermometerStroke
WITHOUT_CLASSIFICATION	// valuePaint
WITHOUT_CLASSIFICATION	// axisLocation
WITHOUT_CLASSIFICATION	// showValueLines
WITHOUT_CLASSIFICATION	// domainAxisLocation...
WITHOUT_CLASSIFICATION	// valueFormat
WITHOUT_CLASSIFICATION	// this doesn't work
WITHOUT_CLASSIFICATION	// mercuryPaint
WITHOUT_CLASSIFICATION	// rangeAxisLocation...
WITHOUT_CLASSIFICATION	// domainAxis...
WITHOUT_CLASSIFICATION	// secondary DomainAxes...
WITHOUT_CLASSIFICATION	// secondary RangeAxisLocations...
WITHOUT_CLASSIFICATION	// rangeAxis...
WITHOUT_CLASSIFICATION	// renderer
WITHOUT_CLASSIFICATION	// secondary RangeAxes...
WITHOUT_CLASSIFICATION	// secondaryDatasetRangeAxisMap...
WITHOUT_CLASSIFICATION	// secondary DatasetDomainAxisMap...
WITHOUT_CLASSIFICATION	// try a collection with a single number plus a null
WITHOUT_CLASSIFICATION	// create dataset 1...
WITHOUT_CLASSIFICATION	// create dataset 1...
WITHOUT_CLASSIFICATION	// lowerBound
WITHOUT_CLASSIFICATION	// remove plot2, but plot1 is removed instead
WITHOUT_CLASSIFICATION	// create subplot 1...
WITHOUT_CLASSIFICATION	// create subplot 2...
WITHOUT_CLASSIFICATION	// parent plot...
WITHOUT_CLASSIFICATION	// add the subplots...
WITHOUT_CLASSIFICATION	// domainGridlineStroke
WITHOUT_CLASSIFICATION	// domainGridlinePaint
WITHOUT_CLASSIFICATION	// rangeGridlinesVisible
WITHOUT_CLASSIFICATION	// rangeGridlineStroke
WITHOUT_CLASSIFICATION	// rangeCrosshairVisible
WITHOUT_CLASSIFICATION	// rangeCrosshairValue
WITHOUT_CLASSIFICATION	// rangeCrosshairStroke
WITHOUT_CLASSIFICATION	// rangeCrosshairLockedOnData
WITHOUT_CLASSIFICATION	// weight
WITHOUT_CLASSIFICATION	// fixed legend items
WITHOUT_CLASSIFICATION	// shadowGenerator
WITHOUT_CLASSIFICATION	// should get IllegalArgumentException for negative index
WITHOUT_CLASSIFICATION	// we should be able to give a dataset an arbitrary index
WITHOUT_CLASSIFICATION	// we should be able to give a renderer an arbitrary index
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// add a second dataset
WITHOUT_CLASSIFICATION	// by default, the renderer with index 0 is used
WITHOUT_CLASSIFICATION	// now map the dataset to the second xAxis
WITHOUT_CLASSIFICATION	// now map the dataset to the second xAxis
WITHOUT_CLASSIFICATION	// add a second dataset, plotted against a second x axis
WITHOUT_CLASSIFICATION	// add a second dataset, plotted against a second axis
WITHOUT_CLASSIFICATION	// rangeZeroBaselineVisible
WITHOUT_CLASSIFICATION	// rangeZeroBaselineStroke
WITHOUT_CLASSIFICATION	// rangeZeroBaselinePaint
WITHOUT_CLASSIFICATION	// range markers
WITHOUT_CLASSIFICATION	// secondary range markers
WITHOUT_CLASSIFICATION	// quadrant origin
WITHOUT_CLASSIFICATION	// quadrant paint
WITHOUT_CLASSIFICATION	// verify that the plot is listening to the cloned renderer
WITHOUT_CLASSIFICATION	// no renderer 1
WITHOUT_CLASSIFICATION	// actually removes a1
WITHOUT_CLASSIFICATION	// set up some objects...
WITHOUT_CLASSIFICATION	// paint sequence
WITHOUT_CLASSIFICATION	// outline paint sequence
WITHOUT_CLASSIFICATION	// outline stroke sequence
WITHOUT_CLASSIFICATION	// shape sequence
WITHOUT_CLASSIFICATION	// paint index
WITHOUT_CLASSIFICATION	// outline paint index
WITHOUT_CLASSIFICATION	// outline stroke index
WITHOUT_CLASSIFICATION	// shape index
WITHOUT_CLASSIFICATION	// create dataset 2...
WITHOUT_CLASSIFICATION	// lowerBound
WITHOUT_CLASSIFICATION	// upperBound
WITHOUT_CLASSIFICATION	// startAngle
WITHOUT_CLASSIFICATION	// extent
WITHOUT_CLASSIFICATION	// tickRadius
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// font
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// textAnchor
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	// now make a change to the renderer and see if it triggers a plot // change event...
WITHOUT_CLASSIFICATION	// if multiple axes are mapped, the first in the list should be // returned...
WITHOUT_CLASSIFICATION	// add a second renderer with the same index as dataset2, now it will // be used
WITHOUT_CLASSIFICATION	// outlineStroke
WITHOUT_CLASSIFICATION	// check the case where there is a secondary dataset that doesn't // have a renderer (i.e. falls back to renderer 0)
WITHOUT_CLASSIFICATION	// now remove a3, but since a3.equals(a1), this will in fact remove // a1...
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// visible
WITHOUT_CLASSIFICATION	// radius
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// radius
WITHOUT_CLASSIFICATION	// radius
WITHOUT_CLASSIFICATION	// foregroundPaint
WITHOUT_CLASSIFICATION	// background paint
WITHOUT_CLASSIFICATION	// foreground paint
WITHOUT_CLASSIFICATION	// inner radius
WITHOUT_CLASSIFICATION	// outer radius
WITHOUT_CLASSIFICATION	// dataset index
WITHOUT_CLASSIFICATION	// dataset index
WITHOUT_CLASSIFICATION	// angle
WITHOUT_CLASSIFICATION	// frameAnchor
WITHOUT_CLASSIFICATION	// templateValue
WITHOUT_CLASSIFICATION	// valueAnchor
WITHOUT_CLASSIFICATION	// fill paint
WITHOUT_CLASSIFICATION	// outline paint
WITHOUT_CLASSIFICATION	// outline stroke
WITHOUT_CLASSIFICATION	// test a customised instance
WITHOUT_CLASSIFICATION	// test a custom instance
WITHOUT_CLASSIFICATION	// background
WITHOUT_CLASSIFICATION	// dial cap
WITHOUT_CLASSIFICATION	// frame
WITHOUT_CLASSIFICATION	// view
WITHOUT_CLASSIFICATION	// layer
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// font
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	// stroke
WITHOUT_CLASSIFICATION	// shape
WITHOUT_CLASSIFICATION	// tickLabelFont
WITHOUT_CLASSIFICATION	// tickLabelPaint
WITHOUT_CLASSIFICATION	// outlineStroke
WITHOUT_CLASSIFICATION	// check an inherited attribute
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// check that the listener lists are independent
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// test a default instance
WITHOUT_CLASSIFICATION	// radius
WITHOUT_CLASSIFICATION	// angle
WITHOUT_CLASSIFICATION	// test a customised instance
WITHOUT_CLASSIFICATION	// test a customised instance
WITHOUT_CLASSIFICATION	// test a custom instance
WITHOUT_CLASSIFICATION	// majorTickIncrement
WITHOUT_CLASSIFICATION	// majorTickLength
WITHOUT_CLASSIFICATION	// majorTickPaint
WITHOUT_CLASSIFICATION	// majorTickStroke
WITHOUT_CLASSIFICATION	// minorTickLength
WITHOUT_CLASSIFICATION	// tickLabelOffset
WITHOUT_CLASSIFICATION	// try a default instance
WITHOUT_CLASSIFICATION	// try a customised instance
WITHOUT_CLASSIFICATION	// label
WITHOUT_CLASSIFICATION	// gradient paint transformer
WITHOUT_CLASSIFICATION	// test default instance
WITHOUT_CLASSIFICATION	// have to use a concrete subclass...
WITHOUT_CLASSIFICATION	// seriesVisible
WITHOUT_CLASSIFICATION	// seriesVisibleList
WITHOUT_CLASSIFICATION	// baseSeriesVisible
WITHOUT_CLASSIFICATION	// seriesVisibleInLegendList
WITHOUT_CLASSIFICATION	// baseSeriesVisibleInLegend
WITHOUT_CLASSIFICATION	// paintList
WITHOUT_CLASSIFICATION	// basePaint
WITHOUT_CLASSIFICATION	// baseFillPaint
WITHOUT_CLASSIFICATION	// outlinePaintList
WITHOUT_CLASSIFICATION	// baseOutlinePaint
WITHOUT_CLASSIFICATION	// strokeList
WITHOUT_CLASSIFICATION	// outlineStrokeList
WITHOUT_CLASSIFICATION	// baseOutlineStroke
WITHOUT_CLASSIFICATION	// shapeList
WITHOUT_CLASSIFICATION	// baseShape
WITHOUT_CLASSIFICATION	// itemLabelsVisibleList
WITHOUT_CLASSIFICATION	// baseItemLabelsVisible
WITHOUT_CLASSIFICATION	// itemLabelFont
WITHOUT_CLASSIFICATION	// baseItemLabelFont
WITHOUT_CLASSIFICATION	// itemLabelPaint
WITHOUT_CLASSIFICATION	// itemLabelPaintList
WITHOUT_CLASSIFICATION	// baseItemLabelPaint
WITHOUT_CLASSIFICATION	// positiveItemLabelPositionList;
WITHOUT_CLASSIFICATION	// basePositiveItemLabelPosition;
WITHOUT_CLASSIFICATION	// negativeItemLabelPosition;
WITHOUT_CLASSIFICATION	// OUTLINE STROKE
WITHOUT_CLASSIFICATION	// SHAPE
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// baseOutlinePaint
WITHOUT_CLASSIFICATION	// itemLabelAnchorOffset
WITHOUT_CLASSIFICATION	// createEntities;
WITHOUT_CLASSIFICATION	// createEntitiesList;
WITHOUT_CLASSIFICATION	// legendShape
WITHOUT_CLASSIFICATION	// baseLegendShape
WITHOUT_CLASSIFICATION	// legendTextFont
WITHOUT_CLASSIFICATION	// baseLegendTextFont
WITHOUT_CLASSIFICATION	// OUTLINE PAINT
WITHOUT_CLASSIFICATION	// ITEM_LABELS_VISIBLE
WITHOUT_CLASSIFICATION	// ITEM_LABEL_FONT
WITHOUT_CLASSIFICATION	// POSITIVE ITEM LABEL POSITION
WITHOUT_CLASSIFICATION	// NEGATIVE ITEM LABEL ANCHOR
WITHOUT_CLASSIFICATION	// failed
WITHOUT_CLASSIFICATION	// now check autoPopulate==true
WITHOUT_CLASSIFICATION	// now check autoPopulate==true
WITHOUT_CLASSIFICATION	// now check autoPopulate==true
WITHOUT_CLASSIFICATION	/*CategoryPlot plot =*/
WITHOUT_CLASSIFICATION	/*CategoryPlot plot =*/
WITHOUT_CLASSIFICATION	/*CategoryPlot plot =*/
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// check a series with repeating items
WITHOUT_CLASSIFICATION	// check a series with repeating items
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// check a series with no items
WITHOUT_CLASSIFICATION	// check a series with one item
WITHOUT_CLASSIFICATION	// check a series with two items
WITHOUT_CLASSIFICATION	// check a series with three items
WITHOUT_CLASSIFICATION	// check a series with four items
WITHOUT_CLASSIFICATION	// check a series with repeating items
WITHOUT_CLASSIFICATION	// we're doing this for testing only, and make sure that we // only add data in ascending order by x-value
WITHOUT_CLASSIFICATION	// we're doing this for testing only, and make sure that we // only add data in descending order by x-value
WITHOUT_CLASSIFICATION	// try with gradient paint
WITHOUT_CLASSIFICATION	// should be equal...
WITHOUT_CLASSIFICATION	// should be equal...
WITHOUT_CLASSIFICATION	// and independent...
WITHOUT_CLASSIFICATION	// and independent...
WITHOUT_CLASSIFICATION	// and independent...
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	// the renderer should not be equal to a BarRenderer
WITHOUT_CLASSIFICATION	// firstBarPaint;
WITHOUT_CLASSIFICATION	// lastBarPaint;
WITHOUT_CLASSIFICATION	// positiveBarPaint;
WITHOUT_CLASSIFICATION	//private Paint negativeBarPaint;
WITHOUT_CLASSIFICATION	// quick check for independence
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// shadowXOffset
WITHOUT_CLASSIFICATION	// shadowYOffset
WITHOUT_CLASSIFICATION	// toolTipGenerator
WITHOUT_CLASSIFICATION	// urlGenerator
WITHOUT_CLASSIFICATION	// should be equal...
WITHOUT_CLASSIFICATION	// and independent...
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	// check that the series visible flag is observed
WITHOUT_CLASSIFICATION	// map
WITHOUT_CLASSIFICATION	// toolTipGeneratorList
WITHOUT_CLASSIFICATION	// baseToolTipGenerator
WITHOUT_CLASSIFICATION	// itemLabelGenerator
WITHOUT_CLASSIFICATION	// itemLabelGeneratorList
WITHOUT_CLASSIFICATION	// baseItemLabelGenerator
WITHOUT_CLASSIFICATION	// urlGeneratorList
WITHOUT_CLASSIFICATION	// baseItemURLGenerator
WITHOUT_CLASSIFICATION	// legendItemLabelGenerator
WITHOUT_CLASSIFICATION	// legendItemToolTipGenerator
WITHOUT_CLASSIFICATION	// legendItemURLGenerator
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// base value
WITHOUT_CLASSIFICATION	// itemMargin
WITHOUT_CLASSIFICATION	// drawBarOutline
WITHOUT_CLASSIFICATION	// maximumBarWidth
WITHOUT_CLASSIFICATION	// minimumBarLength
WITHOUT_CLASSIFICATION	// gradientPaintTransformer
WITHOUT_CLASSIFICATION	// positiveItemLabelPositionFallback
WITHOUT_CLASSIFICATION	// negativeItemLabelPositionFallback
WITHOUT_CLASSIFICATION	// barPainter
WITHOUT_CLASSIFICATION	// shadowsVisible
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// shadowXOffset
WITHOUT_CLASSIFICATION	// shadowYOffset
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	// check that the series visible flag is observed
WITHOUT_CLASSIFICATION	// barPainter
WITHOUT_CLASSIFICATION	// shadowsVisible
WITHOUT_CLASSIFICATION	// try null argument
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// check that super class fields are being looked at...
WITHOUT_CLASSIFICATION	// setUseYInterval
WITHOUT_CLASSIFICATION	// setBase()
WITHOUT_CLASSIFICATION	// try empty dataset
WITHOUT_CLASSIFICATION	// setGradientPaintTransformer()
WITHOUT_CLASSIFICATION	// setDrawBarOutline()
WITHOUT_CLASSIFICATION	// setMargin()
WITHOUT_CLASSIFICATION	// legendBar
WITHOUT_CLASSIFICATION	// positiveItemLabelFallbackPosition
WITHOUT_CLASSIFICATION	// negativeItemLabelFallbackPosition
WITHOUT_CLASSIFICATION	// check a list containing a non-Number object
WITHOUT_CLASSIFICATION	// try something from the base class
WITHOUT_CLASSIFICATION	// positive paint
WITHOUT_CLASSIFICATION	// negative paint
WITHOUT_CLASSIFICATION	// shapesVisible
WITHOUT_CLASSIFICATION	// legendLine
WITHOUT_CLASSIFICATION	// roundXCoordinates
WITHOUT_CLASSIFICATION	// drawOpenTicks
WITHOUT_CLASSIFICATION	// drawCloseTicks
WITHOUT_CLASSIFICATION	// openTickPaint
WITHOUT_CLASSIFICATION	// closeTickPaint
WITHOUT_CLASSIFICATION	// tickLength
WITHOUT_CLASSIFICATION	// try an empty dataset - should return a null range
WITHOUT_CLASSIFICATION	// try a null dataset - should return a null range
WITHOUT_CLASSIFICATION	// drawXError
WITHOUT_CLASSIFICATION	// drawYError
WITHOUT_CLASSIFICATION	// capLength
WITHOUT_CLASSIFICATION	// errorPaint
WITHOUT_CLASSIFICATION	// errorStroke
WITHOUT_CLASSIFICATION	// check boxPaint null also
WITHOUT_CLASSIFICATION	// upPaint
WITHOUT_CLASSIFICATION	// downPaint
WITHOUT_CLASSIFICATION	// drawVolume
WITHOUT_CLASSIFICATION	// candleWidth
WITHOUT_CLASSIFICATION	// maxCandleWidthInMilliseconds
WITHOUT_CLASSIFICATION	// autoWidthMethod
WITHOUT_CLASSIFICATION	// autoWidthFactor
WITHOUT_CLASSIFICATION	// backgroundPaint
WITHOUT_CLASSIFICATION	// padding
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// fillPaintTransformer
WITHOUT_CLASSIFICATION	// fillPaint
WITHOUT_CLASSIFICATION	// outlinePaint
WITHOUT_CLASSIFICATION	// linePaint
WITHOUT_CLASSIFICATION	// paint
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	/* BufferedImage image = */
WITHOUT_CLASSIFICATION	// shape
WITHOUT_CLASSIFICATION	// outlineStroke
WITHOUT_CLASSIFICATION	// axisLocation
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	/*JFreeChart chart =*/
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// check that the generator has been cloned
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// try an empty dataset - should return a null range
WITHOUT_CLASSIFICATION	// try a null dataset - should return a null range
WITHOUT_CLASSIFICATION	// locale shouldn't matter here
WITHOUT_CLASSIFICATION	// autoWidthGap
WITHOUT_CLASSIFICATION	// check that a null dataset returns null bounds
WITHOUT_CLASSIFICATION	// check that a null dataset returns null bounds
WITHOUT_CLASSIFICATION	// check the bounds of a simple dataset
WITHOUT_CLASSIFICATION	// test findDomainBounds as well
WITHOUT_CLASSIFICATION	// blockHeight
WITHOUT_CLASSIFICATION	// blockWidth
WITHOUT_CLASSIFICATION	// paintScale
WITHOUT_CLASSIFICATION	// paintScale
WITHOUT_CLASSIFICATION	// the following fields are inherited from the AbstractXYItemRenderer
WITHOUT_CLASSIFICATION	// axis
WITHOUT_CLASSIFICATION	// axisOffset
WITHOUT_CLASSIFICATION	// stripWidth
WITHOUT_CLASSIFICATION	// stripOutlineVisible
WITHOUT_CLASSIFICATION	// stripOutlinePaint
WITHOUT_CLASSIFICATION	// stripOutlineStroke
WITHOUT_CLASSIFICATION	// shapeVisible
WITHOUT_CLASSIFICATION	// shapeFilled
WITHOUT_CLASSIFICATION	// shapeOutlineVisible
WITHOUT_CLASSIFICATION	// shapeAnchor
WITHOUT_CLASSIFICATION	// shapeLocation
WITHOUT_CLASSIFICATION	// line
WITHOUT_CLASSIFICATION	// lineStroke
WITHOUT_CLASSIFICATION	// maximumLinesToDisplay
WITHOUT_CLASSIFICATION	// toolTipText
WITHOUT_CLASSIFICATION	// expandToFitSpace
WITHOUT_CLASSIFICATION	// margin
WITHOUT_CLASSIFICATION	// border
WITHOUT_CLASSIFICATION	// is the clone independent
WITHOUT_CLASSIFICATION	// case 1 - object is mutable but not PublicCloneable
WITHOUT_CLASSIFICATION	// simple case
WITHOUT_CLASSIFICATION	// try a null value
WITHOUT_CLASSIFICATION	// try null argument
WITHOUT_CLASSIFICATION	// you can add a null list - it would have been better if this // required EMPTY_LIST
WITHOUT_CLASSIFICATION	// case 1 - object is mutable but not PublicCloneable
WITHOUT_CLASSIFICATION	// if we modify the original list, it's best if the URL generator is // not affected
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// the clone contains a reference to the original object
WITHOUT_CLASSIFICATION	// the clone contains a reference to the original object
WITHOUT_CLASSIFICATION	// CASE 2 - object is mutable AND PublicCloneable
WITHOUT_CLASSIFICATION	// CASE 2 - object is mutable AND PublicCloneable
WITHOUT_CLASSIFICATION	// the clone contains a reference to a CLONE of the original object
WITHOUT_CLASSIFICATION	// check that clone is independent of the original
WITHOUT_CLASSIFICATION	// check sorted rows
WITHOUT_CLASSIFICATION	// check for unknown column
WITHOUT_CLASSIFICATION	// try null key
WITHOUT_CLASSIFICATION	// try null key
WITHOUT_CLASSIFICATION	/*v =*/
WITHOUT_CLASSIFICATION	// confirm that the clone is independent of the original
WITHOUT_CLASSIFICATION	// check null argument 1
WITHOUT_CLASSIFICATION	/* ComparableObjectItem item1 = */
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// retrieve an item
WITHOUT_CLASSIFICATION	// request with a negative index
WITHOUT_CLASSIFICATION	// request with a negative index
WITHOUT_CLASSIFICATION	// request width index == itemCount
WITHOUT_CLASSIFICATION	// check null argument
WITHOUT_CLASSIFICATION	// replace an existing value
WITHOUT_CLASSIFICATION	// try a null key - should throw an exception
WITHOUT_CLASSIFICATION	// try unknown key
WITHOUT_CLASSIFICATION	// try negative key index
WITHOUT_CLASSIFICATION	// try key index == itemCount
WITHOUT_CLASSIFICATION	/*Range r2 =*/
WITHOUT_CLASSIFICATION	// Expand by 0% does not change the range
WITHOUT_CLASSIFICATION	// Lower > upper: mid point is used
WITHOUT_CLASSIFICATION	// Shifting with a delta of 0 does not change the range
WITHOUT_CLASSIFICATION	// Scaling with a factor of 1 does not change the range
WITHOUT_CLASSIFICATION	/*s1 = */
WITHOUT_CLASSIFICATION	// key
WITHOUT_CLASSIFICATION	// autoSort
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// remove an item
WITHOUT_CLASSIFICATION	// map a key to a new group
WITHOUT_CLASSIFICATION	// clear a mapping
WITHOUT_CLASSIFICATION	// check handling of null key
WITHOUT_CLASSIFICATION	// a new map always has 1 group (the default group)
WITHOUT_CLASSIFICATION	// now overwrite group "G2"...
WITHOUT_CLASSIFICATION	// if there is an explicit mapping to the default group, it is counted
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// confirm that the clone is independent of the original
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// check key order
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// check retrieve value by key
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// check retrieve value by index
WITHOUT_CLASSIFICATION	// now overwrite group "G2"...
WITHOUT_CLASSIFICATION	// if the default group is not mapped to, it should still count towards // the group count...
WITHOUT_CLASSIFICATION	// now when the default group is mapped to, it shouldn't increase the // group count...
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// the default group is always at index 0
WITHOUT_CLASSIFICATION	// a non-existent group should return -1
WITHOUT_CLASSIFICATION	// indices are assigned in the order that groups are originally mapped
WITHOUT_CLASSIFICATION	// a key that hasn't been mapped should return the default group
WITHOUT_CLASSIFICATION	// a null argument should throw an exception
WITHOUT_CLASSIFICATION	// a small check for independence
WITHOUT_CLASSIFICATION	// check invalid indices
WITHOUT_CLASSIFICATION	// check invalid indices
WITHOUT_CLASSIFICATION	// confirm overwriting an existing value
WITHOUT_CLASSIFICATION	// try null keys
WITHOUT_CLASSIFICATION	// try negative row index
WITHOUT_CLASSIFICATION	// try row index too high
WITHOUT_CLASSIFICATION	// try negative column index
WITHOUT_CLASSIFICATION	// try column index too high
WITHOUT_CLASSIFICATION	// try unknown row key
WITHOUT_CLASSIFICATION	// try null row key
WITHOUT_CLASSIFICATION	// try unknown column key
WITHOUT_CLASSIFICATION	// try null column key
WITHOUT_CLASSIFICATION	/* Comparable k = */
WITHOUT_CLASSIFICATION	/* Comparable k = */
WITHOUT_CLASSIFICATION	// try null
WITHOUT_CLASSIFICATION	// it's OK to use an index equal to the size of the list
WITHOUT_CLASSIFICATION	// try replacing an existing value
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// try a null source
WITHOUT_CLASSIFICATION	// check negative index throws exception
WITHOUT_CLASSIFICATION	// check negative index throws exception
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// check index == getItemCount() throws exception
WITHOUT_CLASSIFICATION	// test null source
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// an empty dataset should return a null range
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	/* Number n = */
WITHOUT_CLASSIFICATION	// try null
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// basic check for independence
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// this is expected
WITHOUT_CLASSIFICATION	// check index == getItemCount() throws exception
WITHOUT_CLASSIFICATION	// test null source
WITHOUT_CLASSIFICATION	// another item
WITHOUT_CLASSIFICATION	/* Number n =*/
WITHOUT_CLASSIFICATION	// increment a null value
WITHOUT_CLASSIFICATION	// increment an unknown row
WITHOUT_CLASSIFICATION	// increment an unknown column
WITHOUT_CLASSIFICATION	// a row of all null values is still counted...
WITHOUT_CLASSIFICATION	// a column of all null values is still counted...
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// check that the clone doesn't share the same underlying arrays.
WITHOUT_CLASSIFICATION	// check that the clone doesn't share the same underlying arrays.
WITHOUT_CLASSIFICATION	// check that two empty datasets are equal
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// check an empty dataset
WITHOUT_CLASSIFICATION	// make sure that modifying the returned array doesn't change the // function
WITHOUT_CLASSIFICATION	// note that we don't define taskB1
WITHOUT_CLASSIFICATION	// define subtasks
WITHOUT_CLASSIFICATION	/* Number start = */
WITHOUT_CLASSIFICATION	// test collection 3, which doesn't define all tasks in all series
WITHOUT_CLASSIFICATION	// test collection 3, which doesn't define all tasks in all series
WITHOUT_CLASSIFICATION	// test collection 3, which doesn't define all tasks in all series
WITHOUT_CLASSIFICATION	/* int count = */
WITHOUT_CLASSIFICATION	/* Number end = */
WITHOUT_CLASSIFICATION	// try a single item
WITHOUT_CLASSIFICATION	// simple check for independence
WITHOUT_CLASSIFICATION	// what if we don't want the interval?
WITHOUT_CLASSIFICATION	// an item in series 2
WITHOUT_CLASSIFICATION	// another empty series
WITHOUT_CLASSIFICATION	// a dataset with a single value
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// a dataset with a single value
WITHOUT_CLASSIFICATION	// null is ignored
WITHOUT_CLASSIFICATION	// a Double.NaN should be ignored
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// try null argument
WITHOUT_CLASSIFICATION	// try null argument
WITHOUT_CLASSIFICATION	// check that clone is independent of the original
WITHOUT_CLASSIFICATION	/* Number n =*/
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// check that the clone doesn't share the same underlying arrays.
WITHOUT_CLASSIFICATION	// simple check for independence
WITHOUT_CLASSIFICATION	// simple check for independence
WITHOUT_CLASSIFICATION	// try a single item
WITHOUT_CLASSIFICATION	// another item
WITHOUT_CLASSIFICATION	// another empty series
WITHOUT_CLASSIFICATION	// an item in series 2
WITHOUT_CLASSIFICATION	// Double.NaN DOESN'T mess things up
WITHOUT_CLASSIFICATION	// got it!
WITHOUT_CLASSIFICATION	// check that empty dataset is handled OK
WITHOUT_CLASSIFICATION	// and that simple aggregation works
WITHOUT_CLASSIFICATION	// an empty dataset should return a null max
WITHOUT_CLASSIFICATION	// an empty dataset should return a null max
WITHOUT_CLASSIFICATION	// null dataset throws IllegalArgumentException
WITHOUT_CLASSIFICATION	// null list throws IllegalArgumentException
WITHOUT_CLASSIFICATION	// null range throws IllegalArgumentException
WITHOUT_CLASSIFICATION	// empty dataset returns null
WITHOUT_CLASSIFICATION	// add an empty series
WITHOUT_CLASSIFICATION	// check a null value
WITHOUT_CLASSIFICATION	// check a NaN
WITHOUT_CLASSIFICATION	// check another regular value
WITHOUT_CLASSIFICATION	// add a second series
WITHOUT_CLASSIFICATION	// add a value to the second series
WITHOUT_CLASSIFICATION	// add a value that isn't in the xRange
WITHOUT_CLASSIFICATION	// try some nulls
WITHOUT_CLASSIFICATION	// an empty dataset should return null for bounds
WITHOUT_CLASSIFICATION	// try a dataset with a single value
WITHOUT_CLASSIFICATION	// try a dataset with two values
WITHOUT_CLASSIFICATION	// try a Double.NaN
WITHOUT_CLASSIFICATION	// try a Double.NEGATIVE_INFINITY
WITHOUT_CLASSIFICATION	// overwrite the value
WITHOUT_CLASSIFICATION	// test independence
WITHOUT_CLASSIFICATION	// now overwrite this item with another
WITHOUT_CLASSIFICATION	// try null list
WITHOUT_CLASSIFICATION	// try a list containing a single value
WITHOUT_CLASSIFICATION	// try null array
WITHOUT_CLASSIFICATION	// try an array containing no items
WITHOUT_CLASSIFICATION	// try an array containing a single Number
WITHOUT_CLASSIFICATION	// try an array containing a single Number and a null
WITHOUT_CLASSIFICATION	// try an array containing a single Number and a NaN
WITHOUT_CLASSIFICATION	// try a null argument
WITHOUT_CLASSIFICATION	// OK
WITHOUT_CLASSIFICATION	// try null argument
WITHOUT_CLASSIFICATION	// test independence
WITHOUT_CLASSIFICATION	// try an empty collection
WITHOUT_CLASSIFICATION	// try a collection with a single number
WITHOUT_CLASSIFICATION	// try a collection with a single number plus a NaN
WITHOUT_CLASSIFICATION	// try a collection with several numbers
WITHOUT_CLASSIFICATION	// a Collection containing a NaN will return Double.NaN for the result
WITHOUT_CLASSIFICATION	// check null list
WITHOUT_CLASSIFICATION	// check empty list
WITHOUT_CLASSIFICATION	// check list containing null
WITHOUT_CLASSIFICATION	// try zero length array
WITHOUT_CLASSIFICATION	// try single value
WITHOUT_CLASSIFICATION	// locale shouldn't matter here
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try deleting a time period that doesn't exist...
WITHOUT_CLASSIFICATION	// try deleting null
WITHOUT_CLASSIFICATION	// copy a range before the start of the series data...
WITHOUT_CLASSIFICATION	// copy a range that includes only the first item in the series...
WITHOUT_CLASSIFICATION	// copy a range that begins before and ends in the middle of the // series...
WITHOUT_CLASSIFICATION	// copy just the first item...
WITHOUT_CLASSIFICATION	// copy the first two items...
WITHOUT_CLASSIFICATION	// copy the middle three items...
WITHOUT_CLASSIFICATION	// copy the last two items...
WITHOUT_CLASSIFICATION	// copy the last item...
WITHOUT_CLASSIFICATION	// check negative first argument
WITHOUT_CLASSIFICATION	/* TimeSeries result = */
WITHOUT_CLASSIFICATION	/* TimeSeries result = */
WITHOUT_CLASSIFICATION	// check second argument less than first argument
WITHOUT_CLASSIFICATION	// changing the overwritten record shouldn't affect the series
WITHOUT_CLASSIFICATION	// changing the item that was added should not change the series
WITHOUT_CLASSIFICATION	// can't get anything yet...just an exception
WITHOUT_CLASSIFICATION	/*TimeSeriesDataItem item =*/
WITHOUT_CLASSIFICATION	/*item = */
WITHOUT_CLASSIFICATION	/* TimeSeriesDataItem item = */
WITHOUT_CLASSIFICATION	// test empty series
WITHOUT_CLASSIFICATION	// test series with one item
WITHOUT_CLASSIFICATION	// test series with two items
WITHOUT_CLASSIFICATION	// milliseconds somewhere in 2006
WITHOUT_CLASSIFICATION	// test a series with 1 item
WITHOUT_CLASSIFICATION	// test a series with two items
WITHOUT_CLASSIFICATION	// this line triggers the defect
WITHOUT_CLASSIFICATION	// check that removing by index also works
WITHOUT_CLASSIFICATION	// null items are ignored
WITHOUT_CLASSIFICATION	// if there are only null items, we get a NaNRange
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// test 3...
WITHOUT_CLASSIFICATION	// test 1...
WITHOUT_CLASSIFICATION	// test 1...
WITHOUT_CLASSIFICATION	// domain description - null
WITHOUT_CLASSIFICATION	// test 2...
WITHOUT_CLASSIFICATION	// a null item should throw an IllegalArgumentException
WITHOUT_CLASSIFICATION	/*Quarter q =*/
WITHOUT_CLASSIFICATION	/*Quarter q =*/
WITHOUT_CLASSIFICATION	// range description
WITHOUT_CLASSIFICATION	// domain description
WITHOUT_CLASSIFICATION	// check dataset with one time period
WITHOUT_CLASSIFICATION	// check empty dataset
WITHOUT_CLASSIFICATION	// range description - null
WITHOUT_CLASSIFICATION	// check dataset with one time period
WITHOUT_CLASSIFICATION	// check empty dataset
WITHOUT_CLASSIFICATION	// add a fourth time period
WITHOUT_CLASSIFICATION	// add a third time period
WITHOUT_CLASSIFICATION	// check dataset with two time periods
WITHOUT_CLASSIFICATION	// check dataset with two time periods
WITHOUT_CLASSIFICATION	// first day of week is Sunday
WITHOUT_CLASSIFICATION	// first day of week is monday
WITHOUT_CLASSIFICATION	// try null zone
WITHOUT_CLASSIFICATION	// add series to collection 1, should be not equal
WITHOUT_CLASSIFICATION	// newly created collections should be equal
WITHOUT_CLASSIFICATION	// now add the same series to collection 2 to make them equal again...
WITHOUT_CLASSIFICATION	// now remove series 2 from collection 2
WITHOUT_CLASSIFICATION	// now remove series 2 from collection 1 to make them equal again
WITHOUT_CLASSIFICATION	// for a series with no data, we expect {-1, -1}...
WITHOUT_CLASSIFICATION	// now test with a single value in the series...
WITHOUT_CLASSIFICATION	// now add a second value to the series...
WITHOUT_CLASSIFICATION	// now add a third value to the series...
WITHOUT_CLASSIFICATION	/* TimeSeries s = */
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// store the current time zone
WITHOUT_CLASSIFICATION	// restore the default time zone
WITHOUT_CLASSIFICATION	// when the dataset contains no series, we expect the range to be null
WITHOUT_CLASSIFICATION	// tests with values
WITHOUT_CLASSIFICATION	// adding a second series
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// x
WITHOUT_CLASSIFICATION	// y
WITHOUT_CLASSIFICATION	// period
WITHOUT_CLASSIFICATION	// autoSort
WITHOUT_CLASSIFICATION	// autoSort
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// add an empty series
WITHOUT_CLASSIFICATION	// locale shouldn't matter here
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// test 1...
WITHOUT_CLASSIFICATION	// test 1...
WITHOUT_CLASSIFICATION	// test 1...
WITHOUT_CLASSIFICATION	// test 2...
WITHOUT_CLASSIFICATION	// test 2...
WITHOUT_CLASSIFICATION	// test 2...
WITHOUT_CLASSIFICATION	// test 3...
WITHOUT_CLASSIFICATION	// test 3...
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// now test that the clone is independent of the original
WITHOUT_CLASSIFICATION	// Make sure there's nothing left
WITHOUT_CLASSIFICATION	// seriesKey
WITHOUT_CLASSIFICATION	// seriesKey
WITHOUT_CLASSIFICATION	// the moving average series has 7 items, the first three // days (11, 12, 13 August are skipped)
WITHOUT_CLASSIFICATION	// add a series
WITHOUT_CLASSIFICATION	// seriesKey
WITHOUT_CLASSIFICATION	/* XYSeries s = */
WITHOUT_CLASSIFICATION	// remove a value
WITHOUT_CLASSIFICATION	// remove a value
WITHOUT_CLASSIFICATION	// remove a value
WITHOUT_CLASSIFICATION	// and check the first series too...
WITHOUT_CLASSIFICATION	// now add another series
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	// yLow
WITHOUT_CLASSIFICATION	// allowDuplicateValues
WITHOUT_CLASSIFICATION	// allowDuplicateValues
WITHOUT_CLASSIFICATION	// check for series key out of bounds
WITHOUT_CLASSIFICATION	// yHigh
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// x
WITHOUT_CLASSIFICATION	// y
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// autoSort
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// try a dataset with some content...
WITHOUT_CLASSIFICATION	// check that the clone doesn't share the same underlying arrays.
WITHOUT_CLASSIFICATION	// check that the clone doesn't share the same underlying arrays.
WITHOUT_CLASSIFICATION	// add an empty series
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// tests with values
WITHOUT_CLASSIFICATION	// seriesKey
WITHOUT_CLASSIFICATION	// remove a value
WITHOUT_CLASSIFICATION	// add a series
WITHOUT_CLASSIFICATION	/* XYSeries s = */
WITHOUT_CLASSIFICATION	/* XYSeries s = */
WITHOUT_CLASSIFICATION	// and check the first series too...
WITHOUT_CLASSIFICATION	// allowDuplicateValues
WITHOUT_CLASSIFICATION	// check for series key out of bounds
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	// check that adding a series will overwrite the old series
WITHOUT_CLASSIFICATION	// check that adding a series will overwrite the old series
WITHOUT_CLASSIFICATION	// check that adding a series will overwrite the old series
WITHOUT_CLASSIFICATION	// check null key
WITHOUT_CLASSIFICATION	// check null key
WITHOUT_CLASSIFICATION	// check null key
WITHOUT_CLASSIFICATION	// try an index out of bounds
WITHOUT_CLASSIFICATION	// now add some more data
WITHOUT_CLASSIFICATION	// xLow
WITHOUT_CLASSIFICATION	// xHigh
WITHOUT_CLASSIFICATION	// first check that a valid renaming works
WITHOUT_CLASSIFICATION	// next, check that setting a duplicate key fails
WITHOUT_CLASSIFICATION	// create an array of items in reverse order
WITHOUT_CLASSIFICATION	// got the required exception
WITHOUT_CLASSIFICATION	// set a theme using the new shadow generator feature available in // 1.0.14 - for backwards compatibility it is not enabled by default
WITHOUT_CLASSIFICATION	// call parent method // setup flag based on bounds values
WITHOUT_CLASSIFICATION	//if flag then change to log version of lowest value // to make range begin at a 10^n value:
WITHOUT_CLASSIFICATION	//if less than 1.0 then make it 1.0 //add in margin and get exponential value:
WITHOUT_CLASSIFICATION	//negatives not allowed and upper bound between 0 & 1 //round up to nearest significant digit for bound: //get negative exponent:
WITHOUT_CLASSIFICATION	//not first tick to be displayed //no tick label
WITHOUT_CLASSIFICATION	// check independence
WITHOUT_CLASSIFICATION	// x
WITHOUT_CLASSIFICATION	// y
WITHOUT_CLASSIFICATION	// default instances
WITHOUT_CLASSIFICATION	// TBLRC // 00000 - no items
WITHOUT_CLASSIFICATION	// try a few checks to ensure that the clone is independent of the // original
WITHOUT_CLASSIFICATION	// autoSort
WITHOUT_CLASSIFICATION	// add a value
WITHOUT_CLASSIFICATION	// add another value
WITHOUT_CLASSIFICATION	// add an empty series
WITHOUT_CLASSIFICATION	// now we should be allowed to change s1's key to anything but "S2"
WITHOUT_CLASSIFICATION	// after s1 is removed from the collection, we should be able to set // the key to anything we want...
WITHOUT_CLASSIFICATION	// check that removing by index also works
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// remove a value
WITHOUT_CLASSIFICATION	// add a series
WITHOUT_CLASSIFICATION	/* XYSeries s = */
WITHOUT_CLASSIFICATION	// yLow
WITHOUT_CLASSIFICATION	// yHigh
WITHOUT_CLASSIFICATION	// xLow
WITHOUT_CLASSIFICATION	// xHigh
WITHOUT_CLASSIFICATION	// when the dataset contains no series, we expect the value range to  // be null
WITHOUT_CLASSIFICATION	// when the dataset contains one or more series, but those series  // contain no items, we expect the value range to be null
WITHOUT_CLASSIFICATION	// the series name should not  // change because "C" is already the key for the other series in the // collection
WITHOUT_CLASSIFICATION	//  Test that there are 6 X points and some specific values
WITHOUT_CLASSIFICATION	// after adding a point to a series, check that there are now 7 // items in each series
WITHOUT_CLASSIFICATION	//  Remove series 1
WITHOUT_CLASSIFICATION	//  Test that there are still 7 X points
WITHOUT_CLASSIFICATION	//  Remove series 2 and add new series
WITHOUT_CLASSIFICATION	//  Test that there are now 4 X points
WITHOUT_CLASSIFICATION	// WITH AUTOPRUNING
WITHOUT_CLASSIFICATION	// should be 2 items
WITHOUT_CLASSIFICATION	// should be 2 items
WITHOUT_CLASSIFICATION	// still 2
WITHOUT_CLASSIFICATION	// still 2
WITHOUT_CLASSIFICATION	// 1 value pruned.
WITHOUT_CLASSIFICATION	// WITHOUT AUTOPRUNING
WITHOUT_CLASSIFICATION	// still 2.
WITHOUT_CLASSIFICATION	// ****************************************************************** //  More than 150 demo applications are included with the JFreeChart //  Developer Guide...for more information, see: // //  >   http://www.object-refinery.com/jfreechart/guide.html // // ******************************************************************
WITHOUT_CLASSIFICATION	// here we do a check to see if the user is installing the "Legacy" // theme, and reset the bar painters in that case...
WITHOUT_CLASSIFICATION	// since the flow layout is relatively straightforward, // no information needs to be recorded here
WITHOUT_CLASSIFICATION	// nothing is drawn if the row index is not included in the list with // the indices of the visible rows...
WITHOUT_CLASSIFICATION	// calculate the bar width - this calculation differs from the // BarRenderer calculation because the bars are layered on top of one // another, so there is effectively only one bar per category for // the purpose of the bar width calculation
WITHOUT_CLASSIFICATION	// the link area defines the dog leg points for the linking lines to // the labels
WITHOUT_CLASSIFICATION	// if the current stroke is not a BasicStroke then it is handled as // a special case
WITHOUT_CLASSIFICATION	// after setting up all the subplots, the shared range axis may need // reconfiguring
WITHOUT_CLASSIFICATION	// if there is an existing dataset, remove the plot from the list of // change listeners...
WITHOUT_CLASSIFICATION	// the segment is entirely at the // front of the chart
WITHOUT_CLASSIFICATION	// starts at back and wraps right around to the // back again
WITHOUT_CLASSIFICATION	// if the source point doesn't fall within a subplot, we do the // zoom on all subplots...
WITHOUT_CLASSIFICATION	//  double range = this.domainAxis.getRange().getLength(); //  double scaledRange = range * percent; //  domainAxis.setAnchoredRange(scaledRange);
WITHOUT_CLASSIFICATION	// the anchor point is typically the point where the mouse last // clicked - the crosshairs will be driven off this point...
WITHOUT_CLASSIFICATION	// axisIndices can be: // 1.  null; // 2.  non-empty, containing only Integer objects that are unique.
WITHOUT_CLASSIFICATION	// if this cell held a maximum and/or minimum value, we'll need to // update the cached bounds...
WITHOUT_CLASSIFICATION	// if the 'notify' flag has been switched to false, we don't notify // the listeners
WITHOUT_CLASSIFICATION	// private Plot parent <-- don't clone the parent plot, but take care // childs in combined plots instead
WITHOUT_CLASSIFICATION	// For the case were the first tick is greater // than minZ
WITHOUT_CLASSIFICATION	// add an entity for the item, but only if it falls within the // data area...
WITHOUT_CLASSIFICATION	// we create an event with a special flag set...the purpose of // this is to communicate to the plot (the default receiver of // the event) that series visibility has changed so the axis // ranges might need updating...
WITHOUT_CLASSIFICATION	// when the x-values are sorted in descending order, the lower // bound is found by calculating relative to the xHigh value
WITHOUT_CLASSIFICATION	// nothing is drawn if the row index is not included in the list with // the indices of the visible rows...
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// nothing is drawn if the row index is not included in the list with // the indices of the visible rows...
WITHOUT_CLASSIFICATION	/////////////////////////////////////////////////////////////////////////// // From HighLowDataset ///////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
WITHOUT_CLASSIFICATION	// handle a special case - if the bar colour has alpha == 0, it is // invisible so we shouldn't draw any shadow
WITHOUT_CLASSIFICATION	// if the dataset is not a StatisticalCategoryDataset then just revert // to the superclass (LineAndShapeRenderer) behaviour...
WITHOUT_CLASSIFICATION	// FIXME: add setSeriesToolTipGenerator(int, CategoryToolTipGenerator, //            boolean) ?
WITHOUT_CLASSIFICATION	// average radius // outlier radius
WITHOUT_CLASSIFICATION	// false preserves the old behaviour // prior to introducing this flag
WITHOUT_CLASSIFICATION	// These are deliberately not bounded to minimums/maxCandleWidth to //  retain old behaviour.
WITHOUT_CLASSIFICATION	// the noCodeBaseClassLoader is configured by a call to the // removeCodeBase() method, typically in the init() method of an // applet...
WITHOUT_CLASSIFICATION	// the noCodeBaseClassLoader is configured by a call to the // removeCodeBase() method, typically in the init() method of an // applet...
WITHOUT_CLASSIFICATION	// deregister the collection as a change listener to each series in // the collection.
WITHOUT_CLASSIFICATION	// handle the special case where the dataset has y-intervals that // we want to measure
WITHOUT_CLASSIFICATION	// CASE 3 : Comparing to a non-TimePeriod object // ---------------------------------------------
WITHOUT_CLASSIFICATION	// CASE 1 : Comparing to another Second object // -------------------------------------------
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// end period is not in original series // this is first item AFTER end period // so this is last item BEFORE end
WITHOUT_CLASSIFICATION	// the first initialization must precede creation of the ValueSet array: // establishes length of each array
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// here we check that the average marker will in fact be // visible before drawing it...
WITHOUT_CLASSIFICATION	// draw outliers // outlier radius
WITHOUT_CLASSIFICATION	// NULL value -> insert point on base line // instead of 'step point'
WITHOUT_CLASSIFICATION	// coordinate pairs // current minuend point // next minuend point // current subtrahend point // next subtrahend point
WITHOUT_CLASSIFICATION	// the intersect is at the next point for both the minuend // and subtrahend
WITHOUT_CLASSIFICATION	// create the polygon // add the minuend's points to polygon
WITHOUT_CLASSIFICATION	// the following code handles the line for the y-values...it's // all done by code in the super class
WITHOUT_CLASSIFICATION	// Check if the item is the last item for the series and number of // items > 0.  We can't draw an area for a single point.
WITHOUT_CLASSIFICATION	// use item paint for outlines by // default, not outline paint
WITHOUT_CLASSIFICATION	// add an entity for the item, but only if it falls within the data // area...
WITHOUT_CLASSIFICATION	// the bounds should be calculated using just the items within // the current range of the x-axis...if there is one
WITHOUT_CLASSIFICATION	// We organise the data with the following assumption: // 1) the data are sorted by x then y // 2) that the data will be represented by a rectangle formed by //    using x[i+1], x, y[j+1], and y. // 3) we march along the y-axis at the same value of x until a new //    value x is found at which point we will flag the index //    where x[i+1]<>x[i]
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// create the new color and set it to the // SwtPaintCanvas
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// we're doing this for testing only, and make sure that we // only add data in ascending order by x-value
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// try null calendar
WITHOUT_CLASSIFICATION	// have to use a subclass of // AbstractRenderer
WITHOUT_CLASSIFICATION	// include legend // tooltips // urls
WITHOUT_CLASSIFICATION	// setup our test timelines // // Legend for comments below: // <spaces> = Segments included in the final timeline // EE       = Excluded segments via timeline rules // xx       = Exception segments inherited from base timeline exclusions
WITHOUT_CLASSIFICATION	////////////////////////////////////////////////////////////////////////// // test exception segments //////////////////////////////////////////////////////////////////////////
WITHOUT_CLASSIFICATION	// we use ValueMarker for the tests, because we need a concrete // subclass...
WITHOUT_CLASSIFICATION	// now check that all datasets, renderers and axes are being listened // too...
WITHOUT_CLASSIFICATION	// now check that all datasets, renderers and axes are being listened // too...
WITHOUT_CLASSIFICATION	// after clearing, reverts to // default group
WITHOUT_CLASSIFICATION	// regular equality for the datasets doesn't check the fields, just // the data values...so let's check some more things...
WITHOUT_CLASSIFICATION	// these methods should throw an IndexOutOfBoundsException since the // column is too high...
WITHOUT_CLASSIFICATION	// this replaces the entry with the current minimum value, but the new // minimum value is now in a different item
WITHOUT_CLASSIFICATION	// the dataset should prevent the addition of a series with the // same name as an existing series in the dataset
WITHOUT_CLASSIFICATION	/*item = */
WITHOUT_CLASSIFICATION	// test empty series
WITHOUT_CLASSIFICATION	// now we should be allowed to change s1's key to anything but "S2"
WITHOUT_CLASSIFICATION	// after s1 is removed from the collection, we should be able to set // the key to anything we want...
WITHOUT_CLASSIFICATION	// locale should not matter here
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// correct outcome
WITHOUT_CLASSIFICATION	// wrong outcome
WITHOUT_CLASSIFICATION	// when the dataset contains one or more series, but those series // contain no items, we still expect the range to be null
WITHOUT_CLASSIFICATION	// tests with values
WITHOUT_CLASSIFICATION	// tests with values
WITHOUT_CLASSIFICATION	// seriesKey
WITHOUT_CLASSIFICATION	// open
WITHOUT_CLASSIFICATION	// add a series
WITHOUT_CLASSIFICATION	// allowDuplicateValues
WITHOUT_CLASSIFICATION	// check for series key out of bounds
WITHOUT_CLASSIFICATION	// check for series key out of bounds
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	/*Comparable k =*/
WITHOUT_CLASSIFICATION	// when the dataset contains no series, we expect the value range to  // be null
WITHOUT_CLASSIFICATION	// when the dataset contains no series, we expect the value range to  // be null
WITHOUT_CLASSIFICATION	// when the dataset contains one or more series, but those series  // contain no items, we expect the value range to be null
WITHOUT_CLASSIFICATION	// when the dataset contains one or more series, but those series  // contain no items, we expect the value range to be null
WITHOUT_CLASSIFICATION	// complicate things a little...
WITHOUT_CLASSIFICATION	// seem to be the same...
WITHOUT_CLASSIFICATION	// what is our alignment?
WITHOUT_CLASSIFICATION	// what is our alignment?
WITHOUT_CLASSIFICATION	// seem to be the same...
WITHOUT_CLASSIFICATION	// slope
WITHOUT_CLASSIFICATION	// complicate things a little...
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusGained(     * org.eclipse.swt.events.FocusEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)     * @see org.eclipse.swt.events.FocusListener#focusLost(     * org.eclipse.swt.events.FocusEvent)     */
WITHOUT_CLASSIFICATION	/* (non-Javadoc)         * @see org.jfree.chart.axis.LogarithmicAxis#switchedLog10(double)         */
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// expected
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// ignore
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	//}
WITHOUT_CLASSIFICATION	// find out where to place the label...
WITHOUT_CLASSIFICATION	// find out where to place the label...
WITHOUT_CLASSIFICATION	// Anwender hat abgebrochen.
WITHOUT_CLASSIFICATION	// insets
WITHOUT_CLASSIFICATION	// insets
WITHOUT_CLASSIFICATION	// ...but this does!
WITHOUT_CLASSIFICATION	// insets
WITHOUT_CLASSIFICATION	// check defaults
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// do nothing
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// nothing to do
WITHOUT_CLASSIFICATION	// OK
DEFECT	// FIXME: we've cloned the chart, but the dataset(s) aren't cloned // and we should do that
DEFECT	// todo: not serialized yet
DEFECT	// FIRST_MONDAY_AFTER_1900 = cal.getTime().getTime(); // preceding code won't work with JDK 1.3
DEFECT	// TODO: we didn't check the height yet
DEFECT	// TODO: we didn't check the height yet
DEFECT	// TODO: Check this result...
DEFECT	// TODO: Check this result...
DEFECT	//return cal.getTimeInMillis(); // preceding code won't work with JDK 1.3
DEFECT	// result = this.workingCalendar.getTimeInMillis(); // preceding code won't work with JDK 1.3
