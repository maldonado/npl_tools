//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999440522280516	WITHOUT_CLASSIFICATION	5.594777194843897E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9998351379648877	WITHOUT_CLASSIFICATION	1.6486203511229414E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999955983930761	WITHOUT_CLASSIFICATION	4.401606923921029E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999950574183675	WITHOUT_CLASSIFICATION	4.942581632510216E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999965378403722	WITHOUT_CLASSIFICATION	3.4621596277543856E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999965378403722	WITHOUT_CLASSIFICATION	3.4621596277543856E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984927090622	WITHOUT_CLASSIFICATION	1.5072909377889938E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976556977699	WITHOUT_CLASSIFICATION	2.3443022300757484E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999977265456912	WITHOUT_CLASSIFICATION	2.273454308883539E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999996229527116	WITHOUT_CLASSIFICATION	3.7704728841065572E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999948049501752	WITHOUT_CLASSIFICATION	5.19504982486942E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999948049501752	WITHOUT_CLASSIFICATION	5.19504982486942E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999969393927847	WITHOUT_CLASSIFICATION	3.0606072152319888E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999844643551082	WITHOUT_CLASSIFICATION	1.5535644891822943E-5	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999940576598146	WITHOUT_CLASSIFICATION	5.942340185429181E-6	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999993178723814	WITHOUT_CLASSIFICATION	6.82127618602104E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999795633176916	WITHOUT_CLASSIFICATION	2.0436682308493527E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582406214791	WITHOUT_CLASSIFICATION	4.17593785208597E-5	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999543384737644	WITHOUT_CLASSIFICATION	4.566152623561325E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999347369573556	WITHOUT_CLASSIFICATION	6.526304264443506E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998928047262816	WITHOUT_CLASSIFICATION	1.0719527371846186E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.998530943242133	WITHOUT_CLASSIFICATION	0.001469056757866989	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999241565579305	WITHOUT_CLASSIFICATION	7.584344206942989E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999601769887891	WITHOUT_CLASSIFICATION	3.982301121082827E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999965499634426	WITHOUT_CLASSIFICATION	3.4500365575173787E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999500437125951	WITHOUT_CLASSIFICATION	4.99562874049687E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999500437125951	WITHOUT_CLASSIFICATION	4.99562874049687E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996996028687	WITHOUT_CLASSIFICATION	3.003971313631034E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999040553407108	WITHOUT_CLASSIFICATION	9.594465928919411E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999945989443527	WITHOUT_CLASSIFICATION	5.401055647262266E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999993553814475	WITHOUT_CLASSIFICATION	6.44618552421851E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9997954537218834	WITHOUT_CLASSIFICATION	2.0454627811657776E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9985635519192122	WITHOUT_CLASSIFICATION	0.0014364480807878054	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9985635519192122	WITHOUT_CLASSIFICATION	0.0014364480807878054	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999997500745683	WITHOUT_CLASSIFICATION	2.499254317453757E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9992632599493532	WITHOUT_CLASSIFICATION	7.367400506469393E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999980692122756	WITHOUT_CLASSIFICATION	1.930787724344674E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999758847336501	WITHOUT_CLASSIFICATION	2.4115266349947525E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999941809987462	WITHOUT_CLASSIFICATION	5.8190012539639835E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947348858604	WITHOUT_CLASSIFICATION	5.2651141395852425E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953093831493	WITHOUT_CLASSIFICATION	4.69061685073801E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999992287776461	WITHOUT_CLASSIFICATION	7.712223538670983E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999476388537252	WITHOUT_CLASSIFICATION	5.236114627490354E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999991076997814	WITHOUT_CLASSIFICATION	8.923002185693791E-7	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999830804099106	WITHOUT_CLASSIFICATION	1.6919590089360264E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999476388537252	WITHOUT_CLASSIFICATION	5.236114627490354E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999830804099106	WITHOUT_CLASSIFICATION	1.6919590089360264E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999989461659469	WITHOUT_CLASSIFICATION	1.0538340531246796E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999692188552199	WITHOUT_CLASSIFICATION	3.0781144780089605E-5	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997939128576	WITHOUT_CLASSIFICATION	2.060871423608453E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999829620728166	WITHOUT_CLASSIFICATION	1.7037927183389598E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999920934717071	WITHOUT_CLASSIFICATION	7.906528292802496E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999998976899487	WITHOUT_CLASSIFICATION	1.0231005134661795E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999975805858339	WITHOUT_CLASSIFICATION	2.4194141660266112E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999478834213535	WITHOUT_CLASSIFICATION	5.211657864657529E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999989870468569	WITHOUT_CLASSIFICATION	1.0129531432097119E-6	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998318586003953	WITHOUT_CLASSIFICATION	1.6814139960476417E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999974320337741	WITHOUT_CLASSIFICATION	2.5679662258609734E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999957900710692	WITHOUT_CLASSIFICATION	4.209928930862084E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999783429386694	WITHOUT_CLASSIFICATION	2.1657061330560838E-5	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999414356650013	WITHOUT_CLASSIFICATION	5.856433499874991E-5	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999967532981712	WITHOUT_CLASSIFICATION	3.2467018288323344E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999998420768828	WITHOUT_CLASSIFICATION	1.5792311727548267E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999921991404688	WITHOUT_CLASSIFICATION	7.800859531220463E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999997317386242	WITHOUT_CLASSIFICATION	2.6826137580172516E-7	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995450416084	WITHOUT_CLASSIFICATION	4.549583916529074E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999994664793552	WITHOUT_CLASSIFICATION	5.335206448482614E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999982580090125	WITHOUT_CLASSIFICATION	1.7419909874105338E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9989146739618895	WITHOUT_CLASSIFICATION	0.0010853260381104683	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999965576596639	WITHOUT_CLASSIFICATION	3.442340336085808E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971973289727	WITHOUT_CLASSIFICATION	2.80267102736389E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999964961481851	WITHOUT_CLASSIFICATION	3.5038518148795954E-6	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999989980162011	WITHOUT_CLASSIFICATION	1.0019837989017123E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999624360241	WITHOUT_CLASSIFICATION	3.756397596697828E-8	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999978902475049	WITHOUT_CLASSIFICATION	2.1097524950629344E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999993429376937	WITHOUT_CLASSIFICATION	6.570623063653401E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999859264513495	WITHOUT_CLASSIFICATION	1.4073548650509927E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999567221093013	WITHOUT_CLASSIFICATION	4.3277890698688544E-5	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999927477273317	WITHOUT_CLASSIFICATION	7.252272668320423E-6	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999463624983241	WITHOUT_CLASSIFICATION	5.3637501675898145E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999974739757862	WITHOUT_CLASSIFICATION	2.526024213741636E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999923197109732	WITHOUT_CLASSIFICATION	7.680289026778543E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995232125732	WITHOUT_CLASSIFICATION	4.767874267637675E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999974739757862	WITHOUT_CLASSIFICATION	2.526024213741636E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999980002871105	WITHOUT_CLASSIFICATION	1.999712889506984E-5	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9994462709705617	WITHOUT_CLASSIFICATION	5.537290294382308E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999846404556769	WITHOUT_CLASSIFICATION	1.5359544323090904E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999876791688083	WITHOUT_CLASSIFICATION	1.23208311917096E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999935287319215	WITHOUT_CLASSIFICATION	6.471268078443217E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996826200995	WITHOUT_CLASSIFICATION	3.173799004798879E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996826200995	WITHOUT_CLASSIFICATION	3.173799004798879E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999874746933092	WITHOUT_CLASSIFICATION	1.2525306690866037E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999991162284826	WITHOUT_CLASSIFICATION	8.837715172642912E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999875201381653	WITHOUT_CLASSIFICATION	1.2479861834756459E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999989832992818	WITHOUT_CLASSIFICATION	1.0167007182168442E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999993108616463	WITHOUT_CLASSIFICATION	6.891383537444127E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999993747565038	WITHOUT_CLASSIFICATION	6.252434962571692E-7	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999912125411093	WITHOUT_CLASSIFICATION	8.787458890727437E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999871401596891	WITHOUT_CLASSIFICATION	1.285984031083621E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999995944154612	WITHOUT_CLASSIFICATION	4.0558453882995995E-7	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999988386867469	WITHOUT_CLASSIFICATION	1.1613132531312513E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987985493954	WITHOUT_CLASSIFICATION	1.2014506045355142E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987985493954	WITHOUT_CLASSIFICATION	1.2014506045355142E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999212117444	WITHOUT_CLASSIFICATION	7.878825558793077E-7	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999989058848127	WITHOUT_CLASSIFICATION	1.0941151873686295E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999967314460935	WITHOUT_CLASSIFICATION	3.2685539065587468E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999987985493954	WITHOUT_CLASSIFICATION	1.2014506045355142E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999212117444	WITHOUT_CLASSIFICATION	7.878825558793077E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.999999212117444	WITHOUT_CLASSIFICATION	7.878825558793077E-7	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999997132116789	WITHOUT_CLASSIFICATION	2.867883211827415E-7	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999988646216635	WITHOUT_CLASSIFICATION	1.1353783364714794E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999983902850696	WITHOUT_CLASSIFICATION	1.609714930300245E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999998438068012	WITHOUT_CLASSIFICATION	1.5619319881740263E-7	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999907262642818	WITHOUT_CLASSIFICATION	9.273735718298184E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999907262642818	WITHOUT_CLASSIFICATION	9.273735718298184E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999941701787565	WITHOUT_CLASSIFICATION	5.829821243589497E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999898985366753	WITHOUT_CLASSIFICATION	1.0101463324828377E-5	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999905990809044	WITHOUT_CLASSIFICATION	9.400919095634172E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997438442159	WITHOUT_CLASSIFICATION	2.561557841845623E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997438442159	WITHOUT_CLASSIFICATION	2.561557841845623E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999950637354311	WITHOUT_CLASSIFICATION	4.936264568872411E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974153070729	WITHOUT_CLASSIFICATION	2.58469292708832E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999956777606814	WITHOUT_CLASSIFICATION	4.3222393184894525E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999787862291207	WITHOUT_CLASSIFICATION	2.121377087933331E-5	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999976015027741	WITHOUT_CLASSIFICATION	2.398497225832554E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999172833746	WITHOUT_CLASSIFICATION	8.271662549244214E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999976375261953	WITHOUT_CLASSIFICATION	2.362473804774403E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999997237599656	WITHOUT_CLASSIFICATION	2.762400344974758E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999800082275085	WITHOUT_CLASSIFICATION	1.999177249151019E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999956777606814	WITHOUT_CLASSIFICATION	4.3222393184894525E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999774323747453	WITHOUT_CLASSIFICATION	2.2567625254680932E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825580262505	WITHOUT_CLASSIFICATION	1.7441973749618198E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825580262505	WITHOUT_CLASSIFICATION	1.7441973749618198E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999449200405737	WITHOUT_CLASSIFICATION	5.5079959426307185E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999780228047788	WITHOUT_CLASSIFICATION	2.1977195221300158E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999986160803417	WITHOUT_CLASSIFICATION	1.383919658316772E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999848240482683	WITHOUT_CLASSIFICATION	1.51759517317703E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999748380336073	WITHOUT_CLASSIFICATION	2.5161966392775714E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999839766485193	WITHOUT_CLASSIFICATION	1.6023351480599565E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.999951247888414	WITHOUT_CLASSIFICATION	4.8752111585859385E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999992588046249	WITHOUT_CLASSIFICATION	7.411953751866211E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998102361793	WITHOUT_CLASSIFICATION	1.8976382076229843E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999998102361793	WITHOUT_CLASSIFICATION	1.8976382076229843E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999440522280516	WITHOUT_CLASSIFICATION	5.594777194843897E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999975803551039	WITHOUT_CLASSIFICATION	2.4196448961271954E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999972415163099	WITHOUT_CLASSIFICATION	2.758483690061147E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999992968751058	WITHOUT_CLASSIFICATION	7.031248941984297E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999921300653071	WITHOUT_CLASSIFICATION	7.869934693023156E-6	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999921894957338	WITHOUT_CLASSIFICATION	7.810504266173807E-6	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999936687764055	WITHOUT_CLASSIFICATION	6.331223594505398E-6	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999810126320504	WITHOUT_CLASSIFICATION	1.898736794954256E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999878390382029	WITHOUT_CLASSIFICATION	1.216096179716399E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999901374832696	WITHOUT_CLASSIFICATION	9.862516730469443E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999968348337993	WITHOUT_CLASSIFICATION	3.1651662007074563E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999955983930761	WITHOUT_CLASSIFICATION	4.401606923921029E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951823111899	WITHOUT_CLASSIFICATION	4.81768881005115E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951823111899	WITHOUT_CLASSIFICATION	4.81768881005115E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999938913952023	WITHOUT_CLASSIFICATION	6.108604797727325E-6	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999451033663052	WITHOUT_CLASSIFICATION	5.489663369481983E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999983071268824	WITHOUT_CLASSIFICATION	1.692873117501621E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998372968654268	WITHOUT_CLASSIFICATION	1.6270313457326157E-4	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999936292824129	WITHOUT_CLASSIFICATION	6.370717587132893E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999963466700585	WITHOUT_CLASSIFICATION	3.653329941436981E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999965378403722	WITHOUT_CLASSIFICATION	3.4621596277543856E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995356413253	WITHOUT_CLASSIFICATION	4.643586746723823E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999735861239102	WITHOUT_CLASSIFICATION	2.64138760897493E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999996341562868	WITHOUT_CLASSIFICATION	3.6584371320756417E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999944598484911	WITHOUT_CLASSIFICATION	5.540151508962872E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999752147735501	WITHOUT_CLASSIFICATION	2.4785226449969894E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999912783372626	WITHOUT_CLASSIFICATION	8.721662737319418E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999952141221947	WITHOUT_CLASSIFICATION	4.785877805306979E-6	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999990454785648	WITHOUT_CLASSIFICATION	9.5452143516676E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.999999583669797	WITHOUT_CLASSIFICATION	4.163302029401851E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999965157518089	WITHOUT_CLASSIFICATION	3.4842481911445064E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999992214718308	WITHOUT_CLASSIFICATION	7.785281690664934E-7	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999987070864408	WITHOUT_CLASSIFICATION	1.2929135592497198E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999914035740821	WITHOUT_CLASSIFICATION	8.596425917906106E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999901374832696	WITHOUT_CLASSIFICATION	9.862516730469443E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951823111899	WITHOUT_CLASSIFICATION	4.81768881005115E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999952141221947	WITHOUT_CLASSIFICATION	4.785877805306979E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999984927090622	WITHOUT_CLASSIFICATION	1.5072909377889938E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999970771588682	WITHOUT_CLASSIFICATION	2.9228411318705457E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999996938536764	WITHOUT_CLASSIFICATION	3.0614632361408415E-6	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999979046592053	WITHOUT_CLASSIFICATION	2.0953407946285823E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999669104498945	WITHOUT_CLASSIFICATION	3.308955010551211E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999949795957125	WITHOUT_CLASSIFICATION	5.0204042875185335E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999851492235332	WITHOUT_CLASSIFICATION	1.485077646674456E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999951633990721	WITHOUT_CLASSIFICATION	4.836600927822987E-6	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999476562402541	WITHOUT_CLASSIFICATION	5.234375974586645E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999905426541393	WITHOUT_CLASSIFICATION	9.457345860694111E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999916662280213	WITHOUT_CLASSIFICATION	8.333771978700278E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999916662280213	WITHOUT_CLASSIFICATION	8.333771978700278E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999134275993588	WITHOUT_CLASSIFICATION	8.657240064126968E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999943931279007	WITHOUT_CLASSIFICATION	5.6068720993015075E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.999964351769799	WITHOUT_CLASSIFICATION	3.564823020096858E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999919895330149	WITHOUT_CLASSIFICATION	8.010466985031942E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998792247368968	WITHOUT_CLASSIFICATION	1.2077526310319381E-4	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999986552720332	WITHOUT_CLASSIFICATION	1.3447279667780364E-6	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999824497725112	WITHOUT_CLASSIFICATION	1.7550227488775765E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999976556977699	WITHOUT_CLASSIFICATION	2.3443022300757484E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999863480065111	WITHOUT_CLASSIFICATION	1.365199348899914E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999891651977221	WITHOUT_CLASSIFICATION	1.0834802277811703E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999891651977221	WITHOUT_CLASSIFICATION	1.0834802277811703E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999942809553721	WITHOUT_CLASSIFICATION	5.7190446279695885E-6	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999977042574777	WITHOUT_CLASSIFICATION	2.2957425221800057E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999956638116803	WITHOUT_CLASSIFICATION	4.3361883197074925E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999968843263762	WITHOUT_CLASSIFICATION	3.115673623884194E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999527395082568	WITHOUT_CLASSIFICATION	4.726049174308901E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999860203301981	WITHOUT_CLASSIFICATION	1.3979669801828203E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999901374832696	WITHOUT_CLASSIFICATION	9.862516730469443E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999955983930761	WITHOUT_CLASSIFICATION	4.401606923921029E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999952141221947	WITHOUT_CLASSIFICATION	4.785877805306979E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999952141221947	WITHOUT_CLASSIFICATION	4.785877805306979E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999985928073698	WITHOUT_CLASSIFICATION	1.4071926301529108E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999985928073698	WITHOUT_CLASSIFICATION	1.4071926301529108E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999990172943802	WITHOUT_CLASSIFICATION	9.82705619799023E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999937804369283	WITHOUT_CLASSIFICATION	6.219563071695335E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999937804369283	WITHOUT_CLASSIFICATION	6.219563071695335E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999914188576435	WITHOUT_CLASSIFICATION	8.581142356437608E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999828813694143	WITHOUT_CLASSIFICATION	1.71186305857796E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999953356110676	WITHOUT_CLASSIFICATION	4.664388932403096E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999955127961301	WITHOUT_CLASSIFICATION	4.4872038699752055E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999983805121192	WITHOUT_CLASSIFICATION	1.6194878808040579E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999996229527116	WITHOUT_CLASSIFICATION	3.7704728841065572E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999996229527116	WITHOUT_CLASSIFICATION	3.7704728841065572E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999593776859801	WITHOUT_CLASSIFICATION	4.062231401990726E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999970415054498	WITHOUT_CLASSIFICATION	2.9584945501092974E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999981734164576	WITHOUT_CLASSIFICATION	1.8265835424417978E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999850260573262	WITHOUT_CLASSIFICATION	1.4973942673847951E-5	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999937450826712	WITHOUT_CLASSIFICATION	6.254917328747705E-6	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999767473863658	WITHOUT_CLASSIFICATION	2.325261363421643E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999948049501752	WITHOUT_CLASSIFICATION	5.19504982486942E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999896216959592	WITHOUT_CLASSIFICATION	1.0378304040879897E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999896216959592	WITHOUT_CLASSIFICATION	1.0378304040879897E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999969393927847	WITHOUT_CLASSIFICATION	3.0606072152319888E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999969393927847	WITHOUT_CLASSIFICATION	3.0606072152319888E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999934997495632	WITHOUT_CLASSIFICATION	6.5002504368413015E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999934997495632	WITHOUT_CLASSIFICATION	6.5002504368413015E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996904231447	WITHOUT_CLASSIFICATION	3.0957685531545976E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996904231447	WITHOUT_CLASSIFICATION	3.0957685531545976E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999996229527116	WITHOUT_CLASSIFICATION	3.7704728841065572E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999948049501752	WITHOUT_CLASSIFICATION	5.19504982486942E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999896216959592	WITHOUT_CLASSIFICATION	1.0378304040879897E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999896216959592	WITHOUT_CLASSIFICATION	1.0378304040879897E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999969393927847	WITHOUT_CLASSIFICATION	3.0606072152319888E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999934997495632	WITHOUT_CLASSIFICATION	6.5002504368413015E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999934997495632	WITHOUT_CLASSIFICATION	6.5002504368413015E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999996904231447	WITHOUT_CLASSIFICATION	3.0957685531545976E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999917628254661	WITHOUT_CLASSIFICATION	8.237174533882226E-6	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999917493342719	WITHOUT_CLASSIFICATION	8.25066572801782E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999962384379707	WITHOUT_CLASSIFICATION	3.7615620292058035E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999964529090466	WITHOUT_CLASSIFICATION	3.5470909533423796E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999833654691576	WITHOUT_CLASSIFICATION	1.6634530842441E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999896876511297	WITHOUT_CLASSIFICATION	1.031234887016006E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999416591931155	WITHOUT_CLASSIFICATION	5.8340806884541435E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9997487580670623	WITHOUT_CLASSIFICATION	2.5124193293764687E-4	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999929628815397	WITHOUT_CLASSIFICATION	7.037118460249625E-6	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999507439870844	WITHOUT_CLASSIFICATION	4.925601291556332E-5	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999990394705612	WITHOUT_CLASSIFICATION	9.605294387510849E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999982635401339	WITHOUT_CLASSIFICATION	1.7364598660824795E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999874746933092	WITHOUT_CLASSIFICATION	1.2525306690866037E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999896876511297	WITHOUT_CLASSIFICATION	1.031234887016006E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.99990783923707	WITHOUT_CLASSIFICATION	9.216076292991377E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.99990783923707	WITHOUT_CLASSIFICATION	9.216076292991377E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999926056518237	WITHOUT_CLASSIFICATION	7.394348176203968E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991511517775	WITHOUT_CLASSIFICATION	8.488482226080144E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999991511517775	WITHOUT_CLASSIFICATION	8.488482226080144E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999395593191676	WITHOUT_CLASSIFICATION	6.044068083241033E-5	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999993738046498	WITHOUT_CLASSIFICATION	6.261953502281931E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999939251643415	WITHOUT_CLASSIFICATION	6.0748356585370945E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999937814229733	WITHOUT_CLASSIFICATION	6.218577026716845E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999937814229733	WITHOUT_CLASSIFICATION	6.218577026716845E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999795633176916	WITHOUT_CLASSIFICATION	2.0436682308493527E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999666854855609	WITHOUT_CLASSIFICATION	3.331451443906064E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999666854855609	WITHOUT_CLASSIFICATION	3.331451443906064E-5	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999991807937529	WITHOUT_CLASSIFICATION	8.192062470278998E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999965221939215	WITHOUT_CLASSIFICATION	3.4778060784720983E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999959061401414	WITHOUT_CLASSIFICATION	4.093859858491899E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998580898140028	WITHOUT_CLASSIFICATION	1.4191018599716486E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999532404703813	WITHOUT_CLASSIFICATION	4.675952961872793E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999688984781463	WITHOUT_CLASSIFICATION	3.1101521853725264E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582406214791	WITHOUT_CLASSIFICATION	4.17593785208597E-5	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999727016631794	WITHOUT_CLASSIFICATION	2.7298336820539404E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9856473744904062	WITHOUT_CLASSIFICATION	0.01435262550959368	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999535510040266	WITHOUT_CLASSIFICATION	4.6448995973375916E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9996431221386073	WITHOUT_CLASSIFICATION	3.568778613926298E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998928047262816	WITHOUT_CLASSIFICATION	1.0719527371846186E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999981737470801	WITHOUT_CLASSIFICATION	1.826252919907978E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999923500114702	WITHOUT_CLASSIFICATION	7.649988529743174E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999989709952357	WITHOUT_CLASSIFICATION	1.0290047642262676E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998928047262816	WITHOUT_CLASSIFICATION	1.0719527371846186E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999993187522646	WITHOUT_CLASSIFICATION	6.812477354022072E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998313310013	WITHOUT_CLASSIFICATION	1.68668998634049E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999929813609556	WITHOUT_CLASSIFICATION	7.018639044394563E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999418328205862	WITHOUT_CLASSIFICATION	5.816717941387542E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999011741062831	WITHOUT_CLASSIFICATION	9.882589371691214E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999078448490191	WITHOUT_CLASSIFICATION	9.215515098092126E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9996495574192431	WITHOUT_CLASSIFICATION	3.504425807568167E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999601769887891	WITHOUT_CLASSIFICATION	3.982301121082827E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999111207474036	WITHOUT_CLASSIFICATION	8.887925259636776E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999965499634426	WITHOUT_CLASSIFICATION	3.4500365575173787E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999994735980325	WITHOUT_CLASSIFICATION	5.264019675001301E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999987684799103	WITHOUT_CLASSIFICATION	1.2315200897369726E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999328058297337	WITHOUT_CLASSIFICATION	6.719417026632447E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999582406214791	WITHOUT_CLASSIFICATION	4.17593785208597E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999111207474036	WITHOUT_CLASSIFICATION	8.887925259636776E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999994735980325	WITHOUT_CLASSIFICATION	5.264019675001301E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999328058297337	WITHOUT_CLASSIFICATION	6.719417026632447E-5	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999987688073776	WITHOUT_CLASSIFICATION	1.2311926224575114E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998728274505663	WITHOUT_CLASSIFICATION	1.2717254943375722E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996962042367	WITHOUT_CLASSIFICATION	3.037957632253503E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999500437125951	WITHOUT_CLASSIFICATION	4.99562874049687E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999970617502171	WITHOUT_CLASSIFICATION	2.938249782903581E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999943649494655	WITHOUT_CLASSIFICATION	5.635050534537168E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999928932840483	WITHOUT_CLASSIFICATION	7.1067159516804055E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999992860320472	WITHOUT_CLASSIFICATION	7.139679528555104E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999914187187617	WITHOUT_CLASSIFICATION	8.581281238310873E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999931633155519	WITHOUT_CLASSIFICATION	6.836684448172832E-6	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999998984381263	WITHOUT_CLASSIFICATION	1.0156187369492294E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999988975500544	WITHOUT_CLASSIFICATION	1.1024499455962087E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997408704122	WITHOUT_CLASSIFICATION	2.591295877505087E-7	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999989433831212	WITHOUT_CLASSIFICATION	1.0566168787621295E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.999956955607989	WITHOUT_CLASSIFICATION	4.30443920110195E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998918096249172	WITHOUT_CLASSIFICATION	1.0819037508276664E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999040553407108	WITHOUT_CLASSIFICATION	9.594465928919411E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999989907658561	WITHOUT_CLASSIFICATION	1.0092341439436206E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999525591407784	WITHOUT_CLASSIFICATION	4.74408592215746E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999111207474036	WITHOUT_CLASSIFICATION	8.887925259636776E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995893811843	WITHOUT_CLASSIFICATION	4.1061881570344477E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999984879557974	WITHOUT_CLASSIFICATION	1.5120442025825464E-6	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999983797390947	WITHOUT_CLASSIFICATION	1.6202609053809799E-6	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999187196919482	WITHOUT_CLASSIFICATION	8.128030805182578E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999972923600132	WITHOUT_CLASSIFICATION	2.70763998673492E-6	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999951918140861	WITHOUT_CLASSIFICATION	4.8081859138205174E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999934589991444	WITHOUT_CLASSIFICATION	6.541000855622494E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998713943591	WITHOUT_CLASSIFICATION	1.2860564085464857E-7	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999861231169721	WITHOUT_CLASSIFICATION	1.3876883027913152E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999469622510828	WITHOUT_CLASSIFICATION	5.303774891712709E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999685975059897	WITHOUT_CLASSIFICATION	3.140249401031163E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999920889838624	WITHOUT_CLASSIFICATION	7.911016137602053E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999980281899632	WITHOUT_CLASSIFICATION	1.971810036814507E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999993553814475	WITHOUT_CLASSIFICATION	6.44618552421851E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.999994654181967	WITHOUT_CLASSIFICATION	5.345818033066911E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999990097657661	WITHOUT_CLASSIFICATION	9.902342338891005E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.999986370853492	WITHOUT_CLASSIFICATION	1.3629146508049842E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999971871646872	WITHOUT_CLASSIFICATION	2.8128353128501807E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999966289790118	WITHOUT_CLASSIFICATION	3.371020988342928E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999955294073746	WITHOUT_CLASSIFICATION	4.470592625372511E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999984075149744	WITHOUT_CLASSIFICATION	1.592485025585409E-6	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999980502220179	WITHOUT_CLASSIFICATION	1.9497779819860823E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999908432636034	WITHOUT_CLASSIFICATION	9.156736396485248E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999784987895144	WITHOUT_CLASSIFICATION	2.1501210485601916E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999888567606913	WITHOUT_CLASSIFICATION	1.1143239308760648E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999888567606913	WITHOUT_CLASSIFICATION	1.1143239308760648E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998610675222618	WITHOUT_CLASSIFICATION	1.389324777381888E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999973341600841	WITHOUT_CLASSIFICATION	2.6658399158255852E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999984022475661	WITHOUT_CLASSIFICATION	1.5977524338665783E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999883064014367	WITHOUT_CLASSIFICATION	1.1693598563374841E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999771373294035	WITHOUT_CLASSIFICATION	2.286267059647201E-5	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999713020653648	WITHOUT_CLASSIFICATION	2.8697934635138424E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999962262757135	WITHOUT_CLASSIFICATION	3.773724286478771E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999972743793699	WITHOUT_CLASSIFICATION	2.7256206300944487E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997749479705491	WITHOUT_CLASSIFICATION	2.2505202945085286E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999849491351299	WITHOUT_CLASSIFICATION	1.5050864869970615E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999877953294474	WITHOUT_CLASSIFICATION	1.2204670552602089E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999994386942694	WITHOUT_CLASSIFICATION	5.613057304942914E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999851035917408	WITHOUT_CLASSIFICATION	1.4896408259206362E-5	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999968496365127	WITHOUT_CLASSIFICATION	3.1503634874072676E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790420179714	WITHOUT_CLASSIFICATION	2.095798202864435E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959631088711	WITHOUT_CLASSIFICATION	4.036891128963154E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999740696061881	WITHOUT_CLASSIFICATION	2.5930393811947215E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999940049090364	WITHOUT_CLASSIFICATION	5.9950909635485825E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999995041827875	WITHOUT_CLASSIFICATION	4.958172124401653E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999906195721737	WITHOUT_CLASSIFICATION	9.380427826300357E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999940476257564	WITHOUT_CLASSIFICATION	5.952374243615469E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999940476257564	WITHOUT_CLASSIFICATION	5.952374243615469E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999420360805923	WITHOUT_CLASSIFICATION	5.796391940772168E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999420360805923	WITHOUT_CLASSIFICATION	5.796391940772168E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999908432636034	WITHOUT_CLASSIFICATION	9.156736396485248E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999015588640436	WITHOUT_CLASSIFICATION	9.844113595633598E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999259938933899	WITHOUT_CLASSIFICATION	7.400610661017782E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999808910724286	WITHOUT_CLASSIFICATION	1.9108927571481356E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999259938933899	WITHOUT_CLASSIFICATION	7.400610661017782E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999808910724286	WITHOUT_CLASSIFICATION	1.9108927571481356E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948301931416	WITHOUT_CLASSIFICATION	5.16980685840358E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999992656560682	WITHOUT_CLASSIFICATION	7.343439317286884E-7	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999997874277436	WITHOUT_CLASSIFICATION	2.1257225639605434E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999975495592394	WITHOUT_CLASSIFICATION	2.450440760557783E-6	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9995572242810126	WITHOUT_CLASSIFICATION	4.4277571898738787E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999849598941939	WITHOUT_CLASSIFICATION	1.5040105806136205E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.999997116715078	WITHOUT_CLASSIFICATION	2.883284922102006E-6	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999876341897056	WITHOUT_CLASSIFICATION	1.2365810294377292E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9926317050264053	WITHOUT_CLASSIFICATION	0.007368294973594624	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999991549642223	WITHOUT_CLASSIFICATION	8.450357776224729E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999990141715215	WITHOUT_CLASSIFICATION	9.858284785639542E-7	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999996768725389	WITHOUT_CLASSIFICATION	3.231274612188703E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999923784908159	WITHOUT_CLASSIFICATION	7.621509184071733E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999641384849882	WITHOUT_CLASSIFICATION	3.586151501190718E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999811512853274	WITHOUT_CLASSIFICATION	1.8848714672720227E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999428989423612	WITHOUT_CLASSIFICATION	5.7101057638885094E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999428989423612	WITHOUT_CLASSIFICATION	5.7101057638885094E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999992502775703	WITHOUT_CLASSIFICATION	7.497224295919376E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948301931416	WITHOUT_CLASSIFICATION	5.16980685840358E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999801919716963	WITHOUT_CLASSIFICATION	1.9808028303708275E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999983054634581	WITHOUT_CLASSIFICATION	1.6945365418280714E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999996308617687	WITHOUT_CLASSIFICATION	3.6913823137770075E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999899018241809	WITHOUT_CLASSIFICATION	1.0098175819171729E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999054282032729	WITHOUT_CLASSIFICATION	9.457179672719247E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948301931416	WITHOUT_CLASSIFICATION	5.16980685840358E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999899018241809	WITHOUT_CLASSIFICATION	1.0098175819171729E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999054282032729	WITHOUT_CLASSIFICATION	9.457179672719247E-5	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999653475907008	WITHOUT_CLASSIFICATION	3.465240929927679E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999654398307426	WITHOUT_CLASSIFICATION	3.4560169257366845E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999992821803994	WITHOUT_CLASSIFICATION	7.178196007057469E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948301931416	WITHOUT_CLASSIFICATION	5.16980685840358E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999948301931416	WITHOUT_CLASSIFICATION	5.16980685840358E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999844176888915	WITHOUT_CLASSIFICATION	1.558231110853957E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999991546388823	WITHOUT_CLASSIFICATION	8.453611177081689E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999849037120375	WITHOUT_CLASSIFICATION	1.50962879624321E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999951609474832	WITHOUT_CLASSIFICATION	4.8390525167897575E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999901997304487	WITHOUT_CLASSIFICATION	9.800269551348506E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999987495814724	WITHOUT_CLASSIFICATION	1.2504185276382892E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999992330647787	WITHOUT_CLASSIFICATION	7.669352213785485E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999995815898829	WITHOUT_CLASSIFICATION	4.18410117139275E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999994929570195	WITHOUT_CLASSIFICATION	5.070429805166197E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999714287062788	WITHOUT_CLASSIFICATION	2.857129372128761E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999621207989505	WITHOUT_CLASSIFICATION	3.78792010494814E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999909249508389	WITHOUT_CLASSIFICATION	9.075049161165699E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999953225196732	WITHOUT_CLASSIFICATION	4.677480326904616E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999986067441929	WITHOUT_CLASSIFICATION	1.3932558070038993E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999932189695249	WITHOUT_CLASSIFICATION	6.781030475094818E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999895953595821	WITHOUT_CLASSIFICATION	1.0404640417884605E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999758847336501	WITHOUT_CLASSIFICATION	2.4115266349947525E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999757588040256	WITHOUT_CLASSIFICATION	2.424119597439325E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9999784109130178	WITHOUT_CLASSIFICATION	2.158908698223485E-5	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999950665722523	WITHOUT_CLASSIFICATION	4.933427747756592E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999612551957091	WITHOUT_CLASSIFICATION	3.8744804290904954E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999779156751644	WITHOUT_CLASSIFICATION	2.208432483555398E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999779156751644	WITHOUT_CLASSIFICATION	2.208432483555398E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999758847336501	WITHOUT_CLASSIFICATION	2.4115266349947525E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999758125806617	WITHOUT_CLASSIFICATION	2.4187419338246517E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999976887645072	WITHOUT_CLASSIFICATION	2.3112354927938977E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999854638879196	WITHOUT_CLASSIFICATION	1.4536112080479093E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999894451704134	WITHOUT_CLASSIFICATION	1.0554829586505921E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999471805633232	WITHOUT_CLASSIFICATION	5.2819436676865807E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999979342695422	WITHOUT_CLASSIFICATION	2.0657304578148417E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999989653290876	WITHOUT_CLASSIFICATION	1.0346709124051716E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999953764821977	WITHOUT_CLASSIFICATION	4.623517802315556E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999034262133	WITHOUT_CLASSIFICATION	9.657378672325231E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995193602143	WITHOUT_CLASSIFICATION	4.806397857227674E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994353657857	WITHOUT_CLASSIFICATION	5.646342142333784E-7	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999748771601297	WITHOUT_CLASSIFICATION	2.5122839870270615E-5	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9997709254693569	WITHOUT_CLASSIFICATION	2.2907453064305766E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999995769633928	WITHOUT_CLASSIFICATION	4.230366071669189E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998694224784	WITHOUT_CLASSIFICATION	1.305775215611591E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999960517770116	WITHOUT_CLASSIFICATION	3.948222988375326E-6	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999992435015672	WITHOUT_CLASSIFICATION	7.56498432774507E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999785308244161	WITHOUT_CLASSIFICATION	2.1469175583887593E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967927391482	WITHOUT_CLASSIFICATION	3.207260851747559E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999999916412025	WITHOUT_CLASSIFICATION	8.358797506388858E-8	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999493918772	WITHOUT_CLASSIFICATION	5.060812279806765E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999869447578	WITHOUT_CLASSIFICATION	1.3055242262348727E-8	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993843310749	WITHOUT_CLASSIFICATION	6.156689251467711E-7	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996392883647	WITHOUT_CLASSIFICATION	3.6071163530691578E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976423906922	WITHOUT_CLASSIFICATION	2.357609307808925E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983927548254	WITHOUT_CLASSIFICATION	1.607245174534729E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849259665734	WITHOUT_CLASSIFICATION	1.5074033426601861E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909964246182	WITHOUT_CLASSIFICATION	9.003575381764098E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902595313425	WITHOUT_CLASSIFICATION	9.740468657480421E-6	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950247119855	WITHOUT_CLASSIFICATION	4.97528801448192E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999977962774967	WITHOUT_CLASSIFICATION	2.203722503316729E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999993434366804	WITHOUT_CLASSIFICATION	6.565633196788859E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951112476426	WITHOUT_CLASSIFICATION	4.888752357394611E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960426552393	WITHOUT_CLASSIFICATION	3.957344760610313E-6	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997573796294	WITHOUT_CLASSIFICATION	2.4262037060228823E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993525660918	WITHOUT_CLASSIFICATION	6.474339081143777E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995516494416	WITHOUT_CLASSIFICATION	4.483505584073817E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983884452096	WITHOUT_CLASSIFICATION	1.6115547903740121E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987629865343	WITHOUT_CLASSIFICATION	1.237013465698689E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929446805229	WITHOUT_CLASSIFICATION	7.055319477052671E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996617102527	WITHOUT_CLASSIFICATION	3.382897472773288E-7	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949439739187	WITHOUT_CLASSIFICATION	5.056026081349995E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999277812088715	WITHOUT_CLASSIFICATION	7.221879112850852E-5	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999926994642421	WITHOUT_CLASSIFICATION	7.3005357579269435E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999997339055092	WITHOUT_CLASSIFICATION	2.660944907617376E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999485771077309	WITHOUT_CLASSIFICATION	5.142289226920987E-5	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999727926236497	WITHOUT_CLASSIFICATION	2.7207376350289334E-5	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999984810971023	WITHOUT_CLASSIFICATION	1.5189028976145216E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999897847259025	WITHOUT_CLASSIFICATION	1.0215274097611585E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999352554919225	WITHOUT_CLASSIFICATION	6.47445080774949E-5	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999350200103783	WITHOUT_CLASSIFICATION	6.497998962181309E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9997544763121571	WITHOUT_CLASSIFICATION	2.4552368784290583E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998680856581389	WITHOUT_CLASSIFICATION	1.3191434186112663E-4	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999551713672812	WITHOUT_CLASSIFICATION	4.482863271873276E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999999904401594	WITHOUT_CLASSIFICATION	9.559840593902482E-8	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999311640795466	WITHOUT_CLASSIFICATION	6.8835920453397E-5	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999934162296343	WITHOUT_CLASSIFICATION	6.583770365743822E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999795786060841	WITHOUT_CLASSIFICATION	2.0421393915907163E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999945265577954	WITHOUT_CLASSIFICATION	5.473442204549756E-6	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993316554302	WITHOUT_CLASSIFICATION	6.683445697985464E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928900068662	WITHOUT_CLASSIFICATION	7.109993133818789E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994413456952	WITHOUT_CLASSIFICATION	5.58654304803066E-6	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979075882044	WITHOUT_CLASSIFICATION	2.0924117956640384E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999177321132643	WITHOUT_CLASSIFICATION	8.226788673573241E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999998466876387	WITHOUT_CLASSIFICATION	1.5331236129791981E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999971601708753	WITHOUT_CLASSIFICATION	2.8398291247672967E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999982686390685	WITHOUT_CLASSIFICATION	1.7313609315323057E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976726157107	WITHOUT_CLASSIFICATION	2.327384289264565E-6	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999463049896	WITHOUT_CLASSIFICATION	5.36950104082282E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999982648037283	WITHOUT_CLASSIFICATION	1.7351962716830447E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999921641113214	WITHOUT_CLASSIFICATION	7.835888678544998E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997137110732	WITHOUT_CLASSIFICATION	2.86288926782627E-7	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999973542469465	WITHOUT_CLASSIFICATION	2.6457530535190643E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999991449538277	WITHOUT_CLASSIFICATION	8.550461722501916E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.999953251302917	WITHOUT_CLASSIFICATION	4.6748697082997845E-5	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999995244144426	WITHOUT_CLASSIFICATION	4.755855573944378E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999485771077309	WITHOUT_CLASSIFICATION	5.142289226920987E-5	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999888871015092	WITHOUT_CLASSIFICATION	1.1112898490797185E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999973433095676	WITHOUT_CLASSIFICATION	2.6566904322881787E-6	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999972151519674	WITHOUT_CLASSIFICATION	2.7848480326873556E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999880483544185	WITHOUT_CLASSIFICATION	1.1951645581528705E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999990703594684	WITHOUT_CLASSIFICATION	9.296405315264307E-7	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999991546822413	WITHOUT_CLASSIFICATION	8.453177587260933E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9997815224202347	WITHOUT_CLASSIFICATION	2.1847757976532835E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999929616241743	WITHOUT_CLASSIFICATION	7.038375825779347E-6	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999968298815788	WITHOUT_CLASSIFICATION	3.1701184211373538E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999991429553816	WITHOUT_CLASSIFICATION	8.570446183479032E-7	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999986172746206	WITHOUT_CLASSIFICATION	1.3827253793816404E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999991993526133	WITHOUT_CLASSIFICATION	8.006473866610444E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996925446352	WITHOUT_CLASSIFICATION	3.074553647759207E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999995026150075	WITHOUT_CLASSIFICATION	4.973849924607949E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999996212038071	WITHOUT_CLASSIFICATION	3.787961929050175E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999971736777316	WITHOUT_CLASSIFICATION	2.8263222685064218E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999965173536898	WITHOUT_CLASSIFICATION	3.482646310246555E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999859235273139	WITHOUT_CLASSIFICATION	1.4076472686223205E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999981723211291	WITHOUT_CLASSIFICATION	1.8276788708258756E-6	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999934914815349	WITHOUT_CLASSIFICATION	6.508518465051423E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999997713966701	WITHOUT_CLASSIFICATION	2.286033298895631E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999972959137009	WITHOUT_CLASSIFICATION	2.7040862990900528E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999685732606287	WITHOUT_CLASSIFICATION	3.1426739371286317E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999995647617416	WITHOUT_CLASSIFICATION	4.352382583166522E-7	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999987657173283	WITHOUT_CLASSIFICATION	1.2342826717252458E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999970295691323	WITHOUT_CLASSIFICATION	2.970430867711348E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.998530943242133	WITHOUT_CLASSIFICATION	0.001469056757866989	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999959073000971	WITHOUT_CLASSIFICATION	4.0926999029586385E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999892412919936	WITHOUT_CLASSIFICATION	1.0758708006326922E-5	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999997468377178	WITHOUT_CLASSIFICATION	2.5316228220366715E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999485771077309	WITHOUT_CLASSIFICATION	5.142289226920987E-5	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999758606589982	WITHOUT_CLASSIFICATION	2.4139341001815917E-5	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999994902418015	WITHOUT_CLASSIFICATION	5.097581984295227E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999967760309634	WITHOUT_CLASSIFICATION	3.223969036596356E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999485771077309	WITHOUT_CLASSIFICATION	5.142289226920987E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999933414950275	WITHOUT_CLASSIFICATION	6.658504972549133E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999997713966701	WITHOUT_CLASSIFICATION	2.286033298895631E-6	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999889219752578	WITHOUT_CLASSIFICATION	1.1078024742102391E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998767307194152	WITHOUT_CLASSIFICATION	1.232692805847942E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999904623587671	WITHOUT_CLASSIFICATION	9.537641232813193E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999991429553816	WITHOUT_CLASSIFICATION	8.570446183479032E-7	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999986172746206	WITHOUT_CLASSIFICATION	1.3827253793816404E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999991993526133	WITHOUT_CLASSIFICATION	8.006473866610444E-7	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999996083518741	WITHOUT_CLASSIFICATION	3.9164812591507184E-7	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999924223808067	WITHOUT_CLASSIFICATION	7.577619193326265E-6	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999988809659833	WITHOUT_CLASSIFICATION	1.1190340166790574E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999901487881216	WITHOUT_CLASSIFICATION	9.85121187831983E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999737333783859	WITHOUT_CLASSIFICATION	2.6266621614107673E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999485771077309	WITHOUT_CLASSIFICATION	5.142289226920987E-5	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996925446352	WITHOUT_CLASSIFICATION	3.074553647759207E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999995026150075	WITHOUT_CLASSIFICATION	4.973849924607949E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993406342716	WITHOUT_CLASSIFICATION	6.593657282570541E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995916248279	WITHOUT_CLASSIFICATION	4.0837517206422666E-7	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999972934886974	WITHOUT_CLASSIFICATION	2.706511302721457E-6	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999944368643775	WITHOUT_CLASSIFICATION	5.563135622472796E-6	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999998070576406	WITHOUT_CLASSIFICATION	1.9294235940548563E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999877981776106	WITHOUT_CLASSIFICATION	1.2201822389286484E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929446805229	WITHOUT_CLASSIFICATION	7.055319477052671E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999953129870132	WITHOUT_CLASSIFICATION	4.687012986823565E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999832786608079	WITHOUT_CLASSIFICATION	1.6721339192093478E-5	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999941929312383	WITHOUT_CLASSIFICATION	5.807068761760226E-6	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999996290795294	WITHOUT_CLASSIFICATION	3.7092047059962357E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999921540041198	WITHOUT_CLASSIFICATION	7.84599588017569E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849259665734	WITHOUT_CLASSIFICATION	1.5074033426601861E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909964246182	WITHOUT_CLASSIFICATION	9.003575381764098E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960426552393	WITHOUT_CLASSIFICATION	3.957344760610313E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999921540041198	WITHOUT_CLASSIFICATION	7.84599588017569E-6	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999974539783097	WITHOUT_CLASSIFICATION	2.5460216902096796E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999995353291948	WITHOUT_CLASSIFICATION	4.646708052295524E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990726888706	WITHOUT_CLASSIFICATION	9.273111294906411E-7	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890923672062	WITHOUT_CLASSIFICATION	1.090763279384618E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999986689975177	WITHOUT_CLASSIFICATION	1.3310024823202745E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998527861063699	WITHOUT_CLASSIFICATION	1.472138936300326E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997573796294	WITHOUT_CLASSIFICATION	2.4262037060228823E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983884452096	WITHOUT_CLASSIFICATION	1.6115547903740121E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999997137110732	WITHOUT_CLASSIFICATION	2.86288926782627E-7	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999969415801441	WITHOUT_CLASSIFICATION	3.0584198559873854E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999962243277851	WITHOUT_CLASSIFICATION	3.7756722149680197E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999989657440125	WITHOUT_CLASSIFICATION	1.0342559875537475E-6	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999964870693828	WITHOUT_CLASSIFICATION	3.512930617197826E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999978940742286	WITHOUT_CLASSIFICATION	2.105925771356298E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999990514289412	WITHOUT_CLASSIFICATION	9.485710588020133E-7	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.999989000080806	WITHOUT_CLASSIFICATION	1.0999919193966813E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999034262133	WITHOUT_CLASSIFICATION	9.657378672325231E-8	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999983383351613	WITHOUT_CLASSIFICATION	1.6616648388081398E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999949818965522	WITHOUT_CLASSIFICATION	5.01810344785499E-6	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999994977242573	WITHOUT_CLASSIFICATION	5.02275742700496E-7	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999995816600701	WITHOUT_CLASSIFICATION	4.1833992984840745E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999998786492009	WITHOUT_CLASSIFICATION	1.2135079900637286E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999817951068901	WITHOUT_CLASSIFICATION	1.8204893109956705E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958403662728	WITHOUT_CLASSIFICATION	4.159633727333832E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967998565584	WITHOUT_CLASSIFICATION	3.2001434416604003E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999957528780317	WITHOUT_CLASSIFICATION	4.247121968384741E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999984736055028	WITHOUT_CLASSIFICATION	1.5263944971957205E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999680050259642	WITHOUT_CLASSIFICATION	3.199497403586836E-5	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999743115941466	WITHOUT_CLASSIFICATION	2.5688405853340696E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999645308239441	WITHOUT_CLASSIFICATION	3.546917605588804E-5	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999087786815332	WITHOUT_CLASSIFICATION	9.122131846676938E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999801046211666	WITHOUT_CLASSIFICATION	1.989537883339088E-5	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999998985573204	WITHOUT_CLASSIFICATION	1.0144267960523267E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999988823310729	WITHOUT_CLASSIFICATION	1.1176689270865462E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999053583146775	WITHOUT_CLASSIFICATION	9.464168532243929E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999874048812474	WITHOUT_CLASSIFICATION	1.2595118752694883E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999978856907514	WITHOUT_CLASSIFICATION	2.114309248501604E-6	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990466298512	WITHOUT_CLASSIFICATION	9.533701487660964E-7	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999996868071626	WITHOUT_CLASSIFICATION	3.131928374576727E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995619382386	WITHOUT_CLASSIFICATION	4.380617614174983E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999990722453014	WITHOUT_CLASSIFICATION	9.277546986834597E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999994813844888	WITHOUT_CLASSIFICATION	5.186155113128673E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999888627324239	WITHOUT_CLASSIFICATION	1.113726757610213E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999858053228712	WITHOUT_CLASSIFICATION	1.4194677128726213E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997737831693	WITHOUT_CLASSIFICATION	2.262168307400534E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999989975716066	WITHOUT_CLASSIFICATION	1.0024283933971556E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999939911152965	WITHOUT_CLASSIFICATION	6.008884703458515E-6	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999997031123955	WITHOUT_CLASSIFICATION	2.968876045200858E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999985462783382	WITHOUT_CLASSIFICATION	1.4537216619158087E-6	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999958796991238	WITHOUT_CLASSIFICATION	4.120300876111299E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999696683375001	WITHOUT_CLASSIFICATION	3.0331662499888616E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999962136476047	WITHOUT_CLASSIFICATION	3.786352395263122E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999998655672799	WITHOUT_CLASSIFICATION	1.3443272010089352E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999823838776	WITHOUT_CLASSIFICATION	1.7616122415654638E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999127960248	WITHOUT_CLASSIFICATION	8.7203975163256E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999968359280701	WITHOUT_CLASSIFICATION	3.1640719299030244E-6	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999832293544	WITHOUT_CLASSIFICATION	1.6770645687255294E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999978229803803	WITHOUT_CLASSIFICATION	2.177019619600403E-6	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999968557186102	WITHOUT_CLASSIFICATION	3.144281389789948E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999802262720348	WITHOUT_CLASSIFICATION	1.9773727965172987E-5	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999777293031124	WITHOUT_CLASSIFICATION	2.2270696887742563E-5	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999970252608614	WITHOUT_CLASSIFICATION	2.9747391384877728E-6	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999997795298723	WITHOUT_CLASSIFICATION	2.2047012770119526E-6	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999994193720525	WITHOUT_CLASSIFICATION	5.80627947552076E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998299896721	WITHOUT_CLASSIFICATION	1.7001032797505662E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999955437309591	WITHOUT_CLASSIFICATION	4.456269040949594E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999998142141724	WITHOUT_CLASSIFICATION	1.8578582770279494E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999999200185381	WITHOUT_CLASSIFICATION	7.998146191626293E-8	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998520378125	WITHOUT_CLASSIFICATION	1.4796218750314898E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999978857074755	WITHOUT_CLASSIFICATION	2.114292524457426E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999969612670451	WITHOUT_CLASSIFICATION	3.038732954919856E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999468767883921	WITHOUT_CLASSIFICATION	5.312321160777731E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998876699934319	WITHOUT_CLASSIFICATION	1.1233000656813895E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999992917471368	WITHOUT_CLASSIFICATION	7.082528632721064E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999972908840538	WITHOUT_CLASSIFICATION	2.7091159461735393E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.999992828697531	WITHOUT_CLASSIFICATION	7.171302469041661E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999802764466241	WITHOUT_CLASSIFICATION	1.9723553375893842E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999549712092407	WITHOUT_CLASSIFICATION	4.5028790759258126E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999973454016926	WITHOUT_CLASSIFICATION	2.6545983074015453E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999842436688209	WITHOUT_CLASSIFICATION	1.575633117915253E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999857203716882	WITHOUT_CLASSIFICATION	1.4279628311788433E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999982532148539	WITHOUT_CLASSIFICATION	1.7467851460681009E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998640226557699	WITHOUT_CLASSIFICATION	1.359773442299941E-4	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996767761933	WITHOUT_CLASSIFICATION	3.2322380671066127E-7	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999947212953829	WITHOUT_CLASSIFICATION	5.2787046170450224E-6	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999793207493503	WITHOUT_CLASSIFICATION	2.0679250649752198E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999984681998698	WITHOUT_CLASSIFICATION	1.531800130196549E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999974260057547	WITHOUT_CLASSIFICATION	2.5739942453306343E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999792582728889	WITHOUT_CLASSIFICATION	2.074172711111267E-5	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999853051335619	WITHOUT_CLASSIFICATION	1.469486643804192E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999994390918984	WITHOUT_CLASSIFICATION	5.6090810159786E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999987621522565	WITHOUT_CLASSIFICATION	1.2378477434997233E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999739667620887	WITHOUT_CLASSIFICATION	2.603323791132557E-5	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999972287158847	WITHOUT_CLASSIFICATION	2.7712841152586717E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999976013538251	WITHOUT_CLASSIFICATION	2.3986461749333157E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998478012764	WITHOUT_CLASSIFICATION	1.5219872365286293E-7	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999996407872326	WITHOUT_CLASSIFICATION	3.5921276740588363E-6	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998695510850875	WITHOUT_CLASSIFICATION	1.3044891491257508E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999980984099603	WITHOUT_CLASSIFICATION	1.9015900397685605E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999188031013424	WITHOUT_CLASSIFICATION	8.11968986576184E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999838658606742	WITHOUT_CLASSIFICATION	1.6134139325700626E-5	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999445797726014	WITHOUT_CLASSIFICATION	5.542022739842299E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998335619757388	WITHOUT_CLASSIFICATION	1.6643802426119592E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999966213611773	WITHOUT_CLASSIFICATION	3.378638822701084E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999870104861286	WITHOUT_CLASSIFICATION	1.2989513871392453E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999963088060069	WITHOUT_CLASSIFICATION	3.6911939931517528E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.999999984777279	WITHOUT_CLASSIFICATION	1.5222720968902145E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999766865188117	WITHOUT_CLASSIFICATION	2.331348118837988E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999728934635151	WITHOUT_CLASSIFICATION	2.7106536484907118E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999681213826034	WITHOUT_CLASSIFICATION	3.18786173965539E-5	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999766865188117	WITHOUT_CLASSIFICATION	2.331348118837988E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999985073518592	WITHOUT_CLASSIFICATION	1.4926481408175507E-6	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999980854104452	WITHOUT_CLASSIFICATION	1.9145895549049716E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999965140563599	WITHOUT_CLASSIFICATION	3.4859436401298293E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999651386946771	WITHOUT_CLASSIFICATION	3.486130532296977E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999867045096826	WITHOUT_CLASSIFICATION	1.3295490317414554E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997254073819	WITHOUT_CLASSIFICATION	2.7459261812905684E-7	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997866995513307	WITHOUT_CLASSIFICATION	2.1330044866930953E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999994925846342	WITHOUT_CLASSIFICATION	5.0741536584928E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999448760569924	WITHOUT_CLASSIFICATION	5.5123943007692916E-5	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999557975248659	WITHOUT_CLASSIFICATION	4.420247513422621E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999992325393074	WITHOUT_CLASSIFICATION	7.67460692587823E-7	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999983443229022	WITHOUT_CLASSIFICATION	1.6556770976703464E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999986012399565	WITHOUT_CLASSIFICATION	1.3987600435039931E-6	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999998655590283	WITHOUT_CLASSIFICATION	1.3444097163663172E-7	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999763484251585	WITHOUT_CLASSIFICATION	2.3651574841507597E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999874389475463	WITHOUT_CLASSIFICATION	1.2561052453720379E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999691883921432	WITHOUT_CLASSIFICATION	3.081160785682273E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999691883921432	WITHOUT_CLASSIFICATION	3.081160785682273E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999681376861045	WITHOUT_CLASSIFICATION	3.1862313895576904E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999566423333794	WITHOUT_CLASSIFICATION	4.3357666620647644E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999230654332003	WITHOUT_CLASSIFICATION	7.693456679960055E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999042954577806	WITHOUT_CLASSIFICATION	9.570454221945814E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999994512126804	WITHOUT_CLASSIFICATION	5.487873195287289E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9951016432768606	WITHOUT_CLASSIFICATION	0.004898356723139421	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999753949484593	WITHOUT_CLASSIFICATION	2.460505154070133E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998604006626	WITHOUT_CLASSIFICATION	1.3959933740492467E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999931587008934	WITHOUT_CLASSIFICATION	6.8412991065432725E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999088699901999	WITHOUT_CLASSIFICATION	9.113000980000196E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999998622312489	WITHOUT_CLASSIFICATION	1.37768751098903E-6	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999126215467	WITHOUT_CLASSIFICATION	8.737845315485211E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999997148143619	WITHOUT_CLASSIFICATION	2.851856380972726E-6	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999972532215812	WITHOUT_CLASSIFICATION	2.746778418910969E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999936779607792	WITHOUT_CLASSIFICATION	6.322039220762076E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999817951068901	WITHOUT_CLASSIFICATION	1.8204893109956705E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999972471862288	WITHOUT_CLASSIFICATION	2.7528137711686627E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999971497306497	WITHOUT_CLASSIFICATION	2.850269350372494E-6	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998323423621849	WITHOUT_CLASSIFICATION	1.6765763781521043E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999815016051815	WITHOUT_CLASSIFICATION	1.8498394818557705E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9997969743406974	WITHOUT_CLASSIFICATION	2.030256593027266E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.999967418610438	WITHOUT_CLASSIFICATION	3.258138956198134E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999999613110087	WITHOUT_CLASSIFICATION	3.8688991299061556E-7	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999986624361179	WITHOUT_CLASSIFICATION	1.3375638821109263E-6	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998860712865	WITHOUT_CLASSIFICATION	1.1392871342711898E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999038597007	WITHOUT_CLASSIFICATION	9.614029924310571E-8	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999992502674603	WITHOUT_CLASSIFICATION	7.497325397874006E-7	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999999543729818	WITHOUT_CLASSIFICATION	4.5627018200445515E-7	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999998518963758	WITHOUT_CLASSIFICATION	1.4810362418878444E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999851257792004	WITHOUT_CLASSIFICATION	1.4874220799577874E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999991071671708	WITHOUT_CLASSIFICATION	8.928328291254708E-7	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999842278481071	WITHOUT_CLASSIFICATION	1.5772151892835797E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999367500485058	WITHOUT_CLASSIFICATION	6.324995149418356E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999860384583606	WITHOUT_CLASSIFICATION	1.396154163934184E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999743812929978	WITHOUT_CLASSIFICATION	2.5618707002302925E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999663030488352	WITHOUT_CLASSIFICATION	3.369695116482465E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999980440714579	WITHOUT_CLASSIFICATION	1.955928542076605E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999698048007258	WITHOUT_CLASSIFICATION	3.019519927420167E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999998750558746	WITHOUT_CLASSIFICATION	1.2494412532536583E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998876988642654	WITHOUT_CLASSIFICATION	1.1230113573457718E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996392059977098	WITHOUT_CLASSIFICATION	3.607940022901846E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999980209479916	WITHOUT_CLASSIFICATION	1.9790520084136555E-6	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999879901230708	WITHOUT_CLASSIFICATION	1.200987692911257E-5	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999960648804461	WITHOUT_CLASSIFICATION	3.935119553848421E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9995962790094163	WITHOUT_CLASSIFICATION	4.037209905837308E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999944951898464	WITHOUT_CLASSIFICATION	5.504810153669285E-6	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962393601872	WITHOUT_CLASSIFICATION	3.7606398127451396E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982563204747	WITHOUT_CLASSIFICATION	1.7436795253353637E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993439165583	WITHOUT_CLASSIFICATION	6.560834416447649E-7	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999984200257754	WITHOUT_CLASSIFICATION	1.5799742244720824E-6	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999984119114954	WITHOUT_CLASSIFICATION	1.5880885045887647E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999885192496584	WITHOUT_CLASSIFICATION	1.148075034168203E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999421074077	WITHOUT_CLASSIFICATION	5.789259224729368E-8	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999506185931588	WITHOUT_CLASSIFICATION	4.938140684131661E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930989163862	WITHOUT_CLASSIFICATION	6.901083613670102E-6	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999506185931588	WITHOUT_CLASSIFICATION	4.938140684131661E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999399560254455	WITHOUT_CLASSIFICATION	6.004397455460707E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999967027029032	WITHOUT_CLASSIFICATION	3.2972970968226293E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999968624548192	WITHOUT_CLASSIFICATION	3.137545180858891E-6	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990281314218	WITHOUT_CLASSIFICATION	9.71868578156747E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998881633419681	WITHOUT_CLASSIFICATION	1.1183665803204657E-4	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9997845973692987	WITHOUT_CLASSIFICATION	2.1540263070126385E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999974032169532	WITHOUT_CLASSIFICATION	2.59678304677044E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999616500446202	WITHOUT_CLASSIFICATION	3.8349955379857286E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999951348195982	WITHOUT_CLASSIFICATION	4.865180401773303E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999992353528804	WITHOUT_CLASSIFICATION	7.646471196874491E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994512114617	WITHOUT_CLASSIFICATION	5.487885383315358E-7	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999990776973661	WITHOUT_CLASSIFICATION	9.223026340120873E-7	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999815591286223	WITHOUT_CLASSIFICATION	1.8440871377729578E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9993181056105092	WITHOUT_CLASSIFICATION	6.81894389490804E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999995796645046	WITHOUT_CLASSIFICATION	4.203354953990691E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.999999743755285	WITHOUT_CLASSIFICATION	2.562447149641415E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.99994917251615	WITHOUT_CLASSIFICATION	5.0827483849921785E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.99994917251615	WITHOUT_CLASSIFICATION	5.0827483849921785E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999884691917962	WITHOUT_CLASSIFICATION	1.1530808203936606E-5	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999992186903648	WITHOUT_CLASSIFICATION	7.813096352075143E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999948565093101	WITHOUT_CLASSIFICATION	5.143490690033668E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999990104572	WITHOUT_CLASSIFICATION	9.895428033582012E-9	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999996604368975	WITHOUT_CLASSIFICATION	3.395631025052494E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999034212225	WITHOUT_CLASSIFICATION	9.657877749657146E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996740581420629	WITHOUT_CLASSIFICATION	3.259418579371541E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999972438518405	WITHOUT_CLASSIFICATION	2.756148159486875E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.999997442344249	WITHOUT_CLASSIFICATION	2.557655751014204E-6	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999989040649473	WITHOUT_CLASSIFICATION	1.0959350526531586E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998454467052	WITHOUT_CLASSIFICATION	1.5455329487692E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999984847529	WITHOUT_CLASSIFICATION	1.5152471393406047E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999994165701407	WITHOUT_CLASSIFICATION	5.834298592451147E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996676251686	WITHOUT_CLASSIFICATION	3.323748315309365E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999993508324826	WITHOUT_CLASSIFICATION	6.491675174115887E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999842124916655	WITHOUT_CLASSIFICATION	1.578750833448552E-5	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999997312334037	WITHOUT_CLASSIFICATION	2.6876659624415564E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999995184156618	WITHOUT_CLASSIFICATION	4.8158433820403795E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999881329198628	WITHOUT_CLASSIFICATION	1.186708013723845E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997458031126	WITHOUT_CLASSIFICATION	2.5419688742631917E-7	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999983390497174	WITHOUT_CLASSIFICATION	1.660950282622541E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999993577735268	WITHOUT_CLASSIFICATION	6.422264731712072E-7	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999998913020413	WITHOUT_CLASSIFICATION	1.0869795877689735E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999992295338173	WITHOUT_CLASSIFICATION	7.704661827246675E-7	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999978563069797	WITHOUT_CLASSIFICATION	2.1436930203545184E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999908500524944	WITHOUT_CLASSIFICATION	9.149947505547392E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999995091547869	WITHOUT_CLASSIFICATION	4.908452130972416E-7	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997751621122499	WITHOUT_CLASSIFICATION	2.2483788775010395E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999700536605761	WITHOUT_CLASSIFICATION	2.994633942386594E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9992789384893069	WITHOUT_CLASSIFICATION	7.210615106930789E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999613128498813	WITHOUT_CLASSIFICATION	3.8687150118753844E-5	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999914046738385	WITHOUT_CLASSIFICATION	8.595326161438503E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997607657222518	WITHOUT_CLASSIFICATION	2.3923427774829917E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9996473599530192	WITHOUT_CLASSIFICATION	3.526400469808253E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999839302669478	WITHOUT_CLASSIFICATION	1.6069733052253086E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999981413115272	WITHOUT_CLASSIFICATION	1.8586884728325243E-6	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999817836867407	WITHOUT_CLASSIFICATION	1.821631325925426E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999386339076275	WITHOUT_CLASSIFICATION	6.136609237254108E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999989544261891	WITHOUT_CLASSIFICATION	1.0455738108855802E-6	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999965625009363	WITHOUT_CLASSIFICATION	3.437499063668977E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999187967256452	WITHOUT_CLASSIFICATION	8.120327435484933E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980198665882	WITHOUT_CLASSIFICATION	1.980133411752734E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999869463380567	WITHOUT_CLASSIFICATION	1.3053661943244885E-5	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999960338185099	WITHOUT_CLASSIFICATION	3.9661814900622084E-6	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999992646991636	WITHOUT_CLASSIFICATION	7.353008364297387E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999971236374477	WITHOUT_CLASSIFICATION	2.876362552201268E-6	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999915398825663	WITHOUT_CLASSIFICATION	8.460117433776684E-6	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999492888104	WITHOUT_CLASSIFICATION	5.0711189584718954E-8	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999995787708991	WITHOUT_CLASSIFICATION	4.2122910082721056E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999999792742696	WITHOUT_CLASSIFICATION	2.0725730412727282E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976727495264	WITHOUT_CLASSIFICATION	2.3272504734824153E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999999640360657	WITHOUT_CLASSIFICATION	3.596393430820532E-7	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999885129602674	WITHOUT_CLASSIFICATION	1.1487039732731704E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999983442873124	WITHOUT_CLASSIFICATION	1.655712687620362E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999822623220789	WITHOUT_CLASSIFICATION	1.7737677921053715E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999933414950275	WITHOUT_CLASSIFICATION	6.658504972549133E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999933414950275	WITHOUT_CLASSIFICATION	6.658504972549133E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999994566425697	WITHOUT_CLASSIFICATION	5.433574302737027E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999695745890823	WITHOUT_CLASSIFICATION	3.042541091769864E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999976058533779	WITHOUT_CLASSIFICATION	2.394146622121663E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999989776048385	WITHOUT_CLASSIFICATION	1.0223951614965043E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999976954131502	WITHOUT_CLASSIFICATION	2.3045868498133435E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999991386455074	WITHOUT_CLASSIFICATION	8.613544926090942E-7	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999998164674891	WITHOUT_CLASSIFICATION	1.8353251090443441E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999496394624359	WITHOUT_CLASSIFICATION	5.036053756402354E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999998720794496	WITHOUT_CLASSIFICATION	1.2792055026135872E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999322295887231	WITHOUT_CLASSIFICATION	6.777041127697173E-5	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999906092522122	WITHOUT_CLASSIFICATION	9.390747787830721E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.99998239609579	WITHOUT_CLASSIFICATION	1.7603904209981884E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998569865623804	WITHOUT_CLASSIFICATION	1.430134376196613E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999996904949973	WITHOUT_CLASSIFICATION	3.0950500277307887E-7	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999990197130095	WITHOUT_CLASSIFICATION	9.80286990490491E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999867745619726	WITHOUT_CLASSIFICATION	1.3225438027408151E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986999043271	WITHOUT_CLASSIFICATION	1.3000956729061067E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999630543968723	WITHOUT_CLASSIFICATION	3.694560312766305E-5	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997635669612248	WITHOUT_CLASSIFICATION	2.364330387751841E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999908120588064	WITHOUT_CLASSIFICATION	9.187941193603662E-6	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999495607493	WITHOUT_CLASSIFICATION	5.043925071623443E-8	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999871497348009	WITHOUT_CLASSIFICATION	1.285026519927744E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996570456104743	WITHOUT_CLASSIFICATION	3.4295438952577326E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999464785872624	WITHOUT_CLASSIFICATION	5.3521412737605294E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999804876938612	WITHOUT_CLASSIFICATION	1.9512306138821184E-5	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999561076665288	WITHOUT_CLASSIFICATION	4.389233347112507E-5	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999748228043881	WITHOUT_CLASSIFICATION	2.5177195611845853E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9976290852091193	WITHOUT_CLASSIFICATION	0.0023709147908806813	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999946073405962	WITHOUT_CLASSIFICATION	5.392659403899996E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996570456104743	WITHOUT_CLASSIFICATION	3.4295438952577326E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999858786569483	WITHOUT_CLASSIFICATION	1.4121343051604516E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999878432390529	WITHOUT_CLASSIFICATION	1.2156760947153903E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.999526705628283	WITHOUT_CLASSIFICATION	4.7329437171704443E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999920734230952	WITHOUT_CLASSIFICATION	7.926576904871817E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999994019783818	WITHOUT_CLASSIFICATION	5.980216182489308E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999932483444078	WITHOUT_CLASSIFICATION	6.751655592099866E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999989120419255	WITHOUT_CLASSIFICATION	1.0879580745341398E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995205683002	WITHOUT_CLASSIFICATION	4.794316998096607E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999950534316204	WITHOUT_CLASSIFICATION	4.9465683796505196E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999920734230952	WITHOUT_CLASSIFICATION	7.926576904871817E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999975225204069	WITHOUT_CLASSIFICATION	2.4774795932577263E-6	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999994952955008	WITHOUT_CLASSIFICATION	5.047044992992573E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999997933235	WITHOUT_CLASSIFICATION	2.0667649998743345E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996842483228101	WITHOUT_CLASSIFICATION	3.157516771898861E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999969832136999	WITHOUT_CLASSIFICATION	3.0167863001628704E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998454467052	WITHOUT_CLASSIFICATION	1.5455329487692E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999967577434351	WITHOUT_CLASSIFICATION	3.24225656501547E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992239841758	WITHOUT_CLASSIFICATION	7.760158241743272E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999999770827538	WITHOUT_CLASSIFICATION	2.291724620210102E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999983214220587	WITHOUT_CLASSIFICATION	1.6785779412966265E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999796004598112	WITHOUT_CLASSIFICATION	2.039954018885244E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.999988466760067	WITHOUT_CLASSIFICATION	1.153323993286258E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999891105975929	WITHOUT_CLASSIFICATION	1.0889402407032899E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999992612680123	WITHOUT_CLASSIFICATION	7.387319876980268E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999105500982951	WITHOUT_CLASSIFICATION	8.944990170496241E-5	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999962163863753	WITHOUT_CLASSIFICATION	3.783613624577068E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9993468138200411	WITHOUT_CLASSIFICATION	6.531861799588311E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999997529883226	WITHOUT_CLASSIFICATION	2.470116774251867E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999997156746353	WITHOUT_CLASSIFICATION	2.843253647856731E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999854748775021	WITHOUT_CLASSIFICATION	1.4525122498006717E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999997528081783	WITHOUT_CLASSIFICATION	2.471918216880494E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999954428563851	WITHOUT_CLASSIFICATION	4.55714361494912E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999994569779546	WITHOUT_CLASSIFICATION	5.43022045340244E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999997235276946	WITHOUT_CLASSIFICATION	2.764723053996828E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999978384598578	WITHOUT_CLASSIFICATION	2.161540142156897E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999852655559255	WITHOUT_CLASSIFICATION	1.4734444074480953E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999688507668855	WITHOUT_CLASSIFICATION	3.1149233114524675E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999991943693914	WITHOUT_CLASSIFICATION	8.056306084587834E-7	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999991689648485	WITHOUT_CLASSIFICATION	8.310351515292545E-7	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999987453306004	WITHOUT_CLASSIFICATION	1.2546693995044597E-6	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999983214070413	WITHOUT_CLASSIFICATION	1.678592958690953E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999208941986805	WITHOUT_CLASSIFICATION	7.910580131953924E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999440066247629	WITHOUT_CLASSIFICATION	5.599337523711742E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989082623781	WITHOUT_CLASSIFICATION	1.091737621791267E-6	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993884149619	WITHOUT_CLASSIFICATION	6.115850380984128E-7	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999794592093082	WITHOUT_CLASSIFICATION	2.054079069171722E-5	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999584513635869	WITHOUT_CLASSIFICATION	4.154863641301626E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999999845122723	WITHOUT_CLASSIFICATION	1.5487727697686006E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999994764645436	WITHOUT_CLASSIFICATION	5.235354564892538E-7	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999801870998339	WITHOUT_CLASSIFICATION	1.981290016608169E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999866645911947	WITHOUT_CLASSIFICATION	1.333540880533736E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999994419904596	WITHOUT_CLASSIFICATION	5.580095402594193E-7	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999943874227661	WITHOUT_CLASSIFICATION	5.6125772339311E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997208388445452	WITHOUT_CLASSIFICATION	2.791611554548031E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999980697353401	WITHOUT_CLASSIFICATION	1.930264659815075E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999862561646364	WITHOUT_CLASSIFICATION	1.3743835363541563E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999968897876925	WITHOUT_CLASSIFICATION	3.110212307366629E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999975920761	WITHOUT_CLASSIFICATION	2.4079239049936245E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999899908450677	WITHOUT_CLASSIFICATION	1.0009154932245619E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999928747205726	WITHOUT_CLASSIFICATION	7.125279427297089E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999980892818814	WITHOUT_CLASSIFICATION	1.910718118639967E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999885505133987	WITHOUT_CLASSIFICATION	1.1449486601211444E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999990275758551	WITHOUT_CLASSIFICATION	9.724241448219592E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999828942530723	WITHOUT_CLASSIFICATION	1.710574692771495E-5	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997812967139	WITHOUT_CLASSIFICATION	2.1870328605685918E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999963689482487	WITHOUT_CLASSIFICATION	3.6310517513118088E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999825994940754	WITHOUT_CLASSIFICATION	1.7400505924595782E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999946783230858	WITHOUT_CLASSIFICATION	5.3216769142422244E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999985167999498	WITHOUT_CLASSIFICATION	1.4832000502512768E-6	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999995314702621	WITHOUT_CLASSIFICATION	4.6852973790190054E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999988155722159	WITHOUT_CLASSIFICATION	1.1844277840271258E-6	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999997451054786	WITHOUT_CLASSIFICATION	2.5489452139272943E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989082623781	WITHOUT_CLASSIFICATION	1.091737621791267E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999975410158902	WITHOUT_CLASSIFICATION	2.4589841097404647E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999985731692982	WITHOUT_CLASSIFICATION	1.4268307017750954E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999896644592623	WITHOUT_CLASSIFICATION	1.0335540737790379E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969418389981	WITHOUT_CLASSIFICATION	3.058161001833301E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999869247046466	WITHOUT_CLASSIFICATION	1.3075295353468883E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999492800479373	WITHOUT_CLASSIFICATION	5.071995206282347E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995390800792	WITHOUT_CLASSIFICATION	4.6091992067182577E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999994778751918	WITHOUT_CLASSIFICATION	5.221248081865678E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998788962334	WITHOUT_CLASSIFICATION	1.2110376657377913E-7	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999992868905523	WITHOUT_CLASSIFICATION	7.131094477137448E-7	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999987314664096	WITHOUT_CLASSIFICATION	1.268533590407223E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998038510649804	WITHOUT_CLASSIFICATION	1.9614893501966642E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999985198564396	WITHOUT_CLASSIFICATION	1.480143560392869E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999980176559508	WITHOUT_CLASSIFICATION	1.982344049321109E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999399560254455	WITHOUT_CLASSIFICATION	6.004397455460707E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999989738885842	WITHOUT_CLASSIFICATION	1.0261114158266462E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999992189649419	WITHOUT_CLASSIFICATION	7.81035058187736E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999958139464948	WITHOUT_CLASSIFICATION	4.186053505065711E-6	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999911891551271	WITHOUT_CLASSIFICATION	8.810844872984723E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999822592562	WITHOUT_CLASSIFICATION	1.7740743690333213E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999911783476755	WITHOUT_CLASSIFICATION	8.821652324515437E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999911783476755	WITHOUT_CLASSIFICATION	8.821652324515437E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999941782048649	WITHOUT_CLASSIFICATION	5.821795135020402E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999986836995622	WITHOUT_CLASSIFICATION	1.316300437864338E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999903115724229	WITHOUT_CLASSIFICATION	9.688427577005755E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999982938408772	WITHOUT_CLASSIFICATION	1.7061591227263896E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999672789766273	WITHOUT_CLASSIFICATION	3.272102337267595E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999928409806207	WITHOUT_CLASSIFICATION	7.159019379339068E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999425074533599	WITHOUT_CLASSIFICATION	5.749254664016723E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999982680428885	WITHOUT_CLASSIFICATION	1.731957111431389E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999982680428885	WITHOUT_CLASSIFICATION	1.731957111431389E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999899600878642	WITHOUT_CLASSIFICATION	1.0039912135767861E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999468321799906	WITHOUT_CLASSIFICATION	5.3167820009413244E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999911034429068	WITHOUT_CLASSIFICATION	8.896557093189289E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975620431852	WITHOUT_CLASSIFICATION	2.437956814778021E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975620431852	WITHOUT_CLASSIFICATION	2.437956814778021E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999975620431852	WITHOUT_CLASSIFICATION	2.437956814778021E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.999358281811403	WITHOUT_CLASSIFICATION	6.417181885970543E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999694681316	WITHOUT_CLASSIFICATION	3.053186838931709E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999991794797911	WITHOUT_CLASSIFICATION	8.205202088777726E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999924941681354	WITHOUT_CLASSIFICATION	7.505831864543014E-6	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999654351486452	WITHOUT_CLASSIFICATION	3.45648513548644E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999991044690754	WITHOUT_CLASSIFICATION	8.95530924670958E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999994879129754	WITHOUT_CLASSIFICATION	5.120870245785811E-7	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999836141157534	WITHOUT_CLASSIFICATION	1.638588424658537E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999986217902463	WITHOUT_CLASSIFICATION	1.378209753682655E-6	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999780455173708	WITHOUT_CLASSIFICATION	2.1954482629177532E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999787396924487	WITHOUT_CLASSIFICATION	2.1260307551387765E-5	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999769568969894	WITHOUT_CLASSIFICATION	2.3043103010533866E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999987181984477	WITHOUT_CLASSIFICATION	1.2818015522681872E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999996552806583	WITHOUT_CLASSIFICATION	3.4471934171471817E-7	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999952291527033	WITHOUT_CLASSIFICATION	4.770847296603927E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999983529902177	WITHOUT_CLASSIFICATION	1.6470097823081758E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998707994544788	WITHOUT_CLASSIFICATION	1.2920054552115356E-4	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998707994544788	WITHOUT_CLASSIFICATION	1.2920054552115356E-4	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999143171207532	WITHOUT_CLASSIFICATION	8.5682879246846E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999143171207532	WITHOUT_CLASSIFICATION	8.5682879246846E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999147350310056	WITHOUT_CLASSIFICATION	8.526496899443161E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998888214525563	WITHOUT_CLASSIFICATION	1.1117854744364551E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998888214525563	WITHOUT_CLASSIFICATION	1.1117854744364551E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999958950602793	WITHOUT_CLASSIFICATION	4.104939720696124E-5	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999286083755395	WITHOUT_CLASSIFICATION	7.139162446043523E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999838811375129	WITHOUT_CLASSIFICATION	1.6118862487024045E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999911783476755	WITHOUT_CLASSIFICATION	8.821652324515437E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999416567388704	WITHOUT_CLASSIFICATION	5.8343261129539074E-5	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999286083755395	WITHOUT_CLASSIFICATION	7.139162446043523E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.999416719092944	WITHOUT_CLASSIFICATION	5.832809070559701E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999795194541651	WITHOUT_CLASSIFICATION	2.0480545834879208E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999184409702361	WITHOUT_CLASSIFICATION	8.155902976393862E-5	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999607107838328	WITHOUT_CLASSIFICATION	3.928921616711815E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999877434532479	WITHOUT_CLASSIFICATION	1.2256546752046044E-5	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999959615494487	WITHOUT_CLASSIFICATION	4.038450551282221E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999941893721624	WITHOUT_CLASSIFICATION	5.810627837609646E-6	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998859576401262	WITHOUT_CLASSIFICATION	1.140423598738129E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999826493086712	WITHOUT_CLASSIFICATION	1.7350691328877034E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999957905380197	WITHOUT_CLASSIFICATION	4.209461980376225E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999589506969	WITHOUT_CLASSIFICATION	4.1049303100519623E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999285288665137	WITHOUT_CLASSIFICATION	7.147113348628578E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999987815298001	WITHOUT_CLASSIFICATION	1.218470199910163E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999611356885814	WITHOUT_CLASSIFICATION	3.8864311418650354E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999888590535398	WITHOUT_CLASSIFICATION	1.1140946460132044E-5	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999998649592913	WITHOUT_CLASSIFICATION	1.3504070870508603E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999986334015021	WITHOUT_CLASSIFICATION	1.366598497975229E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999684498738812	WITHOUT_CLASSIFICATION	3.1550126118731935E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999684498738812	WITHOUT_CLASSIFICATION	3.1550126118731935E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999985485260973	WITHOUT_CLASSIFICATION	1.4514739027689153E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997051273125	WITHOUT_CLASSIFICATION	2.948726875048463E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999989621025698	WITHOUT_CLASSIFICATION	1.0378974302300847E-6	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999906421796563	WITHOUT_CLASSIFICATION	9.357820343652668E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999971629514269	WITHOUT_CLASSIFICATION	2.837048573028306E-6	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999998305748918	WITHOUT_CLASSIFICATION	1.6942510814318797E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999993077751765	WITHOUT_CLASSIFICATION	6.922248234713425E-7	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999923317869979	WITHOUT_CLASSIFICATION	7.66821300219544E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999895908002844	WITHOUT_CLASSIFICATION	1.0409199715563169E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999988749649482	WITHOUT_CLASSIFICATION	1.1250350517938213E-6	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999962850230308	WITHOUT_CLASSIFICATION	3.7149769690900928E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998038510649804	WITHOUT_CLASSIFICATION	1.9614893501966642E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999061592934	WITHOUT_CLASSIFICATION	9.384070665940127E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999988181431013	WITHOUT_CLASSIFICATION	1.1818568986565039E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999946283819682	WITHOUT_CLASSIFICATION	5.371618031868891E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999905978922823	WITHOUT_CLASSIFICATION	9.402107717667259E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999096770775	WITHOUT_CLASSIFICATION	9.032292250654814E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999096770775	WITHOUT_CLASSIFICATION	9.032292250654814E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999657881659249	WITHOUT_CLASSIFICATION	3.421183407511391E-5	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999977444354661	WITHOUT_CLASSIFICATION	2.2555645338995638E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999878972640515	WITHOUT_CLASSIFICATION	1.2102735948580076E-5	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999254955189348	WITHOUT_CLASSIFICATION	7.450448106522629E-5	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999855697833125	WITHOUT_CLASSIFICATION	1.4430216687609037E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999809934010473	WITHOUT_CLASSIFICATION	1.9006598952707189E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998758311548	WITHOUT_CLASSIFICATION	1.2416884525909856E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999261146685218	WITHOUT_CLASSIFICATION	7.388533147822161E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999985290486584	WITHOUT_CLASSIFICATION	1.4709513416701114E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999919573630598	WITHOUT_CLASSIFICATION	8.042636940171897E-6	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999992544450818	WITHOUT_CLASSIFICATION	7.455549182547861E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999261146685218	WITHOUT_CLASSIFICATION	7.388533147822161E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999946957894288	WITHOUT_CLASSIFICATION	5.304210571167472E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999667834728073	WITHOUT_CLASSIFICATION	3.321652719261329E-5	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999956664316905	WITHOUT_CLASSIFICATION	4.333568309483034E-6	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.999993111035402	WITHOUT_CLASSIFICATION	6.888964598015382E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999983580334755	WITHOUT_CLASSIFICATION	1.6419665245107027E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999111979713	WITHOUT_CLASSIFICATION	8.880202877155818E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996676778887	WITHOUT_CLASSIFICATION	3.3232211119760197E-7	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999811892149942	WITHOUT_CLASSIFICATION	1.8810785005782327E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999342072503	WITHOUT_CLASSIFICATION	6.579274972693779E-8	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999987797564205	WITHOUT_CLASSIFICATION	1.22024357948702E-6	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999994571621571	WITHOUT_CLASSIFICATION	5.428378428782966E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999994955972286	WITHOUT_CLASSIFICATION	5.044027714076111E-7	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999986382400121	WITHOUT_CLASSIFICATION	1.3617599878693839E-6	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997918122969	WITHOUT_CLASSIFICATION	2.0818770314273015E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999553387224396	WITHOUT_CLASSIFICATION	4.466127756033402E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999998959916538	WITHOUT_CLASSIFICATION	1.040083460924938E-7	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999990439923724	WITHOUT_CLASSIFICATION	9.560076276009325E-7	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999852927365455	WITHOUT_CLASSIFICATION	1.4707263454515755E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999833184465224	WITHOUT_CLASSIFICATION	1.6681553477509197E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999995829589977	WITHOUT_CLASSIFICATION	4.1704100229485986E-7	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999840531590664	WITHOUT_CLASSIFICATION	1.5946840933560314E-5	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999994594443866	WITHOUT_CLASSIFICATION	5.405556134334075E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999265093100481	WITHOUT_CLASSIFICATION	7.349068995181315E-5	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999648769723316	WITHOUT_CLASSIFICATION	3.5123027668364184E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999031651144	WITHOUT_CLASSIFICATION	9.683488559134966E-7	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825580262505	WITHOUT_CLASSIFICATION	1.7441973749618198E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.99999471253586	WITHOUT_CLASSIFICATION	5.2874641399801385E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999996235884933	WITHOUT_CLASSIFICATION	3.7641150669863355E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.99999989677057	WITHOUT_CLASSIFICATION	1.0322943000521815E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999883146994024	WITHOUT_CLASSIFICATION	1.1685300597503566E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999162128316	WITHOUT_CLASSIFICATION	8.378716845258465E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9997559856712958	WITHOUT_CLASSIFICATION	2.4401432870425343E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999999622595156	WITHOUT_CLASSIFICATION	3.774048441041623E-7	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999983427016205	WITHOUT_CLASSIFICATION	1.6572983795015512E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999578319557	WITHOUT_CLASSIFICATION	4.216804421799344E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999869548677898	WITHOUT_CLASSIFICATION	1.3045132210298698E-5	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999964144220848	WITHOUT_CLASSIFICATION	3.585577915328583E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999820488653566	WITHOUT_CLASSIFICATION	1.795113464344685E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999975226208084	WITHOUT_CLASSIFICATION	2.477379191581101E-6	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999970094480146	WITHOUT_CLASSIFICATION	2.9905519853286124E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999690847352536	WITHOUT_CLASSIFICATION	3.091526474632866E-5	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999430790111182	WITHOUT_CLASSIFICATION	5.6920988881793234E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999991688961156	WITHOUT_CLASSIFICATION	8.311038844435015E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997845128651	WITHOUT_CLASSIFICATION	2.1548713493830566E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999472030514189	WITHOUT_CLASSIFICATION	5.279694858101701E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999926132372741	WITHOUT_CLASSIFICATION	7.386762725863288E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999628559132508	WITHOUT_CLASSIFICATION	3.7144086749095004E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999964842535269	WITHOUT_CLASSIFICATION	3.515746472955267E-6	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999900042952613	WITHOUT_CLASSIFICATION	9.995704738637447E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999963974726023	WITHOUT_CLASSIFICATION	3.6025273977632656E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991298342352	WITHOUT_CLASSIFICATION	8.701657648358268E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999357932277	WITHOUT_CLASSIFICATION	6.420677229612073E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998919519811	WITHOUT_CLASSIFICATION	1.0804801884791294E-7	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999879499852361	WITHOUT_CLASSIFICATION	1.2050014763829234E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999573263386	WITHOUT_CLASSIFICATION	4.267366128621053E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999984834388184	WITHOUT_CLASSIFICATION	1.5165611816686333E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994816840826	WITHOUT_CLASSIFICATION	5.183159175255223E-7	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999987251440133	WITHOUT_CLASSIFICATION	1.2748559867068002E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.999993281814752	WITHOUT_CLASSIFICATION	6.718185247945899E-6	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999981765048341	WITHOUT_CLASSIFICATION	1.8234951658663416E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999935872823456	WITHOUT_CLASSIFICATION	6.412717654492791E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999971204688359	WITHOUT_CLASSIFICATION	2.8795311641450477E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999984854164888	WITHOUT_CLASSIFICATION	1.5145835111393895E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9989266993346585	WITHOUT_CLASSIFICATION	0.001073300665341482	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999233722223442	WITHOUT_CLASSIFICATION	7.66277776558392E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9996853336571954	WITHOUT_CLASSIFICATION	3.146663428046373E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991298342352	WITHOUT_CLASSIFICATION	8.701657648358268E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999665744817888	WITHOUT_CLASSIFICATION	3.3425518211216674E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999933892003974	WITHOUT_CLASSIFICATION	6.610799602675585E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998912655827111	WITHOUT_CLASSIFICATION	1.087344172888668E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999987728483982	WITHOUT_CLASSIFICATION	1.2271516017319408E-6	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999921860490698	WITHOUT_CLASSIFICATION	7.813950930315375E-6	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999876128489736	WITHOUT_CLASSIFICATION	1.2387151026395713E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999985290486584	WITHOUT_CLASSIFICATION	1.4709513416701114E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999872630178065	WITHOUT_CLASSIFICATION	1.273698219341779E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999578319557	WITHOUT_CLASSIFICATION	4.216804421799344E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999862182660084	WITHOUT_CLASSIFICATION	1.3781733991599295E-5	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999994417353123	WITHOUT_CLASSIFICATION	5.582646876046207E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999965974907639	WITHOUT_CLASSIFICATION	3.4025092361051025E-6	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999962714038343	WITHOUT_CLASSIFICATION	3.728596165590875E-6	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999991982090084	WITHOUT_CLASSIFICATION	8.017909916043947E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9997211850532217	WITHOUT_CLASSIFICATION	2.788149467783012E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999662378127	WITHOUT_CLASSIFICATION	3.3762187295598673E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999990214020641	WITHOUT_CLASSIFICATION	9.785979359483144E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9992797427135492	WITHOUT_CLASSIFICATION	7.202572864508779E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983685730736	WITHOUT_CLASSIFICATION	1.631426926390105E-6	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999978096446418	WITHOUT_CLASSIFICATION	2.190355358148691E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999989395457337	WITHOUT_CLASSIFICATION	1.0604542663225802E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999987187077612	WITHOUT_CLASSIFICATION	1.2812922387759878E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999987187077612	WITHOUT_CLASSIFICATION	1.2812922387759878E-6	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999948437534363	WITHOUT_CLASSIFICATION	5.1562465636851585E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999918414749308	WITHOUT_CLASSIFICATION	8.158525069187772E-6	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999969901481701	WITHOUT_CLASSIFICATION	3.009851829936456E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9998925174255486	WITHOUT_CLASSIFICATION	1.0748257445135635E-4	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999855840285	WITHOUT_CLASSIFICATION	1.4415971540312236E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999949632341516	WITHOUT_CLASSIFICATION	5.0367658484102075E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999989941494946	WITHOUT_CLASSIFICATION	1.0058505054597463E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999760661675757	WITHOUT_CLASSIFICATION	2.393383242430303E-4	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999991518275939	WITHOUT_CLASSIFICATION	8.481724060478166E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999209231628	WITHOUT_CLASSIFICATION	7.907683720361655E-8	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999996604718749	WITHOUT_CLASSIFICATION	3.395281250920728E-6	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.999996265977699	WITHOUT_CLASSIFICATION	3.734022301119294E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999993834624621	WITHOUT_CLASSIFICATION	6.165375377771316E-7	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996230324815	WITHOUT_CLASSIFICATION	3.769675184367704E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999969610364586	WITHOUT_CLASSIFICATION	3.038963541422341E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999991377302274	WITHOUT_CLASSIFICATION	8.622697725859437E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999976564095249	WITHOUT_CLASSIFICATION	2.343590475099806E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999997455521641	WITHOUT_CLASSIFICATION	2.5444783583221854E-7	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999975045983525	WITHOUT_CLASSIFICATION	2.4954016475588863E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999039974012085	WITHOUT_CLASSIFICATION	9.6002598791471E-5	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.99972501739045	WITHOUT_CLASSIFICATION	2.749826095500503E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999995545084915	WITHOUT_CLASSIFICATION	4.454915084440822E-7	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999994362756416	WITHOUT_CLASSIFICATION	5.637243584519814E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9998862834419787	WITHOUT_CLASSIFICATION	1.1371655802130521E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999969809049272	WITHOUT_CLASSIFICATION	3.019095072766623E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900833342606	WITHOUT_CLASSIFICATION	9.91666573931468E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994353657857	WITHOUT_CLASSIFICATION	5.646342142333784E-7	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999986921955624	WITHOUT_CLASSIFICATION	1.3078044376097675E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999810270393472	WITHOUT_CLASSIFICATION	1.8972960652857027E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999919839071055	WITHOUT_CLASSIFICATION	8.016092894464577E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.998530943242133	WITHOUT_CLASSIFICATION	0.001469056757866989	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.999814077680616	WITHOUT_CLASSIFICATION	1.8592231938390947E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999934766181723	WITHOUT_CLASSIFICATION	6.523381827746512E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999985150032982	WITHOUT_CLASSIFICATION	1.484996701858506E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999952123467072	WITHOUT_CLASSIFICATION	4.787653292781169E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999951940703697	WITHOUT_CLASSIFICATION	4.805929630271191E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999764616132422	WITHOUT_CLASSIFICATION	2.3538386757869207E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999989452214052	WITHOUT_CLASSIFICATION	1.0547785948051735E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999942513014586	WITHOUT_CLASSIFICATION	5.748698541402498E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999973608777082	WITHOUT_CLASSIFICATION	2.6391222918009523E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997588018228	WITHOUT_CLASSIFICATION	2.411981771971844E-6	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999997440591937	WITHOUT_CLASSIFICATION	2.559408062852661E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998291535324059	WITHOUT_CLASSIFICATION	1.708464675941669E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999754156445455	WITHOUT_CLASSIFICATION	2.4584355454425483E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.99998820431529	WITHOUT_CLASSIFICATION	1.1795684710005982E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990726888706	WITHOUT_CLASSIFICATION	9.273111294906411E-7	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9776609847085496	WITHOUT_CLASSIFICATION	0.02233901529145038	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965206647122	WITHOUT_CLASSIFICATION	3.4793352876877154E-6	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999929011832824	WITHOUT_CLASSIFICATION	7.0988167175280785E-6	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999983887563857	WITHOUT_CLASSIFICATION	1.611243614256042E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998889854754	WITHOUT_CLASSIFICATION	1.1101452459671294E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999988440029567	WITHOUT_CLASSIFICATION	1.1559970432682538E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999916383559999	WITHOUT_CLASSIFICATION	8.361644000166569E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999987617176848	WITHOUT_CLASSIFICATION	1.2382823151515632E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999936711797742	WITHOUT_CLASSIFICATION	6.328820225764989E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999994846075405	WITHOUT_CLASSIFICATION	5.153924594129532E-7	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999989148087686	WITHOUT_CLASSIFICATION	1.0851912313961342E-5	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999921032379225	WITHOUT_CLASSIFICATION	7.89676207749149E-6	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999985042114227	WITHOUT_CLASSIFICATION	1.495788577362618E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999999054163368	WITHOUT_CLASSIFICATION	9.45836631977402E-7	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.99995430828007	WITHOUT_CLASSIFICATION	4.569171992999877E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999581259296074	WITHOUT_CLASSIFICATION	4.187407039258889E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999949110713829	WITHOUT_CLASSIFICATION	5.088928617061773E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999808979430179	WITHOUT_CLASSIFICATION	1.9102056982043495E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999920605787039	WITHOUT_CLASSIFICATION	7.93942129611719E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999992059530209	WITHOUT_CLASSIFICATION	7.940469790752278E-7	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999959215667801	WITHOUT_CLASSIFICATION	4.078433219860341E-6	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995703972238	WITHOUT_CLASSIFICATION	4.296027762464778E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999991190963476	WITHOUT_CLASSIFICATION	8.809036524689918E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999998887231678	WITHOUT_CLASSIFICATION	1.1127683220487294E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999991190963476	WITHOUT_CLASSIFICATION	8.809036524689918E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999991203086636	WITHOUT_CLASSIFICATION	8.796913364163813E-7	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999985119855036	WITHOUT_CLASSIFICATION	1.4880144964654516E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999953346688985	WITHOUT_CLASSIFICATION	4.665331101550069E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999909880708783	WITHOUT_CLASSIFICATION	9.011929121784824E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999970434347355	WITHOUT_CLASSIFICATION	2.9565652645904523E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999988595015659	WITHOUT_CLASSIFICATION	1.1404984341058665E-5	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997856873076	WITHOUT_CLASSIFICATION	2.1431269236226335E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999974768163885	WITHOUT_CLASSIFICATION	2.5231836115687824E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999979212364885	WITHOUT_CLASSIFICATION	2.078763511557012E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999996815771698	WITHOUT_CLASSIFICATION	3.1842283024750484E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999146738835	WITHOUT_CLASSIFICATION	8.532611650396073E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999996723356629	WITHOUT_CLASSIFICATION	3.276643372036763E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999921242725236	WITHOUT_CLASSIFICATION	7.875727476454171E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9989908462680716	WITHOUT_CLASSIFICATION	0.001009153731928416	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999986322757578	WITHOUT_CLASSIFICATION	1.3677242421335247E-6	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999998241670251	WITHOUT_CLASSIFICATION	1.7583297489379675E-6	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999952895494729	WITHOUT_CLASSIFICATION	4.710450527143739E-6	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999968666381345	WITHOUT_CLASSIFICATION	3.133361865409453E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999946083361877	WITHOUT_CLASSIFICATION	5.391663812221135E-6	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999889887165678	WITHOUT_CLASSIFICATION	1.1011283432234814E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999930957598689	WITHOUT_CLASSIFICATION	6.904240131090223E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.999957189334779	WITHOUT_CLASSIFICATION	4.2810665221013574E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999674596337662	WITHOUT_CLASSIFICATION	3.254036623370472E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998190020746485	WITHOUT_CLASSIFICATION	1.8099792535153196E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999995631583317	WITHOUT_CLASSIFICATION	4.368416683021201E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9963299605209315	WITHOUT_CLASSIFICATION	0.003670039479068443	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999758691936514	WITHOUT_CLASSIFICATION	2.413080634854951E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999865565891679	WITHOUT_CLASSIFICATION	1.344341083203067E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999978116221725	WITHOUT_CLASSIFICATION	2.1883778276098915E-6	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9998835533087314	WITHOUT_CLASSIFICATION	1.1644669126868393E-4	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999707029866142	WITHOUT_CLASSIFICATION	2.9297013385811893E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9993843215988227	WITHOUT_CLASSIFICATION	6.156784011771922E-4	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999990889798034	WITHOUT_CLASSIFICATION	9.11020196727391E-7	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999947228619969	WITHOUT_CLASSIFICATION	5.277138003158399E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999929804660606	WITHOUT_CLASSIFICATION	7.0195339394242185E-6	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999478171038674	WITHOUT_CLASSIFICATION	5.21828961325628E-5	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999843303875496	WITHOUT_CLASSIFICATION	1.5669612450369965E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999981285840321	WITHOUT_CLASSIFICATION	1.8714159678269822E-6	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999597834237385	WITHOUT_CLASSIFICATION	4.021657626155926E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999918146847261	WITHOUT_CLASSIFICATION	8.185315273879239E-6	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999960433006326	WITHOUT_CLASSIFICATION	3.9566993673825655E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.999992072674782	WITHOUT_CLASSIFICATION	7.927325217997662E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999967760309634	WITHOUT_CLASSIFICATION	3.223969036596356E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9963299605209315	WITHOUT_CLASSIFICATION	0.003670039479068443	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999416253700223	WITHOUT_CLASSIFICATION	5.837462997762212E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999999179301551	WITHOUT_CLASSIFICATION	8.206984489432366E-7	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999839509123881	WITHOUT_CLASSIFICATION	1.6049087611889882E-5	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999717867305503	WITHOUT_CLASSIFICATION	2.8213269449587682E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999895239393916	WITHOUT_CLASSIFICATION	1.047606060841642E-5	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999943330125617	WITHOUT_CLASSIFICATION	5.666987438242002E-6	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999952775358366	WITHOUT_CLASSIFICATION	4.7224641633948315E-6	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999868025949301	WITHOUT_CLASSIFICATION	1.3197405069936355E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999974472884595	WITHOUT_CLASSIFICATION	2.5527115404284272E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999881743651745	WITHOUT_CLASSIFICATION	1.1825634825421278E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.999987249472887	WITHOUT_CLASSIFICATION	1.2750527112992022E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999997037754691	WITHOUT_CLASSIFICATION	2.9622453091807266E-7	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999972664254963	WITHOUT_CLASSIFICATION	2.733574503693291E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999502605999926	WITHOUT_CLASSIFICATION	4.973940000733081E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999890577271491	WITHOUT_CLASSIFICATION	1.0942272850902169E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999996283476345	WITHOUT_CLASSIFICATION	3.716523655006222E-6	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999827679244373	WITHOUT_CLASSIFICATION	1.723207556270688E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999871859896636	WITHOUT_CLASSIFICATION	1.2814010336327336E-5	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999999423626965	WITHOUT_CLASSIFICATION	5.763730350013449E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999416253700223	WITHOUT_CLASSIFICATION	5.837462997762212E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999969070087691	WITHOUT_CLASSIFICATION	3.092991230829786E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999983003903461	WITHOUT_CLASSIFICATION	1.6996096538964048E-6	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999948764224034	WITHOUT_CLASSIFICATION	5.123577596672358E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999471963745411	WITHOUT_CLASSIFICATION	5.280362545881896E-5	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999955248873915	WITHOUT_CLASSIFICATION	4.475112608492045E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998535444082036	WITHOUT_CLASSIFICATION	1.4645559179632893E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998535444082036	WITHOUT_CLASSIFICATION	1.4645559179632893E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999888366379585	WITHOUT_CLASSIFICATION	1.1163362041559487E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998535444082036	WITHOUT_CLASSIFICATION	1.4645559179632893E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998535444082036	WITHOUT_CLASSIFICATION	1.4645559179632893E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999784424217227	WITHOUT_CLASSIFICATION	2.1557578277178408E-5	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999842701781462	WITHOUT_CLASSIFICATION	1.5729821853762743E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999997992656687	WITHOUT_CLASSIFICATION	2.0073433129993437E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999973755972394	WITHOUT_CLASSIFICATION	2.624402760598695E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999427857397943	WITHOUT_CLASSIFICATION	5.721426020572118E-5	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999880818511154	WITHOUT_CLASSIFICATION	1.1918148884536222E-5	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999967025654172	WITHOUT_CLASSIFICATION	3.2974345827571812E-6	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999994347360801	WITHOUT_CLASSIFICATION	5.652639199759855E-7	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999902283606535	WITHOUT_CLASSIFICATION	9.771639346454725E-6	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999939589471793	WITHOUT_CLASSIFICATION	6.041052820701117E-5	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999959565507666	WITHOUT_CLASSIFICATION	4.043449233386296E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997178318743158	WITHOUT_CLASSIFICATION	2.821681256841528E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999762897720115	WITHOUT_CLASSIFICATION	2.3710227988521134E-5	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999856546790149	WITHOUT_CLASSIFICATION	1.4345320985089368E-5	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999939117852846	WITHOUT_CLASSIFICATION	6.088214715399649E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997591084718209	WITHOUT_CLASSIFICATION	2.4089152817896443E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999885192496584	WITHOUT_CLASSIFICATION	1.148075034168203E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999905271730298	WITHOUT_CLASSIFICATION	9.472826970188884E-6	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999985569115227	WITHOUT_CLASSIFICATION	1.4430884773008275E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999869437312201	WITHOUT_CLASSIFICATION	1.3056268779871774E-5	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999871863844924	WITHOUT_CLASSIFICATION	1.2813615507713934E-5	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999982254157331	WITHOUT_CLASSIFICATION	1.7745842669615791E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999885192496584	WITHOUT_CLASSIFICATION	1.148075034168203E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999758691936514	WITHOUT_CLASSIFICATION	2.413080634854951E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999957487551975	WITHOUT_CLASSIFICATION	4.2512448025305354E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999801046211666	WITHOUT_CLASSIFICATION	1.989537883339088E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999053583146775	WITHOUT_CLASSIFICATION	9.464168532243929E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999843835050386	WITHOUT_CLASSIFICATION	1.5616494961391837E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999993798890909	WITHOUT_CLASSIFICATION	6.201109091686972E-7	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999267590285134	WITHOUT_CLASSIFICATION	7.324097148669187E-5	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999920736988941	WITHOUT_CLASSIFICATION	7.926301105950993E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999856559547954	WITHOUT_CLASSIFICATION	1.4344045204638215E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999505228985495	WITHOUT_CLASSIFICATION	4.947710145046643E-5	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999800114428103	WITHOUT_CLASSIFICATION	1.9988557189651933E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997353668584	WITHOUT_CLASSIFICATION	2.646331416648313E-7	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999907472448755	WITHOUT_CLASSIFICATION	9.252755124531972E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999996058893578	WITHOUT_CLASSIFICATION	3.941106421965279E-7	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999971684118345	WITHOUT_CLASSIFICATION	2.8315881654867476E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999963008650108	WITHOUT_CLASSIFICATION	3.6991349893504294E-6	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999896365147216	WITHOUT_CLASSIFICATION	1.0363485278351387E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999946543629524	WITHOUT_CLASSIFICATION	5.345637047648548E-6	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999995731222648	WITHOUT_CLASSIFICATION	4.2687773506147734E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999990017354163	WITHOUT_CLASSIFICATION	9.982645837281523E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999844984584649	WITHOUT_CLASSIFICATION	1.5501541535059826E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999948259529418	WITHOUT_CLASSIFICATION	5.174047058226107E-6	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999999758649477	WITHOUT_CLASSIFICATION	2.4135052300978944E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999856559547954	WITHOUT_CLASSIFICATION	1.4344045204638215E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999888500597349	WITHOUT_CLASSIFICATION	1.1149940264985781E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999972763102232	WITHOUT_CLASSIFICATION	2.723689776876136E-6	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999987216611491	WITHOUT_CLASSIFICATION	1.2783388509226048E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999932220795815	WITHOUT_CLASSIFICATION	6.777920418385319E-6	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988349038741	WITHOUT_CLASSIFICATION	1.16509612588157E-6	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999840357396995	WITHOUT_CLASSIFICATION	1.596426030047279E-5	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999616068283186	WITHOUT_CLASSIFICATION	3.839317168142914E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999893339537484	WITHOUT_CLASSIFICATION	1.0666046251422549E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999938169330259	WITHOUT_CLASSIFICATION	6.183066974107907E-6	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999674027937754	WITHOUT_CLASSIFICATION	3.25972062246905E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999998142216575	WITHOUT_CLASSIFICATION	1.857783425022975E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9998954766759088	WITHOUT_CLASSIFICATION	1.045233240911882E-4	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999813551954571	WITHOUT_CLASSIFICATION	1.8644804542966722E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999988714107048	WITHOUT_CLASSIFICATION	1.1285892952472573E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999896986593393	WITHOUT_CLASSIFICATION	1.0301340660668079E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998589133391	WITHOUT_CLASSIFICATION	1.4108666092225655E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999998142216575	WITHOUT_CLASSIFICATION	1.857783425022975E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999755320564236	WITHOUT_CLASSIFICATION	2.4467943576385718E-5	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999398063541652	WITHOUT_CLASSIFICATION	6.0193645834654485E-5	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999990491162903	WITHOUT_CLASSIFICATION	9.508837097343991E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999970566061792	WITHOUT_CLASSIFICATION	2.9433938208318915E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999718301274391	WITHOUT_CLASSIFICATION	2.8169872561022643E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9975023021747237	WITHOUT_CLASSIFICATION	0.0024976978252762767	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998787498035	WITHOUT_CLASSIFICATION	1.2125019645386257E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962655772825	WITHOUT_CLASSIFICATION	3.7344227174406294E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968586351996	WITHOUT_CLASSIFICATION	3.1413648003550037E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988262335341	WITHOUT_CLASSIFICATION	1.1737664660170239E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984391841009	WITHOUT_CLASSIFICATION	1.5608158990980967E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995327313788	WITHOUT_CLASSIFICATION	4.6726862119478936E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959751915491	WITHOUT_CLASSIFICATION	4.024808450836126E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999959751915491	WITHOUT_CLASSIFICATION	4.024808450836126E-6	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999942882175252	WITHOUT_CLASSIFICATION	5.7117824747797E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999997578442504	WITHOUT_CLASSIFICATION	2.42155749592571E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999965974379349	WITHOUT_CLASSIFICATION	3.402562065108408E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999979980332097	WITHOUT_CLASSIFICATION	2.0019667903645084E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.998462262174376	WITHOUT_CLASSIFICATION	0.0015377378256239878	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938381527761	WITHOUT_CLASSIFICATION	6.161847223822783E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804240702396	WITHOUT_CLASSIFICATION	1.957592976047493E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850305938549	WITHOUT_CLASSIFICATION	1.496940614514677E-5	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999858843028844	WITHOUT_CLASSIFICATION	1.411569711550375E-5	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959863180374	WITHOUT_CLASSIFICATION	4.013681962539823E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938381527761	WITHOUT_CLASSIFICATION	6.161847223822783E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804240702396	WITHOUT_CLASSIFICATION	1.957592976047493E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850305938549	WITHOUT_CLASSIFICATION	1.496940614514677E-5	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999948940332206	WITHOUT_CLASSIFICATION	5.105966779421998E-6	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998972964029588	WITHOUT_CLASSIFICATION	1.027035970411869E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999999384353555	WITHOUT_CLASSIFICATION	6.156464451446325E-7	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999778172863633	WITHOUT_CLASSIFICATION	2.2182713636707906E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999989273669995	WITHOUT_CLASSIFICATION	1.072633000527035E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999994973474217	WITHOUT_CLASSIFICATION	5.026525783881393E-7	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9991424151559458	WITHOUT_CLASSIFICATION	8.575848440540644E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999908966187173	WITHOUT_CLASSIFICATION	9.103381282747737E-6	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9998659335613372	WITHOUT_CLASSIFICATION	1.3406643866275265E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999959656212154	WITHOUT_CLASSIFICATION	4.0343787845031486E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999920744373458	WITHOUT_CLASSIFICATION	7.925562654150338E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991264197509784	WITHOUT_CLASSIFICATION	8.735802490215585E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999774617082817	WITHOUT_CLASSIFICATION	2.2538291718343865E-5	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999987707825928	WITHOUT_CLASSIFICATION	1.2292174072464489E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999138978273	WITHOUT_CLASSIFICATION	8.610217271621212E-8	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999955864659325	WITHOUT_CLASSIFICATION	4.41353406756415E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996559556585414	WITHOUT_CLASSIFICATION	3.440443414586068E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993986089255402	WITHOUT_CLASSIFICATION	6.013910744597622E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999980014038209	WITHOUT_CLASSIFICATION	1.9985961790643555E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9988575486761841	WITHOUT_CLASSIFICATION	0.0011424513238158672	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999998590453182	WITHOUT_CLASSIFICATION	1.4095468180406589E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9982343547948548	WITHOUT_CLASSIFICATION	0.0017656452051451972	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998815135642461	WITHOUT_CLASSIFICATION	1.1848643575384627E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999966487288937	WITHOUT_CLASSIFICATION	3.3512711061669654E-6	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999997862184515	WITHOUT_CLASSIFICATION	2.137815485121858E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999994959275207	WITHOUT_CLASSIFICATION	5.040724792994076E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999510727328116	WITHOUT_CLASSIFICATION	4.892726718827938E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999604676816	WITHOUT_CLASSIFICATION	3.953231839969922E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999777753618068	WITHOUT_CLASSIFICATION	2.2224638193195653E-5	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997065526542	WITHOUT_CLASSIFICATION	2.9344734579011433E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934894811835	WITHOUT_CLASSIFICATION	6.510518816540266E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999980984099603	WITHOUT_CLASSIFICATION	1.9015900397685605E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999980984099603	WITHOUT_CLASSIFICATION	1.9015900397685605E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999976366306612	WITHOUT_CLASSIFICATION	2.3633693387146587E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999997493097427	WITHOUT_CLASSIFICATION	2.5069025732158067E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998052929396571	WITHOUT_CLASSIFICATION	1.947070603428389E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998038510649804	WITHOUT_CLASSIFICATION	1.9614893501966642E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999995383830297	WITHOUT_CLASSIFICATION	4.6161697031381125E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999986370981467	WITHOUT_CLASSIFICATION	1.3629018533430934E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.999878095909019	WITHOUT_CLASSIFICATION	1.2190409098106942E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999960513130065	WITHOUT_CLASSIFICATION	3.948686993481898E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999963088060069	WITHOUT_CLASSIFICATION	3.6911939931517528E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998048778517	WITHOUT_CLASSIFICATION	1.9512214830901207E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983597156982	WITHOUT_CLASSIFICATION	1.6402843018539667E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990982833012	WITHOUT_CLASSIFICATION	9.017166986012291E-7	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937765542664	WITHOUT_CLASSIFICATION	6.223445733541796E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946626170162	WITHOUT_CLASSIFICATION	5.337382983797468E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976454305086	WITHOUT_CLASSIFICATION	2.3545694914487532E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982693835273	WITHOUT_CLASSIFICATION	1.7306164727010606E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991657437773	WITHOUT_CLASSIFICATION	8.342562225918796E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988915440945	WITHOUT_CLASSIFICATION	1.1084559054862038E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970800731293	WITHOUT_CLASSIFICATION	2.9199268708674977E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988417860575	WITHOUT_CLASSIFICATION	1.1582139424615431E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999964432974603	WITHOUT_CLASSIFICATION	3.556702539630249E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9934033266986355	WITHOUT_CLASSIFICATION	0.006596673301364552	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999101783055242	WITHOUT_CLASSIFICATION	8.982169447588303E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997144320851	WITHOUT_CLASSIFICATION	2.855679148091621E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999460778363	WITHOUT_CLASSIFICATION	5.3922163852884E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999702193922709	WITHOUT_CLASSIFICATION	2.978060772896087E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999997515002794	WITHOUT_CLASSIFICATION	2.4849972054964706E-7	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999138405876	WITHOUT_CLASSIFICATION	8.615941236424935E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999101783055242	WITHOUT_CLASSIFICATION	8.982169447588303E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999101783055242	WITHOUT_CLASSIFICATION	8.982169447588303E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999858318220012	WITHOUT_CLASSIFICATION	1.416817799871156E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999944886643334	WITHOUT_CLASSIFICATION	5.51133566670199E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997018407070505	WITHOUT_CLASSIFICATION	2.9815929294956943E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999990298169986	WITHOUT_CLASSIFICATION	9.701830013194956E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999987815298001	WITHOUT_CLASSIFICATION	1.218470199910163E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9988575486761841	WITHOUT_CLASSIFICATION	0.0011424513238158672	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999890682616264	WITHOUT_CLASSIFICATION	1.0931738373539695E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999923124900446	WITHOUT_CLASSIFICATION	7.687509955366007E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999962188470297	WITHOUT_CLASSIFICATION	3.781152970310766E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976992095577	WITHOUT_CLASSIFICATION	2.3007904422498615E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999999678078868	WITHOUT_CLASSIFICATION	3.2192113196281276E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777755476427	WITHOUT_CLASSIFICATION	2.2224452357322183E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999977316659867	WITHOUT_CLASSIFICATION	2.268334013361466E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999977316659867	WITHOUT_CLASSIFICATION	2.268334013361466E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999979013576679	WITHOUT_CLASSIFICATION	2.0986423322088236E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999979013576679	WITHOUT_CLASSIFICATION	2.0986423322088236E-6	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939802014777	WITHOUT_CLASSIFICATION	6.019798522258546E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919080970022	WITHOUT_CLASSIFICATION	8.09190299772164E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999952747420512	WITHOUT_CLASSIFICATION	4.725257948809929E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950478541346	WITHOUT_CLASSIFICATION	4.952145865340497E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999993668303976	WITHOUT_CLASSIFICATION	6.331696024640756E-7	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999922770975117	WITHOUT_CLASSIFICATION	7.72290248828485E-6	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942555253174	WITHOUT_CLASSIFICATION	5.744474682616064E-6	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978442198668	WITHOUT_CLASSIFICATION	2.1557801331668896E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999994417618695	WITHOUT_CLASSIFICATION	5.582381305050932E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999916847797542	WITHOUT_CLASSIFICATION	8.315220245832611E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999807864329718	WITHOUT_CLASSIFICATION	1.9213567028073635E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999984883941824	WITHOUT_CLASSIFICATION	1.5116058175883665E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999999846577393	WITHOUT_CLASSIFICATION	1.5342260689189243E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999963375664536	WITHOUT_CLASSIFICATION	3.6624335464796813E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999893800664437	WITHOUT_CLASSIFICATION	1.0619933556360049E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999996962990045	WITHOUT_CLASSIFICATION	3.0370099549161273E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.999996962990045	WITHOUT_CLASSIFICATION	3.0370099549161273E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999976585040078	WITHOUT_CLASSIFICATION	2.3414959921860476E-6	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999981584560723	WITHOUT_CLASSIFICATION	1.8415439277171807E-6	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999996594092608	WITHOUT_CLASSIFICATION	3.4059073920350553E-7	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999695745890823	WITHOUT_CLASSIFICATION	3.042541091769864E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867821799028	WITHOUT_CLASSIFICATION	1.3217820097220924E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907169394621	WITHOUT_CLASSIFICATION	9.283060538034564E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999984948039731	WITHOUT_CLASSIFICATION	1.5051960268830225E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998339301496	WITHOUT_CLASSIFICATION	1.660698504015009E-6	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999797962277597	WITHOUT_CLASSIFICATION	2.0203772240378255E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999997758742383	WITHOUT_CLASSIFICATION	2.2412576172557987E-7	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999997808300941	WITHOUT_CLASSIFICATION	2.191699059793025E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999928832853934	WITHOUT_CLASSIFICATION	7.116714606658245E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999932189695249	WITHOUT_CLASSIFICATION	6.781030475094818E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999647288110237	WITHOUT_CLASSIFICATION	3.527118897633141E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999987800656432	WITHOUT_CLASSIFICATION	1.2199343568247118E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998636142951679	WITHOUT_CLASSIFICATION	1.3638570483212213E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984038137016	WITHOUT_CLASSIFICATION	1.5961862983415592E-6	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999891953410968	WITHOUT_CLASSIFICATION	1.0804658903100435E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999922428586858	WITHOUT_CLASSIFICATION	7.757141314137472E-6	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999989956478856	WITHOUT_CLASSIFICATION	1.0043521143680972E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999996984737702	WITHOUT_CLASSIFICATION	3.0152622973197327E-7	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999988838925649	WITHOUT_CLASSIFICATION	1.1161074351511983E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999743092872594	WITHOUT_CLASSIFICATION	2.5690712740628205E-5	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999989961196863	WITHOUT_CLASSIFICATION	1.0038803135901783E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999958331611569	WITHOUT_CLASSIFICATION	4.166838843070861E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999955026615156	WITHOUT_CLASSIFICATION	4.497338484342625E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999956609326848	WITHOUT_CLASSIFICATION	4.339067315257415E-6	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999956910994161	WITHOUT_CLASSIFICATION	4.308900583912502E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999952574939976	WITHOUT_CLASSIFICATION	4.742506002315619E-6	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999860384583606	WITHOUT_CLASSIFICATION	1.396154163934184E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999797144086933	WITHOUT_CLASSIFICATION	2.0285591306750424E-5	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999715254866335	WITHOUT_CLASSIFICATION	2.847451336654438E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9994440662081763	WITHOUT_CLASSIFICATION	5.559337918236613E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999975970314346	WITHOUT_CLASSIFICATION	2.402968565399091E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999592839880618	WITHOUT_CLASSIFICATION	4.071601193820306E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999838903708252	WITHOUT_CLASSIFICATION	1.6109629174761987E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986999043271	WITHOUT_CLASSIFICATION	1.3000956729061067E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999988653721076	WITHOUT_CLASSIFICATION	1.1346278924326175E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999936356818547	WITHOUT_CLASSIFICATION	6.364318145369933E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999964484957964	WITHOUT_CLASSIFICATION	3.5515042035929158E-6	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999786081730773	WITHOUT_CLASSIFICATION	2.139182692266228E-5	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997475503131	WITHOUT_CLASSIFICATION	2.5244968696673484E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999842151123004	WITHOUT_CLASSIFICATION	1.5784887699605914E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996551835042	WITHOUT_CLASSIFICATION	3.4481649582625457E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999898738561757	WITHOUT_CLASSIFICATION	1.0126143824381166E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999987366387283	WITHOUT_CLASSIFICATION	1.2633612716722658E-6	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999774664517299	WITHOUT_CLASSIFICATION	2.2533548270004635E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.99994917251615	WITHOUT_CLASSIFICATION	5.0827483849921785E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999976553806966	WITHOUT_CLASSIFICATION	2.3446193033772437E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999992193446825	WITHOUT_CLASSIFICATION	7.806553175101513E-6	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999526480065408	WITHOUT_CLASSIFICATION	4.735199345925458E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9997678321296297	WITHOUT_CLASSIFICATION	2.3216787037027545E-4	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999381928508	WITHOUT_CLASSIFICATION	6.180714920016551E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999237329881845	WITHOUT_CLASSIFICATION	7.626701181556115E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999896775147431	WITHOUT_CLASSIFICATION	1.0322485256942776E-5	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999989186459706	WITHOUT_CLASSIFICATION	1.0813540294911185E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999993199341072	WITHOUT_CLASSIFICATION	6.800658928596462E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999940837808591	WITHOUT_CLASSIFICATION	5.916219140874065E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999946965226566	WITHOUT_CLASSIFICATION	5.303477343380543E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999534265758356	WITHOUT_CLASSIFICATION	4.6573424164337324E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999971561196074	WITHOUT_CLASSIFICATION	2.8438803925356865E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999988598612081	WITHOUT_CLASSIFICATION	1.1401387919493167E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999960005077917	WITHOUT_CLASSIFICATION	3.999492208249123E-6	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999858814234203	WITHOUT_CLASSIFICATION	1.4118576579765995E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999990414707657	WITHOUT_CLASSIFICATION	9.58529234294859E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999072823241153	WITHOUT_CLASSIFICATION	9.271767588470367E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999996583541729	WITHOUT_CLASSIFICATION	3.416458270748483E-7	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999903571714904	WITHOUT_CLASSIFICATION	9.642828509609533E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996570456104743	WITHOUT_CLASSIFICATION	3.4295438952577326E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996570456104743	WITHOUT_CLASSIFICATION	3.4295438952577326E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999970961555327	WITHOUT_CLASSIFICATION	2.9038444673070123E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998276167118283	WITHOUT_CLASSIFICATION	1.7238328817170958E-4	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999997480234134	WITHOUT_CLASSIFICATION	2.5197658668568975E-7	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999941734316157	WITHOUT_CLASSIFICATION	5.826568384346811E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999983462321645	WITHOUT_CLASSIFICATION	1.653767835509227E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999993348259247	WITHOUT_CLASSIFICATION	6.651740752597146E-7	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999901123150697	WITHOUT_CLASSIFICATION	9.887684930313848E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999941365435625	WITHOUT_CLASSIFICATION	5.8634564375269995E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999927366028593	WITHOUT_CLASSIFICATION	7.26339714071735E-6	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999924423270244	WITHOUT_CLASSIFICATION	7.5576729755998835E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999971487126023	WITHOUT_CLASSIFICATION	2.8512873977001816E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999985449318506	WITHOUT_CLASSIFICATION	1.4550681494056337E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.999989328961047	WITHOUT_CLASSIFICATION	1.067103895298527E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999992643465035	WITHOUT_CLASSIFICATION	7.356534964855112E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999668017307154	WITHOUT_CLASSIFICATION	3.3198269284604445E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999998722156491	WITHOUT_CLASSIFICATION	1.2778435076564483E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999929066606962	WITHOUT_CLASSIFICATION	7.09333930391749E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999929173382148	WITHOUT_CLASSIFICATION	7.082661785199495E-6	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999738747617614	WITHOUT_CLASSIFICATION	2.6125238238709577E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999991628011933	WITHOUT_CLASSIFICATION	8.371988067701613E-7	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999940328819298	WITHOUT_CLASSIFICATION	5.967118070291072E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999896871500898	WITHOUT_CLASSIFICATION	1.0312849910051512E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999884000962711	WITHOUT_CLASSIFICATION	1.1599903728938769E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997213917973206	WITHOUT_CLASSIFICATION	2.7860820267939596E-4	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999843804347609	WITHOUT_CLASSIFICATION	1.5619565239156703E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.999980251512241	WITHOUT_CLASSIFICATION	1.974848775888268E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999921584620742	WITHOUT_CLASSIFICATION	7.841537925695471E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999591936477039	WITHOUT_CLASSIFICATION	4.080635229619043E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999647002767266	WITHOUT_CLASSIFICATION	3.529972327344832E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999933512503718	WITHOUT_CLASSIFICATION	6.648749628150356E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998977089024925	WITHOUT_CLASSIFICATION	1.0229109750746543E-4	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999854438518191	WITHOUT_CLASSIFICATION	1.4556148181000022E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.999983180083937	WITHOUT_CLASSIFICATION	1.6819916062852662E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999925768163328	WITHOUT_CLASSIFICATION	7.423183667121414E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999856769432077	WITHOUT_CLASSIFICATION	1.4323056792267915E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999856769432077	WITHOUT_CLASSIFICATION	1.4323056792267915E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999847167962858	WITHOUT_CLASSIFICATION	1.5283203714255804E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999525514932157	WITHOUT_CLASSIFICATION	4.744850678423462E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999991738705023	WITHOUT_CLASSIFICATION	8.261294977737293E-7	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999993477087578	WITHOUT_CLASSIFICATION	6.52291242288488E-7	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999953884734608	WITHOUT_CLASSIFICATION	4.611526539178302E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999976102557196	WITHOUT_CLASSIFICATION	2.389744280257673E-6	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998700114679528	WITHOUT_CLASSIFICATION	1.299885320471177E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999999352674774	WITHOUT_CLASSIFICATION	6.473252261758502E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999782502688098	WITHOUT_CLASSIFICATION	2.1749731190137762E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999986717260849	WITHOUT_CLASSIFICATION	1.3282739150190273E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999923495273691	WITHOUT_CLASSIFICATION	7.65047263091159E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999931924057207	WITHOUT_CLASSIFICATION	6.807594279328865E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999993094678528	WITHOUT_CLASSIFICATION	6.905321471510734E-7	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999992466659753	WITHOUT_CLASSIFICATION	7.533340248027822E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999699204525041	WITHOUT_CLASSIFICATION	3.007954749602025E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999753686563506	WITHOUT_CLASSIFICATION	2.463134364935395E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999753686563506	WITHOUT_CLASSIFICATION	2.463134364935395E-5	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999994553330937	WITHOUT_CLASSIFICATION	5.446669062940006E-6	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999873976426958	WITHOUT_CLASSIFICATION	1.2602357304192644E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999990378180501	WITHOUT_CLASSIFICATION	9.621819499790101E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992323517366	WITHOUT_CLASSIFICATION	7.676482634656673E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9976290852091193	WITHOUT_CLASSIFICATION	0.0023709147908806813	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999952581473283	WITHOUT_CLASSIFICATION	4.741852671781072E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999930396609037	WITHOUT_CLASSIFICATION	6.960339096317696E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999930396609037	WITHOUT_CLASSIFICATION	6.960339096317696E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999855381010647	WITHOUT_CLASSIFICATION	1.446189893517562E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999990791131744	WITHOUT_CLASSIFICATION	9.208868254750203E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998654444307267	WITHOUT_CLASSIFICATION	1.3455556927338452E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999984461762154	WITHOUT_CLASSIFICATION	1.5538237846294638E-6	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999860646701297	WITHOUT_CLASSIFICATION	1.3935329870296376E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996842483228101	WITHOUT_CLASSIFICATION	3.157516771898861E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999990855336779	WITHOUT_CLASSIFICATION	9.144663220548276E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999838811375129	WITHOUT_CLASSIFICATION	1.6118862487024045E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999988346467058	WITHOUT_CLASSIFICATION	1.1653532941458962E-6	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999995204253194	WITHOUT_CLASSIFICATION	4.795746807395573E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999828942530723	WITHOUT_CLASSIFICATION	1.710574692771495E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969418389981	WITHOUT_CLASSIFICATION	3.058161001833301E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999918248477109	WITHOUT_CLASSIFICATION	8.175152289177924E-6	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999147350310056	WITHOUT_CLASSIFICATION	8.526496899443153E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999810270393472	WITHOUT_CLASSIFICATION	1.8972960652857027E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999758176758752	WITHOUT_CLASSIFICATION	2.4182324124822095E-5	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999899360237241	WITHOUT_CLASSIFICATION	1.0063976275808722E-5	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999856353993543	WITHOUT_CLASSIFICATION	1.4364600645842239E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999246233540161	WITHOUT_CLASSIFICATION	7.53766459838469E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999990017080772	WITHOUT_CLASSIFICATION	9.98291922847629E-7	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999985215414102	WITHOUT_CLASSIFICATION	1.4784585898321804E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999958950602793	WITHOUT_CLASSIFICATION	4.104939720696124E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999649201182236	WITHOUT_CLASSIFICATION	3.507988177650177E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999997519644226	WITHOUT_CLASSIFICATION	2.4803557741469615E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999983743546073	WITHOUT_CLASSIFICATION	1.6256453926890387E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999994184893047	WITHOUT_CLASSIFICATION	5.815106953604881E-7	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999994477900003	WITHOUT_CLASSIFICATION	5.522099996339318E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999486423091	WITHOUT_CLASSIFICATION	5.1357690851798927E-8	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999995429606939	WITHOUT_CLASSIFICATION	4.5703930604386915E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999096770775	WITHOUT_CLASSIFICATION	9.032292250654814E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999911952135143	WITHOUT_CLASSIFICATION	8.8047864856678E-6	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999739807754161	WITHOUT_CLASSIFICATION	2.6019224583936395E-5	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997054990555083	WITHOUT_CLASSIFICATION	2.945009444916218E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999977891056462	WITHOUT_CLASSIFICATION	2.210894353808274E-6	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999914932373434	WITHOUT_CLASSIFICATION	8.506762656622874E-6	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999807640067748	WITHOUT_CLASSIFICATION	1.923599322521648E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999875493099022	WITHOUT_CLASSIFICATION	1.2450690097744346E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999974237747635	WITHOUT_CLASSIFICATION	2.576225236333737E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999869653426325	WITHOUT_CLASSIFICATION	1.3034657367404239E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999915942755825	WITHOUT_CLASSIFICATION	8.405724417591596E-6	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999663514779	WITHOUT_CLASSIFICATION	3.364852210625709E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999775381239415	WITHOUT_CLASSIFICATION	2.2461876058402854E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999602322900288	WITHOUT_CLASSIFICATION	3.976770997111359E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998414120844	WITHOUT_CLASSIFICATION	1.5858791566475543E-7	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999933480325274	WITHOUT_CLASSIFICATION	6.651967472573994E-6	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999969354725462	WITHOUT_CLASSIFICATION	3.0645274539149603E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999869653426325	WITHOUT_CLASSIFICATION	1.3034657367404239E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999915942755825	WITHOUT_CLASSIFICATION	8.405724417591596E-6	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999986435417858	WITHOUT_CLASSIFICATION	1.3564582141231322E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999822458759925	WITHOUT_CLASSIFICATION	1.775412400755305E-5	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999963994795457	WITHOUT_CLASSIFICATION	3.6005204543135394E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999918285920164	WITHOUT_CLASSIFICATION	8.171407983535368E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999933761128307	WITHOUT_CLASSIFICATION	6.623887169358556E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999990619185528	WITHOUT_CLASSIFICATION	9.380814471502311E-7	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999634496159929	WITHOUT_CLASSIFICATION	3.655038400702564E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999648669410957	WITHOUT_CLASSIFICATION	3.513305890432798E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998196483807	WITHOUT_CLASSIFICATION	1.8035161917634018E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.940201441214889	WITHOUT_CLASSIFICATION	0.05979855878511082	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999828885947	WITHOUT_CLASSIFICATION	1.7111405329279426E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.940201441214889	WITHOUT_CLASSIFICATION	0.05979855878511082	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999995614715479	WITHOUT_CLASSIFICATION	4.3852845205817326E-7	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999986582618072	WITHOUT_CLASSIFICATION	1.3417381926664663E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999988593053006	WITHOUT_CLASSIFICATION	1.1406946993940987E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896267871626	WITHOUT_CLASSIFICATION	1.1037321283734E-4	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999943913108508	WITHOUT_CLASSIFICATION	5.608689149232547E-6	DEFECT
//}	WITHOUT_CLASSIFICATION	0.999659649009952	WITHOUT_CLASSIFICATION	3.403509900480126E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.999659649009952	WITHOUT_CLASSIFICATION	3.403509900480126E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999942039372718	WITHOUT_CLASSIFICATION	5.7960627281605735E-6	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999958070745344	WITHOUT_CLASSIFICATION	4.192925465569431E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999672369005929	WITHOUT_CLASSIFICATION	3.2763099407112876E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999644290459511	WITHOUT_CLASSIFICATION	3.5570954048892385E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999967174090335	WITHOUT_CLASSIFICATION	3.282590966539535E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.999999924269494	WITHOUT_CLASSIFICATION	7.5730506004905E-8	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999929520645905	WITHOUT_CLASSIFICATION	7.047935409485673E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999988578808117	WITHOUT_CLASSIFICATION	1.1421191882988668E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999328058297337	WITHOUT_CLASSIFICATION	6.719417026632447E-5	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9999451741648014	WITHOUT_CLASSIFICATION	5.4825835198570546E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999906779569445	WITHOUT_CLASSIFICATION	9.32204305545839E-6	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999972941769104	WITHOUT_CLASSIFICATION	2.705823089495432E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999378416357211	WITHOUT_CLASSIFICATION	6.215836427896588E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.999994645196403	WITHOUT_CLASSIFICATION	5.354803596901496E-6	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999998259594439	WITHOUT_CLASSIFICATION	1.7404055610086434E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999971706225	WITHOUT_CLASSIFICATION	2.82937749514225E-8	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999999223538263	WITHOUT_CLASSIFICATION	7.764617370290866E-7	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999985552727821	WITHOUT_CLASSIFICATION	1.4447272178717183E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999900978020205	WITHOUT_CLASSIFICATION	9.902197979446645E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9994393097324783	WITHOUT_CLASSIFICATION	5.606902675217118E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999985932005826	WITHOUT_CLASSIFICATION	1.4067994174706188E-6	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998502205347249	WITHOUT_CLASSIFICATION	1.4977946527507498E-4	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999961078900319	WITHOUT_CLASSIFICATION	3.892109968070905E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999979702990732	WITHOUT_CLASSIFICATION	2.0297009267772912E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999986125851325	WITHOUT_CLASSIFICATION	1.3874148675858852E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997798864203531	WITHOUT_CLASSIFICATION	2.2011357964685723E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999932495855632	WITHOUT_CLASSIFICATION	6.750414436826295E-6	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999875693601593	WITHOUT_CLASSIFICATION	1.2430639840654451E-5	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999926305397234	WITHOUT_CLASSIFICATION	7.3694602766039555E-6	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999949471595477	WITHOUT_CLASSIFICATION	5.052840452275337E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9966250247217547	WITHOUT_CLASSIFICATION	0.0033749752782453323	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999856652021735	WITHOUT_CLASSIFICATION	1.4334797826441777E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999929520645905	WITHOUT_CLASSIFICATION	7.047935409485673E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999980900164956	WITHOUT_CLASSIFICATION	1.9099835043209884E-6	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999834990399665	WITHOUT_CLASSIFICATION	1.650096003349492E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9910007173620002	WITHOUT_CLASSIFICATION	0.008999282637999663	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999816229995495	WITHOUT_CLASSIFICATION	1.8377000450544913E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999979081153316	WITHOUT_CLASSIFICATION	2.0918846683485135E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999917611772	WITHOUT_CLASSIFICATION	8.238822799950155E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999644290459511	WITHOUT_CLASSIFICATION	3.5570954048892385E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999644290459511	WITHOUT_CLASSIFICATION	3.5570954048892385E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999950238071704	WITHOUT_CLASSIFICATION	4.976192829552528E-6	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999733364261318	WITHOUT_CLASSIFICATION	2.6663573868150583E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998998844713929	WITHOUT_CLASSIFICATION	1.0011552860707315E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999974414208733	WITHOUT_CLASSIFICATION	2.558579126693469E-6	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999985349472464	WITHOUT_CLASSIFICATION	1.465052753592804E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999989293856498	WITHOUT_CLASSIFICATION	1.0706143501076064E-6	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999897349981904	WITHOUT_CLASSIFICATION	1.026500180946634E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999987781421366	WITHOUT_CLASSIFICATION	1.2218578634543356E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999825282586056	WITHOUT_CLASSIFICATION	1.7471741394427824E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970069924138	WITHOUT_CLASSIFICATION	2.9930075862549812E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999934802944356	WITHOUT_CLASSIFICATION	6.519705564448889E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994039663189872	WITHOUT_CLASSIFICATION	5.960336810127751E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999321982652745	WITHOUT_CLASSIFICATION	6.780173472551473E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970069924138	WITHOUT_CLASSIFICATION	2.9930075862549812E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999533012797449	WITHOUT_CLASSIFICATION	4.669872025515355E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999488125892257	WITHOUT_CLASSIFICATION	5.118741077426369E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999955608096524	WITHOUT_CLASSIFICATION	4.43919034769981E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.5831555133095382	WITHOUT_CLASSIFICATION	0.4168444866904618	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994039663189872	WITHOUT_CLASSIFICATION	5.960336810127751E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999955689044637	WITHOUT_CLASSIFICATION	4.431095536310773E-6	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999997373748905	WITHOUT_CLASSIFICATION	2.6262510950611167E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999933291683595	WITHOUT_CLASSIFICATION	6.6708316405296854E-6	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999998926199047	WITHOUT_CLASSIFICATION	1.0738009529615174E-7	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9993019274682845	WITHOUT_CLASSIFICATION	6.980725317155162E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999921207245495	WITHOUT_CLASSIFICATION	7.879275450569092E-6	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999993421404402	WITHOUT_CLASSIFICATION	6.578595597269676E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999675901245595	WITHOUT_CLASSIFICATION	3.240987544058983E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999878108295713	WITHOUT_CLASSIFICATION	1.2189170428673105E-5	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999937296348865	WITHOUT_CLASSIFICATION	6.2703651134841455E-6	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999995798022533	WITHOUT_CLASSIFICATION	4.201977467750816E-7	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999993807793406	WITHOUT_CLASSIFICATION	6.192206594441063E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970069924138	WITHOUT_CLASSIFICATION	2.9930075862549812E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999955689044637	WITHOUT_CLASSIFICATION	4.431095536310773E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999933291683595	WITHOUT_CLASSIFICATION	6.6708316405296854E-6	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999831379370197	WITHOUT_CLASSIFICATION	1.686206298029861E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999853755812133	WITHOUT_CLASSIFICATION	1.4624418786815106E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999976462381184	WITHOUT_CLASSIFICATION	2.3537618816585117E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994039663189872	WITHOUT_CLASSIFICATION	5.960336810127751E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993703640376	WITHOUT_CLASSIFICATION	6.296359623506933E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999503654328032	WITHOUT_CLASSIFICATION	4.9634567196724124E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998928047262816	WITHOUT_CLASSIFICATION	1.0719527371846186E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999500437125951	WITHOUT_CLASSIFICATION	4.99562874049687E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999675901245595	WITHOUT_CLASSIFICATION	3.240987544058983E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999533012797449	WITHOUT_CLASSIFICATION	4.669872025515355E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999097383889464	WITHOUT_CLASSIFICATION	9.026161105364011E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985002357346	WITHOUT_CLASSIFICATION	1.4997642654670638E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999837463034676	WITHOUT_CLASSIFICATION	1.6253696532393996E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999972772684055	WITHOUT_CLASSIFICATION	2.7227315944300016E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999643645856596	WITHOUT_CLASSIFICATION	3.563541434041694E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999675059843037	WITHOUT_CLASSIFICATION	3.249401569620874E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999704939298609	WITHOUT_CLASSIFICATION	2.9506070139013174E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998896267871626	WITHOUT_CLASSIFICATION	1.1037321283734E-4	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997045641142	WITHOUT_CLASSIFICATION	2.954358858323995E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999925880108287	WITHOUT_CLASSIFICATION	7.411989171319263E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999899627272532	WITHOUT_CLASSIFICATION	1.0037272746929274E-5	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999980462801912	WITHOUT_CLASSIFICATION	1.953719808807307E-6	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999988901838738	WITHOUT_CLASSIFICATION	1.1098161262050186E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999981028717848	WITHOUT_CLASSIFICATION	1.897128215076288E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999940725639617	WITHOUT_CLASSIFICATION	5.927436038325544E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999987451534841	WITHOUT_CLASSIFICATION	1.254846515916952E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999500437125951	WITHOUT_CLASSIFICATION	4.99562874049687E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999453956277756	WITHOUT_CLASSIFICATION	5.4604372224282986E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999532019483502	WITHOUT_CLASSIFICATION	4.679805164980316E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9998401784320665	WITHOUT_CLASSIFICATION	1.5982156793336165E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999386046975873	WITHOUT_CLASSIFICATION	6.139530241266922E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.999985806525277	WITHOUT_CLASSIFICATION	1.4193474723041255E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999999468963598	WITHOUT_CLASSIFICATION	5.310364018881313E-7	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999971565685244	WITHOUT_CLASSIFICATION	2.843431475669022E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999330519801938	WITHOUT_CLASSIFICATION	6.694801980628734E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999991245661818	WITHOUT_CLASSIFICATION	8.754338181473546E-7	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999907836123729	WITHOUT_CLASSIFICATION	9.216387627153906E-6	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999932643585636	WITHOUT_CLASSIFICATION	6.735641436375343E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999547544724647	WITHOUT_CLASSIFICATION	4.5245527535371355E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9998049182196221	WITHOUT_CLASSIFICATION	1.9508178037786644E-4	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998972311703898	WITHOUT_CLASSIFICATION	1.0276882961029991E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999973321753828	WITHOUT_CLASSIFICATION	2.6678246171956933E-6	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999966689711447	WITHOUT_CLASSIFICATION	3.331028855195743E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999968987234027	WITHOUT_CLASSIFICATION	3.101276597313163E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999998184465276	WITHOUT_CLASSIFICATION	1.8155347238838114E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999773233372	WITHOUT_CLASSIFICATION	2.267666279009607E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999460365129723	WITHOUT_CLASSIFICATION	5.396348702772346E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.999959427740174	WITHOUT_CLASSIFICATION	4.057225982612329E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999990094347474	WITHOUT_CLASSIFICATION	9.905652525775944E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999954697375725	WITHOUT_CLASSIFICATION	4.530262427583562E-6	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999992456358998	WITHOUT_CLASSIFICATION	7.543641001841779E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999977325231111	WITHOUT_CLASSIFICATION	2.2674768890248776E-6	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9656414054032461	WITHOUT_CLASSIFICATION	0.034358594596754	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999808961037613	WITHOUT_CLASSIFICATION	1.9103896238691758E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999992258215894	WITHOUT_CLASSIFICATION	7.741784106255876E-7	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999971540288815	WITHOUT_CLASSIFICATION	2.8459711185662042E-6	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9974698675768838	WITHOUT_CLASSIFICATION	0.0025301324231162656	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999929841913417	WITHOUT_CLASSIFICATION	7.015808658234487E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999987797564205	WITHOUT_CLASSIFICATION	1.22024357948702E-6	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999993312735006	WITHOUT_CLASSIFICATION	6.687264993481432E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999872630178065	WITHOUT_CLASSIFICATION	1.273698219341779E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999981583389151	WITHOUT_CLASSIFICATION	1.8416610848794105E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999940398086216	WITHOUT_CLASSIFICATION	5.960191378435663E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999941926648304	WITHOUT_CLASSIFICATION	5.807335169654763E-6	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995991387262	WITHOUT_CLASSIFICATION	4.0086127389282695E-7	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999940398086216	WITHOUT_CLASSIFICATION	5.960191378435663E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999981583389151	WITHOUT_CLASSIFICATION	1.8416610848794105E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999941926648304	WITHOUT_CLASSIFICATION	5.807335169654763E-6	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999930470139489	WITHOUT_CLASSIFICATION	6.952986051159087E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999994177977678	WITHOUT_CLASSIFICATION	5.822022321900637E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999803619736676	WITHOUT_CLASSIFICATION	1.9638026332447084E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999958145725962	WITHOUT_CLASSIFICATION	4.185427403840966E-6	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999990251654047	WITHOUT_CLASSIFICATION	9.748345953086594E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9975692215918097	WITHOUT_CLASSIFICATION	0.0024307784081902895	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9945620258757014	WITHOUT_CLASSIFICATION	0.005437974124298527	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999806243528719	WITHOUT_CLASSIFICATION	1.9375647128090636E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999873310308373	WITHOUT_CLASSIFICATION	1.2668969162806924E-5	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999774051453969	WITHOUT_CLASSIFICATION	2.259485460302789E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999959131221149	WITHOUT_CLASSIFICATION	4.086877885034219E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999979521991004	WITHOUT_CLASSIFICATION	2.047800899645481E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999988550335323	WITHOUT_CLASSIFICATION	1.144966467685629E-6	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999803060706925	WITHOUT_CLASSIFICATION	1.9693929307515376E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999892255456002	WITHOUT_CLASSIFICATION	1.0774454399842637E-5	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997014289546	WITHOUT_CLASSIFICATION	2.9857104546984636E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999937134309621	WITHOUT_CLASSIFICATION	6.286569037948495E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999994726621985	WITHOUT_CLASSIFICATION	5.273378015095807E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999988086754102	WITHOUT_CLASSIFICATION	1.1913245898548511E-6	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999990305306721	WITHOUT_CLASSIFICATION	9.694693278769466E-7	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999871812560186	WITHOUT_CLASSIFICATION	1.281874398154691E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996811633483	WITHOUT_CLASSIFICATION	3.188366517229554E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999125478469746	WITHOUT_CLASSIFICATION	8.745215302534975E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998755114565	WITHOUT_CLASSIFICATION	1.2448854342310975E-7	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991843352958	WITHOUT_CLASSIFICATION	8.156647043033229E-7	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991843352958	WITHOUT_CLASSIFICATION	8.156647043033229E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997863939073	WITHOUT_CLASSIFICATION	2.1360609259852635E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997863939073	WITHOUT_CLASSIFICATION	2.1360609259852635E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999897978766529	WITHOUT_CLASSIFICATION	1.0202123347216332E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999937134309621	WITHOUT_CLASSIFICATION	6.286569037948495E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999977481038745	WITHOUT_CLASSIFICATION	2.2518961255376637E-6	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999999255325384	WITHOUT_CLASSIFICATION	7.446746160788348E-7	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999501698931885	WITHOUT_CLASSIFICATION	4.983010681154355E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999501698931885	WITHOUT_CLASSIFICATION	4.983010681154355E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999990148209547	WITHOUT_CLASSIFICATION	9.851790453293878E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999833264067296	WITHOUT_CLASSIFICATION	1.6673593270396732E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999997968195255	WITHOUT_CLASSIFICATION	2.031804744898919E-6	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999950247571863	WITHOUT_CLASSIFICATION	4.975242813715059E-6	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9996112450244231	WITHOUT_CLASSIFICATION	3.887549755769043E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999999440109487	WITHOUT_CLASSIFICATION	5.598905128777664E-7	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999801621359884	WITHOUT_CLASSIFICATION	1.9837864011636522E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999892627348954	WITHOUT_CLASSIFICATION	1.0737265104594607E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999832493505989	WITHOUT_CLASSIFICATION	1.675064940107617E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999789282841934	WITHOUT_CLASSIFICATION	2.1071715806554084E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.999992311229983	WITHOUT_CLASSIFICATION	7.688770016962891E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999496032996337	WITHOUT_CLASSIFICATION	5.039670036635533E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999932643291747	WITHOUT_CLASSIFICATION	6.735670825304075E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999660581585756	WITHOUT_CLASSIFICATION	3.394184142431866E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999949688042215	WITHOUT_CLASSIFICATION	5.031195778521218E-6	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999985040389616	WITHOUT_CLASSIFICATION	1.4959610383675857E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835572067136	WITHOUT_CLASSIFICATION	1.6442793286409987E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999990722996784	WITHOUT_CLASSIFICATION	9.277003216007902E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999617455922175	WITHOUT_CLASSIFICATION	3.825440778245789E-5	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998846312254785	WITHOUT_CLASSIFICATION	1.1536877452144161E-4	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999986224342453	WITHOUT_CLASSIFICATION	1.377565754646635E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999978030037812	WITHOUT_CLASSIFICATION	2.196996218947754E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999899519923136	WITHOUT_CLASSIFICATION	1.0048007686510619E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999987492074235	WITHOUT_CLASSIFICATION	1.2507925765843944E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998038510649804	WITHOUT_CLASSIFICATION	1.9614893501966642E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999853245941	WITHOUT_CLASSIFICATION	1.4675405901959557E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999547544724647	WITHOUT_CLASSIFICATION	4.5245527535371355E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999877870920891	WITHOUT_CLASSIFICATION	1.2212907910941268E-5	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999982701383743	WITHOUT_CLASSIFICATION	1.7298616257472474E-6	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927159774755	WITHOUT_CLASSIFICATION	7.284022524478783E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970241287095	WITHOUT_CLASSIFICATION	2.975871290472733E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999464347714693	WITHOUT_CLASSIFICATION	5.356522853078522E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999464347714693	WITHOUT_CLASSIFICATION	5.356522853078522E-5	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999995807473936	WITHOUT_CLASSIFICATION	4.192526063708148E-7	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999741248695446	WITHOUT_CLASSIFICATION	2.587513045532524E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999828234303276	WITHOUT_CLASSIFICATION	1.717656967242071E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999828234303276	WITHOUT_CLASSIFICATION	1.717656967242071E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999994816840826	WITHOUT_CLASSIFICATION	5.183159175255223E-7	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999914369437191	WITHOUT_CLASSIFICATION	8.56305628090428E-6	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999552879940833	WITHOUT_CLASSIFICATION	4.471200591668281E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999987815298001	WITHOUT_CLASSIFICATION	1.218470199910163E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.99999382159341	WITHOUT_CLASSIFICATION	6.178406589954616E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999755539337993	WITHOUT_CLASSIFICATION	2.4446066200591334E-5	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999872687349843	WITHOUT_CLASSIFICATION	1.2731265015635905E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999917628254661	WITHOUT_CLASSIFICATION	8.237174533882226E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999439455869377	WITHOUT_CLASSIFICATION	5.605441306237458E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999439455869377	WITHOUT_CLASSIFICATION	5.605441306237458E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999085305675	WITHOUT_CLASSIFICATION	9.146943249224203E-8	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999824993332295	WITHOUT_CLASSIFICATION	1.7500666770534783E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999824993332295	WITHOUT_CLASSIFICATION	1.7500666770534783E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9998841955927313	WITHOUT_CLASSIFICATION	1.1580440726857014E-4	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999883665841361	WITHOUT_CLASSIFICATION	1.1633415863775354E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.993847077142912	WITHOUT_CLASSIFICATION	0.006152922857088001	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999930349607141	WITHOUT_CLASSIFICATION	6.965039285902456E-6	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999968776190914	WITHOUT_CLASSIFICATION	3.1223809085248374E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999985228224924	WITHOUT_CLASSIFICATION	1.4771775076497398E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999964110820458	WITHOUT_CLASSIFICATION	3.58891795416375E-6	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999991555917619	WITHOUT_CLASSIFICATION	8.444082381900966E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.999999724279709	WITHOUT_CLASSIFICATION	2.7572029104768566E-7	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9993796032281995	WITHOUT_CLASSIFICATION	6.203967718004954E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999995365810066	WITHOUT_CLASSIFICATION	4.634189934494834E-7	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999991004333867	WITHOUT_CLASSIFICATION	8.995666133448919E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999471805633232	WITHOUT_CLASSIFICATION	5.2819436676865807E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999471805633232	WITHOUT_CLASSIFICATION	5.2819436676865807E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999471805633232	WITHOUT_CLASSIFICATION	5.2819436676865807E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999471805633232	WITHOUT_CLASSIFICATION	5.2819436676865807E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999988748446754	WITHOUT_CLASSIFICATION	1.125155324537849E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9997855989696306	WITHOUT_CLASSIFICATION	2.1440103036943803E-4	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998802689099733	WITHOUT_CLASSIFICATION	1.197310900266791E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999436167742479	WITHOUT_CLASSIFICATION	5.6383225752092515E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999959666144935	WITHOUT_CLASSIFICATION	4.0333855064655115E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999954721478104	WITHOUT_CLASSIFICATION	4.527852189702093E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999256485101654	WITHOUT_CLASSIFICATION	7.43514898345558E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998779414316221	WITHOUT_CLASSIFICATION	1.2205856837785E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999290003219	WITHOUT_CLASSIFICATION	7.099967816210671E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999987457591243	WITHOUT_CLASSIFICATION	1.2542408757177953E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999968501701082	WITHOUT_CLASSIFICATION	3.1498298917439274E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999865957723967	WITHOUT_CLASSIFICATION	1.3404227603336818E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999964416546745	WITHOUT_CLASSIFICATION	3.5583453255959816E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999988039363247	WITHOUT_CLASSIFICATION	1.1960636752979854E-5	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999946635976025	WITHOUT_CLASSIFICATION	5.336402397581469E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999865957723967	WITHOUT_CLASSIFICATION	1.3404227603336818E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999481848031654	WITHOUT_CLASSIFICATION	5.181519683462357E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999991695732124	WITHOUT_CLASSIFICATION	8.304267876138548E-7	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999900266690451	WITHOUT_CLASSIFICATION	9.973330954890245E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999789721755947	WITHOUT_CLASSIFICATION	2.1027824405279927E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9994488667801321	WITHOUT_CLASSIFICATION	5.51133219867985E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999921183121027	WITHOUT_CLASSIFICATION	7.881687897299351E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999989814914001	WITHOUT_CLASSIFICATION	1.0185085999403614E-6	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999983281844947	WITHOUT_CLASSIFICATION	1.6718155052031878E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932560520679	WITHOUT_CLASSIFICATION	6.743947932178566E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999995255843005	WITHOUT_CLASSIFICATION	4.744156995431827E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952348565553	WITHOUT_CLASSIFICATION	4.76514344476485E-6	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999923722180883	WITHOUT_CLASSIFICATION	7.627781911645185E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999365908965063	WITHOUT_CLASSIFICATION	6.340910349359147E-5	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999879697497472	WITHOUT_CLASSIFICATION	1.2030250252767793E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999984165110163	WITHOUT_CLASSIFICATION	1.5834889837038013E-6	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998967373721113	WITHOUT_CLASSIFICATION	1.0326262788875415E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997585974629	WITHOUT_CLASSIFICATION	2.414025370506569E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999894475718756	WITHOUT_CLASSIFICATION	1.0552428124524118E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999956905504008	WITHOUT_CLASSIFICATION	4.3094495991040815E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999894475718756	WITHOUT_CLASSIFICATION	1.0552428124524118E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999969179165589	WITHOUT_CLASSIFICATION	3.0820834411281125E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992931657157	WITHOUT_CLASSIFICATION	7.068342843410211E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999978351189858	WITHOUT_CLASSIFICATION	2.164881014250854E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999743249418284	WITHOUT_CLASSIFICATION	2.5675058171561268E-5	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999997585974629	WITHOUT_CLASSIFICATION	2.414025370506569E-7	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999956905504008	WITHOUT_CLASSIFICATION	4.3094495991040815E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999969179165589	WITHOUT_CLASSIFICATION	3.0820834411281125E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999986580645448	WITHOUT_CLASSIFICATION	1.3419354551649378E-6	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999667049334048	WITHOUT_CLASSIFICATION	3.329506659523252E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999352853113431	WITHOUT_CLASSIFICATION	6.471468865681953E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999653560198988	WITHOUT_CLASSIFICATION	3.4643980101169115E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999945188845614	WITHOUT_CLASSIFICATION	5.48111543870319E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999998008678702	WITHOUT_CLASSIFICATION	1.991321296956887E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835572067136	WITHOUT_CLASSIFICATION	1.6442793286409987E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999992931657157	WITHOUT_CLASSIFICATION	7.068342843410211E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998876890227	WITHOUT_CLASSIFICATION	1.1231097732017397E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999919499542705	WITHOUT_CLASSIFICATION	8.050045729415062E-6	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999991556193695	WITHOUT_CLASSIFICATION	8.443806305951971E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835572067136	WITHOUT_CLASSIFICATION	1.6442793286409987E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999955695229955	WITHOUT_CLASSIFICATION	4.430477004501468E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835572067136	WITHOUT_CLASSIFICATION	1.6442793286409987E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998997240058	WITHOUT_CLASSIFICATION	1.0027599411637645E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999973608777082	WITHOUT_CLASSIFICATION	2.6391222918009523E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.998827545815662	WITHOUT_CLASSIFICATION	0.0011724541843380065	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999966622245354	WITHOUT_CLASSIFICATION	3.3377754645709027E-6	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965206647122	WITHOUT_CLASSIFICATION	3.4793352876877154E-6	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999982360974731	WITHOUT_CLASSIFICATION	1.7639025270226557E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999993365062784	WITHOUT_CLASSIFICATION	6.634937215298732E-7	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998955768747533	WITHOUT_CLASSIFICATION	1.0442312524672496E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999627924606593	WITHOUT_CLASSIFICATION	3.7207539340686354E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.999861644494088	WITHOUT_CLASSIFICATION	1.3835550591200253E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996570456104743	WITHOUT_CLASSIFICATION	3.4295438952577326E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999187155372	WITHOUT_CLASSIFICATION	8.128446288295389E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.993847077142912	WITHOUT_CLASSIFICATION	0.006152922857088001	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9997671902416103	WITHOUT_CLASSIFICATION	2.328097583896667E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999816824924054	WITHOUT_CLASSIFICATION	1.8317507594715132E-5	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999962505894455	WITHOUT_CLASSIFICATION	3.7494105544774234E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998291535324059	WITHOUT_CLASSIFICATION	1.708464675941669E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999988421076978	WITHOUT_CLASSIFICATION	1.1578923020693752E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999013740264	WITHOUT_CLASSIFICATION	9.862597359357083E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999994091538368	WITHOUT_CLASSIFICATION	5.908461632907563E-7	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997628964768753	WITHOUT_CLASSIFICATION	2.371035231247209E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999996837830468	WITHOUT_CLASSIFICATION	3.1621695313167987E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999969280037854	WITHOUT_CLASSIFICATION	3.0719962146509635E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9938530822298257	WITHOUT_CLASSIFICATION	0.00614691777017423	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9989071248018182	WITHOUT_CLASSIFICATION	0.0010928751981817302	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9986080683197951	WITHOUT_CLASSIFICATION	0.001391931680204878	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999650146767692	WITHOUT_CLASSIFICATION	3.49853232308165E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999916476621672	WITHOUT_CLASSIFICATION	8.35233783285373E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.99990783923707	WITHOUT_CLASSIFICATION	9.216076292991377E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999917451410684	WITHOUT_CLASSIFICATION	8.254858931707991E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999982463295414	WITHOUT_CLASSIFICATION	1.7536704586749902E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999995118649615	WITHOUT_CLASSIFICATION	4.8813503850786465E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998826272922403	WITHOUT_CLASSIFICATION	1.173727077596992E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999907366098677	WITHOUT_CLASSIFICATION	9.263390132323307E-6	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9960103591193138	WITHOUT_CLASSIFICATION	0.003989640880686247	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999959215667801	WITHOUT_CLASSIFICATION	4.078433219860341E-6	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999986124494691	WITHOUT_CLASSIFICATION	1.3875505309972902E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999136746034875	WITHOUT_CLASSIFICATION	8.632539651252866E-5	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999909899605638	WITHOUT_CLASSIFICATION	9.010039436280427E-6	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999995494677252	WITHOUT_CLASSIFICATION	4.505322747913374E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9936892329884891	WITHOUT_CLASSIFICATION	0.006310767011510894	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999963400930302	WITHOUT_CLASSIFICATION	3.6599069698233182E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999899612194607	WITHOUT_CLASSIFICATION	1.0038780539278157E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999561106073026	WITHOUT_CLASSIFICATION	4.388939269735617E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999561106073026	WITHOUT_CLASSIFICATION	4.388939269735617E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999826917788801	WITHOUT_CLASSIFICATION	1.730822111992134E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998955768747533	WITHOUT_CLASSIFICATION	1.0442312524672496E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999955092873091	WITHOUT_CLASSIFICATION	4.4907126908935694E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999940162036931	WITHOUT_CLASSIFICATION	5.983796306809224E-6	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999612528647387	WITHOUT_CLASSIFICATION	3.87471352612779E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999993862087808	WITHOUT_CLASSIFICATION	6.137912191920023E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999621415169307	WITHOUT_CLASSIFICATION	3.785848306918419E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9996485988620143	WITHOUT_CLASSIFICATION	3.5140113798576327E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999998041816092	WITHOUT_CLASSIFICATION	1.9581839092847236E-7	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999848652665709	WITHOUT_CLASSIFICATION	1.5134733429028218E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999990794767678	WITHOUT_CLASSIFICATION	9.205232321998171E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999929832171197	WITHOUT_CLASSIFICATION	7.016782880285331E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999953830874808	WITHOUT_CLASSIFICATION	4.6169125190951675E-6	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999932834069482	WITHOUT_CLASSIFICATION	6.716593051819972E-6	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999914700276186	WITHOUT_CLASSIFICATION	8.529972381450268E-6	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999957432060654	WITHOUT_CLASSIFICATION	4.256793934632559E-6	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999966381399042	WITHOUT_CLASSIFICATION	3.361860095744712E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999995525100823	WITHOUT_CLASSIFICATION	4.474899177442148E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999995780861869	WITHOUT_CLASSIFICATION	4.2191381307611556E-7	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999768425653488	WITHOUT_CLASSIFICATION	2.3157434651152447E-5	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999997762380095	WITHOUT_CLASSIFICATION	2.2376199057306586E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.99999947488807	WITHOUT_CLASSIFICATION	5.251119299833098E-7	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999758713522919	WITHOUT_CLASSIFICATION	2.412864770796975E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999806748588319	WITHOUT_CLASSIFICATION	1.9325141168027885E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9936892329884891	WITHOUT_CLASSIFICATION	0.006310767011510894	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999968489022429	WITHOUT_CLASSIFICATION	3.1510977570492397E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999699168353909	WITHOUT_CLASSIFICATION	3.00831646089704E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999970644409966	WITHOUT_CLASSIFICATION	2.93555900350182E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999997131332478	WITHOUT_CLASSIFICATION	2.868667521922364E-6	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999226585599115	WITHOUT_CLASSIFICATION	7.734144008855654E-5	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999127783372441	WITHOUT_CLASSIFICATION	8.722166275585138E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999617418986023	WITHOUT_CLASSIFICATION	3.825810139773425E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999966935646276	WITHOUT_CLASSIFICATION	3.306435372484965E-6	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999987579024363	WITHOUT_CLASSIFICATION	1.242097563716394E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999970390238176	WITHOUT_CLASSIFICATION	2.9609761823905837E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999989069950289	WITHOUT_CLASSIFICATION	1.0930049711791073E-6	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999985057826191	WITHOUT_CLASSIFICATION	1.4942173809013356E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.999946353737152	WITHOUT_CLASSIFICATION	5.3646262848117215E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999799502763925	WITHOUT_CLASSIFICATION	2.0049723607508057E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999984056752507	WITHOUT_CLASSIFICATION	1.5943247492802553E-6	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999984056752507	WITHOUT_CLASSIFICATION	1.5943247492802553E-6	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999695640729974	WITHOUT_CLASSIFICATION	3.0435927002550746E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999936258365354	WITHOUT_CLASSIFICATION	6.37416346470962E-6	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9976185906373081	WITHOUT_CLASSIFICATION	0.002381409362692017	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9976185906373081	WITHOUT_CLASSIFICATION	0.002381409362692017	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999986915628174	WITHOUT_CLASSIFICATION	1.3084371826468876E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997178318743158	WITHOUT_CLASSIFICATION	2.821681256841528E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999931202871555	WITHOUT_CLASSIFICATION	6.879712844518127E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999666180308886	WITHOUT_CLASSIFICATION	3.338196911137723E-5	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999924969744297	WITHOUT_CLASSIFICATION	7.503025570280171E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997105569850748	WITHOUT_CLASSIFICATION	2.894430149251158E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986740323169	WITHOUT_CLASSIFICATION	1.32596768307311E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986740323169	WITHOUT_CLASSIFICATION	1.32596768307311E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9996932354325707	WITHOUT_CLASSIFICATION	3.0676456742927116E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999991186474054	WITHOUT_CLASSIFICATION	8.813525945929794E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999540217434004	WITHOUT_CLASSIFICATION	4.5978256599559166E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999949031756966	WITHOUT_CLASSIFICATION	5.096824303457457E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999949031756966	WITHOUT_CLASSIFICATION	5.096824303457457E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999975157058069	WITHOUT_CLASSIFICATION	2.484294193115134E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999987020420752	WITHOUT_CLASSIFICATION	1.2979579248095926E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999919789893683	WITHOUT_CLASSIFICATION	8.021010631710434E-6	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999840784760666	WITHOUT_CLASSIFICATION	1.5921523933370466E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999988315214994	WITHOUT_CLASSIFICATION	1.168478500642998E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999953194413438	WITHOUT_CLASSIFICATION	4.680558656266829E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999900825908983	WITHOUT_CLASSIFICATION	9.917409101711924E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999915962920907	WITHOUT_CLASSIFICATION	8.40370790923845E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999956202553779	WITHOUT_CLASSIFICATION	4.379744622052403E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999934279410059	WITHOUT_CLASSIFICATION	6.572058994076856E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999995087120036	WITHOUT_CLASSIFICATION	4.9128799639357294E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999806848500625	WITHOUT_CLASSIFICATION	1.931514993753864E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999971954942611	WITHOUT_CLASSIFICATION	2.804505738885805E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999995277007799	WITHOUT_CLASSIFICATION	4.7229922011612805E-7	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999859625406782	WITHOUT_CLASSIFICATION	1.4037459321794124E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999462198796296	WITHOUT_CLASSIFICATION	5.378012037044273E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999992812676235	WITHOUT_CLASSIFICATION	7.187323763828583E-7	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999867524323381	WITHOUT_CLASSIFICATION	1.324756766189717E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999970780921221	WITHOUT_CLASSIFICATION	2.9219078778829167E-6	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999961553471121	WITHOUT_CLASSIFICATION	3.844652887937014E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999989072936922	WITHOUT_CLASSIFICATION	1.0927063077919136E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999497331532617	WITHOUT_CLASSIFICATION	5.026684673828165E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999649522043241	WITHOUT_CLASSIFICATION	3.504779567590329E-5	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999794534562721	WITHOUT_CLASSIFICATION	2.0546543727861004E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9997281148715963	WITHOUT_CLASSIFICATION	2.718851284036651E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999974968287001	WITHOUT_CLASSIFICATION	2.5031712999750414E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999975972290608	WITHOUT_CLASSIFICATION	2.4027709393293144E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999582734510368	WITHOUT_CLASSIFICATION	4.1726548963105666E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997376490627	WITHOUT_CLASSIFICATION	2.623509372987761E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999999138978273	WITHOUT_CLASSIFICATION	8.610217271621212E-8	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9982343547948548	WITHOUT_CLASSIFICATION	0.0017656452051451972	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998426116716	WITHOUT_CLASSIFICATION	1.5738832832012343E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999920400981743	WITHOUT_CLASSIFICATION	7.959901825684797E-6	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.999984755349813	WITHOUT_CLASSIFICATION	1.524465018692405E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999971966617862	WITHOUT_CLASSIFICATION	2.803338213843405E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999747404400009	WITHOUT_CLASSIFICATION	2.5259559999059135E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999098600699152	WITHOUT_CLASSIFICATION	9.013993008476391E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999981439797373	WITHOUT_CLASSIFICATION	1.8560202627700706E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999970741538744	WITHOUT_CLASSIFICATION	2.9258461255523535E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999988853629954	WITHOUT_CLASSIFICATION	1.1146370046656852E-6	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999997649798846	WITHOUT_CLASSIFICATION	2.3502011534994347E-7	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999909778331646	WITHOUT_CLASSIFICATION	9.022166835445947E-6	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999896043474573	WITHOUT_CLASSIFICATION	1.039565254269681E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.999999361896961	WITHOUT_CLASSIFICATION	6.381030390481942E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999982289805142	WITHOUT_CLASSIFICATION	1.7710194857646822E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999872160639983	WITHOUT_CLASSIFICATION	1.2783936001731721E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999861086947205	WITHOUT_CLASSIFICATION	1.3891305279434035E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999922290731579	WITHOUT_CLASSIFICATION	7.770926842133634E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999998629178111	WITHOUT_CLASSIFICATION	1.3708218890630503E-7	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999998280193069	WITHOUT_CLASSIFICATION	1.7198069323606648E-7	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999983215019626	WITHOUT_CLASSIFICATION	1.67849803743095E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999982899181575	WITHOUT_CLASSIFICATION	1.7100818425053616E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999799228497483	WITHOUT_CLASSIFICATION	2.007715025159979E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999991027184219	WITHOUT_CLASSIFICATION	8.972815781014906E-7	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999725453246456	WITHOUT_CLASSIFICATION	2.745467535438813E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999998396338424	WITHOUT_CLASSIFICATION	1.6036615759708087E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999972139621163	WITHOUT_CLASSIFICATION	2.7860378836802487E-6	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999968324673689	WITHOUT_CLASSIFICATION	3.1675326309600595E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999974439060901	WITHOUT_CLASSIFICATION	2.5560939099214747E-6	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999985407215798	WITHOUT_CLASSIFICATION	1.4592784202156222E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998813059971602	WITHOUT_CLASSIFICATION	1.1869400283986591E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998813059971602	WITHOUT_CLASSIFICATION	1.1869400283986591E-4	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999895899889674	WITHOUT_CLASSIFICATION	1.0410011032600588E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999993906408587	WITHOUT_CLASSIFICATION	6.093591413499022E-7	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999417655657	WITHOUT_CLASSIFICATION	5.8234434398928996E-8	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999968292297651	WITHOUT_CLASSIFICATION	3.170770234927739E-6	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999652705733343	WITHOUT_CLASSIFICATION	3.472942666576115E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999977133508418	WITHOUT_CLASSIFICATION	2.2866491583064905E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999913617563206	WITHOUT_CLASSIFICATION	8.63824367941932E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999118743428	WITHOUT_CLASSIFICATION	8.812565721613054E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999544791348688	WITHOUT_CLASSIFICATION	4.552086513124404E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999947068769975	WITHOUT_CLASSIFICATION	5.293123002359837E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999977814180614	WITHOUT_CLASSIFICATION	2.2185819385743385E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999357913523292	WITHOUT_CLASSIFICATION	6.42086476707963E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999912610540539	WITHOUT_CLASSIFICATION	8.738945946005478E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.999998494225232	WITHOUT_CLASSIFICATION	1.505774767985822E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998589133391	WITHOUT_CLASSIFICATION	1.4108666092225655E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998589133391	WITHOUT_CLASSIFICATION	1.4108666092225655E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999998249479801	WITHOUT_CLASSIFICATION	1.750520199117835E-6	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999950202950606	WITHOUT_CLASSIFICATION	4.979704939447065E-6	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999992304217281	WITHOUT_CLASSIFICATION	7.695782718897986E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999986236064268	WITHOUT_CLASSIFICATION	1.3763935731559472E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999998142216575	WITHOUT_CLASSIFICATION	1.857783425022975E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989810743939	WITHOUT_CLASSIFICATION	1.0189256060948056E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999779010804805	WITHOUT_CLASSIFICATION	2.209891951957373E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9998926187226884	WITHOUT_CLASSIFICATION	1.0738127731148654E-4	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999996884400608	WITHOUT_CLASSIFICATION	3.1155993916446845E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.999942197150004	WITHOUT_CLASSIFICATION	5.78028499961154E-5	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999789156228918	WITHOUT_CLASSIFICATION	2.1084377108223524E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999993297304229	WITHOUT_CLASSIFICATION	6.70269576995064E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999916361254	WITHOUT_CLASSIFICATION	8.36387460937388E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999986820445889	WITHOUT_CLASSIFICATION	1.3179554110446256E-6	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.99999970710911	WITHOUT_CLASSIFICATION	2.928908900181697E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.999888871015092	WITHOUT_CLASSIFICATION	1.1112898490797185E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999904623587671	WITHOUT_CLASSIFICATION	9.537641232813193E-6	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999973690426698	WITHOUT_CLASSIFICATION	2.6309573302651263E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999996738928231	WITHOUT_CLASSIFICATION	3.2610717696649845E-7	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999996385945967	WITHOUT_CLASSIFICATION	3.614054033520013E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999932285834997	WITHOUT_CLASSIFICATION	6.771416500305939E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999612342831	WITHOUT_CLASSIFICATION	3.876571689390056E-8	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999991322136375	WITHOUT_CLASSIFICATION	8.677863626081511E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999529434635532	WITHOUT_CLASSIFICATION	4.705653644671856E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9991264197509784	WITHOUT_CLASSIFICATION	8.735802490215585E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999928244088928	WITHOUT_CLASSIFICATION	7.175591107167543E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999998456267824	WITHOUT_CLASSIFICATION	1.5437321760161264E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999898878808569	WITHOUT_CLASSIFICATION	1.0112119143107583E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999964952047031	WITHOUT_CLASSIFICATION	3.5047952968472872E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999854827588537	WITHOUT_CLASSIFICATION	1.4517241146199424E-5	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999820753492805	WITHOUT_CLASSIFICATION	1.7924650719421563E-5	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999617567261534	WITHOUT_CLASSIFICATION	3.82432738465419E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999992785963892	WITHOUT_CLASSIFICATION	7.214036108096411E-7	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999352915870778	WITHOUT_CLASSIFICATION	6.470841292213639E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9974584592943653	WITHOUT_CLASSIFICATION	0.0025415407056347985	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999981030952593	WITHOUT_CLASSIFICATION	1.896904740643257E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999725199252332	WITHOUT_CLASSIFICATION	2.748007476689146E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999974426684132	WITHOUT_CLASSIFICATION	2.557331586858709E-6	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999933148563309	WITHOUT_CLASSIFICATION	6.685143669105557E-6	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999994216357004	WITHOUT_CLASSIFICATION	5.783642996054214E-7	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995464139396	WITHOUT_CLASSIFICATION	4.5358606038406753E-7	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999995464139396	WITHOUT_CLASSIFICATION	4.5358606038406753E-7	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999995884292341	WITHOUT_CLASSIFICATION	4.1157076598013453E-7	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999985924157506	WITHOUT_CLASSIFICATION	1.4075842494186706E-6	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999279443740556	WITHOUT_CLASSIFICATION	7.205562594439786E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999979543137707	WITHOUT_CLASSIFICATION	2.045686229263898E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999792309831222	WITHOUT_CLASSIFICATION	2.0769016877737452E-5	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999477295034429	WITHOUT_CLASSIFICATION	5.227049655719872E-5	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999939853405502	WITHOUT_CLASSIFICATION	6.014659449797751E-6	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999964426337874	WITHOUT_CLASSIFICATION	3.557366212556907E-6	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999852053694914	WITHOUT_CLASSIFICATION	1.479463050855929E-5	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970374286842	WITHOUT_CLASSIFICATION	2.962571315830431E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974288743936	WITHOUT_CLASSIFICATION	2.571125606364958E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999101783055242	WITHOUT_CLASSIFICATION	8.982169447588303E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9983645204366053	WITHOUT_CLASSIFICATION	0.001635479563394786	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999973545568719	WITHOUT_CLASSIFICATION	2.6454431280974347E-5	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999995032703246	WITHOUT_CLASSIFICATION	4.96729675491855E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.999999264049085	WITHOUT_CLASSIFICATION	7.359509150151658E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999428967736846	WITHOUT_CLASSIFICATION	5.710322631541548E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999997204085287	WITHOUT_CLASSIFICATION	2.7959147133407236E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999951472113185	WITHOUT_CLASSIFICATION	4.85278868146411E-6	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999866784018	WITHOUT_CLASSIFICATION	1.3321598096620412E-8	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999991364408088	WITHOUT_CLASSIFICATION	8.635591911154598E-7	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999991700171648	WITHOUT_CLASSIFICATION	8.299828352082156E-7	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999456475274753	WITHOUT_CLASSIFICATION	5.435247252463975E-5	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999956861157218	WITHOUT_CLASSIFICATION	4.313884278197356E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999877300506033	WITHOUT_CLASSIFICATION	1.2269949396700068E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999872561203358	WITHOUT_CLASSIFICATION	1.2743879664184129E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999973814226904	WITHOUT_CLASSIFICATION	2.6185773096005464E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999991535744584	WITHOUT_CLASSIFICATION	8.464255416000952E-6	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999865968780197	WITHOUT_CLASSIFICATION	1.3403121980264883E-5	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999961372806107	WITHOUT_CLASSIFICATION	3.862719389402859E-6	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999997951416281	WITHOUT_CLASSIFICATION	2.0485837195863967E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999989136124254	WITHOUT_CLASSIFICATION	1.0863875745838394E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999998595024743	WITHOUT_CLASSIFICATION	1.4049752569581583E-6	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983685730736	WITHOUT_CLASSIFICATION	1.631426926390105E-6	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999945373195109	WITHOUT_CLASSIFICATION	5.462680489056413E-6	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9998190020746485	WITHOUT_CLASSIFICATION	1.8099792535153196E-4	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999983549641018	WITHOUT_CLASSIFICATION	1.6450358981937301E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999996236682759	WITHOUT_CLASSIFICATION	3.763317241364162E-7	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999996773761034	WITHOUT_CLASSIFICATION	3.2262389666956606E-7	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999801382937764	WITHOUT_CLASSIFICATION	1.9861706223573096E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999962271475471	WITHOUT_CLASSIFICATION	3.7728524530190677E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999990325130464	WITHOUT_CLASSIFICATION	9.67486953654071E-7	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999989655619241	WITHOUT_CLASSIFICATION	1.0344380757723424E-6	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999995867153709	WITHOUT_CLASSIFICATION	4.13284629100995E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999990255155046	WITHOUT_CLASSIFICATION	9.744844954039008E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999978722345362	WITHOUT_CLASSIFICATION	2.1277654639131756E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999914752853054	WITHOUT_CLASSIFICATION	8.524714694511585E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999912610540539	WITHOUT_CLASSIFICATION	8.738945946005478E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999913688777856	WITHOUT_CLASSIFICATION	8.631122214394654E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999996315821794	WITHOUT_CLASSIFICATION	3.68417820590653E-7	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999752462397401	WITHOUT_CLASSIFICATION	2.4753760259981517E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999621121107624	WITHOUT_CLASSIFICATION	3.7887889237580257E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999993415884479	WITHOUT_CLASSIFICATION	6.584115519700999E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999867242506397	WITHOUT_CLASSIFICATION	1.327574936017002E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999048724414372	WITHOUT_CLASSIFICATION	9.512755856280946E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998990131357	WITHOUT_CLASSIFICATION	1.0098686431167772E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999807864329718	WITHOUT_CLASSIFICATION	1.9213567028073635E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999999917567713	WITHOUT_CLASSIFICATION	8.243228698504642E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999609510774533	WITHOUT_CLASSIFICATION	3.904892254677976E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999471963745411	WITHOUT_CLASSIFICATION	5.280362545881896E-5	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999981477510406	WITHOUT_CLASSIFICATION	1.8522489594483418E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999191114993	WITHOUT_CLASSIFICATION	8.088850073260607E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922970305266	WITHOUT_CLASSIFICATION	7.702969473408673E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998805897225158	WITHOUT_CLASSIFICATION	1.1941027748414833E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999925943578006	WITHOUT_CLASSIFICATION	7.405642199373716E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997699429313	WITHOUT_CLASSIFICATION	2.300570685731542E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999969820082106	WITHOUT_CLASSIFICATION	3.0179917893200763E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922970305266	WITHOUT_CLASSIFICATION	7.702969473408673E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999940737016512	WITHOUT_CLASSIFICATION	5.926298348795358E-6	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999690474704769	WITHOUT_CLASSIFICATION	3.095252952319639E-5	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999998993981334	WITHOUT_CLASSIFICATION	1.0060186668121489E-7	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997807180115539	WITHOUT_CLASSIFICATION	2.1928198844598738E-4	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999749908764327	WITHOUT_CLASSIFICATION	2.500912356724048E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999956600390678	WITHOUT_CLASSIFICATION	4.339960932224155E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999989691992472	WITHOUT_CLASSIFICATION	1.0308007527766205E-6	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999997242901193	WITHOUT_CLASSIFICATION	2.7570988070224695E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999994062481868	WITHOUT_CLASSIFICATION	5.937518132744734E-7	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999335487164	WITHOUT_CLASSIFICATION	6.645128359753142E-8	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999990687722896	WITHOUT_CLASSIFICATION	9.312277102578509E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9997186918048099	WITHOUT_CLASSIFICATION	2.8130819519016717E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999923288060747	WITHOUT_CLASSIFICATION	7.671193925298827E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999997392887824	WITHOUT_CLASSIFICATION	2.6071121770094854E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999725649471299	WITHOUT_CLASSIFICATION	2.743505287001638E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999806748588319	WITHOUT_CLASSIFICATION	1.9325141168027885E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998879343744	WITHOUT_CLASSIFICATION	1.1206562559068406E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999983724785024	WITHOUT_CLASSIFICATION	1.6275214975362039E-6	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999883345351027	WITHOUT_CLASSIFICATION	1.1665464897185726E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999594469254698	WITHOUT_CLASSIFICATION	4.055307453016046E-5	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999997323228641	WITHOUT_CLASSIFICATION	2.676771359037911E-7	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999834460566609	WITHOUT_CLASSIFICATION	1.6553943339125658E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999994941949564	WITHOUT_CLASSIFICATION	5.058050436656888E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999898202372	WITHOUT_CLASSIFICATION	1.0179762794511779E-8	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999981652361538	WITHOUT_CLASSIFICATION	1.8347638462438675E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999939918654661	WITHOUT_CLASSIFICATION	6.0081345338132795E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9954003192474247	WITHOUT_CLASSIFICATION	0.0045996807525754075	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999984038137016	WITHOUT_CLASSIFICATION	1.5961862983415592E-6	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999790319593499	WITHOUT_CLASSIFICATION	2.096804065011057E-5	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999876366579025	WITHOUT_CLASSIFICATION	1.2363342097439173E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999956040896368	WITHOUT_CLASSIFICATION	4.395910363080842E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999907923164532	WITHOUT_CLASSIFICATION	9.207683546868711E-6	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999790019423735	WITHOUT_CLASSIFICATION	2.0998057626524535E-5	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999977234374561	WITHOUT_CLASSIFICATION	2.2765625440291083E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999940752209718	WITHOUT_CLASSIFICATION	5.924779028193542E-5	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9995342450770686	WITHOUT_CLASSIFICATION	4.657549229314467E-4	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9996411326929281	WITHOUT_CLASSIFICATION	3.5886730707187543E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.999999203238567	WITHOUT_CLASSIFICATION	7.967614329832646E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999973246548085	WITHOUT_CLASSIFICATION	2.6753451914183256E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999843804347609	WITHOUT_CLASSIFICATION	1.5619565239156703E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999998810286406	WITHOUT_CLASSIFICATION	1.189713593997303E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999998810286406	WITHOUT_CLASSIFICATION	1.189713593997303E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999976102557196	WITHOUT_CLASSIFICATION	2.389744280257673E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999986717260849	WITHOUT_CLASSIFICATION	1.3282739150190273E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992323517366	WITHOUT_CLASSIFICATION	7.676482634656673E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9985635519192122	WITHOUT_CLASSIFICATION	0.0014364480807878054	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999987815298001	WITHOUT_CLASSIFICATION	1.218470199910163E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999987815298001	WITHOUT_CLASSIFICATION	1.218470199910163E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.999971737906636	WITHOUT_CLASSIFICATION	2.8262093364017196E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999758176758752	WITHOUT_CLASSIFICATION	2.4182324124822095E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9998015266446556	WITHOUT_CLASSIFICATION	1.9847335534435985E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999649201182236	WITHOUT_CLASSIFICATION	3.507988177650177E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999935622760185	WITHOUT_CLASSIFICATION	6.437723981537502E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999971450255962	WITHOUT_CLASSIFICATION	2.8549744039153815E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999999397257644	WITHOUT_CLASSIFICATION	6.027423560372808E-7	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999967549403949	WITHOUT_CLASSIFICATION	3.245059605251592E-6	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999976955735693	WITHOUT_CLASSIFICATION	2.3044264306975986E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999312759171759	WITHOUT_CLASSIFICATION	6.872408282412037E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999312759171759	WITHOUT_CLASSIFICATION	6.872408282412037E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999978728133463	WITHOUT_CLASSIFICATION	2.1271866537303164E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999675901245595	WITHOUT_CLASSIFICATION	3.240987544058983E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999921207245495	WITHOUT_CLASSIFICATION	7.879275450569092E-6	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999903583485245	WITHOUT_CLASSIFICATION	9.641651475570672E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999932630871546	WITHOUT_CLASSIFICATION	6.736912845324353E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997045641142	WITHOUT_CLASSIFICATION	2.954358858323995E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438918681625	WITHOUT_CLASSIFICATION	5.610813183762066E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999271372307	WITHOUT_CLASSIFICATION	7.286276915553094E-8	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999868877125843	WITHOUT_CLASSIFICATION	1.311228741570242E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999271417491171	WITHOUT_CLASSIFICATION	7.285825088283884E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9998304035994987	WITHOUT_CLASSIFICATION	1.6959640050125525E-4	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999335487164	WITHOUT_CLASSIFICATION	6.645128359753142E-8	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999965794496657	WITHOUT_CLASSIFICATION	3.42055033437069E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9961822466326524	WITHOUT_CLASSIFICATION	0.00381775336734755	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999986757037507	WITHOUT_CLASSIFICATION	1.3242962492348164E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999854449390441	WITHOUT_CLASSIFICATION	1.4555060955930841E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999925567936214	WITHOUT_CLASSIFICATION	7.443206378463025E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999883326428788	WITHOUT_CLASSIFICATION	1.1667357121199136E-5	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999580694766428	WITHOUT_CLASSIFICATION	4.193052335731515E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999265416596	WITHOUT_CLASSIFICATION	7.345834037570972E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999931289266571	WITHOUT_CLASSIFICATION	6.871073342865629E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999945940455816	WITHOUT_CLASSIFICATION	5.4059544184068384E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999945940455816	WITHOUT_CLASSIFICATION	5.4059544184068384E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999865957723967	WITHOUT_CLASSIFICATION	1.3404227603336818E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999998967574261	WITHOUT_CLASSIFICATION	1.032425740064814E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999561046399	WITHOUT_CLASSIFICATION	4.389536010010779E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999991171600636	WITHOUT_CLASSIFICATION	8.828399364051297E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999876791688083	WITHOUT_CLASSIFICATION	1.23208311917096E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999987661166024	WITHOUT_CLASSIFICATION	1.233883397627466E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999984165110163	WITHOUT_CLASSIFICATION	1.5834889837038013E-6	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999994353967797	WITHOUT_CLASSIFICATION	5.646032202634662E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999986580645448	WITHOUT_CLASSIFICATION	1.3419354551649378E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999829620728166	WITHOUT_CLASSIFICATION	1.7037927183389598E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999835572067136	WITHOUT_CLASSIFICATION	1.6442793286409987E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999212018820705	WITHOUT_CLASSIFICATION	7.879811792959504E-5	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999994136400427	WITHOUT_CLASSIFICATION	5.863599572205084E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999783429386694	WITHOUT_CLASSIFICATION	2.1657061330560838E-5	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999983351104248	WITHOUT_CLASSIFICATION	1.6648895752596543E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999965576596639	WITHOUT_CLASSIFICATION	3.442340336085808E-6	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999993803777105	WITHOUT_CLASSIFICATION	6.196222895107459E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999971973289727	WITHOUT_CLASSIFICATION	2.80267102736389E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999002420155181	WITHOUT_CLASSIFICATION	9.975798448194879E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9987368931008944	WITHOUT_CLASSIFICATION	0.0012631068991056078	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998330328230978	WITHOUT_CLASSIFICATION	1.6696717690213838E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9993963154843113	WITHOUT_CLASSIFICATION	6.036845156886119E-4	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999919789893683	WITHOUT_CLASSIFICATION	8.021010631710434E-6	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.8003095709595234	WITHOUT_CLASSIFICATION	0.19969042904047668	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996826200995	WITHOUT_CLASSIFICATION	3.173799004798879E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996826200995	WITHOUT_CLASSIFICATION	3.173799004798879E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999974153070729	WITHOUT_CLASSIFICATION	2.58469292708832E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999986160803417	WITHOUT_CLASSIFICATION	1.383919658316772E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999998319415361	WITHOUT_CLASSIFICATION	1.6805846383412307E-7	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999755510156	WITHOUT_CLASSIFICATION	2.444898437682207E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999930160923443	WITHOUT_CLASSIFICATION	6.983907655699355E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9998124860385841	WITHOUT_CLASSIFICATION	1.8751396141600173E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999118426286464	WITHOUT_CLASSIFICATION	8.81573713535243E-5	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999981272140875	WITHOUT_CLASSIFICATION	1.8727859123983564E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9999828149475879	WITHOUT_CLASSIFICATION	1.7185052412084664E-5	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.99784442051375	WITHOUT_CLASSIFICATION	0.0021555794862499057	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9997643565866285	WITHOUT_CLASSIFICATION	2.3564341337146293E-4	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9995185565710716	WITHOUT_CLASSIFICATION	4.814434289284097E-4	DEFECT
/*	DEFECT	0.998530943242133	WITHOUT_CLASSIFICATION	0.001469056757866989	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9961050801553637	WITHOUT_CLASSIFICATION	0.0038949198446363706	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9992894081144381	WITHOUT_CLASSIFICATION	7.105918855618956E-4	DEFECT
// TODO : should this be an error?	DEFECT	0.9087367613413944	DEFECT	0.09126323865860567	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.7057249406750802	WITHOUT_CLASSIFICATION	0.2942750593249199	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8993318109077979	WITHOUT_CLASSIFICATION	0.10066818909220206	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9595852718131856	WITHOUT_CLASSIFICATION	0.04041472818681431	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9595852718131856	WITHOUT_CLASSIFICATION	0.04041472818681431	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.996747050612012	WITHOUT_CLASSIFICATION	0.0032529493879879007	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.999811783391443	WITHOUT_CLASSIFICATION	1.882166085569877E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9944046933900533	WITHOUT_CLASSIFICATION	0.005595306609946671	DEFECT
// this call is side-effecty	DEFECT	0.9999372886871436	WITHOUT_CLASSIFICATION	6.271131285635878E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9998466336713593	WITHOUT_CLASSIFICATION	1.5336632864068053E-4	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9702617735207526	WITHOUT_CLASSIFICATION	0.029738226479247447	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9999867131165886	WITHOUT_CLASSIFICATION	1.3286883411426549E-5	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9972577956122108	WITHOUT_CLASSIFICATION	0.0027422043877892038	DEFECT
//TODO: is this completely correct?	DEFECT	0.5617026393489613	DEFECT	0.4382973606510387	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999879931577426	WITHOUT_CLASSIFICATION	1.2006842257396656E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9997856903852734	WITHOUT_CLASSIFICATION	2.1430961472667314E-4	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.936916292607359	WITHOUT_CLASSIFICATION	0.0630837073926411	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9971864977940699	WITHOUT_CLASSIFICATION	0.0028135022059301994	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9571502471194012	DEFECT	0.0428497528805987	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9857703002204548	WITHOUT_CLASSIFICATION	0.014229699779545206	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.999977183409749	WITHOUT_CLASSIFICATION	2.281659025099129E-5	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9964269788399193	WITHOUT_CLASSIFICATION	0.0035730211600808314	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9892742950730307	WITHOUT_CLASSIFICATION	0.01072570492696932	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9972116474357843	WITHOUT_CLASSIFICATION	0.002788352564215804	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9595852718131856	WITHOUT_CLASSIFICATION	0.04041472818681431	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.5239838959825778	WITHOUT_CLASSIFICATION	0.47601610401742217	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.999987463795531	WITHOUT_CLASSIFICATION	1.2536204469042017E-5	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9951764607954205	WITHOUT_CLASSIFICATION	0.0048235392045794506	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9999827988530942	WITHOUT_CLASSIFICATION	1.720114690588836E-5	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999457545380006	WITHOUT_CLASSIFICATION	5.424546199948274E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9991410984396181	WITHOUT_CLASSIFICATION	8.589015603818826E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9997008427166043	WITHOUT_CLASSIFICATION	2.991572833957021E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9810768857534161	WITHOUT_CLASSIFICATION	0.018923114246583824	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9986289900289487	WITHOUT_CLASSIFICATION	0.0013710099710513852	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9974917310240713	WITHOUT_CLASSIFICATION	0.002508268975928685	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9998536027889445	WITHOUT_CLASSIFICATION	1.4639721105542334E-4	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.892959206614395	WITHOUT_CLASSIFICATION	0.10704079338560496	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9999085764852463	WITHOUT_CLASSIFICATION	9.142351475367208E-5	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9829804417289993	WITHOUT_CLASSIFICATION	0.017019558271000632	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9883365297370366	WITHOUT_CLASSIFICATION	0.011663470262963408	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.971378551675764	WITHOUT_CLASSIFICATION	0.02862144832423591	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.581378692097027	WITHOUT_CLASSIFICATION	0.418621307902973	DEFECT
