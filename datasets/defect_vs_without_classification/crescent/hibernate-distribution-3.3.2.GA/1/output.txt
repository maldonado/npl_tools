//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998717512076379	WITHOUT_CLASSIFICATION	1.2824879236205284E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9968737082581328	WITHOUT_CLASSIFICATION	0.0031262917418671578	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999764766093423	WITHOUT_CLASSIFICATION	2.3523390657676894E-5	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999525925667107	WITHOUT_CLASSIFICATION	4.740743328930833E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999204066588074	WITHOUT_CLASSIFICATION	7.959334119264943E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999204066588074	WITHOUT_CLASSIFICATION	7.959334119264943E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999717794725066	WITHOUT_CLASSIFICATION	2.822052749350363E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981346487036	WITHOUT_CLASSIFICATION	1.8653512964694897E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999784224017209	WITHOUT_CLASSIFICATION	2.1577598279167005E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999990661326898	WITHOUT_CLASSIFICATION	9.338673102014877E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999534300704268	WITHOUT_CLASSIFICATION	4.656992957315256E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999534300704268	WITHOUT_CLASSIFICATION	4.656992957315256E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999090173917825	WITHOUT_CLASSIFICATION	9.098260821746046E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999969193844862	WITHOUT_CLASSIFICATION	3.080615513855349E-6	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999939506501277	WITHOUT_CLASSIFICATION	6.049349872278327E-6	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999966253419146	WITHOUT_CLASSIFICATION	3.374658085420252E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999980001584151	WITHOUT_CLASSIFICATION	1.999841585010986E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999807082267156	WITHOUT_CLASSIFICATION	1.9291773284407828E-4	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9998413539777861	WITHOUT_CLASSIFICATION	1.5864602221395396E-4	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9998619261680405	WITHOUT_CLASSIFICATION	1.3807383195956174E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997728469654575	WITHOUT_CLASSIFICATION	2.2715303454243622E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9941495762592308	WITHOUT_CLASSIFICATION	0.005850423740769206	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998585374186403	WITHOUT_CLASSIFICATION	1.41462581359815E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999852582854211	WITHOUT_CLASSIFICATION	1.4741714578897315E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999825681636662	WITHOUT_CLASSIFICATION	1.7431836333781017E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998202865686079	WITHOUT_CLASSIFICATION	1.797134313920721E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998202865686079	WITHOUT_CLASSIFICATION	1.797134313920721E-4	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999995448467932	WITHOUT_CLASSIFICATION	4.5515320684056954E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999707762800266	WITHOUT_CLASSIFICATION	2.9223719973408934E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999819542287913	WITHOUT_CLASSIFICATION	1.8045771208629622E-5	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999990726773044	WITHOUT_CLASSIFICATION	9.273226957490801E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.999999841172057	WITHOUT_CLASSIFICATION	1.5882794299194006E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9943856445478424	WITHOUT_CLASSIFICATION	0.005614355452157497	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9943856445478424	WITHOUT_CLASSIFICATION	0.005614355452157497	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999965103031336	WITHOUT_CLASSIFICATION	3.4896968662811756E-6	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999912757992868	WITHOUT_CLASSIFICATION	8.724200713159389E-6	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.99999941887436	WITHOUT_CLASSIFICATION	5.811256400731922E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998649187178849	WITHOUT_CLASSIFICATION	1.3508128211508268E-4	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999892163633106	WITHOUT_CLASSIFICATION	1.0783636689354858E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816228624072	WITHOUT_CLASSIFICATION	1.837713759275729E-5	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999782174778752	WITHOUT_CLASSIFICATION	2.1782522124883577E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999987823554843	WITHOUT_CLASSIFICATION	1.2176445157024291E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9997372228028006	WITHOUT_CLASSIFICATION	2.6277719719936297E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999996193819327	WITHOUT_CLASSIFICATION	3.806180672908498E-7	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999019285888946	WITHOUT_CLASSIFICATION	9.807141110543519E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9997372228028006	WITHOUT_CLASSIFICATION	2.6277719719936297E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999019285888946	WITHOUT_CLASSIFICATION	9.807141110543519E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999754748119848	WITHOUT_CLASSIFICATION	2.4525188015218533E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.99999958422559	WITHOUT_CLASSIFICATION	4.1577440995297446E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999978657308379	WITHOUT_CLASSIFICATION	2.134269162139474E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999822088059444	WITHOUT_CLASSIFICATION	1.779119405564971E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999620028567	WITHOUT_CLASSIFICATION	3.7997143351411704E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999997601347929	WITHOUT_CLASSIFICATION	2.3986520713748204E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999996062620504	WITHOUT_CLASSIFICATION	3.937379495871814E-7	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999548318198046	WITHOUT_CLASSIFICATION	4.5168180195328174E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999859383916294	WITHOUT_CLASSIFICATION	1.4061608370603953E-5	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.99983876946103	WITHOUT_CLASSIFICATION	1.6123053896991855E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999898824843887	WITHOUT_CLASSIFICATION	1.0117515611232755E-5	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999751934103266	WITHOUT_CLASSIFICATION	2.480658967345633E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999983246811045	WITHOUT_CLASSIFICATION	1.675318895539887E-6	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999890474491092	WITHOUT_CLASSIFICATION	1.0952550890693082E-5	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999859758757877	WITHOUT_CLASSIFICATION	1.4024124212307288E-5	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999981301159183	WITHOUT_CLASSIFICATION	1.869884081782284E-6	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.99997065461661	WITHOUT_CLASSIFICATION	2.9345383389930007E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999975399828801	WITHOUT_CLASSIFICATION	2.460017119872244E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999933057246476	WITHOUT_CLASSIFICATION	6.694275352384864E-6	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999929717147811	WITHOUT_CLASSIFICATION	7.028285218822232E-6	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999988653454689	WITHOUT_CLASSIFICATION	1.1346545311196424E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9998144957831647	WITHOUT_CLASSIFICATION	1.8550421683522875E-4	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999899578796271	WITHOUT_CLASSIFICATION	1.0042120372882997E-5	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999875345358785	WITHOUT_CLASSIFICATION	1.246546412140809E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999992178405737	WITHOUT_CLASSIFICATION	7.821594263306193E-7	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999953567189538	WITHOUT_CLASSIFICATION	4.643281046105038E-6	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999994235911804	WITHOUT_CLASSIFICATION	5.764088196830995E-7	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999994212365599	WITHOUT_CLASSIFICATION	5.787634401495693E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999409125842	WITHOUT_CLASSIFICATION	5.908741579868936E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999989471210973	WITHOUT_CLASSIFICATION	1.052878902702444E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999991034388505	WITHOUT_CLASSIFICATION	8.965611495924516E-7	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999979548814526	WITHOUT_CLASSIFICATION	2.0451185473782398E-6	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999346877881249	WITHOUT_CLASSIFICATION	6.531221187517086E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999771572588839	WITHOUT_CLASSIFICATION	2.284274111612009E-5	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999814378064563	WITHOUT_CLASSIFICATION	1.856219354367208E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999964200760085	WITHOUT_CLASSIFICATION	3.5799239914716505E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999771572588839	WITHOUT_CLASSIFICATION	2.284274111612009E-5	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999992279523432	WITHOUT_CLASSIFICATION	7.720476567939482E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999833493738021	WITHOUT_CLASSIFICATION	1.6650626197997615E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9998990279737404	WITHOUT_CLASSIFICATION	1.0097202625953737E-4	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999495324411095	WITHOUT_CLASSIFICATION	5.0467558890543616E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.999974834495252	WITHOUT_CLASSIFICATION	2.516550474799375E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999958114078505	WITHOUT_CLASSIFICATION	4.188592149413907E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999958114078505	WITHOUT_CLASSIFICATION	4.188592149413907E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999476972960353	WITHOUT_CLASSIFICATION	5.2302703964800476E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999996861038252	WITHOUT_CLASSIFICATION	3.138961748713249E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.999956677272999	WITHOUT_CLASSIFICATION	4.332272700097828E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999965593677455	WITHOUT_CLASSIFICATION	3.4406322545097512E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999971737498224	WITHOUT_CLASSIFICATION	2.826250177562435E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999944491784049	WITHOUT_CLASSIFICATION	5.550821595166999E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999873352201927	WITHOUT_CLASSIFICATION	1.2664779807262584E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999759896348689	WITHOUT_CLASSIFICATION	2.4010365131046613E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999941416093064	WITHOUT_CLASSIFICATION	5.858390693598469E-6	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999939202884641	WITHOUT_CLASSIFICATION	6.079711535905323E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999995141784475	WITHOUT_CLASSIFICATION	4.858215524943009E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999995141784475	WITHOUT_CLASSIFICATION	4.858215524943009E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963865379728	WITHOUT_CLASSIFICATION	3.6134620272181336E-6	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999984716159119	WITHOUT_CLASSIFICATION	1.528384088111002E-5	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999918139897143	WITHOUT_CLASSIFICATION	8.186010285743629E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999995141784475	WITHOUT_CLASSIFICATION	4.858215524943009E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963865379728	WITHOUT_CLASSIFICATION	3.6134620272181336E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999963865379728	WITHOUT_CLASSIFICATION	3.6134620272181336E-6	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.999998375075941	WITHOUT_CLASSIFICATION	1.6249240588504816E-6	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999867274656463	WITHOUT_CLASSIFICATION	1.3272534353716183E-5	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999826341105371	WITHOUT_CLASSIFICATION	1.736588946289389E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999995872590652	WITHOUT_CLASSIFICATION	4.1274093479066304E-7	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999972289195012	WITHOUT_CLASSIFICATION	2.7710804988769254E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999972289195012	WITHOUT_CLASSIFICATION	2.7710804988769254E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999916659461705	WITHOUT_CLASSIFICATION	8.334053829511564E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999918965280277	WITHOUT_CLASSIFICATION	8.103471972406802E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999048464941266	WITHOUT_CLASSIFICATION	9.515350587340389E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999975684692342	WITHOUT_CLASSIFICATION	2.43153076574576E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999975684692342	WITHOUT_CLASSIFICATION	2.43153076574576E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999826896768044	WITHOUT_CLASSIFICATION	1.7310323195595617E-5	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996262003765	WITHOUT_CLASSIFICATION	3.7379962342620795E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850551157644	WITHOUT_CLASSIFICATION	1.4944884235507915E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999969744571592	WITHOUT_CLASSIFICATION	3.025542840794081E-6	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999988383674759	WITHOUT_CLASSIFICATION	1.1616325240608E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999990449382394	WITHOUT_CLASSIFICATION	9.550617605495503E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999913220676787	WITHOUT_CLASSIFICATION	8.67793232121592E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999990398195179	WITHOUT_CLASSIFICATION	9.601804821521687E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9997675281563154	WITHOUT_CLASSIFICATION	2.3247184368465937E-4	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999850551157644	WITHOUT_CLASSIFICATION	1.4944884235507915E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.999681420010518	WITHOUT_CLASSIFICATION	3.1857998948208013E-4	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999970931095711	WITHOUT_CLASSIFICATION	2.9068904288988763E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999970931095711	WITHOUT_CLASSIFICATION	2.9068904288988763E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999903186243984	WITHOUT_CLASSIFICATION	9.681375601599354E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999804098093916	WITHOUT_CLASSIFICATION	1.9590190608399087E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999964334962997	WITHOUT_CLASSIFICATION	3.5665037003259166E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999945157229975	WITHOUT_CLASSIFICATION	5.484277002510674E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997135636105727	WITHOUT_CLASSIFICATION	2.864363894272484E-4	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9996861224367286	WITHOUT_CLASSIFICATION	3.1387756327143823E-4	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999743203060333	WITHOUT_CLASSIFICATION	2.5679693966637227E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999989100764495	WITHOUT_CLASSIFICATION	1.0899235504375948E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999987184404475	WITHOUT_CLASSIFICATION	1.2815595525014503E-5	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999987184404475	WITHOUT_CLASSIFICATION	1.2815595525014503E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998717512076379	WITHOUT_CLASSIFICATION	1.2824879236205284E-4	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999871332321147	WITHOUT_CLASSIFICATION	1.2866767885170316E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999790789085725	WITHOUT_CLASSIFICATION	2.0921091427539776E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999069136368193	WITHOUT_CLASSIFICATION	9.308636318070709E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999543177754442	WITHOUT_CLASSIFICATION	4.5682224555829275E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999519306282442	WITHOUT_CLASSIFICATION	4.8069371755772355E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999961027699125	WITHOUT_CLASSIFICATION	3.8972300875063205E-5	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999335852812145	WITHOUT_CLASSIFICATION	6.641471878561777E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9998995684364471	WITHOUT_CLASSIFICATION	1.0043156355286861E-4	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999095694915223	WITHOUT_CLASSIFICATION	9.04305084776987E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999598382618518	WITHOUT_CLASSIFICATION	4.016173814823935E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999764766093423	WITHOUT_CLASSIFICATION	2.3523390657676894E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999629868923873	WITHOUT_CLASSIFICATION	3.701310761269124E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999629868923873	WITHOUT_CLASSIFICATION	3.701310761269124E-5	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999646817168897	WITHOUT_CLASSIFICATION	3.5318283110322E-5	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9984352402935563	WITHOUT_CLASSIFICATION	0.0015647597064436666	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999880924961209	WITHOUT_CLASSIFICATION	1.190750387908413E-5	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9996708176595406	WITHOUT_CLASSIFICATION	3.291823404594763E-4	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999408603602762	WITHOUT_CLASSIFICATION	5.913963972394154E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999945365549543	WITHOUT_CLASSIFICATION	5.463445045691308E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999204066588074	WITHOUT_CLASSIFICATION	7.959334119264943E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999942577428222	WITHOUT_CLASSIFICATION	5.7422571777863405E-6	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997643820486432	WITHOUT_CLASSIFICATION	2.3561795135684866E-4	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999520032518814	WITHOUT_CLASSIFICATION	4.799674811854524E-5	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999611956560509	WITHOUT_CLASSIFICATION	3.8804343949064816E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9998442371213542	WITHOUT_CLASSIFICATION	1.5576287864572686E-4	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999291741398977	WITHOUT_CLASSIFICATION	7.082586010226254E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999782663725504	WITHOUT_CLASSIFICATION	2.173362744965444E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999987936104701	WITHOUT_CLASSIFICATION	1.2063895298943603E-6	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999984097886133	WITHOUT_CLASSIFICATION	1.5902113866411413E-6	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999174512470421	WITHOUT_CLASSIFICATION	8.254875295786706E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999904240614033	WITHOUT_CLASSIFICATION	9.575938596746244E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999659435793172	WITHOUT_CLASSIFICATION	3.40564206827769E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999310876702173	WITHOUT_CLASSIFICATION	6.891232978261373E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999095694915223	WITHOUT_CLASSIFICATION	9.04305084776987E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999629868923873	WITHOUT_CLASSIFICATION	3.701310761269124E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999782663725504	WITHOUT_CLASSIFICATION	2.173362744965444E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999717794725066	WITHOUT_CLASSIFICATION	2.822052749350363E-5	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999851242893413	WITHOUT_CLASSIFICATION	1.4875710658855592E-5	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999830228310459	WITHOUT_CLASSIFICATION	1.6977168954098918E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999778003971145	WITHOUT_CLASSIFICATION	2.2199602885483065E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.99984118854627	WITHOUT_CLASSIFICATION	1.5881145373004255E-4	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999802774881156	WITHOUT_CLASSIFICATION	1.9722511884492285E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9998910389899752	WITHOUT_CLASSIFICATION	1.0896101002469694E-4	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999704927630018	WITHOUT_CLASSIFICATION	2.9507236998257124E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9995687652903181	WITHOUT_CLASSIFICATION	4.3123470968181045E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999608510669322	WITHOUT_CLASSIFICATION	3.914893306780941E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997067379235877	WITHOUT_CLASSIFICATION	2.932620764123136E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9997067379235877	WITHOUT_CLASSIFICATION	2.932620764123136E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999698668247722	WITHOUT_CLASSIFICATION	3.013317522784613E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999318266163667	WITHOUT_CLASSIFICATION	6.817338363332064E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998419777876845	WITHOUT_CLASSIFICATION	1.5802221231556727E-4	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999294424666414	WITHOUT_CLASSIFICATION	7.055753335857192E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999767910208276	WITHOUT_CLASSIFICATION	2.3208979172361955E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999848209815694	WITHOUT_CLASSIFICATION	1.5179018430697564E-5	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999138429498342	WITHOUT_CLASSIFICATION	8.615705016575956E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999981346487036	WITHOUT_CLASSIFICATION	1.8653512964694897E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.999868240440868	WITHOUT_CLASSIFICATION	1.3175955913209898E-4	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999846849999633	WITHOUT_CLASSIFICATION	1.5315000036697995E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999846849999633	WITHOUT_CLASSIFICATION	1.5315000036697995E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999874537103277	WITHOUT_CLASSIFICATION	1.2546289672297716E-5	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999429418565107	WITHOUT_CLASSIFICATION	5.70581434893965E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999879671607754	WITHOUT_CLASSIFICATION	1.2032839224652314E-5	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999982641617113	WITHOUT_CLASSIFICATION	1.735838288674668E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9997127218361006	WITHOUT_CLASSIFICATION	2.872781638993952E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999581596384514	WITHOUT_CLASSIFICATION	4.184036154873572E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999095694915223	WITHOUT_CLASSIFICATION	9.04305084776987E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999764766093423	WITHOUT_CLASSIFICATION	2.3523390657676894E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999782663725504	WITHOUT_CLASSIFICATION	2.173362744965444E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999782663725504	WITHOUT_CLASSIFICATION	2.173362744965444E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980273281387	WITHOUT_CLASSIFICATION	1.972671861365506E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999980273281387	WITHOUT_CLASSIFICATION	1.972671861365506E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9998880594760793	WITHOUT_CLASSIFICATION	1.1194052392070654E-4	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999550309902955	WITHOUT_CLASSIFICATION	4.496900970459919E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999550309902955	WITHOUT_CLASSIFICATION	4.496900970459919E-5	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999476363764006	WITHOUT_CLASSIFICATION	5.236362359937675E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999579629986737	WITHOUT_CLASSIFICATION	4.203700132629273E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999432317358082	WITHOUT_CLASSIFICATION	5.676826419169025E-5	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999963044093218	WITHOUT_CLASSIFICATION	3.6955906782084405E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999952423023928	WITHOUT_CLASSIFICATION	4.757697607295272E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999990661326898	WITHOUT_CLASSIFICATION	9.338673102014877E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999990661326898	WITHOUT_CLASSIFICATION	9.338673102014877E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999256212728168	WITHOUT_CLASSIFICATION	7.437872718320178E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999834685268738	WITHOUT_CLASSIFICATION	1.6531473126236595E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999635464076535	WITHOUT_CLASSIFICATION	3.6453592346586655E-5	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999078848467846	WITHOUT_CLASSIFICATION	9.211515321546878E-5	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999422860455589	WITHOUT_CLASSIFICATION	5.7713954441080255E-5	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999158752648154	WITHOUT_CLASSIFICATION	8.412473518462413E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999534300704268	WITHOUT_CLASSIFICATION	4.656992957315256E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999941127337395	WITHOUT_CLASSIFICATION	5.88726626048268E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999941127337395	WITHOUT_CLASSIFICATION	5.88726626048268E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999090173917825	WITHOUT_CLASSIFICATION	9.098260821746046E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999090173917825	WITHOUT_CLASSIFICATION	9.098260821746046E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999695528340529	WITHOUT_CLASSIFICATION	3.0447165947182796E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999695528340529	WITHOUT_CLASSIFICATION	3.0447165947182796E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999916467716037	WITHOUT_CLASSIFICATION	8.35322839636232E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999916467716037	WITHOUT_CLASSIFICATION	8.35322839636232E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999990661326898	WITHOUT_CLASSIFICATION	9.338673102014877E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999534300704268	WITHOUT_CLASSIFICATION	4.656992957315256E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999941127337395	WITHOUT_CLASSIFICATION	5.88726626048268E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.999941127337395	WITHOUT_CLASSIFICATION	5.88726626048268E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999090173917825	WITHOUT_CLASSIFICATION	9.098260821746046E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999695528340529	WITHOUT_CLASSIFICATION	3.0447165947182796E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999695528340529	WITHOUT_CLASSIFICATION	3.0447165947182796E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999916467716037	WITHOUT_CLASSIFICATION	8.35322839636232E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999756732617361	WITHOUT_CLASSIFICATION	2.4326738263802373E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999650784498668	WITHOUT_CLASSIFICATION	3.492155013313895E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999817421462586	WITHOUT_CLASSIFICATION	1.8257853741474317E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999997461450051	WITHOUT_CLASSIFICATION	2.538549949014574E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999782386355727	WITHOUT_CLASSIFICATION	2.1761364427327136E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.999941693098108	WITHOUT_CLASSIFICATION	5.8306901892050145E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999722209389731	WITHOUT_CLASSIFICATION	2.7779061026892083E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999885098962937	WITHOUT_CLASSIFICATION	1.1490103706335491E-5	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999137097504665	WITHOUT_CLASSIFICATION	8.629024953355746E-5	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999969602481683	WITHOUT_CLASSIFICATION	3.0397518316689345E-6	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999981145738006	WITHOUT_CLASSIFICATION	1.8854261993546934E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999965900606663	WITHOUT_CLASSIFICATION	3.40993933361154E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999476972960353	WITHOUT_CLASSIFICATION	5.2302703964800476E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.999941693098108	WITHOUT_CLASSIFICATION	5.8306901892050145E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995330395604809	WITHOUT_CLASSIFICATION	4.669604395190996E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995330395604809	WITHOUT_CLASSIFICATION	4.669604395190996E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999943693823158	WITHOUT_CLASSIFICATION	5.630617684155952E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999987493994181	WITHOUT_CLASSIFICATION	1.2506005818835037E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999987493994181	WITHOUT_CLASSIFICATION	1.2506005818835037E-6	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999904933117799	WITHOUT_CLASSIFICATION	9.506688220032728E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999977872856546	WITHOUT_CLASSIFICATION	2.2127143455295547E-6	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999958405003577	WITHOUT_CLASSIFICATION	4.159499642240635E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999963836793591	WITHOUT_CLASSIFICATION	3.616320640962175E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999963836793591	WITHOUT_CLASSIFICATION	3.616320640962175E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999980001584151	WITHOUT_CLASSIFICATION	1.999841585010986E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999994023383147	WITHOUT_CLASSIFICATION	5.9766168530136784E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999994023383147	WITHOUT_CLASSIFICATION	5.9766168530136784E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999979535952168	WITHOUT_CLASSIFICATION	2.0464047832134054E-6	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999830976924307	WITHOUT_CLASSIFICATION	1.690230756934144E-5	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999832400244499	WITHOUT_CLASSIFICATION	1.675997555001706E-5	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997569574535081	WITHOUT_CLASSIFICATION	2.4304254649202566E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9997091254588953	WITHOUT_CLASSIFICATION	2.9087454110459385E-4	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9997925556452764	WITHOUT_CLASSIFICATION	2.0744435472353675E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999807082267156	WITHOUT_CLASSIFICATION	1.9291773284407828E-4	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9998605762386105	WITHOUT_CLASSIFICATION	1.3942376138964855E-4	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9994586054240711	WITHOUT_CLASSIFICATION	5.413945759288637E-4	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9998764484074536	WITHOUT_CLASSIFICATION	1.2355159254639662E-4	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9995450119987681	WITHOUT_CLASSIFICATION	4.5498800123197977E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997728469654575	WITHOUT_CLASSIFICATION	2.2715303454243622E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999848211797656	WITHOUT_CLASSIFICATION	1.5178820234381537E-5	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999678772876341	WITHOUT_CLASSIFICATION	3.212271236591749E-5	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999990233966083	WITHOUT_CLASSIFICATION	9.766033916527668E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997728469654575	WITHOUT_CLASSIFICATION	2.2715303454243622E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999999416429065	WITHOUT_CLASSIFICATION	5.835709349784491E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999969048556896	WITHOUT_CLASSIFICATION	3.095144310381514E-6	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9998259158358425	WITHOUT_CLASSIFICATION	1.740841641574674E-4	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9998623832373246	WITHOUT_CLASSIFICATION	1.376167626753574E-4	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9995956995387754	WITHOUT_CLASSIFICATION	4.0430046122454756E-4	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996325144807272	WITHOUT_CLASSIFICATION	3.674855192728415E-4	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995084112542587	WITHOUT_CLASSIFICATION	4.915887457413523E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999852582854211	WITHOUT_CLASSIFICATION	1.4741714578897315E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997399213060651	WITHOUT_CLASSIFICATION	2.6007869393486846E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999825681636662	WITHOUT_CLASSIFICATION	1.7431836333781017E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999799377991935	WITHOUT_CLASSIFICATION	2.0062200806478757E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999955644086017	WITHOUT_CLASSIFICATION	4.435591398294741E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996981039325378	WITHOUT_CLASSIFICATION	3.018960674621654E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.999807082267156	WITHOUT_CLASSIFICATION	1.9291773284407828E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997399213060651	WITHOUT_CLASSIFICATION	2.6007869393486846E-4	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999799377991935	WITHOUT_CLASSIFICATION	2.0062200806478757E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996981039325378	WITHOUT_CLASSIFICATION	3.018960674621654E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999986526730626	WITHOUT_CLASSIFICATION	1.3473269373102425E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9997388736092077	WITHOUT_CLASSIFICATION	2.611263907924017E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999987952189816	WITHOUT_CLASSIFICATION	1.204781018376145E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998202865686079	WITHOUT_CLASSIFICATION	1.797134313920721E-4	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9998947749096387	WITHOUT_CLASSIFICATION	1.0522509036127307E-4	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9998833304841716	WITHOUT_CLASSIFICATION	1.1666951582844877E-4	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999168714463388	WITHOUT_CLASSIFICATION	8.312855366112143E-5	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999923786834756	WITHOUT_CLASSIFICATION	7.621316524492089E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9998596035456091	WITHOUT_CLASSIFICATION	1.4039645439084953E-4	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999847679366268	WITHOUT_CLASSIFICATION	1.5232063373121198E-5	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999990947663864	WITHOUT_CLASSIFICATION	9.05233613591968E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999990602544832	WITHOUT_CLASSIFICATION	9.397455169220966E-7	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999979780441081	WITHOUT_CLASSIFICATION	2.021955891950688E-6	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999990969167862	WITHOUT_CLASSIFICATION	9.03083213806791E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9998102634663566	WITHOUT_CLASSIFICATION	1.897365336434424E-4	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998459794348062	WITHOUT_CLASSIFICATION	1.540205651937397E-4	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999707762800266	WITHOUT_CLASSIFICATION	2.9223719973408934E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999940038719243	WITHOUT_CLASSIFICATION	5.996128075789613E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9997728377584658	WITHOUT_CLASSIFICATION	2.2716224153425724E-4	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997399213060651	WITHOUT_CLASSIFICATION	2.6007869393486846E-4	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999976795619331	WITHOUT_CLASSIFICATION	2.320438066934932E-6	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.99998681520397	WITHOUT_CLASSIFICATION	1.3184796029976063E-5	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999870885120419	WITHOUT_CLASSIFICATION	1.2911487958207076E-5	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999510281864606	WITHOUT_CLASSIFICATION	4.897181353929679E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999944882973575	WITHOUT_CLASSIFICATION	5.511702642592161E-6	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999617732593389	WITHOUT_CLASSIFICATION	3.822674066114518E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999961610865673	WITHOUT_CLASSIFICATION	3.838913432671264E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999970686840342	WITHOUT_CLASSIFICATION	2.9313159658155E-6	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9998743168777583	WITHOUT_CLASSIFICATION	1.256831222416742E-4	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9997300113777167	WITHOUT_CLASSIFICATION	2.699886222833925E-4	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999085309610195	WITHOUT_CLASSIFICATION	9.146903898053656E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997409980878659	WITHOUT_CLASSIFICATION	2.59001912134057E-4	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999981741192796	WITHOUT_CLASSIFICATION	1.8258807204361558E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999990726773044	WITHOUT_CLASSIFICATION	9.273226957490801E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999893654156993	WITHOUT_CLASSIFICATION	1.06345843006924E-5	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999948462564195	WITHOUT_CLASSIFICATION	5.1537435803605036E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999496085437277	WITHOUT_CLASSIFICATION	5.039145627232571E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999663461672793	WITHOUT_CLASSIFICATION	3.3653832720617915E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999622649376483	WITHOUT_CLASSIFICATION	3.773506235172961E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999990141885778	WITHOUT_CLASSIFICATION	9.858114221995221E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999966484285782	WITHOUT_CLASSIFICATION	3.3515714217718797E-6	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999887088150133	WITHOUT_CLASSIFICATION	1.1291184986661608E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999996472436326	WITHOUT_CLASSIFICATION	3.527563674021647E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999302989628209	WITHOUT_CLASSIFICATION	6.970103717902719E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998829070820112	WITHOUT_CLASSIFICATION	1.1709291798871919E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998829070820112	WITHOUT_CLASSIFICATION	1.1709291798871919E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999671732031246	WITHOUT_CLASSIFICATION	3.2826796875395095E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999992383556601	WITHOUT_CLASSIFICATION	7.616443399035695E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999891209342955	WITHOUT_CLASSIFICATION	1.0879065704432213E-5	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999970053180906	WITHOUT_CLASSIFICATION	2.9946819093917893E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999291832674508	WITHOUT_CLASSIFICATION	7.081673254921753E-5	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999299563359378	WITHOUT_CLASSIFICATION	7.00436640621748E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999867481787807	WITHOUT_CLASSIFICATION	1.3251821219303144E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999987944913558	WITHOUT_CLASSIFICATION	1.2055086442354734E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998736045078934	WITHOUT_CLASSIFICATION	1.263954921066695E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996789153191298	WITHOUT_CLASSIFICATION	3.2108468087021195E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999064184866313	WITHOUT_CLASSIFICATION	9.358151336864523E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999941429818532	WITHOUT_CLASSIFICATION	5.857018146770865E-6	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999952169941333	WITHOUT_CLASSIFICATION	4.783005866686888E-6	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999994800058508	WITHOUT_CLASSIFICATION	5.1999414919838896E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856893806215	WITHOUT_CLASSIFICATION	1.431061937855518E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979791892805	WITHOUT_CLASSIFICATION	2.020810719578413E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999497656075507	WITHOUT_CLASSIFICATION	5.0234392449379906E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999925033153069	WITHOUT_CLASSIFICATION	7.496684693060472E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999973140483547	WITHOUT_CLASSIFICATION	2.685951645402572E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999892013420306	WITHOUT_CLASSIFICATION	1.0798657969376155E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999194651993113	WITHOUT_CLASSIFICATION	8.053480068870525E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999194651993113	WITHOUT_CLASSIFICATION	8.053480068870525E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9996017007169836	WITHOUT_CLASSIFICATION	3.9829928301643664E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9996017007169836	WITHOUT_CLASSIFICATION	3.9829928301643664E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.999996472436326	WITHOUT_CLASSIFICATION	3.527563674021647E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997910186341797	WITHOUT_CLASSIFICATION	2.0898136582013426E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999900662511392	WITHOUT_CLASSIFICATION	9.933748860881129E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999950291750936	WITHOUT_CLASSIFICATION	4.97082490631177E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999900662511392	WITHOUT_CLASSIFICATION	9.933748860881129E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999950291750936	WITHOUT_CLASSIFICATION	4.97082490631177E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999753491309024	WITHOUT_CLASSIFICATION	2.4650869097677336E-5	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.999980953844475	WITHOUT_CLASSIFICATION	1.9046155525004188E-5	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999973054672818	WITHOUT_CLASSIFICATION	2.6945327182352834E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999913907954788	WITHOUT_CLASSIFICATION	8.60920452106856E-6	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.99998630126503	WITHOUT_CLASSIFICATION	1.369873497013884E-5	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999863711944658	WITHOUT_CLASSIFICATION	1.3628805534269219E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999814731646741	WITHOUT_CLASSIFICATION	1.852683532586238E-5	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999269279647027	WITHOUT_CLASSIFICATION	7.307203529727436E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996282304006211	WITHOUT_CLASSIFICATION	3.7176959937901087E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999980170905038	WITHOUT_CLASSIFICATION	1.982909496096252E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999951130619239	WITHOUT_CLASSIFICATION	4.886938076149013E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999955670700136	WITHOUT_CLASSIFICATION	4.432929986414843E-6	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999699223009862	WITHOUT_CLASSIFICATION	3.007769901368525E-5	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999340329109213	WITHOUT_CLASSIFICATION	6.596708907874816E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999436897423444	WITHOUT_CLASSIFICATION	5.631025765557334E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999345674244882	WITHOUT_CLASSIFICATION	6.54325755118205E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999345674244882	WITHOUT_CLASSIFICATION	6.54325755118205E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999906035994847	WITHOUT_CLASSIFICATION	9.396400515400992E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999753491309024	WITHOUT_CLASSIFICATION	2.4650869097677336E-5	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999325723663981	WITHOUT_CLASSIFICATION	6.742763360195971E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999955129246101	WITHOUT_CLASSIFICATION	4.487075389942988E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999984853351129	WITHOUT_CLASSIFICATION	1.51466488710651E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999447625399939	WITHOUT_CLASSIFICATION	5.523746000615242E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999852957825179	WITHOUT_CLASSIFICATION	1.470421748208995E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999753491309024	WITHOUT_CLASSIFICATION	2.4650869097677336E-5	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999447625399939	WITHOUT_CLASSIFICATION	5.523746000615242E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999852957825179	WITHOUT_CLASSIFICATION	1.470421748208995E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9993437166821991	WITHOUT_CLASSIFICATION	6.562833178008834E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998689727494838	WITHOUT_CLASSIFICATION	1.310272505162368E-4	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999863629642002	WITHOUT_CLASSIFICATION	1.3637035799797553E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999753491309024	WITHOUT_CLASSIFICATION	2.4650869097677336E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999753491309024	WITHOUT_CLASSIFICATION	2.4650869097677336E-5	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.999945233845236	WITHOUT_CLASSIFICATION	5.4766154763946515E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999765887508743	WITHOUT_CLASSIFICATION	2.341124912564432E-5	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999178063982878	WITHOUT_CLASSIFICATION	8.219360171226449E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999702927352991	WITHOUT_CLASSIFICATION	2.9707264700918725E-5	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.99995148955861	WITHOUT_CLASSIFICATION	4.8510441389945354E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999985543109842	WITHOUT_CLASSIFICATION	1.4456890157993762E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999767740507786	WITHOUT_CLASSIFICATION	2.3225949221396152E-5	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999886803837718	WITHOUT_CLASSIFICATION	1.1319616228237191E-5	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999920225012109	WITHOUT_CLASSIFICATION	7.977498789131702E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9998229202527334	WITHOUT_CLASSIFICATION	1.770797472665353E-4	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999996193687096	WITHOUT_CLASSIFICATION	3.806312904083072E-6	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999959764322928	WITHOUT_CLASSIFICATION	4.023567707187028E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999448089603885	WITHOUT_CLASSIFICATION	5.519103961153114E-5	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999982439078018	WITHOUT_CLASSIFICATION	1.75609219811859E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776184260278	WITHOUT_CLASSIFICATION	2.2381573972150954E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999992836703699	WITHOUT_CLASSIFICATION	7.163296300413995E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998649187178849	WITHOUT_CLASSIFICATION	1.3508128211508268E-4	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999530353145273	WITHOUT_CLASSIFICATION	4.69646854726457E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998504672322396	WITHOUT_CLASSIFICATION	1.4953276776047227E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999939166022849	WITHOUT_CLASSIFICATION	6.0833977152165935E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999105824216197	WITHOUT_CLASSIFICATION	8.941757838031264E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998716081445486	WITHOUT_CLASSIFICATION	1.2839185545151531E-4	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9998716081445486	WITHOUT_CLASSIFICATION	1.2839185545151531E-4	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998649187178849	WITHOUT_CLASSIFICATION	1.3508128211508268E-4	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999963780169549	WITHOUT_CLASSIFICATION	3.621983045096431E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999995068615942	WITHOUT_CLASSIFICATION	4.9313840577538E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999927173327696	WITHOUT_CLASSIFICATION	7.282667230508377E-6	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998869930958804	WITHOUT_CLASSIFICATION	1.1300690411962241E-4	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999136007440232	WITHOUT_CLASSIFICATION	8.639925597672801E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999998298582048	WITHOUT_CLASSIFICATION	1.7014179519186173E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999952571779464	WITHOUT_CLASSIFICATION	4.7428220536584275E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999959445855101	WITHOUT_CLASSIFICATION	4.055414489898615E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994461702452	WITHOUT_CLASSIFICATION	5.538297548907866E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999962464125991	WITHOUT_CLASSIFICATION	3.7535874007929355E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999926899527445	WITHOUT_CLASSIFICATION	7.310047255477455E-6	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999734216076043	WITHOUT_CLASSIFICATION	2.657839239578853E-5	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9996722425700801	WITHOUT_CLASSIFICATION	3.277574299199126E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999993001013866	WITHOUT_CLASSIFICATION	6.998986134273133E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866086372479	WITHOUT_CLASSIFICATION	1.3391362752081524E-5	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999933180430342	WITHOUT_CLASSIFICATION	6.681956965863016E-6	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999966221633005	WITHOUT_CLASSIFICATION	3.3778366994222217E-6	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998552556025353	WITHOUT_CLASSIFICATION	1.4474439746466338E-4	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999555235489173	WITHOUT_CLASSIFICATION	4.447645108272198E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999960743862152	WITHOUT_CLASSIFICATION	3.9256137848684605E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999925807764449	WITHOUT_CLASSIFICATION	7.419223555154233E-6	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999999540609101	WITHOUT_CLASSIFICATION	4.59390899017255E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942229305082	WITHOUT_CLASSIFICATION	5.777069491848439E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999866774880548	WITHOUT_CLASSIFICATION	1.3322511945103032E-5	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999978913917102	WITHOUT_CLASSIFICATION	2.1086082897925498E-5	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987367400186	WITHOUT_CLASSIFICATION	1.2632599814112098E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653036975297	WITHOUT_CLASSIFICATION	3.4696302470318E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563657104957	WITHOUT_CLASSIFICATION	4.3634289504251554E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584989349705	WITHOUT_CLASSIFICATION	4.150106502945393E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999622092540894	WITHOUT_CLASSIFICATION	3.779074591047236E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999943931869374	WITHOUT_CLASSIFICATION	5.606813062666177E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999981179592258	WITHOUT_CLASSIFICATION	1.8820407742219364E-6	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775224446488	WITHOUT_CLASSIFICATION	2.2477555351251394E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899431605467	WITHOUT_CLASSIFICATION	1.0056839453219847E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997831834106	WITHOUT_CLASSIFICATION	2.1681658939312014E-6	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947614637259	WITHOUT_CLASSIFICATION	5.238536274068855E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999758171232567	WITHOUT_CLASSIFICATION	2.418287674338485E-5	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868120367545	WITHOUT_CLASSIFICATION	1.3187963245484151E-5	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999966727391364	WITHOUT_CLASSIFICATION	3.3272608636024246E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999955771111085	WITHOUT_CLASSIFICATION	4.422888891494296E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999968187845887	WITHOUT_CLASSIFICATION	3.1812154114248178E-6	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911346594244	WITHOUT_CLASSIFICATION	8.865340575696457E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999979389573206	WITHOUT_CLASSIFICATION	2.0610426793767825E-6	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999941206367564	WITHOUT_CLASSIFICATION	5.879363243596878E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999977440115417	WITHOUT_CLASSIFICATION	2.255988458226452E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997084777014948	WITHOUT_CLASSIFICATION	2.915222985052621E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9998826325297628	WITHOUT_CLASSIFICATION	1.173674702371083E-4	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999812095805563	WITHOUT_CLASSIFICATION	1.8790419443762334E-5	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999453442035687	WITHOUT_CLASSIFICATION	5.465579643120005E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9997852552568749	WITHOUT_CLASSIFICATION	2.1474474312512958E-4	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9997927486030389	WITHOUT_CLASSIFICATION	2.0725139696108923E-4	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9996932056554326	WITHOUT_CLASSIFICATION	3.067943445674271E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9995451607661879	WITHOUT_CLASSIFICATION	4.5483923381201073E-4	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9997952105913084	WITHOUT_CLASSIFICATION	2.0478940869150542E-4	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999981702458732	WITHOUT_CLASSIFICATION	1.8297541267991886E-6	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999969011459557	WITHOUT_CLASSIFICATION	3.0988540442794E-6	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999896672306354	WITHOUT_CLASSIFICATION	1.0332769364581614E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999041665251104	WITHOUT_CLASSIFICATION	9.583347488961582E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999924620259576	WITHOUT_CLASSIFICATION	7.537974042422382E-6	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785052739064	WITHOUT_CLASSIFICATION	2.1494726093566414E-5	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999449371479768	WITHOUT_CLASSIFICATION	5.5062852023221245E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670943765047	WITHOUT_CLASSIFICATION	3.290562349540262E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809409860434	WITHOUT_CLASSIFICATION	1.9059013956514958E-5	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999213386673564	WITHOUT_CLASSIFICATION	7.866133264356719E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999998729982813	WITHOUT_CLASSIFICATION	1.2700171869081616E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999973113264596	WITHOUT_CLASSIFICATION	2.6886735403172244E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999970635747331	WITHOUT_CLASSIFICATION	2.9364252669589225E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876683685512	WITHOUT_CLASSIFICATION	1.23316314488318E-5	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999990731689733	WITHOUT_CLASSIFICATION	9.268310268158093E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999930036636685	WITHOUT_CLASSIFICATION	6.996336331435988E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999904371120303	WITHOUT_CLASSIFICATION	9.562887969715452E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999990927672695	WITHOUT_CLASSIFICATION	9.072327304752762E-7	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999990580416489	WITHOUT_CLASSIFICATION	9.419583510337559E-7	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999989763747958	WITHOUT_CLASSIFICATION	1.023625204098452E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999951315744723	WITHOUT_CLASSIFICATION	4.868425527763394E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999735270482358	WITHOUT_CLASSIFICATION	2.647295176423243E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997084777014948	WITHOUT_CLASSIFICATION	2.915222985052621E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999444863896666	WITHOUT_CLASSIFICATION	5.551361033328093E-5	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999902033712865	WITHOUT_CLASSIFICATION	9.796628713478063E-6	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999989833220218	WITHOUT_CLASSIFICATION	1.0166779781968569E-5	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999989438489531	WITHOUT_CLASSIFICATION	1.056151046887327E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999943565311655	WITHOUT_CLASSIFICATION	5.64346883455821E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999851658491171	WITHOUT_CLASSIFICATION	1.4834150882767017E-5	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9996856756844176	WITHOUT_CLASSIFICATION	3.1432431558239E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999783927766671	WITHOUT_CLASSIFICATION	2.160722333284617E-5	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999371577700024	WITHOUT_CLASSIFICATION	6.284222999766809E-5	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999958252491861	WITHOUT_CLASSIFICATION	4.174750813897561E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999965293199455	WITHOUT_CLASSIFICATION	3.4706800544754836E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999968248379728	WITHOUT_CLASSIFICATION	3.175162027180172E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999969176173259	WITHOUT_CLASSIFICATION	3.082382674040266E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999980360186803	WITHOUT_CLASSIFICATION	1.9639813197121364E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999998611416684	WITHOUT_CLASSIFICATION	1.3885833159617628E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999731597140702	WITHOUT_CLASSIFICATION	2.684028592988746E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999464730006643	WITHOUT_CLASSIFICATION	5.3526999335670194E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999955975763234	WITHOUT_CLASSIFICATION	4.402423676532215E-6	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999864070023724	WITHOUT_CLASSIFICATION	1.3592997627643245E-5	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.999964408552224	WITHOUT_CLASSIFICATION	3.559144777604322E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999913293842315	WITHOUT_CLASSIFICATION	8.670615768502474E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999926067670728	WITHOUT_CLASSIFICATION	7.393232927142125E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999839806611681	WITHOUT_CLASSIFICATION	1.6019338831925144E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999948105283929	WITHOUT_CLASSIFICATION	5.18947160710643E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999959578319556	WITHOUT_CLASSIFICATION	4.042168044322525E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999803121950946	WITHOUT_CLASSIFICATION	1.9687804905367133E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9941495762592308	WITHOUT_CLASSIFICATION	0.005850423740769206	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999582713611558	WITHOUT_CLASSIFICATION	4.172863884422584E-5	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999437224979674	WITHOUT_CLASSIFICATION	5.6277502032718616E-5	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999962441752124	WITHOUT_CLASSIFICATION	3.7558247875241973E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997084777014948	WITHOUT_CLASSIFICATION	2.915222985052621E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999973885854433	WITHOUT_CLASSIFICATION	2.6114145567675084E-6	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999996342219243	WITHOUT_CLASSIFICATION	3.6577807570235516E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999939849430464	WITHOUT_CLASSIFICATION	6.015056953665613E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997084777014948	WITHOUT_CLASSIFICATION	2.915222985052621E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999594140330386	WITHOUT_CLASSIFICATION	4.0585966961406804E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999913293842315	WITHOUT_CLASSIFICATION	8.670615768502474E-6	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999989071539039	WITHOUT_CLASSIFICATION	1.0928460960914873E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999066789411051	WITHOUT_CLASSIFICATION	9.33210588949288E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999987551632564	WITHOUT_CLASSIFICATION	1.2448367435451181E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999958252491861	WITHOUT_CLASSIFICATION	4.174750813897561E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999965293199455	WITHOUT_CLASSIFICATION	3.4706800544754836E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999968248379728	WITHOUT_CLASSIFICATION	3.175162027180172E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999973898946578	WITHOUT_CLASSIFICATION	2.610105342285786E-6	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999501404040076	WITHOUT_CLASSIFICATION	4.985959599235446E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999907294708444	WITHOUT_CLASSIFICATION	9.270529155427249E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999641127441405	WITHOUT_CLASSIFICATION	3.58872558594339E-5	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999938961567578	WITHOUT_CLASSIFICATION	6.103843242196488E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997084777014948	WITHOUT_CLASSIFICATION	2.915222985052621E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999969176173259	WITHOUT_CLASSIFICATION	3.082382674040266E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999980360186803	WITHOUT_CLASSIFICATION	1.9639813197121364E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896154816231	WITHOUT_CLASSIFICATION	1.0384518376854614E-5	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923800474974	WITHOUT_CLASSIFICATION	7.619952502609731E-6	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999834113009115	WITHOUT_CLASSIFICATION	1.6588699088477538E-5	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999880777866983	WITHOUT_CLASSIFICATION	1.1922213301611312E-5	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999928907651753	WITHOUT_CLASSIFICATION	7.10923482480358E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999968767220462	WITHOUT_CLASSIFICATION	3.1232779538801166E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999955771111085	WITHOUT_CLASSIFICATION	4.422888891494296E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999903813062365	WITHOUT_CLASSIFICATION	9.618693763381455E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999854461267784	WITHOUT_CLASSIFICATION	1.4553873221559534E-5	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999693906909598	WITHOUT_CLASSIFICATION	3.060930904023471E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999992624484736	WITHOUT_CLASSIFICATION	7.375515264154695E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999343974416378	WITHOUT_CLASSIFICATION	6.560255836212257E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653036975297	WITHOUT_CLASSIFICATION	3.4696302470318E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999563657104957	WITHOUT_CLASSIFICATION	4.3634289504251554E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899431605467	WITHOUT_CLASSIFICATION	1.0056839453219847E-5	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999343974416378	WITHOUT_CLASSIFICATION	6.560255836212257E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999950527228004	WITHOUT_CLASSIFICATION	4.947277199638112E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999983244486389	WITHOUT_CLASSIFICATION	1.675551361042621E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726104491155	WITHOUT_CLASSIFICATION	2.7389550884582202E-5	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805210573685	WITHOUT_CLASSIFICATION	1.9478942631630367E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999999725956107	WITHOUT_CLASSIFICATION	2.74043892949481E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9989726038978175	WITHOUT_CLASSIFICATION	0.00102739610218259	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997831834106	WITHOUT_CLASSIFICATION	2.1681658939312014E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868120367545	WITHOUT_CLASSIFICATION	1.3187963245484151E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999990927672695	WITHOUT_CLASSIFICATION	9.072327304752762E-7	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999323414433923	WITHOUT_CLASSIFICATION	6.765855660778777E-5	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999920952805318	WITHOUT_CLASSIFICATION	7.904719468174298E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999919384282889	WITHOUT_CLASSIFICATION	8.061571710979639E-6	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999709703812935	WITHOUT_CLASSIFICATION	2.9029618706549894E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999958671171257	WITHOUT_CLASSIFICATION	4.132882874214608E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999933647668086	WITHOUT_CLASSIFICATION	6.635233191446669E-6	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999206508955787	WITHOUT_CLASSIFICATION	7.934910442132006E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999994461702452	WITHOUT_CLASSIFICATION	5.538297548907866E-7	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999845428943155	WITHOUT_CLASSIFICATION	1.545710568450518E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999983503526185	WITHOUT_CLASSIFICATION	1.649647381467371E-6	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999967361080556	WITHOUT_CLASSIFICATION	3.2638919444504955E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999998689660719	WITHOUT_CLASSIFICATION	1.310339280888379E-6	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999978168272305	WITHOUT_CLASSIFICATION	2.183172769493939E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999606660245277	WITHOUT_CLASSIFICATION	3.933397547229487E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880753751984	WITHOUT_CLASSIFICATION	1.1924624801659403E-5	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903150921381	WITHOUT_CLASSIFICATION	9.684907861870288E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984436965741	WITHOUT_CLASSIFICATION	1.556303425889486E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999916865572723	WITHOUT_CLASSIFICATION	8.313442727633264E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998061363405791	WITHOUT_CLASSIFICATION	1.9386365942093613E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999961887019556	WITHOUT_CLASSIFICATION	3.8112980443743428E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974191618635	WITHOUT_CLASSIFICATION	2.580838136614821E-6	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999934549499455	WITHOUT_CLASSIFICATION	6.545050054465545E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985882403347	WITHOUT_CLASSIFICATION	1.4117596652804353E-6	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999943467694178	WITHOUT_CLASSIFICATION	5.653230582178064E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999987997280068	WITHOUT_CLASSIFICATION	1.2002719933120335E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969624699473	WITHOUT_CLASSIFICATION	3.0375300527251092E-6	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999640786182212	WITHOUT_CLASSIFICATION	3.5921381778799686E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993625542494	WITHOUT_CLASSIFICATION	6.374457506041777E-7	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949022079104	WITHOUT_CLASSIFICATION	5.0977920895383785E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999905872988063	WITHOUT_CLASSIFICATION	9.41270119366009E-6	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999994760409822	WITHOUT_CLASSIFICATION	5.239590178170186E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999963455249266	WITHOUT_CLASSIFICATION	3.654475073524524E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999927984819382	WITHOUT_CLASSIFICATION	7.201518061677295E-6	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999190008627259	WITHOUT_CLASSIFICATION	8.099913727410029E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.999924357624579	WITHOUT_CLASSIFICATION	7.564237542104282E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999976344799588	WITHOUT_CLASSIFICATION	2.365520041171731E-6	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999959115251502	WITHOUT_CLASSIFICATION	4.0884748498537775E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999813938687042	WITHOUT_CLASSIFICATION	1.860613129578431E-5	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999928042996482	WITHOUT_CLASSIFICATION	7.195700351815419E-6	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999964976338991	WITHOUT_CLASSIFICATION	3.5023661008682172E-6	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999949866938731	WITHOUT_CLASSIFICATION	5.013306126872939E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999899147193888	WITHOUT_CLASSIFICATION	1.008528061116532E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999986515248963	WITHOUT_CLASSIFICATION	1.348475103695799E-5	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999893199646692	WITHOUT_CLASSIFICATION	1.0680035330892942E-5	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999977546143364	WITHOUT_CLASSIFICATION	2.2453856635634593E-6	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999928254619496	WITHOUT_CLASSIFICATION	7.174538050444473E-6	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999896095872353	WITHOUT_CLASSIFICATION	1.0390412764721945E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999970751828486	WITHOUT_CLASSIFICATION	2.9248171514554627E-6	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999990226376203	WITHOUT_CLASSIFICATION	9.773623797639127E-7	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999729308724513	WITHOUT_CLASSIFICATION	2.7069127548669866E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999960434298916	WITHOUT_CLASSIFICATION	3.956570108448474E-6	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999918641501949	WITHOUT_CLASSIFICATION	8.135849805129057E-6	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999862717808861	WITHOUT_CLASSIFICATION	1.3728219113915197E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999865297194747	WITHOUT_CLASSIFICATION	1.3470280525464057E-5	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999891886372428	WITHOUT_CLASSIFICATION	1.0811362757227748E-5	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999940345523435	WITHOUT_CLASSIFICATION	5.965447656494122E-6	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999538777266347	WITHOUT_CLASSIFICATION	4.612227336524812E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999992445975676	WITHOUT_CLASSIFICATION	7.554024323736538E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999962853188472	WITHOUT_CLASSIFICATION	3.714681152739199E-6	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999972749802771	WITHOUT_CLASSIFICATION	2.725019722823756E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999769358337369	WITHOUT_CLASSIFICATION	2.3064166263046992E-5	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999960934248283	WITHOUT_CLASSIFICATION	3.906575171726142E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999889682625113	WITHOUT_CLASSIFICATION	1.1031737488704205E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999945189500229	WITHOUT_CLASSIFICATION	5.481049977121177E-6	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999948428863895	WITHOUT_CLASSIFICATION	5.1571136104742454E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999990306552267	WITHOUT_CLASSIFICATION	9.693447733077462E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999332230020366	WITHOUT_CLASSIFICATION	6.67769979634427E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999583374401073	WITHOUT_CLASSIFICATION	4.166255989261632E-5	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999397973593409	WITHOUT_CLASSIFICATION	6.020264065914652E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999283755818693	WITHOUT_CLASSIFICATION	7.162441813066202E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999708940357592	WITHOUT_CLASSIFICATION	2.9105964240736007E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9996642341147605	WITHOUT_CLASSIFICATION	3.357658852395909E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999967834280134	WITHOUT_CLASSIFICATION	3.2165719865967286E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9999550855222455	WITHOUT_CLASSIFICATION	4.4914477754494796E-5	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999916816824134	WITHOUT_CLASSIFICATION	8.318317586682901E-6	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999566126167907	WITHOUT_CLASSIFICATION	4.3387383209286125E-5	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9996549097040581	WITHOUT_CLASSIFICATION	3.450902959418877E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997064967649043	WITHOUT_CLASSIFICATION	2.9350323509575463E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999959970638361	WITHOUT_CLASSIFICATION	4.002936163839346E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999805343492185	WITHOUT_CLASSIFICATION	1.946565078142435E-5	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999059931630923	WITHOUT_CLASSIFICATION	9.400683690772508E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999983038712364	WITHOUT_CLASSIFICATION	1.6961287635106988E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999971485838334	WITHOUT_CLASSIFICATION	2.8514161666942967E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9998511085473942	WITHOUT_CLASSIFICATION	1.4889145260582284E-4	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999976665712088	WITHOUT_CLASSIFICATION	2.3334287912029617E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999942081225673	WITHOUT_CLASSIFICATION	5.7918774326400594E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999877155723272	WITHOUT_CLASSIFICATION	1.228442767279464E-5	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999416326533458	WITHOUT_CLASSIFICATION	5.836734665411312E-5	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997115400246572	WITHOUT_CLASSIFICATION	2.884599753427317E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999624022934157	WITHOUT_CLASSIFICATION	3.759770658419662E-5	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9992990795005907	WITHOUT_CLASSIFICATION	7.009204994093415E-4	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999934473702978	WITHOUT_CLASSIFICATION	6.552629702190013E-5	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999801800742021	WITHOUT_CLASSIFICATION	1.9819925797903758E-4	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999133438583886	WITHOUT_CLASSIFICATION	8.665614161147102E-5	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999555032810448	WITHOUT_CLASSIFICATION	4.4496718955195354E-5	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998988273393623	WITHOUT_CLASSIFICATION	1.0117266063760543E-4	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999765262325268	WITHOUT_CLASSIFICATION	2.3473767473281552E-5	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999993913054305	WITHOUT_CLASSIFICATION	6.086945694389894E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999964743308286	WITHOUT_CLASSIFICATION	3.525669171408634E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999267312599689	WITHOUT_CLASSIFICATION	7.326874003116812E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999472103895244	WITHOUT_CLASSIFICATION	5.2789610475688276E-5	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.999964743308286	WITHOUT_CLASSIFICATION	3.525669171408634E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999638750920966	WITHOUT_CLASSIFICATION	3.612490790334026E-5	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999699390759655	WITHOUT_CLASSIFICATION	3.006092403448203E-5	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999940332050102	WITHOUT_CLASSIFICATION	5.96679498978253E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999844174161929	WITHOUT_CLASSIFICATION	1.5582583807081214E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999881138609331	WITHOUT_CLASSIFICATION	1.1886139066831695E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999945351269117	WITHOUT_CLASSIFICATION	5.464873088286243E-6	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9990933029176414	WITHOUT_CLASSIFICATION	9.06697082358632E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999978606061216	WITHOUT_CLASSIFICATION	2.139393878392532E-6	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999958841444492	WITHOUT_CLASSIFICATION	4.1158555509180174E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998493391988617	WITHOUT_CLASSIFICATION	1.5066080113824366E-4	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999955504193851	WITHOUT_CLASSIFICATION	4.449580614934444E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999921238313494	WITHOUT_CLASSIFICATION	7.876168650661225E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999818197005919	WITHOUT_CLASSIFICATION	1.8180299408135836E-5	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999927878215013	WITHOUT_CLASSIFICATION	7.2121784988417296E-6	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999856685261712	WITHOUT_CLASSIFICATION	1.4331473828837725E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999925601637916	WITHOUT_CLASSIFICATION	7.439836208337782E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999405432051558	WITHOUT_CLASSIFICATION	5.9456794844187764E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999405432051558	WITHOUT_CLASSIFICATION	5.9456794844187764E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999857894760162	WITHOUT_CLASSIFICATION	1.4210523983815899E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998272317006092	WITHOUT_CLASSIFICATION	1.7276829939078146E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9996301558515718	WITHOUT_CLASSIFICATION	3.698441484282757E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998887545563931	WITHOUT_CLASSIFICATION	1.1124544360679778E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999978463436122	WITHOUT_CLASSIFICATION	2.153656387819486E-6	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9997567265389898	WITHOUT_CLASSIFICATION	2.4327346101017406E-4	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999077074019553	WITHOUT_CLASSIFICATION	9.229259804468377E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999972771713127	WITHOUT_CLASSIFICATION	2.7228286873749997E-6	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.999981751946789	WITHOUT_CLASSIFICATION	1.8248053211011517E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999864195810614	WITHOUT_CLASSIFICATION	1.3580418938643842E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999998705369699	WITHOUT_CLASSIFICATION	1.2946303016347678E-7	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999994072062126	WITHOUT_CLASSIFICATION	5.927937873352698E-7	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999790503720261	WITHOUT_CLASSIFICATION	2.0949627973931094E-5	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999694500451621	WITHOUT_CLASSIFICATION	3.054995483790947E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999664208920896	WITHOUT_CLASSIFICATION	3.3579107910432094E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999606660245277	WITHOUT_CLASSIFICATION	3.933397547229487E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.99996870308396	WITHOUT_CLASSIFICATION	3.129691604003155E-5	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999618943112305	WITHOUT_CLASSIFICATION	3.810568876942825E-5	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997507254180541	WITHOUT_CLASSIFICATION	2.4927458194593167E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.999915466617354	WITHOUT_CLASSIFICATION	8.453338264612488E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998999298707082	WITHOUT_CLASSIFICATION	1.0007012929175681E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9998096118773504	WITHOUT_CLASSIFICATION	1.903881226495641E-4	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999957930458508	WITHOUT_CLASSIFICATION	4.2069541491988996E-6	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999904135829037	WITHOUT_CLASSIFICATION	9.586417096263472E-6	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999996050002545	WITHOUT_CLASSIFICATION	3.949997455012379E-6	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999995808044662	WITHOUT_CLASSIFICATION	4.191955337931757E-6	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999940566709434	WITHOUT_CLASSIFICATION	5.943329056588198E-6	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.999998841127984	WITHOUT_CLASSIFICATION	1.1588720159742908E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999988143592256	WITHOUT_CLASSIFICATION	1.1856407744577241E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.999797545964115	WITHOUT_CLASSIFICATION	2.024540358849791E-4	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999642332716027	WITHOUT_CLASSIFICATION	3.576672839738758E-5	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999520408183263	WITHOUT_CLASSIFICATION	4.795918167374237E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9995189644291532	WITHOUT_CLASSIFICATION	4.8103557084677853E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996887630601147	WITHOUT_CLASSIFICATION	3.1123693988523984E-4	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9996512784547718	WITHOUT_CLASSIFICATION	3.4872154522829234E-4	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999961139204679	WITHOUT_CLASSIFICATION	3.8860795320921036E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999090023680957	WITHOUT_CLASSIFICATION	9.09976319043966E-5	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9995805324635723	WITHOUT_CLASSIFICATION	4.1946753642770437E-4	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999941245099099	WITHOUT_CLASSIFICATION	5.875490090232421E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999196723165458	WITHOUT_CLASSIFICATION	8.03276834542053E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996719375947586	WITHOUT_CLASSIFICATION	3.2806240524137887E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999903959489077	WITHOUT_CLASSIFICATION	9.604051092311717E-6	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999958992294036	WITHOUT_CLASSIFICATION	4.100770596456332E-6	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999872560604455	WITHOUT_CLASSIFICATION	1.274393955456071E-5	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999824131701602	WITHOUT_CLASSIFICATION	1.7586829839803523E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.999994615433967	WITHOUT_CLASSIFICATION	5.38456603301135E-6	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887785543198	WITHOUT_CLASSIFICATION	1.1221445680285012E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999766158521378	WITHOUT_CLASSIFICATION	2.33841478621656E-5	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901388948291	WITHOUT_CLASSIFICATION	9.861105170802759E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999536830533	WITHOUT_CLASSIFICATION	4.631694666976506E-8	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999915208099552	WITHOUT_CLASSIFICATION	8.479190044708211E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999125457898048	WITHOUT_CLASSIFICATION	8.745421019524057E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999118830859	WITHOUT_CLASSIFICATION	8.811691402496587E-8	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999824170273995	WITHOUT_CLASSIFICATION	1.758297260051744E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980337361114	WITHOUT_CLASSIFICATION	1.966263888591033E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999824170273995	WITHOUT_CLASSIFICATION	1.758297260051744E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999044279894883	WITHOUT_CLASSIFICATION	9.557201051167366E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999809395393473	WITHOUT_CLASSIFICATION	1.9060460652744655E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999897072387054	WITHOUT_CLASSIFICATION	1.0292761294566191E-5	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999775120906228	WITHOUT_CLASSIFICATION	2.2487909377225174E-5	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999082854512679	WITHOUT_CLASSIFICATION	9.171454873209524E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9978252240986796	WITHOUT_CLASSIFICATION	0.002174775901320442	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999966455573156	WITHOUT_CLASSIFICATION	3.354442684447915E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999777595471417	WITHOUT_CLASSIFICATION	2.2240452858328416E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999939462356076	WITHOUT_CLASSIFICATION	6.053764392498049E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999996120492605	WITHOUT_CLASSIFICATION	3.8795073956451724E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999889260443717	WITHOUT_CLASSIFICATION	1.1073955628405737E-5	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999934551908386	WITHOUT_CLASSIFICATION	6.54480916135262E-6	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999701867547875	WITHOUT_CLASSIFICATION	2.981324521237866E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999071893527416	WITHOUT_CLASSIFICATION	9.281064725840142E-5	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999949663057321	WITHOUT_CLASSIFICATION	5.0336942678849794E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999981057996222	WITHOUT_CLASSIFICATION	1.8942003778825361E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999882002576542	WITHOUT_CLASSIFICATION	1.179974234580081E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999882002576542	WITHOUT_CLASSIFICATION	1.179974234580081E-4	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999073660102776	WITHOUT_CLASSIFICATION	9.26339897224142E-5	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999131290617	WITHOUT_CLASSIFICATION	8.687093834215906E-8	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999941767547702	WITHOUT_CLASSIFICATION	5.823245229715209E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999991606522999	WITHOUT_CLASSIFICATION	8.393477001560539E-7	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999995023301539	WITHOUT_CLASSIFICATION	4.976698460562539E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999971603905022	WITHOUT_CLASSIFICATION	2.839609497878081E-6	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999995344631546	WITHOUT_CLASSIFICATION	4.655368453947514E-7	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999966710131321	WITHOUT_CLASSIFICATION	3.328986867904854E-5	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999759308335254	WITHOUT_CLASSIFICATION	2.4069166474545733E-5	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999989478993647	WITHOUT_CLASSIFICATION	1.0521006353163487E-6	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99999534597532	WITHOUT_CLASSIFICATION	4.654024679872731E-6	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999327267827	WITHOUT_CLASSIFICATION	6.727321727823391E-8	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.99999920883497	WITHOUT_CLASSIFICATION	7.911650299923785E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999828261313314	WITHOUT_CLASSIFICATION	1.7173868668623276E-5	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999943617341366	WITHOUT_CLASSIFICATION	5.638265863356399E-6	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999989527767063	WITHOUT_CLASSIFICATION	1.0472232938192128E-6	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999982616172174	WITHOUT_CLASSIFICATION	1.7383827825355096E-6	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999963066007852	WITHOUT_CLASSIFICATION	3.693399214777268E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999469259108291	WITHOUT_CLASSIFICATION	5.307408917091877E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999999920280624	WITHOUT_CLASSIFICATION	7.971937608082864E-8	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999890156107444	WITHOUT_CLASSIFICATION	1.098438925574381E-5	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999970597163762	WITHOUT_CLASSIFICATION	2.940283623745096E-6	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999689381729	WITHOUT_CLASSIFICATION	3.1061827101270204E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999995114719943	WITHOUT_CLASSIFICATION	4.885280057510449E-7	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.999970670075681	WITHOUT_CLASSIFICATION	2.9329924319154795E-5	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999470088332156	WITHOUT_CLASSIFICATION	5.299116678449646E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999529862791322	WITHOUT_CLASSIFICATION	4.701372086785988E-5	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9990561015450129	WITHOUT_CLASSIFICATION	9.438984549872167E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9998503918175053	WITHOUT_CLASSIFICATION	1.4960818249470156E-4	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9988768625723659	WITHOUT_CLASSIFICATION	0.0011231374276340499	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999851639697594	WITHOUT_CLASSIFICATION	1.483603024060661E-5	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998715041962908	WITHOUT_CLASSIFICATION	1.2849580370915103E-4	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998583673870545	WITHOUT_CLASSIFICATION	1.416326129454116E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999072431950675	WITHOUT_CLASSIFICATION	9.275680493247066E-5	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999414098809315	WITHOUT_CLASSIFICATION	5.859011906841874E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999965181540129	WITHOUT_CLASSIFICATION	3.4818459870743474E-6	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999964491330461	WITHOUT_CLASSIFICATION	3.5508669538775452E-6	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999191397793511	WITHOUT_CLASSIFICATION	8.086022064895783E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.99999538459992	WITHOUT_CLASSIFICATION	4.6154000799755396E-6	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999915738942379	WITHOUT_CLASSIFICATION	8.426105762180745E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999977121659152	WITHOUT_CLASSIFICATION	2.2878340848074158E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827297061911	WITHOUT_CLASSIFICATION	1.727029380896655E-5	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999314011675526	WITHOUT_CLASSIFICATION	6.85988324473297E-5	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999929451127749	WITHOUT_CLASSIFICATION	7.054887225149672E-6	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999993476188569	WITHOUT_CLASSIFICATION	6.523811430903165E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999946951390285	WITHOUT_CLASSIFICATION	5.304860971453827E-6	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999951732352367	WITHOUT_CLASSIFICATION	4.826764763263355E-6	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999994015814401	WITHOUT_CLASSIFICATION	5.984185599040834E-6	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999965824066471	WITHOUT_CLASSIFICATION	3.4175933529588774E-6	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999997996341196	WITHOUT_CLASSIFICATION	2.003658803954772E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775679280137	WITHOUT_CLASSIFICATION	2.243207198625316E-5	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999987769017679	WITHOUT_CLASSIFICATION	1.2230982321154522E-6	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999928079512922	WITHOUT_CLASSIFICATION	7.192048707693209E-6	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999593641905382	WITHOUT_CLASSIFICATION	4.063580946182085E-5	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998641185544227	WITHOUT_CLASSIFICATION	1.3588144557730262E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999594140330386	WITHOUT_CLASSIFICATION	4.0585966961406804E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999594140330386	WITHOUT_CLASSIFICATION	4.0585966961406804E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999559875231236	WITHOUT_CLASSIFICATION	4.401247687637564E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9993136133909014	WITHOUT_CLASSIFICATION	6.863866090987127E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999986161679418	WITHOUT_CLASSIFICATION	1.383832058204508E-5	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999875470229252	WITHOUT_CLASSIFICATION	1.2452977074737587E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999885094823199	WITHOUT_CLASSIFICATION	1.1490517680177092E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999889442665905	WITHOUT_CLASSIFICATION	1.1055733409558836E-5	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999990714587451	WITHOUT_CLASSIFICATION	9.285412550048091E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9998843426854597	WITHOUT_CLASSIFICATION	1.1565731454039299E-4	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999984438211358	WITHOUT_CLASSIFICATION	1.5561788642151944E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999943865019092	WITHOUT_CLASSIFICATION	5.613498090819473E-6	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999709390659106	WITHOUT_CLASSIFICATION	2.9060934089288024E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999247993589268	WITHOUT_CLASSIFICATION	7.520064107330841E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9992602600951765	WITHOUT_CLASSIFICATION	7.397399048234382E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999965117126984	WITHOUT_CLASSIFICATION	3.4882873016688533E-6	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999733411630771	WITHOUT_CLASSIFICATION	2.6658836922931153E-5	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999982320736814	WITHOUT_CLASSIFICATION	1.76792631859912E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999992687299843	WITHOUT_CLASSIFICATION	7.312700156937041E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9998405623897314	WITHOUT_CLASSIFICATION	1.5943761026856014E-4	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999835876370605	WITHOUT_CLASSIFICATION	1.641236293952101E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999536290347862	WITHOUT_CLASSIFICATION	4.637096521380751E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999947327944312	WITHOUT_CLASSIFICATION	5.267205568751066E-6	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999381215719175	WITHOUT_CLASSIFICATION	6.1878428082535E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991984213569969	WITHOUT_CLASSIFICATION	8.0157864300311E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.999993958125433	WITHOUT_CLASSIFICATION	6.041874566997366E-6	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999966652331732	WITHOUT_CLASSIFICATION	3.3347668268435686E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999996176013006	WITHOUT_CLASSIFICATION	3.8239869941884E-7	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999886715268753	WITHOUT_CLASSIFICATION	1.1328473124688484E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988136227038196	WITHOUT_CLASSIFICATION	0.0011863772961803727	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998739238834936	WITHOUT_CLASSIFICATION	1.2607611650641284E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991984213569969	WITHOUT_CLASSIFICATION	8.0157864300311E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999952184378118	WITHOUT_CLASSIFICATION	4.781562188206059E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999980493481995	WITHOUT_CLASSIFICATION	1.9506518005310493E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9984021320059726	WITHOUT_CLASSIFICATION	0.0015978679940274606	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999473579220037	WITHOUT_CLASSIFICATION	5.2642077996395646E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999992654039183	WITHOUT_CLASSIFICATION	7.345960818174615E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999977699534395	WITHOUT_CLASSIFICATION	2.2300465604929056E-5	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999986738323795	WITHOUT_CLASSIFICATION	1.3261676205178787E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999978732250913	WITHOUT_CLASSIFICATION	2.1267749086888882E-6	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999929212330889	WITHOUT_CLASSIFICATION	7.078766911113671E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999473579220037	WITHOUT_CLASSIFICATION	5.2642077996395646E-5	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999968917882002	WITHOUT_CLASSIFICATION	3.108211799887474E-6	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999977465793706	WITHOUT_CLASSIFICATION	2.2534206295146857E-6	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999911054114426	WITHOUT_CLASSIFICATION	8.894588557271875E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999189943558331	WITHOUT_CLASSIFICATION	8.100564416689146E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999641479999114	WITHOUT_CLASSIFICATION	3.5852000088599655E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.99999534597532	WITHOUT_CLASSIFICATION	4.654024679872731E-6	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999946106706737	WITHOUT_CLASSIFICATION	5.389329326341448E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999986556553132	WITHOUT_CLASSIFICATION	1.3443446867587108E-6	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999859046909101	WITHOUT_CLASSIFICATION	1.4095309089998145E-5	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999942947459848	WITHOUT_CLASSIFICATION	5.705254015267224E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9994892275213857	WITHOUT_CLASSIFICATION	5.107724786142849E-4	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999402135768405	WITHOUT_CLASSIFICATION	5.9786423159423124E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999573559531244	WITHOUT_CLASSIFICATION	4.2644046875560766E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999968918568213	WITHOUT_CLASSIFICATION	3.108143178597693E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9996652234814233	WITHOUT_CLASSIFICATION	3.347765185767655E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999371229059163	WITHOUT_CLASSIFICATION	6.287709408371247E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988358562567029	WITHOUT_CLASSIFICATION	0.001164143743297122	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999993300700584	WITHOUT_CLASSIFICATION	6.699299415756929E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999995421186829	WITHOUT_CLASSIFICATION	4.578813170828613E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9998785136956622	WITHOUT_CLASSIFICATION	1.2148630433772743E-4	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999901996720549	WITHOUT_CLASSIFICATION	9.800327945147429E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999966969588018	WITHOUT_CLASSIFICATION	3.3030411982995593E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999983513330553	WITHOUT_CLASSIFICATION	1.6486669447789465E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999854435860849	WITHOUT_CLASSIFICATION	1.4556413915170848E-5	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999787878869731	WITHOUT_CLASSIFICATION	2.1212113026952004E-5	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999805377075609	WITHOUT_CLASSIFICATION	1.9462292439023197E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999400108419685	WITHOUT_CLASSIFICATION	5.998915803158147E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999936861275632	WITHOUT_CLASSIFICATION	6.313872436713517E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999972833732624	WITHOUT_CLASSIFICATION	2.7166267375503155E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999895746437305	WITHOUT_CLASSIFICATION	1.042535626960271E-5	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999803697725356	WITHOUT_CLASSIFICATION	1.96302274644068E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9998447456497299	WITHOUT_CLASSIFICATION	1.5525435026998792E-4	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9997708121480952	WITHOUT_CLASSIFICATION	2.291878519049203E-4	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991275118024	WITHOUT_CLASSIFICATION	8.724881976014039E-6	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855404125253	WITHOUT_CLASSIFICATION	1.4459587474689126E-5	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999963365885967	WITHOUT_CLASSIFICATION	3.663411403251387E-6	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999506028203814	WITHOUT_CLASSIFICATION	4.93971796185642E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999976929031767	WITHOUT_CLASSIFICATION	2.3070968232561E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999898396158908	WITHOUT_CLASSIFICATION	1.0160384109218762E-5	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999936792437375	WITHOUT_CLASSIFICATION	6.320756262535663E-6	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999948104866171	WITHOUT_CLASSIFICATION	5.189513382948334E-6	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999551140477932	WITHOUT_CLASSIFICATION	4.4885952206804895E-5	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999963246914705	WITHOUT_CLASSIFICATION	3.67530852942167E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999966275466871	WITHOUT_CLASSIFICATION	3.372453312878549E-6	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999938613781079	WITHOUT_CLASSIFICATION	6.138621892126709E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998437817186724	WITHOUT_CLASSIFICATION	1.562182813275404E-4	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999829755595759	WITHOUT_CLASSIFICATION	1.7024440424068223E-5	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996658563548	WITHOUT_CLASSIFICATION	3.3414364516954115E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999941836083306	WITHOUT_CLASSIFICATION	5.816391669434453E-6	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999829924309602	WITHOUT_CLASSIFICATION	1.7007569039784536E-5	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999977431754836	WITHOUT_CLASSIFICATION	2.256824516348289E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999482453570266	WITHOUT_CLASSIFICATION	5.175464297333129E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999945508119916	WITHOUT_CLASSIFICATION	5.4491880084058465E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999941060619554	WITHOUT_CLASSIFICATION	5.893938044526426E-6	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999987344268269	WITHOUT_CLASSIFICATION	1.2655731731397801E-6	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999974155709309	WITHOUT_CLASSIFICATION	2.5844290690608014E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999248361203898	WITHOUT_CLASSIFICATION	7.516387961014115E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999991020895982	WITHOUT_CLASSIFICATION	8.979104017583572E-7	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999967566423715	WITHOUT_CLASSIFICATION	3.2433576284616945E-6	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999989500498102	WITHOUT_CLASSIFICATION	1.0499501897441233E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999927837337024	WITHOUT_CLASSIFICATION	7.216266297705067E-6	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999858629078797	WITHOUT_CLASSIFICATION	1.4137092120331739E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991275118024	WITHOUT_CLASSIFICATION	8.724881976014039E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999962779725277	WITHOUT_CLASSIFICATION	3.7220274723371943E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999967759204884	WITHOUT_CLASSIFICATION	3.2240795115997392E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999386311765363	WITHOUT_CLASSIFICATION	6.136882346371777E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999477504373647	WITHOUT_CLASSIFICATION	5.224956263527726E-5	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999649146154517	WITHOUT_CLASSIFICATION	3.5085384548301704E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999957720369607	WITHOUT_CLASSIFICATION	4.227963039367705E-6	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916869111781	WITHOUT_CLASSIFICATION	8.313088821884104E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999924384203884	WITHOUT_CLASSIFICATION	7.5615796116869585E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999949408148127	WITHOUT_CLASSIFICATION	5.059185187319604E-6	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999995528861104	WITHOUT_CLASSIFICATION	4.471138896184518E-7	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999987001597879	WITHOUT_CLASSIFICATION	1.299840212196925E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993823416895742	WITHOUT_CLASSIFICATION	6.176583104258605E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999993209241065	WITHOUT_CLASSIFICATION	6.790758935040139E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999871871937083	WITHOUT_CLASSIFICATION	1.2812806291800243E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999044279894883	WITHOUT_CLASSIFICATION	9.557201051167366E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999968203692366	WITHOUT_CLASSIFICATION	3.1796307632995497E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999998113960307	WITHOUT_CLASSIFICATION	1.886039692942396E-6	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999893284855008	WITHOUT_CLASSIFICATION	1.0671514499208897E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999446270484154	WITHOUT_CLASSIFICATION	5.537295158471208E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999994885321013	WITHOUT_CLASSIFICATION	5.114678986700643E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999351174281478	WITHOUT_CLASSIFICATION	6.488257185226211E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999351174281478	WITHOUT_CLASSIFICATION	6.488257185226211E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999874877757837	WITHOUT_CLASSIFICATION	1.2512224216265054E-5	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999996721177996	WITHOUT_CLASSIFICATION	3.2788220040914673E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999877191501575	WITHOUT_CLASSIFICATION	1.22808498424685E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999960170142728	WITHOUT_CLASSIFICATION	3.982985727235579E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998732674298451	WITHOUT_CLASSIFICATION	1.2673257015496085E-4	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999853079807535	WITHOUT_CLASSIFICATION	1.4692019246684032E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999728706819798	WITHOUT_CLASSIFICATION	2.7129318020174655E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999989942134022	WITHOUT_CLASSIFICATION	1.005786597737454E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999989942134022	WITHOUT_CLASSIFICATION	1.005786597737454E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.99998690558483	WITHOUT_CLASSIFICATION	1.3094415170023408E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999628474857318	WITHOUT_CLASSIFICATION	3.715251426816252E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999365874120726	WITHOUT_CLASSIFICATION	6.34125879274121E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999952938929949	WITHOUT_CLASSIFICATION	4.706107005092225E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999952938929949	WITHOUT_CLASSIFICATION	4.706107005092225E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999952938929949	WITHOUT_CLASSIFICATION	4.706107005092225E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999677339773586	WITHOUT_CLASSIFICATION	3.226602264147043E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999994926569363	WITHOUT_CLASSIFICATION	5.073430636476934E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999937543293311	WITHOUT_CLASSIFICATION	6.245670668867643E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999944555079873	WITHOUT_CLASSIFICATION	5.544492012756749E-6	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999840032039833	WITHOUT_CLASSIFICATION	1.5996796016681333E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999994748561521	WITHOUT_CLASSIFICATION	5.251438478493933E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999991626053104	WITHOUT_CLASSIFICATION	8.373946895145188E-7	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999914671280956	WITHOUT_CLASSIFICATION	8.532871904469796E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999980609173761	WITHOUT_CLASSIFICATION	1.9390826239609482E-6	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999653972863082	WITHOUT_CLASSIFICATION	3.460271369184849E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.99993588360104	WITHOUT_CLASSIFICATION	6.41163989599394E-5	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999511899425803	WITHOUT_CLASSIFICATION	4.881005741971063E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999798420774199	WITHOUT_CLASSIFICATION	2.0157922580163033E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999839746520364	WITHOUT_CLASSIFICATION	1.6025347963605226E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9998719708402779	WITHOUT_CLASSIFICATION	1.2802915972203312E-4	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999550127431929	WITHOUT_CLASSIFICATION	4.498725680716455E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995608312653905	WITHOUT_CLASSIFICATION	4.3916873460943186E-4	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995608312653905	WITHOUT_CLASSIFICATION	4.3916873460943186E-4	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.99964625372483	WITHOUT_CLASSIFICATION	3.5374627517006663E-4	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.99964625372483	WITHOUT_CLASSIFICATION	3.5374627517006663E-4	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9996397804268387	WITHOUT_CLASSIFICATION	3.6021957316137194E-4	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999643132135337	WITHOUT_CLASSIFICATION	3.5686786466306323E-4	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999643132135337	WITHOUT_CLASSIFICATION	3.5686786466306323E-4	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9997849505350995	WITHOUT_CLASSIFICATION	2.1504946490038225E-4	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996334919792227	WITHOUT_CLASSIFICATION	3.665080207773254E-4	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999564863844398	WITHOUT_CLASSIFICATION	4.351361556014106E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999351174281478	WITHOUT_CLASSIFICATION	6.488257185226211E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9994056296218172	WITHOUT_CLASSIFICATION	5.943703781827469E-4	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996334919792227	WITHOUT_CLASSIFICATION	3.665080207773254E-4	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9996421055545118	WITHOUT_CLASSIFICATION	3.578944454880521E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999449461863709	WITHOUT_CLASSIFICATION	5.505381362910273E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9997480461782737	WITHOUT_CLASSIFICATION	2.5195382172634394E-4	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9998169017375225	WITHOUT_CLASSIFICATION	1.830982624774483E-4	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999988614562356	WITHOUT_CLASSIFICATION	1.138543764404031E-6	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999763037153967	WITHOUT_CLASSIFICATION	2.3696284603385162E-5	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999889451820603	WITHOUT_CLASSIFICATION	1.1054817939820705E-5	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998278340977181	WITHOUT_CLASSIFICATION	1.721659022818648E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999618398933942	WITHOUT_CLASSIFICATION	3.816010660588749E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999979238338013	WITHOUT_CLASSIFICATION	2.0761661986550467E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999792322656411	WITHOUT_CLASSIFICATION	2.076773435879717E-5	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.99968819859011	WITHOUT_CLASSIFICATION	3.118014098899499E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999559734632834	WITHOUT_CLASSIFICATION	4.4026536716705884E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999997506207734	WITHOUT_CLASSIFICATION	2.493792266105366E-7	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999942118207452	WITHOUT_CLASSIFICATION	5.788179254701764E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999959955042288	WITHOUT_CLASSIFICATION	4.0044957712451885E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999059351163363	WITHOUT_CLASSIFICATION	9.406488366373339E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999059351163363	WITHOUT_CLASSIFICATION	9.406488366373339E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999992993795039	WITHOUT_CLASSIFICATION	7.006204961014653E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999990587515198	WITHOUT_CLASSIFICATION	9.412484801447674E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999952002298953	WITHOUT_CLASSIFICATION	4.799770104696271E-6	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999574796970739	WITHOUT_CLASSIFICATION	4.252030292604427E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999718718806031	WITHOUT_CLASSIFICATION	2.812811939694327E-5	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999983659629628	WITHOUT_CLASSIFICATION	1.6340370373089459E-6	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999997468465331	WITHOUT_CLASSIFICATION	2.5315346689637763E-6	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.999975405754509	WITHOUT_CLASSIFICATION	2.459424549102045E-5	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999232780201985	WITHOUT_CLASSIFICATION	7.672197980138427E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99999724743547	WITHOUT_CLASSIFICATION	2.7525645299647084E-6	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999952439901459	WITHOUT_CLASSIFICATION	4.756009854000358E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993823416895742	WITHOUT_CLASSIFICATION	6.176583104258605E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999984268311285	WITHOUT_CLASSIFICATION	1.573168871502316E-6	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999954635683576	WITHOUT_CLASSIFICATION	4.536431642348364E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999992906195616	WITHOUT_CLASSIFICATION	7.093804384239937E-7	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999915673294424	WITHOUT_CLASSIFICATION	8.43267055753656E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999975440826863	WITHOUT_CLASSIFICATION	2.4559173137292192E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999975440826863	WITHOUT_CLASSIFICATION	2.4559173137292192E-6	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999994476345238	WITHOUT_CLASSIFICATION	5.523654761928975E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999829356784427	WITHOUT_CLASSIFICATION	1.706432155733996E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999842560821852	WITHOUT_CLASSIFICATION	1.5743917814799695E-5	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999591104161357	WITHOUT_CLASSIFICATION	4.088958386418928E-5	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999740611278213	WITHOUT_CLASSIFICATION	2.5938872178740716E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997441031492696	WITHOUT_CLASSIFICATION	2.5589685073039073E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999995367572869	WITHOUT_CLASSIFICATION	4.632427131450685E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999938341175637	WITHOUT_CLASSIFICATION	6.1658824362589565E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999951753585582	WITHOUT_CLASSIFICATION	4.824641441883032E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999781214676371	WITHOUT_CLASSIFICATION	2.1878532362887063E-5	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999858006670718	WITHOUT_CLASSIFICATION	1.4199332928171637E-5	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999938341175637	WITHOUT_CLASSIFICATION	6.1658824362589565E-6	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999943914733607	WITHOUT_CLASSIFICATION	5.608526639307798E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999981423383544	WITHOUT_CLASSIFICATION	1.8576616456283285E-6	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999796983464014	WITHOUT_CLASSIFICATION	2.0301653598573536E-5	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999569971052107	WITHOUT_CLASSIFICATION	4.300289478938083E-5	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999865203331154	WITHOUT_CLASSIFICATION	1.3479666884493212E-5	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999992851901743	WITHOUT_CLASSIFICATION	7.148098256447862E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999997749382882	WITHOUT_CLASSIFICATION	2.2506171180346734E-6	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999927451387657	WITHOUT_CLASSIFICATION	7.2548612343167585E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999984310587987	WITHOUT_CLASSIFICATION	1.5689412013023437E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999676278698086	WITHOUT_CLASSIFICATION	3.237213019139966E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999990008427739	WITHOUT_CLASSIFICATION	9.991572260691848E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999925387390822	WITHOUT_CLASSIFICATION	7.461260917842076E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999963175919291	WITHOUT_CLASSIFICATION	3.682408071004782E-6	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999995322800808	WITHOUT_CLASSIFICATION	4.677199192768884E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999993369959933	WITHOUT_CLASSIFICATION	6.630040066976955E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999988599127269	WITHOUT_CLASSIFICATION	1.1400872730681453E-6	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999986346918848	WITHOUT_CLASSIFICATION	1.3653081152269953E-6	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999835361764795	WITHOUT_CLASSIFICATION	1.6463823520511883E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999801080940361	WITHOUT_CLASSIFICATION	1.9891905963831813E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999977003887752	WITHOUT_CLASSIFICATION	2.299611224860081E-6	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999942725280614	WITHOUT_CLASSIFICATION	5.7274719385106375E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999944813602111	WITHOUT_CLASSIFICATION	5.518639788932621E-6	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999565872756347	WITHOUT_CLASSIFICATION	4.341272436530856E-5	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9998058229649903	WITHOUT_CLASSIFICATION	1.9417703500966755E-4	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999963272933045	WITHOUT_CLASSIFICATION	3.6727066955659936E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.999970931095711	WITHOUT_CLASSIFICATION	2.9068904288988763E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999958339844517	WITHOUT_CLASSIFICATION	4.166015548386462E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999955685671253	WITHOUT_CLASSIFICATION	4.4314328746467555E-6	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999988109336375	WITHOUT_CLASSIFICATION	1.189066362581079E-6	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999919926882544	WITHOUT_CLASSIFICATION	8.007311745511328E-6	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999972537244802	WITHOUT_CLASSIFICATION	2.746275519834806E-6	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999317194325217	WITHOUT_CLASSIFICATION	6.828056747831361E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999963536387293	WITHOUT_CLASSIFICATION	3.646361270787484E-6	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999997608978717	WITHOUT_CLASSIFICATION	2.3910212835528623E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999985635354962	WITHOUT_CLASSIFICATION	1.4364645037668655E-6	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999990370176379	WITHOUT_CLASSIFICATION	9.629823620566132E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999919300751792	WITHOUT_CLASSIFICATION	8.069924820828776E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999947293671603	WITHOUT_CLASSIFICATION	5.2706328396816356E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999847209733469	WITHOUT_CLASSIFICATION	1.5279026653146843E-5	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999972280006144	WITHOUT_CLASSIFICATION	2.7719993856952587E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999985858235954	WITHOUT_CLASSIFICATION	1.414176404632816E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999508412067897	WITHOUT_CLASSIFICATION	4.915879321035767E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999929491821364	WITHOUT_CLASSIFICATION	7.0508178636369396E-6	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999967055864109	WITHOUT_CLASSIFICATION	3.294413589218814E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9998643049279696	WITHOUT_CLASSIFICATION	1.3569507203035596E-4	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999895466363968	WITHOUT_CLASSIFICATION	1.045336360322127E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.999975442334559	WITHOUT_CLASSIFICATION	2.4557665440901697E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998990198012256	WITHOUT_CLASSIFICATION	1.0098019877434042E-4	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999972048409942	WITHOUT_CLASSIFICATION	2.7951590057920538E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999969883195947	WITHOUT_CLASSIFICATION	3.0116804052964032E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942459114662	WITHOUT_CLASSIFICATION	5.754088533799017E-6	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999988201704597	WITHOUT_CLASSIFICATION	1.1798295402068788E-6	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999994312963274	WITHOUT_CLASSIFICATION	5.6870367259536575E-6	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999928515768728	WITHOUT_CLASSIFICATION	7.148423127234943E-6	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999993096211512	WITHOUT_CLASSIFICATION	6.903788488079386E-7	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999888396480344	WITHOUT_CLASSIFICATION	1.1160351965515101E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999980716361053	WITHOUT_CLASSIFICATION	1.92836389469229E-6	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999968401095294	WITHOUT_CLASSIFICATION	3.1598904704734647E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999373313064115	WITHOUT_CLASSIFICATION	6.266869358848084E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999767314922112	WITHOUT_CLASSIFICATION	2.3268507788797035E-5	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999970035503946	WITHOUT_CLASSIFICATION	2.9964496054289824E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999945513225091	WITHOUT_CLASSIFICATION	5.448677490901841E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999905937168481	WITHOUT_CLASSIFICATION	9.406283151837371E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999990965103604	WITHOUT_CLASSIFICATION	9.034896396036254E-6	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999974134036797	WITHOUT_CLASSIFICATION	2.586596320305973E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9989098102629348	WITHOUT_CLASSIFICATION	0.0010901897370652084	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942459114662	WITHOUT_CLASSIFICATION	5.754088533799017E-6	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999938280749504	WITHOUT_CLASSIFICATION	6.17192504950025E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999900159128686	WITHOUT_CLASSIFICATION	9.98408713133517E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997207412757968	WITHOUT_CLASSIFICATION	2.7925872420317405E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999907655824114	WITHOUT_CLASSIFICATION	9.234417588548355E-6	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999983622902268	WITHOUT_CLASSIFICATION	1.6377097731533936E-6	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999972230446492	WITHOUT_CLASSIFICATION	2.7769553508009983E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999951753585582	WITHOUT_CLASSIFICATION	4.824641441883032E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999857658299155	WITHOUT_CLASSIFICATION	1.4234170084572799E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999985635354962	WITHOUT_CLASSIFICATION	1.4364645037668655E-6	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999951115242074	WITHOUT_CLASSIFICATION	4.888475792623309E-6	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999996015086212	WITHOUT_CLASSIFICATION	3.984913787900856E-6	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999873245141166	WITHOUT_CLASSIFICATION	1.2675485883380567E-5	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999872326514576	WITHOUT_CLASSIFICATION	1.2767348542348855E-5	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999980023716705	WITHOUT_CLASSIFICATION	1.997628329618847E-6	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999847568557647	WITHOUT_CLASSIFICATION	1.5243144235226305E-5	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999945799087533	WITHOUT_CLASSIFICATION	5.420091246753665E-6	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999984239980668	WITHOUT_CLASSIFICATION	1.576001933269216E-6	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999967224673109	WITHOUT_CLASSIFICATION	3.2775326891127947E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983043643206	WITHOUT_CLASSIFICATION	1.695635679424049E-6	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999946055570145	WITHOUT_CLASSIFICATION	5.39444298557715E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999989008290534	WITHOUT_CLASSIFICATION	1.0991709466688554E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999962267164776	WITHOUT_CLASSIFICATION	3.7732835224933197E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999962267164776	WITHOUT_CLASSIFICATION	3.7732835224933197E-6	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999931728034914	WITHOUT_CLASSIFICATION	6.827196508501537E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999866112778432	WITHOUT_CLASSIFICATION	1.3388722156914493E-5	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999985437494365	WITHOUT_CLASSIFICATION	1.4562505635117083E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999929675177877	WITHOUT_CLASSIFICATION	7.032482212341374E-6	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999987003065915	WITHOUT_CLASSIFICATION	1.299693408459629E-6	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999935066587026	WITHOUT_CLASSIFICATION	6.493341297414465E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999970716464058	WITHOUT_CLASSIFICATION	2.9283535941925312E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999164854259798	WITHOUT_CLASSIFICATION	8.351457402022491E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999990278377399	WITHOUT_CLASSIFICATION	9.721622602005275E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994417459337	WITHOUT_CLASSIFICATION	5.582540661897022E-7	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999625266435022	WITHOUT_CLASSIFICATION	3.7473356497753943E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.999969035133834	WITHOUT_CLASSIFICATION	3.096486616599718E-5	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999909511346188	WITHOUT_CLASSIFICATION	9.048865381268656E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999991652145074	WITHOUT_CLASSIFICATION	8.347854926852609E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999956923775166	WITHOUT_CLASSIFICATION	4.307622483354205E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999961355845358	WITHOUT_CLASSIFICATION	3.86441546416587E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999975753602776	WITHOUT_CLASSIFICATION	2.424639722436726E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999985605407993	WITHOUT_CLASSIFICATION	1.4394592007163575E-6	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999873942402594	WITHOUT_CLASSIFICATION	1.2605759740636209E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999537892993963	WITHOUT_CLASSIFICATION	4.6210700603645824E-5	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999195460745692	WITHOUT_CLASSIFICATION	8.04539254308092E-5	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999974512975753	WITHOUT_CLASSIFICATION	2.5487024247872982E-6	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999951637169321	WITHOUT_CLASSIFICATION	4.836283067856544E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9996167941993354	WITHOUT_CLASSIFICATION	3.832058006646054E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999883779537823	WITHOUT_CLASSIFICATION	1.1622046217808204E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525659046528	WITHOUT_CLASSIFICATION	4.743409534723492E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999926899527445	WITHOUT_CLASSIFICATION	7.310047255477455E-6	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999981424544302	WITHOUT_CLASSIFICATION	1.857545569883579E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999809067492555	WITHOUT_CLASSIFICATION	1.9093250744513797E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999954330975476	WITHOUT_CLASSIFICATION	4.566902452469596E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9941495762592308	WITHOUT_CLASSIFICATION	0.005850423740769206	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998749463099397	WITHOUT_CLASSIFICATION	1.2505369006032295E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999951869001376	WITHOUT_CLASSIFICATION	4.813099862503592E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999994290824316	WITHOUT_CLASSIFICATION	5.70917568394061E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999902997894533	WITHOUT_CLASSIFICATION	9.700210546735888E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999849494713763	WITHOUT_CLASSIFICATION	1.5050528623807757E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999966576889704	WITHOUT_CLASSIFICATION	3.3423110295986925E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999949856546082	WITHOUT_CLASSIFICATION	5.014345391825701E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999766726785209	WITHOUT_CLASSIFICATION	2.3327321479250212E-5	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999880036098574	WITHOUT_CLASSIFICATION	1.1996390142594197E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999591732955668	WITHOUT_CLASSIFICATION	4.082670443322155E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999984109922512	WITHOUT_CLASSIFICATION	1.5890077487634097E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999583278744941	WITHOUT_CLASSIFICATION	4.167212550590206E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998954850380743	WITHOUT_CLASSIFICATION	1.0451496192560877E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999864020016105	WITHOUT_CLASSIFICATION	1.3597998389498113E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999726104491155	WITHOUT_CLASSIFICATION	2.7389550884582202E-5	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9972543575205229	WITHOUT_CLASSIFICATION	0.0027456424794770015	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985656351514	WITHOUT_CLASSIFICATION	1.4343648486311265E-6	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999895632059737	WITHOUT_CLASSIFICATION	1.0436794026322952E-5	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999984273502682	WITHOUT_CLASSIFICATION	1.5726497317643438E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999843871630257	WITHOUT_CLASSIFICATION	1.561283697426897E-5	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999965510683694	WITHOUT_CLASSIFICATION	3.448931630635511E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999967439481601	WITHOUT_CLASSIFICATION	3.2560518399894848E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999982427617284	WITHOUT_CLASSIFICATION	1.7572382715457525E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999813748369852	WITHOUT_CLASSIFICATION	1.8625163014783403E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999990820806068	WITHOUT_CLASSIFICATION	9.179193931827518E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999679730377685	WITHOUT_CLASSIFICATION	3.202696223149327E-5	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999977149078591	WITHOUT_CLASSIFICATION	2.2850921408985873E-5	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999805595035381	WITHOUT_CLASSIFICATION	1.9440496461807835E-5	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999893621162006	WITHOUT_CLASSIFICATION	1.0637883799475227E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998799988299506	WITHOUT_CLASSIFICATION	1.2000117004931911E-4	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999325754566805	WITHOUT_CLASSIFICATION	6.742454331958012E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999770373777052	WITHOUT_CLASSIFICATION	2.2962622294804704E-5	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9998778574566405	WITHOUT_CLASSIFICATION	1.2214254335943557E-4	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999114596398329	WITHOUT_CLASSIFICATION	8.854036016711343E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999904951017451	WITHOUT_CLASSIFICATION	9.504898254861752E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999981230165681	WITHOUT_CLASSIFICATION	1.8769834319062055E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.99999704258328	WITHOUT_CLASSIFICATION	2.9574167199497717E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999971818093895	WITHOUT_CLASSIFICATION	2.818190610579897E-6	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999976490899299	WITHOUT_CLASSIFICATION	2.350910070099794E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999971818093895	WITHOUT_CLASSIFICATION	2.818190610579897E-6	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999991610195215	WITHOUT_CLASSIFICATION	8.389804785552597E-7	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999932838693065	WITHOUT_CLASSIFICATION	6.716130693581947E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999973072330441	WITHOUT_CLASSIFICATION	2.6927669559703173E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999874383346665	WITHOUT_CLASSIFICATION	1.2561665333402734E-5	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999910477260029	WITHOUT_CLASSIFICATION	8.952273997085366E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999929768525188	WITHOUT_CLASSIFICATION	7.0231474812773045E-6	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996382513455	WITHOUT_CLASSIFICATION	3.617486544164364E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999712134658465	WITHOUT_CLASSIFICATION	2.8786534153604654E-5	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999986145970797	WITHOUT_CLASSIFICATION	1.3854029203166422E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999985238422523	WITHOUT_CLASSIFICATION	1.4761577476872301E-6	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999997325981424	WITHOUT_CLASSIFICATION	2.674018575943097E-6	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999948628223243	WITHOUT_CLASSIFICATION	5.1371776757980864E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999992420116854	WITHOUT_CLASSIFICATION	7.579883145610545E-7	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999961643404454	WITHOUT_CLASSIFICATION	3.835659554661225E-6	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999948323495109	WITHOUT_CLASSIFICATION	5.167650489140506E-6	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999973029522121	WITHOUT_CLASSIFICATION	2.697047787963594E-6	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999905227528022	WITHOUT_CLASSIFICATION	9.477247197729148E-6	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999981564096408	WITHOUT_CLASSIFICATION	1.843590359168031E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999972490071622	WITHOUT_CLASSIFICATION	2.750992837822034E-6	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999892381470825	WITHOUT_CLASSIFICATION	1.0761852917367637E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999465071515773	WITHOUT_CLASSIFICATION	5.3492848422790954E-5	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999446764177905	WITHOUT_CLASSIFICATION	5.532358220955127E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999803263283765	WITHOUT_CLASSIFICATION	1.967367162341038E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999835125336353	WITHOUT_CLASSIFICATION	1.6487466364720476E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999898380851033	WITHOUT_CLASSIFICATION	1.0161914896704669E-5	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998527867345051	WITHOUT_CLASSIFICATION	1.4721326549489545E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999401271058823	WITHOUT_CLASSIFICATION	5.9872894117638325E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999274371712558	WITHOUT_CLASSIFICATION	7.256282874423142E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999930199450336	WITHOUT_CLASSIFICATION	6.980054966237229E-6	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999900440922102	WITHOUT_CLASSIFICATION	9.955907789813146E-6	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9998966896361805	WITHOUT_CLASSIFICATION	1.033103638194013E-4	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999671629834033	WITHOUT_CLASSIFICATION	3.283701659665898E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999978370361425	WITHOUT_CLASSIFICATION	2.162963857454579E-6	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999631946854953	WITHOUT_CLASSIFICATION	3.6805314504706794E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999833605906919	WITHOUT_CLASSIFICATION	1.6639409308152114E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9995780424767918	WITHOUT_CLASSIFICATION	4.2195752320811565E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.999923304186892	WITHOUT_CLASSIFICATION	7.669581310799453E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999992181926138	WITHOUT_CLASSIFICATION	7.818073861878508E-6	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9998092538394581	WITHOUT_CLASSIFICATION	1.9074616054199278E-4	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999865965479918	WITHOUT_CLASSIFICATION	1.3403452008103881E-5	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999256255890289	WITHOUT_CLASSIFICATION	7.437441097116952E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9998555223912113	WITHOUT_CLASSIFICATION	1.4447760878870926E-4	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999939849430464	WITHOUT_CLASSIFICATION	6.015056953665613E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998527867345051	WITHOUT_CLASSIFICATION	1.4721326549489545E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997041477039859	WITHOUT_CLASSIFICATION	2.958522960141549E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.999976759493003	WITHOUT_CLASSIFICATION	2.3240506996953732E-5	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999446944549585	WITHOUT_CLASSIFICATION	5.5305545041561404E-5	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999811961865217	WITHOUT_CLASSIFICATION	1.880381347835602E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999539560557538	WITHOUT_CLASSIFICATION	4.604394424624498E-5	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9998327903813065	WITHOUT_CLASSIFICATION	1.6720961869355584E-4	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999557349378819	WITHOUT_CLASSIFICATION	4.426506211807507E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999551730166215	WITHOUT_CLASSIFICATION	4.482698337851908E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999918570750482	WITHOUT_CLASSIFICATION	8.14292495178897E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999981031203407	WITHOUT_CLASSIFICATION	1.896879659448938E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9998788963498163	WITHOUT_CLASSIFICATION	1.2110365018373408E-4	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999980115040858	WITHOUT_CLASSIFICATION	1.988495914073647E-6	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999686124231699	WITHOUT_CLASSIFICATION	3.138757683005347E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.999822670853209	WITHOUT_CLASSIFICATION	1.7732914679090516E-4	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999083513246969	WITHOUT_CLASSIFICATION	9.164867530312513E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999961593136099	WITHOUT_CLASSIFICATION	3.840686390078688E-6	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999616945542832	WITHOUT_CLASSIFICATION	3.8305445716830774E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998788531824317	WITHOUT_CLASSIFICATION	1.2114681756826215E-4	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999977598767436	WITHOUT_CLASSIFICATION	2.2401232564314282E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9997041477039859	WITHOUT_CLASSIFICATION	2.958522960141549E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999807484167021	WITHOUT_CLASSIFICATION	1.9251583297797063E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999975299341257	WITHOUT_CLASSIFICATION	2.4700658743045697E-6	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.999980555687275	WITHOUT_CLASSIFICATION	1.9444312725025335E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999941882651647	WITHOUT_CLASSIFICATION	5.811734835255084E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999754399894104	WITHOUT_CLASSIFICATION	2.4560010589565176E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999941192914965	WITHOUT_CLASSIFICATION	5.880708503498855E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999941192914965	WITHOUT_CLASSIFICATION	5.880708503498855E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999948911606659	WITHOUT_CLASSIFICATION	5.108839334133676E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999941192914965	WITHOUT_CLASSIFICATION	5.880708503498855E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.999941192914965	WITHOUT_CLASSIFICATION	5.880708503498855E-5	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9998985342119693	WITHOUT_CLASSIFICATION	1.0146578803075844E-4	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9991941673001431	WITHOUT_CLASSIFICATION	8.058326998568798E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999967922336588	WITHOUT_CLASSIFICATION	3.207766341194266E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999975805645732	WITHOUT_CLASSIFICATION	2.4194354268073554E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999870471427433	WITHOUT_CLASSIFICATION	1.2952857256731995E-5	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999974663090925	WITHOUT_CLASSIFICATION	2.5336909075348748E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999612137940751	WITHOUT_CLASSIFICATION	3.878620592492613E-5	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999547828972412	WITHOUT_CLASSIFICATION	4.521710275894591E-5	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999129486854464	WITHOUT_CLASSIFICATION	8.705131455357725E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997226761914303	WITHOUT_CLASSIFICATION	2.7732380856970165E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999868188130714	WITHOUT_CLASSIFICATION	1.3181186928507507E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999045708348951	WITHOUT_CLASSIFICATION	9.542916510477703E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998496155649664	WITHOUT_CLASSIFICATION	1.5038443503345746E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999659657714751	WITHOUT_CLASSIFICATION	3.40342285248463E-5	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999973624105596	WITHOUT_CLASSIFICATION	2.637589440401873E-5	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9982820743586448	WITHOUT_CLASSIFICATION	0.0017179256413551729	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999125457898048	WITHOUT_CLASSIFICATION	8.745421019524057E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998039321523124	WITHOUT_CLASSIFICATION	1.9606784768750078E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999193523240011	WITHOUT_CLASSIFICATION	8.064767599891935E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999586306357786	WITHOUT_CLASSIFICATION	4.13693642213675E-5	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9998990791407568	WITHOUT_CLASSIFICATION	1.0092085924311464E-4	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999506975536984	WITHOUT_CLASSIFICATION	4.9302446301593647E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999125457898048	WITHOUT_CLASSIFICATION	8.745421019524057E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999401271058823	WITHOUT_CLASSIFICATION	5.9872894117638325E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999459277312075	WITHOUT_CLASSIFICATION	5.407226879249806E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985882403347	WITHOUT_CLASSIFICATION	1.4117596652804353E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969624699473	WITHOUT_CLASSIFICATION	3.0375300527251092E-6	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9998915657158135	WITHOUT_CLASSIFICATION	1.0843428418653994E-4	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999927463233872	WITHOUT_CLASSIFICATION	7.253676612853544E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9997187661055413	WITHOUT_CLASSIFICATION	2.8123389445867687E-4	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999275068842605	WITHOUT_CLASSIFICATION	7.249311573947416E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999026459664153	WITHOUT_CLASSIFICATION	9.735403358471848E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999603285805281	WITHOUT_CLASSIFICATION	3.967141947191913E-5	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9998844028525514	WITHOUT_CLASSIFICATION	1.1559714744855994E-4	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999951639994409	WITHOUT_CLASSIFICATION	4.8360005591602484E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999633139373096	WITHOUT_CLASSIFICATION	3.668606269031112E-5	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999874686661246	WITHOUT_CLASSIFICATION	1.2531333875481635E-5	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9998244740464887	WITHOUT_CLASSIFICATION	1.7552595351136264E-4	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999979176004097	WITHOUT_CLASSIFICATION	2.082399590279918E-6	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999690463971384	WITHOUT_CLASSIFICATION	3.095360286171003E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999543797601778	WITHOUT_CLASSIFICATION	4.562023982216565E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999979515013099	WITHOUT_CLASSIFICATION	2.048498690118423E-6	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999848043393802	WITHOUT_CLASSIFICATION	1.5195660619670864E-5	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999760039214265	WITHOUT_CLASSIFICATION	2.399607857356747E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999659498977598	WITHOUT_CLASSIFICATION	3.405010224011581E-5	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999875684998422	WITHOUT_CLASSIFICATION	1.2431500157759002E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999026459664153	WITHOUT_CLASSIFICATION	9.735403358471848E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999799539392167	WITHOUT_CLASSIFICATION	2.004606078342144E-5	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.999986805723118	WITHOUT_CLASSIFICATION	1.3194276882013593E-5	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999607878476089	WITHOUT_CLASSIFICATION	3.9212152390995225E-5	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999599813277796	WITHOUT_CLASSIFICATION	4.001867222041332E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920480258915	WITHOUT_CLASSIFICATION	7.951974108514675E-6	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.999885252924186	WITHOUT_CLASSIFICATION	1.1474707581397153E-4	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.999761179984941	WITHOUT_CLASSIFICATION	2.3882001505899704E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999848093062975	WITHOUT_CLASSIFICATION	1.5190693702383683E-5	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999211038161447	WITHOUT_CLASSIFICATION	7.889618385525365E-5	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9998268553816343	WITHOUT_CLASSIFICATION	1.731446183656854E-4	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999835039284222	WITHOUT_CLASSIFICATION	1.649607157778348E-5	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999901193390188	WITHOUT_CLASSIFICATION	9.880660981138342E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999359479203669	WITHOUT_CLASSIFICATION	6.40520796330911E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999977127653894	WITHOUT_CLASSIFICATION	2.2872346106126393E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999819804816389	WITHOUT_CLASSIFICATION	1.801951836116483E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999883523653891	WITHOUT_CLASSIFICATION	1.164763461085036E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999835039284222	WITHOUT_CLASSIFICATION	1.649607157778348E-5	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999998908730531	WITHOUT_CLASSIFICATION	1.091269468952401E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999748403645488	WITHOUT_CLASSIFICATION	2.5159635451251112E-5	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999866085332837	WITHOUT_CLASSIFICATION	1.3391466716287522E-5	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999897539084969	WITHOUT_CLASSIFICATION	1.0246091503062263E-5	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999847141597563	WITHOUT_CLASSIFICATION	1.5285840243632576E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999608920135288	WITHOUT_CLASSIFICATION	3.9107986471108735E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999976725581596	WITHOUT_CLASSIFICATION	2.3274418403779157E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971999683094	WITHOUT_CLASSIFICATION	2.8000316905132357E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914806747165	WITHOUT_CLASSIFICATION	8.519325283491116E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924946204727	WITHOUT_CLASSIFICATION	7.505379527329116E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994852581404	WITHOUT_CLASSIFICATION	5.147418596062342E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960623606412	WITHOUT_CLASSIFICATION	3.937639358856872E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999770494987991	WITHOUT_CLASSIFICATION	2.2950501200913887E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999770494987991	WITHOUT_CLASSIFICATION	2.2950501200913887E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999888449797848	WITHOUT_CLASSIFICATION	1.1155020215199512E-5	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999989145749129	WITHOUT_CLASSIFICATION	1.0854250871008173E-5	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999770094688273	WITHOUT_CLASSIFICATION	2.29905311727185E-5	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999698969373659	WITHOUT_CLASSIFICATION	3.010306263415051E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999992922936689	WITHOUT_CLASSIFICATION	7.077063311075348E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99996421204962	WITHOUT_CLASSIFICATION	3.5787950379948324E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999181056094726	WITHOUT_CLASSIFICATION	8.189439052740833E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742155422283	WITHOUT_CLASSIFICATION	2.5784457771692246E-5	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999924992675719	WITHOUT_CLASSIFICATION	7.500732427969039E-6	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912314397733	WITHOUT_CLASSIFICATION	8.76856022668661E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99996421204962	WITHOUT_CLASSIFICATION	3.5787950379948324E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999181056094726	WITHOUT_CLASSIFICATION	8.189439052740833E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742155422283	WITHOUT_CLASSIFICATION	2.5784457771692246E-5	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999613787472637	WITHOUT_CLASSIFICATION	3.8621252736441925E-5	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9998802768996403	WITHOUT_CLASSIFICATION	1.1972310035967933E-4	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999941727418784	WITHOUT_CLASSIFICATION	5.827258121522761E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999190701917771	WITHOUT_CLASSIFICATION	8.092980822285153E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999905524384692	WITHOUT_CLASSIFICATION	9.447561530769987E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999928313248787	WITHOUT_CLASSIFICATION	7.168675121183196E-6	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998404796906958	WITHOUT_CLASSIFICATION	1.5952030930419713E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999979845772678	WITHOUT_CLASSIFICATION	2.0154227321958692E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9992740468234755	WITHOUT_CLASSIFICATION	7.259531765244173E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999803246814727	WITHOUT_CLASSIFICATION	1.9675318527259308E-5	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999925940561226	WITHOUT_CLASSIFICATION	7.405943877388627E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9930885466156847	WITHOUT_CLASSIFICATION	0.006911453384315334	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998947725411302	WITHOUT_CLASSIFICATION	1.0522745886973893E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999994268853848	WITHOUT_CLASSIFICATION	5.731146151968967E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999933710884722	WITHOUT_CLASSIFICATION	6.628911527802226E-6	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999553457479596	WITHOUT_CLASSIFICATION	4.465425204026306E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9994419855993285	WITHOUT_CLASSIFICATION	5.580144006714451E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9988235483473841	WITHOUT_CLASSIFICATION	0.0011764516526158527	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999984614974911	WITHOUT_CLASSIFICATION	1.5385025089055378E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9961014377173097	WITHOUT_CLASSIFICATION	0.0038985622826901976	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999917447527827	WITHOUT_CLASSIFICATION	8.255247217290316E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999983915834423	WITHOUT_CLASSIFICATION	1.6084165576761357E-6	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999860551207898	WITHOUT_CLASSIFICATION	1.3944879210264721E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999809030295774	WITHOUT_CLASSIFICATION	1.9096970422496725E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999983704113211	WITHOUT_CLASSIFICATION	1.6295886788255313E-6	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999870339564532	WITHOUT_CLASSIFICATION	1.2966043546849565E-5	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998051773757011	WITHOUT_CLASSIFICATION	1.9482262429903831E-4	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999643924891964	WITHOUT_CLASSIFICATION	3.560751080350641E-5	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999845778218316	WITHOUT_CLASSIFICATION	1.5422178168383237E-5	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727025486658	WITHOUT_CLASSIFICATION	2.7297451334292456E-5	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999285028902417	WITHOUT_CLASSIFICATION	7.149710975828567E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999624022934157	WITHOUT_CLASSIFICATION	3.759770658419662E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999624022934157	WITHOUT_CLASSIFICATION	3.759770658419662E-5	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999926775754757	WITHOUT_CLASSIFICATION	7.322424524260931E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999988611444768	WITHOUT_CLASSIFICATION	1.1388555232139664E-6	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999837092504312	WITHOUT_CLASSIFICATION	1.6290749568797827E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993823416895742	WITHOUT_CLASSIFICATION	6.176583104258605E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999922615208391	WITHOUT_CLASSIFICATION	7.738479160877039E-6	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999886446993967	WITHOUT_CLASSIFICATION	1.135530060327886E-5	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9994334027013629	WITHOUT_CLASSIFICATION	5.665972986371255E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999621572207369	WITHOUT_CLASSIFICATION	3.7842779263170804E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999765262325268	WITHOUT_CLASSIFICATION	2.3473767473281552E-5	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915866072397	WITHOUT_CLASSIFICATION	8.413392760299272E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990323539875	WITHOUT_CLASSIFICATION	9.676460124984162E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990361526851	WITHOUT_CLASSIFICATION	9.638473149137166E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828310772256	WITHOUT_CLASSIFICATION	1.716892277431586E-5	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879647769485	WITHOUT_CLASSIFICATION	1.2035223051505159E-5	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880589809125	WITHOUT_CLASSIFICATION	1.1941019087544963E-5	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942566410561	WITHOUT_CLASSIFICATION	5.743358943854225E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941260857631	WITHOUT_CLASSIFICATION	5.8739142369654195E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897314426394	WITHOUT_CLASSIFICATION	1.0268557360597688E-5	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878877311231	WITHOUT_CLASSIFICATION	1.2112268876956707E-5	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949613673507	WITHOUT_CLASSIFICATION	5.038632649398759E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999861411389943	WITHOUT_CLASSIFICATION	1.385886100578705E-5	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9860284881857679	WITHOUT_CLASSIFICATION	0.013971511814232162	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999959148545944	WITHOUT_CLASSIFICATION	4.085145405593242E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999754012271989	WITHOUT_CLASSIFICATION	2.4598772801146407E-5	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999992211317656	WITHOUT_CLASSIFICATION	7.788682342330619E-7	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999795239424175	WITHOUT_CLASSIFICATION	2.0476057582438548E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999972814057603	WITHOUT_CLASSIFICATION	2.718594239598415E-6	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999958623975876	WITHOUT_CLASSIFICATION	4.137602412388547E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999959148545944	WITHOUT_CLASSIFICATION	4.085145405593242E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999959148545944	WITHOUT_CLASSIFICATION	4.085145405593242E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999933594498888	WITHOUT_CLASSIFICATION	6.640550111222497E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999780784092837	WITHOUT_CLASSIFICATION	2.1921590716365545E-5	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999691068249376	WITHOUT_CLASSIFICATION	3.089317506245797E-5	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.99999088605291	WITHOUT_CLASSIFICATION	9.11394709008699E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9961014377173097	WITHOUT_CLASSIFICATION	0.0038985622826901976	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999350943500365	WITHOUT_CLASSIFICATION	6.490564996359328E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999900855765333	WITHOUT_CLASSIFICATION	9.914423466547883E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999815486301243	WITHOUT_CLASSIFICATION	1.845136987563556E-5	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955477970489	WITHOUT_CLASSIFICATION	4.4522029510607896E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999973702899706	WITHOUT_CLASSIFICATION	2.629710029540719E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999084848228655	WITHOUT_CLASSIFICATION	9.151517713447722E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999863001029098	WITHOUT_CLASSIFICATION	1.369989709022954E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999863001029098	WITHOUT_CLASSIFICATION	1.369989709022954E-5	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999857707259551	WITHOUT_CLASSIFICATION	1.4229274044934495E-5	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999857707259551	WITHOUT_CLASSIFICATION	1.4229274044934495E-5	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941900933372	WITHOUT_CLASSIFICATION	5.809906662762773E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954310564725	WITHOUT_CLASSIFICATION	4.568943527502146E-5	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999556567121921	WITHOUT_CLASSIFICATION	4.434328780791571E-5	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749905890565	WITHOUT_CLASSIFICATION	2.500941094353488E-5	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999958561533349	WITHOUT_CLASSIFICATION	4.143846665204737E-6	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.999987158694786	WITHOUT_CLASSIFICATION	1.2841305213928753E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708293050205	WITHOUT_CLASSIFICATION	2.9170694979600483E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995921738663	WITHOUT_CLASSIFICATION	4.078261336995782E-5	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999967668115237	WITHOUT_CLASSIFICATION	3.2331884762203284E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999703820522601	WITHOUT_CLASSIFICATION	2.9617947739894933E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999175339575029	WITHOUT_CLASSIFICATION	8.246604249702148E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999931339703702	WITHOUT_CLASSIFICATION	6.8660296299050045E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999869736141929	WITHOUT_CLASSIFICATION	1.3026385807166012E-5	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999722717918449	WITHOUT_CLASSIFICATION	2.7728208155012354E-5	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.999905549250387	WITHOUT_CLASSIFICATION	9.445074961296636E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999784194416689	WITHOUT_CLASSIFICATION	2.158055833108429E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999784194416689	WITHOUT_CLASSIFICATION	2.158055833108429E-5	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999995775885204	WITHOUT_CLASSIFICATION	4.2241147953854995E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999818512663556	WITHOUT_CLASSIFICATION	1.814873364436609E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999995111110467	WITHOUT_CLASSIFICATION	4.888889533434674E-7	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993136133909014	WITHOUT_CLASSIFICATION	6.863866090987127E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982278021729	WITHOUT_CLASSIFICATION	1.772197827096461E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856426436151	WITHOUT_CLASSIFICATION	1.4357356384798547E-5	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999911176096011	WITHOUT_CLASSIFICATION	8.882390398813724E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942881578258	WITHOUT_CLASSIFICATION	5.7118421741571695E-6	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999995631130339	WITHOUT_CLASSIFICATION	4.368869661052941E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999996076063578	WITHOUT_CLASSIFICATION	3.9239364223408265E-7	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999993738015694	WITHOUT_CLASSIFICATION	6.261984305366764E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999955961722419	WITHOUT_CLASSIFICATION	4.403827758097194E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776184260278	WITHOUT_CLASSIFICATION	2.2381573972150954E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999669029412586	WITHOUT_CLASSIFICATION	3.309705874145812E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999908818594501	WITHOUT_CLASSIFICATION	9.118140549947165E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999908616064941	WITHOUT_CLASSIFICATION	9.138393505823437E-6	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999968003453623	WITHOUT_CLASSIFICATION	3.1996546376032295E-6	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999773351375542	WITHOUT_CLASSIFICATION	2.266486244583511E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999577206884165	WITHOUT_CLASSIFICATION	4.2279311583415054E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999950882141335	WITHOUT_CLASSIFICATION	4.911785866532123E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999999908167309	WITHOUT_CLASSIFICATION	9.18326910383074E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999997608168218	WITHOUT_CLASSIFICATION	2.3918317820506225E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999986730415512	WITHOUT_CLASSIFICATION	1.3269584487797322E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999835843124003	WITHOUT_CLASSIFICATION	1.6415687599632147E-5	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999945163902327	WITHOUT_CLASSIFICATION	5.483609767198769E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999599498994941	WITHOUT_CLASSIFICATION	4.005010050591048E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999702801698397	WITHOUT_CLASSIFICATION	2.9719830160365826E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9997212805517299	WITHOUT_CLASSIFICATION	2.7871944827009446E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999998649700639	WITHOUT_CLASSIFICATION	1.3502993610665852E-6	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996887630601147	WITHOUT_CLASSIFICATION	3.1123693988523984E-4	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.999999120205236	WITHOUT_CLASSIFICATION	8.797947640448272E-7	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9998444632497852	WITHOUT_CLASSIFICATION	1.5553675021477844E-4	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.998906689444119	WITHOUT_CLASSIFICATION	0.0010933105558810037	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999938947900421	WITHOUT_CLASSIFICATION	6.105209957908673E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9996931859802022	WITHOUT_CLASSIFICATION	3.0681401979780443E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999292606311461	WITHOUT_CLASSIFICATION	7.073936885387002E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999992687299843	WITHOUT_CLASSIFICATION	7.312700156937041E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999907294637999	WITHOUT_CLASSIFICATION	9.270536200041705E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999864540210306	WITHOUT_CLASSIFICATION	1.3545978969281759E-5	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999568960246152	WITHOUT_CLASSIFICATION	4.310397538482439E-5	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999919516036385	WITHOUT_CLASSIFICATION	8.048396361392944E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999945962102222	WITHOUT_CLASSIFICATION	5.403789777764611E-6	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999774178957174	WITHOUT_CLASSIFICATION	2.258210428261287E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999998383312476	WITHOUT_CLASSIFICATION	1.6166875239813705E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999357814871782	WITHOUT_CLASSIFICATION	6.421851282185098E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999833373546315	WITHOUT_CLASSIFICATION	1.6662645368435353E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999191643006793	WITHOUT_CLASSIFICATION	8.08356993207338E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999882002576542	WITHOUT_CLASSIFICATION	1.179974234580081E-4	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999932472749472	WITHOUT_CLASSIFICATION	6.752725052671613E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999400567956532	WITHOUT_CLASSIFICATION	5.994320434675511E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999208819461609	WITHOUT_CLASSIFICATION	7.911805383913119E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999971595503419	WITHOUT_CLASSIFICATION	2.8404496580990705E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999945616965144	WITHOUT_CLASSIFICATION	5.438303485582322E-6	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999310414894581	WITHOUT_CLASSIFICATION	6.895851054192845E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999909926867065	WITHOUT_CLASSIFICATION	9.007313293401025E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999666372790385	WITHOUT_CLASSIFICATION	3.336272096160636E-5	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.999997658005878	WITHOUT_CLASSIFICATION	2.3419941219563395E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999242113128131	WITHOUT_CLASSIFICATION	7.578868718692513E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999325236932213	WITHOUT_CLASSIFICATION	6.747630677870627E-5	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999486782289768	WITHOUT_CLASSIFICATION	5.1321771023260576E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999915744029149	WITHOUT_CLASSIFICATION	8.425597085084827E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999319593868108	WITHOUT_CLASSIFICATION	6.804061318920423E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999252207078471	WITHOUT_CLASSIFICATION	7.477929215287349E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999572921401166	WITHOUT_CLASSIFICATION	4.27078598833636E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999951207782399	WITHOUT_CLASSIFICATION	4.879221760096313E-6	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999088456231869	WITHOUT_CLASSIFICATION	9.115437681302225E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999971355776013	WITHOUT_CLASSIFICATION	2.864422398764143E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999915197236876	WITHOUT_CLASSIFICATION	8.480276312412395E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991984213569969	WITHOUT_CLASSIFICATION	8.0157864300311E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991984213569969	WITHOUT_CLASSIFICATION	8.0157864300311E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999780996711459	WITHOUT_CLASSIFICATION	2.1900328854041458E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999763112207289	WITHOUT_CLASSIFICATION	2.3688779271113534E-5	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999982370268864	WITHOUT_CLASSIFICATION	1.762973113622625E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998182207944557	WITHOUT_CLASSIFICATION	1.8177920554437964E-4	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999915308807494	WITHOUT_CLASSIFICATION	8.469119250526352E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999957958827291	WITHOUT_CLASSIFICATION	4.204117270807484E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999997166432231	WITHOUT_CLASSIFICATION	2.833567769684357E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.99999761254923	WITHOUT_CLASSIFICATION	2.387450769905617E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999421411418938	WITHOUT_CLASSIFICATION	5.785885810618449E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999489457132642	WITHOUT_CLASSIFICATION	5.105428673584073E-5	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999798013359691	WITHOUT_CLASSIFICATION	2.019866403089838E-5	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999956097411659	WITHOUT_CLASSIFICATION	4.390258834159273E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999486949664279	WITHOUT_CLASSIFICATION	5.130503357208532E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999715792163731	WITHOUT_CLASSIFICATION	2.8420783626879737E-5	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999470840679588	WITHOUT_CLASSIFICATION	5.291593204119639E-4	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999980349237798	WITHOUT_CLASSIFICATION	1.965076220173701E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999694328134319	WITHOUT_CLASSIFICATION	3.056718656811619E-5	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999910749680292	WITHOUT_CLASSIFICATION	8.925031970753378E-6	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999958817264895	WITHOUT_CLASSIFICATION	4.118273510515574E-6	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999847344358969	WITHOUT_CLASSIFICATION	1.5265564103184042E-5	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999573283681655	WITHOUT_CLASSIFICATION	4.267163183444588E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9997972791629766	WITHOUT_CLASSIFICATION	2.0272083702353093E-4	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999149358014966	WITHOUT_CLASSIFICATION	8.506419850331242E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999175209512389	WITHOUT_CLASSIFICATION	8.247904876119626E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999950899894572	WITHOUT_CLASSIFICATION	4.910010542821918E-6	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999557399335881	WITHOUT_CLASSIFICATION	4.426006641191662E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999725852470132	WITHOUT_CLASSIFICATION	2.7414752986856117E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998356570557689	WITHOUT_CLASSIFICATION	1.6434294423106044E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9995079405937018	WITHOUT_CLASSIFICATION	4.920594062982135E-4	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.99999256794712	WITHOUT_CLASSIFICATION	7.432052879974734E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999019489594296	WITHOUT_CLASSIFICATION	9.805104057033538E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999495586675694	WITHOUT_CLASSIFICATION	5.044133243062971E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998999986740951	WITHOUT_CLASSIFICATION	1.0000132590488592E-4	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999752837213158	WITHOUT_CLASSIFICATION	2.4716278684101385E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999843366413457	WITHOUT_CLASSIFICATION	1.566335865431014E-4	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.999843366413457	WITHOUT_CLASSIFICATION	1.566335865431014E-4	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9997764027768984	WITHOUT_CLASSIFICATION	2.2359722310160815E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998946839819537	WITHOUT_CLASSIFICATION	1.0531601804625135E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999963185710862	WITHOUT_CLASSIFICATION	3.681428913798772E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999970180341042	WITHOUT_CLASSIFICATION	2.9819658957864346E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999966799572132	WITHOUT_CLASSIFICATION	3.3200427867742724E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999775296866812	WITHOUT_CLASSIFICATION	2.2470313318849723E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9985933683774516	WITHOUT_CLASSIFICATION	0.0014066316225483755	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999993902341583	WITHOUT_CLASSIFICATION	6.097658417159783E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999947723813388	WITHOUT_CLASSIFICATION	5.227618661110908E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999710856004574	WITHOUT_CLASSIFICATION	2.8914399542556044E-5	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999561250367324	WITHOUT_CLASSIFICATION	4.387496326762715E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999938742183296	WITHOUT_CLASSIFICATION	6.125781670319229E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999986565598753	WITHOUT_CLASSIFICATION	1.3434401246969799E-5	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999953645136764	WITHOUT_CLASSIFICATION	4.63548632350175E-6	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9998510874634101	WITHOUT_CLASSIFICATION	1.4891253658982597E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999971496635093	WITHOUT_CLASSIFICATION	2.8503364907301717E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999971496635093	WITHOUT_CLASSIFICATION	2.8503364907301717E-6	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999848759849193	WITHOUT_CLASSIFICATION	1.5124015080835248E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999413319763079	WITHOUT_CLASSIFICATION	5.8668023692116636E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999967240053741	WITHOUT_CLASSIFICATION	3.2759946258589024E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992262484667	WITHOUT_CLASSIFICATION	7.737515334200426E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9988136227038196	WITHOUT_CLASSIFICATION	0.0011863772961803727	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999835686956126	WITHOUT_CLASSIFICATION	1.6431304387479312E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999947092943317	WITHOUT_CLASSIFICATION	5.2907056683402165E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999947092943317	WITHOUT_CLASSIFICATION	5.2907056683402165E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999672349967944	WITHOUT_CLASSIFICATION	3.2765003205540755E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999985184690822	WITHOUT_CLASSIFICATION	1.4815309178408872E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999969596171373	WITHOUT_CLASSIFICATION	3.040382862657726E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999988299584831	WITHOUT_CLASSIFICATION	1.1700415169161172E-6	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999954973384825	WITHOUT_CLASSIFICATION	4.50266151756907E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999189943558331	WITHOUT_CLASSIFICATION	8.100564416689146E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999955427731616	WITHOUT_CLASSIFICATION	4.45722683846662E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999564863844398	WITHOUT_CLASSIFICATION	4.351361556014106E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999926791203186	WITHOUT_CLASSIFICATION	7.3208796813501464E-6	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999998431531662	WITHOUT_CLASSIFICATION	1.568468337896135E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999941060619554	WITHOUT_CLASSIFICATION	5.893938044526426E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999477504373647	WITHOUT_CLASSIFICATION	5.224956263527726E-5	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999983629004507	WITHOUT_CLASSIFICATION	1.6370995492734624E-6	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9996397804268387	WITHOUT_CLASSIFICATION	3.6021957316137194E-4	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999809067492555	WITHOUT_CLASSIFICATION	1.9093250744513797E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999611091222699	WITHOUT_CLASSIFICATION	3.889087773005499E-5	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999891058059961	WITHOUT_CLASSIFICATION	1.089419400382656E-5	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999039727149021	WITHOUT_CLASSIFICATION	9.602728509787336E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999104013303819	WITHOUT_CLASSIFICATION	8.959866961800914E-5	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999892544896863	WITHOUT_CLASSIFICATION	1.074551031372751E-5	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999684405363517	WITHOUT_CLASSIFICATION	3.155946364833344E-5	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9997849505350995	WITHOUT_CLASSIFICATION	2.1504946490038225E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999835292084425	WITHOUT_CLASSIFICATION	1.6470791557564567E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999997238041912	WITHOUT_CLASSIFICATION	2.761958088137586E-6	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999989257511149	WITHOUT_CLASSIFICATION	1.074248885090504E-5	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999981879130011	WITHOUT_CLASSIFICATION	1.8120869988824201E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999979520654992	WITHOUT_CLASSIFICATION	2.0479345006649206E-6	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999999360540314	WITHOUT_CLASSIFICATION	6.394596859560729E-7	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999975805939009	WITHOUT_CLASSIFICATION	2.4194060992088015E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999975440826863	WITHOUT_CLASSIFICATION	2.4559173137292192E-6	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999897882749	WITHOUT_CLASSIFICATION	1.0211725099847562E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999009941147303	WITHOUT_CLASSIFICATION	9.900588526961532E-5	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999959583302332	WITHOUT_CLASSIFICATION	4.041669766799004E-6	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999544954251057	WITHOUT_CLASSIFICATION	4.550457489432926E-5	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999246654426694	WITHOUT_CLASSIFICATION	7.533455733059321E-5	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9997506461238868	WITHOUT_CLASSIFICATION	2.493538761132312E-4	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9998036535363563	WITHOUT_CLASSIFICATION	1.9634646364381742E-4	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999504989555771	WITHOUT_CLASSIFICATION	4.950104442296823E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999247848935108	WITHOUT_CLASSIFICATION	7.52151064891697E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999374278521639	WITHOUT_CLASSIFICATION	6.257214783609858E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999966087324603	WITHOUT_CLASSIFICATION	3.391267539816658E-6	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999642068089699	WITHOUT_CLASSIFICATION	3.579319103007525E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999121648440217	WITHOUT_CLASSIFICATION	8.783515597840108E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999871259481465	WITHOUT_CLASSIFICATION	1.2874051853369116E-5	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999986812111215	WITHOUT_CLASSIFICATION	1.3187888784683909E-6	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999648760030906	WITHOUT_CLASSIFICATION	3.512399690936733E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999247848935108	WITHOUT_CLASSIFICATION	7.52151064891697E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999374278521639	WITHOUT_CLASSIFICATION	6.257214783609858E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999943532219616	WITHOUT_CLASSIFICATION	5.6467780384292975E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999489788512649	WITHOUT_CLASSIFICATION	5.1021148735042916E-5	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999851719245467	WITHOUT_CLASSIFICATION	1.4828075453311194E-5	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999058502345687	WITHOUT_CLASSIFICATION	9.414976543131997E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9997476864147066	WITHOUT_CLASSIFICATION	2.5231358529342895E-4	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999968826028149	WITHOUT_CLASSIFICATION	3.1173971850612276E-6	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999551730260129	WITHOUT_CLASSIFICATION	4.482697398709693E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9998424368920239	WITHOUT_CLASSIFICATION	1.5756310797618333E-4	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999956374191266	WITHOUT_CLASSIFICATION	4.362580873367973E-6	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998779355273593	WITHOUT_CLASSIFICATION	1.2206447264068793E-4	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999995518481839	WITHOUT_CLASSIFICATION	4.4815181614007317E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9998779355273593	WITHOUT_CLASSIFICATION	1.2206447264068793E-4	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999939504647491	WITHOUT_CLASSIFICATION	6.049535250886536E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999782216819606	WITHOUT_CLASSIFICATION	2.1778318039385467E-5	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999828756696094	WITHOUT_CLASSIFICATION	1.7124330390559526E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940554034321	WITHOUT_CLASSIFICATION	5.94459656789865E-5	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999992698957731	WITHOUT_CLASSIFICATION	7.3010422689670606E-6	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9987792608402759	WITHOUT_CLASSIFICATION	0.0012207391597241467	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9987792608402759	WITHOUT_CLASSIFICATION	0.0012207391597241467	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999933614927659	WITHOUT_CLASSIFICATION	6.638507234154463E-6	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999958332868961	WITHOUT_CLASSIFICATION	4.166713103899379E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999788319100756	WITHOUT_CLASSIFICATION	2.116808992437572E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996986989986999	WITHOUT_CLASSIFICATION	3.0130100130015716E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999578310712443	WITHOUT_CLASSIFICATION	4.216892875573921E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996389294606	WITHOUT_CLASSIFICATION	3.610705393910025E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999583131473583	WITHOUT_CLASSIFICATION	4.1686852641639266E-5	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998629484820613	WITHOUT_CLASSIFICATION	1.3705151793879007E-4	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9996981039325378	WITHOUT_CLASSIFICATION	3.018960674621654E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9996411579047225	WITHOUT_CLASSIFICATION	3.588420952775508E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999196568007164	WITHOUT_CLASSIFICATION	8.034319928371858E-5	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999598695795762	WITHOUT_CLASSIFICATION	4.013042042391595E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9997479710160619	WITHOUT_CLASSIFICATION	2.520289839379828E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.999963020392266	WITHOUT_CLASSIFICATION	3.6979607734005325E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999907503832491	WITHOUT_CLASSIFICATION	9.249616750883734E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999989269015531	WITHOUT_CLASSIFICATION	1.073098446848044E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999961938102719	WITHOUT_CLASSIFICATION	3.8061897279700067E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999952054005308	WITHOUT_CLASSIFICATION	4.7945994691799304E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999900057015279	WITHOUT_CLASSIFICATION	9.994298472133896E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9985869164198999	WITHOUT_CLASSIFICATION	0.0014130835800999966	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999958908460653	WITHOUT_CLASSIFICATION	4.10915393469803E-6	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998055088358923	WITHOUT_CLASSIFICATION	1.9449116410776455E-4	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999800252550651	WITHOUT_CLASSIFICATION	1.9974744934867276E-5	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999819063404339	WITHOUT_CLASSIFICATION	1.8093659566115735E-5	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999870603701224	WITHOUT_CLASSIFICATION	1.293962987769167E-5	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9992338925994393	WITHOUT_CLASSIFICATION	7.661074005608008E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998796049345	WITHOUT_CLASSIFICATION	1.2039506544452735E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999849856225761	WITHOUT_CLASSIFICATION	1.501437742389672E-5	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.999964304305916	WITHOUT_CLASSIFICATION	3.5695694083962095E-5	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999719643628245	WITHOUT_CLASSIFICATION	2.803563717549887E-5	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998382950436315	WITHOUT_CLASSIFICATION	1.6170495636840993E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999283538620471	WITHOUT_CLASSIFICATION	7.164613795287526E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999583131473583	WITHOUT_CLASSIFICATION	4.1686852641639266E-5	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999621750613665	WITHOUT_CLASSIFICATION	3.782493863348501E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998592526744732	WITHOUT_CLASSIFICATION	1.407473255268393E-4	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9998465673787111	WITHOUT_CLASSIFICATION	1.534326212888407E-4	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.999872203499332	WITHOUT_CLASSIFICATION	1.2779650066804178E-4	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999821572624648	WITHOUT_CLASSIFICATION	1.78427375352327E-5	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999426772672577	WITHOUT_CLASSIFICATION	5.732273274226401E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996986989986999	WITHOUT_CLASSIFICATION	3.0130100130015716E-4	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9996986989986999	WITHOUT_CLASSIFICATION	3.0130100130015716E-4	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999562268430396	WITHOUT_CLASSIFICATION	4.377315696030536E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9998081303497679	WITHOUT_CLASSIFICATION	1.918696502321803E-4	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998503352776134	WITHOUT_CLASSIFICATION	1.496647223866191E-4	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999761016998269	WITHOUT_CLASSIFICATION	2.3898300173120735E-5	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999943274531162	WITHOUT_CLASSIFICATION	5.672546883758134E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999965193440054	WITHOUT_CLASSIFICATION	3.4806559946580402E-6	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999542067239687	WITHOUT_CLASSIFICATION	4.579327603128422E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999954369186135	WITHOUT_CLASSIFICATION	4.563081386521749E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998744362081754	WITHOUT_CLASSIFICATION	1.2556379182465066E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954160206983	WITHOUT_CLASSIFICATION	4.583979301701913E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999562326968356	WITHOUT_CLASSIFICATION	4.376730316429042E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987937199932302	WITHOUT_CLASSIFICATION	0.0012062800067698094	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9996707121668509	WITHOUT_CLASSIFICATION	3.292878331490718E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954160206983	WITHOUT_CLASSIFICATION	4.583979301701913E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999085965478158	WITHOUT_CLASSIFICATION	9.140345218420241E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999687803826345	WITHOUT_CLASSIFICATION	3.1219617365560055E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999530854969315	WITHOUT_CLASSIFICATION	4.691450306833984E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9986684388059013	WITHOUT_CLASSIFICATION	0.0013315611940986872	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987937199932302	WITHOUT_CLASSIFICATION	0.0012062800067698094	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999658996597672	WITHOUT_CLASSIFICATION	3.410034023283945E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999099796724868	WITHOUT_CLASSIFICATION	9.002032751312081E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999266198606721	WITHOUT_CLASSIFICATION	7.338013932796519E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999909090141449	WITHOUT_CLASSIFICATION	9.090985855162963E-6	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9980611273061888	WITHOUT_CLASSIFICATION	0.0019388726938111788	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999557111538261	WITHOUT_CLASSIFICATION	4.428884617384873E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999938567780133	WITHOUT_CLASSIFICATION	6.143221986748643E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997964806399661	WITHOUT_CLASSIFICATION	2.0351936003386732E-4	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999954359305229	WITHOUT_CLASSIFICATION	4.564069477189402E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999952498823997	WITHOUT_CLASSIFICATION	4.750117600246453E-6	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999960461645363	WITHOUT_CLASSIFICATION	3.953835463678308E-6	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999981362936166	WITHOUT_CLASSIFICATION	1.8637063834209777E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954160206983	WITHOUT_CLASSIFICATION	4.583979301701913E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999658996597672	WITHOUT_CLASSIFICATION	3.410034023283945E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999266198606721	WITHOUT_CLASSIFICATION	7.338013932796519E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999048273551545	WITHOUT_CLASSIFICATION	9.517264484544267E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999811155857337	WITHOUT_CLASSIFICATION	1.8884414266357208E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999826511718386	WITHOUT_CLASSIFICATION	1.734882816136561E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9987937199932302	WITHOUT_CLASSIFICATION	0.0012062800067698094	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999944824766417	WITHOUT_CLASSIFICATION	5.517523358262315E-6	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9997897517680183	WITHOUT_CLASSIFICATION	2.102482319815416E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997728469654575	WITHOUT_CLASSIFICATION	2.2715303454243622E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998202865686079	WITHOUT_CLASSIFICATION	1.797134313920721E-4	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997964806399661	WITHOUT_CLASSIFICATION	2.0351936003386732E-4	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999085965478158	WITHOUT_CLASSIFICATION	9.140345218420241E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9997813574208909	WITHOUT_CLASSIFICATION	2.186425791091641E-4	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999913182830874	WITHOUT_CLASSIFICATION	8.681716912579884E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999304784933399	WITHOUT_CLASSIFICATION	6.952150666006114E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999868984988955	WITHOUT_CLASSIFICATION	1.3101501104450024E-5	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998731109912935	WITHOUT_CLASSIFICATION	1.2688900870656171E-4	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999257246331399	WITHOUT_CLASSIFICATION	7.42753668600361E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9998473114161168	WITHOUT_CLASSIFICATION	1.5268858388315285E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999940554034321	WITHOUT_CLASSIFICATION	5.94459656789865E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975293255327	WITHOUT_CLASSIFICATION	2.470674467344458E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999940552412101	WITHOUT_CLASSIFICATION	5.944758789977886E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999891678904489	WITHOUT_CLASSIFICATION	1.0832109551099704E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999625202625788	WITHOUT_CLASSIFICATION	3.747973742119803E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998797854901431	WITHOUT_CLASSIFICATION	1.2021450985688864E-4	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999979627775024	WITHOUT_CLASSIFICATION	2.0372224976623013E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999604310791934	WITHOUT_CLASSIFICATION	3.956892080656179E-5	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999984066942602	WITHOUT_CLASSIFICATION	1.5933057398007677E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9998202865686079	WITHOUT_CLASSIFICATION	1.797134313920721E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999235428006149	WITHOUT_CLASSIFICATION	7.645719938505026E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9998154655051652	WITHOUT_CLASSIFICATION	1.8453449483470994E-4	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9994980744858842	WITHOUT_CLASSIFICATION	5.019255141157204E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9996917826950181	WITHOUT_CLASSIFICATION	3.0821730498190817E-4	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999182276369339	WITHOUT_CLASSIFICATION	8.177236306599967E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999958760422613	WITHOUT_CLASSIFICATION	4.1239577387596925E-6	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999789367565597	WITHOUT_CLASSIFICATION	2.1063243440384264E-5	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999116276192599	WITHOUT_CLASSIFICATION	8.837238074011633E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999963208214019	WITHOUT_CLASSIFICATION	3.679178598071328E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999978043535019	WITHOUT_CLASSIFICATION	2.1956464979841026E-6	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999619755397198	WITHOUT_CLASSIFICATION	3.8024460280255174E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998984078713484	WITHOUT_CLASSIFICATION	1.0159212865155032E-4	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999905069640389	WITHOUT_CLASSIFICATION	9.493035960992287E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9994892068437878	WITHOUT_CLASSIFICATION	5.107931562121716E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999979457454672	WITHOUT_CLASSIFICATION	2.0542545328249527E-6	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999992235469375	WITHOUT_CLASSIFICATION	7.764530625955732E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999985192797379	WITHOUT_CLASSIFICATION	1.480720262043548E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.99999596403141	WITHOUT_CLASSIFICATION	4.035968589947869E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999998673153312	WITHOUT_CLASSIFICATION	1.3268466878717396E-6	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999753015687637	WITHOUT_CLASSIFICATION	2.4698431236422395E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9998130422814114	WITHOUT_CLASSIFICATION	1.8695771858852982E-4	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999959809243385	WITHOUT_CLASSIFICATION	4.019075661456518E-6	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999930868457799	WITHOUT_CLASSIFICATION	6.913154220113607E-6	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999995228895506	WITHOUT_CLASSIFICATION	4.771104492941635E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999961042397378	WITHOUT_CLASSIFICATION	3.895760262106722E-6	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9997966757843695	WITHOUT_CLASSIFICATION	2.0332421563043975E-4	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999987151063214	WITHOUT_CLASSIFICATION	1.2848936785971513E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999950757977252	WITHOUT_CLASSIFICATION	4.9242022748549135E-6	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999984926877986	WITHOUT_CLASSIFICATION	1.5073122013964626E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9999437060017776	WITHOUT_CLASSIFICATION	5.629399822250332E-5	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999380392119231	WITHOUT_CLASSIFICATION	6.196078807690291E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999676278698086	WITHOUT_CLASSIFICATION	3.237213019139966E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999978709746821	WITHOUT_CLASSIFICATION	2.1290253180076674E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999857658299155	WITHOUT_CLASSIFICATION	1.4234170084572799E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999242834774825	WITHOUT_CLASSIFICATION	7.571652251742517E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999752979770242	WITHOUT_CLASSIFICATION	2.470202297583625E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999817116566306	WITHOUT_CLASSIFICATION	1.828834336933803E-5	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999995439401953	WITHOUT_CLASSIFICATION	4.560598046442395E-7	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999752979770242	WITHOUT_CLASSIFICATION	2.470202297583625E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999242834774825	WITHOUT_CLASSIFICATION	7.571652251742517E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999817116566306	WITHOUT_CLASSIFICATION	1.828834336933803E-5	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999729078594518	WITHOUT_CLASSIFICATION	2.7092140548188208E-5	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999971934214905	WITHOUT_CLASSIFICATION	2.8065785095264753E-6	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999986851889932	WITHOUT_CLASSIFICATION	1.314811006807991E-5	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999517678355369	WITHOUT_CLASSIFICATION	4.823216446312335E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999993820634611	WITHOUT_CLASSIFICATION	6.179365389844483E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998979545597995	WITHOUT_CLASSIFICATION	1.020454402005897E-4	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998428953119827	WITHOUT_CLASSIFICATION	1.5710468801724285E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9997767577027795	WITHOUT_CLASSIFICATION	2.2324229722051224E-4	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999892876642746	WITHOUT_CLASSIFICATION	1.0712335725403069E-4	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999921499543071	WITHOUT_CLASSIFICATION	7.850045692979896E-6	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999535286974411	WITHOUT_CLASSIFICATION	4.647130255889296E-5	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999907559111386	WITHOUT_CLASSIFICATION	9.244088861418186E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999968747535701	WITHOUT_CLASSIFICATION	3.1252464300089187E-6	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9997904572781587	WITHOUT_CLASSIFICATION	2.095427218413226E-4	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999986265618461	WITHOUT_CLASSIFICATION	1.373438153883974E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999973890044432	WITHOUT_CLASSIFICATION	2.6109955567419056E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999922213323175	WITHOUT_CLASSIFICATION	7.778667682601633E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999976602039539	WITHOUT_CLASSIFICATION	2.339796046107837E-6	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999993172456375	WITHOUT_CLASSIFICATION	6.827543624666498E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999996672983661	WITHOUT_CLASSIFICATION	3.327016339326291E-7	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999973474124408	WITHOUT_CLASSIFICATION	2.652587559220667E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999996920471819	WITHOUT_CLASSIFICATION	3.079528181676689E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9998953386939515	WITHOUT_CLASSIFICATION	1.0466130604845182E-4	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999976500556353	WITHOUT_CLASSIFICATION	2.3499443647262504E-6	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998169786385	WITHOUT_CLASSIFICATION	1.830213615026962E-7	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999998169786385	WITHOUT_CLASSIFICATION	1.830213615026962E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999994513175978	WITHOUT_CLASSIFICATION	5.486824020936827E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999994513175978	WITHOUT_CLASSIFICATION	5.486824020936827E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999891957990298	WITHOUT_CLASSIFICATION	1.0804200970123464E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999922213323175	WITHOUT_CLASSIFICATION	7.778667682601633E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999983642687759	WITHOUT_CLASSIFICATION	1.6357312241748209E-6	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999965207975485	WITHOUT_CLASSIFICATION	3.47920245143679E-6	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996895449426371	WITHOUT_CLASSIFICATION	3.104550573629264E-4	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996895449426371	WITHOUT_CLASSIFICATION	3.104550573629264E-4	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999978382761869	WITHOUT_CLASSIFICATION	2.1617238131040304E-5	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999947428495275	WITHOUT_CLASSIFICATION	5.2571504725177846E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999738531938284	WITHOUT_CLASSIFICATION	2.614680617159914E-5	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999541888416905	WITHOUT_CLASSIFICATION	4.5811158309491356E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999807329533513	WITHOUT_CLASSIFICATION	1.926704664872884E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999394042914	WITHOUT_CLASSIFICATION	6.059570858339104E-8	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998273751068804	WITHOUT_CLASSIFICATION	1.7262489311966855E-4	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999703791748408	WITHOUT_CLASSIFICATION	2.9620825159229673E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9998631337945344	WITHOUT_CLASSIFICATION	1.3686620546564398E-4	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999855865741988	WITHOUT_CLASSIFICATION	1.4413425801237274E-5	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999641003255292	WITHOUT_CLASSIFICATION	3.5899674470731486E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.999761575143659	WITHOUT_CLASSIFICATION	2.3842485634100849E-4	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999587499152064	WITHOUT_CLASSIFICATION	4.125008479356291E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9998292057986864	WITHOUT_CLASSIFICATION	1.7079420131362933E-4	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999937054204958	WITHOUT_CLASSIFICATION	6.294579504188455E-6	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999990243911004	WITHOUT_CLASSIFICATION	9.756088995169766E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761854277366	WITHOUT_CLASSIFICATION	2.381457226336166E-5	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999944157204455	WITHOUT_CLASSIFICATION	5.584279554552293E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999975930104988	WITHOUT_CLASSIFICATION	2.4069895010966756E-6	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999997970790206	WITHOUT_CLASSIFICATION	2.0292097925919896E-7	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999962359161948	WITHOUT_CLASSIFICATION	3.7640838050682367E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999945880563259	WITHOUT_CLASSIFICATION	5.4119436741058804E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999897139825811	WITHOUT_CLASSIFICATION	1.0286017419053548E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999995560208106	WITHOUT_CLASSIFICATION	4.4397918939748176E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9993823416895742	WITHOUT_CLASSIFICATION	6.176583104258605E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999997598609487	WITHOUT_CLASSIFICATION	2.4013905133930676E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998984078713484	WITHOUT_CLASSIFICATION	1.0159212865155032E-4	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999596402371667	WITHOUT_CLASSIFICATION	4.035976283333495E-5	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999955898777112	WITHOUT_CLASSIFICATION	4.410122288792885E-6	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999298599323199	WITHOUT_CLASSIFICATION	7.014006768014571E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641276087718	WITHOUT_CLASSIFICATION	3.5872391228146225E-5	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9997928877352761	WITHOUT_CLASSIFICATION	2.0711226472390265E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9997928877352761	WITHOUT_CLASSIFICATION	2.0711226472390265E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999955723987145	WITHOUT_CLASSIFICATION	4.4276012854737736E-6	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999521478728649	WITHOUT_CLASSIFICATION	4.785212713505438E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999819206076005	WITHOUT_CLASSIFICATION	1.8079392399499505E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999819206076005	WITHOUT_CLASSIFICATION	1.8079392399499505E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999980716361053	WITHOUT_CLASSIFICATION	1.92836389469229E-6	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999625275111133	WITHOUT_CLASSIFICATION	3.747248888668324E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999162910467421	WITHOUT_CLASSIFICATION	8.370895325801527E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999032102242983	WITHOUT_CLASSIFICATION	9.678977570169152E-5	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999113923679462	WITHOUT_CLASSIFICATION	8.860763205380408E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999449495480317	WITHOUT_CLASSIFICATION	5.505045196822761E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999756732617361	WITHOUT_CLASSIFICATION	2.4326738263802373E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999967053769492	WITHOUT_CLASSIFICATION	3.294623050868023E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999967053769492	WITHOUT_CLASSIFICATION	3.294623050868023E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999987918264438	WITHOUT_CLASSIFICATION	1.2081735562185522E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999240182188842	WITHOUT_CLASSIFICATION	7.598178111576077E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999240182188842	WITHOUT_CLASSIFICATION	7.598178111576077E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999967602982627	WITHOUT_CLASSIFICATION	3.2397017374176587E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999350032352978	WITHOUT_CLASSIFICATION	6.499676470216613E-5	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9971416452930779	WITHOUT_CLASSIFICATION	0.0028583547069220387	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999769023077715	WITHOUT_CLASSIFICATION	2.309769222852531E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999868357750933	WITHOUT_CLASSIFICATION	1.3164224906716177E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999924006345846	WITHOUT_CLASSIFICATION	7.599365415438943E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999983515270933	WITHOUT_CLASSIFICATION	1.648472906756648E-6	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999601885898689	WITHOUT_CLASSIFICATION	3.98114101310402E-5	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999585336663209	WITHOUT_CLASSIFICATION	4.146633367909095E-5	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999413312107825	WITHOUT_CLASSIFICATION	5.866878921742095E-5	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998689977957	WITHOUT_CLASSIFICATION	1.3100220436753379E-7	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999974746469309	WITHOUT_CLASSIFICATION	2.525353069054678E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999136007440232	WITHOUT_CLASSIFICATION	8.639925597672801E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999136007440232	WITHOUT_CLASSIFICATION	8.639925597672801E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999136007440232	WITHOUT_CLASSIFICATION	8.639925597672801E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999136007440232	WITHOUT_CLASSIFICATION	8.639925597672801E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999986186731211	WITHOUT_CLASSIFICATION	1.3813268788945352E-5	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999479770007078	WITHOUT_CLASSIFICATION	5.2022999292187414E-5	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9998923010164004	WITHOUT_CLASSIFICATION	1.0769898359974986E-4	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9997238489149427	WITHOUT_CLASSIFICATION	2.761510850573338E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999648494891553	WITHOUT_CLASSIFICATION	3.5150510844675176E-5	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999800639614367	WITHOUT_CLASSIFICATION	1.9936038563381655E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999079993341876	WITHOUT_CLASSIFICATION	9.200066581237514E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9993237096696497	WITHOUT_CLASSIFICATION	6.762903303504326E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999982752979283	WITHOUT_CLASSIFICATION	1.7247020717101657E-6	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999992884016623	WITHOUT_CLASSIFICATION	7.115983377047634E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999964082119676	WITHOUT_CLASSIFICATION	3.5917880325086465E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996561710603722	WITHOUT_CLASSIFICATION	3.438289396277564E-4	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999955970417889	WITHOUT_CLASSIFICATION	4.402958211084009E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999973124948172	WITHOUT_CLASSIFICATION	2.687505182805152E-6	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999943757296937	WITHOUT_CLASSIFICATION	5.624270306247926E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996561710603722	WITHOUT_CLASSIFICATION	3.438289396277564E-4	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999930715325853	WITHOUT_CLASSIFICATION	6.928467414656372E-6	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999888327292126	WITHOUT_CLASSIFICATION	1.1167270787351602E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999768095973511	WITHOUT_CLASSIFICATION	2.319040264886626E-5	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999951042854964	WITHOUT_CLASSIFICATION	4.895714503614238E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999894084254388	WITHOUT_CLASSIFICATION	1.0591574561102286E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999418876473447	WITHOUT_CLASSIFICATION	5.811235265543978E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999839582411897	WITHOUT_CLASSIFICATION	1.604175881033259E-5	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999461546198116	WITHOUT_CLASSIFICATION	5.384538018832836E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925834785383	WITHOUT_CLASSIFICATION	7.416521461728936E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999954685046867	WITHOUT_CLASSIFICATION	4.531495313288565E-6	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898975275101	WITHOUT_CLASSIFICATION	1.0102472489924846E-5	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999930434638752	WITHOUT_CLASSIFICATION	6.956536124726821E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999891852772792	WITHOUT_CLASSIFICATION	1.0814722720792964E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999762341764614	WITHOUT_CLASSIFICATION	2.376582353853859E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998525134001	WITHOUT_CLASSIFICATION	1.4748659989782152E-6	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9999950679411618	WITHOUT_CLASSIFICATION	4.932058838277277E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999976178163101	WITHOUT_CLASSIFICATION	2.382183689863493E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999889062838084	WITHOUT_CLASSIFICATION	1.1093716191585208E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999707856816253	WITHOUT_CLASSIFICATION	2.921431837458188E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999889062838084	WITHOUT_CLASSIFICATION	1.1093716191585208E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999863212604403	WITHOUT_CLASSIFICATION	1.3678739559626062E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999996157712667	WITHOUT_CLASSIFICATION	3.8422873329942005E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999903989716558	WITHOUT_CLASSIFICATION	9.60102834421934E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9995309104877516	WITHOUT_CLASSIFICATION	4.69089512248435E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999976178163101	WITHOUT_CLASSIFICATION	2.382183689863493E-6	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999707856816253	WITHOUT_CLASSIFICATION	2.921431837458188E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999863212604403	WITHOUT_CLASSIFICATION	1.3678739559626062E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999994871523967	WITHOUT_CLASSIFICATION	5.128476032948933E-6	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999416290513936	WITHOUT_CLASSIFICATION	5.8370948606435676E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.999862422210788	WITHOUT_CLASSIFICATION	1.375777892120084E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.999943142518616	WITHOUT_CLASSIFICATION	5.685748138393041E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999998630283803	WITHOUT_CLASSIFICATION	1.3697161970470753E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999932364765874	WITHOUT_CLASSIFICATION	6.763523412525287E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761854277366	WITHOUT_CLASSIFICATION	2.381457226336166E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999996157712667	WITHOUT_CLASSIFICATION	3.8422873329942005E-6	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999996268984835	WITHOUT_CLASSIFICATION	3.7310151644339503E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999953957973838	WITHOUT_CLASSIFICATION	4.6042026162072316E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999947619827082	WITHOUT_CLASSIFICATION	5.238017291809015E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761854277366	WITHOUT_CLASSIFICATION	2.381457226336166E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999848086810466	WITHOUT_CLASSIFICATION	1.5191318953385563E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761854277366	WITHOUT_CLASSIFICATION	2.381457226336166E-5	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999972147573883	WITHOUT_CLASSIFICATION	2.7852426116624337E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999880036098574	WITHOUT_CLASSIFICATION	1.1996390142594197E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9994449680547758	WITHOUT_CLASSIFICATION	5.550319452241584E-4	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999824601358832	WITHOUT_CLASSIFICATION	1.753986411685392E-5	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985656351514	WITHOUT_CLASSIFICATION	1.4343648486311265E-6	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999919233329388	WITHOUT_CLASSIFICATION	8.076667061109878E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999976016586184	WITHOUT_CLASSIFICATION	2.3983413816793565E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998149229026302	WITHOUT_CLASSIFICATION	1.8507709736983915E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998493675176938	WITHOUT_CLASSIFICATION	1.5063248230615372E-4	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.999284886540594	WITHOUT_CLASSIFICATION	7.151134594059054E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9991984213569969	WITHOUT_CLASSIFICATION	8.0157864300311E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999995553556321	WITHOUT_CLASSIFICATION	4.446443679611321E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9971416452930779	WITHOUT_CLASSIFICATION	0.0028583547069220387	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9988452069291724	WITHOUT_CLASSIFICATION	0.0011547930708276455	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999645985948942	WITHOUT_CLASSIFICATION	3.5401405105854246E-5	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999706969359375	WITHOUT_CLASSIFICATION	2.9303064062453557E-5	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.999583278744941	WITHOUT_CLASSIFICATION	4.167212550590206E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999912917625904	WITHOUT_CLASSIFICATION	8.708237409571577E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999966608992681	WITHOUT_CLASSIFICATION	3.3391007319108253E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999972128282355	WITHOUT_CLASSIFICATION	2.7871717645798866E-6	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999457755644159	WITHOUT_CLASSIFICATION	5.422443558419373E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999971334147294	WITHOUT_CLASSIFICATION	2.8665852706118483E-6	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999878349224925	WITHOUT_CLASSIFICATION	1.2165077507394555E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9971416452930779	WITHOUT_CLASSIFICATION	0.0028583547069220387	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999938888512173	WITHOUT_CLASSIFICATION	6.111148782690675E-5	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999883189702749	WITHOUT_CLASSIFICATION	1.1681029725102252E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999157784116971	WITHOUT_CLASSIFICATION	8.422158830295304E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998972362493981	WITHOUT_CLASSIFICATION	1.0276375060186267E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9995330395604809	WITHOUT_CLASSIFICATION	4.669604395190996E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999725786692542	WITHOUT_CLASSIFICATION	2.7421330745776416E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999817334259639	WITHOUT_CLASSIFICATION	1.8266574036147603E-5	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999222774878813	WITHOUT_CLASSIFICATION	7.772251211865321E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999709337053256	WITHOUT_CLASSIFICATION	2.9066294674386187E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999991406903061	WITHOUT_CLASSIFICATION	8.593096939029597E-6	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9973226823462934	WITHOUT_CLASSIFICATION	0.002677317653706608	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999981230165681	WITHOUT_CLASSIFICATION	1.8769834319062055E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999868695026185	WITHOUT_CLASSIFICATION	1.3130497381402257E-5	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9996491230471851	WITHOUT_CLASSIFICATION	3.5087695281481323E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999899640146022	WITHOUT_CLASSIFICATION	1.0035985397784701E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999958236689485	WITHOUT_CLASSIFICATION	4.176331051582076E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9974512097376916	WITHOUT_CLASSIFICATION	0.002548790262308318	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999951812418514	WITHOUT_CLASSIFICATION	4.818758148625849E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999837291049479	WITHOUT_CLASSIFICATION	1.6270895052119638E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998763270085228	WITHOUT_CLASSIFICATION	1.2367299147730286E-4	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9998763270085228	WITHOUT_CLASSIFICATION	1.2367299147730286E-4	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999986770737622	WITHOUT_CLASSIFICATION	1.3229262376669527E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998149229026302	WITHOUT_CLASSIFICATION	1.8507709736983915E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999922500914261	WITHOUT_CLASSIFICATION	7.749908573938106E-6	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999980231173273	WITHOUT_CLASSIFICATION	1.976882672715617E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999967064936278	WITHOUT_CLASSIFICATION	3.293506372150708E-6	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999971275664304	WITHOUT_CLASSIFICATION	2.872433569603334E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998775792213331	WITHOUT_CLASSIFICATION	1.2242077866691668E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.998651244996691	WITHOUT_CLASSIFICATION	0.0013487550033090437	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999998786483485	WITHOUT_CLASSIFICATION	1.2135165150874447E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999706378069759	WITHOUT_CLASSIFICATION	2.9362193023975792E-5	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999985197578853	WITHOUT_CLASSIFICATION	1.4802421147052997E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999860168689928	WITHOUT_CLASSIFICATION	1.3983131007192431E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999322820441144	WITHOUT_CLASSIFICATION	6.771795588556748E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999870286626932	WITHOUT_CLASSIFICATION	1.2971337306873537E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999665297427336	WITHOUT_CLASSIFICATION	3.347025726635193E-5	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999998965177155	WITHOUT_CLASSIFICATION	1.034822845007066E-6	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999702786319687	WITHOUT_CLASSIFICATION	2.9721368031204073E-5	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999948111443393	WITHOUT_CLASSIFICATION	5.188855660673283E-6	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999972205011167	WITHOUT_CLASSIFICATION	2.7794988833487236E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999998577950416	WITHOUT_CLASSIFICATION	1.4220495839189506E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999943592836242	WITHOUT_CLASSIFICATION	5.640716375811708E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999987529305417	WITHOUT_CLASSIFICATION	1.2470694583011278E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999903560034226	WITHOUT_CLASSIFICATION	9.643996577472454E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999996576409475	WITHOUT_CLASSIFICATION	3.4235905250093614E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9974512097376916	WITHOUT_CLASSIFICATION	0.002548790262308318	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999971284196258	WITHOUT_CLASSIFICATION	2.8715803741461923E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999283295824481	WITHOUT_CLASSIFICATION	7.16704175518502E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9998965844198202	WITHOUT_CLASSIFICATION	1.0341558017982816E-4	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999809813792684	WITHOUT_CLASSIFICATION	1.9018620731714188E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999900274706571	WITHOUT_CLASSIFICATION	9.972529342920813E-6	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999731505083151	WITHOUT_CLASSIFICATION	2.6849491684832423E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997986295688129	WITHOUT_CLASSIFICATION	2.0137043118710255E-4	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999976217635764	WITHOUT_CLASSIFICATION	2.3782364235922497E-5	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999931944967969	WITHOUT_CLASSIFICATION	6.80550320312974E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999802986039765	WITHOUT_CLASSIFICATION	1.970139602349662E-5	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999907632013247	WITHOUT_CLASSIFICATION	9.236798675305409E-6	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999925872941939	WITHOUT_CLASSIFICATION	7.412705806037792E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999666946909825	WITHOUT_CLASSIFICATION	3.3305309017456427E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999800644708301	WITHOUT_CLASSIFICATION	1.9935529169855583E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999997682317309	WITHOUT_CLASSIFICATION	2.31768269106415E-6	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.999997682317309	WITHOUT_CLASSIFICATION	2.31768269106415E-6	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999818348758672	WITHOUT_CLASSIFICATION	1.8165124132719714E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999218919364895	WITHOUT_CLASSIFICATION	7.810806351057335E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996895576695154	WITHOUT_CLASSIFICATION	3.104423304846602E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996895576695154	WITHOUT_CLASSIFICATION	3.104423304846602E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999787737588159	WITHOUT_CLASSIFICATION	2.1226241184063047E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999045708348951	WITHOUT_CLASSIFICATION	9.542916510477703E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999926290388816	WITHOUT_CLASSIFICATION	7.370961118450348E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999895270924459	WITHOUT_CLASSIFICATION	1.0472907553947015E-5	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999652822124373	WITHOUT_CLASSIFICATION	3.4717787562739646E-5	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999307152484381	WITHOUT_CLASSIFICATION	6.928475156194524E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999953955226919	WITHOUT_CLASSIFICATION	4.604477308101703E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999953955226919	WITHOUT_CLASSIFICATION	4.604477308101703E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999695114265957	WITHOUT_CLASSIFICATION	3.0488573404344958E-5	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999839505646091	WITHOUT_CLASSIFICATION	1.6049435390946022E-5	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9997863569673141	WITHOUT_CLASSIFICATION	2.1364303268583425E-4	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999814921907585	WITHOUT_CLASSIFICATION	1.8507809241424164E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999814921907585	WITHOUT_CLASSIFICATION	1.8507809241424164E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.999945961677723	WITHOUT_CLASSIFICATION	5.403832227695428E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999787060037246	WITHOUT_CLASSIFICATION	2.1293996275306845E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999323903231	WITHOUT_CLASSIFICATION	6.76096769045716E-7	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999558989222368	WITHOUT_CLASSIFICATION	4.410107776319483E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999809488557513	WITHOUT_CLASSIFICATION	1.9051144248720276E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999896506773701	WITHOUT_CLASSIFICATION	1.0349322629763219E-5	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999698954684697	WITHOUT_CLASSIFICATION	3.0104531530274217E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999820392480365	WITHOUT_CLASSIFICATION	1.7960751963568694E-5	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999908156183038	WITHOUT_CLASSIFICATION	9.184381696137657E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9996893906720065	WITHOUT_CLASSIFICATION	3.1060932799360666E-4	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999368750553512	WITHOUT_CLASSIFICATION	6.312494464877519E-5	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999625813206877	WITHOUT_CLASSIFICATION	3.7418679312240655E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999519059737786	WITHOUT_CLASSIFICATION	4.809402622153101E-5	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999992494426142	WITHOUT_CLASSIFICATION	7.505573858224358E-7	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999556859844341	WITHOUT_CLASSIFICATION	4.431401556583403E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9990632905707515	WITHOUT_CLASSIFICATION	9.36709429248514E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999830885499398	WITHOUT_CLASSIFICATION	1.691145006026437E-5	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999599571917461	WITHOUT_CLASSIFICATION	4.0042808253859106E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999990211592058	WITHOUT_CLASSIFICATION	9.788407942183067E-7	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999941888801939	WITHOUT_CLASSIFICATION	5.811119806138704E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999977220460496	WITHOUT_CLASSIFICATION	2.2779539502635476E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999411404903178	WITHOUT_CLASSIFICATION	5.885950968216199E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998485839776172	WITHOUT_CLASSIFICATION	1.5141602238270588E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999652985618812	WITHOUT_CLASSIFICATION	3.470143811869884E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.999013639869668	WITHOUT_CLASSIFICATION	9.863601303320027E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999785175058462	WITHOUT_CLASSIFICATION	2.1482494153889274E-5	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999898114406937	WITHOUT_CLASSIFICATION	1.018855930640512E-5	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9996797145016385	WITHOUT_CLASSIFICATION	3.202854983614895E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999981930949465	WITHOUT_CLASSIFICATION	1.806905053394852E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999933710884722	WITHOUT_CLASSIFICATION	6.628911527802226E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999983915834423	WITHOUT_CLASSIFICATION	1.6084165576761357E-6	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999980364538544	WITHOUT_CLASSIFICATION	1.963546145600608E-6	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999889904572191	WITHOUT_CLASSIFICATION	1.1009542780845418E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999220064545911	WITHOUT_CLASSIFICATION	7.799354540891085E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999890697580297	WITHOUT_CLASSIFICATION	1.09302419703392E-5	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998859323111832	WITHOUT_CLASSIFICATION	1.1406768881684708E-4	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999085316071046	WITHOUT_CLASSIFICATION	9.146839289549114E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999942921640533	WITHOUT_CLASSIFICATION	5.707835946658798E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999988437453002	WITHOUT_CLASSIFICATION	1.1562546997909684E-5	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999981430808685	WITHOUT_CLASSIFICATION	1.8569191313746486E-6	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999950731440778	WITHOUT_CLASSIFICATION	4.926855922247044E-6	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9998560516064143	WITHOUT_CLASSIFICATION	1.4394839358564625E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999654884822529	WITHOUT_CLASSIFICATION	3.451151774715237E-5	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999821357809948	WITHOUT_CLASSIFICATION	1.786421900522291E-5	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999874678038784	WITHOUT_CLASSIFICATION	1.2532196121568948E-5	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999577955038707	WITHOUT_CLASSIFICATION	4.220449612941735E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999096876993226	WITHOUT_CLASSIFICATION	9.03123006774406E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999812171625578	WITHOUT_CLASSIFICATION	1.8782837442198748E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999997452325433	WITHOUT_CLASSIFICATION	2.547674566962346E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999977796727051	WITHOUT_CLASSIFICATION	2.220327294976954E-6	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999939941436842	WITHOUT_CLASSIFICATION	6.005856315849408E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999897817882983	WITHOUT_CLASSIFICATION	1.021821170160127E-5	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999837038132614	WITHOUT_CLASSIFICATION	1.629618673856838E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999349315692	WITHOUT_CLASSIFICATION	6.50684307975235E-8	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9997580334465039	WITHOUT_CLASSIFICATION	2.4196655349592778E-4	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999981200268858	WITHOUT_CLASSIFICATION	1.8799731142522825E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999549224374015	WITHOUT_CLASSIFICATION	4.507756259847959E-5	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999787952820132	WITHOUT_CLASSIFICATION	2.1204717986831527E-5	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999983426353919	WITHOUT_CLASSIFICATION	1.6573646081077387E-6	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999833160615298	WITHOUT_CLASSIFICATION	1.6683938470167103E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999940663714741	WITHOUT_CLASSIFICATION	5.93362852581619E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999940663714741	WITHOUT_CLASSIFICATION	5.93362852581619E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999979606356147	WITHOUT_CLASSIFICATION	2.039364385215308E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999976911731634	WITHOUT_CLASSIFICATION	2.308826836491864E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999994865560025	WITHOUT_CLASSIFICATION	5.134439975058537E-7	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999892119822403	WITHOUT_CLASSIFICATION	1.0788017759584363E-5	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999173290740412	WITHOUT_CLASSIFICATION	8.267092595886345E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999576265797262	WITHOUT_CLASSIFICATION	4.23734202737898E-5	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999977616927697	WITHOUT_CLASSIFICATION	2.2383072303494002E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999910575730703	WITHOUT_CLASSIFICATION	8.94242692962251E-6	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999944057081903	WITHOUT_CLASSIFICATION	5.5942918096918945E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999951543847333	WITHOUT_CLASSIFICATION	4.845615266681008E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999833556001668	WITHOUT_CLASSIFICATION	1.6644399833163454E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9996447800682926	WITHOUT_CLASSIFICATION	3.552199317073653E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999994599764276	WITHOUT_CLASSIFICATION	5.400235724005931E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999920917720871	WITHOUT_CLASSIFICATION	7.90822791290686E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999883523653891	WITHOUT_CLASSIFICATION	1.164763461085036E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999883523653891	WITHOUT_CLASSIFICATION	1.164763461085036E-5	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999963714815568	WITHOUT_CLASSIFICATION	3.6285184432358616E-6	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999914020444863	WITHOUT_CLASSIFICATION	8.597955513760041E-6	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999824562390556	WITHOUT_CLASSIFICATION	1.7543760944502794E-5	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999973546507579	WITHOUT_CLASSIFICATION	2.645349242064758E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999835039284222	WITHOUT_CLASSIFICATION	1.649607157778348E-5	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999546090496979	WITHOUT_CLASSIFICATION	4.539095030206837E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9998021661920794	WITHOUT_CLASSIFICATION	1.97833807920579E-4	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999986207345787	WITHOUT_CLASSIFICATION	1.3792654212807301E-6	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999987952514617	WITHOUT_CLASSIFICATION	1.2047485383112988E-6	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999978912932768	WITHOUT_CLASSIFICATION	2.108706723254903E-6	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999984899490247	WITHOUT_CLASSIFICATION	1.5100509753336623E-6	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991048329849	WITHOUT_CLASSIFICATION	8.951670150612389E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999990777609771	WITHOUT_CLASSIFICATION	9.222390229592714E-7	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994302391061	WITHOUT_CLASSIFICATION	5.697608938837749E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999963527339175	WITHOUT_CLASSIFICATION	3.647266082614945E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999444863896666	WITHOUT_CLASSIFICATION	5.551361033328093E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999987551632564	WITHOUT_CLASSIFICATION	1.2448367435451181E-6	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999460771840956	WITHOUT_CLASSIFICATION	5.3922815904298486E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999991546334203	WITHOUT_CLASSIFICATION	8.453665797250098E-7	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998221763773	WITHOUT_CLASSIFICATION	1.7782362268737586E-7	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999936024582982	WITHOUT_CLASSIFICATION	6.397541701775667E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999102097296	WITHOUT_CLASSIFICATION	8.979027035600882E-8	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999963324520781	WITHOUT_CLASSIFICATION	3.6675479219393177E-6	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999266955844535	WITHOUT_CLASSIFICATION	7.330441554659342E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9930885466156847	WITHOUT_CLASSIFICATION	0.006911453384315334	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999955358856522	WITHOUT_CLASSIFICATION	4.464114347867208E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999990692315995	WITHOUT_CLASSIFICATION	9.307684005636872E-7	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999996326465849	WITHOUT_CLASSIFICATION	3.673534152191537E-7	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999966094490137	WITHOUT_CLASSIFICATION	3.3905509863367863E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999951405189128	WITHOUT_CLASSIFICATION	4.859481087205867E-5	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999545360663149	WITHOUT_CLASSIFICATION	4.546393368510215E-5	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999979747960858	WITHOUT_CLASSIFICATION	2.02520391425229E-6	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999968652514397	WITHOUT_CLASSIFICATION	3.134748560194987E-6	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999913668181827	WITHOUT_CLASSIFICATION	8.63318181723754E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999941102730049	WITHOUT_CLASSIFICATION	5.889726995075783E-6	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999827973365235	WITHOUT_CLASSIFICATION	1.7202663476543778E-5	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999855063109867	WITHOUT_CLASSIFICATION	1.4493689013376151E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999843283318212	WITHOUT_CLASSIFICATION	1.567166817881157E-5	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999832024970613	WITHOUT_CLASSIFICATION	1.6797502938690933E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999997664140218	WITHOUT_CLASSIFICATION	2.3358597815135376E-7	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999995491003744	WITHOUT_CLASSIFICATION	4.508996255987312E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999995491003744	WITHOUT_CLASSIFICATION	4.508996255987312E-6	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999868695566322	WITHOUT_CLASSIFICATION	1.313044336782286E-5	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999671447721	WITHOUT_CLASSIFICATION	3.2855227788048824E-8	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999900830674547	WITHOUT_CLASSIFICATION	9.916932545357466E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999994082526145	WITHOUT_CLASSIFICATION	5.917473855596579E-7	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999854035821654	WITHOUT_CLASSIFICATION	1.4596417834668744E-5	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999491042410634	WITHOUT_CLASSIFICATION	5.0895758936557005E-5	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999972496769778	WITHOUT_CLASSIFICATION	2.7503230220919467E-6	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999871593432738	WITHOUT_CLASSIFICATION	1.2840656726218099E-5	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999979861503094	WITHOUT_CLASSIFICATION	2.013849690554477E-6	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876890403493	WITHOUT_CLASSIFICATION	1.2310959650741775E-5	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873048202296	WITHOUT_CLASSIFICATION	1.269517977047023E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.999959148545944	WITHOUT_CLASSIFICATION	4.085145405593242E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993107737217097	WITHOUT_CLASSIFICATION	6.892262782903186E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999959748359054	WITHOUT_CLASSIFICATION	4.025164094600459E-6	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999940870625887	WITHOUT_CLASSIFICATION	5.912937411323292E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999976351721309	WITHOUT_CLASSIFICATION	2.36482786904836E-6	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999033163966513	WITHOUT_CLASSIFICATION	9.668360334870659E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998150260487	WITHOUT_CLASSIFICATION	1.8497395127790903E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999972311360257	WITHOUT_CLASSIFICATION	2.768863974194843E-6	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999950323579	WITHOUT_CLASSIFICATION	4.9676420953315884E-8	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999949860719208	WITHOUT_CLASSIFICATION	5.01392807910552E-6	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999768475784522	WITHOUT_CLASSIFICATION	2.3152421547875286E-5	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999991467876601	WITHOUT_CLASSIFICATION	8.532123398033083E-7	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999290338027788	WITHOUT_CLASSIFICATION	7.096619722121474E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.999989571402433	WITHOUT_CLASSIFICATION	1.0428597566983029E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999803157906312	WITHOUT_CLASSIFICATION	1.9684209368763175E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999968495175131	WITHOUT_CLASSIFICATION	3.150482486878572E-6	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999990718932078	WITHOUT_CLASSIFICATION	9.281067921050044E-7	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999976371170725	WITHOUT_CLASSIFICATION	2.3628829276564784E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999911449627681	WITHOUT_CLASSIFICATION	8.855037231843584E-6	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999992659603535	WITHOUT_CLASSIFICATION	7.340396466075098E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999981064536488	WITHOUT_CLASSIFICATION	1.8935463511824378E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999977291863539	WITHOUT_CLASSIFICATION	2.270813646134996E-6	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999983043643206	WITHOUT_CLASSIFICATION	1.695635679424049E-6	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999993438608318	WITHOUT_CLASSIFICATION	6.561391681669786E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999835125336353	WITHOUT_CLASSIFICATION	1.6487466364720476E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999632485712864	WITHOUT_CLASSIFICATION	3.6751428713583E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999929396743326	WITHOUT_CLASSIFICATION	7.060325667479341E-6	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999997101451459	WITHOUT_CLASSIFICATION	2.8985485410556227E-7	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998781291536214	WITHOUT_CLASSIFICATION	1.2187084637856566E-4	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994056892358	WITHOUT_CLASSIFICATION	5.943107641253984E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999979469032163	WITHOUT_CLASSIFICATION	2.0530967836992348E-5	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999970150095165	WITHOUT_CLASSIFICATION	2.984990483528729E-6	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999998884605723	WITHOUT_CLASSIFICATION	1.1153942770741866E-6	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999991867557156	WITHOUT_CLASSIFICATION	8.132442843715825E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999977487466961	WITHOUT_CLASSIFICATION	2.2512533039632544E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999946812884912	WITHOUT_CLASSIFICATION	5.318711508720231E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999994599764276	WITHOUT_CLASSIFICATION	5.400235724005931E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999838462736534	WITHOUT_CLASSIFICATION	1.61537263465319E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999989744377973	WITHOUT_CLASSIFICATION	1.0255622026990767E-6	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9997889667969729	WITHOUT_CLASSIFICATION	2.1103320302701104E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9997743844639436	WITHOUT_CLASSIFICATION	2.2561553605633165E-4	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999970642442142	WITHOUT_CLASSIFICATION	2.9357557857388113E-6	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999249679050299	WITHOUT_CLASSIFICATION	7.503209497013073E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999922796289519	WITHOUT_CLASSIFICATION	7.720371048150527E-6	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999995494093225	WITHOUT_CLASSIFICATION	4.505906774798083E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999175339575029	WITHOUT_CLASSIFICATION	8.246604249702148E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999972074308678	WITHOUT_CLASSIFICATION	2.7925691322103268E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999995082371083	WITHOUT_CLASSIFICATION	4.917628917744404E-7	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999941882651647	WITHOUT_CLASSIFICATION	5.811734835255084E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999980562465912	WITHOUT_CLASSIFICATION	1.94375340872361E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999997040836791	WITHOUT_CLASSIFICATION	2.9591632081998645E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809887980402	WITHOUT_CLASSIFICATION	1.901120195977216E-5	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9998671288723008	WITHOUT_CLASSIFICATION	1.328711276993316E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9998458810472046	WITHOUT_CLASSIFICATION	1.5411895279531358E-4	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999930477055696	WITHOUT_CLASSIFICATION	6.9522944304150155E-6	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999929447005143	WITHOUT_CLASSIFICATION	7.0552994856950835E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809887980402	WITHOUT_CLASSIFICATION	1.901120195977216E-5	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999856136170044	WITHOUT_CLASSIFICATION	1.4386382995674421E-5	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999987169390656	WITHOUT_CLASSIFICATION	1.2830609344761268E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999990456418862	WITHOUT_CLASSIFICATION	9.543581137201153E-7	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999950369689677	WITHOUT_CLASSIFICATION	4.963031032238752E-6	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998281945482348	WITHOUT_CLASSIFICATION	1.7180545176525024E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999931798844247	WITHOUT_CLASSIFICATION	6.8201155753383E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999968730711762	WITHOUT_CLASSIFICATION	3.1269288237488022E-6	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999996801798486	WITHOUT_CLASSIFICATION	3.1982015129614176E-7	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999630369454692	WITHOUT_CLASSIFICATION	3.696305453087143E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999993749357802	WITHOUT_CLASSIFICATION	6.250642198156925E-7	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999841057392233	WITHOUT_CLASSIFICATION	1.589426077678483E-5	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999359609978514	WITHOUT_CLASSIFICATION	6.40390021485204E-5	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.99999966598791	WITHOUT_CLASSIFICATION	3.340120899806661E-7	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999986467235377	WITHOUT_CLASSIFICATION	1.3532764623286342E-6	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999934788108866	WITHOUT_CLASSIFICATION	6.5211891133060145E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999996576409475	WITHOUT_CLASSIFICATION	3.4235905250093614E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999981835812763	WITHOUT_CLASSIFICATION	1.8164187236622213E-6	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999774309514611	WITHOUT_CLASSIFICATION	2.2569048539027575E-5	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999982935789204	WITHOUT_CLASSIFICATION	1.7064210795922217E-6	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9999949459050619	WITHOUT_CLASSIFICATION	5.0540949380738914E-6	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999194412561	WITHOUT_CLASSIFICATION	8.055874386120993E-8	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.999990311652127	WITHOUT_CLASSIFICATION	9.688347872938793E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999989016745332	WITHOUT_CLASSIFICATION	1.0983254667728187E-6	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999999721245327	WITHOUT_CLASSIFICATION	2.7875467299277877E-7	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999953095818893	WITHOUT_CLASSIFICATION	4.690418110774942E-6	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999952275563556	WITHOUT_CLASSIFICATION	4.772443644356722E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999952518078945	WITHOUT_CLASSIFICATION	4.748192105498617E-6	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999968003453623	WITHOUT_CLASSIFICATION	3.1996546376032295E-6	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999985555374652	WITHOUT_CLASSIFICATION	1.4444625348515709E-6	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999998864459821	WITHOUT_CLASSIFICATION	1.1355401787067633E-7	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999736155754442	WITHOUT_CLASSIFICATION	2.6384424555902844E-5	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999896745841429	WITHOUT_CLASSIFICATION	1.0325415857096272E-5	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9996755074951674	WITHOUT_CLASSIFICATION	3.244925048325258E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999928323735001	WITHOUT_CLASSIFICATION	7.167626499848412E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999691339731415	WITHOUT_CLASSIFICATION	3.0866026858596373E-5	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999504707702884	WITHOUT_CLASSIFICATION	4.952922971150966E-5	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999970027970421	WITHOUT_CLASSIFICATION	2.997202957929993E-6	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999984327136762	WITHOUT_CLASSIFICATION	1.5672863239038814E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999886534597006	WITHOUT_CLASSIFICATION	1.1346540299299842E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999950899894572	WITHOUT_CLASSIFICATION	4.910010542821918E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999806012222919	WITHOUT_CLASSIFICATION	1.939877770814323E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999806012222919	WITHOUT_CLASSIFICATION	1.939877770814323E-5	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999775296866812	WITHOUT_CLASSIFICATION	2.2470313318849723E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999710856004574	WITHOUT_CLASSIFICATION	2.8914399542556044E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999992262484667	WITHOUT_CLASSIFICATION	7.737515334200426E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9943856445478424	WITHOUT_CLASSIFICATION	0.005614355452157497	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999137018422339	WITHOUT_CLASSIFICATION	8.629815776607923E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9998639645044922	WITHOUT_CLASSIFICATION	1.3603549550767952E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999611091222699	WITHOUT_CLASSIFICATION	3.889087773005499E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9992793330889972	WITHOUT_CLASSIFICATION	7.2066691100271E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999835292084425	WITHOUT_CLASSIFICATION	1.6470791557564567E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999990210608877	WITHOUT_CLASSIFICATION	9.78939112251978E-7	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999739149965255	WITHOUT_CLASSIFICATION	2.608500347454366E-5	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999939069303312	WITHOUT_CLASSIFICATION	6.0930696688438505E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999359508184461	WITHOUT_CLASSIFICATION	6.404918155387988E-5	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999993151713437	WITHOUT_CLASSIFICATION	6.84828656298558E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702253093039	WITHOUT_CLASSIFICATION	2.977469069604889E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999702253093039	WITHOUT_CLASSIFICATION	2.977469069604889E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999898755507604	WITHOUT_CLASSIFICATION	1.0124449239776587E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997964806399661	WITHOUT_CLASSIFICATION	2.0351936003386732E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999557111538261	WITHOUT_CLASSIFICATION	4.428884617384873E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999489459277217	WITHOUT_CLASSIFICATION	5.105407227840528E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999827674797022	WITHOUT_CLASSIFICATION	1.723252029790472E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975293255327	WITHOUT_CLASSIFICATION	2.470674467344458E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997548429191544	WITHOUT_CLASSIFICATION	2.4515708084556903E-4	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999995996788438	WITHOUT_CLASSIFICATION	4.003211562352195E-7	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999894465412016	WITHOUT_CLASSIFICATION	1.0553458798352243E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999855151281842	WITHOUT_CLASSIFICATION	1.4484871815791631E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999401402973431	WITHOUT_CLASSIFICATION	5.985970265690288E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999993749357802	WITHOUT_CLASSIFICATION	6.250642198156925E-7	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999890741238722	WITHOUT_CLASSIFICATION	1.0925876127757826E-5	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9964701414008299	WITHOUT_CLASSIFICATION	0.0035298585991700294	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999988124501336	WITHOUT_CLASSIFICATION	1.1875498664810854E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.999903572427519	WITHOUT_CLASSIFICATION	9.642757248104055E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999699241949687	WITHOUT_CLASSIFICATION	3.007580503137326E-5	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999820464334127	WITHOUT_CLASSIFICATION	1.795356658728538E-5	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9998226503685074	WITHOUT_CLASSIFICATION	1.77349631492759E-4	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999998263722004	WITHOUT_CLASSIFICATION	1.7362779965530075E-7	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999483490877114	WITHOUT_CLASSIFICATION	5.165091228863391E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999859191215285	WITHOUT_CLASSIFICATION	1.4080878471606247E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999859191215285	WITHOUT_CLASSIFICATION	1.4080878471606247E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9996561710603722	WITHOUT_CLASSIFICATION	3.438289396277564E-4	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999998929948413	WITHOUT_CLASSIFICATION	1.0700515866958125E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9997093592487141	WITHOUT_CLASSIFICATION	2.9064075128594036E-4	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999848072411479	WITHOUT_CLASSIFICATION	1.51927588520529E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999495324411095	WITHOUT_CLASSIFICATION	5.0467558890543616E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999997130199936	WITHOUT_CLASSIFICATION	2.869800063866602E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998525134001	WITHOUT_CLASSIFICATION	1.4748659989782152E-6	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999993457798939	WITHOUT_CLASSIFICATION	6.542201061007593E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999994871523967	WITHOUT_CLASSIFICATION	5.128476032948933E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999822088059444	WITHOUT_CLASSIFICATION	1.779119405564971E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999761854277366	WITHOUT_CLASSIFICATION	2.381457226336166E-5	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999987923412073	WITHOUT_CLASSIFICATION	1.2076587927144667E-6	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999998747540009	WITHOUT_CLASSIFICATION	1.252459991065336E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999983246811045	WITHOUT_CLASSIFICATION	1.675318895539887E-6	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999966096999712	WITHOUT_CLASSIFICATION	3.390300028722124E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999899578796271	WITHOUT_CLASSIFICATION	1.0042120372882997E-5	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999978381604177	WITHOUT_CLASSIFICATION	2.161839582249217E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999875345358785	WITHOUT_CLASSIFICATION	1.246546412140809E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999521065259777	WITHOUT_CLASSIFICATION	4.7893474022354616E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999990292103534	WITHOUT_CLASSIFICATION	9.707896465661058E-7	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999997315623562	WITHOUT_CLASSIFICATION	2.6843764380395594E-6	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999991328348663	WITHOUT_CLASSIFICATION	8.671651335962988E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999999323903231	WITHOUT_CLASSIFICATION	6.76096769045716E-7	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999938739744028	WITHOUT_CLASSIFICATION	6.1260255972788355E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999958114078505	WITHOUT_CLASSIFICATION	4.188592149413907E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999958114078505	WITHOUT_CLASSIFICATION	4.188592149413907E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999996262003765	WITHOUT_CLASSIFICATION	3.7379962342620795E-7	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999964334962997	WITHOUT_CLASSIFICATION	3.5665037003259166E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999991390978382	WITHOUT_CLASSIFICATION	8.609021617489191E-7	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999602999775	WITHOUT_CLASSIFICATION	3.970002260365254E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999962866397066	WITHOUT_CLASSIFICATION	3.713360293409783E-5	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999940939471353	WITHOUT_CLASSIFICATION	5.906052864631048E-6	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999987959644858	WITHOUT_CLASSIFICATION	1.2040355141604525E-6	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999977157456279	WITHOUT_CLASSIFICATION	2.2842543720241785E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.999992122860379	WITHOUT_CLASSIFICATION	7.877139621093806E-6	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9999993894157753	WITHOUT_CLASSIFICATION	6.10584224759388E-7	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9999893681575525	WITHOUT_CLASSIFICATION	1.0631842447591781E-5	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9999380550596081	WITHOUT_CLASSIFICATION	6.194494039185683E-5	DEFECT
/*	DEFECT	0.9941495762592308	WITHOUT_CLASSIFICATION	0.005850423740769206	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9986462528405565	WITHOUT_CLASSIFICATION	0.0013537471594434868	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9998775579307966	WITHOUT_CLASSIFICATION	1.224420692034662E-4	DEFECT
// TODO : should this be an error?	DEFECT	0.6509225743543321	WITHOUT_CLASSIFICATION	0.34907742564566785	DEFECT
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9998441772829119	WITHOUT_CLASSIFICATION	1.5582271708811254E-4	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9999941679664545	WITHOUT_CLASSIFICATION	5.832033545544963E-6	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9997715274221138	WITHOUT_CLASSIFICATION	2.2847257788619803E-4	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9997715274221138	WITHOUT_CLASSIFICATION	2.2847257788619803E-4	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.999994510503889	WITHOUT_CLASSIFICATION	5.489496110909909E-6	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999795108258185	WITHOUT_CLASSIFICATION	2.0489174181527074E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9999321102623658	WITHOUT_CLASSIFICATION	6.788973763421329E-5	DEFECT
// this call is side-effecty	DEFECT	0.9997779839746106	WITHOUT_CLASSIFICATION	2.220160253893466E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9999972638364545	WITHOUT_CLASSIFICATION	2.736163545456717E-6	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9994497578945697	WITHOUT_CLASSIFICATION	5.502421054303661E-4	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9999996880452554	WITHOUT_CLASSIFICATION	3.119547445459544E-7	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9998988177410473	WITHOUT_CLASSIFICATION	1.0118225895284416E-4	DEFECT
//TODO: is this completely correct?	DEFECT	0.9896453915702175	WITHOUT_CLASSIFICATION	0.010354608429782563	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999995789445295	WITHOUT_CLASSIFICATION	4.210554704323932E-7	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9999905742584883	WITHOUT_CLASSIFICATION	9.425741511761376E-6	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9998019314307404	WITHOUT_CLASSIFICATION	1.9806856925965631E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9999651389235881	WITHOUT_CLASSIFICATION	3.486107641196132E-5	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9995578737560896	WITHOUT_CLASSIFICATION	4.4212624391039496E-4	DEFECT
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9998945936568225	WITHOUT_CLASSIFICATION	1.0540634317751086E-4	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9999981835708902	WITHOUT_CLASSIFICATION	1.8164291098209241E-6	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9994743128878493	WITHOUT_CLASSIFICATION	5.256871121507098E-4	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9981668331678264	WITHOUT_CLASSIFICATION	0.0018331668321735892	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.999638528818312	WITHOUT_CLASSIFICATION	3.6147118168797075E-4	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9997715274221138	WITHOUT_CLASSIFICATION	2.2847257788619803E-4	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999751826460487	WITHOUT_CLASSIFICATION	2.4817353951373697E-5	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.999999346822258	WITHOUT_CLASSIFICATION	6.531777420131055E-7	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.999984338202966	WITHOUT_CLASSIFICATION	1.5661797034037594E-5	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9999983333318754	WITHOUT_CLASSIFICATION	1.6666681245430613E-6	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999824726716071	WITHOUT_CLASSIFICATION	1.7527328392927387E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999925010584162	WITHOUT_CLASSIFICATION	7.498941583922025E-6	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9999559143813586	WITHOUT_CLASSIFICATION	4.408561864140263E-5	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9999893694064758	WITHOUT_CLASSIFICATION	1.0630593524300603E-5	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9999920818930826	WITHOUT_CLASSIFICATION	7.918106917363173E-6	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.999964969094585	WITHOUT_CLASSIFICATION	3.503090541508559E-5	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999985231969033	WITHOUT_CLASSIFICATION	1.4768030967760624E-6	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9999793667100115	WITHOUT_CLASSIFICATION	2.0633289988499566E-5	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9991466794106123	WITHOUT_CLASSIFICATION	8.533205893877621E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9999989314951642	WITHOUT_CLASSIFICATION	1.0685048357950373E-6	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.999732278256654	WITHOUT_CLASSIFICATION	2.677217433459239E-4	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9999896176767159	WITHOUT_CLASSIFICATION	1.0382323284227177E-5	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999999906227899	WITHOUT_CLASSIFICATION	9.377210118068279E-9	DEFECT
