//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999899545034487	WITHOUT_CLASSIFICATION	1.0045496551334499E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999250415469023	WITHOUT_CLASSIFICATION	7.495845309767282E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999976308230862	WITHOUT_CLASSIFICATION	2.3691769137571743E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999993924278909	WITHOUT_CLASSIFICATION	6.075721091741403E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999997128395496	WITHOUT_CLASSIFICATION	2.8716045039194954E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999997128395496	WITHOUT_CLASSIFICATION	2.8716045039194954E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989300482116	WITHOUT_CLASSIFICATION	1.0699517883580274E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999997728892796	WITHOUT_CLASSIFICATION	2.2711072038833386E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999997853732649	WITHOUT_CLASSIFICATION	2.1462673508712454E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999995360955242	WITHOUT_CLASSIFICATION	4.639044758082279E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970857538943	WITHOUT_CLASSIFICATION	2.9142461056852444E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970857538943	WITHOUT_CLASSIFICATION	2.9142461056852444E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999991457752861	WITHOUT_CLASSIFICATION	8.542247137745027E-7	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999991311002473	WITHOUT_CLASSIFICATION	8.688997527768087E-7	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999982592911104	WITHOUT_CLASSIFICATION	1.740708889638813E-6	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999996928871517	WITHOUT_CLASSIFICATION	3.0711284826283047E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999934682839993	WITHOUT_CLASSIFICATION	6.531716000794313E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999968023344895	WITHOUT_CLASSIFICATION	3.1976655104406807E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999936641563965	WITHOUT_CLASSIFICATION	6.335843603523353E-6	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999833411515449	WITHOUT_CLASSIFICATION	1.665884845514777E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999574044736848	WITHOUT_CLASSIFICATION	4.259552631532754E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999269922898604	WITHOUT_CLASSIFICATION	7.300771013970107E-5	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999877101816977	WITHOUT_CLASSIFICATION	1.228981830228227E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999993675933849	WITHOUT_CLASSIFICATION	6.32406615089311E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999991349303466	WITHOUT_CLASSIFICATION	8.650696533803417E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905886430044	WITHOUT_CLASSIFICATION	9.411356995545042E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905886430044	WITHOUT_CLASSIFICATION	9.411356995545042E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999970142461425	WITHOUT_CLASSIFICATION	2.9857538575596026E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999852311909015	WITHOUT_CLASSIFICATION	1.4768809098346891E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999993183083429	WITHOUT_CLASSIFICATION	6.816916571876833E-7	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988445245063	WITHOUT_CLASSIFICATION	1.1554754937284428E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999998622801496	WITHOUT_CLASSIFICATION	1.3771985047841596E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998587762491581	WITHOUT_CLASSIFICATION	1.4122375084188164E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998587762491581	WITHOUT_CLASSIFICATION	1.4122375084188164E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.99999994487889	WITHOUT_CLASSIFICATION	5.5121109988601825E-8	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9956808644001012	WITHOUT_CLASSIFICATION	0.004319135599898743	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999987895494896	WITHOUT_CLASSIFICATION	1.2104505104070293E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999584670896874	WITHOUT_CLASSIFICATION	4.153291031265499E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999944360100803	WITHOUT_CLASSIFICATION	5.5639899196900515E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976481775282	WITHOUT_CLASSIFICATION	2.3518224717789658E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973168482872	WITHOUT_CLASSIFICATION	2.6831517129025824E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999991003544892	WITHOUT_CLASSIFICATION	8.996455107469263E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999723071440542	WITHOUT_CLASSIFICATION	2.7692855945798023E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999972693044918	WITHOUT_CLASSIFICATION	2.7306955081891346E-6	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999955165130534	WITHOUT_CLASSIFICATION	4.483486946574842E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999723071440542	WITHOUT_CLASSIFICATION	2.7692855945798023E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999955165130534	WITHOUT_CLASSIFICATION	4.483486946574842E-6	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999983321538005	WITHOUT_CLASSIFICATION	1.6678461994220292E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9997873440138811	WITHOUT_CLASSIFICATION	2.1265598611895534E-4	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999993368102729	WITHOUT_CLASSIFICATION	6.631897270643768E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999791979090735	WITHOUT_CLASSIFICATION	2.0802090926507302E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999981049458259	WITHOUT_CLASSIFICATION	1.89505417421187E-6	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999995145673497	WITHOUT_CLASSIFICATION	4.854326501865528E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999978292789895	WITHOUT_CLASSIFICATION	2.170721010414955E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997933518836907	WITHOUT_CLASSIFICATION	2.0664811630932215E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999995068365208	WITHOUT_CLASSIFICATION	4.931634791726403E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.99987843472873	WITHOUT_CLASSIFICATION	1.21565271269968E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999975237035563	WITHOUT_CLASSIFICATION	2.476296443583173E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990303911377	WITHOUT_CLASSIFICATION	9.696088623051885E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999794828645663	WITHOUT_CLASSIFICATION	2.0517135433635654E-5	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999914436168125	WITHOUT_CLASSIFICATION	8.556383187654701E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999997620773952	WITHOUT_CLASSIFICATION	2.3792260478855176E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999182873803	WITHOUT_CLASSIFICATION	8.171261962843634E-8	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999998196652749	WITHOUT_CLASSIFICATION	1.803347250961604E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999834632397	WITHOUT_CLASSIFICATION	1.6536760399105855E-8	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999186258213	WITHOUT_CLASSIFICATION	8.13741786894758E-8	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998900668018	WITHOUT_CLASSIFICATION	1.0993319821130768E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999985126254549	WITHOUT_CLASSIFICATION	1.4873745451035147E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999651222982158	WITHOUT_CLASSIFICATION	3.487770178414666E-5	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998167103835	WITHOUT_CLASSIFICATION	1.8328961645991343E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980337233254	WITHOUT_CLASSIFICATION	1.9662766745522896E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.999918261386972	WITHOUT_CLASSIFICATION	8.173861302799505E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999992653311133	WITHOUT_CLASSIFICATION	7.34668886639373E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999965534044	WITHOUT_CLASSIFICATION	3.4465955934298247E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999963978854446	WITHOUT_CLASSIFICATION	3.602114555442895E-6	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999997215858722	WITHOUT_CLASSIFICATION	2.7841412768629527E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999989704517985	WITHOUT_CLASSIFICATION	1.0295482015464348E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.999990324348165	WITHOUT_CLASSIFICATION	9.675651834980563E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999990620999568	WITHOUT_CLASSIFICATION	9.379000432400535E-7	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999012010758245	WITHOUT_CLASSIFICATION	9.879892417556644E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999128162496	WITHOUT_CLASSIFICATION	8.718375047171796E-8	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999940547885258	WITHOUT_CLASSIFICATION	5.945211474311794E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999984427147294	WITHOUT_CLASSIFICATION	1.5572852706698087E-6	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999128162496	WITHOUT_CLASSIFICATION	8.718375047171796E-8	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999063514360481	WITHOUT_CLASSIFICATION	9.364856395190341E-5	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999908560954154	WITHOUT_CLASSIFICATION	9.143904584595529E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999956884811398	WITHOUT_CLASSIFICATION	4.311518860184436E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999969798107531	WITHOUT_CLASSIFICATION	3.020189246889441E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999984097158934	WITHOUT_CLASSIFICATION	1.590284106653757E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996857162416	WITHOUT_CLASSIFICATION	3.142837584252901E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996857162416	WITHOUT_CLASSIFICATION	3.142837584252901E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999956417077505	WITHOUT_CLASSIFICATION	4.358292249561006E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999993150206958	WITHOUT_CLASSIFICATION	6.849793042014448E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999990102736777	WITHOUT_CLASSIFICATION	9.8972632228749E-7	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999998408575284	WITHOUT_CLASSIFICATION	1.5914247154202914E-7	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999978061588497	WITHOUT_CLASSIFICATION	2.1938411502767587E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999997191891657	WITHOUT_CLASSIFICATION	2.80810834324462E-7	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999973449963583	WITHOUT_CLASSIFICATION	2.6550036416419544E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999798553694371	WITHOUT_CLASSIFICATION	2.014463056287808E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999714372441	WITHOUT_CLASSIFICATION	2.8562756025991885E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999999311036262	WITHOUT_CLASSIFICATION	6.889637380772046E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993910392743	WITHOUT_CLASSIFICATION	6.089607258264807E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993910392743	WITHOUT_CLASSIFICATION	6.089607258264807E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999994282123995	WITHOUT_CLASSIFICATION	5.717876005394979E-7	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999988813775518	WITHOUT_CLASSIFICATION	1.1186224482134911E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999992872530249	WITHOUT_CLASSIFICATION	7.127469751316654E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999993910392743	WITHOUT_CLASSIFICATION	6.089607258264807E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999994282123995	WITHOUT_CLASSIFICATION	5.717876005394979E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999994282123995	WITHOUT_CLASSIFICATION	5.717876005394979E-7	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998581732454	WITHOUT_CLASSIFICATION	1.4182675455243309E-7	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999998573956687	WITHOUT_CLASSIFICATION	1.4260433129908578E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999996059807997	WITHOUT_CLASSIFICATION	3.940192002866918E-7	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999979200765	WITHOUT_CLASSIFICATION	2.0799235026245328E-8	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999998664784337	WITHOUT_CLASSIFICATION	1.3352156631075434E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999998664784337	WITHOUT_CLASSIFICATION	1.3352156631075434E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999916992449495	WITHOUT_CLASSIFICATION	8.300755050455353E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999898297480383	WITHOUT_CLASSIFICATION	1.0170251961691878E-5	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999931727189117	WITHOUT_CLASSIFICATION	6.827281088235149E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999989683040129	WITHOUT_CLASSIFICATION	1.031695986996237E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999989683040129	WITHOUT_CLASSIFICATION	1.031695986996237E-6	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999939231808949	WITHOUT_CLASSIFICATION	6.076819105152383E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999920295184704	WITHOUT_CLASSIFICATION	7.97048152963729E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999953962905365	WITHOUT_CLASSIFICATION	4.603709463580001E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999965482137645	WITHOUT_CLASSIFICATION	3.4517862355594757E-6	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999970852675207	WITHOUT_CLASSIFICATION	2.9147324791934424E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998848748555	WITHOUT_CLASSIFICATION	1.1512514447861942E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999975383223921	WITHOUT_CLASSIFICATION	2.4616776078131722E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999055688071	WITHOUT_CLASSIFICATION	9.443119294796424E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999561260303276	WITHOUT_CLASSIFICATION	4.387396967239896E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999953962905365	WITHOUT_CLASSIFICATION	4.603709463580001E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999866486957942	WITHOUT_CLASSIFICATION	1.3351304205874837E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999905693014068	WITHOUT_CLASSIFICATION	9.43069859318453E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999905693014068	WITHOUT_CLASSIFICATION	9.43069859318453E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999955302815159	WITHOUT_CLASSIFICATION	4.469718484093596E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999066455965763	WITHOUT_CLASSIFICATION	9.33544034237455E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99999924749274	WITHOUT_CLASSIFICATION	7.525072599662655E-7	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999977046154773	WITHOUT_CLASSIFICATION	2.2953845226029516E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999777799850214	WITHOUT_CLASSIFICATION	2.222001497862818E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999879607416553	WITHOUT_CLASSIFICATION	1.2039258344572522E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999879107311657	WITHOUT_CLASSIFICATION	1.2089268834343447E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999997664499694	WITHOUT_CLASSIFICATION	2.3355003074567312E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999290109878	WITHOUT_CLASSIFICATION	7.098901219728115E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999290109878	WITHOUT_CLASSIFICATION	7.098901219728115E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999899545034487	WITHOUT_CLASSIFICATION	1.0045496551334499E-5	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999998739141937	WITHOUT_CLASSIFICATION	1.2608580629318362E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999971658962855	WITHOUT_CLASSIFICATION	2.834103714525074E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999905295783657	WITHOUT_CLASSIFICATION	9.4704216343016E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999982358350263	WITHOUT_CLASSIFICATION	1.7641649736443815E-6	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999970076484903	WITHOUT_CLASSIFICATION	2.9923515096055605E-6	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999999161201702	WITHOUT_CLASSIFICATION	8.387982980454573E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.999998078509194	WITHOUT_CLASSIFICATION	1.921490806117105E-6	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999978540400417	WITHOUT_CLASSIFICATION	2.145959958371633E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999982117499574	WITHOUT_CLASSIFICATION	1.7882500425231417E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999974909519155	WITHOUT_CLASSIFICATION	2.5090480845842795E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999976308230862	WITHOUT_CLASSIFICATION	2.3691769137571743E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951464319686	WITHOUT_CLASSIFICATION	4.85356803133612E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951464319686	WITHOUT_CLASSIFICATION	4.85356803133612E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999992641601417	WITHOUT_CLASSIFICATION	7.358398582603709E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999006030631264	WITHOUT_CLASSIFICATION	9.93969368735436E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999997349897001	WITHOUT_CLASSIFICATION	2.650102999587994E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999745918297873	WITHOUT_CLASSIFICATION	2.5408170212626544E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999992599149404	WITHOUT_CLASSIFICATION	7.400850596143842E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999996666839437	WITHOUT_CLASSIFICATION	3.333160563203474E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999997128395496	WITHOUT_CLASSIFICATION	2.8716045039194954E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999993525628786	WITHOUT_CLASSIFICATION	6.474371214258118E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999917553357036	WITHOUT_CLASSIFICATION	8.244664296476479E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999969743058827	WITHOUT_CLASSIFICATION	3.025694117216356E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999985105954576	WITHOUT_CLASSIFICATION	1.4894045423420923E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.999993376217407	WITHOUT_CLASSIFICATION	6.623782593005624E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999967060429573	WITHOUT_CLASSIFICATION	3.2939570427826453E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999999419378716	WITHOUT_CLASSIFICATION	5.806212839768454E-7	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999986319416289	WITHOUT_CLASSIFICATION	1.368058371131379E-6	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998752157481	WITHOUT_CLASSIFICATION	1.2478425192497602E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999970937314958	WITHOUT_CLASSIFICATION	2.906268504276096E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999986827971558	WITHOUT_CLASSIFICATION	1.3172028442810119E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.999995395603598	WITHOUT_CLASSIFICATION	4.6043964019611E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999975893996238	WITHOUT_CLASSIFICATION	2.4106003762481022E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999982117499574	WITHOUT_CLASSIFICATION	1.7882500425231417E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999951464319686	WITHOUT_CLASSIFICATION	4.85356803133612E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999999419378716	WITHOUT_CLASSIFICATION	5.806212839768454E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989300482116	WITHOUT_CLASSIFICATION	1.0699517883580274E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999924904404282	WITHOUT_CLASSIFICATION	7.509559571866909E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999608211440878	WITHOUT_CLASSIFICATION	3.917885591219739E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999697543069783	WITHOUT_CLASSIFICATION	3.0245693021767176E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999925718526017	WITHOUT_CLASSIFICATION	7.428147398348323E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999667002568638	WITHOUT_CLASSIFICATION	3.3299743136242404E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999984554581379	WITHOUT_CLASSIFICATION	1.5445418621420502E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999971250404407	WITHOUT_CLASSIFICATION	2.8749595593253877E-6	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999930655448122	WITHOUT_CLASSIFICATION	6.934455187720836E-6	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999248903903291	WITHOUT_CLASSIFICATION	7.510960967097133E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999607819595314	WITHOUT_CLASSIFICATION	3.921804046855634E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999607819595314	WITHOUT_CLASSIFICATION	3.921804046855634E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999855270297651	WITHOUT_CLASSIFICATION	1.44729702349286E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999966346334125	WITHOUT_CLASSIFICATION	3.3653665874788426E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999702229640598	WITHOUT_CLASSIFICATION	2.9777035940191446E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999993130585648	WITHOUT_CLASSIFICATION	6.869414351938745E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999732506013449	WITHOUT_CLASSIFICATION	2.674939865504045E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999994179931428	WITHOUT_CLASSIFICATION	5.820068571003627E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999967485239893	WITHOUT_CLASSIFICATION	3.2514760107311234E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999997728892796	WITHOUT_CLASSIFICATION	2.2711072038833386E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999902948954285	WITHOUT_CLASSIFICATION	9.705104571581875E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999892488310467	WITHOUT_CLASSIFICATION	1.075116895336226E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999892488310467	WITHOUT_CLASSIFICATION	1.075116895336226E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999970295776147	WITHOUT_CLASSIFICATION	2.9704223853560085E-6	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.99999723937488	WITHOUT_CLASSIFICATION	2.7606251199397526E-6	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999961978786568	WITHOUT_CLASSIFICATION	3.802121343205965E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999919617715857	WITHOUT_CLASSIFICATION	8.038228414362467E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999917042211502	WITHOUT_CLASSIFICATION	8.295778849782891E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999972463029754	WITHOUT_CLASSIFICATION	2.7536970246868126E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999982117499574	WITHOUT_CLASSIFICATION	1.7882500425231417E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999976308230862	WITHOUT_CLASSIFICATION	2.3691769137571743E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999999419378716	WITHOUT_CLASSIFICATION	5.806212839768454E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.999999419378716	WITHOUT_CLASSIFICATION	5.806212839768454E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999990071186977	WITHOUT_CLASSIFICATION	9.92881302267248E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999990071186977	WITHOUT_CLASSIFICATION	9.92881302267248E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999941147801091	WITHOUT_CLASSIFICATION	5.885219890922145E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.999999041334999	WITHOUT_CLASSIFICATION	9.586650010264524E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.999999041334999	WITHOUT_CLASSIFICATION	9.586650010264524E-7	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999976412291638	WITHOUT_CLASSIFICATION	2.358770836219593E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999959195070203	WITHOUT_CLASSIFICATION	4.080492979718485E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999956686474936	WITHOUT_CLASSIFICATION	4.331352506465276E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999971986444373	WITHOUT_CLASSIFICATION	2.801355562748693E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999996191095297	WITHOUT_CLASSIFICATION	3.808904702520767E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999995360955242	WITHOUT_CLASSIFICATION	4.639044758082279E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999995360955242	WITHOUT_CLASSIFICATION	4.639044758082279E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.999992353982883	WITHOUT_CLASSIFICATION	7.646017117119048E-6	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.999989351174053	WITHOUT_CLASSIFICATION	1.0648825947103578E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999993862679365	WITHOUT_CLASSIFICATION	6.137320635871058E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999966402465439	WITHOUT_CLASSIFICATION	3.359753456018714E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999998386149361	WITHOUT_CLASSIFICATION	1.6138506381800767E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999973281507158	WITHOUT_CLASSIFICATION	2.671849284153667E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970857538943	WITHOUT_CLASSIFICATION	2.9142461056852444E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999974052723459	WITHOUT_CLASSIFICATION	2.5947276541832E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999974052723459	WITHOUT_CLASSIFICATION	2.5947276541832E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999991457752861	WITHOUT_CLASSIFICATION	8.542247137745027E-7	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999991457752861	WITHOUT_CLASSIFICATION	8.542247137745027E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999871690973059	WITHOUT_CLASSIFICATION	1.283090269424226E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999871690973059	WITHOUT_CLASSIFICATION	1.283090269424226E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998969273488	WITHOUT_CLASSIFICATION	1.030726512665379E-7	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998969273488	WITHOUT_CLASSIFICATION	1.030726512665379E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.999995360955242	WITHOUT_CLASSIFICATION	4.639044758082279E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970857538943	WITHOUT_CLASSIFICATION	2.9142461056852444E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999974052723459	WITHOUT_CLASSIFICATION	2.5947276541832E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999974052723459	WITHOUT_CLASSIFICATION	2.5947276541832E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999991457752861	WITHOUT_CLASSIFICATION	8.542247137745027E-7	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999871690973059	WITHOUT_CLASSIFICATION	1.283090269424226E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999871690973059	WITHOUT_CLASSIFICATION	1.283090269424226E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998969273488	WITHOUT_CLASSIFICATION	1.030726512665379E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999211169007505	WITHOUT_CLASSIFICATION	7.888309924956408E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999990960930703	WITHOUT_CLASSIFICATION	9.03906929698892E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999961619077092	WITHOUT_CLASSIFICATION	3.838092290672606E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999989804591631	WITHOUT_CLASSIFICATION	1.0195408368344651E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999984532276363	WITHOUT_CLASSIFICATION	1.5467723637837231E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980088972752	WITHOUT_CLASSIFICATION	1.9911027247060244E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996984088553433	WITHOUT_CLASSIFICATION	3.015911446566509E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998656611404867	WITHOUT_CLASSIFICATION	1.3433885951342987E-4	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999938763150726	WITHOUT_CLASSIFICATION	6.123684927384151E-6	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999997951228741	WITHOUT_CLASSIFICATION	2.0487712593554243E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999992265708518	WITHOUT_CLASSIFICATION	7.734291482174028E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999986564872871	WITHOUT_CLASSIFICATION	1.3435127129060827E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999956417077505	WITHOUT_CLASSIFICATION	4.358292249561006E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980088972752	WITHOUT_CLASSIFICATION	1.9911027247060244E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999741425922769	WITHOUT_CLASSIFICATION	2.5857407723009546E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999741425922769	WITHOUT_CLASSIFICATION	2.5857407723009546E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999865283252756	WITHOUT_CLASSIFICATION	1.3471674724421959E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994207121039	WITHOUT_CLASSIFICATION	5.792878961667113E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994207121039	WITHOUT_CLASSIFICATION	5.792878961667113E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999932244923085	WITHOUT_CLASSIFICATION	6.775507691502377E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999996208211085	WITHOUT_CLASSIFICATION	3.7917889150386833E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999927932282727	WITHOUT_CLASSIFICATION	7.206771727363257E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999924449955555	WITHOUT_CLASSIFICATION	7.555004444493617E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999924449955555	WITHOUT_CLASSIFICATION	7.555004444493617E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999934682839993	WITHOUT_CLASSIFICATION	6.531716000794313E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999190430752345	WITHOUT_CLASSIFICATION	8.095692476555203E-5	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999190430752345	WITHOUT_CLASSIFICATION	8.095692476555203E-5	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997210749114	WITHOUT_CLASSIFICATION	2.789250884978203E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999997868524356	WITHOUT_CLASSIFICATION	2.1314756439939547E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999987997637808	WITHOUT_CLASSIFICATION	1.200236219189949E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999610013431367	WITHOUT_CLASSIFICATION	3.899865686334666E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999948113988786	WITHOUT_CLASSIFICATION	5.188601121425567E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999977118566118	WITHOUT_CLASSIFICATION	2.2881433881556906E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999968023344895	WITHOUT_CLASSIFICATION	3.1976655104406807E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999936365038422	WITHOUT_CLASSIFICATION	6.363496157805285E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9405889010023791	WITHOUT_CLASSIFICATION	0.059411098997620856	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999948934144426	WITHOUT_CLASSIFICATION	5.106585557461318E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999153398073862	WITHOUT_CLASSIFICATION	8.466019261376683E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999574044736848	WITHOUT_CLASSIFICATION	4.259552631532754E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999997262718992	WITHOUT_CLASSIFICATION	2.7372810080349805E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999977744501138	WITHOUT_CLASSIFICATION	2.2255498861426632E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999994228347046	WITHOUT_CLASSIFICATION	5.77165295447729E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999574044736848	WITHOUT_CLASSIFICATION	4.259552631532754E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999998877086261	WITHOUT_CLASSIFICATION	1.1229137389315526E-6	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998405998297	WITHOUT_CLASSIFICATION	1.5940017033725402E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999855982558937	WITHOUT_CLASSIFICATION	1.4401744106313853E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999919776938136	WITHOUT_CLASSIFICATION	8.022306186357971E-6	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999963019782393	WITHOUT_CLASSIFICATION	3.698021760698077E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999263136239973	WITHOUT_CLASSIFICATION	7.368637600269725E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999230255985558	WITHOUT_CLASSIFICATION	7.6974401444132E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.999993675933849	WITHOUT_CLASSIFICATION	6.32406615089311E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803286945695	WITHOUT_CLASSIFICATION	1.9671305430453355E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999991349303466	WITHOUT_CLASSIFICATION	8.650696533803417E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999969845246958	WITHOUT_CLASSIFICATION	3.0154753042697008E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999787856425	WITHOUT_CLASSIFICATION	2.12143575112422E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999940310170355	WITHOUT_CLASSIFICATION	5.968982964479764E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999968023344895	WITHOUT_CLASSIFICATION	3.1976655104406807E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803286945695	WITHOUT_CLASSIFICATION	1.9671305430453355E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999969845246958	WITHOUT_CLASSIFICATION	3.0154753042697008E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999940310170355	WITHOUT_CLASSIFICATION	5.968982964479764E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999993976436599	WITHOUT_CLASSIFICATION	6.023563401142576E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999726993958409	WITHOUT_CLASSIFICATION	2.730060415911113E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999996955445679	WITHOUT_CLASSIFICATION	3.044554321479221E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905886430044	WITHOUT_CLASSIFICATION	9.411356995545042E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999959122578749	WITHOUT_CLASSIFICATION	4.087742125101707E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999968505536194	WITHOUT_CLASSIFICATION	3.1494463805857245E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999932100887253	WITHOUT_CLASSIFICATION	6.789911274658825E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999993072663154	WITHOUT_CLASSIFICATION	6.927336845411171E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999945567652022	WITHOUT_CLASSIFICATION	5.443234797814514E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999307546162	WITHOUT_CLASSIFICATION	6.924538379966604E-7	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999850485509	WITHOUT_CLASSIFICATION	1.4951449097765173E-7	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999960514689513	WITHOUT_CLASSIFICATION	3.948531048611879E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999732673779	WITHOUT_CLASSIFICATION	2.673262213802564E-8	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999905343815	WITHOUT_CLASSIFICATION	9.465618506196963E-8	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999931955429499	WITHOUT_CLASSIFICATION	6.804457050170562E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999723275296111	WITHOUT_CLASSIFICATION	2.7672470388940312E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999852311909015	WITHOUT_CLASSIFICATION	1.4768809098346891E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999898077850728	WITHOUT_CLASSIFICATION	1.0192214927069855E-5	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999927674924396	WITHOUT_CLASSIFICATION	7.232507560483408E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999803286945695	WITHOUT_CLASSIFICATION	1.9671305430453355E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999997913518615	WITHOUT_CLASSIFICATION	2.08648138444363E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999986012376044	WITHOUT_CLASSIFICATION	1.3987623955653711E-6	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999997872792323	WITHOUT_CLASSIFICATION	2.1272076761405033E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999895291253269	WITHOUT_CLASSIFICATION	1.0470874673120113E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999993121943176	WITHOUT_CLASSIFICATION	6.878056825284516E-7	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999911833053865	WITHOUT_CLASSIFICATION	8.816694613425413E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999845144967372	WITHOUT_CLASSIFICATION	1.548550326271287E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999955096775	WITHOUT_CLASSIFICATION	4.49032249595429E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999889415920054	WITHOUT_CLASSIFICATION	1.1058407994606227E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999856027262041	WITHOUT_CLASSIFICATION	1.4397273795966394E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967844511977	WITHOUT_CLASSIFICATION	3.2155488024302573E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999858709392717	WITHOUT_CLASSIFICATION	1.4129060728274243E-5	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999977134134453	WITHOUT_CLASSIFICATION	2.2865865545520702E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999988445245063	WITHOUT_CLASSIFICATION	1.1554754937284428E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999985622973414	WITHOUT_CLASSIFICATION	1.43770265855622E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996591892504	WITHOUT_CLASSIFICATION	3.408107496937938E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999914242867056	WITHOUT_CLASSIFICATION	8.575713294380723E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999956819376141	WITHOUT_CLASSIFICATION	4.318062385863801E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999984617595573	WITHOUT_CLASSIFICATION	1.5382404426537027E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999843367533474	WITHOUT_CLASSIFICATION	1.566324665259253E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998913828024	WITHOUT_CLASSIFICATION	1.0861719765428499E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999993586103535	WITHOUT_CLASSIFICATION	6.413896464429301E-7	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999989197942619	WITHOUT_CLASSIFICATION	1.0802057381279908E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998988594737751	WITHOUT_CLASSIFICATION	1.0114052622489693E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999838531696502	WITHOUT_CLASSIFICATION	1.6146830349726292E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999838531696502	WITHOUT_CLASSIFICATION	1.6146830349726292E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997858533453394	WITHOUT_CLASSIFICATION	2.141466546604888E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999992014991095	WITHOUT_CLASSIFICATION	7.985008904917366E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999901770679777	WITHOUT_CLASSIFICATION	9.822932022324593E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999900419036237	WITHOUT_CLASSIFICATION	9.958096376254366E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999870294377522	WITHOUT_CLASSIFICATION	1.2970562247728967E-5	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999841975414195	WITHOUT_CLASSIFICATION	1.580245858041956E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999985193476472	WITHOUT_CLASSIFICATION	1.4806523527537276E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999996866905458	WITHOUT_CLASSIFICATION	3.1330945408110237E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9997853486614585	WITHOUT_CLASSIFICATION	2.1465133854143664E-4	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999986179660825	WITHOUT_CLASSIFICATION	1.382033917502739E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999959565516908	WITHOUT_CLASSIFICATION	4.0434483092105215E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999995625736859	WITHOUT_CLASSIFICATION	4.374263140455151E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999760624422129	WITHOUT_CLASSIFICATION	2.393755778698644E-5	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999509029583841	WITHOUT_CLASSIFICATION	4.9097041615833705E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945146409981	WITHOUT_CLASSIFICATION	5.485359001941295E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989233985482	WITHOUT_CLASSIFICATION	1.0766014517778632E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9993235613313468	WITHOUT_CLASSIFICATION	6.764386686531924E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999906028652229	WITHOUT_CLASSIFICATION	9.397134777090167E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999994459164888	WITHOUT_CLASSIFICATION	5.540835112075688E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999208234581857	WITHOUT_CLASSIFICATION	7.91765418142637E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999983268870211	WITHOUT_CLASSIFICATION	1.6731129789919058E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999983268870211	WITHOUT_CLASSIFICATION	1.6731129789919058E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999859764552865	WITHOUT_CLASSIFICATION	1.402354471351393E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999859764552865	WITHOUT_CLASSIFICATION	1.402354471351393E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999989197942619	WITHOUT_CLASSIFICATION	1.0802057381279908E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9987776234355928	WITHOUT_CLASSIFICATION	0.0012223765644071218	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999804655156401	WITHOUT_CLASSIFICATION	1.9534484359923595E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999117965659089	WITHOUT_CLASSIFICATION	8.820343409106473E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999804655156401	WITHOUT_CLASSIFICATION	1.9534484359923595E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999117965659089	WITHOUT_CLASSIFICATION	8.820343409106473E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999978471216016	WITHOUT_CLASSIFICATION	2.152878398366891E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999332314441991	WITHOUT_CLASSIFICATION	6.676855580086606E-5	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999987462314798	WITHOUT_CLASSIFICATION	1.2537685202504479E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.999999265535706	WITHOUT_CLASSIFICATION	7.34464294115638E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990545019704106	WITHOUT_CLASSIFICATION	9.454980295894693E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999951836716743	WITHOUT_CLASSIFICATION	4.816328325641677E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999978377240395	WITHOUT_CLASSIFICATION	2.1622759603866516E-6	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999868696096277	WITHOUT_CLASSIFICATION	1.3130390372241251E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9970872790533236	WITHOUT_CLASSIFICATION	0.0029127209466764128	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999998909618687	WITHOUT_CLASSIFICATION	1.0903813131350866E-7	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999981953497367	WITHOUT_CLASSIFICATION	1.80465026329319E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999999611536703	WITHOUT_CLASSIFICATION	3.88463298317905E-8	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999958470085442	WITHOUT_CLASSIFICATION	4.152991455831043E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999444749355343	WITHOUT_CLASSIFICATION	5.5525064465802747E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999638011955378	WITHOUT_CLASSIFICATION	3.619880446220838E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999959558719687	WITHOUT_CLASSIFICATION	4.044128031310903E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999959558719687	WITHOUT_CLASSIFICATION	4.044128031310903E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999995010640809	WITHOUT_CLASSIFICATION	4.989359191879848E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999978471216016	WITHOUT_CLASSIFICATION	2.152878398366891E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999497161090442	WITHOUT_CLASSIFICATION	5.028389095582701E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999951833289559	WITHOUT_CLASSIFICATION	4.8166710441057504E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999999366626485	WITHOUT_CLASSIFICATION	6.333735153335046E-8	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999958979836573	WITHOUT_CLASSIFICATION	4.10201634260877E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996563366641446	WITHOUT_CLASSIFICATION	3.4366333585543127E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999978471216016	WITHOUT_CLASSIFICATION	2.152878398366891E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999958979836573	WITHOUT_CLASSIFICATION	4.10201634260877E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9996563366641446	WITHOUT_CLASSIFICATION	3.4366333585543127E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999833463010813	WITHOUT_CLASSIFICATION	1.6653698918627032E-5	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999927861846636	WITHOUT_CLASSIFICATION	7.2138153364703345E-6	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999998195820631	WITHOUT_CLASSIFICATION	1.8041793690384517E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999978471216016	WITHOUT_CLASSIFICATION	2.152878398366891E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999978471216016	WITHOUT_CLASSIFICATION	2.152878398366891E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999963158350096	WITHOUT_CLASSIFICATION	3.6841649903887293E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.999997394891515	WITHOUT_CLASSIFICATION	2.6051084850569266E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999766127281956	WITHOUT_CLASSIFICATION	2.3387271804434867E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939961052454	WITHOUT_CLASSIFICATION	6.003894754540974E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999926520781812	WITHOUT_CLASSIFICATION	7.347921818727369E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999971609300758	WITHOUT_CLASSIFICATION	2.8390699241262628E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999988227348896	WITHOUT_CLASSIFICATION	1.1772651103293211E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999997769708446	WITHOUT_CLASSIFICATION	2.2302915536118404E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999989867481001	WITHOUT_CLASSIFICATION	1.0132518999618415E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999931255857287	WITHOUT_CLASSIFICATION	6.874414271288373E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999936860214903	WITHOUT_CLASSIFICATION	6.313978509695913E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999989561176805	WITHOUT_CLASSIFICATION	1.043882319409115E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999927251831108	WITHOUT_CLASSIFICATION	7.274816889253081E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999986403209574	WITHOUT_CLASSIFICATION	1.3596790426118505E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636206305272	WITHOUT_CLASSIFICATION	3.637936947273707E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999988321746484	WITHOUT_CLASSIFICATION	1.1678253516404503E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999584670896874	WITHOUT_CLASSIFICATION	4.153291031265499E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9993371186398772	WITHOUT_CLASSIFICATION	6.628813601228113E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9997910594691042	WITHOUT_CLASSIFICATION	2.0894053089582027E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999924942734746	WITHOUT_CLASSIFICATION	7.505726525453879E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999894000015482	WITHOUT_CLASSIFICATION	1.0599998451751268E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999937993414525	WITHOUT_CLASSIFICATION	6.200658547466194E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999937993414525	WITHOUT_CLASSIFICATION	6.200658547466194E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999584670896874	WITHOUT_CLASSIFICATION	4.153291031265499E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999921029378532	WITHOUT_CLASSIFICATION	7.897062146781581E-6	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999976262367878	WITHOUT_CLASSIFICATION	2.3737632122675815E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999985027468988	WITHOUT_CLASSIFICATION	1.497253101233187E-6	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999964451901943	WITHOUT_CLASSIFICATION	3.5548098056043658E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924785085093	WITHOUT_CLASSIFICATION	7.52149149072042E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999988109263832	WITHOUT_CLASSIFICATION	1.1890736167352606E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999975363240912	WITHOUT_CLASSIFICATION	2.4636759088015516E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999592475305457	WITHOUT_CLASSIFICATION	4.075246945427575E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997063612767	WITHOUT_CLASSIFICATION	2.9363872332214267E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999997965538762	WITHOUT_CLASSIFICATION	2.0344612379984925E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999987214807009	WITHOUT_CLASSIFICATION	1.2785192991010683E-6	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9977854248371187	WITHOUT_CLASSIFICATION	0.002214575162881219	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999029281584663	WITHOUT_CLASSIFICATION	9.707184153379948E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999756127381	WITHOUT_CLASSIFICATION	2.438726189610411E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996566846124	WITHOUT_CLASSIFICATION	3.4331538760061616E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999521416470462	WITHOUT_CLASSIFICATION	4.785835295373927E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.99999968335452	WITHOUT_CLASSIFICATION	3.166454799439574E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999205274730513	WITHOUT_CLASSIFICATION	7.947252694874683E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876363621555	WITHOUT_CLASSIFICATION	1.2363637844573344E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998817787487	WITHOUT_CLASSIFICATION	1.1822125133479458E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999999682187631	WITHOUT_CLASSIFICATION	3.178123688822101E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999995132235919	WITHOUT_CLASSIFICATION	4.867764080763575E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967647740677	WITHOUT_CLASSIFICATION	3.235225932179772E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898069116107	WITHOUT_CLASSIFICATION	1.019308838925267E-5	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987508682245	WITHOUT_CLASSIFICATION	1.2491317754184432E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977860572261	WITHOUT_CLASSIFICATION	2.213942773845142E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981475140849	WITHOUT_CLASSIFICATION	1.852485914998499E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983410546548	WITHOUT_CLASSIFICATION	1.6589453451964921E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984682335541	WITHOUT_CLASSIFICATION	1.5317664458646153E-6	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995642542362	WITHOUT_CLASSIFICATION	4.357457638642452E-7	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.999999260262165	WITHOUT_CLASSIFICATION	7.397378350172972E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999994705989121	WITHOUT_CLASSIFICATION	5.294010877694822E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995275973006	WITHOUT_CLASSIFICATION	4.7240269934100103E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996047436692	WITHOUT_CLASSIFICATION	3.952563307480355E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999946020234	WITHOUT_CLASSIFICATION	5.3979765981388935E-8	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997743564057	WITHOUT_CLASSIFICATION	2.2564359422902753E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979718289065	WITHOUT_CLASSIFICATION	2.0281710935995765E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994282850269	WITHOUT_CLASSIFICATION	5.717149730738599E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999967999318	WITHOUT_CLASSIFICATION	3.200068201094763E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989597318196	WITHOUT_CLASSIFICATION	1.04026818034357E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999995303793152	WITHOUT_CLASSIFICATION	4.696206846943413E-7	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956289421498	WITHOUT_CLASSIFICATION	4.3710578501914995E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9998630637127658	WITHOUT_CLASSIFICATION	1.3693628723413168E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999840008073665	WITHOUT_CLASSIFICATION	1.5999192633485535E-5	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999090814086	WITHOUT_CLASSIFICATION	9.091859151410043E-8	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999911909413927	WITHOUT_CLASSIFICATION	8.809058607283148E-6	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999962021654485	WITHOUT_CLASSIFICATION	3.7978345515319405E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999996813991184	WITHOUT_CLASSIFICATION	3.1860088158991373E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999868137293164	WITHOUT_CLASSIFICATION	1.3186270683677787E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999926892195358	WITHOUT_CLASSIFICATION	7.3107804642174255E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999821712024062	WITHOUT_CLASSIFICATION	1.7828797593832498E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999903750239287	WITHOUT_CLASSIFICATION	9.624976071307368E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999972485494456	WITHOUT_CLASSIFICATION	2.7514505544017033E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999917955524522	WITHOUT_CLASSIFICATION	8.204447547842175E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999998184110253	WITHOUT_CLASSIFICATION	1.8158897469092248E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999875006907252	WITHOUT_CLASSIFICATION	1.249930927475472E-5	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999951623323053	WITHOUT_CLASSIFICATION	4.8376676946262184E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999980189819825	WITHOUT_CLASSIFICATION	1.9810180175039996E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999986951744222	WITHOUT_CLASSIFICATION	1.3048255778779798E-6	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940074853696	WITHOUT_CLASSIFICATION	5.992514630493355E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999280804893	WITHOUT_CLASSIFICATION	7.191951070068573E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999816724171212	WITHOUT_CLASSIFICATION	1.8327582878789718E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968271910914	WITHOUT_CLASSIFICATION	3.1728089086496133E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999532790587167	WITHOUT_CLASSIFICATION	4.6720941283278305E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999951646867882	WITHOUT_CLASSIFICATION	4.835313211827002E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999813420251914	WITHOUT_CLASSIFICATION	1.8657974808575956E-5	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999984377864242	WITHOUT_CLASSIFICATION	1.562213575830646E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999618094919522	WITHOUT_CLASSIFICATION	3.819050804780108E-5	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998375679702	WITHOUT_CLASSIFICATION	1.6243202981095E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999834457821845	WITHOUT_CLASSIFICATION	1.6554217815527087E-5	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999940281189356	WITHOUT_CLASSIFICATION	5.9718810644067625E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996395335932	WITHOUT_CLASSIFICATION	3.604664068847857E-7	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999751366073661	WITHOUT_CLASSIFICATION	2.4863392633958863E-5	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999961262804078	WITHOUT_CLASSIFICATION	3.8737195921840854E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999993751452222	WITHOUT_CLASSIFICATION	6.248547778108094E-7	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999812730836571	WITHOUT_CLASSIFICATION	1.8726916342830828E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999911909413927	WITHOUT_CLASSIFICATION	8.809058607283148E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997058437861255	WITHOUT_CLASSIFICATION	2.9415621387452265E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.999998192830195	WITHOUT_CLASSIFICATION	1.8071698051060065E-6	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999996261710538	WITHOUT_CLASSIFICATION	3.7382894626687917E-7	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999740328932778	WITHOUT_CLASSIFICATION	2.5967106722236145E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999978368216166	WITHOUT_CLASSIFICATION	2.163178383505309E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999991948736557	WITHOUT_CLASSIFICATION	8.051263442355792E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998030456898607	WITHOUT_CLASSIFICATION	1.9695431013922655E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999978984952778	WITHOUT_CLASSIFICATION	2.1015047222922286E-6	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999960618924602	WITHOUT_CLASSIFICATION	3.938107539805677E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999963345756211	WITHOUT_CLASSIFICATION	3.6654243789156543E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999993389641462	WITHOUT_CLASSIFICATION	6.610358538051507E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999979448804008	WITHOUT_CLASSIFICATION	2.0551195992156763E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999990221889994	WITHOUT_CLASSIFICATION	9.778110006452706E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999245330051	WITHOUT_CLASSIFICATION	7.546699487443408E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999453699863474	WITHOUT_CLASSIFICATION	5.4630013652519365E-5	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999206224122219	WITHOUT_CLASSIFICATION	7.937758777815748E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999982715594522	WITHOUT_CLASSIFICATION	1.7284405478329784E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999184785181857	WITHOUT_CLASSIFICATION	8.152148181420325E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998987631346	WITHOUT_CLASSIFICATION	1.012368654413579E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999976498321937	WITHOUT_CLASSIFICATION	2.3501678062122134E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999992222144902	WITHOUT_CLASSIFICATION	7.777855098088239E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999917200361425	WITHOUT_CLASSIFICATION	8.279963857434138E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999687434863498	WITHOUT_CLASSIFICATION	3.125651365022078E-5	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999981643527104	WITHOUT_CLASSIFICATION	1.8356472897088778E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999966929069529	WITHOUT_CLASSIFICATION	3.307093047107936E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999995503101179	WITHOUT_CLASSIFICATION	4.4968988215034363E-7	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999269922898604	WITHOUT_CLASSIFICATION	7.300771013970107E-5	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999974956446394	WITHOUT_CLASSIFICATION	2.5043553606817806E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999936329259356	WITHOUT_CLASSIFICATION	6.367074064361978E-6	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999936555715384	WITHOUT_CLASSIFICATION	6.3444284615574015E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999911909413927	WITHOUT_CLASSIFICATION	8.809058607283148E-6	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999991303912278	WITHOUT_CLASSIFICATION	8.696087721688431E-7	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999922990717	WITHOUT_CLASSIFICATION	7.700928309151684E-9	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999956031751294	WITHOUT_CLASSIFICATION	4.396824870635282E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999911909413927	WITHOUT_CLASSIFICATION	8.809058607283148E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999934126821278	WITHOUT_CLASSIFICATION	6.58731787213608E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999992222144902	WITHOUT_CLASSIFICATION	7.777855098088239E-7	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9997956809575628	WITHOUT_CLASSIFICATION	2.0431904243728958E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999242567986754	WITHOUT_CLASSIFICATION	7.5743201324665E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999950699506971	WITHOUT_CLASSIFICATION	4.930049303010401E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999963345756211	WITHOUT_CLASSIFICATION	3.6654243789156543E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999993389641462	WITHOUT_CLASSIFICATION	6.610358538051507E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999979448804008	WITHOUT_CLASSIFICATION	2.0551195992156763E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999118398528	WITHOUT_CLASSIFICATION	8.81601472203408E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999946184860616	WITHOUT_CLASSIFICATION	5.381513938398199E-6	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998587217866	WITHOUT_CLASSIFICATION	1.4127821338472658E-7	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999987968780948	WITHOUT_CLASSIFICATION	1.203121905273542E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999995306526521	WITHOUT_CLASSIFICATION	4.6934734787332185E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999911909413927	WITHOUT_CLASSIFICATION	8.809058607283148E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999990221889994	WITHOUT_CLASSIFICATION	9.778110006452706E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999999245330051	WITHOUT_CLASSIFICATION	7.546699487443408E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998536550749	WITHOUT_CLASSIFICATION	1.4634492498414621E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999641891858	WITHOUT_CLASSIFICATION	3.581081418687024E-8	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999995309268592	WITHOUT_CLASSIFICATION	4.690731407916947E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999947628453998	WITHOUT_CLASSIFICATION	5.23715460017732E-6	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999986597640806	WITHOUT_CLASSIFICATION	1.3402359193253513E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999883611585422	WITHOUT_CLASSIFICATION	1.1638841457904382E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989597318196	WITHOUT_CLASSIFICATION	1.04026818034357E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999991210198468	WITHOUT_CLASSIFICATION	8.789801531988429E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999877367001232	WITHOUT_CLASSIFICATION	1.2263299876817401E-5	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999938074203268	WITHOUT_CLASSIFICATION	6.1925796731983455E-6	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998783695208	WITHOUT_CLASSIFICATION	1.216304792338825E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999979374801428	WITHOUT_CLASSIFICATION	2.06251985717958E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981475140849	WITHOUT_CLASSIFICATION	1.852485914998499E-6	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983410546548	WITHOUT_CLASSIFICATION	1.6589453451964921E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996047436692	WITHOUT_CLASSIFICATION	3.952563307480355E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999979374801428	WITHOUT_CLASSIFICATION	2.06251985717958E-6	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999995520903293	WITHOUT_CLASSIFICATION	4.479096707988374E-7	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997061965465	WITHOUT_CLASSIFICATION	2.9380345350051487E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996038698789	WITHOUT_CLASSIFICATION	3.9613012107127364E-7	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961314152193	WITHOUT_CLASSIFICATION	3.86858478072584E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.999996536882208	WITHOUT_CLASSIFICATION	3.463117792114915E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999349799724809	WITHOUT_CLASSIFICATION	6.502002751898142E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999946020234	WITHOUT_CLASSIFICATION	5.3979765981388935E-8	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994282850269	WITHOUT_CLASSIFICATION	5.717149730738599E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999996395335932	WITHOUT_CLASSIFICATION	3.604664068847857E-7	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999947157691663	WITHOUT_CLASSIFICATION	5.2842308337127745E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999955840781754	WITHOUT_CLASSIFICATION	4.415921824600262E-5	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999986200449698	WITHOUT_CLASSIFICATION	1.3799550301754214E-6	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999616151306602	WITHOUT_CLASSIFICATION	3.838486933995125E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999979177552604	WITHOUT_CLASSIFICATION	2.08224473962994E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999988178652747	WITHOUT_CLASSIFICATION	1.182134725352726E-6	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998575246191908	WITHOUT_CLASSIFICATION	1.4247538080916023E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999997063612767	WITHOUT_CLASSIFICATION	2.9363872332214267E-7	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999918357310433	WITHOUT_CLASSIFICATION	8.16426895661319E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999986901785588	WITHOUT_CLASSIFICATION	1.309821441232641E-6	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999982581392359	WITHOUT_CLASSIFICATION	1.7418607639816577E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999999420556441	WITHOUT_CLASSIFICATION	5.794435591150209E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999706691394	WITHOUT_CLASSIFICATION	2.9330860544283313E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999929460773864	WITHOUT_CLASSIFICATION	7.053922613549814E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985655788852	WITHOUT_CLASSIFICATION	1.4344211147853955E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963895980502	WITHOUT_CLASSIFICATION	3.610401949755335E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999957205149321	WITHOUT_CLASSIFICATION	4.2794850679509135E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999966024950276	WITHOUT_CLASSIFICATION	3.397504972442806E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998528821576244	WITHOUT_CLASSIFICATION	1.471178423756241E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999740962838232	WITHOUT_CLASSIFICATION	2.5903716176797075E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999921089597205	WITHOUT_CLASSIFICATION	7.891040279506103E-6	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99998804561477	WITHOUT_CLASSIFICATION	1.1954385230049785E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999941448474976	WITHOUT_CLASSIFICATION	5.855152502398237E-6	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999962808402036	WITHOUT_CLASSIFICATION	3.71915979633213E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999975844528542	WITHOUT_CLASSIFICATION	2.415547145761663E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999824355551488	WITHOUT_CLASSIFICATION	1.756444485117045E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999983891161279	WITHOUT_CLASSIFICATION	1.6108838721042266E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985839536276	WITHOUT_CLASSIFICATION	1.4160463724060387E-6	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998412229621	WITHOUT_CLASSIFICATION	1.587770379075118E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999992215705665	WITHOUT_CLASSIFICATION	7.784294334871507E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999973516007	WITHOUT_CLASSIFICATION	2.6483992987096833E-9	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996667016117	WITHOUT_CLASSIFICATION	3.3329838831184696E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999996210759603	WITHOUT_CLASSIFICATION	3.7892403980139936E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999932840328281	WITHOUT_CLASSIFICATION	6.715967171995895E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999932826261322	WITHOUT_CLASSIFICATION	6.7173738679352095E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999999808024319	WITHOUT_CLASSIFICATION	1.9197568115509515E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999995460607619	WITHOUT_CLASSIFICATION	4.5393923809130564E-7	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999990880099566	WITHOUT_CLASSIFICATION	9.119900433234858E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999998617963121	WITHOUT_CLASSIFICATION	1.3820368804816276E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999971052862292	WITHOUT_CLASSIFICATION	2.894713770745018E-6	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999989410296679	WITHOUT_CLASSIFICATION	1.0589703320722908E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999994295259706	WITHOUT_CLASSIFICATION	5.704740294021786E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999954344701824	WITHOUT_CLASSIFICATION	4.565529817695716E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999974617149239	WITHOUT_CLASSIFICATION	2.5382850761541756E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.99999998728536	WITHOUT_CLASSIFICATION	1.2714640124013792E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999105760695	WITHOUT_CLASSIFICATION	8.942393048513192E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999895488484922	WITHOUT_CLASSIFICATION	1.0451151507773956E-5	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999961063214	WITHOUT_CLASSIFICATION	3.893678596122737E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999998490931876	WITHOUT_CLASSIFICATION	1.5090681241163437E-7	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999981096623741	WITHOUT_CLASSIFICATION	1.8903376258560944E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999954847148014	WITHOUT_CLASSIFICATION	4.515285198706795E-6	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999986451119202	WITHOUT_CLASSIFICATION	1.3548880798901584E-6	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999751471505635	WITHOUT_CLASSIFICATION	2.4852849436650093E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999992354319692	WITHOUT_CLASSIFICATION	7.645680307712541E-7	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999995817127809	WITHOUT_CLASSIFICATION	4.1828721913542563E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998745251636	WITHOUT_CLASSIFICATION	1.2547483645294496E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999986743310496	WITHOUT_CLASSIFICATION	1.3256689503292801E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999997488397533	WITHOUT_CLASSIFICATION	2.511602466754585E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999995250797348	WITHOUT_CLASSIFICATION	4.7492026519823406E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999990082630941	WITHOUT_CLASSIFICATION	9.91736905915002E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999996576325644	WITHOUT_CLASSIFICATION	3.4236743557884265E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999622094292845	WITHOUT_CLASSIFICATION	3.779057071552795E-5	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999958235593129	WITHOUT_CLASSIFICATION	4.176440687102978E-6	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999714635532659	WITHOUT_CLASSIFICATION	2.8536446733954245E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999995077513794	WITHOUT_CLASSIFICATION	4.922486205973092E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999945417567191	WITHOUT_CLASSIFICATION	5.458243280907679E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999980251482684	WITHOUT_CLASSIFICATION	1.9748517316889375E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999948996800705	WITHOUT_CLASSIFICATION	5.100319929514847E-6	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.999945206396469	WITHOUT_CLASSIFICATION	5.479360353092636E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999645040145207	WITHOUT_CLASSIFICATION	3.549598547930963E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999968748118935	WITHOUT_CLASSIFICATION	3.125188106512363E-6	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.999831508471024	WITHOUT_CLASSIFICATION	1.684915289760764E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999905387667664	WITHOUT_CLASSIFICATION	9.461233233655265E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.999181151586702	WITHOUT_CLASSIFICATION	8.188484132981385E-4	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999607540744	WITHOUT_CLASSIFICATION	3.924592561501444E-8	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999934516621946	WITHOUT_CLASSIFICATION	6.54833780545804E-6	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999823032690017	WITHOUT_CLASSIFICATION	1.769673099828324E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999870763566571	WITHOUT_CLASSIFICATION	1.2923643342802178E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999981792360156	WITHOUT_CLASSIFICATION	1.8207639843620492E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999803510841464	WITHOUT_CLASSIFICATION	1.9648915853594876E-5	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999744285732722	WITHOUT_CLASSIFICATION	2.557142672781476E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999929124253221	WITHOUT_CLASSIFICATION	7.0875746779998115E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999994281771902	WITHOUT_CLASSIFICATION	5.718228097562017E-7	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999957306921553	WITHOUT_CLASSIFICATION	4.269307844671098E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999518246147214	WITHOUT_CLASSIFICATION	4.817538527848298E-5	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999995911066926	WITHOUT_CLASSIFICATION	4.0889330743999E-7	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999579680463	WITHOUT_CLASSIFICATION	4.203195377566622E-8	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999813370793015	WITHOUT_CLASSIFICATION	1.866292069855551E-5	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997677326383912	WITHOUT_CLASSIFICATION	2.3226736160871663E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999990787951878	WITHOUT_CLASSIFICATION	9.21204812135196E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999589945659342	WITHOUT_CLASSIFICATION	4.100543406592234E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999948783205381	WITHOUT_CLASSIFICATION	5.121679461858735E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999902721734849	WITHOUT_CLASSIFICATION	9.727826515091572E-6	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998917651706436	WITHOUT_CLASSIFICATION	1.0823482935630788E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999980612851149	WITHOUT_CLASSIFICATION	1.938714885033444E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999790528133508	WITHOUT_CLASSIFICATION	2.0947186649312692E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999974138839072	WITHOUT_CLASSIFICATION	2.5861160927845436E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999866891153	WITHOUT_CLASSIFICATION	1.3310884737731525E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999751749857066	WITHOUT_CLASSIFICATION	2.4825014293426794E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999828683617666	WITHOUT_CLASSIFICATION	1.7131638233401265E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999963792911672	WITHOUT_CLASSIFICATION	3.6207088327283426E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999751749857066	WITHOUT_CLASSIFICATION	2.4825014293426794E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998810937644	WITHOUT_CLASSIFICATION	1.1890623561976444E-7	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999978096760253	WITHOUT_CLASSIFICATION	2.1903239747740525E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999998316942745	WITHOUT_CLASSIFICATION	1.6830572556294978E-7	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999908990732552	WITHOUT_CLASSIFICATION	9.100926744700097E-6	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999921483305559	WITHOUT_CLASSIFICATION	7.851669444165173E-6	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999669946533	WITHOUT_CLASSIFICATION	3.3005346633818245E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998841758938111	WITHOUT_CLASSIFICATION	1.1582410618897147E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999996928978302	WITHOUT_CLASSIFICATION	3.071021697850283E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999656549241144	WITHOUT_CLASSIFICATION	3.4345075885616635E-5	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999819492126041	WITHOUT_CLASSIFICATION	1.8050787395936462E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999998851326888	WITHOUT_CLASSIFICATION	1.1486731119650044E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999994043226511	WITHOUT_CLASSIFICATION	5.956773489980172E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999997308608354	WITHOUT_CLASSIFICATION	2.691391646733847E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999029475739	WITHOUT_CLASSIFICATION	9.705242608658111E-8	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999334863646279	WITHOUT_CLASSIFICATION	6.651363537212474E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999855265771599	WITHOUT_CLASSIFICATION	1.4473422840067309E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999022819930824	WITHOUT_CLASSIFICATION	9.771800691758784E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999022819930824	WITHOUT_CLASSIFICATION	9.771800691758784E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999811303917732	WITHOUT_CLASSIFICATION	1.886960822687226E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9998656573782724	WITHOUT_CLASSIFICATION	1.3434262172758827E-4	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998064658272183	WITHOUT_CLASSIFICATION	1.935341727815571E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999651936803828	WITHOUT_CLASSIFICATION	3.480631961710741E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999991806859949	WITHOUT_CLASSIFICATION	8.193140050385286E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9919726999814183	WITHOUT_CLASSIFICATION	0.008027300018581601	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998898631824603	WITHOUT_CLASSIFICATION	1.1013681753971349E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999994850038213	WITHOUT_CLASSIFICATION	5.149961786716164E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999973515846028	WITHOUT_CLASSIFICATION	2.6484153971790917E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999950517317248	WITHOUT_CLASSIFICATION	4.9482682751974096E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999358771758	WITHOUT_CLASSIFICATION	6.412282414315906E-8	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999903319335	WITHOUT_CLASSIFICATION	9.668066437730546E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999848640968724	WITHOUT_CLASSIFICATION	1.5135903127691877E-5	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999886890165968	WITHOUT_CLASSIFICATION	1.1310983403284539E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999970544524684	WITHOUT_CLASSIFICATION	2.9455475316116816E-6	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999929460773864	WITHOUT_CLASSIFICATION	7.053922613549814E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999919173725645	WITHOUT_CLASSIFICATION	8.082627435478068E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999921822201594	WITHOUT_CLASSIFICATION	7.817779840618329E-6	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999792360911618	WITHOUT_CLASSIFICATION	2.0763908838196916E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999962128869423	WITHOUT_CLASSIFICATION	3.7871130575941504E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999142963533563	WITHOUT_CLASSIFICATION	8.570364664380825E-5	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999917859427898	WITHOUT_CLASSIFICATION	8.214057210222843E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998363392965	WITHOUT_CLASSIFICATION	1.6366070343219454E-7	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998366877982	WITHOUT_CLASSIFICATION	1.6331220164669307E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997313321511	WITHOUT_CLASSIFICATION	2.6866784882017646E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999995306046375	WITHOUT_CLASSIFICATION	4.6939536242439344E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999668063031	WITHOUT_CLASSIFICATION	3.31936969217108E-8	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999977725135846	WITHOUT_CLASSIFICATION	2.227486415428814E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999956890604015	WITHOUT_CLASSIFICATION	4.310939598450267E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999867781213282	WITHOUT_CLASSIFICATION	1.3221878671744201E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999984848801396	WITHOUT_CLASSIFICATION	1.515119860374252E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999804305528537	WITHOUT_CLASSIFICATION	1.9569447146340606E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999833216227981	WITHOUT_CLASSIFICATION	1.6678377201866362E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999727228660781	WITHOUT_CLASSIFICATION	2.7277133921880658E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999736258584772	WITHOUT_CLASSIFICATION	2.637414152282413E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999899396129103	WITHOUT_CLASSIFICATION	1.0060387089689041E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999986994980357	WITHOUT_CLASSIFICATION	1.300501964308277E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999760277912566	WITHOUT_CLASSIFICATION	2.397220874343193E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997131060337	WITHOUT_CLASSIFICATION	2.8689396615439355E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999940090537859	WITHOUT_CLASSIFICATION	5.990946214097105E-6	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996013898139253	WITHOUT_CLASSIFICATION	3.9861018607460265E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999995480103141	WITHOUT_CLASSIFICATION	4.5198968582049645E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999967731761325	WITHOUT_CLASSIFICATION	3.226823867490969E-5	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999997719124828	WITHOUT_CLASSIFICATION	2.2808751720899243E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9998784616089004	WITHOUT_CLASSIFICATION	1.2153839109957985E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999991071210642	WITHOUT_CLASSIFICATION	8.92878935711971E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985681622185	WITHOUT_CLASSIFICATION	1.4318377814504302E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977046987175	WITHOUT_CLASSIFICATION	2.2953012824576583E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992805695509	WITHOUT_CLASSIFICATION	7.194304491575878E-7	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999998547496023	WITHOUT_CLASSIFICATION	1.4525039776307477E-7	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999991136729858	WITHOUT_CLASSIFICATION	8.86327014298467E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999926333957203	WITHOUT_CLASSIFICATION	7.36660427967315E-6	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999789818694	WITHOUT_CLASSIFICATION	2.1018130477132334E-8	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999765293948457	WITHOUT_CLASSIFICATION	2.3470605154325783E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971594882436	WITHOUT_CLASSIFICATION	2.840511756362781E-6	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999765293948457	WITHOUT_CLASSIFICATION	2.3470605154325783E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999665548374466	WITHOUT_CLASSIFICATION	3.3445162553368073E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.999998992304464	WITHOUT_CLASSIFICATION	1.0076955360669012E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.999998722923895	WITHOUT_CLASSIFICATION	1.2770761049290382E-6	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999990699259614	WITHOUT_CLASSIFICATION	9.300740386082508E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999122188110734	WITHOUT_CLASSIFICATION	8.778118892660574E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999287927648809	WITHOUT_CLASSIFICATION	7.120723511912763E-5	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999973735200829	WITHOUT_CLASSIFICATION	2.6264799171131696E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999100696428977	WITHOUT_CLASSIFICATION	8.993035710216754E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999994959004216	WITHOUT_CLASSIFICATION	5.040995783497516E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999998350667786	WITHOUT_CLASSIFICATION	1.6493322130920842E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999942812147024	WITHOUT_CLASSIFICATION	5.718785297557725E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999505262471	WITHOUT_CLASSIFICATION	4.947375280758121E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.99992970580231	WITHOUT_CLASSIFICATION	7.029419768999198E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9995994367664451	WITHOUT_CLASSIFICATION	4.005632335547974E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999796335304475	WITHOUT_CLASSIFICATION	2.036646955247263E-5	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999792187073	WITHOUT_CLASSIFICATION	2.078129263497615E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999767730117238	WITHOUT_CLASSIFICATION	2.322698827613113E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999767730117238	WITHOUT_CLASSIFICATION	2.322698827613113E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999930366165913	WITHOUT_CLASSIFICATION	6.963383408729965E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999998776664488	WITHOUT_CLASSIFICATION	1.2233355125022E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999983501258157	WITHOUT_CLASSIFICATION	1.6498741842165643E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997019571011	WITHOUT_CLASSIFICATION	2.9804289890796386E-7	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999999854676156	WITHOUT_CLASSIFICATION	1.4532384326299834E-8	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999999805889303	WITHOUT_CLASSIFICATION	1.9411069687510975E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999440291994885	WITHOUT_CLASSIFICATION	5.597080051151224E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999954554875998	WITHOUT_CLASSIFICATION	4.544512400206466E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999991023356791	WITHOUT_CLASSIFICATION	8.976643209094435E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999994827964835	WITHOUT_CLASSIFICATION	5.172035163925406E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999427535061	WITHOUT_CLASSIFICATION	5.724649380748934E-8	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999994664643	WITHOUT_CLASSIFICATION	5.33535656702881E-10	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999659227309	WITHOUT_CLASSIFICATION	3.4077269143441083E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998840555225	WITHOUT_CLASSIFICATION	1.1594447737852339E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999996112853318	WITHOUT_CLASSIFICATION	3.887146682293079E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999984524624563	WITHOUT_CLASSIFICATION	1.5475375436092373E-6	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999998619543264	WITHOUT_CLASSIFICATION	1.380456736137264E-6	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999993795042736	WITHOUT_CLASSIFICATION	6.204957263902654E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999843517839452	WITHOUT_CLASSIFICATION	1.564821605480244E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998295360345	WITHOUT_CLASSIFICATION	1.7046396543153882E-7	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999986693840166	WITHOUT_CLASSIFICATION	1.3306159834570654E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999995893754908	WITHOUT_CLASSIFICATION	4.106245092083188E-7	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999994797590444	WITHOUT_CLASSIFICATION	5.202409557408375E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999981734597355	WITHOUT_CLASSIFICATION	1.826540264442331E-6	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999881012786663	WITHOUT_CLASSIFICATION	1.1898721333630939E-5	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999925283434201	WITHOUT_CLASSIFICATION	7.4716565799859295E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999893810308147	WITHOUT_CLASSIFICATION	1.0618969185275609E-5	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997022414991142	WITHOUT_CLASSIFICATION	2.977585008857288E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999968258224554	WITHOUT_CLASSIFICATION	3.1741775446601062E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999442698212759	WITHOUT_CLASSIFICATION	5.57301787240976E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999942748756901	WITHOUT_CLASSIFICATION	5.725124309811607E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999937070005295	WITHOUT_CLASSIFICATION	6.292999470644696E-6	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9989099085000183	WITHOUT_CLASSIFICATION	0.0010900914999817171	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998846350514939	WITHOUT_CLASSIFICATION	1.1536494850606288E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999161121191212	WITHOUT_CLASSIFICATION	8.388788087870596E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999999198240197	WITHOUT_CLASSIFICATION	8.017598028760188E-7	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999894320748751	WITHOUT_CLASSIFICATION	1.0567925124961217E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999637236983524	WITHOUT_CLASSIFICATION	3.6276301647661984E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999994871743224	WITHOUT_CLASSIFICATION	5.128256775557391E-7	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999961100992711	WITHOUT_CLASSIFICATION	3.8899007288057E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999894996623651	WITHOUT_CLASSIFICATION	1.0500337634833396E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990011196965	WITHOUT_CLASSIFICATION	9.988803035279858E-7	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999923848539584	WITHOUT_CLASSIFICATION	7.615146041625326E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999675917131872	WITHOUT_CLASSIFICATION	3.2408286812807356E-5	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999716601266	WITHOUT_CLASSIFICATION	2.833987347934521E-8	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999999864907519	WITHOUT_CLASSIFICATION	1.3509248097991386E-7	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999904622445168	WITHOUT_CLASSIFICATION	9.537755483199822E-6	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999788238817	WITHOUT_CLASSIFICATION	2.1176118212838288E-8	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999999803973728	WITHOUT_CLASSIFICATION	1.9602627190095225E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999998608317326	WITHOUT_CLASSIFICATION	1.3916826731917142E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987405209592	WITHOUT_CLASSIFICATION	1.2594790408090877E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999366152218	WITHOUT_CLASSIFICATION	6.338477815920638E-8	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999848249027055	WITHOUT_CLASSIFICATION	1.5175097294605354E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999958117726828	WITHOUT_CLASSIFICATION	4.1882273170972E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999898413220635	WITHOUT_CLASSIFICATION	1.0158677936496073E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999934126821278	WITHOUT_CLASSIFICATION	6.58731787213608E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999934126821278	WITHOUT_CLASSIFICATION	6.58731787213608E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999825400379442	WITHOUT_CLASSIFICATION	1.745996205579008E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999321710051902	WITHOUT_CLASSIFICATION	6.782899480981924E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999935581119616	WITHOUT_CLASSIFICATION	6.441888038511974E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999967482491321	WITHOUT_CLASSIFICATION	3.25175086797834E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999977854804395	WITHOUT_CLASSIFICATION	2.2145195605349284E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999996503878792	WITHOUT_CLASSIFICATION	3.4961212079999226E-7	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999494865386	WITHOUT_CLASSIFICATION	5.0513461331775866E-8	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999540424057216	WITHOUT_CLASSIFICATION	4.5957594278334016E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999996662440399	WITHOUT_CLASSIFICATION	3.3375596016742003E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999912474046957	WITHOUT_CLASSIFICATION	8.752595304257258E-6	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999906897111844	WITHOUT_CLASSIFICATION	9.310288815477535E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.99993450940028	WITHOUT_CLASSIFICATION	6.54905997200288E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999677377883535	WITHOUT_CLASSIFICATION	3.2262211646541476E-5	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999691085443	WITHOUT_CLASSIFICATION	3.0891455712404807E-7	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999982675106165	WITHOUT_CLASSIFICATION	1.7324893835104E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999702142266933	WITHOUT_CLASSIFICATION	2.9785773306784188E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989066732388	WITHOUT_CLASSIFICATION	1.093326761283563E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999942648898452	WITHOUT_CLASSIFICATION	5.735110154748929E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999209098096443	WITHOUT_CLASSIFICATION	7.90901903556811E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999996025240037	WITHOUT_CLASSIFICATION	3.974759963092583E-6	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999965402387	WITHOUT_CLASSIFICATION	3.4597611515590634E-9	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999895074136034	WITHOUT_CLASSIFICATION	1.0492586396637762E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999097379712438	WITHOUT_CLASSIFICATION	9.026202875615831E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998463324858655	WITHOUT_CLASSIFICATION	1.536675141344679E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9984793200078751	WITHOUT_CLASSIFICATION	0.0015206799921248203	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9989872092323511	WITHOUT_CLASSIFICATION	0.0010127907676489919	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999965211761728	WITHOUT_CLASSIFICATION	3.4788238272722023E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9987374161291719	WITHOUT_CLASSIFICATION	0.001262583870828013	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999995748518212	WITHOUT_CLASSIFICATION	4.251481788556058E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999097379712438	WITHOUT_CLASSIFICATION	9.026202875615831E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999858876345702	WITHOUT_CLASSIFICATION	1.4112365429731603E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9997743241268625	WITHOUT_CLASSIFICATION	2.2567587313751536E-4	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999240936622262	WITHOUT_CLASSIFICATION	7.590633777381998E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999971172408634	WITHOUT_CLASSIFICATION	2.882759136710348E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999998942109788	WITHOUT_CLASSIFICATION	1.0578902119517081E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999991165085483	WITHOUT_CLASSIFICATION	8.834914517232326E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999106081873	WITHOUT_CLASSIFICATION	8.93918127157635E-8	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999249410528	WITHOUT_CLASSIFICATION	7.505894713389877E-8	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999995553047257	WITHOUT_CLASSIFICATION	4.446952741996026E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999971172408634	WITHOUT_CLASSIFICATION	2.882759136710348E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999997688108049	WITHOUT_CLASSIFICATION	2.3118919513664506E-7	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998670331307	WITHOUT_CLASSIFICATION	1.3296686932535738E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999987840491563	WITHOUT_CLASSIFICATION	1.2159508436936854E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999243244587225	WITHOUT_CLASSIFICATION	7.567554127749441E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999999382661833	WITHOUT_CLASSIFICATION	6.173381670120631E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999427535061	WITHOUT_CLASSIFICATION	5.724649380748934E-8	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999942378296967	WITHOUT_CLASSIFICATION	5.7621703033365525E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999960086005185	WITHOUT_CLASSIFICATION	3.9913994815684656E-6	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999990122585928	WITHOUT_CLASSIFICATION	9.87741407118309E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999949740849396	WITHOUT_CLASSIFICATION	5.025915060337706E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999751537605708	WITHOUT_CLASSIFICATION	2.4846239429281345E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999931276753108	WITHOUT_CLASSIFICATION	6.872324689116436E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999977670449157	WITHOUT_CLASSIFICATION	2.2329550842687637E-6	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999981064811481	WITHOUT_CLASSIFICATION	1.8935188518247903E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999766132848404	WITHOUT_CLASSIFICATION	2.338671515956947E-5	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999991995942611	WITHOUT_CLASSIFICATION	8.004057387669435E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996936507924977	WITHOUT_CLASSIFICATION	3.063492075023436E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999996308612619	WITHOUT_CLASSIFICATION	3.6913873812707274E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999995470513016	WITHOUT_CLASSIFICATION	4.5294869840984E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999864614837105	WITHOUT_CLASSIFICATION	1.3538516289436965E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999992758028358	WITHOUT_CLASSIFICATION	7.241971642003046E-7	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999994723370066	WITHOUT_CLASSIFICATION	5.27662993306625E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999927594912049	WITHOUT_CLASSIFICATION	7.240508795065979E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999970834819746	WITHOUT_CLASSIFICATION	2.9165180255327486E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999971420199024	WITHOUT_CLASSIFICATION	2.857980097665597E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999823808471971	WITHOUT_CLASSIFICATION	1.761915280284311E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999950213679025	WITHOUT_CLASSIFICATION	4.978632097489892E-6	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999994649205999	WITHOUT_CLASSIFICATION	5.350794001844277E-7	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999997318995096	WITHOUT_CLASSIFICATION	2.6810049039821264E-7	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999996540321399	WITHOUT_CLASSIFICATION	3.4596786010020033E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999929673368911	WITHOUT_CLASSIFICATION	7.032663108921284E-6	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.999988413553941	WITHOUT_CLASSIFICATION	1.158644605904875E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999823002931253	WITHOUT_CLASSIFICATION	1.7699706874755505E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987054007216	WITHOUT_CLASSIFICATION	1.294599278491534E-6	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989441593278	WITHOUT_CLASSIFICATION	1.0558406723243163E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.999973433746035	WITHOUT_CLASSIFICATION	2.6566253965071252E-5	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999764294308044	WITHOUT_CLASSIFICATION	2.3570569195602733E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999999647450322	WITHOUT_CLASSIFICATION	3.525496780541967E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999583431292	WITHOUT_CLASSIFICATION	4.1656870973646544E-8	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998336599537994	WITHOUT_CLASSIFICATION	1.6634004620059436E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998757100235157	WITHOUT_CLASSIFICATION	1.2428997648431114E-4	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999995944273364	WITHOUT_CLASSIFICATION	4.055726635474127E-7	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999994597008685	WITHOUT_CLASSIFICATION	5.402991316312764E-7	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9999110070177716	WITHOUT_CLASSIFICATION	8.899298222833055E-5	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999703220599859	WITHOUT_CLASSIFICATION	2.9677940014122823E-5	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999885106435162	WITHOUT_CLASSIFICATION	1.1489356483757028E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999987915649201	WITHOUT_CLASSIFICATION	1.208435079834522E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999119719897	WITHOUT_CLASSIFICATION	8.802801041922111E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999709144655179	WITHOUT_CLASSIFICATION	2.908553448210431E-5	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999975385895568	WITHOUT_CLASSIFICATION	2.4614104432191547E-6	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999997828178407	WITHOUT_CLASSIFICATION	2.1718215927698887E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999783863925618	WITHOUT_CLASSIFICATION	2.16136074382444E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999982150186282	WITHOUT_CLASSIFICATION	1.7849813718172952E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995994685769033	WITHOUT_CLASSIFICATION	4.005314230967253E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998976254636	WITHOUT_CLASSIFICATION	1.0237453645544677E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999983427524856	WITHOUT_CLASSIFICATION	1.6572475143434013E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999738003733738	WITHOUT_CLASSIFICATION	2.619962662615347E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999989280062258	WITHOUT_CLASSIFICATION	1.0719937741396486E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999992409063687	WITHOUT_CLASSIFICATION	7.59093631232519E-7	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999991419544895	WITHOUT_CLASSIFICATION	8.580455105822051E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999997081263179	WITHOUT_CLASSIFICATION	2.918736821177583E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999978036300721	WITHOUT_CLASSIFICATION	2.1963699280217302E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987054007216	WITHOUT_CLASSIFICATION	1.294599278491534E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999954819335771	WITHOUT_CLASSIFICATION	4.518066422901365E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997924493238	WITHOUT_CLASSIFICATION	2.0755067622523733E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991885955	WITHOUT_CLASSIFICATION	8.114044999902394E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999932655225819	WITHOUT_CLASSIFICATION	6.734477418030283E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999826751572959	WITHOUT_CLASSIFICATION	1.7324842704091688E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999861013414899	WITHOUT_CLASSIFICATION	1.3898658510051385E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995981853488	WITHOUT_CLASSIFICATION	4.0181465116997707E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993198890404	WITHOUT_CLASSIFICATION	6.801109596142337E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999754849047	WITHOUT_CLASSIFICATION	2.451509523547401E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999998700103021	WITHOUT_CLASSIFICATION	1.299896979266859E-7	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998786963362	WITHOUT_CLASSIFICATION	1.213036638347766E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999419558540841	WITHOUT_CLASSIFICATION	5.804414591588787E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999784476837	WITHOUT_CLASSIFICATION	2.1552316230600992E-8	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999964417257718	WITHOUT_CLASSIFICATION	3.558274228199111E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999665548374466	WITHOUT_CLASSIFICATION	3.3445162553368073E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997352554366	WITHOUT_CLASSIFICATION	2.6474456339540685E-7	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999079838234	WITHOUT_CLASSIFICATION	9.20161765051076E-8	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999993944004968	WITHOUT_CLASSIFICATION	6.055995032464422E-7	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999985871011211	WITHOUT_CLASSIFICATION	1.4128988788583423E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999820590622	WITHOUT_CLASSIFICATION	1.7940937864427035E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999991327021325	WITHOUT_CLASSIFICATION	8.672978675137946E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999991327021325	WITHOUT_CLASSIFICATION	8.672978675137946E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999969240192463	WITHOUT_CLASSIFICATION	3.0759807536064635E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999981572997673	WITHOUT_CLASSIFICATION	1.8427002326310543E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999967981808779	WITHOUT_CLASSIFICATION	3.201819122106892E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999975163984414	WITHOUT_CLASSIFICATION	2.4836015587053656E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999931294993529	WITHOUT_CLASSIFICATION	6.870500647098437E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999925761035641	WITHOUT_CLASSIFICATION	7.423896435863217E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999816265437249	WITHOUT_CLASSIFICATION	1.837345627505496E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998615522223	WITHOUT_CLASSIFICATION	1.3844777768840325E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999998615522223	WITHOUT_CLASSIFICATION	1.3844777768840325E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999889755873727	WITHOUT_CLASSIFICATION	1.1024412627400221E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999974123120526	WITHOUT_CLASSIFICATION	2.5876879473910254E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999970624239918	WITHOUT_CLASSIFICATION	2.9375760081162348E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994290686516	WITHOUT_CLASSIFICATION	5.70931348429413E-7	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994290686516	WITHOUT_CLASSIFICATION	5.70931348429413E-7	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999994290686516	WITHOUT_CLASSIFICATION	5.70931348429413E-7	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998346238517887	WITHOUT_CLASSIFICATION	1.6537614821133896E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999998770546034	WITHOUT_CLASSIFICATION	1.2294539675153327E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999275694791	WITHOUT_CLASSIFICATION	7.243052084964353E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999946763742739	WITHOUT_CLASSIFICATION	5.323625726235819E-6	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999950263278303	WITHOUT_CLASSIFICATION	4.9736721697156E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999888073313	WITHOUT_CLASSIFICATION	1.1192668617775976E-8	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999414904648	WITHOUT_CLASSIFICATION	5.8509535212702804E-8	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999883974564215	WITHOUT_CLASSIFICATION	1.1602543578420179E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999991280803388	WITHOUT_CLASSIFICATION	8.719196612240927E-7	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999942204125692	WITHOUT_CLASSIFICATION	5.779587430736943E-6	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999954751323648	WITHOUT_CLASSIFICATION	4.5248676352368856E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999604583625001	WITHOUT_CLASSIFICATION	3.9541637499758745E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999990376506624	WITHOUT_CLASSIFICATION	9.623493375773957E-7	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999973591085205	WITHOUT_CLASSIFICATION	2.640891479540262E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999975391976236	WITHOUT_CLASSIFICATION	2.4608023763815015E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999942140402226	WITHOUT_CLASSIFICATION	5.785959777461129E-6	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999635486863618	WITHOUT_CLASSIFICATION	3.645131363814444E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999635486863618	WITHOUT_CLASSIFICATION	3.645131363814444E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999776001259189	WITHOUT_CLASSIFICATION	2.239987408117304E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999776001259189	WITHOUT_CLASSIFICATION	2.239987408117304E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999785702219638	WITHOUT_CLASSIFICATION	2.142977803621243E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999770198561649	WITHOUT_CLASSIFICATION	2.2980143835046823E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999770198561649	WITHOUT_CLASSIFICATION	2.2980143835046823E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999930252642854	WITHOUT_CLASSIFICATION	6.974735714682848E-6	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999879091007833	WITHOUT_CLASSIFICATION	1.2090899216859125E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999964205464343	WITHOUT_CLASSIFICATION	3.5794535657073583E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999991327021325	WITHOUT_CLASSIFICATION	8.672978675137946E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999930265238341	WITHOUT_CLASSIFICATION	6.9734761657783945E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999879091007833	WITHOUT_CLASSIFICATION	1.2090899216859125E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9992207653035049	WITHOUT_CLASSIFICATION	7.792346964950559E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999945468937385	WITHOUT_CLASSIFICATION	5.453106261613956E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999909094611028	WITHOUT_CLASSIFICATION	9.090538897226723E-6	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999941676235096	WITHOUT_CLASSIFICATION	5.832376490432658E-6	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999973330933071	WITHOUT_CLASSIFICATION	2.6669066928354535E-6	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999979074357789	WITHOUT_CLASSIFICATION	2.092564221074349E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999945453239776	WITHOUT_CLASSIFICATION	5.454676022478657E-6	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999908991741739	WITHOUT_CLASSIFICATION	9.10082582610549E-5	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999635825047523	WITHOUT_CLASSIFICATION	3.6417495247818985E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999189627879604	WITHOUT_CLASSIFICATION	8.103721203955294E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999998261993019	WITHOUT_CLASSIFICATION	1.7380069815756046E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999904046098285	WITHOUT_CLASSIFICATION	9.595390171459834E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680926	WITHOUT_CLASSIFICATION	3.4073190740473465E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999990575494099	WITHOUT_CLASSIFICATION	9.424505900687196E-7	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999841178646206	WITHOUT_CLASSIFICATION	1.5882135379446787E-5	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.999999309544409	WITHOUT_CLASSIFICATION	6.904555911315622E-7	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999987405658359	WITHOUT_CLASSIFICATION	1.2594341641066582E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999973468239528	WITHOUT_CLASSIFICATION	2.6531760471422023E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999973468239528	WITHOUT_CLASSIFICATION	2.6531760471422023E-6	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999985654665837	WITHOUT_CLASSIFICATION	1.4345334162495193E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999970730212218	WITHOUT_CLASSIFICATION	2.9269787783201094E-6	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999991924351966	WITHOUT_CLASSIFICATION	8.075648034734428E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999977098314276	WITHOUT_CLASSIFICATION	2.290168572537975E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999995497879064	WITHOUT_CLASSIFICATION	4.5021209359036585E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999993196094971	WITHOUT_CLASSIFICATION	6.803905029862725E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999174700754	WITHOUT_CLASSIFICATION	8.252992456075564E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999979918413012	WITHOUT_CLASSIFICATION	2.008158698760481E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999880557095144	WITHOUT_CLASSIFICATION	1.1944290485547813E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999997690749061	WITHOUT_CLASSIFICATION	2.3092509390028935E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999995715592852	WITHOUT_CLASSIFICATION	4.284407147969617E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999419558540841	WITHOUT_CLASSIFICATION	5.804414591588787E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997955885658	WITHOUT_CLASSIFICATION	2.0441143432452824E-7	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.99998690604625	WITHOUT_CLASSIFICATION	1.3093953750036907E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999958822092233	WITHOUT_CLASSIFICATION	4.117790776653662E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999780316216247	WITHOUT_CLASSIFICATION	2.196837837534418E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999365771911	WITHOUT_CLASSIFICATION	6.342280896622965E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999365771911	WITHOUT_CLASSIFICATION	6.342280896622965E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999884121919648	WITHOUT_CLASSIFICATION	1.1587808035319054E-5	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999948238222126	WITHOUT_CLASSIFICATION	5.176177787374368E-6	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9998596932360827	WITHOUT_CLASSIFICATION	1.403067639172519E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998512375059149	WITHOUT_CLASSIFICATION	1.4876249408519578E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999472214419232	WITHOUT_CLASSIFICATION	5.277855807676269E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998807003519579	WITHOUT_CLASSIFICATION	1.1929964804212587E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999999809058213	WITHOUT_CLASSIFICATION	1.9094178717846474E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999834829268784	WITHOUT_CLASSIFICATION	1.651707312152889E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994918817358	WITHOUT_CLASSIFICATION	5.081182642033225E-7	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999992104268891	WITHOUT_CLASSIFICATION	7.895731108805183E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999995731026354	WITHOUT_CLASSIFICATION	4.2689736459826674E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999834829268784	WITHOUT_CLASSIFICATION	1.651707312152889E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999910301264873	WITHOUT_CLASSIFICATION	8.969873512727918E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997457314493564	WITHOUT_CLASSIFICATION	2.5426855064352203E-4	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999917591241531	WITHOUT_CLASSIFICATION	8.240875846973764E-6	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999886231095648	WITHOUT_CLASSIFICATION	1.1376890435176062E-5	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998742419122	WITHOUT_CLASSIFICATION	1.2575808793205052E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999796977522	WITHOUT_CLASSIFICATION	2.0302247790408164E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999190003734	WITHOUT_CLASSIFICATION	8.099962664639305E-8	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999970086695371	WITHOUT_CLASSIFICATION	2.991330462869263E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998542734357	WITHOUT_CLASSIFICATION	1.4572656428444417E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999654376528809	WITHOUT_CLASSIFICATION	3.456234711907748E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999989514162475	WITHOUT_CLASSIFICATION	1.0485837524703071E-6	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999972592085563	WITHOUT_CLASSIFICATION	2.740791443625188E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999995731613301	WITHOUT_CLASSIFICATION	4.268386697868099E-7	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999999773385307	WITHOUT_CLASSIFICATION	2.2661469303013732E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999816213932984	WITHOUT_CLASSIFICATION	1.837860670165804E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999992650994928	WITHOUT_CLASSIFICATION	7.34900507120336E-7	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999998988914407	WITHOUT_CLASSIFICATION	1.0110855928353545E-7	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997848393097927	WITHOUT_CLASSIFICATION	2.1516069020733182E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997800066343818	WITHOUT_CLASSIFICATION	2.1999336561825717E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999399571995	WITHOUT_CLASSIFICATION	6.004280042789602E-8	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999977369995254	WITHOUT_CLASSIFICATION	2.2630004745185176E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999998192309063	WITHOUT_CLASSIFICATION	1.807690935989307E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999773065709638	WITHOUT_CLASSIFICATION	2.2693429036203583E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999954762344019	WITHOUT_CLASSIFICATION	4.523765598174989E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999999784712281	WITHOUT_CLASSIFICATION	2.152877190395165E-7	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999905693014068	WITHOUT_CLASSIFICATION	9.43069859318453E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999989712020447	WITHOUT_CLASSIFICATION	1.0287979553240273E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999615404066	WITHOUT_CLASSIFICATION	3.845959338025003E-8	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999395485472	WITHOUT_CLASSIFICATION	6.045145279366521E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999981566201126	WITHOUT_CLASSIFICATION	1.8433798873269143E-6	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999952029301	WITHOUT_CLASSIFICATION	4.797069896260345E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999881440960268	WITHOUT_CLASSIFICATION	1.1855903973208039E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999997811583049	WITHOUT_CLASSIFICATION	2.1884169509691687E-6	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999996691164287	WITHOUT_CLASSIFICATION	3.308835712869859E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999757544613	WITHOUT_CLASSIFICATION	2.4245538621017454E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999981418388517	WITHOUT_CLASSIFICATION	1.8581611483151346E-5	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999990392152078	WITHOUT_CLASSIFICATION	9.60784792197575E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999961122504141	WITHOUT_CLASSIFICATION	3.8877495858548255E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999730232465	WITHOUT_CLASSIFICATION	2.6976753495307127E-7	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999990168713144	WITHOUT_CLASSIFICATION	9.831286856453833E-7	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999979756044993	WITHOUT_CLASSIFICATION	2.024395500656137E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999924962455667	WITHOUT_CLASSIFICATION	7.503754433303417E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999998697168301	WITHOUT_CLASSIFICATION	1.302831699525029E-7	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999995900715062	WITHOUT_CLASSIFICATION	4.099284938258626E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999047852217008	WITHOUT_CLASSIFICATION	9.521477829910702E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999992881396486	WITHOUT_CLASSIFICATION	7.118603513621236E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999093926974094	WITHOUT_CLASSIFICATION	9.060730259060146E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999986358262654	WITHOUT_CLASSIFICATION	1.3641737347346884E-6	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999957423697933	WITHOUT_CLASSIFICATION	4.257630206730758E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999931893346976	WITHOUT_CLASSIFICATION	6.810665302443445E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979534824437	WITHOUT_CLASSIFICATION	2.046517556409843E-6	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999616092585	WITHOUT_CLASSIFICATION	3.83907414325605E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998687999943	WITHOUT_CLASSIFICATION	1.3120000580724077E-7	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999573462118247	WITHOUT_CLASSIFICATION	4.265378817531836E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999299275275	WITHOUT_CLASSIFICATION	7.007247255967274E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999994521197712	WITHOUT_CLASSIFICATION	5.4788022879827415E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999984202677742	WITHOUT_CLASSIFICATION	1.57973222579203E-6	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999694147340463	WITHOUT_CLASSIFICATION	3.0585265953660725E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999987490753701	WITHOUT_CLASSIFICATION	1.2509246298179855E-6	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997489844429	WITHOUT_CLASSIFICATION	2.510155571167171E-7	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999979375266925	WITHOUT_CLASSIFICATION	2.062473307447919E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.999994945386656	WITHOUT_CLASSIFICATION	5.0546133439597905E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.99999830082993	WITHOUT_CLASSIFICATION	1.6991700699895015E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9982463348362302	WITHOUT_CLASSIFICATION	0.0017536651637697785	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997354278940643	WITHOUT_CLASSIFICATION	2.6457210593570593E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9996414131605265	WITHOUT_CLASSIFICATION	3.585868394735192E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979534824437	WITHOUT_CLASSIFICATION	2.046517556409843E-6	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999792744235608	WITHOUT_CLASSIFICATION	2.072557643919235E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999997429861025	WITHOUT_CLASSIFICATION	2.5701389756708686E-7	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9997341953394342	WITHOUT_CLASSIFICATION	2.65804660565812E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999994603098447	WITHOUT_CLASSIFICATION	5.396901552697194E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998818761513708	WITHOUT_CLASSIFICATION	1.1812384862920298E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999423600538804	WITHOUT_CLASSIFICATION	5.7639946119665335E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999994918817358	WITHOUT_CLASSIFICATION	5.081182642033225E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999788549588595	WITHOUT_CLASSIFICATION	2.114504114050113E-4	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999757544613	WITHOUT_CLASSIFICATION	2.4245538621017454E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999980190235578	WITHOUT_CLASSIFICATION	1.9809764421981907E-5	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999814056269	WITHOUT_CLASSIFICATION	1.859437310740965E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999990782185134	WITHOUT_CLASSIFICATION	9.217814866829585E-7	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999990291141446	WITHOUT_CLASSIFICATION	9.70885855355344E-7	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999995317229785	WITHOUT_CLASSIFICATION	4.6827702153510984E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9986580478067997	WITHOUT_CLASSIFICATION	0.0013419521932003177	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986009327835	WITHOUT_CLASSIFICATION	1.3990672165655223E-6	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998494327071	WITHOUT_CLASSIFICATION	1.5056729283645825E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9997890625482786	WITHOUT_CLASSIFICATION	2.1093745172150017E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999990521608885	WITHOUT_CLASSIFICATION	9.478391114966936E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992939249012	WITHOUT_CLASSIFICATION	7.060750988928017E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999996951971459	WITHOUT_CLASSIFICATION	3.048028541019936E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988750656664	WITHOUT_CLASSIFICATION	1.1249343335206654E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999988750656664	WITHOUT_CLASSIFICATION	1.1249343335206654E-6	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.99999140160661	WITHOUT_CLASSIFICATION	8.598393389917577E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999956759956127	WITHOUT_CLASSIFICATION	4.324004387338072E-6	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999989001073777	WITHOUT_CLASSIFICATION	1.0998926222943086E-6	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999822152595562	WITHOUT_CLASSIFICATION	1.7784740443740306E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999746267216	WITHOUT_CLASSIFICATION	2.537327841050141E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.999999464242651	WITHOUT_CLASSIFICATION	5.357573490298328E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999998156249038	WITHOUT_CLASSIFICATION	1.8437509616601593E-7	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999298957158734	WITHOUT_CLASSIFICATION	7.010428412649754E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999987709163346	WITHOUT_CLASSIFICATION	1.2290836654857841E-6	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999822151319	WITHOUT_CLASSIFICATION	1.7784868123321626E-8	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999993365906192	WITHOUT_CLASSIFICATION	6.634093807750031E-7	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999994364785785	WITHOUT_CLASSIFICATION	5.635214215629103E-7	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997111210933	WITHOUT_CLASSIFICATION	2.8887890661860863E-7	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999981664915506	WITHOUT_CLASSIFICATION	1.8335084493622012E-6	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999978309811179	WITHOUT_CLASSIFICATION	2.169018882002432E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999932335920808	WITHOUT_CLASSIFICATION	6.766407919152254E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.99999798191637	WITHOUT_CLASSIFICATION	2.018083629974521E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999670243178	WITHOUT_CLASSIFICATION	3.297568231768529E-8	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999998064893321	WITHOUT_CLASSIFICATION	1.93510667989989E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999786090380171	WITHOUT_CLASSIFICATION	2.1390961982891492E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991537235042057	WITHOUT_CLASSIFICATION	8.462764957942595E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999998310866292	WITHOUT_CLASSIFICATION	1.6891337091750333E-7	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999995806340114	WITHOUT_CLASSIFICATION	4.193659886743599E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999591984167809	WITHOUT_CLASSIFICATION	4.0801583219090675E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999998655010657	WITHOUT_CLASSIFICATION	1.3449893429863226E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999757990564396	WITHOUT_CLASSIFICATION	2.4200943560397464E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999987214807009	WITHOUT_CLASSIFICATION	1.2785192991010683E-6	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999995990930363	WITHOUT_CLASSIFICATION	4.009069636624118E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999877940285719	WITHOUT_CLASSIFICATION	1.2205971428188882E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999798422562893	WITHOUT_CLASSIFICATION	2.0157743710652023E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9999269922898604	WITHOUT_CLASSIFICATION	7.300771013970107E-5	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999082342954182	WITHOUT_CLASSIFICATION	9.176570458183211E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9997592629810859	WITHOUT_CLASSIFICATION	2.4073701891419056E-4	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999927427295188	WITHOUT_CLASSIFICATION	7.257270481239574E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999972256851664	WITHOUT_CLASSIFICATION	2.774314833578274E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999343125413105	WITHOUT_CLASSIFICATION	6.568745868960192E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999904701180485	WITHOUT_CLASSIFICATION	9.529881951400203E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999978920004443	WITHOUT_CLASSIFICATION	2.107999555744313E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999995912099477	WITHOUT_CLASSIFICATION	4.0879005220300285E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999969316517517	WITHOUT_CLASSIFICATION	3.0683482482487096E-6	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994294275473	WITHOUT_CLASSIFICATION	5.705724527737733E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999927596902	WITHOUT_CLASSIFICATION	7.240309731062401E-9	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998671731135585	WITHOUT_CLASSIFICATION	1.3282688644152373E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999872754365813	WITHOUT_CLASSIFICATION	1.2724563418659714E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999906090527398	WITHOUT_CLASSIFICATION	9.390947260084797E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996038698789	WITHOUT_CLASSIFICATION	3.9613012107127364E-7	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9434927056540624	WITHOUT_CLASSIFICATION	0.056507294345937535	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999988907971272	WITHOUT_CLASSIFICATION	1.109202872755572E-6	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999934620950003	WITHOUT_CLASSIFICATION	6.537904999763942E-6	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999973401092405	WITHOUT_CLASSIFICATION	2.659890759490841E-6	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998489639945	WITHOUT_CLASSIFICATION	1.5103600551786776E-7	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999976797305988	WITHOUT_CLASSIFICATION	2.3202694011848856E-6	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999980933921587	WITHOUT_CLASSIFICATION	1.9066078413551368E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999974538781451	WITHOUT_CLASSIFICATION	2.5461218549055324E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999950426573362	WITHOUT_CLASSIFICATION	4.9573426637734785E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999246054637381	WITHOUT_CLASSIFICATION	7.539453626202748E-5	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999981133109757	WITHOUT_CLASSIFICATION	1.8866890244600887E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999993208354595	WITHOUT_CLASSIFICATION	6.79164540368126E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999915355237907	WITHOUT_CLASSIFICATION	8.464476209371368E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999941165833195	WITHOUT_CLASSIFICATION	5.883416680518827E-6	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999880291611214	WITHOUT_CLASSIFICATION	1.197083887872468E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999929082568613	WITHOUT_CLASSIFICATION	7.091743138689876E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999954752950836	WITHOUT_CLASSIFICATION	4.524704916443999E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.999997225842124	WITHOUT_CLASSIFICATION	2.774157876026373E-6	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999994916166618	WITHOUT_CLASSIFICATION	5.083833381976365E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999989300128671	WITHOUT_CLASSIFICATION	1.0699871330010664E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994349873577	WITHOUT_CLASSIFICATION	5.650126423135691E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998517244266	WITHOUT_CLASSIFICATION	1.482755733836503E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994712439495	WITHOUT_CLASSIFICATION	5.287560504751668E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997071553118	WITHOUT_CLASSIFICATION	2.9284468821920544E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999994712439495	WITHOUT_CLASSIFICATION	5.287560504751668E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999997528209796	WITHOUT_CLASSIFICATION	2.471790203940896E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999992572238858	WITHOUT_CLASSIFICATION	7.427761140894751E-7	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999941073711152	WITHOUT_CLASSIFICATION	5.89262888477404E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999952660878124	WITHOUT_CLASSIFICATION	4.73391218749953E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999991679459643	WITHOUT_CLASSIFICATION	8.320540357912901E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999906383723461	WITHOUT_CLASSIFICATION	9.361627653862942E-6	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999983014462359	WITHOUT_CLASSIFICATION	1.6985537641363354E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999941719117518	WITHOUT_CLASSIFICATION	5.828088248211417E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999965648913283	WITHOUT_CLASSIFICATION	3.435108671775374E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999890525731	WITHOUT_CLASSIFICATION	1.0947426905903083E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999211255857	WITHOUT_CLASSIFICATION	7.88744142802551E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999996197424978	WITHOUT_CLASSIFICATION	3.8025750214792804E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999988773946966	WITHOUT_CLASSIFICATION	1.1226053034151867E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999672894550225	WITHOUT_CLASSIFICATION	3.2710544977497514E-4	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999995150866142	WITHOUT_CLASSIFICATION	4.849133857733137E-7	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999998723960211	WITHOUT_CLASSIFICATION	1.2760397884176346E-7	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999501949476	WITHOUT_CLASSIFICATION	4.980505244228972E-8	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999141743078	WITHOUT_CLASSIFICATION	8.582569219854826E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999990774458165	WITHOUT_CLASSIFICATION	9.225541834679505E-7	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999964770359295	WITHOUT_CLASSIFICATION	3.5229640704353397E-6	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999984039211446	WITHOUT_CLASSIFICATION	1.5960788554354174E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999601871659516	WITHOUT_CLASSIFICATION	3.981283404843671E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998712429385522	WITHOUT_CLASSIFICATION	1.2875706144785414E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999880073312176	WITHOUT_CLASSIFICATION	1.1992668782281985E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999838456690489	WITHOUT_CLASSIFICATION	1.6154330951139054E-5	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9847602871642763	WITHOUT_CLASSIFICATION	0.015239712835723625	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999788080400124	WITHOUT_CLASSIFICATION	2.1191959987618086E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999881987326356	WITHOUT_CLASSIFICATION	1.180126736448867E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999992382242953	WITHOUT_CLASSIFICATION	7.617757047281054E-7	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999912475956213	WITHOUT_CLASSIFICATION	8.752404378650973E-6	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999976581189898	WITHOUT_CLASSIFICATION	2.341881010235017E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999011429724864	WITHOUT_CLASSIFICATION	9.885702751356364E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999858668016035	WITHOUT_CLASSIFICATION	1.4133198396505533E-5	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999965969184326	WITHOUT_CLASSIFICATION	3.4030815673060726E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999843308398316	WITHOUT_CLASSIFICATION	1.5669160168458173E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999923658957128	WITHOUT_CLASSIFICATION	7.63410428715126E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9995406672477818	WITHOUT_CLASSIFICATION	4.5933275221826637E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993863382585	WITHOUT_CLASSIFICATION	6.136617415798239E-7	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999764300238831	WITHOUT_CLASSIFICATION	2.3569976116886888E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999731889093139	WITHOUT_CLASSIFICATION	2.6811090686226406E-5	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999875601233024	WITHOUT_CLASSIFICATION	1.2439876697605876E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999787914159588	WITHOUT_CLASSIFICATION	2.1208584041228182E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999956031751294	WITHOUT_CLASSIFICATION	4.396824870635282E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9847602871642763	WITHOUT_CLASSIFICATION	0.015239712835723625	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999565570240426	WITHOUT_CLASSIFICATION	4.344297595729829E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999986569418722	WITHOUT_CLASSIFICATION	1.343058127795108E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998248970391855	WITHOUT_CLASSIFICATION	1.751029608144589E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999909768413618	WITHOUT_CLASSIFICATION	9.023158638198946E-6	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999966162871474	WITHOUT_CLASSIFICATION	3.383712852473929E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999616319754389	WITHOUT_CLASSIFICATION	3.836802456115632E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999875250123985	WITHOUT_CLASSIFICATION	1.2474987601442679E-5	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9993832563262589	WITHOUT_CLASSIFICATION	6.167436737411109E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999935219749424	WITHOUT_CLASSIFICATION	6.4780250576521334E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999932031296748	WITHOUT_CLASSIFICATION	6.796870325246594E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999883149456935	WITHOUT_CLASSIFICATION	1.1685054306394997E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999349384678	WITHOUT_CLASSIFICATION	6.506153208343709E-8	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.999803375873641	WITHOUT_CLASSIFICATION	1.9662412635901375E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999721302612699	WITHOUT_CLASSIFICATION	2.786973873005303E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999763433615116	WITHOUT_CLASSIFICATION	2.3656638488258655E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999140924531	WITHOUT_CLASSIFICATION	8.590754685423418E-8	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999910482593596	WITHOUT_CLASSIFICATION	8.951740640425972E-6	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999988142685086	WITHOUT_CLASSIFICATION	1.1857314914250898E-6	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999994299533884	WITHOUT_CLASSIFICATION	5.70046611560793E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999565570240426	WITHOUT_CLASSIFICATION	4.344297595729829E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999948853291373	WITHOUT_CLASSIFICATION	5.114670862780843E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999987707854959	WITHOUT_CLASSIFICATION	1.2292145041154876E-6	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999985250623905	WITHOUT_CLASSIFICATION	1.4749376094373693E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999927517332392	WITHOUT_CLASSIFICATION	7.248266760792777E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999967526346702	WITHOUT_CLASSIFICATION	3.247365329674835E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999825171265111	WITHOUT_CLASSIFICATION	1.748287348889431E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999825171265111	WITHOUT_CLASSIFICATION	1.748287348889431E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999873682039647	WITHOUT_CLASSIFICATION	1.263179603521881E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999825171265111	WITHOUT_CLASSIFICATION	1.748287348889431E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999825171265111	WITHOUT_CLASSIFICATION	1.748287348889431E-5	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999192045315767	WITHOUT_CLASSIFICATION	8.079546842337871E-5	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9998887469279849	WITHOUT_CLASSIFICATION	1.112530720150773E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999980157661614	WITHOUT_CLASSIFICATION	1.9842338385321283E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999934796658104	WITHOUT_CLASSIFICATION	6.5203341895429425E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999694521539555	WITHOUT_CLASSIFICATION	3.054784604460134E-5	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999982295760631	WITHOUT_CLASSIFICATION	1.770423936795309E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999337152885409	WITHOUT_CLASSIFICATION	6.628471145907422E-5	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998116961822	WITHOUT_CLASSIFICATION	1.8830381777651194E-7	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999873778130899	WITHOUT_CLASSIFICATION	1.2622186910072665E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999674985378465	WITHOUT_CLASSIFICATION	3.250146215341919E-5	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999761740897452	WITHOUT_CLASSIFICATION	2.3825910254864095E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996472089159064	WITHOUT_CLASSIFICATION	3.527910840935959E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999893550199406	WITHOUT_CLASSIFICATION	1.0644980059378843E-5	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999988987990764	WITHOUT_CLASSIFICATION	1.1012009236130268E-5	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999980684483863	WITHOUT_CLASSIFICATION	1.931551613644709E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9971251787545928	WITHOUT_CLASSIFICATION	0.0028748212454071304	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999926333957203	WITHOUT_CLASSIFICATION	7.36660427967315E-6	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998795985077906	WITHOUT_CLASSIFICATION	1.2040149220934304E-4	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999834155740227	WITHOUT_CLASSIFICATION	1.6584425977278996E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999890426615359	WITHOUT_CLASSIFICATION	1.095733846412497E-5	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.999995941473242	WITHOUT_CLASSIFICATION	4.058526757960452E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999990084335163	WITHOUT_CLASSIFICATION	9.915664837859223E-7	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999926333957203	WITHOUT_CLASSIFICATION	7.36660427967315E-6	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999788080400124	WITHOUT_CLASSIFICATION	2.1191959987618086E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999441527000602	WITHOUT_CLASSIFICATION	5.584729993988802E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999941448474976	WITHOUT_CLASSIFICATION	5.855152502398237E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999824355551488	WITHOUT_CLASSIFICATION	1.756444485117045E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999923856457286	WITHOUT_CLASSIFICATION	7.614354271385491E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999973420240477	WITHOUT_CLASSIFICATION	2.6579759524195623E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999955487490676	WITHOUT_CLASSIFICATION	4.4512509324683935E-6	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999793355734106	WITHOUT_CLASSIFICATION	2.066442658946845E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999974855370065	WITHOUT_CLASSIFICATION	2.5144629934364834E-6	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999996557250178	WITHOUT_CLASSIFICATION	3.4427498219473495E-6	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999903477660682	WITHOUT_CLASSIFICATION	9.652233931784153E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999994187195499	WITHOUT_CLASSIFICATION	5.812804501277289E-7	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999818748941308	WITHOUT_CLASSIFICATION	1.8125105869185855E-5	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997834124339	WITHOUT_CLASSIFICATION	2.165875660833149E-7	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999968177745842	WITHOUT_CLASSIFICATION	3.182225415802377E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.99999807431314	WITHOUT_CLASSIFICATION	1.925686859972763E-6	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999949381138181	WITHOUT_CLASSIFICATION	5.061886181820213E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999457180784515	WITHOUT_CLASSIFICATION	5.428192154851575E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998696331333	WITHOUT_CLASSIFICATION	1.3036686675261816E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999986470451766	WITHOUT_CLASSIFICATION	1.352954823331178E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999652434372145	WITHOUT_CLASSIFICATION	3.475656278556142E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999980216730817	WITHOUT_CLASSIFICATION	1.978326918304599E-6	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999978014794406	WITHOUT_CLASSIFICATION	2.1985205594138247E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999974855370065	WITHOUT_CLASSIFICATION	2.5144629934364834E-6	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999964334306135	WITHOUT_CLASSIFICATION	3.566569386498514E-6	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999995778833212	WITHOUT_CLASSIFICATION	4.2211667890980713E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999987174580937	WITHOUT_CLASSIFICATION	1.2825419064411574E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999947056886125	WITHOUT_CLASSIFICATION	5.294311387477424E-6	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997562099864	WITHOUT_CLASSIFICATION	2.437900136841821E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999960905625277	WITHOUT_CLASSIFICATION	3.909437472392616E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999946317633722	WITHOUT_CLASSIFICATION	5.368236627761796E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999926439453609	WITHOUT_CLASSIFICATION	7.356054638999411E-6	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999987516463814	WITHOUT_CLASSIFICATION	1.2483536184921446E-6	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999912982087512	WITHOUT_CLASSIFICATION	8.701791248894933E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968004009836	WITHOUT_CLASSIFICATION	3.1995990163648498E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999922338871798	WITHOUT_CLASSIFICATION	7.76611282017152E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999679167948798	WITHOUT_CLASSIFICATION	3.208320512020546E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999993296430973	WITHOUT_CLASSIFICATION	6.703569026861882E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997854332376217	WITHOUT_CLASSIFICATION	2.1456676237830092E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996969770493	WITHOUT_CLASSIFICATION	3.0302295070593613E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968004009836	WITHOUT_CLASSIFICATION	3.1995990163648498E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999976932829568	WITHOUT_CLASSIFICATION	2.3067170431479046E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9993992032905283	WITHOUT_CLASSIFICATION	6.007967094716444E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993414166609	WITHOUT_CLASSIFICATION	6.58583339022865E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999999013810465	WITHOUT_CLASSIFICATION	9.861895350310993E-7	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999964331293056	WITHOUT_CLASSIFICATION	3.5668706942696045E-6	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999733640306774	WITHOUT_CLASSIFICATION	2.663596932255757E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999854614481	WITHOUT_CLASSIFICATION	1.4538551885415792E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968597337373	WITHOUT_CLASSIFICATION	3.140266262779075E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989249505371	WITHOUT_CLASSIFICATION	1.0750494629480083E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992583682321	WITHOUT_CLASSIFICATION	7.416317679141496E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983902626159	WITHOUT_CLASSIFICATION	1.6097373841093478E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990366125642	WITHOUT_CLASSIFICATION	9.633874357955228E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999983465530049	WITHOUT_CLASSIFICATION	1.6534469950637503E-6	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999983465530049	WITHOUT_CLASSIFICATION	1.6534469950637503E-6	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999840578980728	WITHOUT_CLASSIFICATION	1.5942101927257874E-5	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999986939902119	WITHOUT_CLASSIFICATION	1.3060097880892572E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.999999260257052	WITHOUT_CLASSIFICATION	7.397429480971346E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999994862572268	WITHOUT_CLASSIFICATION	5.137427732529227E-7	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998163994031176	WITHOUT_CLASSIFICATION	1.8360059688241615E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981123954348	WITHOUT_CLASSIFICATION	1.8876045651717523E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955562474525	WITHOUT_CLASSIFICATION	4.4437525474587315E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995182079628	WITHOUT_CLASSIFICATION	4.817920372092575E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999823955529453	WITHOUT_CLASSIFICATION	1.760444705478204E-5	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999310746874	WITHOUT_CLASSIFICATION	6.892531260738206E-7	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981123954348	WITHOUT_CLASSIFICATION	1.8876045651717523E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955562474525	WITHOUT_CLASSIFICATION	4.4437525474587315E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995182079628	WITHOUT_CLASSIFICATION	4.817920372092575E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999995539694743	WITHOUT_CLASSIFICATION	4.460305256417108E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999592650642556	WITHOUT_CLASSIFICATION	4.073493574431189E-5	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999999485827042	WITHOUT_CLASSIFICATION	5.141729568163644E-8	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.99992187070188	WITHOUT_CLASSIFICATION	7.812929811998728E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999999636455756	WITHOUT_CLASSIFICATION	3.6354424396387285E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999984159925924	WITHOUT_CLASSIFICATION	1.5840074075185388E-6	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999071481822843	WITHOUT_CLASSIFICATION	9.285181771571198E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999983691448047	WITHOUT_CLASSIFICATION	1.6308551952953073E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999873765492039	WITHOUT_CLASSIFICATION	1.2623450796144302E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999971097383449	WITHOUT_CLASSIFICATION	2.890261655211675E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999997835992088	WITHOUT_CLASSIFICATION	2.164007911902276E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997620738253683	WITHOUT_CLASSIFICATION	2.3792617463162143E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999815424518812	WITHOUT_CLASSIFICATION	1.8457548118775787E-5	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999996112691135	WITHOUT_CLASSIFICATION	3.8873088653226174E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999804533842	WITHOUT_CLASSIFICATION	1.9546615800012227E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999978058326747	WITHOUT_CLASSIFICATION	2.1941673252643484E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999563862017347	WITHOUT_CLASSIFICATION	4.3613798265275974E-5	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999743148341838	WITHOUT_CLASSIFICATION	2.5685165816203285E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999988931388408	WITHOUT_CLASSIFICATION	1.1068611590996193E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999929995980187	WITHOUT_CLASSIFICATION	7.000401981294537E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999992370192731	WITHOUT_CLASSIFICATION	7.629807269854234E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9979612663697518	WITHOUT_CLASSIFICATION	0.0020387336302482165	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999235896201416	WITHOUT_CLASSIFICATION	7.641037985841373E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999325896687773	WITHOUT_CLASSIFICATION	6.741033122270385E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999996835805234	WITHOUT_CLASSIFICATION	3.1641947656563137E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999941497176014	WITHOUT_CLASSIFICATION	5.850282398596117E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822558052681	WITHOUT_CLASSIFICATION	1.7744194731921887E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990537233258	WITHOUT_CLASSIFICATION	9.462766742309243E-7	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999970521708612	WITHOUT_CLASSIFICATION	2.947829138918513E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992468843796	WITHOUT_CLASSIFICATION	7.531156204634248E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928102288983	WITHOUT_CLASSIFICATION	7.189771101654201E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999990787951878	WITHOUT_CLASSIFICATION	9.21204812135196E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999990787951878	WITHOUT_CLASSIFICATION	9.21204812135196E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999981240805074	WITHOUT_CLASSIFICATION	1.8759194926036995E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998629904079	WITHOUT_CLASSIFICATION	1.3700959207208918E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999773856082242	WITHOUT_CLASSIFICATION	2.2614391775730758E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999419558540841	WITHOUT_CLASSIFICATION	5.804414591588787E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999997549119753	WITHOUT_CLASSIFICATION	2.450880246206497E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999988205370755	WITHOUT_CLASSIFICATION	1.1794629246071497E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999796723117322	WITHOUT_CLASSIFICATION	2.0327688267750763E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999990482031894	WITHOUT_CLASSIFICATION	9.517968105734681E-7	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999974138839072	WITHOUT_CLASSIFICATION	2.5861160927845436E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945935035859	WITHOUT_CLASSIFICATION	5.406496414172116E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978386369515	WITHOUT_CLASSIFICATION	2.161363048513792E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971540028597	WITHOUT_CLASSIFICATION	2.845997140285742E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936891535285	WITHOUT_CLASSIFICATION	6.3108464715719695E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918706788545	WITHOUT_CLASSIFICATION	8.1293211454158E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919209983485	WITHOUT_CLASSIFICATION	8.079001651354917E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928598726652	WITHOUT_CLASSIFICATION	7.140127334809966E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986451204752	WITHOUT_CLASSIFICATION	1.3548795248109565E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979540312426	WITHOUT_CLASSIFICATION	2.0459687572922963E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997349440611	WITHOUT_CLASSIFICATION	2.650559389000137E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987006287067	WITHOUT_CLASSIFICATION	1.2993712933712437E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999983932656452	WITHOUT_CLASSIFICATION	1.6067343547298696E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9968408957567443	WITHOUT_CLASSIFICATION	0.003159104243255754	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996923344741655	WITHOUT_CLASSIFICATION	3.0766552583443463E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997198460935	WITHOUT_CLASSIFICATION	2.8015390658661977E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999956444545	WITHOUT_CLASSIFICATION	4.355545449724405E-9	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999942491644745	WITHOUT_CLASSIFICATION	5.7508355255171205E-6	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999948416319	WITHOUT_CLASSIFICATION	5.158368053462598E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999573125232	WITHOUT_CLASSIFICATION	4.2687476724365057E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996923344741655	WITHOUT_CLASSIFICATION	3.0766552583443463E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996923344741655	WITHOUT_CLASSIFICATION	3.0766552583443463E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999814576635708	WITHOUT_CLASSIFICATION	1.8542336429185776E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999911287867199	WITHOUT_CLASSIFICATION	8.871213280139521E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997080867877438	WITHOUT_CLASSIFICATION	2.9191321225621465E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999933029762347	WITHOUT_CLASSIFICATION	6.697023765230323E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680926	WITHOUT_CLASSIFICATION	3.4073190740473465E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999929995980187	WITHOUT_CLASSIFICATION	7.000401981294537E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999998386859018	WITHOUT_CLASSIFICATION	1.613140981967523E-6	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999920714652554	WITHOUT_CLASSIFICATION	7.928534744599672E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999917541795893	WITHOUT_CLASSIFICATION	8.245820410709196E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911112272202	WITHOUT_CLASSIFICATION	8.888772779733663E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999960043947912	WITHOUT_CLASSIFICATION	3.995605208777801E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999540170792125	WITHOUT_CLASSIFICATION	4.598292078750272E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999996318473957	WITHOUT_CLASSIFICATION	3.681526042990098E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999996318473957	WITHOUT_CLASSIFICATION	3.681526042990098E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989117909296	WITHOUT_CLASSIFICATION	1.0882090705199979E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999989117909296	WITHOUT_CLASSIFICATION	1.0882090705199979E-6	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906671468548	WITHOUT_CLASSIFICATION	9.332853145236843E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994718670863	WITHOUT_CLASSIFICATION	5.28132913767435E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999996483872581	WITHOUT_CLASSIFICATION	3.5161274182593886E-7	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941399061469	WITHOUT_CLASSIFICATION	5.8600938531100716E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999997536369228	WITHOUT_CLASSIFICATION	2.463630772203941E-7	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999774089664988	WITHOUT_CLASSIFICATION	2.259103350125891E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999714246607085	WITHOUT_CLASSIFICATION	2.857533929152225E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943657250644	WITHOUT_CLASSIFICATION	5.634274935633083E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999933067896593	WITHOUT_CLASSIFICATION	6.693210340755653E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999990504926096	WITHOUT_CLASSIFICATION	9.495073904342896E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999942555032285	WITHOUT_CLASSIFICATION	5.744496771417701E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999994891072631	WITHOUT_CLASSIFICATION	5.108927368938927E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999999286326199	WITHOUT_CLASSIFICATION	7.13673800605174E-8	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993310647908	WITHOUT_CLASSIFICATION	6.689352091796294E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999905216897736	WITHOUT_CLASSIFICATION	9.47831022634796E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999980295626307	WITHOUT_CLASSIFICATION	1.9704373693377456E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999980295626307	WITHOUT_CLASSIFICATION	1.9704373693377456E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998226545743	WITHOUT_CLASSIFICATION	1.773454256865397E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999180144694714	WITHOUT_CLASSIFICATION	8.198553052862088E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999998985828984	WITHOUT_CLASSIFICATION	1.0141710162668207E-7	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999321710051902	WITHOUT_CLASSIFICATION	6.782899480981924E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961348523421	WITHOUT_CLASSIFICATION	3.865147657858217E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991774644066	WITHOUT_CLASSIFICATION	8.22535593403223E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999982102599756	WITHOUT_CLASSIFICATION	1.7897400242983692E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942502915122	WITHOUT_CLASSIFICATION	5.749708487772943E-6	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999853835965832	WITHOUT_CLASSIFICATION	1.4616403416776717E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999999791749853	WITHOUT_CLASSIFICATION	2.082501468803468E-7	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999638359648	WITHOUT_CLASSIFICATION	3.616403531664608E-8	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999875480434566	WITHOUT_CLASSIFICATION	1.2451956543415512E-5	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999636206305272	WITHOUT_CLASSIFICATION	3.637936947273707E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998794194371422	WITHOUT_CLASSIFICATION	1.2058056285778896E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.999999437916817	WITHOUT_CLASSIFICATION	5.620831830235301E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999429899222194	WITHOUT_CLASSIFICATION	5.701007778066863E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997029010943	WITHOUT_CLASSIFICATION	2.970989057117905E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999852701864772	WITHOUT_CLASSIFICATION	1.4729813522720813E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999840427864514	WITHOUT_CLASSIFICATION	1.595721354863575E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999265623652	WITHOUT_CLASSIFICATION	7.343763475938214E-8	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999825923322	WITHOUT_CLASSIFICATION	1.7407667752656337E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999998536850302	WITHOUT_CLASSIFICATION	1.4631496988075443E-7	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999184621927	WITHOUT_CLASSIFICATION	8.153780730010517E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999495654501	WITHOUT_CLASSIFICATION	5.043454996302557E-8	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999995853960476	WITHOUT_CLASSIFICATION	4.146039523681496E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999998376078718	WITHOUT_CLASSIFICATION	1.6239212819646846E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999687397800726	WITHOUT_CLASSIFICATION	3.126021992740248E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999643672346334	WITHOUT_CLASSIFICATION	3.563276536664331E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999996969012654	WITHOUT_CLASSIFICATION	3.030987345218382E-7	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999727228660781	WITHOUT_CLASSIFICATION	2.7277133921880658E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999957020271281	WITHOUT_CLASSIFICATION	4.297972871863371E-6	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999920005593945	WITHOUT_CLASSIFICATION	7.999440605483141E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9992472042881841	WITHOUT_CLASSIFICATION	7.527957118159123E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999928199344463	WITHOUT_CLASSIFICATION	7.180065553677381E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999296770506758	WITHOUT_CLASSIFICATION	7.032294932408296E-5	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999935159629063	WITHOUT_CLASSIFICATION	6.484037093680532E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999989066732388	WITHOUT_CLASSIFICATION	1.093326761283563E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999873616191308	WITHOUT_CLASSIFICATION	1.2638380869267382E-5	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999981850499958	WITHOUT_CLASSIFICATION	1.8149500042438247E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999931750040647	WITHOUT_CLASSIFICATION	6.824995935307558E-6	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999958748080906	WITHOUT_CLASSIFICATION	4.125191909465989E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999999309817854	WITHOUT_CLASSIFICATION	6.901821460312852E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999907747231481	WITHOUT_CLASSIFICATION	9.225276851870104E-6	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999996164989686	WITHOUT_CLASSIFICATION	3.835010313080273E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999939263484346	WITHOUT_CLASSIFICATION	6.07365156539737E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999969661393111	WITHOUT_CLASSIFICATION	3.0338606888020703E-6	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999860029023766	WITHOUT_CLASSIFICATION	1.399709762347253E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999767730117238	WITHOUT_CLASSIFICATION	2.322698827613113E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999979133409205	WITHOUT_CLASSIFICATION	2.0866590795620264E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999900821946431	WITHOUT_CLASSIFICATION	9.91780535689303E-6	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999238004394708	WITHOUT_CLASSIFICATION	7.61995605290998E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999176318243422	WITHOUT_CLASSIFICATION	8.236817565773671E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999862315709	WITHOUT_CLASSIFICATION	1.376842909711553E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9994705639064398	WITHOUT_CLASSIFICATION	5.294360935600873E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999935655608662	WITHOUT_CLASSIFICATION	6.43443913387721E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999994517089705	WITHOUT_CLASSIFICATION	5.48291029377096E-7	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999998315731129	WITHOUT_CLASSIFICATION	1.684268871728802E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999965155523834	WITHOUT_CLASSIFICATION	3.4844476164938397E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999959365160763	WITHOUT_CLASSIFICATION	4.063483923726066E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999791451921012	WITHOUT_CLASSIFICATION	2.0854807898827374E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999946425718368	WITHOUT_CLASSIFICATION	5.357428163170782E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999973191675913	WITHOUT_CLASSIFICATION	2.680832408720201E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999874681388125	WITHOUT_CLASSIFICATION	1.2531861187594424E-5	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999931024006988	WITHOUT_CLASSIFICATION	6.897599301196047E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997495456273	WITHOUT_CLASSIFICATION	2.5045437259955904E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999025531687207	WITHOUT_CLASSIFICATION	9.744683127924714E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993882480902	WITHOUT_CLASSIFICATION	6.117519098768371E-7	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999908571522118	WITHOUT_CLASSIFICATION	9.142847788312087E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999097379712438	WITHOUT_CLASSIFICATION	9.026202875615831E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999097379712438	WITHOUT_CLASSIFICATION	9.026202875615831E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999932691011544	WITHOUT_CLASSIFICATION	6.730898845525616E-6	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999922325369596	WITHOUT_CLASSIFICATION	7.767463040493584E-6	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999330957605	WITHOUT_CLASSIFICATION	6.6904239382776E-8	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999970014594688	WITHOUT_CLASSIFICATION	2.9985405312495727E-6	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999399300622	WITHOUT_CLASSIFICATION	6.006993776544462E-8	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999500432228	WITHOUT_CLASSIFICATION	4.9956777138636067E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999991283320101	WITHOUT_CLASSIFICATION	8.716679898695247E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999976680367983	WITHOUT_CLASSIFICATION	2.3319632016799274E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999857862842104	WITHOUT_CLASSIFICATION	1.4213715789609543E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999977832427778	WITHOUT_CLASSIFICATION	2.216757222206662E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999997214268709	WITHOUT_CLASSIFICATION	2.785731291002192E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999695678757874	WITHOUT_CLASSIFICATION	3.0432124212583743E-5	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999939498926615	WITHOUT_CLASSIFICATION	6.050107338397017E-6	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998301223667	WITHOUT_CLASSIFICATION	1.6987763333277955E-7	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999293401587074	WITHOUT_CLASSIFICATION	7.065984129264025E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999990247104737	WITHOUT_CLASSIFICATION	9.752895261980159E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999889270166934	WITHOUT_CLASSIFICATION	1.1072983306603029E-5	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999951550949631	WITHOUT_CLASSIFICATION	4.844905036924749E-6	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9998555936274385	WITHOUT_CLASSIFICATION	1.444063725615181E-4	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999998623136531	WITHOUT_CLASSIFICATION	1.3768634687509723E-7	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999968329307976	WITHOUT_CLASSIFICATION	3.1670692024318894E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999826525684052	WITHOUT_CLASSIFICATION	1.7347431594732208E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999744047387497	WITHOUT_CLASSIFICATION	2.559526125033296E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999707664362234	WITHOUT_CLASSIFICATION	2.9233563776615093E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996852619267	WITHOUT_CLASSIFICATION	3.1473807325764685E-7	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999957521502639	WITHOUT_CLASSIFICATION	4.247849736046715E-6	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999830173359354	WITHOUT_CLASSIFICATION	1.698266406467284E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994192591550323	WITHOUT_CLASSIFICATION	5.807408449677654E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999856868593564	WITHOUT_CLASSIFICATION	1.4313140643696977E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999996992575436	WITHOUT_CLASSIFICATION	3.0074245638509606E-7	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999940705906106	WITHOUT_CLASSIFICATION	5.92940938928536E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999990733055129	WITHOUT_CLASSIFICATION	9.266944871414216E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.999989950831533	WITHOUT_CLASSIFICATION	1.0049168467002602E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999969973012242	WITHOUT_CLASSIFICATION	3.0026987758414213E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999881920607896	WITHOUT_CLASSIFICATION	1.1807939210313178E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999881920607896	WITHOUT_CLASSIFICATION	1.1807939210313178E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999768591024093	WITHOUT_CLASSIFICATION	2.3140897590798216E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9997309553118896	WITHOUT_CLASSIFICATION	2.6904468811041486E-4	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999996665461068	WITHOUT_CLASSIFICATION	3.3345389320507006E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999956146732595	WITHOUT_CLASSIFICATION	4.3853267405506775E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999999680797245	WITHOUT_CLASSIFICATION	3.192027549879894E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999956773472945	WITHOUT_CLASSIFICATION	4.322652705501763E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998502521156549	WITHOUT_CLASSIFICATION	1.4974788434513395E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997112311777	WITHOUT_CLASSIFICATION	2.8876882232595006E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999895030259313	WITHOUT_CLASSIFICATION	1.049697406878908E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998587113806	WITHOUT_CLASSIFICATION	1.4128861948327881E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999988328710518	WITHOUT_CLASSIFICATION	1.1671289481871937E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999873585121426	WITHOUT_CLASSIFICATION	1.2641487857372586E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999987781403309	WITHOUT_CLASSIFICATION	1.2218596692111704E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999996567515997	WITHOUT_CLASSIFICATION	3.432484001927636E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999922261808402	WITHOUT_CLASSIFICATION	7.773819159896319E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999942294315196	WITHOUT_CLASSIFICATION	5.770568480427468E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999942294315196	WITHOUT_CLASSIFICATION	5.770568480427468E-6	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999990206154969	WITHOUT_CLASSIFICATION	9.793845031012662E-6	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999532053609804	WITHOUT_CLASSIFICATION	4.679463901963189E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999951430344013	WITHOUT_CLASSIFICATION	4.856965598806944E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999914327081708	WITHOUT_CLASSIFICATION	8.567291829189945E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9987374161291719	WITHOUT_CLASSIFICATION	0.001262583870828013	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999998935943681	WITHOUT_CLASSIFICATION	1.0640563189785543E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999964597627757	WITHOUT_CLASSIFICATION	3.540237224341973E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999964597627757	WITHOUT_CLASSIFICATION	3.540237224341973E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999976821114589	WITHOUT_CLASSIFICATION	2.3178885411207485E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999987638795599	WITHOUT_CLASSIFICATION	1.2361204400893863E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998105353197511	WITHOUT_CLASSIFICATION	1.8946468024888454E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999968221459904	WITHOUT_CLASSIFICATION	3.1778540096791693E-6	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999926245317002	WITHOUT_CLASSIFICATION	7.375468299695881E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999243244587225	WITHOUT_CLASSIFICATION	7.567554127749441E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999996229865843	WITHOUT_CLASSIFICATION	3.77013415673533E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999964205464343	WITHOUT_CLASSIFICATION	3.5794535657073583E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999318405738	WITHOUT_CLASSIFICATION	6.815942619718313E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999997983005947	WITHOUT_CLASSIFICATION	2.0169940534008232E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995994685769033	WITHOUT_CLASSIFICATION	4.005314230967253E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999932655225819	WITHOUT_CLASSIFICATION	6.734477418030283E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999170085825	WITHOUT_CLASSIFICATION	8.299141749655963E-8	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999785702219638	WITHOUT_CLASSIFICATION	2.142977803621243E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999877940285719	WITHOUT_CLASSIFICATION	1.2205971428188882E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999979374868766	WITHOUT_CLASSIFICATION	2.062513123357752E-6	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999984814851022	WITHOUT_CLASSIFICATION	1.5185148978097687E-6	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.999990525991628	WITHOUT_CLASSIFICATION	9.474008372126278E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9992959212906745	WITHOUT_CLASSIFICATION	7.040787093256024E-4	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999981212215068	WITHOUT_CLASSIFICATION	1.8787784932288917E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999987879783757	WITHOUT_CLASSIFICATION	1.2120216242566822E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999930252642854	WITHOUT_CLASSIFICATION	6.974735714682848E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999737562595391	WITHOUT_CLASSIFICATION	2.624374046086241E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999992756630361	WITHOUT_CLASSIFICATION	7.243369639460616E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999958937636647	WITHOUT_CLASSIFICATION	4.106236335243538E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999996668095932	WITHOUT_CLASSIFICATION	3.3319040679834377E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999913247256	WITHOUT_CLASSIFICATION	8.675274334810652E-9	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999549060934	WITHOUT_CLASSIFICATION	4.50939066080834E-8	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.99999742718461	WITHOUT_CLASSIFICATION	2.5728153900312575E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999365771911	WITHOUT_CLASSIFICATION	6.342280896622965E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999736353260714	WITHOUT_CLASSIFICATION	2.636467392862679E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.999997830853782	WITHOUT_CLASSIFICATION	2.169146217981386E-6	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9995593804670685	WITHOUT_CLASSIFICATION	4.4061953293142697E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999995208594609	WITHOUT_CLASSIFICATION	4.791405391591001E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999957871695787	WITHOUT_CLASSIFICATION	4.212830421351976E-6	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999653071698988	WITHOUT_CLASSIFICATION	3.469283010119301E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999804876681678	WITHOUT_CLASSIFICATION	1.9512331832099378E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999955965063386	WITHOUT_CLASSIFICATION	4.403493661390399E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999980938470336	WITHOUT_CLASSIFICATION	1.9061529663003963E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999867456776229	WITHOUT_CLASSIFICATION	1.3254322377045019E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997946213922	WITHOUT_CLASSIFICATION	2.0537860784885077E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999954015496907	WITHOUT_CLASSIFICATION	4.598450309272954E-6	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999593579560343	WITHOUT_CLASSIFICATION	4.064204396567406E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999996813008732	WITHOUT_CLASSIFICATION	3.186991268064579E-6	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999993383571227	WITHOUT_CLASSIFICATION	6.616428771723111E-7	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999970953845501	WITHOUT_CLASSIFICATION	2.9046154498760834E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999980938470336	WITHOUT_CLASSIFICATION	1.9061529663003963E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999867456776229	WITHOUT_CLASSIFICATION	1.3254322377045019E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999997670358773	WITHOUT_CLASSIFICATION	2.3296412269680836E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999984986871734	WITHOUT_CLASSIFICATION	1.5013128266148997E-5	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999900950245646	WITHOUT_CLASSIFICATION	9.904975435263746E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999377704213298	WITHOUT_CLASSIFICATION	6.222957867014742E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999968916304727	WITHOUT_CLASSIFICATION	3.1083695273805065E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999977738997327	WITHOUT_CLASSIFICATION	2.2261002672598337E-6	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999760446901982	WITHOUT_CLASSIFICATION	2.3955309801915482E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999933918589586	WITHOUT_CLASSIFICATION	6.608141041360363E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998177283194	WITHOUT_CLASSIFICATION	1.8227168070452284E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7179622062956303	DEFECT	0.2820377937043697	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.99999959157011	WITHOUT_CLASSIFICATION	4.084298900212025E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7179622062956303	DEFECT	0.2820377937043697	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999860286493679	WITHOUT_CLASSIFICATION	1.3971350632187258E-5	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999961687872316	WITHOUT_CLASSIFICATION	3.831212768341787E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999615755822971	WITHOUT_CLASSIFICATION	3.842441770279412E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904453583388	WITHOUT_CLASSIFICATION	9.554641661288446E-6	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999929014125325	WITHOUT_CLASSIFICATION	7.098587467474397E-6	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999378501873838	WITHOUT_CLASSIFICATION	6.214981261616952E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999378501873838	WITHOUT_CLASSIFICATION	6.214981261616952E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998669017381959	WITHOUT_CLASSIFICATION	1.3309826180405218E-4	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999615877328674	WITHOUT_CLASSIFICATION	3.84122671326821E-5	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999033743193982	WITHOUT_CLASSIFICATION	9.66256806018196E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999496167642078	WITHOUT_CLASSIFICATION	5.038323579220742E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999698324022327	WITHOUT_CLASSIFICATION	3.016759776733318E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999917587218	WITHOUT_CLASSIFICATION	8.241278334663073E-9	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999974341243685	WITHOUT_CLASSIFICATION	2.565875631568415E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999994141590834	WITHOUT_CLASSIFICATION	5.858409166004119E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999940310170355	WITHOUT_CLASSIFICATION	5.968982964479764E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999987600344823	WITHOUT_CLASSIFICATION	1.239965517706147E-5	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999986661681913	WITHOUT_CLASSIFICATION	1.3338318086209444E-6	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.999936978290192	WITHOUT_CLASSIFICATION	6.302170980797869E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.999967638064105	WITHOUT_CLASSIFICATION	3.236193589500534E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999992528239904	WITHOUT_CLASSIFICATION	7.471760096293354E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999980257870713	WITHOUT_CLASSIFICATION	1.9742129287080395E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.999999834234123	WITHOUT_CLASSIFICATION	1.6576587696755523E-7	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999977663389905	WITHOUT_CLASSIFICATION	2.2336610094519825E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999882280959563	WITHOUT_CLASSIFICATION	1.1771904043598857E-5	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999940119224024	WITHOUT_CLASSIFICATION	5.988077597536918E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998913793910177	WITHOUT_CLASSIFICATION	1.0862060898238454E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999978031449621	WITHOUT_CLASSIFICATION	2.1968550378541657E-6	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999720106086478	WITHOUT_CLASSIFICATION	2.7989391352264617E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999838545186703	WITHOUT_CLASSIFICATION	1.6145481329629276E-5	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999998745858755	WITHOUT_CLASSIFICATION	1.254141244944852E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999961422245983	WITHOUT_CLASSIFICATION	3.8577754017539505E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999391478654265	WITHOUT_CLASSIFICATION	6.08521345734569E-5	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999998064308512	WITHOUT_CLASSIFICATION	1.9356914888553926E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999313179638946	WITHOUT_CLASSIFICATION	6.868203610536332E-5	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999903940790369	WITHOUT_CLASSIFICATION	9.605920963107176E-6	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999971771694639	WITHOUT_CLASSIFICATION	2.822830536050939E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.8995109091680441	WITHOUT_CLASSIFICATION	0.10048909083195577	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998610885706314	WITHOUT_CLASSIFICATION	1.3891142936859992E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999974341243685	WITHOUT_CLASSIFICATION	2.565875631568415E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999984609180026	WITHOUT_CLASSIFICATION	1.5390819973678984E-6	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999980116668876	WITHOUT_CLASSIFICATION	1.988333112451422E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6900323043094482	WITHOUT_CLASSIFICATION	0.3099676956905518	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999597027281951	WITHOUT_CLASSIFICATION	4.029727180488209E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999959328311345	WITHOUT_CLASSIFICATION	4.0671688654490586E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999978623839686	WITHOUT_CLASSIFICATION	2.1376160313911504E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999496167642078	WITHOUT_CLASSIFICATION	5.038323579220742E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999496167642078	WITHOUT_CLASSIFICATION	5.038323579220742E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999991669503906	WITHOUT_CLASSIFICATION	8.330496094620976E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999840191561534	WITHOUT_CLASSIFICATION	1.598084384663935E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999613804579272	WITHOUT_CLASSIFICATION	3.861954207289598E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.99999880338446	WITHOUT_CLASSIFICATION	1.196615540005844E-6	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999463475768	WITHOUT_CLASSIFICATION	5.365242320253417E-7	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999988486490191	WITHOUT_CLASSIFICATION	1.1513509808868388E-6	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999952264011457	WITHOUT_CLASSIFICATION	4.773598854374773E-6	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999050708716	WITHOUT_CLASSIFICATION	9.492912850415219E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999843690767174	WITHOUT_CLASSIFICATION	1.5630923282617055E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996887959617	WITHOUT_CLASSIFICATION	3.1120403825003403E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999873735149348	WITHOUT_CLASSIFICATION	1.2626485065159642E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998627728538088	WITHOUT_CLASSIFICATION	1.3722714619130173E-4	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999870224186111	WITHOUT_CLASSIFICATION	1.2977581388858095E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996887959617	WITHOUT_CLASSIFICATION	3.1120403825003403E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999996999957255	WITHOUT_CLASSIFICATION	3.000042745110976E-6	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9998358629434798	WITHOUT_CLASSIFICATION	1.641370565202275E-4	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999976933786594	WITHOUT_CLASSIFICATION	2.306621340577476E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.7644926400169884	DEFECT	0.2355073599830116	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998627728538088	WITHOUT_CLASSIFICATION	1.3722714619130173E-4	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999902571804846	WITHOUT_CLASSIFICATION	9.742819515278576E-6	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999992844941407	WITHOUT_CLASSIFICATION	7.155058593208779E-7	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999187407015	WITHOUT_CLASSIFICATION	8.125929853877881E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999990877974608	WITHOUT_CLASSIFICATION	9.122025391017985E-7	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998382057879651	WITHOUT_CLASSIFICATION	1.617942120348487E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999987344736485	WITHOUT_CLASSIFICATION	1.2655263514892958E-6	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999998221942654	WITHOUT_CLASSIFICATION	1.7780573458866358E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999937544648698	WITHOUT_CLASSIFICATION	6.245535130227952E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999805422228915	WITHOUT_CLASSIFICATION	1.9457777108582572E-5	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999886885577093	WITHOUT_CLASSIFICATION	1.1311442290792568E-5	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999982030522953	WITHOUT_CLASSIFICATION	1.796947704755567E-6	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999280761268	WITHOUT_CLASSIFICATION	7.192387318858817E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999996887959617	WITHOUT_CLASSIFICATION	3.1120403825003403E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999902571804846	WITHOUT_CLASSIFICATION	9.742819515278576E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999187407015	WITHOUT_CLASSIFICATION	8.125929853877881E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999936299363351	WITHOUT_CLASSIFICATION	6.370063664843203E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999939412911886	WITHOUT_CLASSIFICATION	6.058708811367276E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999979899363838	WITHOUT_CLASSIFICATION	2.010063616175852E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998627728538088	WITHOUT_CLASSIFICATION	1.3722714619130173E-4	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999934634862712	WITHOUT_CLASSIFICATION	6.536513728899319E-6	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999923547268028	WITHOUT_CLASSIFICATION	7.645273197186088E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999574044736848	WITHOUT_CLASSIFICATION	4.259552631532754E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905886430044	WITHOUT_CLASSIFICATION	9.411356995545042E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999937544648698	WITHOUT_CLASSIFICATION	6.245535130227952E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999996999957255	WITHOUT_CLASSIFICATION	3.000042745110976E-6	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.999988156256881	WITHOUT_CLASSIFICATION	1.1843743119050961E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999810834639977	WITHOUT_CLASSIFICATION	1.891653600232695E-5	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999987116031731	WITHOUT_CLASSIFICATION	1.2883968269343122E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999996803687057	WITHOUT_CLASSIFICATION	3.19631294330223E-7	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999972159228444	WITHOUT_CLASSIFICATION	2.784077155651282E-6	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999964738919911	WITHOUT_CLASSIFICATION	3.5261080088334832E-6	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999905925827798	WITHOUT_CLASSIFICATION	9.407417220318308E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904453583388	WITHOUT_CLASSIFICATION	9.554641661288446E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998036891898	WITHOUT_CLASSIFICATION	1.9631081016658045E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999954312131037	WITHOUT_CLASSIFICATION	4.5687868962405185E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997455056324811	WITHOUT_CLASSIFICATION	2.5449436751890037E-4	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998866379364421	WITHOUT_CLASSIFICATION	1.1336206355798708E-4	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998800454329145	WITHOUT_CLASSIFICATION	1.1995456708555451E-4	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996148339305	WITHOUT_CLASSIFICATION	3.851660695811853E-7	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999989459360037	WITHOUT_CLASSIFICATION	1.0540639963078105E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999977836290054	WITHOUT_CLASSIFICATION	2.216370994653724E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999905886430044	WITHOUT_CLASSIFICATION	9.411356995545042E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999878602589237	WITHOUT_CLASSIFICATION	1.2139741076225283E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999944889325475	WITHOUT_CLASSIFICATION	5.51106745248708E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999699531597471	WITHOUT_CLASSIFICATION	3.0046840252815673E-5	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999786995798815	WITHOUT_CLASSIFICATION	2.1300420118477607E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999954020983364	WITHOUT_CLASSIFICATION	4.597901663654496E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999998886412178	WITHOUT_CLASSIFICATION	1.113587822237391E-7	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999985101339064	WITHOUT_CLASSIFICATION	1.4898660935795565E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999662625573617	WITHOUT_CLASSIFICATION	3.373744263837459E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999968469730437	WITHOUT_CLASSIFICATION	3.1530269563073926E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9990373701950362	WITHOUT_CLASSIFICATION	9.626298049636788E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.999998113190166	WITHOUT_CLASSIFICATION	1.886809834073997E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999841127152193	WITHOUT_CLASSIFICATION	1.588728478074698E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.99999237545633	WITHOUT_CLASSIFICATION	7.624543670102884E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999325103060249	WITHOUT_CLASSIFICATION	6.748969397507633E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999799250839294	WITHOUT_CLASSIFICATION	2.0074916070627352E-5	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999995482431007	WITHOUT_CLASSIFICATION	4.5175689930982463E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999969331805416	WITHOUT_CLASSIFICATION	3.0668194583801442E-6	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.999998998868051	WITHOUT_CLASSIFICATION	1.0011319490288321E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999981503060025	WITHOUT_CLASSIFICATION	1.8496939975979743E-6	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999834923219091	WITHOUT_CLASSIFICATION	1.65076780909761E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999965689279133	WITHOUT_CLASSIFICATION	3.4310720866728074E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999996332633426	WITHOUT_CLASSIFICATION	3.667366574403432E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999992274368489	WITHOUT_CLASSIFICATION	7.725631512061017E-7	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999991894220227	WITHOUT_CLASSIFICATION	8.105779773996185E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999995764583168	WITHOUT_CLASSIFICATION	4.235416831133093E-7	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6657245007136962	DEFECT	0.33427549928630373	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999948393551985	WITHOUT_CLASSIFICATION	5.160644801510548E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999954750341589	WITHOUT_CLASSIFICATION	4.5249658411668095E-6	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999984615689689	WITHOUT_CLASSIFICATION	1.538431031039027E-6	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9100072142591612	WITHOUT_CLASSIFICATION	0.08999278574083887	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999935967823063	WITHOUT_CLASSIFICATION	6.403217693708117E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999654376528809	WITHOUT_CLASSIFICATION	3.456234711907748E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999988767489306	WITHOUT_CLASSIFICATION	1.1232510693327367E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999788549588595	WITHOUT_CLASSIFICATION	2.114504114050113E-4	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999896884755907	WITHOUT_CLASSIFICATION	1.0311524409363336E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999923642658158	WITHOUT_CLASSIFICATION	7.635734184179867E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999976253018522	WITHOUT_CLASSIFICATION	2.374698147859037E-6	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999948642786691	WITHOUT_CLASSIFICATION	5.135721330890679E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999923642658158	WITHOUT_CLASSIFICATION	7.635734184179867E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999896884755907	WITHOUT_CLASSIFICATION	1.0311524409363336E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999976253018522	WITHOUT_CLASSIFICATION	2.374698147859037E-6	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999944141971635	WITHOUT_CLASSIFICATION	5.585802836529192E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999996038435974	WITHOUT_CLASSIFICATION	3.961564026716406E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999963487616017	WITHOUT_CLASSIFICATION	3.651238398308508E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999981273838751	WITHOUT_CLASSIFICATION	1.8726161249158488E-6	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999995181550998	WITHOUT_CLASSIFICATION	4.818449002072817E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5422614330561988	DEFECT	0.4577385669438013	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9989116864271539	WITHOUT_CLASSIFICATION	0.0010883135728461761	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.99998883679142	WITHOUT_CLASSIFICATION	1.1163208580028157E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999995480781894	WITHOUT_CLASSIFICATION	4.519218105605233E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999792812607244	WITHOUT_CLASSIFICATION	2.071873927552488E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999968985392135	WITHOUT_CLASSIFICATION	3.1014607865748903E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999997027114553	WITHOUT_CLASSIFICATION	2.972885447512816E-7	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999963769032741	WITHOUT_CLASSIFICATION	3.623096725931117E-6	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999889865736737	WITHOUT_CLASSIFICATION	1.101342632634661E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999976093224858	WITHOUT_CLASSIFICATION	2.3906775141123303E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998187375215	WITHOUT_CLASSIFICATION	1.8126247853634098E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999904679388821	WITHOUT_CLASSIFICATION	9.532061117892798E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999808561944793	WITHOUT_CLASSIFICATION	1.9143805520670104E-5	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999995715477043	WITHOUT_CLASSIFICATION	4.2845229569263865E-6	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999991071983169	WITHOUT_CLASSIFICATION	8.928016832325288E-7	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999530347898276	WITHOUT_CLASSIFICATION	4.6965210172433624E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998665172123	WITHOUT_CLASSIFICATION	1.3348278778890417E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999782352104869	WITHOUT_CLASSIFICATION	2.1764789513035566E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999421207129	WITHOUT_CLASSIFICATION	5.7879287118437004E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995012566264	WITHOUT_CLASSIFICATION	4.987433735456836E-7	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995012566264	WITHOUT_CLASSIFICATION	4.987433735456836E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999716627401	WITHOUT_CLASSIFICATION	2.833725989789797E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999716627401	WITHOUT_CLASSIFICATION	2.833725989789797E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999992325011458	WITHOUT_CLASSIFICATION	7.674988541928423E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999904679388821	WITHOUT_CLASSIFICATION	9.532061117892798E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999998156983783	WITHOUT_CLASSIFICATION	1.843016217143779E-7	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999999978853277	WITHOUT_CLASSIFICATION	2.114672299595496E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999632451694707	WITHOUT_CLASSIFICATION	3.6754830529310094E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999632451694707	WITHOUT_CLASSIFICATION	3.6754830529310094E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999983943762455	WITHOUT_CLASSIFICATION	1.6056237544937729E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999927646541998	WITHOUT_CLASSIFICATION	7.2353458001446666E-6	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999994932204168	WITHOUT_CLASSIFICATION	5.067795831819952E-7	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999951770319356	WITHOUT_CLASSIFICATION	4.822968064356328E-6	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999506728733605	WITHOUT_CLASSIFICATION	4.932712663952228E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999936503835032	WITHOUT_CLASSIFICATION	6.349616496823873E-6	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999910940273368	WITHOUT_CLASSIFICATION	8.905972663131731E-6	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999710575951637	WITHOUT_CLASSIFICATION	2.8942404836195815E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.999994060355619	WITHOUT_CLASSIFICATION	5.93964438099767E-6	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999944558038509	WITHOUT_CLASSIFICATION	5.5441961489713064E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999969728214063	WITHOUT_CLASSIFICATION	3.0271785935888905E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999767668570788	WITHOUT_CLASSIFICATION	2.323314292128575E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999941551988554	WITHOUT_CLASSIFICATION	5.8448011445708115E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999949942283513	WITHOUT_CLASSIFICATION	5.005771648637672E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999800424676871	WITHOUT_CLASSIFICATION	1.995753231285113E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999983400719977	WITHOUT_CLASSIFICATION	1.6599280023031056E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953831018017	WITHOUT_CLASSIFICATION	4.616898198351652E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999971020245598	WITHOUT_CLASSIFICATION	2.897975440138891E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999989970133315	WITHOUT_CLASSIFICATION	1.0029866684960097E-6	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999826108141493	WITHOUT_CLASSIFICATION	1.7389185850786413E-5	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999986917401253	WITHOUT_CLASSIFICATION	1.3082598745879427E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999979121202794	WITHOUT_CLASSIFICATION	2.0878797204633114E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999990831148928	WITHOUT_CLASSIFICATION	9.168851071984779E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999681727807	WITHOUT_CLASSIFICATION	3.1827219308260526E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999419558540841	WITHOUT_CLASSIFICATION	5.804414591588787E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.99999869482846	WITHOUT_CLASSIFICATION	1.30517153989156E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999841127152193	WITHOUT_CLASSIFICATION	1.588728478074698E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999927979705576	WITHOUT_CLASSIFICATION	7.202029442411043E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999947649196801	WITHOUT_CLASSIFICATION	5.235080319877641E-6	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993036332355	WITHOUT_CLASSIFICATION	6.963667643688994E-7	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982917607705	WITHOUT_CLASSIFICATION	1.7082392295251673E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999991024033968	WITHOUT_CLASSIFICATION	8.97596603206238E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.999991024033968	WITHOUT_CLASSIFICATION	8.97596603206238E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999956578340795	WITHOUT_CLASSIFICATION	4.342165920458893E-6	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999952391894196	WITHOUT_CLASSIFICATION	4.760810580475281E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999882869474972	WITHOUT_CLASSIFICATION	1.17130525028347E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999882869474972	WITHOUT_CLASSIFICATION	1.17130525028347E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999984202677742	WITHOUT_CLASSIFICATION	1.57973222579203E-6	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999988338898936	WITHOUT_CLASSIFICATION	1.1661101063934664E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999500120993989	WITHOUT_CLASSIFICATION	4.9987900601085624E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680926	WITHOUT_CLASSIFICATION	3.4073190740473465E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.999995046388465	WITHOUT_CLASSIFICATION	4.953611534903421E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999504973686304	WITHOUT_CLASSIFICATION	4.950263136955822E-5	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999989143252569	WITHOUT_CLASSIFICATION	1.0856747430460746E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999211169007505	WITHOUT_CLASSIFICATION	7.888309924956408E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965872275879	WITHOUT_CLASSIFICATION	3.4127724121543104E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999965872275879	WITHOUT_CLASSIFICATION	3.4127724121543104E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999999566759246	WITHOUT_CLASSIFICATION	4.332407540523859E-8	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999994046249205	WITHOUT_CLASSIFICATION	5.953750795097119E-6	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.999994046249205	WITHOUT_CLASSIFICATION	5.953750795097119E-6	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999931679284044	WITHOUT_CLASSIFICATION	6.832071595586233E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999990106668509	WITHOUT_CLASSIFICATION	9.89333149105501E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9928075833080668	WITHOUT_CLASSIFICATION	0.007192416691933082	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999993141231912	WITHOUT_CLASSIFICATION	6.858768086640016E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999985739181709	WITHOUT_CLASSIFICATION	1.4260818291211984E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999961203477531	WITHOUT_CLASSIFICATION	3.879652246852207E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9998480288449383	WITHOUT_CLASSIFICATION	1.5197115506170012E-4	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999995702321813	WITHOUT_CLASSIFICATION	4.297678186970247E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999977512121875	WITHOUT_CLASSIFICATION	2.2487878124626526E-6	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998595079484139	WITHOUT_CLASSIFICATION	1.4049205158600495E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999986374496409	WITHOUT_CLASSIFICATION	1.3625503591834636E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999993567114971	WITHOUT_CLASSIFICATION	6.432885029863339E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924785085093	WITHOUT_CLASSIFICATION	7.52149149072042E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924785085093	WITHOUT_CLASSIFICATION	7.52149149072042E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924785085093	WITHOUT_CLASSIFICATION	7.52149149072042E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999924785085093	WITHOUT_CLASSIFICATION	7.52149149072042E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999991227155184	WITHOUT_CLASSIFICATION	8.772844815514187E-7	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999933070719486	WITHOUT_CLASSIFICATION	6.692928051425431E-6	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999805703753736	WITHOUT_CLASSIFICATION	1.942962462635137E-5	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999855187335583	WITHOUT_CLASSIFICATION	1.4481266441680638E-5	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999975012408219	WITHOUT_CLASSIFICATION	2.498759178120722E-6	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999947231587085	WITHOUT_CLASSIFICATION	5.276841291482228E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999207837350881	WITHOUT_CLASSIFICATION	7.92162649119774E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999381058214227	WITHOUT_CLASSIFICATION	6.189417857728619E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999728903365	WITHOUT_CLASSIFICATION	2.7109663559129563E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.999999668446663	WITHOUT_CLASSIFICATION	3.31553337030447E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999897639616502	WITHOUT_CLASSIFICATION	1.0236038349932254E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999677333925269	WITHOUT_CLASSIFICATION	3.226660747313738E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999809104083504	WITHOUT_CLASSIFICATION	1.908959164963971E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999878977114462	WITHOUT_CLASSIFICATION	1.2102288553697809E-5	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999975442915044	WITHOUT_CLASSIFICATION	2.455708495441841E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999677333925269	WITHOUT_CLASSIFICATION	3.226660747313738E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999986715811803	WITHOUT_CLASSIFICATION	1.3284188196589286E-6	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999986007107089	WITHOUT_CLASSIFICATION	1.3992892911107886E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999968159581867	WITHOUT_CLASSIFICATION	3.184041813235887E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999972648539196	WITHOUT_CLASSIFICATION	2.7351460804072627E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9998980063681931	WITHOUT_CLASSIFICATION	1.0199363180678343E-4	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999583430360146	WITHOUT_CLASSIFICATION	4.16569639853814E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998904025629	WITHOUT_CLASSIFICATION	1.0959743709715775E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999989324298854	WITHOUT_CLASSIFICATION	1.0675701146420973E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990420867947	WITHOUT_CLASSIFICATION	9.57913205305991E-7	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998903458417	WITHOUT_CLASSIFICATION	1.0965415838862001E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992913816607	WITHOUT_CLASSIFICATION	7.08618339349097E-7	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999996134919234	WITHOUT_CLASSIFICATION	3.865080766062067E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9995421884679663	WITHOUT_CLASSIFICATION	4.5781153203367414E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999917590383337	WITHOUT_CLASSIFICATION	8.240961666307332E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998494770552	WITHOUT_CLASSIFICATION	1.505229448022137E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997303325291381	WITHOUT_CLASSIFICATION	2.6966747086185446E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998645785173	WITHOUT_CLASSIFICATION	1.35421482585303E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999597554183125	WITHOUT_CLASSIFICATION	4.024458168741775E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999979717264829	WITHOUT_CLASSIFICATION	2.028273517146755E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999597554183125	WITHOUT_CLASSIFICATION	4.024458168741775E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994407797979	WITHOUT_CLASSIFICATION	5.592202021206181E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997794556214	WITHOUT_CLASSIFICATION	2.205443786230103E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999993182690582	WITHOUT_CLASSIFICATION	6.817309417272357E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999980715907459	WITHOUT_CLASSIFICATION	1.92840925394079E-6	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999998645785173	WITHOUT_CLASSIFICATION	1.35421482585303E-7	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999979717264829	WITHOUT_CLASSIFICATION	2.028273517146755E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994407797979	WITHOUT_CLASSIFICATION	5.592202021206181E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999994728937537	WITHOUT_CLASSIFICATION	5.271062464343812E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999729890136523	WITHOUT_CLASSIFICATION	2.7010986347617193E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999897822688896	WITHOUT_CLASSIFICATION	1.0217731110502948E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.99998475105833	WITHOUT_CLASSIFICATION	1.5248941670112072E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999933601825516	WITHOUT_CLASSIFICATION	6.639817448359194E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999561732484	WITHOUT_CLASSIFICATION	4.3826751527566235E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953831018017	WITHOUT_CLASSIFICATION	4.616898198351652E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997794556214	WITHOUT_CLASSIFICATION	2.205443786230103E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999998830669499	WITHOUT_CLASSIFICATION	1.1693305011307852E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999702871179612	WITHOUT_CLASSIFICATION	2.9712882038820224E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999997707434563	WITHOUT_CLASSIFICATION	2.292565437416775E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953831018017	WITHOUT_CLASSIFICATION	4.616898198351652E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999927910087445	WITHOUT_CLASSIFICATION	7.208991255518068E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953831018017	WITHOUT_CLASSIFICATION	4.616898198351652E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999607200402	WITHOUT_CLASSIFICATION	3.9279959833060975E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999969316517517	WITHOUT_CLASSIFICATION	3.0683482482487096E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9975584986735528	WITHOUT_CLASSIFICATION	0.002441501326447075	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999998371257148	WITHOUT_CLASSIFICATION	1.6287428518241136E-7	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999988907971272	WITHOUT_CLASSIFICATION	1.109202872755572E-6	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999960529143482	WITHOUT_CLASSIFICATION	3.947085651684183E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999939180556084	WITHOUT_CLASSIFICATION	6.081944391572001E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999679474628721	WITHOUT_CLASSIFICATION	3.20525371278096E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999805078586343	WITHOUT_CLASSIFICATION	1.9492141365664823E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998403768805604	WITHOUT_CLASSIFICATION	1.5962311943953553E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999097379712438	WITHOUT_CLASSIFICATION	9.026202875615831E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999998098650318	WITHOUT_CLASSIFICATION	1.9013496820591423E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9928075833080668	WITHOUT_CLASSIFICATION	0.007192416691933082	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9998371507720486	WITHOUT_CLASSIFICATION	1.6284922795143086E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999967541044126	WITHOUT_CLASSIFICATION	3.245895587397795E-5	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999930540222967	WITHOUT_CLASSIFICATION	6.9459777033144705E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998671731135585	WITHOUT_CLASSIFICATION	1.3282688644152373E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999925665554193	WITHOUT_CLASSIFICATION	7.43344458063701E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999976265087316	WITHOUT_CLASSIFICATION	2.373491268431357E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999956832615687	WITHOUT_CLASSIFICATION	4.316738431359284E-6	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9990843450922852	WITHOUT_CLASSIFICATION	9.156549077148964E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998763559721	WITHOUT_CLASSIFICATION	1.2364402782534566E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999940924748677	WITHOUT_CLASSIFICATION	5.907525132285211E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9928344671748962	WITHOUT_CLASSIFICATION	0.007165532825103857	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.99812143506741	WITHOUT_CLASSIFICATION	0.0018785649325899518	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9981190586082332	WITHOUT_CLASSIFICATION	0.0018809413917668264	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999874153753485	WITHOUT_CLASSIFICATION	1.2584624651533849E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999794956120571	WITHOUT_CLASSIFICATION	2.050438794281048E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999741425922769	WITHOUT_CLASSIFICATION	2.5857407723009546E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999940054926739	WITHOUT_CLASSIFICATION	5.994507326017887E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999994863559802	WITHOUT_CLASSIFICATION	5.136440197212878E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999938033521074	WITHOUT_CLASSIFICATION	6.196647892604315E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998943390461713	WITHOUT_CLASSIFICATION	1.0566095382867704E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999898490538888	WITHOUT_CLASSIFICATION	1.0150946111181555E-5	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9980775862959572	WITHOUT_CLASSIFICATION	0.0019224137040427713	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994349873577	WITHOUT_CLASSIFICATION	5.650126423135691E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.99999419436725	WITHOUT_CLASSIFICATION	5.805632749904723E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999897409290958	WITHOUT_CLASSIFICATION	1.025907090433321E-5	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999898184751844	WITHOUT_CLASSIFICATION	1.0181524815655521E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999956310216679	WITHOUT_CLASSIFICATION	4.368978332156554E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9904872570411799	WITHOUT_CLASSIFICATION	0.009512742958820146	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999968926171294	WITHOUT_CLASSIFICATION	3.1073828706409642E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.99997621094642	WITHOUT_CLASSIFICATION	2.3789053579999638E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999686756275784	WITHOUT_CLASSIFICATION	3.132437242149116E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999686756275784	WITHOUT_CLASSIFICATION	3.132437242149116E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999970228223801	WITHOUT_CLASSIFICATION	2.9771776198989225E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999679474628721	WITHOUT_CLASSIFICATION	3.20525371278096E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999934020847228	WITHOUT_CLASSIFICATION	6.597915277290856E-6	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999802900487379	WITHOUT_CLASSIFICATION	1.9709951262180897E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999326122908497	WITHOUT_CLASSIFICATION	6.738770915030037E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999975136883039	WITHOUT_CLASSIFICATION	2.486311696062069E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999626895795674	WITHOUT_CLASSIFICATION	3.7310420432689165E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999448223523053	WITHOUT_CLASSIFICATION	5.517764769470061E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999973294453446	WITHOUT_CLASSIFICATION	2.670554655507479E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999983541600794	WITHOUT_CLASSIFICATION	1.6458399206571825E-6	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999953937998541	WITHOUT_CLASSIFICATION	4.606200145878919E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999966669542781	WITHOUT_CLASSIFICATION	3.3330457218265765E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999870332872847	WITHOUT_CLASSIFICATION	1.2966712715245536E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9996419922154726	WITHOUT_CLASSIFICATION	3.5800778452741713E-4	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999975426485812	WITHOUT_CLASSIFICATION	2.457351418798669E-6	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999992201429289	WITHOUT_CLASSIFICATION	7.798570711514311E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999959368298754	WITHOUT_CLASSIFICATION	4.063170124616825E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999795920913	WITHOUT_CLASSIFICATION	2.0407908706667267E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999980848062352	WITHOUT_CLASSIFICATION	1.9151937647549826E-6	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999993976828192	WITHOUT_CLASSIFICATION	6.023171807889843E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998787124168	WITHOUT_CLASSIFICATION	1.212875831721024E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999957733313714	WITHOUT_CLASSIFICATION	4.226668628703603E-6	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999947244366039	WITHOUT_CLASSIFICATION	5.275563396062309E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999628497755016	WITHOUT_CLASSIFICATION	3.715022449841323E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9904872570411799	WITHOUT_CLASSIFICATION	0.009512742958820146	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999956545735444	WITHOUT_CLASSIFICATION	4.345426455491323E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9996507409339864	WITHOUT_CLASSIFICATION	3.49259066013599E-4	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.99999347082321	WITHOUT_CLASSIFICATION	6.529176789971115E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999877858612027	WITHOUT_CLASSIFICATION	1.2214138797172886E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998865448692782	WITHOUT_CLASSIFICATION	1.1345513072183839E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999996481936528	WITHOUT_CLASSIFICATION	3.518063471946006E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999842817873139	WITHOUT_CLASSIFICATION	1.571821268608923E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999096374182	WITHOUT_CLASSIFICATION	9.036258180586031E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997821280067	WITHOUT_CLASSIFICATION	2.1787199324936352E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999954610381417	WITHOUT_CLASSIFICATION	4.538961858284396E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998513529064	WITHOUT_CLASSIFICATION	1.4864709368609906E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999994395444007	WITHOUT_CLASSIFICATION	5.604555992610823E-7	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999634526982171	WITHOUT_CLASSIFICATION	3.654730178294884E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999061037413098	WITHOUT_CLASSIFICATION	9.389625869020055E-4	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999757554039	WITHOUT_CLASSIFICATION	2.4244596140705622E-8	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999757554039	WITHOUT_CLASSIFICATION	2.4244596140705622E-8	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999881266878645	WITHOUT_CLASSIFICATION	1.187331213552561E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999999562561424	WITHOUT_CLASSIFICATION	4.3743857598181505E-7	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995418365868467	WITHOUT_CLASSIFICATION	4.581634131532145E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995418365868467	WITHOUT_CLASSIFICATION	4.581634131532145E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999991433398728	WITHOUT_CLASSIFICATION	8.566601272034652E-7	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996472089159064	WITHOUT_CLASSIFICATION	3.527910840935959E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999995546614878	WITHOUT_CLASSIFICATION	4.453385122168353E-7	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999957593684464	WITHOUT_CLASSIFICATION	4.240631553618999E-6	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999976772025829	WITHOUT_CLASSIFICATION	2.322797417112424E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999459033006948	WITHOUT_CLASSIFICATION	5.409669930536387E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991225996283	WITHOUT_CLASSIFICATION	8.774003716862723E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999991225996283	WITHOUT_CLASSIFICATION	8.774003716862723E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999459804783055	WITHOUT_CLASSIFICATION	5.401952169448708E-5	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999930435874795	WITHOUT_CLASSIFICATION	6.956412520506176E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999936687430021	WITHOUT_CLASSIFICATION	6.331256997854848E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931774095837	WITHOUT_CLASSIFICATION	6.822590416387016E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931774095837	WITHOUT_CLASSIFICATION	6.822590416387016E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.999998423416629	WITHOUT_CLASSIFICATION	1.5765833709674176E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999454258564	WITHOUT_CLASSIFICATION	5.45741436153035E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999480917989656	WITHOUT_CLASSIFICATION	5.190820103432105E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999971055752407	WITHOUT_CLASSIFICATION	2.8944247592996594E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999984246996398	WITHOUT_CLASSIFICATION	1.5753003601409683E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999989995931751	WITHOUT_CLASSIFICATION	1.0004068249511904E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999768184475295	WITHOUT_CLASSIFICATION	2.3181552470491515E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999968234654263	WITHOUT_CLASSIFICATION	3.1765345736936983E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.999999678191598	WITHOUT_CLASSIFICATION	3.2180840203484913E-7	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999616788027592	WITHOUT_CLASSIFICATION	3.832119724077411E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999968232405854	WITHOUT_CLASSIFICATION	3.176759414603717E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998653642802305	WITHOUT_CLASSIFICATION	1.346357197694346E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999979705717916	WITHOUT_CLASSIFICATION	2.029428208360509E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999989069660826	WITHOUT_CLASSIFICATION	1.0930339173121558E-6	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999945597200842	WITHOUT_CLASSIFICATION	5.440279915697413E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999097231401973	WITHOUT_CLASSIFICATION	9.02768598027051E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999946097807811	WITHOUT_CLASSIFICATION	5.3902192188031004E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999952181583301	WITHOUT_CLASSIFICATION	4.781841669808899E-6	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999990728881503	WITHOUT_CLASSIFICATION	9.271118496358091E-7	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.99999945402444	WITHOUT_CLASSIFICATION	5.459755599428583E-7	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999998086469926	WITHOUT_CLASSIFICATION	1.9135300734857167E-7	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999871415003102	WITHOUT_CLASSIFICATION	1.285849968974007E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999902562292612	WITHOUT_CLASSIFICATION	9.743770738866092E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999616718560305	WITHOUT_CLASSIFICATION	3.832814396951081E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999035135283959	WITHOUT_CLASSIFICATION	9.64864716041565E-5	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.999998397644049	WITHOUT_CLASSIFICATION	1.6023559510019976E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999949014673247	WITHOUT_CLASSIFICATION	5.09853267523566E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999884936902145	WITHOUT_CLASSIFICATION	1.1506309785644366E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999582043385	WITHOUT_CLASSIFICATION	4.179566142142064E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999999804533842	WITHOUT_CLASSIFICATION	1.9546615800012227E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9979612663697518	WITHOUT_CLASSIFICATION	0.0020387336302482165	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998833780511	WITHOUT_CLASSIFICATION	1.1662194889343576E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999929767526974	WITHOUT_CLASSIFICATION	7.023247302587796E-6	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999925396816365	WITHOUT_CLASSIFICATION	7.4603183635274866E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999964158870109	WITHOUT_CLASSIFICATION	3.584112989083567E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999712554393002	WITHOUT_CLASSIFICATION	2.8744560699808683E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999646181873807	WITHOUT_CLASSIFICATION	3.5381812619323386E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999985145995305	WITHOUT_CLASSIFICATION	1.4854004695216913E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999889757358356	WITHOUT_CLASSIFICATION	1.1024264164420576E-5	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999992184290671	WITHOUT_CLASSIFICATION	7.815709328313325E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999981476250294	WITHOUT_CLASSIFICATION	1.852374970532941E-6	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999516219667198	WITHOUT_CLASSIFICATION	4.8378033280145394E-5	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999985757264671	WITHOUT_CLASSIFICATION	1.424273532933964E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999996205844631	WITHOUT_CLASSIFICATION	3.794155368451608E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999987376527049	WITHOUT_CLASSIFICATION	1.2623472951111541E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999978616121487	WITHOUT_CLASSIFICATION	2.1383878514046457E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999915759533797	WITHOUT_CLASSIFICATION	8.424046620337393E-6	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999988805586255	WITHOUT_CLASSIFICATION	1.1194413744506816E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999994525643314	WITHOUT_CLASSIFICATION	5.474356686145461E-7	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999230900039	WITHOUT_CLASSIFICATION	7.690999618779488E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999962124098594	WITHOUT_CLASSIFICATION	3.7875901406564825E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999996049892805	WITHOUT_CLASSIFICATION	3.950107194757334E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999984161160099	WITHOUT_CLASSIFICATION	1.5838839901697273E-6	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999297920495	WITHOUT_CLASSIFICATION	7.020795048295448E-8	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999810527155609	WITHOUT_CLASSIFICATION	1.894728443899847E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999871344969784	WITHOUT_CLASSIFICATION	1.2865503021632843E-5	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999909592129216	WITHOUT_CLASSIFICATION	9.040787078390339E-6	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999985248590976	WITHOUT_CLASSIFICATION	1.475140902457373E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999887774822992	WITHOUT_CLASSIFICATION	1.122251770073645E-5	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999998707112985	WITHOUT_CLASSIFICATION	1.2928870145519772E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999770903139112	WITHOUT_CLASSIFICATION	2.290968608867301E-5	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999770903139112	WITHOUT_CLASSIFICATION	2.290968608867301E-5	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999587125039853	WITHOUT_CLASSIFICATION	4.1287496014738295E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999970473065257	WITHOUT_CLASSIFICATION	2.952693474297836E-5	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998425104614	WITHOUT_CLASSIFICATION	1.574895385657844E-7	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999999860060626	WITHOUT_CLASSIFICATION	1.3993937392978362E-7	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999975572944534	WITHOUT_CLASSIFICATION	2.4427055465525144E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999973733760854	WITHOUT_CLASSIFICATION	2.626623914702455E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999938445512493	WITHOUT_CLASSIFICATION	6.155448750755085E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999996853558546	WITHOUT_CLASSIFICATION	3.14644145408056E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9998669387469373	WITHOUT_CLASSIFICATION	1.3306125306273992E-4	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999757211710599	WITHOUT_CLASSIFICATION	2.4278828940030645E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999873494721348	WITHOUT_CLASSIFICATION	1.2650527865201106E-4	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999651605785456	WITHOUT_CLASSIFICATION	3.4839421454448716E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994382044225	WITHOUT_CLASSIFICATION	5.617955774592066E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999991168174615	WITHOUT_CLASSIFICATION	8.831825384800724E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996969770493	WITHOUT_CLASSIFICATION	3.0302295070593613E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996969770493	WITHOUT_CLASSIFICATION	3.0302295070593613E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999995823429844	WITHOUT_CLASSIFICATION	4.1765701571962015E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.999619065833926	WITHOUT_CLASSIFICATION	3.8093416607396565E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999990060480576	WITHOUT_CLASSIFICATION	9.939519423712307E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999971992615816	WITHOUT_CLASSIFICATION	2.800738418320368E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968004009836	WITHOUT_CLASSIFICATION	3.1995990163648498E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986977056736	WITHOUT_CLASSIFICATION	1.3022943263528949E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999803524724165	WITHOUT_CLASSIFICATION	1.9647527583596033E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999915279721119	WITHOUT_CLASSIFICATION	8.472027888172E-6	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999993453245283	WITHOUT_CLASSIFICATION	6.546754715903649E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9981279419463583	WITHOUT_CLASSIFICATION	0.0018720580536416348	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999760512081167	WITHOUT_CLASSIFICATION	2.3948791883386936E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997278855985	WITHOUT_CLASSIFICATION	2.7211440150211446E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999354082183	WITHOUT_CLASSIFICATION	6.45917817252651E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999994514304141	WITHOUT_CLASSIFICATION	5.485695857836926E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999997397332197	WITHOUT_CLASSIFICATION	2.602667803613269E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997058437861255	WITHOUT_CLASSIFICATION	2.9415621387452265E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999950699506971	WITHOUT_CLASSIFICATION	4.930049303010401E-6	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999586449287	WITHOUT_CLASSIFICATION	4.135507130547879E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999997004587399	WITHOUT_CLASSIFICATION	2.9954126010133814E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999984673394683	WITHOUT_CLASSIFICATION	1.532660531746162E-6	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999703659250007	WITHOUT_CLASSIFICATION	2.9634074999261458E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998893890988	WITHOUT_CLASSIFICATION	1.1061090126336934E-7	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998055643677	WITHOUT_CLASSIFICATION	1.944356323107944E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999813528693843	WITHOUT_CLASSIFICATION	1.864713061572713E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997620738253683	WITHOUT_CLASSIFICATION	2.3792617463162143E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999018619225767	WITHOUT_CLASSIFICATION	9.8138077423309E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999994335222646	WITHOUT_CLASSIFICATION	5.66477735388063E-7	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999905328497887	WITHOUT_CLASSIFICATION	9.467150211349662E-6	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999987085604254	WITHOUT_CLASSIFICATION	1.2914395746700863E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999998398328133	WITHOUT_CLASSIFICATION	1.6016718670467636E-6	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999948526084217	WITHOUT_CLASSIFICATION	5.147391578257923E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9985170171300788	WITHOUT_CLASSIFICATION	0.0014829828699211857	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999617917662	WITHOUT_CLASSIFICATION	3.820823378446137E-8	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999531455437346	WITHOUT_CLASSIFICATION	4.685445626534962E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9875830914216396	WITHOUT_CLASSIFICATION	0.012416908578360468	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999980179942634	WITHOUT_CLASSIFICATION	1.982005736691842E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999738524489421	WITHOUT_CLASSIFICATION	2.6147551057892926E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999993073747142	WITHOUT_CLASSIFICATION	6.926252857748931E-7	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999962929897152	WITHOUT_CLASSIFICATION	3.707010284988063E-6	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999998664085332	WITHOUT_CLASSIFICATION	1.3359146680574365E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999961991424278	WITHOUT_CLASSIFICATION	3.800857572362674E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999961991424278	WITHOUT_CLASSIFICATION	3.800857572362674E-6	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999835867371	WITHOUT_CLASSIFICATION	1.6413262866066827E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999791088545437	WITHOUT_CLASSIFICATION	2.0891145456341887E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999780635145974	WITHOUT_CLASSIFICATION	2.193648540265019E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999998839641462	WITHOUT_CLASSIFICATION	1.1603585381084813E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999938016298392	WITHOUT_CLASSIFICATION	6.198370160802553E-6	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999919413177726	WITHOUT_CLASSIFICATION	8.05868222743406E-6	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999932588922658	WITHOUT_CLASSIFICATION	6.741107734206711E-6	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999985764479702	WITHOUT_CLASSIFICATION	1.4235520297470968E-6	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999693871897106	WITHOUT_CLASSIFICATION	3.061281028932737E-5	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939720036038	WITHOUT_CLASSIFICATION	6.02799639610536E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962259532499	WITHOUT_CLASSIFICATION	3.774046750070832E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996923344741655	WITHOUT_CLASSIFICATION	3.0766552583443463E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9993612143379735	WITHOUT_CLASSIFICATION	6.387856620264877E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999957909790589	WITHOUT_CLASSIFICATION	4.2090209411330616E-6	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.999999716615834	WITHOUT_CLASSIFICATION	2.8338416597689713E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.99999992041011	WITHOUT_CLASSIFICATION	7.958989005728834E-8	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999836321593004	WITHOUT_CLASSIFICATION	1.6367840699617273E-5	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999804375936	WITHOUT_CLASSIFICATION	1.9562406459497018E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999944078148082	WITHOUT_CLASSIFICATION	5.5921851918106896E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999991124023461	WITHOUT_CLASSIFICATION	8.875976538796822E-7	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999974599524558	WITHOUT_CLASSIFICATION	2.540047544276423E-6	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999984688152871	WITHOUT_CLASSIFICATION	1.5311847129398068E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999987767011455	WITHOUT_CLASSIFICATION	1.2232988546533642E-6	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.999955017486753	WITHOUT_CLASSIFICATION	4.498251324700176E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999964216690288	WITHOUT_CLASSIFICATION	3.578330971096437E-6	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999898157031537	WITHOUT_CLASSIFICATION	1.0184296846314202E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999744465007592	WITHOUT_CLASSIFICATION	2.555349924079828E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999981685846856	WITHOUT_CLASSIFICATION	1.831415314396058E-5	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999942266022911	WITHOUT_CLASSIFICATION	5.773397708886947E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999711463292872	WITHOUT_CLASSIFICATION	2.8853670712771E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999926456458	WITHOUT_CLASSIFICATION	7.354354134272107E-9	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999999211826681	WITHOUT_CLASSIFICATION	7.881733193165927E-8	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998914714625	WITHOUT_CLASSIFICATION	1.0852853758240194E-7	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999990521608885	WITHOUT_CLASSIFICATION	9.478391114966936E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999990061316485	WITHOUT_CLASSIFICATION	9.938683515535799E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999880073312176	WITHOUT_CLASSIFICATION	1.1992668782281985E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999996348679911	WITHOUT_CLASSIFICATION	3.6513200884306303E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999508857566	WITHOUT_CLASSIFICATION	4.911424337921143E-8	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999992000605072	WITHOUT_CLASSIFICATION	7.999394927062317E-7	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999911742832106	WITHOUT_CLASSIFICATION	8.825716789325312E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999920335226891	WITHOUT_CLASSIFICATION	7.966477310912343E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999881800269871	WITHOUT_CLASSIFICATION	1.1819973012952624E-5	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999849378011	WITHOUT_CLASSIFICATION	1.506219895755668E-8	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999810192044	WITHOUT_CLASSIFICATION	1.8980795659975942E-8	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998658653286	WITHOUT_CLASSIFICATION	1.3413467139468016E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999944895319167	WITHOUT_CLASSIFICATION	5.510468083334453E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999296573896739	WITHOUT_CLASSIFICATION	7.034261032618086E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999994382044225	WITHOUT_CLASSIFICATION	5.617955774592066E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999996848680949	WITHOUT_CLASSIFICATION	3.1513190505263856E-7	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999798911965	WITHOUT_CLASSIFICATION	2.0108803502924057E-8	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999681154827232	WITHOUT_CLASSIFICATION	3.188451727680197E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999993189852247	WITHOUT_CLASSIFICATION	6.810147753483737E-7	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999689169988	WITHOUT_CLASSIFICATION	3.108300114540023E-8	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999981947628855	WITHOUT_CLASSIFICATION	1.8052371144980122E-6	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9998313326602296	WITHOUT_CLASSIFICATION	1.6866733977045358E-4	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998585372741	WITHOUT_CLASSIFICATION	1.4146272580390254E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999942555032285	WITHOUT_CLASSIFICATION	5.744496771417701E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999988502251117	WITHOUT_CLASSIFICATION	1.1497748882934518E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999972237469037	WITHOUT_CLASSIFICATION	2.776253096406939E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999927517332392	WITHOUT_CLASSIFICATION	7.248266760792777E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999997123083628	WITHOUT_CLASSIFICATION	2.8769163724365576E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999995488089205	WITHOUT_CLASSIFICATION	4.5119107951039193E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976632468873	WITHOUT_CLASSIFICATION	2.3367531126404285E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999647136964975	WITHOUT_CLASSIFICATION	3.528630350257742E-5	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999998419034463	WITHOUT_CLASSIFICATION	1.5809655371156912E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999861963157	WITHOUT_CLASSIFICATION	1.380368438221357E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999993108406773	WITHOUT_CLASSIFICATION	6.891593227426136E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976632468873	WITHOUT_CLASSIFICATION	2.3367531126404285E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999519006217047	WITHOUT_CLASSIFICATION	4.8099378295347347E-5	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999407402459	WITHOUT_CLASSIFICATION	5.925975405447935E-8	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999964105055685	WITHOUT_CLASSIFICATION	3.589494431574969E-6	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999875847319403	WITHOUT_CLASSIFICATION	1.2415268059719697E-5	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9995103612370824	WITHOUT_CLASSIFICATION	4.896387629176981E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999882400387772	WITHOUT_CLASSIFICATION	1.1759961222753322E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999264654864	WITHOUT_CLASSIFICATION	7.353451357898438E-8	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999775238226818	WITHOUT_CLASSIFICATION	2.2476177318209686E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999967765847408	WITHOUT_CLASSIFICATION	3.223415259128871E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996645978966	WITHOUT_CLASSIFICATION	3.3540210343387416E-7	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999997688346932	WITHOUT_CLASSIFICATION	2.3116530675782825E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9991681141581168	WITHOUT_CLASSIFICATION	8.318858418831791E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999960486947574	WITHOUT_CLASSIFICATION	3.951305242591267E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999996373107457	WITHOUT_CLASSIFICATION	3.626892543435729E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999928230077266	WITHOUT_CLASSIFICATION	7.176992273416005E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999628497755016	WITHOUT_CLASSIFICATION	3.715022449841323E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996950444973	WITHOUT_CLASSIFICATION	3.049555026904183E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999995027679739	WITHOUT_CLASSIFICATION	4.972320261067764E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999544026933389	WITHOUT_CLASSIFICATION	4.559730666120482E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998834758720121	WITHOUT_CLASSIFICATION	1.1652412798787056E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999997896453993	WITHOUT_CLASSIFICATION	2.1035460076281213E-7	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999934142469685	WITHOUT_CLASSIFICATION	6.5857530314706895E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999994884481247	WITHOUT_CLASSIFICATION	5.115518752697292E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999975641756	WITHOUT_CLASSIFICATION	2.4358245606373377E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999991336088949	WITHOUT_CLASSIFICATION	8.663911050998439E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999923205334195	WITHOUT_CLASSIFICATION	7.679466580534295E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9991844108468199	WITHOUT_CLASSIFICATION	8.155891531801694E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997029010943	WITHOUT_CLASSIFICATION	2.970989057117905E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999791787807248	WITHOUT_CLASSIFICATION	2.082121927521329E-5	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999934350029034	WITHOUT_CLASSIFICATION	6.564997096574257E-6	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999940962883277	WITHOUT_CLASSIFICATION	5.903711672258206E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999827795775661	WITHOUT_CLASSIFICATION	1.7220422433958197E-5	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999788319933974	WITHOUT_CLASSIFICATION	2.1168006602496437E-5	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999993940135942	WITHOUT_CLASSIFICATION	6.059864058219711E-7	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999959921656251	WITHOUT_CLASSIFICATION	4.007834374860899E-6	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999986303904161	WITHOUT_CLASSIFICATION	1.3696095839107526E-5	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999896688330356	WITHOUT_CLASSIFICATION	1.033116696441672E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999994891105809	WITHOUT_CLASSIFICATION	5.108894192203222E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999996701987701	WITHOUT_CLASSIFICATION	3.2980122990413203E-7	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996852619267	WITHOUT_CLASSIFICATION	3.1473807325764685E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999465932945	WITHOUT_CLASSIFICATION	5.340670549104076E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999999465932945	WITHOUT_CLASSIFICATION	5.340670549104076E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999956773472945	WITHOUT_CLASSIFICATION	4.322652705501763E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998587113806	WITHOUT_CLASSIFICATION	1.4128861948327881E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999914327081708	WITHOUT_CLASSIFICATION	8.567291829189945E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9998587762491581	WITHOUT_CLASSIFICATION	1.4122375084188164E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680926	WITHOUT_CLASSIFICATION	3.4073190740473465E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999996592680926	WITHOUT_CLASSIFICATION	3.4073190740473465E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999950953134903	WITHOUT_CLASSIFICATION	4.9046865097105005E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999979374868766	WITHOUT_CLASSIFICATION	2.062513123357752E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999674097283955	WITHOUT_CLASSIFICATION	3.259027160454308E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999737562595391	WITHOUT_CLASSIFICATION	2.624374046086241E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986113334447	WITHOUT_CLASSIFICATION	1.3886665552879053E-6	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999971796087495	WITHOUT_CLASSIFICATION	2.820391250439594E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999915209884065	WITHOUT_CLASSIFICATION	8.479011593498842E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999989360039826	WITHOUT_CLASSIFICATION	1.0639960173691894E-6	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.999991298731015	WITHOUT_CLASSIFICATION	8.701268985064044E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940166760451	WITHOUT_CLASSIFICATION	5.983323954845177E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940166760451	WITHOUT_CLASSIFICATION	5.983323954845177E-6	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999923847280712	WITHOUT_CLASSIFICATION	7.6152719288413896E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999937544648698	WITHOUT_CLASSIFICATION	6.245535130227952E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999987344736485	WITHOUT_CLASSIFICATION	1.2655263514892958E-6	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999255614533671	WITHOUT_CLASSIFICATION	7.443854663291608E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999982233695471	WITHOUT_CLASSIFICATION	1.7766304528616705E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998036891898	WITHOUT_CLASSIFICATION	1.9631081016658045E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991250981279	WITHOUT_CLASSIFICATION	8.749018721105287E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998773879463	WITHOUT_CLASSIFICATION	1.2261205367913084E-7	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999876146250389	WITHOUT_CLASSIFICATION	1.2385374961113346E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.999698667233031	WITHOUT_CLASSIFICATION	3.013327669689803E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9987536513375814	WITHOUT_CLASSIFICATION	0.0012463486624185777	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999996645978966	WITHOUT_CLASSIFICATION	3.3540210343387416E-7	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997256493766	WITHOUT_CLASSIFICATION	2.743506233850604E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9980370235238507	WITHOUT_CLASSIFICATION	0.0019629764761492203	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999989593274504	WITHOUT_CLASSIFICATION	1.0406725495523569E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999744108440735	WITHOUT_CLASSIFICATION	2.558915592657135E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999939525020177	WITHOUT_CLASSIFICATION	6.047497982292589E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999995552801225	WITHOUT_CLASSIFICATION	4.447198774920616E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999879763797385	WITHOUT_CLASSIFICATION	1.2023620261490161E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999999982930155	WITHOUT_CLASSIFICATION	1.7069844964794002E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999997825581269	WITHOUT_CLASSIFICATION	2.1744187309406155E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999490840309478	WITHOUT_CLASSIFICATION	5.0915969052139276E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999490840309478	WITHOUT_CLASSIFICATION	5.0915969052139276E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999677333925269	WITHOUT_CLASSIFICATION	3.226660747313738E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999995345942438	WITHOUT_CLASSIFICATION	4.654057561701304E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999780771841974	WITHOUT_CLASSIFICATION	2.1922815802601353E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999998219445954	WITHOUT_CLASSIFICATION	1.780554047405313E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999969798107531	WITHOUT_CLASSIFICATION	3.020189246889441E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999996208238249	WITHOUT_CLASSIFICATION	3.79176175110726E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999998494770552	WITHOUT_CLASSIFICATION	1.505229448022137E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999998423497533	WITHOUT_CLASSIFICATION	1.576502466971431E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999994728937537	WITHOUT_CLASSIFICATION	5.271062464343812E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999791979090735	WITHOUT_CLASSIFICATION	2.0802090926507302E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953831018017	WITHOUT_CLASSIFICATION	4.616898198351652E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999800268769339	WITHOUT_CLASSIFICATION	1.9973123066088895E-5	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999998822415843	WITHOUT_CLASSIFICATION	1.1775841568300401E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999794828645663	WITHOUT_CLASSIFICATION	2.0517135433635654E-5	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999998140081846	WITHOUT_CLASSIFICATION	1.859918153782622E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999998167103835	WITHOUT_CLASSIFICATION	1.8328961645991343E-7	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999905162336338	WITHOUT_CLASSIFICATION	9.483766366187314E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999980337233254	WITHOUT_CLASSIFICATION	1.9662766745522896E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999153424269988	WITHOUT_CLASSIFICATION	8.465757300129222E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9994101168260323	WITHOUT_CLASSIFICATION	5.898831739676281E-4	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998491089924637	WITHOUT_CLASSIFICATION	1.5089100753626225E-4	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999717446328833	WITHOUT_CLASSIFICATION	2.825536711671316E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999480917989656	WITHOUT_CLASSIFICATION	5.190820103432105E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.7472433401788658	WITHOUT_CLASSIFICATION	0.2527566598211342	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996857162416	WITHOUT_CLASSIFICATION	3.142837584252901E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999996857162416	WITHOUT_CLASSIFICATION	3.142837584252901E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999920295184704	WITHOUT_CLASSIFICATION	7.97048152963729E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.99999924749274	WITHOUT_CLASSIFICATION	7.525072599662655E-7	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999982910771	WITHOUT_CLASSIFICATION	1.7089229228379176E-9	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999997004226315	WITHOUT_CLASSIFICATION	2.9957736846460797E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999926498789783	WITHOUT_CLASSIFICATION	7.350121021631692E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9859212799912344	WITHOUT_CLASSIFICATION	0.014078720008765571	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999710263782137	WITHOUT_CLASSIFICATION	2.8973621786413114E-5	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999960010656852	WITHOUT_CLASSIFICATION	3.998934314797681E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9985070797887678	WITHOUT_CLASSIFICATION	0.0014929202112321383	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9901976134682899	WITHOUT_CLASSIFICATION	0.009802386531709943	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9963569256216472	WITHOUT_CLASSIFICATION	0.00364307437835282	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9898758489888024	WITHOUT_CLASSIFICATION	0.010124151011197475	DEFECT
/*	DEFECT	0.9999269922898604	WITHOUT_CLASSIFICATION	7.300771013970107E-5	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9574926438497511	WITHOUT_CLASSIFICATION	0.04250735615024883	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9881996422517543	WITHOUT_CLASSIFICATION	0.011800357748245616	DEFECT
// TODO : should this be an error?	DEFECT	0.9994532875684534	DEFECT	5.46712431546565E-4	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.999417638146668	DEFECT	5.823618533320659E-4	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9669530919690285	DEFECT	0.033046908030971565	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6415962281443806	DEFECT	0.35840377185561945	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6415962281443806	DEFECT	0.35840377185561945	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.5452633857164909	WITHOUT_CLASSIFICATION	0.4547366142835091	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9998547665495806	WITHOUT_CLASSIFICATION	1.4523345041945E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.6561723252215846	WITHOUT_CLASSIFICATION	0.34382767477841525	DEFECT
// this call is side-effecty	DEFECT	0.9999598850346395	WITHOUT_CLASSIFICATION	4.011496536050831E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.984386609491758	WITHOUT_CLASSIFICATION	0.015613390508241846	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.7756485208085923	DEFECT	0.22435147919140783	WITHOUT_CLASSIFICATION
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9999228472402629	WITHOUT_CLASSIFICATION	7.715275973700932E-5	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.5013959201024766	WITHOUT_CLASSIFICATION	0.49860407989752337	DEFECT
//TODO: is this completely correct?	DEFECT	0.9964863229643344	DEFECT	0.0035136770356655137	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.999992355539074	WITHOUT_CLASSIFICATION	7.644460926132568E-6	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9813791575121409	WITHOUT_CLASSIFICATION	0.01862084248785913	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.7423046657437344	WITHOUT_CLASSIFICATION	0.25769533425626556	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9911694755736153	WITHOUT_CLASSIFICATION	0.008830524426384653	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999491474474312	DEFECT	5.08525525688109E-5	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.5103779413992718	DEFECT	0.48962205860072827	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9897070509507809	WITHOUT_CLASSIFICATION	0.010292949049218977	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.506461058309934	DEFECT	0.493538941690066	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.7035129814151126	DEFECT	0.29648701858488735	WITHOUT_CLASSIFICATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.5252512637669193	WITHOUT_CLASSIFICATION	0.4747487362330808	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.6415962281443806	DEFECT	0.35840377185561945	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9980243277915497	DEFECT	0.0019756722084503337	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9957139822472907	WITHOUT_CLASSIFICATION	0.004286017752709361	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.8113308525937853	DEFECT	0.18866914740621477	WITHOUT_CLASSIFICATION
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9998713781110519	WITHOUT_CLASSIFICATION	1.286218889480817E-4	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999741028280227	WITHOUT_CLASSIFICATION	2.5897171977298602E-5	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9960896173251882	WITHOUT_CLASSIFICATION	0.0039103826748117946	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9993368267163574	WITHOUT_CLASSIFICATION	6.631732836425466E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.8346226884071893	WITHOUT_CLASSIFICATION	0.16537731159281072	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.5990372872658913	WITHOUT_CLASSIFICATION	0.40096271273410866	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9335638045377217	WITHOUT_CLASSIFICATION	0.06643619546227833	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.7531259660297707	WITHOUT_CLASSIFICATION	0.24687403397022936	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.7017182834961923	DEFECT	0.29828171650380775	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9999908564393166	WITHOUT_CLASSIFICATION	9.14356068338308E-6	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.7357291093293418	DEFECT	0.2642708906706581	WITHOUT_CLASSIFICATION
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.6037036278456981	DEFECT	0.39629637215430186	WITHOUT_CLASSIFICATION
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9873520363438161	WITHOUT_CLASSIFICATION	0.012647963656183899	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9287835699879082	DEFECT	0.07121643001209185	WITHOUT_CLASSIFICATION
