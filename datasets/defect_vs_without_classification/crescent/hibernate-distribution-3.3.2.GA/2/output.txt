//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997785136965329	WITHOUT_CLASSIFICATION	2.2148630346715512E-4	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.999379382759376	WITHOUT_CLASSIFICATION	6.20617240624008E-4	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999960145299734	WITHOUT_CLASSIFICATION	3.985470026530416E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999903281747685	WITHOUT_CLASSIFICATION	9.67182523145754E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999795999377707	WITHOUT_CLASSIFICATION	2.040006222925233E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999795999377707	WITHOUT_CLASSIFICATION	2.040006222925233E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999964694000559	WITHOUT_CLASSIFICATION	3.5305999441109235E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989667624123	WITHOUT_CLASSIFICATION	1.0332375877511984E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999916586154618	WITHOUT_CLASSIFICATION	8.341384538272471E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999951870219422	WITHOUT_CLASSIFICATION	4.812978057782922E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999895421836106	WITHOUT_CLASSIFICATION	1.0457816389425922E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999895421836106	WITHOUT_CLASSIFICATION	1.0457816389425922E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999900841711856	WITHOUT_CLASSIFICATION	9.915828814258775E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999967584081632	WITHOUT_CLASSIFICATION	3.2415918368336905E-6	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999899916956074	WITHOUT_CLASSIFICATION	1.000830439249917E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999992624626205	WITHOUT_CLASSIFICATION	7.375373795026003E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993964346161	WITHOUT_CLASSIFICATION	6.035653838501095E-7	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999178726826911	WITHOUT_CLASSIFICATION	8.212731730885185E-5	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999317034141446	WITHOUT_CLASSIFICATION	6.829658585538616E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999140357855439	WITHOUT_CLASSIFICATION	8.5964214456009E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998678626261079	WITHOUT_CLASSIFICATION	1.321373738919998E-4	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9974349210564086	WITHOUT_CLASSIFICATION	0.002565078943591338	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999254729345758	WITHOUT_CLASSIFICATION	7.452706542424091E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999437163473909	WITHOUT_CLASSIFICATION	5.6283652609114105E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999912659830498	WITHOUT_CLASSIFICATION	8.73401695026481E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999364802388255	WITHOUT_CLASSIFICATION	6.351976117447252E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999364802388255	WITHOUT_CLASSIFICATION	6.351976117447252E-5	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.999999943803881	WITHOUT_CLASSIFICATION	5.6196118991650886E-8	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999856023131824	WITHOUT_CLASSIFICATION	1.4397686817600424E-4	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999942657196111	WITHOUT_CLASSIFICATION	5.734280388919626E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997075369246	WITHOUT_CLASSIFICATION	2.92463075454839E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999980024442428	WITHOUT_CLASSIFICATION	1.9975557573147274E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9978163247693849	WITHOUT_CLASSIFICATION	0.00218367523061516	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9978163247693849	WITHOUT_CLASSIFICATION	0.00218367523061516	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999993608543805	WITHOUT_CLASSIFICATION	6.391456195923145E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999281146801442	WITHOUT_CLASSIFICATION	7.188531985581319E-5	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999996924761366	WITHOUT_CLASSIFICATION	3.075238633868034E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999611716741588	WITHOUT_CLASSIFICATION	3.882832584124059E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999695488799915	WITHOUT_CLASSIFICATION	3.0451120008453567E-5	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955917349477	WITHOUT_CLASSIFICATION	4.408265052321821E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933032145947	WITHOUT_CLASSIFICATION	6.696785405362825E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999990503098197	WITHOUT_CLASSIFICATION	9.496901802987737E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998322017178417	WITHOUT_CLASSIFICATION	1.6779828215822596E-4	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997596389205	WITHOUT_CLASSIFICATION	2.4036107948615727E-7	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999938965849207	WITHOUT_CLASSIFICATION	6.103415079289602E-5	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9998322017178417	WITHOUT_CLASSIFICATION	1.6779828215822596E-4	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.999938965849207	WITHOUT_CLASSIFICATION	6.103415079289602E-5	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999775191362986	WITHOUT_CLASSIFICATION	2.2480863701263997E-5	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999995745443918	WITHOUT_CLASSIFICATION	4.254556082004999E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999991593641196	WITHOUT_CLASSIFICATION	8.40635880459722E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999597203670668	WITHOUT_CLASSIFICATION	4.027963293308269E-5	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999997139394317	WITHOUT_CLASSIFICATION	2.860605682675561E-7	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999997088156617	WITHOUT_CLASSIFICATION	2.911843383245384E-7	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999997919781424	WITHOUT_CLASSIFICATION	2.0802185751007744E-7	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999518063443	WITHOUT_CLASSIFICATION	4.819365569999927E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999952255136155	WITHOUT_CLASSIFICATION	4.774486384525337E-6	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997366879072598	WITHOUT_CLASSIFICATION	2.633120927402452E-4	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999930439396655	WITHOUT_CLASSIFICATION	6.956060334466045E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999878365084396	WITHOUT_CLASSIFICATION	1.2163491560448E-5	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999994610856692	WITHOUT_CLASSIFICATION	5.389143308450308E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999281849516594	WITHOUT_CLASSIFICATION	7.181504834057391E-5	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999994250976272	WITHOUT_CLASSIFICATION	5.749023728029097E-6	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999999660383116	WITHOUT_CLASSIFICATION	3.3961688302678545E-8	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999787687440996	WITHOUT_CLASSIFICATION	2.123125590028706E-5	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999990852370987	WITHOUT_CLASSIFICATION	9.147629012070866E-7	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999991331814895	WITHOUT_CLASSIFICATION	8.668185105803906E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999987338645739	WITHOUT_CLASSIFICATION	1.2661354260111398E-6	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999990678136159	WITHOUT_CLASSIFICATION	9.321863842027742E-7	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9966019391860551	WITHOUT_CLASSIFICATION	0.0033980608139448994	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999951041862962	WITHOUT_CLASSIFICATION	4.8958137036981864E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999882708373252	WITHOUT_CLASSIFICATION	1.1729162674886491E-5	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999982028739185	WITHOUT_CLASSIFICATION	1.7971260815367641E-6	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999989208040339	WITHOUT_CLASSIFICATION	1.0791959661019586E-5	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999278815452	WITHOUT_CLASSIFICATION	7.211845479529196E-8	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999997696987487	WITHOUT_CLASSIFICATION	2.3030125131118111E-7	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999992406240755	WITHOUT_CLASSIFICATION	7.593759244153873E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999996232169562	WITHOUT_CLASSIFICATION	3.7678304379360857E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999781496395805	WITHOUT_CLASSIFICATION	2.1850360419468748E-5	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999852451542697	WITHOUT_CLASSIFICATION	1.4754845730385607E-5	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999252474585926	WITHOUT_CLASSIFICATION	7.475254140742722E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999993094138759	WITHOUT_CLASSIFICATION	6.905861240960075E-6	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999942587132893	WITHOUT_CLASSIFICATION	5.741286710636069E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999994608435901	WITHOUT_CLASSIFICATION	5.391564098329239E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999993094138759	WITHOUT_CLASSIFICATION	6.905861240960075E-6	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999979842782672	WITHOUT_CLASSIFICATION	2.0157217327346843E-6	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998225346390873	WITHOUT_CLASSIFICATION	1.7746536091258115E-4	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999660166140564	WITHOUT_CLASSIFICATION	3.3983385943600635E-5	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999768645028104	WITHOUT_CLASSIFICATION	2.313549718954509E-5	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999880344844475	WITHOUT_CLASSIFICATION	1.196551555253814E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999125669834	WITHOUT_CLASSIFICATION	8.743301660496222E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999125669834	WITHOUT_CLASSIFICATION	8.743301660496222E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999964675787439	WITHOUT_CLASSIFICATION	3.532421256112798E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999997410621	WITHOUT_CLASSIFICATION	2.5893789995549977E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999769536410029	WITHOUT_CLASSIFICATION	2.3046358997051544E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999985305569162	WITHOUT_CLASSIFICATION	1.4694430838466482E-6	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999006510164	WITHOUT_CLASSIFICATION	9.93489835900455E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999977752625225	WITHOUT_CLASSIFICATION	2.2247374774962677E-6	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999856564957514	WITHOUT_CLASSIFICATION	1.4343504248690581E-5	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999577627833756	WITHOUT_CLASSIFICATION	4.223721662447471E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999977043764734	WITHOUT_CLASSIFICATION	2.2956235265350183E-6	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999938595563964	WITHOUT_CLASSIFICATION	6.140443603557435E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966809664083	WITHOUT_CLASSIFICATION	3.319033591754053E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966809664083	WITHOUT_CLASSIFICATION	3.319033591754053E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999984161802936	WITHOUT_CLASSIFICATION	1.583819706434649E-6	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999961061573795	WITHOUT_CLASSIFICATION	3.893842620377546E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999951360866141	WITHOUT_CLASSIFICATION	4.863913385966269E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999966809664083	WITHOUT_CLASSIFICATION	3.319033591754053E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999984161802936	WITHOUT_CLASSIFICATION	1.583819706434649E-6	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999984161802936	WITHOUT_CLASSIFICATION	1.583819706434649E-6	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999993889973737	WITHOUT_CLASSIFICATION	6.11002626148128E-7	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999982288108655	WITHOUT_CLASSIFICATION	1.7711891345156146E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999853255247958	WITHOUT_CLASSIFICATION	1.4674475204147627E-5	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999997520857414	WITHOUT_CLASSIFICATION	2.479142585343737E-7	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999983781071696	WITHOUT_CLASSIFICATION	1.6218928303726184E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999983781071696	WITHOUT_CLASSIFICATION	1.6218928303726184E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999908536271762	WITHOUT_CLASSIFICATION	9.14637282379329E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999948974863174	WITHOUT_CLASSIFICATION	5.102513682526449E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999821962635169	WITHOUT_CLASSIFICATION	1.7803736483037406E-5	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996698955209	WITHOUT_CLASSIFICATION	3.301044791039198E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996698955209	WITHOUT_CLASSIFICATION	3.301044791039198E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999940094649047	WITHOUT_CLASSIFICATION	5.990535095391366E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970278474788	WITHOUT_CLASSIFICATION	2.9721525212448994E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999922146935756	WITHOUT_CLASSIFICATION	7.785306424388666E-6	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.999997040392844	WITHOUT_CLASSIFICATION	2.9596071559398155E-6	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999992290603659	WITHOUT_CLASSIFICATION	7.709396340905693E-7	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999154833529	WITHOUT_CLASSIFICATION	8.451664711189986E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999956493199993	WITHOUT_CLASSIFICATION	4.350680000676064E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999996953051979	WITHOUT_CLASSIFICATION	3.04694802084187E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999409292192821	WITHOUT_CLASSIFICATION	5.907078071783222E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999922146935756	WITHOUT_CLASSIFICATION	7.785306424388666E-6	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999094879776181	WITHOUT_CLASSIFICATION	9.051202238196273E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999815604272072	WITHOUT_CLASSIFICATION	1.8439572792817742E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999815604272072	WITHOUT_CLASSIFICATION	1.8439572792817742E-5	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999773324371624	WITHOUT_CLASSIFICATION	2.2667562837551727E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.999991155979735	WITHOUT_CLASSIFICATION	8.844020264939502E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999998623583762	WITHOUT_CLASSIFICATION	1.376416238691091E-7	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999855335400035	WITHOUT_CLASSIFICATION	1.4466459996489025E-5	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999512295646569	WITHOUT_CLASSIFICATION	4.877043534320491E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999281608487672	WITHOUT_CLASSIFICATION	7.183915123269123E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999841838823751	WITHOUT_CLASSIFICATION	1.5816117624878834E-5	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999997380192639	WITHOUT_CLASSIFICATION	2.619807361754795E-7	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999975204232842	WITHOUT_CLASSIFICATION	2.47957671590637E-6	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999975204232842	WITHOUT_CLASSIFICATION	2.47957671590637E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9997785136965329	WITHOUT_CLASSIFICATION	2.2148630346715512E-4	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999868391474444	WITHOUT_CLASSIFICATION	1.3160852555510453E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999928701242388	WITHOUT_CLASSIFICATION	7.1298757612364355E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999869745378581	WITHOUT_CLASSIFICATION	1.3025462141791838E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999834651936086	WITHOUT_CLASSIFICATION	1.653480639145494E-5	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999860177369355	WITHOUT_CLASSIFICATION	1.398226306440878E-5	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999894140688914	WITHOUT_CLASSIFICATION	1.0585931108678248E-5	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999874918781554	WITHOUT_CLASSIFICATION	1.2508121844546904E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999730631897401	WITHOUT_CLASSIFICATION	2.6936810259786957E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999782914498437	WITHOUT_CLASSIFICATION	2.1708550156221252E-5	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999925898223466	WITHOUT_CLASSIFICATION	7.410177653333735E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999960145299734	WITHOUT_CLASSIFICATION	3.985470026530416E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999900714520282	WITHOUT_CLASSIFICATION	9.928547971683678E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999900714520282	WITHOUT_CLASSIFICATION	9.928547971683678E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999905717313105	WITHOUT_CLASSIFICATION	9.428268689461143E-6	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999845865606706	WITHOUT_CLASSIFICATION	1.541343932940086E-4	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999963234944151	WITHOUT_CLASSIFICATION	3.676505584939618E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9998514790760222	WITHOUT_CLASSIFICATION	1.4852092397783039E-4	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999848345715606	WITHOUT_CLASSIFICATION	1.5165428439250545E-5	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999919415164762	WITHOUT_CLASSIFICATION	8.058483523865003E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999795999377707	WITHOUT_CLASSIFICATION	2.040006222925233E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999988442806427	WITHOUT_CLASSIFICATION	1.1557193572695562E-6	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999389002683695	WITHOUT_CLASSIFICATION	6.109973163050053E-5	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999918526351614	WITHOUT_CLASSIFICATION	8.14736483853922E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999881883990713	WITHOUT_CLASSIFICATION	1.1811600928717387E-5	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999542267316768	WITHOUT_CLASSIFICATION	4.577326832322177E-5	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999831478057524	WITHOUT_CLASSIFICATION	1.6852194247650036E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999882003822376	WITHOUT_CLASSIFICATION	1.1799617762510075E-5	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999075034141	WITHOUT_CLASSIFICATION	9.249658589784538E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999989191899827	WITHOUT_CLASSIFICATION	1.0808100172440369E-6	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.99998073309519	WITHOUT_CLASSIFICATION	1.9266904810042294E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999980204653315	WITHOUT_CLASSIFICATION	1.9795346684147237E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999963783393865	WITHOUT_CLASSIFICATION	3.621660613527733E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999827666830939	WITHOUT_CLASSIFICATION	1.7233316906044642E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999782914498437	WITHOUT_CLASSIFICATION	2.1708550156221252E-5	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999900714520282	WITHOUT_CLASSIFICATION	9.928547971683678E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999882003822376	WITHOUT_CLASSIFICATION	1.1799617762510075E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999964694000559	WITHOUT_CLASSIFICATION	3.5305999441109235E-6	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999963946181178	WITHOUT_CLASSIFICATION	3.605381882115088E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999950322717629	WITHOUT_CLASSIFICATION	4.967728237107313E-6	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999971228321577	WITHOUT_CLASSIFICATION	2.87716784237926E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999542622716532	WITHOUT_CLASSIFICATION	4.5737728346725426E-5	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999949439408529	WITHOUT_CLASSIFICATION	5.056059147143905E-6	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999765740707984	WITHOUT_CLASSIFICATION	2.342592920162322E-5	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999826477877825	WITHOUT_CLASSIFICATION	1.7352212217559043E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9998312784323019	WITHOUT_CLASSIFICATION	1.6872156769805533E-4	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998181110353047	WITHOUT_CLASSIFICATION	1.8188896469518737E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998091665806377	WITHOUT_CLASSIFICATION	1.9083341936237215E-4	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9998091665806377	WITHOUT_CLASSIFICATION	1.9083341936237215E-4	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999737125307364	WITHOUT_CLASSIFICATION	2.6287469263668577E-5	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999711287646391	WITHOUT_CLASSIFICATION	2.8871235360922282E-5	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999192317016203	WITHOUT_CLASSIFICATION	8.07682983796987E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999848188789809	WITHOUT_CLASSIFICATION	1.5181121019222481E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999680511408147	WITHOUT_CLASSIFICATION	3.194885918526098E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999972899586491	WITHOUT_CLASSIFICATION	2.7100413509433602E-6	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999616588413518	WITHOUT_CLASSIFICATION	3.8341158648160816E-5	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989667624123	WITHOUT_CLASSIFICATION	1.0332375877511984E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999655533413337	WITHOUT_CLASSIFICATION	3.4446658666284575E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999812941249702	WITHOUT_CLASSIFICATION	1.8705875029849473E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999812941249702	WITHOUT_CLASSIFICATION	1.8705875029849473E-5	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999915310441148	WITHOUT_CLASSIFICATION	8.46895588518E-6	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999898277872836	WITHOUT_CLASSIFICATION	1.017221271633069E-5	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999938492984133	WITHOUT_CLASSIFICATION	6.150701586794059E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999990259238877	WITHOUT_CLASSIFICATION	9.740761123148115E-7	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999172922005485	WITHOUT_CLASSIFICATION	8.270779945154974E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999641819131387	WITHOUT_CLASSIFICATION	3.5818086861263084E-5	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999782914498437	WITHOUT_CLASSIFICATION	2.1708550156221252E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999960145299734	WITHOUT_CLASSIFICATION	3.985470026530416E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999882003822376	WITHOUT_CLASSIFICATION	1.1799617762510075E-5	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999882003822376	WITHOUT_CLASSIFICATION	1.1799617762510075E-5	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999111613883	WITHOUT_CLASSIFICATION	8.883861170496956E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999111613883	WITHOUT_CLASSIFICATION	8.883861170496956E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999791848768244	WITHOUT_CLASSIFICATION	2.081512317557413E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999880890624501	WITHOUT_CLASSIFICATION	1.1910937549838316E-5	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999880890624501	WITHOUT_CLASSIFICATION	1.1910937549838316E-5	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999767605525367	WITHOUT_CLASSIFICATION	2.3239447463288528E-5	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999602777013752	WITHOUT_CLASSIFICATION	3.972229862471447E-5	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999914314828963	WITHOUT_CLASSIFICATION	8.568517103675907E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999987805942298	WITHOUT_CLASSIFICATION	1.2194057701961604E-5	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999986570678936	WITHOUT_CLASSIFICATION	1.3429321064143047E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999951870219422	WITHOUT_CLASSIFICATION	4.812978057782922E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999951870219422	WITHOUT_CLASSIFICATION	4.812978057782922E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999646552040398	WITHOUT_CLASSIFICATION	3.534479596027013E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999962148115064	WITHOUT_CLASSIFICATION	3.785188493743585E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999934192662374	WITHOUT_CLASSIFICATION	6.580733762564652E-6	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999712843427643	WITHOUT_CLASSIFICATION	2.8715657235730268E-5	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999868337962431	WITHOUT_CLASSIFICATION	1.3166203756965768E-5	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999453924019226	WITHOUT_CLASSIFICATION	5.460759807731844E-5	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999895421836106	WITHOUT_CLASSIFICATION	1.0457816389425922E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999754724440307	WITHOUT_CLASSIFICATION	2.4527555969216287E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999754724440307	WITHOUT_CLASSIFICATION	2.4527555969216287E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999900841711856	WITHOUT_CLASSIFICATION	9.915828814258775E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999900841711856	WITHOUT_CLASSIFICATION	9.915828814258775E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999889737451658	WITHOUT_CLASSIFICATION	1.1026254834224692E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999889737451658	WITHOUT_CLASSIFICATION	1.1026254834224692E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999969602782431	WITHOUT_CLASSIFICATION	3.0397217568054754E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999969602782431	WITHOUT_CLASSIFICATION	3.0397217568054754E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999951870219422	WITHOUT_CLASSIFICATION	4.812978057782922E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999895421836106	WITHOUT_CLASSIFICATION	1.0457816389425922E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999754724440307	WITHOUT_CLASSIFICATION	2.4527555969216287E-5	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999754724440307	WITHOUT_CLASSIFICATION	2.4527555969216287E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999900841711856	WITHOUT_CLASSIFICATION	9.915828814258775E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999889737451658	WITHOUT_CLASSIFICATION	1.1026254834224692E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999889737451658	WITHOUT_CLASSIFICATION	1.1026254834224692E-5	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999969602782431	WITHOUT_CLASSIFICATION	3.0397217568054754E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999560233546934	WITHOUT_CLASSIFICATION	4.3976645306730896E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999879588343038	WITHOUT_CLASSIFICATION	1.204116569623514E-5	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.999986923893531	WITHOUT_CLASSIFICATION	1.3076106468947343E-5	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999997567897888	WITHOUT_CLASSIFICATION	2.4321021120090273E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999665029885966	WITHOUT_CLASSIFICATION	3.349701140350107E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999814648072997	WITHOUT_CLASSIFICATION	1.8535192700338177E-5	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999942540347162	WITHOUT_CLASSIFICATION	5.745965283803709E-6	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999778548721209	WITHOUT_CLASSIFICATION	2.214512787918975E-5	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999646242603325	WITHOUT_CLASSIFICATION	3.537573966749455E-5	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.99998249602354	WITHOUT_CLASSIFICATION	1.7503976460019604E-5	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999999660380993	WITHOUT_CLASSIFICATION	3.396190070324511E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999985010341523	WITHOUT_CLASSIFICATION	1.4989658476646312E-6	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999964675787439	WITHOUT_CLASSIFICATION	3.532421256112798E-5	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999814648072997	WITHOUT_CLASSIFICATION	1.8535192700338177E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997710596446591	WITHOUT_CLASSIFICATION	2.2894035534089317E-4	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997710596446591	WITHOUT_CLASSIFICATION	2.2894035534089317E-4	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999963849638352	WITHOUT_CLASSIFICATION	3.615036164709362E-6	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999990763611448	WITHOUT_CLASSIFICATION	9.236388550965346E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999990763611448	WITHOUT_CLASSIFICATION	9.236388550965346E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999953712415764	WITHOUT_CLASSIFICATION	4.628758423564311E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999999762857693	WITHOUT_CLASSIFICATION	2.3714230693217598E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999963557156832	WITHOUT_CLASSIFICATION	3.6442843166780328E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999932280790929	WITHOUT_CLASSIFICATION	6.771920907119463E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999932280790929	WITHOUT_CLASSIFICATION	6.771920907119463E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999993964346161	WITHOUT_CLASSIFICATION	6.035653838501095E-7	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977503214958	WITHOUT_CLASSIFICATION	2.2496785041752526E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999977503214958	WITHOUT_CLASSIFICATION	2.2496785041752526E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999996905812399	WITHOUT_CLASSIFICATION	3.0941875997940845E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999972661210391	WITHOUT_CLASSIFICATION	2.7338789608465536E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999918459529967	WITHOUT_CLASSIFICATION	8.154047003184575E-6	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9998475003067628	WITHOUT_CLASSIFICATION	1.5249969323715643E-4	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999181831544591	WITHOUT_CLASSIFICATION	8.181684554084265E-5	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999393051715639	WITHOUT_CLASSIFICATION	6.0694828435975424E-5	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999178726826911	WITHOUT_CLASSIFICATION	8.212731730885185E-5	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999560275571645	WITHOUT_CLASSIFICATION	4.397244283551008E-5	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9858282961242804	WITHOUT_CLASSIFICATION	0.014171703875719623	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999441707637757	WITHOUT_CLASSIFICATION	5.5829236224268794E-5	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9996888726944425	WITHOUT_CLASSIFICATION	3.111273055575463E-4	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998678626261079	WITHOUT_CLASSIFICATION	1.321373738919998E-4	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999973383784809	WITHOUT_CLASSIFICATION	2.6616215190925624E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999928651871911	WITHOUT_CLASSIFICATION	7.134812808931426E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999996668594284	WITHOUT_CLASSIFICATION	3.331405715331377E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998678626261079	WITHOUT_CLASSIFICATION	1.321373738919998E-4	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999992512116608	WITHOUT_CLASSIFICATION	7.48788339215623E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999990860497223	WITHOUT_CLASSIFICATION	9.139502777600309E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999067267658179	WITHOUT_CLASSIFICATION	9.327323418205709E-5	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999432097261685	WITHOUT_CLASSIFICATION	5.679027383145242E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9998760296438055	WITHOUT_CLASSIFICATION	1.239703561945118E-4	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999861521329808	WITHOUT_CLASSIFICATION	1.3847867019195392E-4	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995894749567441	WITHOUT_CLASSIFICATION	4.105250432559362E-4	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999437163473909	WITHOUT_CLASSIFICATION	5.6283652609114105E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998531298085583	WITHOUT_CLASSIFICATION	1.4687019144162328E-4	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999912659830498	WITHOUT_CLASSIFICATION	8.73401695026481E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999868513111543	WITHOUT_CLASSIFICATION	1.3148688845679196E-5	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999971080456287	WITHOUT_CLASSIFICATION	2.8919543712810538E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998901746295151	WITHOUT_CLASSIFICATION	1.098253704849687E-4	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999178726826911	WITHOUT_CLASSIFICATION	8.212731730885185E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998531298085583	WITHOUT_CLASSIFICATION	1.4687019144162328E-4	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999868513111543	WITHOUT_CLASSIFICATION	1.3148688845679196E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998901746295151	WITHOUT_CLASSIFICATION	1.098253704849687E-4	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999997162029136	WITHOUT_CLASSIFICATION	2.8379708638550193E-6	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9998551890675009	WITHOUT_CLASSIFICATION	1.448109324990086E-4	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999991520521293	WITHOUT_CLASSIFICATION	8.479478707693548E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999364802388255	WITHOUT_CLASSIFICATION	6.351976117447252E-5	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999421027981624	WITHOUT_CLASSIFICATION	5.7897201837538204E-5	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999851282661828	WITHOUT_CLASSIFICATION	1.4871733817159444E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999742285009079	WITHOUT_CLASSIFICATION	2.5771499092100806E-5	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999997470225747	WITHOUT_CLASSIFICATION	2.529774253012116E-6	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999753532180234	WITHOUT_CLASSIFICATION	2.464678197651197E-5	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999934050029358	WITHOUT_CLASSIFICATION	6.594997064168949E-6	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999988357960408	WITHOUT_CLASSIFICATION	1.1642039591953756E-6	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999998346606143	WITHOUT_CLASSIFICATION	1.6533938569773753E-7	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999989417650829	WITHOUT_CLASSIFICATION	1.0582349170483813E-6	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999988711978436	WITHOUT_CLASSIFICATION	1.1288021564464292E-6	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999408985166648	WITHOUT_CLASSIFICATION	5.910148333522789E-5	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999122156966211	WITHOUT_CLASSIFICATION	8.778430337878162E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.999856023131824	WITHOUT_CLASSIFICATION	1.4397686817600424E-4	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999975629545886	WITHOUT_CLASSIFICATION	2.4370454114112466E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999204780348727	WITHOUT_CLASSIFICATION	7.952196512727958E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9998531298085583	WITHOUT_CLASSIFICATION	1.4687019144162328E-4	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999991615954482	WITHOUT_CLASSIFICATION	8.384045517219759E-7	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999925805797862	WITHOUT_CLASSIFICATION	7.419420213840305E-6	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999922859359839	WITHOUT_CLASSIFICATION	7.714064016155117E-6	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999672115599338	WITHOUT_CLASSIFICATION	3.2788440066098875E-5	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999984290757674	WITHOUT_CLASSIFICATION	1.5709242326969934E-6	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999925725686187	WITHOUT_CLASSIFICATION	7.427431381346722E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999885144083038	WITHOUT_CLASSIFICATION	1.1485591696185354E-5	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999994046613527	WITHOUT_CLASSIFICATION	5.953386473892384E-7	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999646195514221	WITHOUT_CLASSIFICATION	3.538044857781511E-5	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999337858719874	WITHOUT_CLASSIFICATION	6.621412801260682E-5	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999681074040847	WITHOUT_CLASSIFICATION	3.189259591530013E-5	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998804372707097	WITHOUT_CLASSIFICATION	1.1956272929023121E-4	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999988664056316	WITHOUT_CLASSIFICATION	1.1335943683271137E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997075369246	WITHOUT_CLASSIFICATION	2.92463075454839E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999936908677328	WITHOUT_CLASSIFICATION	6.3091322671163134E-6	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999986596386218	WITHOUT_CLASSIFICATION	1.3403613781345992E-6	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999785454542945	WITHOUT_CLASSIFICATION	2.145454570548644E-5	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999875765221201	WITHOUT_CLASSIFICATION	1.2423477879915489E-5	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999879201917821	WITHOUT_CLASSIFICATION	1.2079808217907707E-5	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999971392443875	WITHOUT_CLASSIFICATION	2.860755612384967E-6	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998193504568	WITHOUT_CLASSIFICATION	1.8064954328639532E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999962101748707	WITHOUT_CLASSIFICATION	3.7898251293196487E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999929282194605	WITHOUT_CLASSIFICATION	7.071780539410869E-6	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999465706267769	WITHOUT_CLASSIFICATION	5.34293732230424E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998697023764646	WITHOUT_CLASSIFICATION	1.302976235354661E-4	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998697023764646	WITHOUT_CLASSIFICATION	1.302976235354661E-4	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997995375509547	WITHOUT_CLASSIFICATION	2.004624490453404E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999893935296874	WITHOUT_CLASSIFICATION	1.0606470312581021E-5	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999881884682468	WITHOUT_CLASSIFICATION	1.1811531753245243E-5	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999623392449922	WITHOUT_CLASSIFICATION	3.766075500775031E-5	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999596995398696	WITHOUT_CLASSIFICATION	4.0300460130334696E-5	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999234986418014	WITHOUT_CLASSIFICATION	7.650135819864161E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999943555092193	WITHOUT_CLASSIFICATION	5.644490780717862E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999985098762013	WITHOUT_CLASSIFICATION	1.4901237986615724E-6	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999156177881543	WITHOUT_CLASSIFICATION	8.438221184577046E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998923757536069	WITHOUT_CLASSIFICATION	1.0762424639310652E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999634378557812	WITHOUT_CLASSIFICATION	3.656214421882578E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999991049135644	WITHOUT_CLASSIFICATION	8.950864356894895E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9999927094576421	WITHOUT_CLASSIFICATION	7.2905423578993314E-6	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999912635457258	WITHOUT_CLASSIFICATION	8.736454274297963E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900919081495	WITHOUT_CLASSIFICATION	9.908091850559092E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971375657964	WITHOUT_CLASSIFICATION	2.8624342036316727E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999791479877244	WITHOUT_CLASSIFICATION	2.0852012275715566E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999980093744048	WITHOUT_CLASSIFICATION	1.9906255952336513E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999992872366541	WITHOUT_CLASSIFICATION	7.127633458870063E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999863716028216	WITHOUT_CLASSIFICATION	1.3628397178427944E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999861685278106	WITHOUT_CLASSIFICATION	1.3831472189326326E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999861685278106	WITHOUT_CLASSIFICATION	1.3831472189326326E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.999808769810989	WITHOUT_CLASSIFICATION	1.9123018901101655E-4	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.999808769810989	WITHOUT_CLASSIFICATION	1.9123018901101655E-4	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999929282194605	WITHOUT_CLASSIFICATION	7.071780539410869E-6	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999805377607757	WITHOUT_CLASSIFICATION	1.9462239224306906E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999456784954891	WITHOUT_CLASSIFICATION	5.432150451087178E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999976946663173	WITHOUT_CLASSIFICATION	2.3053336828105413E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999456784954891	WITHOUT_CLASSIFICATION	5.432150451087178E-5	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999976946663173	WITHOUT_CLASSIFICATION	2.3053336828105413E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903852944111	WITHOUT_CLASSIFICATION	9.61470558897382E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999945011317486	WITHOUT_CLASSIFICATION	5.498868251425425E-6	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999973729517992	WITHOUT_CLASSIFICATION	2.6270482006396237E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999968580818412	WITHOUT_CLASSIFICATION	3.1419181588734866E-6	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993523693676919	WITHOUT_CLASSIFICATION	6.476306323080284E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999865242093903	WITHOUT_CLASSIFICATION	1.3475790609760482E-5	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999945391904169	WITHOUT_CLASSIFICATION	5.4608095830248266E-6	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999693595796614	WITHOUT_CLASSIFICATION	3.064042033868685E-5	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9900664754010703	WITHOUT_CLASSIFICATION	0.009933524598929653	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999987688341426	WITHOUT_CLASSIFICATION	1.2311658573751755E-6	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999988131111935	WITHOUT_CLASSIFICATION	1.1868888064517916E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999994445984317	WITHOUT_CLASSIFICATION	5.554015682304344E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999945940385262	WITHOUT_CLASSIFICATION	5.405961473850743E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999387161601658	WITHOUT_CLASSIFICATION	6.128383983424345E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999530937653942	WITHOUT_CLASSIFICATION	4.6906234605779005E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998632836045036	WITHOUT_CLASSIFICATION	1.3671639549645375E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998632836045036	WITHOUT_CLASSIFICATION	1.3671639549645375E-4	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999992057150686	WITHOUT_CLASSIFICATION	7.94284931264311E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903852944111	WITHOUT_CLASSIFICATION	9.61470558897382E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999822893802014	WITHOUT_CLASSIFICATION	1.7710619798518212E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999985713461371	WITHOUT_CLASSIFICATION	1.4286538628322439E-6	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999995545552636	WITHOUT_CLASSIFICATION	4.454447363351427E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999337972187063	WITHOUT_CLASSIFICATION	6.620278129365189E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998043570501169	WITHOUT_CLASSIFICATION	1.9564294988300745E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903852944111	WITHOUT_CLASSIFICATION	9.61470558897382E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999337972187063	WITHOUT_CLASSIFICATION	6.620278129365189E-5	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998043570501169	WITHOUT_CLASSIFICATION	1.9564294988300745E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998006269928598	WITHOUT_CLASSIFICATION	1.9937300714019333E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999383453476495	WITHOUT_CLASSIFICATION	6.165465235054121E-5	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999977914909435	WITHOUT_CLASSIFICATION	2.2085090566355906E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903852944111	WITHOUT_CLASSIFICATION	9.61470558897382E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999903852944111	WITHOUT_CLASSIFICATION	9.61470558897382E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999865735065435	WITHOUT_CLASSIFICATION	1.3426493456476774E-5	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999940018479726	WITHOUT_CLASSIFICATION	5.998152027484587E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999372834920739	WITHOUT_CLASSIFICATION	6.271650792609466E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999952528533218	WITHOUT_CLASSIFICATION	4.74714667815247E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.999956962357106	WITHOUT_CLASSIFICATION	4.30376428940392E-5	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999994372238992	WITHOUT_CLASSIFICATION	5.627761009085071E-7	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999972887906785	WITHOUT_CLASSIFICATION	2.7112093215192314E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999974840837198	WITHOUT_CLASSIFICATION	2.515916280139289E-6	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999982913519867	WITHOUT_CLASSIFICATION	1.708648013296414E-6	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999293212180616	WITHOUT_CLASSIFICATION	7.067878193853789E-5	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999989696656909	WITHOUT_CLASSIFICATION	1.0303343090970008E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999988059851815	WITHOUT_CLASSIFICATION	1.1940148183937362E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999947931701091	WITHOUT_CLASSIFICATION	5.206829890887045E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999978684419815	WITHOUT_CLASSIFICATION	2.1315580184611442E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998494980150885	WITHOUT_CLASSIFICATION	1.5050198491148263E-4	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999993735431998	WITHOUT_CLASSIFICATION	6.264568002052811E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999611716741588	WITHOUT_CLASSIFICATION	3.882832584124059E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999827963746061	WITHOUT_CLASSIFICATION	1.720362539400104E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9998690818268285	WITHOUT_CLASSIFICATION	1.3091817317146E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999958191376148	WITHOUT_CLASSIFICATION	4.180862385149144E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999567890155632	WITHOUT_CLASSIFICATION	4.32109844368248E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.999939338590591	WITHOUT_CLASSIFICATION	6.0661409409081494E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.999939338590591	WITHOUT_CLASSIFICATION	6.0661409409081494E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999611716741588	WITHOUT_CLASSIFICATION	3.882832584124059E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999969622724418	WITHOUT_CLASSIFICATION	3.0377275581581258E-6	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999987831298567	WITHOUT_CLASSIFICATION	1.2168701432799998E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999809703621478	WITHOUT_CLASSIFICATION	1.9029637852205882E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999537165718451	WITHOUT_CLASSIFICATION	4.628342815497089E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999344343474809	WITHOUT_CLASSIFICATION	6.556565251915797E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985281133362	WITHOUT_CLASSIFICATION	1.4718866637227186E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999981536701762	WITHOUT_CLASSIFICATION	1.8463298237790593E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999981835186852	WITHOUT_CLASSIFICATION	1.816481314795713E-6	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998963570207	WITHOUT_CLASSIFICATION	1.0364297930108539E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999996426355463	WITHOUT_CLASSIFICATION	3.573644536640206E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999991487982087	WITHOUT_CLASSIFICATION	8.512017912868393E-7	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999898293549035	WITHOUT_CLASSIFICATION	1.0170645096357825E-5	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998250825889797	WITHOUT_CLASSIFICATION	1.74917411020162E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999997490743728	WITHOUT_CLASSIFICATION	2.5092562717558596E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988531163669	WITHOUT_CLASSIFICATION	1.1468836329777705E-6	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999805830469107	WITHOUT_CLASSIFICATION	1.941695308923076E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999993960325032	WITHOUT_CLASSIFICATION	6.039674968890612E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999570414677509	WITHOUT_CLASSIFICATION	4.2958532249034754E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999887393121937	WITHOUT_CLASSIFICATION	1.12606878062569E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999997511412723	WITHOUT_CLASSIFICATION	2.4885872772858757E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999972122269739	WITHOUT_CLASSIFICATION	2.7877730261022983E-6	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999736192381	WITHOUT_CLASSIFICATION	2.6380761844170237E-8	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980807667903	WITHOUT_CLASSIFICATION	1.919233209713085E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969497813936	WITHOUT_CLASSIFICATION	3.050218606504438E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990278318383	WITHOUT_CLASSIFICATION	9.721681616867475E-6	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991786977198	WITHOUT_CLASSIFICATION	8.213022803332072E-7	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759639390905	WITHOUT_CLASSIFICATION	2.4036060909519275E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788786749562	WITHOUT_CLASSIFICATION	2.1121325043776298E-5	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742953718161	WITHOUT_CLASSIFICATION	2.5704628183816356E-5	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999823607350864	WITHOUT_CLASSIFICATION	1.7639264913670842E-5	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999948052807639	WITHOUT_CLASSIFICATION	5.194719236053315E-6	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999990126958609	WITHOUT_CLASSIFICATION	9.87304139061279E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986091716744	WITHOUT_CLASSIFICATION	1.3908283255910063E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967381607343	WITHOUT_CLASSIFICATION	3.2618392656944144E-6	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997279643079	WITHOUT_CLASSIFICATION	2.7203569208462805E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987308548439	WITHOUT_CLASSIFICATION	1.2691451560740541E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934624616575	WITHOUT_CLASSIFICATION	6.5375383424959895E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954105253042	WITHOUT_CLASSIFICATION	4.589474695758075E-6	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952689932122	WITHOUT_CLASSIFICATION	4.731006787764256E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762539460767	WITHOUT_CLASSIFICATION	2.3746053923409357E-5	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996460757725	WITHOUT_CLASSIFICATION	3.539242274039054E-7	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997723976703	WITHOUT_CLASSIFICATION	2.276023296998026E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9999647430473385	WITHOUT_CLASSIFICATION	3.5256952661559905E-5	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999980830337369	WITHOUT_CLASSIFICATION	1.9169662631064044E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999995200045546	WITHOUT_CLASSIFICATION	4.799954453599812E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998390683881454	WITHOUT_CLASSIFICATION	1.6093161185457697E-4	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999613444597923	WITHOUT_CLASSIFICATION	3.865554020764487E-5	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999914680140388	WITHOUT_CLASSIFICATION	8.531985961256463E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999881856442466	WITHOUT_CLASSIFICATION	1.1814355753344544E-5	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998993983511858	WITHOUT_CLASSIFICATION	1.0060164881423118E-4	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.999933898225284	WITHOUT_CLASSIFICATION	6.610177471603446E-5	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9998108249230547	WITHOUT_CLASSIFICATION	1.8917507694519984E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999837529916668	WITHOUT_CLASSIFICATION	1.6247008333208584E-4	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999343896371846	WITHOUT_CLASSIFICATION	6.56103628154292E-5	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999996830919553	WITHOUT_CLASSIFICATION	3.169080446335904E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999922380775288	WITHOUT_CLASSIFICATION	7.76192247111569E-6	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999954795117396	WITHOUT_CLASSIFICATION	4.520488260415092E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999629903453962	WITHOUT_CLASSIFICATION	3.700965460378861E-5	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999899934324664	WITHOUT_CLASSIFICATION	1.0006567533517298E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930514192935	WITHOUT_CLASSIFICATION	6.948580706543287E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839418441369	WITHOUT_CLASSIFICATION	1.605815586307673E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892389501783	WITHOUT_CLASSIFICATION	1.0761049821574813E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964653287204	WITHOUT_CLASSIFICATION	3.534671279486822E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999426325983989	WITHOUT_CLASSIFICATION	5.736740160107585E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999964736321048	WITHOUT_CLASSIFICATION	3.526367895202385E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999996723809356	WITHOUT_CLASSIFICATION	3.276190644035754E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999987453638043	WITHOUT_CLASSIFICATION	1.2546361956740662E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919237206301	WITHOUT_CLASSIFICATION	8.076279369940383E-6	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999999523304056	WITHOUT_CLASSIFICATION	4.7669594399857564E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999939208740221	WITHOUT_CLASSIFICATION	6.079125977925175E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999864004935123	WITHOUT_CLASSIFICATION	1.3599506487787101E-5	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999994986539268	WITHOUT_CLASSIFICATION	5.013460731956471E-7	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999979886965451	WITHOUT_CLASSIFICATION	2.0113034548637014E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999998540318817	WITHOUT_CLASSIFICATION	1.4596811821081745E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999962489159168	WITHOUT_CLASSIFICATION	3.7510840832907554E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999920214363097	WITHOUT_CLASSIFICATION	7.97856369033103E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998390683881454	WITHOUT_CLASSIFICATION	1.6093161185457697E-4	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997131998732943	WITHOUT_CLASSIFICATION	2.8680012670570976E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999946488667826	WITHOUT_CLASSIFICATION	5.351133217411447E-6	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999901328941011	WITHOUT_CLASSIFICATION	9.867105898869444E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999971022902541	WITHOUT_CLASSIFICATION	2.8977097459728477E-6	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999970694241809	WITHOUT_CLASSIFICATION	2.9305758190212266E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999978958630928	WITHOUT_CLASSIFICATION	2.1041369071729443E-6	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9997291033644423	WITHOUT_CLASSIFICATION	2.7089663555766874E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999756845802229	WITHOUT_CLASSIFICATION	2.4315419777050577E-5	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999903796904808	WITHOUT_CLASSIFICATION	9.62030951922662E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980919245753	WITHOUT_CLASSIFICATION	1.908075424737116E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999977833099581	WITHOUT_CLASSIFICATION	2.2166900419044453E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999983822571974	WITHOUT_CLASSIFICATION	1.617742802601371E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999994460517555	WITHOUT_CLASSIFICATION	5.539482444193545E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997783417709	WITHOUT_CLASSIFICATION	2.2165822907727367E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999993684744215	WITHOUT_CLASSIFICATION	6.315255785164945E-7	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999860955133405	WITHOUT_CLASSIFICATION	1.3904486659606256E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999863244700978	WITHOUT_CLASSIFICATION	1.3675529902245771E-5	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981798180128	WITHOUT_CLASSIFICATION	1.8201819872004139E-6	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999101652703	WITHOUT_CLASSIFICATION	8.983472969491059E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999927100548367	WITHOUT_CLASSIFICATION	7.289945163300332E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999951729274007	WITHOUT_CLASSIFICATION	4.8270725992925755E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999936419066459	WITHOUT_CLASSIFICATION	6.358093354069582E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999900136100957	WITHOUT_CLASSIFICATION	9.986389904362275E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999993824365561	WITHOUT_CLASSIFICATION	6.175634439424769E-7	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999994739917297	WITHOUT_CLASSIFICATION	5.260082702543867E-7	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999973929225103	WITHOUT_CLASSIFICATION	2.607077489710773E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9974349210564086	WITHOUT_CLASSIFICATION	0.002565078943591338	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999867964075627	WITHOUT_CLASSIFICATION	1.320359243733706E-5	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999726619794564	WITHOUT_CLASSIFICATION	2.7338020543601855E-5	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999991506638659	WITHOUT_CLASSIFICATION	8.49336134113674E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998390683881454	WITHOUT_CLASSIFICATION	1.6093161185457697E-4	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999989816447823	WITHOUT_CLASSIFICATION	1.018355217688775E-6	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999996978258957	WITHOUT_CLASSIFICATION	3.0217410420423777E-7	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999981705245516	WITHOUT_CLASSIFICATION	1.829475448325422E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998390683881454	WITHOUT_CLASSIFICATION	1.6093161185457697E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999893035101708	WITHOUT_CLASSIFICATION	1.069648982925128E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999951729274007	WITHOUT_CLASSIFICATION	4.8270725992925755E-6	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999853890635931	WITHOUT_CLASSIFICATION	1.4610936406794601E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998552485097272	WITHOUT_CLASSIFICATION	1.4475149027277286E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999994694234621	WITHOUT_CLASSIFICATION	5.305765379077231E-7	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980919245753	WITHOUT_CLASSIFICATION	1.908075424737116E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999977833099581	WITHOUT_CLASSIFICATION	2.2166900419044453E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999983822571974	WITHOUT_CLASSIFICATION	1.617742802601371E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999990537323222	WITHOUT_CLASSIFICATION	9.462676777287187E-7	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999870038437074	WITHOUT_CLASSIFICATION	1.2996156292484624E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.999993181043019	WITHOUT_CLASSIFICATION	6.818956981015366E-6	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999803285195668	WITHOUT_CLASSIFICATION	1.9671480433322555E-5	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.999975684693883	WITHOUT_CLASSIFICATION	2.4315306116996996E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998390683881454	WITHOUT_CLASSIFICATION	1.6093161185457697E-4	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999994460517555	WITHOUT_CLASSIFICATION	5.539482444193545E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999997783417709	WITHOUT_CLASSIFICATION	2.2165822907727367E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980631743787	WITHOUT_CLASSIFICATION	1.9368256213168847E-6	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990246988878	WITHOUT_CLASSIFICATION	9.753011122492215E-7	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999976446025812	WITHOUT_CLASSIFICATION	2.3553974187542613E-6	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999865022283696	WITHOUT_CLASSIFICATION	1.3497771630313373E-5	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999988861040955	WITHOUT_CLASSIFICATION	1.113895904446087E-6	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999942105572046	WITHOUT_CLASSIFICATION	5.789442795307455E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762539460767	WITHOUT_CLASSIFICATION	2.3746053923409357E-5	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999943218536826	WITHOUT_CLASSIFICATION	5.678146317385071E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999906001879755	WITHOUT_CLASSIFICATION	9.39981202445519E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999893938180655	WITHOUT_CLASSIFICATION	1.0606181934499794E-5	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999997498721643	WITHOUT_CLASSIFICATION	2.5012783567607074E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999783453044198	WITHOUT_CLASSIFICATION	2.1654695580238546E-5	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999759639390905	WITHOUT_CLASSIFICATION	2.4036060909519275E-5	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999788786749562	WITHOUT_CLASSIFICATION	2.1121325043776298E-5	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967381607343	WITHOUT_CLASSIFICATION	3.2618392656944144E-6	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999783453044198	WITHOUT_CLASSIFICATION	2.1654695580238546E-5	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999978516683816	WITHOUT_CLASSIFICATION	2.1483316183630523E-6	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999994048656196	WITHOUT_CLASSIFICATION	5.951343803662795E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952470261221	WITHOUT_CLASSIFICATION	4.752973877860463E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999777999358287	WITHOUT_CLASSIFICATION	2.220006417133398E-5	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999995751902329	WITHOUT_CLASSIFICATION	4.248097671344225E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9996016335685629	WITHOUT_CLASSIFICATION	3.9836643143717205E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997279643079	WITHOUT_CLASSIFICATION	2.7203569208462805E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954105253042	WITHOUT_CLASSIFICATION	4.589474695758075E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999994986539268	WITHOUT_CLASSIFICATION	5.013460731956471E-7	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999921936002355	WITHOUT_CLASSIFICATION	7.806399764430937E-6	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999979532175093	WITHOUT_CLASSIFICATION	2.0467824907046703E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999991179144774	WITHOUT_CLASSIFICATION	8.820855227227758E-7	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999786114349336	WITHOUT_CLASSIFICATION	2.138856506644884E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999967459034231	WITHOUT_CLASSIFICATION	3.254096576876076E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.99999875665541	WITHOUT_CLASSIFICATION	1.2433445899202196E-6	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999710854059579	WITHOUT_CLASSIFICATION	2.89145940420231E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999998963570207	WITHOUT_CLASSIFICATION	1.0364297930108539E-7	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999983733537833	WITHOUT_CLASSIFICATION	1.6266462167226582E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999982046073271	WITHOUT_CLASSIFICATION	1.795392672863303E-6	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999983681786245	WITHOUT_CLASSIFICATION	1.63182137534826E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999993317944038	WITHOUT_CLASSIFICATION	6.68205596223586E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999995948078912	WITHOUT_CLASSIFICATION	4.051921088468386E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999492027642412	WITHOUT_CLASSIFICATION	5.079723575880356E-5	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904825460546	WITHOUT_CLASSIFICATION	9.51745394543539E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973258515615	WITHOUT_CLASSIFICATION	2.6741484385156725E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999931823839207	WITHOUT_CLASSIFICATION	6.817616079424782E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999952226776603	WITHOUT_CLASSIFICATION	4.777322339770109E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998609427498922	WITHOUT_CLASSIFICATION	1.3905725010775156E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999585164953312	WITHOUT_CLASSIFICATION	4.148350466893219E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999441075528166	WITHOUT_CLASSIFICATION	5.589244718331525E-5	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999011586445508	WITHOUT_CLASSIFICATION	9.884135544929239E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999849912497331	WITHOUT_CLASSIFICATION	1.500875026686968E-5	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999973694715596	WITHOUT_CLASSIFICATION	2.630528440430001E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999998495868752	WITHOUT_CLASSIFICATION	1.5041312479948642E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999939364415437	WITHOUT_CLASSIFICATION	6.063558456307448E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999825925471774	WITHOUT_CLASSIFICATION	1.7407452822646212E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974489893155	WITHOUT_CLASSIFICATION	2.551010684501234E-6	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980943637211	WITHOUT_CLASSIFICATION	1.905636278895716E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999999342072848	WITHOUT_CLASSIFICATION	6.579271520460008E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999733945657	WITHOUT_CLASSIFICATION	2.6605434309669215E-8	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999972983381488	WITHOUT_CLASSIFICATION	2.7016618511601376E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999985657141414	WITHOUT_CLASSIFICATION	1.4342858586495958E-6	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999691335112965	WITHOUT_CLASSIFICATION	3.086648870346036E-5	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999621431898142	WITHOUT_CLASSIFICATION	3.7856810185857894E-5	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997046371394	WITHOUT_CLASSIFICATION	2.953628605637446E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999990802837386	WITHOUT_CLASSIFICATION	9.197162612429175E-7	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999989291845951	WITHOUT_CLASSIFICATION	1.070815404911234E-5	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999995109376997	WITHOUT_CLASSIFICATION	4.890623004116027E-7	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999994715278644	WITHOUT_CLASSIFICATION	5.28472135657441E-7	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999966586515242	WITHOUT_CLASSIFICATION	3.341348475675648E-6	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999850724420444	WITHOUT_CLASSIFICATION	1.492755795571388E-5	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999985257976208	WITHOUT_CLASSIFICATION	1.474202379194151E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999983075053347	WITHOUT_CLASSIFICATION	1.6924946652846278E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999997113099325	WITHOUT_CLASSIFICATION	2.886900674873291E-7	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999985393909319	WITHOUT_CLASSIFICATION	1.4606090680623068E-6	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999990425188505	WITHOUT_CLASSIFICATION	9.574811493926394E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999995327912319	WITHOUT_CLASSIFICATION	4.672087680976552E-7	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999997309239377	WITHOUT_CLASSIFICATION	2.690760622897662E-7	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999893785104975	WITHOUT_CLASSIFICATION	1.0621489502527444E-5	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999936295295155	WITHOUT_CLASSIFICATION	6.3704704844432146E-6	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999988148819236	WITHOUT_CLASSIFICATION	1.1851180763957367E-5	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999950901264543	WITHOUT_CLASSIFICATION	4.909873545742196E-6	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999969132684892	WITHOUT_CLASSIFICATION	3.0867315108426087E-6	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999986765329655	WITHOUT_CLASSIFICATION	1.3234670344645033E-6	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999994846713149	WITHOUT_CLASSIFICATION	5.153286849629954E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999864169587208	WITHOUT_CLASSIFICATION	1.3583041279287216E-5	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999124912754	WITHOUT_CLASSIFICATION	8.750872450905468E-8	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999998094036449	WITHOUT_CLASSIFICATION	1.9059635504591687E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997729021988	WITHOUT_CLASSIFICATION	2.2709780129792325E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999931926254114	WITHOUT_CLASSIFICATION	6.807374588607069E-6	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999938344920644	WITHOUT_CLASSIFICATION	6.165507935616317E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999170170029592	WITHOUT_CLASSIFICATION	8.298299704085809E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999910531927573	WITHOUT_CLASSIFICATION	8.946807242826663E-6	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999998461654961	WITHOUT_CLASSIFICATION	1.5383450390294964E-6	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999781979303096	WITHOUT_CLASSIFICATION	2.18020696903906E-5	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999665754951266	WITHOUT_CLASSIFICATION	3.3424504873386625E-5	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998648053059448	WITHOUT_CLASSIFICATION	1.3519469405528852E-4	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9996583915278375	WITHOUT_CLASSIFICATION	3.4160847216250346E-4	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999452026070048	WITHOUT_CLASSIFICATION	5.479739299519968E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999809196463618	WITHOUT_CLASSIFICATION	1.908035363827201E-5	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9999226609073562	WITHOUT_CLASSIFICATION	7.73390926439313E-5	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999962741511927	WITHOUT_CLASSIFICATION	3.7258488073002394E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9998268306688708	WITHOUT_CLASSIFICATION	1.7316933112916102E-4	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996112769494	WITHOUT_CLASSIFICATION	3.8872305055167447E-7	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999932312400868	WITHOUT_CLASSIFICATION	6.768759913200255E-6	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999501961860142	WITHOUT_CLASSIFICATION	4.9803813985811836E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999637947088756	WITHOUT_CLASSIFICATION	3.6205291124394994E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999993654828222	WITHOUT_CLASSIFICATION	6.345171778511178E-7	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999962395665627	WITHOUT_CLASSIFICATION	3.7604334374406813E-6	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999418805695568	WITHOUT_CLASSIFICATION	5.811943044315106E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999733402237742	WITHOUT_CLASSIFICATION	2.665977622594082E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999988557811945	WITHOUT_CLASSIFICATION	1.144218805466215E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999333988073259	WITHOUT_CLASSIFICATION	6.660119267405646E-5	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999970706816259	WITHOUT_CLASSIFICATION	2.9293183740877323E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999958483556077	WITHOUT_CLASSIFICATION	4.151644392302721E-6	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999984636147325	WITHOUT_CLASSIFICATION	1.5363852674480254E-6	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999819459472369	WITHOUT_CLASSIFICATION	1.805405276316598E-5	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9998461406267861	WITHOUT_CLASSIFICATION	1.5385937321391296E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999901164233949	WITHOUT_CLASSIFICATION	9.883576605158163E-6	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999943839777235	WITHOUT_CLASSIFICATION	5.616022276493061E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999602589953924	WITHOUT_CLASSIFICATION	3.974100460747799E-5	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999418919550195	WITHOUT_CLASSIFICATION	5.8108044980596254E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997641137363877	WITHOUT_CLASSIFICATION	2.3588626361217922E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999934550358183	WITHOUT_CLASSIFICATION	6.5449641816923414E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999635850588617	WITHOUT_CLASSIFICATION	3.641494113826845E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999923791144875	WITHOUT_CLASSIFICATION	7.620885512562618E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999794183366	WITHOUT_CLASSIFICATION	2.058166337467441E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999451939033593	WITHOUT_CLASSIFICATION	5.48060966406354E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999686482020244	WITHOUT_CLASSIFICATION	3.1351797975589284E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999829433097039	WITHOUT_CLASSIFICATION	1.7056690296046985E-5	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999451939033593	WITHOUT_CLASSIFICATION	5.48060966406354E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999991811812651	WITHOUT_CLASSIFICATION	8.188187348965086E-6	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999946973177982	WITHOUT_CLASSIFICATION	5.302682201678484E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999983928354502	WITHOUT_CLASSIFICATION	1.607164549890061E-6	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999754609650398	WITHOUT_CLASSIFICATION	2.453903496031014E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999821499935407	WITHOUT_CLASSIFICATION	1.7850006459278283E-5	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999993013518276	WITHOUT_CLASSIFICATION	6.986481723772805E-7	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994987405391393	WITHOUT_CLASSIFICATION	5.012594608605656E-4	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999995878981452	WITHOUT_CLASSIFICATION	4.1210185471784284E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999091280860081	WITHOUT_CLASSIFICATION	9.087191399191836E-5	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999918110186736	WITHOUT_CLASSIFICATION	8.188981326393169E-5	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999990523759411	WITHOUT_CLASSIFICATION	9.476240589916361E-7	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999987489485754	WITHOUT_CLASSIFICATION	1.2510514245053066E-6	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999972022038414	WITHOUT_CLASSIFICATION	2.7977961585617954E-6	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999990555004635	WITHOUT_CLASSIFICATION	9.444995365684765E-7	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999815845075276	WITHOUT_CLASSIFICATION	1.841549247232349E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999974177383713	WITHOUT_CLASSIFICATION	2.582261628804284E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999438710623982	WITHOUT_CLASSIFICATION	5.612893760170451E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999438710623982	WITHOUT_CLASSIFICATION	5.612893760170451E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999713736569084	WITHOUT_CLASSIFICATION	2.862634309167524E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999381639367834	WITHOUT_CLASSIFICATION	6.183606321656459E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998650337151793	WITHOUT_CLASSIFICATION	1.3496628482064996E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998562169930121	WITHOUT_CLASSIFICATION	1.4378300698794484E-4	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999999403612705	WITHOUT_CLASSIFICATION	5.963872950291502E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9985383516401132	WITHOUT_CLASSIFICATION	0.0014616483598867685	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999699045795638	WITHOUT_CLASSIFICATION	3.0095420436201322E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998337922482	WITHOUT_CLASSIFICATION	1.6620775181686245E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999888004251543	WITHOUT_CLASSIFICATION	1.1199574845854615E-5	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999203270326286	WITHOUT_CLASSIFICATION	7.967296737141774E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999137381227	WITHOUT_CLASSIFICATION	8.626187740596606E-8	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999302345823	WITHOUT_CLASSIFICATION	6.976541763958144E-8	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999844068118072	WITHOUT_CLASSIFICATION	1.5593188192779842E-5	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999870434742468	WITHOUT_CLASSIFICATION	1.2956525753251876E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999820637813164	WITHOUT_CLASSIFICATION	1.7936218683652494E-5	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999492027642412	WITHOUT_CLASSIFICATION	5.079723575880356E-5	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999953018911202	WITHOUT_CLASSIFICATION	4.698108879826054E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999929001470657	WITHOUT_CLASSIFICATION	7.09985293436858E-6	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998586247459123	WITHOUT_CLASSIFICATION	1.413752540878161E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999274252340747	WITHOUT_CLASSIFICATION	7.25747659252415E-5	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9994621215470382	WITHOUT_CLASSIFICATION	5.378784529618095E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999228554136069	WITHOUT_CLASSIFICATION	7.714458639312346E-5	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999995912275369	WITHOUT_CLASSIFICATION	4.0877246320698543E-7	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999988073031558	WITHOUT_CLASSIFICATION	1.1926968441323758E-6	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996116275067	WITHOUT_CLASSIFICATION	3.883724932357385E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999995738072655	WITHOUT_CLASSIFICATION	4.261927345743668E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999990129847843	WITHOUT_CLASSIFICATION	9.870152157285928E-7	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999988055174452	WITHOUT_CLASSIFICATION	1.1944825547979728E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999994628609779	WITHOUT_CLASSIFICATION	5.371390221292483E-7	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999408453483913	WITHOUT_CLASSIFICATION	5.915465160862864E-5	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999965563972392	WITHOUT_CLASSIFICATION	3.443602760745962E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999633413205867	WITHOUT_CLASSIFICATION	3.665867941322248E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.999776622787201	WITHOUT_CLASSIFICATION	2.2337721279906832E-4	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999423628099922	WITHOUT_CLASSIFICATION	5.763719000788036E-5	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998592629370272	WITHOUT_CLASSIFICATION	1.4073706297284156E-4	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999782354920963	WITHOUT_CLASSIFICATION	2.1764507903688407E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999916521620151	WITHOUT_CLASSIFICATION	8.347837984898674E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998394491374234	WITHOUT_CLASSIFICATION	1.6055086257660666E-4	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999996116068756	WITHOUT_CLASSIFICATION	3.883931243940779E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998638384587781	WITHOUT_CLASSIFICATION	1.3616154122191376E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.999159654805845	WITHOUT_CLASSIFICATION	8.403451941550995E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999983774151859	WITHOUT_CLASSIFICATION	1.622584814075939E-6	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999936223661533	WITHOUT_CLASSIFICATION	6.3776338467305124E-6	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999931682813221	WITHOUT_CLASSIFICATION	6.831718677853099E-6	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9992303268282973	WITHOUT_CLASSIFICATION	7.696731717027275E-4	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999976877479136	WITHOUT_CLASSIFICATION	2.31225208638228E-6	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877633136188	WITHOUT_CLASSIFICATION	1.2236686381044186E-5	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947158561723	WITHOUT_CLASSIFICATION	5.284143827634637E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986725563308	WITHOUT_CLASSIFICATION	1.3274436691928744E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999999795479004	WITHOUT_CLASSIFICATION	2.045209962309022E-8	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999967101696665	WITHOUT_CLASSIFICATION	3.289830333564318E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802879084975	WITHOUT_CLASSIFICATION	1.9712091502447072E-5	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999784813183	WITHOUT_CLASSIFICATION	2.151868179579005E-8	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999760666462992	WITHOUT_CLASSIFICATION	2.3933353700709935E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745170357239	WITHOUT_CLASSIFICATION	2.5482964276082933E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9999760666462992	WITHOUT_CLASSIFICATION	2.3933353700709935E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999471923408576	WITHOUT_CLASSIFICATION	5.2807659142341414E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999887495959499	WITHOUT_CLASSIFICATION	1.1250404050083179E-5	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999959307807943	WITHOUT_CLASSIFICATION	4.069219205717989E-6	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999965692120202	WITHOUT_CLASSIFICATION	3.430787979838476E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999108351175375	WITHOUT_CLASSIFICATION	8.916488246249825E-5	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9994390293822654	WITHOUT_CLASSIFICATION	5.60970617734701E-4	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999903556610245	WITHOUT_CLASSIFICATION	9.644338975560677E-6	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999849705974111	WITHOUT_CLASSIFICATION	1.5029402588957534E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999968277272624	WITHOUT_CLASSIFICATION	3.1722727376442196E-6	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999990559925922	WITHOUT_CLASSIFICATION	9.440074079130746E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999989911242676	WITHOUT_CLASSIFICATION	1.008875732341615E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999983906869095	WITHOUT_CLASSIFICATION	1.609313090513559E-6	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999679219967327	WITHOUT_CLASSIFICATION	3.207800326737847E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.999899188424496	WITHOUT_CLASSIFICATION	1.0081157550401002E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999983496821223	WITHOUT_CLASSIFICATION	1.6503178776645247E-6	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999996048586217	WITHOUT_CLASSIFICATION	3.9514137830477055E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999891626204706	WITHOUT_CLASSIFICATION	1.0837379529404178E-4	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999891626204706	WITHOUT_CLASSIFICATION	1.0837379529404178E-4	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999711736692235	WITHOUT_CLASSIFICATION	2.882633077651854E-5	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999674764454	WITHOUT_CLASSIFICATION	3.252355463404921E-8	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.99999829459168	WITHOUT_CLASSIFICATION	1.705408319946836E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.999999971945843	WITHOUT_CLASSIFICATION	2.8054156939077527E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999996253883551	WITHOUT_CLASSIFICATION	3.7461164502055334E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999995418789661	WITHOUT_CLASSIFICATION	4.5812103392651907E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999984762001715	WITHOUT_CLASSIFICATION	1.5237998284908498E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999932906203136	WITHOUT_CLASSIFICATION	6.709379686374232E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999960418264985	WITHOUT_CLASSIFICATION	3.958173501485258E-6	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999996230867005	WITHOUT_CLASSIFICATION	3.7691329940700797E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995811744734	WITHOUT_CLASSIFICATION	4.1882552662327026E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999545533707	WITHOUT_CLASSIFICATION	4.544662922572919E-8	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999997402538523	WITHOUT_CLASSIFICATION	2.5974614771489007E-7	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999980290548653	WITHOUT_CLASSIFICATION	1.9709451346267668E-6	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999986603470896	WITHOUT_CLASSIFICATION	1.3396529104115362E-6	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999936031217315	WITHOUT_CLASSIFICATION	6.396878268539378E-6	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999994400703096	WITHOUT_CLASSIFICATION	5.599296904610634E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999949529504538	WITHOUT_CLASSIFICATION	5.047049546139588E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999664518924447	WITHOUT_CLASSIFICATION	3.3548107555203884E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999993786748743	WITHOUT_CLASSIFICATION	6.213251256942493E-7	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999965825651003	WITHOUT_CLASSIFICATION	3.4174348996716846E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999983167071685	WITHOUT_CLASSIFICATION	1.6832928314841013E-6	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999996449415726	WITHOUT_CLASSIFICATION	3.5505842737291125E-7	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999988383157773	WITHOUT_CLASSIFICATION	1.1616842226476731E-6	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999899711439294	WITHOUT_CLASSIFICATION	1.0028856070483032E-5	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999729220158025	WITHOUT_CLASSIFICATION	2.7077984197666167E-5	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999996628822131	WITHOUT_CLASSIFICATION	3.371177868980896E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997906277921047	WITHOUT_CLASSIFICATION	2.09372207895384E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999410483360684	WITHOUT_CLASSIFICATION	5.895166393153196E-5	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9983341089225158	WITHOUT_CLASSIFICATION	0.0016658910774841793	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999727472117478	WITHOUT_CLASSIFICATION	2.7252788252248748E-5	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999822368745362	WITHOUT_CLASSIFICATION	1.776312546372431E-5	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998414499886327	WITHOUT_CLASSIFICATION	1.5855001136724528E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9992125052675931	WITHOUT_CLASSIFICATION	7.874947324068981E-4	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999466721102113	WITHOUT_CLASSIFICATION	5.3327889788667415E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999835571471168	WITHOUT_CLASSIFICATION	1.6442852883168684E-5	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999244136540355	WITHOUT_CLASSIFICATION	7.558634596458469E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999472442382519	WITHOUT_CLASSIFICATION	5.275576174807233E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999991012103847	WITHOUT_CLASSIFICATION	8.987896152133586E-7	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999975922807544	WITHOUT_CLASSIFICATION	2.407719245671634E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9997726598575037	WITHOUT_CLASSIFICATION	2.2734014249617879E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917281453783	WITHOUT_CLASSIFICATION	8.271854621616191E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999816186757495	WITHOUT_CLASSIFICATION	1.838132425048621E-5	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999998651541507	WITHOUT_CLASSIFICATION	1.3484584930117773E-6	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999986787412317	WITHOUT_CLASSIFICATION	1.3212587683304687E-6	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999996910836126	WITHOUT_CLASSIFICATION	3.0891638736778606E-7	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999956180250484	WITHOUT_CLASSIFICATION	4.38197495151506E-6	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999992358706674	WITHOUT_CLASSIFICATION	7.641293325102083E-7	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999988927680454	WITHOUT_CLASSIFICATION	1.1072319546090438E-6	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999994870439441	WITHOUT_CLASSIFICATION	5.129560558889338E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918020447027	WITHOUT_CLASSIFICATION	8.197955297193833E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999974862247558	WITHOUT_CLASSIFICATION	2.513775244126548E-6	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999710456549535	WITHOUT_CLASSIFICATION	2.8954345046452342E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999947534174751	WITHOUT_CLASSIFICATION	5.246582524938402E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999388351493392	WITHOUT_CLASSIFICATION	6.11648506607797E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999893035101708	WITHOUT_CLASSIFICATION	1.069648982925128E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999893035101708	WITHOUT_CLASSIFICATION	1.069648982925128E-5	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999990603467627	WITHOUT_CLASSIFICATION	9.396532374434271E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997329734729744	WITHOUT_CLASSIFICATION	2.6702652702562254E-4	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999979564581207	WITHOUT_CLASSIFICATION	2.0435418792350978E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999996253692582	WITHOUT_CLASSIFICATION	3.74630741797479E-6	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999983193319103	WITHOUT_CLASSIFICATION	1.680668089677789E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999989085662924	WITHOUT_CLASSIFICATION	1.091433707715843E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999995948288056	WITHOUT_CLASSIFICATION	4.0517119438339883E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9998067467607186	WITHOUT_CLASSIFICATION	1.9325323928140578E-4	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999991722259481	WITHOUT_CLASSIFICATION	8.277740519910132E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9998398583696173	WITHOUT_CLASSIFICATION	1.6014163038271086E-4	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999016392611015	WITHOUT_CLASSIFICATION	9.83607388984779E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998931658528972	WITHOUT_CLASSIFICATION	1.068341471027753E-4	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999684538210889	WITHOUT_CLASSIFICATION	3.1546178911112096E-4	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999986545408256	WITHOUT_CLASSIFICATION	1.3454591744412919E-6	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999975018769959	WITHOUT_CLASSIFICATION	2.498123004117498E-6	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999944757462342	WITHOUT_CLASSIFICATION	5.524253765801359E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997089062567	WITHOUT_CLASSIFICATION	2.910937433487205E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.999935693796147	WITHOUT_CLASSIFICATION	6.43062038530874E-5	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999882259234396	WITHOUT_CLASSIFICATION	1.1774076560484983E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999716323697609	WITHOUT_CLASSIFICATION	2.836763023904476E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999997423561152	WITHOUT_CLASSIFICATION	2.576438847884271E-7	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999724443167339	WITHOUT_CLASSIFICATION	2.7555683266023943E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996218298281653	WITHOUT_CLASSIFICATION	3.7817017183471865E-4	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999945555047677	WITHOUT_CLASSIFICATION	5.4444952322864875E-6	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999948316764228	WITHOUT_CLASSIFICATION	5.168323577156848E-6	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9999920981985844	WITHOUT_CLASSIFICATION	7.901801415515318E-6	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998781354272613	WITHOUT_CLASSIFICATION	1.2186457273859292E-4	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9980365643473939	WITHOUT_CLASSIFICATION	0.0019634356526061747	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999931882384397	WITHOUT_CLASSIFICATION	6.811761560299658E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996218298281653	WITHOUT_CLASSIFICATION	3.7817017183471865E-4	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999786782583195	WITHOUT_CLASSIFICATION	2.1321741680407016E-5	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999955820462407	WITHOUT_CLASSIFICATION	4.417953759250345E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9990689486637173	WITHOUT_CLASSIFICATION	9.310513362827008E-4	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999856881412892	WITHOUT_CLASSIFICATION	1.4311858710820853E-5	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999998211166959	WITHOUT_CLASSIFICATION	1.788833040249916E-7	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999979958246508	WITHOUT_CLASSIFICATION	2.0041753492496207E-6	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999994288331345	WITHOUT_CLASSIFICATION	5.711668654513154E-7	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999995077890118	WITHOUT_CLASSIFICATION	4.922109880848551E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999942019379998	WITHOUT_CLASSIFICATION	5.798062000143505E-6	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999856881412892	WITHOUT_CLASSIFICATION	1.4311858710820853E-5	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999998514281458	WITHOUT_CLASSIFICATION	1.4857185419928698E-6	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999994921792026	WITHOUT_CLASSIFICATION	5.078207974675126E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999976008370242	WITHOUT_CLASSIFICATION	2.3991629757911397E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996198450454984	WITHOUT_CLASSIFICATION	3.801549545016247E-4	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999799236744891	WITHOUT_CLASSIFICATION	2.0076325510951566E-5	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999995811744734	WITHOUT_CLASSIFICATION	4.1882552662327026E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999971735312712	WITHOUT_CLASSIFICATION	2.8264687287365265E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999991154502395	WITHOUT_CLASSIFICATION	8.845497606525576E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999987301367039	WITHOUT_CLASSIFICATION	1.2698632960538029E-6	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999988102326841	WITHOUT_CLASSIFICATION	1.1897673159095033E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999013231193185	WITHOUT_CLASSIFICATION	9.867688068162537E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999841695188857	WITHOUT_CLASSIFICATION	1.5830481114314437E-5	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999670339794282	WITHOUT_CLASSIFICATION	3.296602057186702E-5	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999994611423259	WITHOUT_CLASSIFICATION	5.388576740713298E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9998434161289874	WITHOUT_CLASSIFICATION	1.565838710126358E-4	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.999989568941317	WITHOUT_CLASSIFICATION	1.0431058683020593E-5	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994565769977589	WITHOUT_CLASSIFICATION	5.434230022411297E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998396188648	WITHOUT_CLASSIFICATION	1.6038113510597658E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999999052415782	WITHOUT_CLASSIFICATION	9.475842174380291E-8	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999681428364879	WITHOUT_CLASSIFICATION	3.1857163512110085E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999962385998472	WITHOUT_CLASSIFICATION	3.7614001528875917E-6	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999974601375619	WITHOUT_CLASSIFICATION	2.5398624380965956E-6	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999992800319315	WITHOUT_CLASSIFICATION	7.19968068393639E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999949329975684	WITHOUT_CLASSIFICATION	5.067002431578142E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999994106310819	WITHOUT_CLASSIFICATION	5.893689181054683E-6	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999810213110434	WITHOUT_CLASSIFICATION	1.897868895664737E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999559568808807	WITHOUT_CLASSIFICATION	4.404311911933374E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999988370040075	WITHOUT_CLASSIFICATION	1.1629959924858945E-6	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999989508911082	WITHOUT_CLASSIFICATION	1.0491088917947316E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999990702634153	WITHOUT_CLASSIFICATION	9.297365846925291E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999926967996235	WITHOUT_CLASSIFICATION	7.303200376448403E-6	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999024663556892	WITHOUT_CLASSIFICATION	9.753364431076112E-5	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999128804053132	WITHOUT_CLASSIFICATION	8.71195946868256E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985628281658	WITHOUT_CLASSIFICATION	1.4371718342716628E-6	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983115909262	WITHOUT_CLASSIFICATION	1.6884090738576664E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999896028247738	WITHOUT_CLASSIFICATION	1.0397175226232613E-5	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999408105093243	WITHOUT_CLASSIFICATION	5.918949067582858E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999999587465244	WITHOUT_CLASSIFICATION	4.1253475598926666E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999967126345877	WITHOUT_CLASSIFICATION	3.2873654123517287E-6	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999905512932613	WITHOUT_CLASSIFICATION	9.448706738758965E-6	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999771667766479	WITHOUT_CLASSIFICATION	2.2833223352008404E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999957907652604	WITHOUT_CLASSIFICATION	4.20923473965853E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999964264157355	WITHOUT_CLASSIFICATION	3.5735842643648786E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998175820767768	WITHOUT_CLASSIFICATION	1.8241792322316706E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999950235566843	WITHOUT_CLASSIFICATION	4.976443315657102E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999249865619059	WITHOUT_CLASSIFICATION	7.501343809413921E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999963948020131	WITHOUT_CLASSIFICATION	3.6051979869948045E-6	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998106383826	WITHOUT_CLASSIFICATION	1.8936161746471807E-7	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.99999544437624	WITHOUT_CLASSIFICATION	4.555623759954521E-6	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999887185816752	WITHOUT_CLASSIFICATION	1.1281418324798349E-5	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999993096676314	WITHOUT_CLASSIFICATION	6.903323686007918E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999503502766625	WITHOUT_CLASSIFICATION	4.964972333758508E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999985237155234	WITHOUT_CLASSIFICATION	1.4762844766374672E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999969954922104	WITHOUT_CLASSIFICATION	3.0045077895146623E-6	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999998465833846	WITHOUT_CLASSIFICATION	1.534166154767239E-7	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999988359829804	WITHOUT_CLASSIFICATION	1.1640170195289894E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999850200658905	WITHOUT_CLASSIFICATION	1.4979934109454516E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999999661119273	WITHOUT_CLASSIFICATION	3.388807270477294E-7	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999991727319252	WITHOUT_CLASSIFICATION	8.272680748350385E-7	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999997910794851	WITHOUT_CLASSIFICATION	2.0892051484689512E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999992713370529	WITHOUT_CLASSIFICATION	7.286629470425135E-7	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999962401883307	WITHOUT_CLASSIFICATION	3.7598116693315146E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985628281658	WITHOUT_CLASSIFICATION	1.4371718342716628E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999971568256655	WITHOUT_CLASSIFICATION	2.843174334482819E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999951623144882	WITHOUT_CLASSIFICATION	4.8376855117918885E-6	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999752075346965	WITHOUT_CLASSIFICATION	2.4792465303490337E-5	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999941586784351	WITHOUT_CLASSIFICATION	5.84132156489499E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999248049185059	WITHOUT_CLASSIFICATION	7.519508149405246E-5	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999972511412827	WITHOUT_CLASSIFICATION	2.7488587173044106E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983884259307	WITHOUT_CLASSIFICATION	1.6115740693121005E-6	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998231211654	WITHOUT_CLASSIFICATION	1.7687883468488994E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999988597122931	WITHOUT_CLASSIFICATION	1.1402877068294176E-6	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999997502883736	WITHOUT_CLASSIFICATION	2.4971162636050495E-7	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999978049540769	WITHOUT_CLASSIFICATION	2.195045923180501E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996589285136719	WITHOUT_CLASSIFICATION	3.4107148632803907E-4	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999983026463771	WITHOUT_CLASSIFICATION	1.6973536228607436E-6	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999996368186648	WITHOUT_CLASSIFICATION	3.631813351948336E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999471923408576	WITHOUT_CLASSIFICATION	5.2807659142341414E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999985249028102	WITHOUT_CLASSIFICATION	1.4750971898603302E-6	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999972154157372	WITHOUT_CLASSIFICATION	2.784584262762225E-6	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999949039526194	WITHOUT_CLASSIFICATION	5.0960473806515084E-6	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999880244594652	WITHOUT_CLASSIFICATION	1.197554053474465E-5	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998277640475	WITHOUT_CLASSIFICATION	1.7223595248592397E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999849322918228	WITHOUT_CLASSIFICATION	1.5067708177229574E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999849322918228	WITHOUT_CLASSIFICATION	1.5067708177229574E-5	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999942390396415	WITHOUT_CLASSIFICATION	5.760960358638934E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999980023314391	WITHOUT_CLASSIFICATION	1.997668560903797E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999952688367881	WITHOUT_CLASSIFICATION	4.7311632118625194E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999989005030622	WITHOUT_CLASSIFICATION	1.099496937912085E-6	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999455074786453	WITHOUT_CLASSIFICATION	5.449252135468123E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999561320702719	WITHOUT_CLASSIFICATION	4.3867929728071886E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999845891076011	WITHOUT_CLASSIFICATION	1.5410892398892145E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998992055135	WITHOUT_CLASSIFICATION	1.0079448661654445E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999998992055135	WITHOUT_CLASSIFICATION	1.0079448661654445E-7	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999854452761467	WITHOUT_CLASSIFICATION	1.455472385320093E-5	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999728920206743	WITHOUT_CLASSIFICATION	2.7107979325776926E-5	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999902606577339	WITHOUT_CLASSIFICATION	9.73934226609491E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999976613680134	WITHOUT_CLASSIFICATION	2.338631986602859E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999976613680134	WITHOUT_CLASSIFICATION	2.338631986602859E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999976613680134	WITHOUT_CLASSIFICATION	2.338631986602859E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998601079635601	WITHOUT_CLASSIFICATION	1.3989203643998E-4	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999106075238	WITHOUT_CLASSIFICATION	8.939247625083453E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999998117849573	WITHOUT_CLASSIFICATION	1.8821504270719942E-6	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999960007910085	WITHOUT_CLASSIFICATION	3.99920899153522E-6	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999768451451131	WITHOUT_CLASSIFICATION	2.315485488694053E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999998909482921	WITHOUT_CLASSIFICATION	1.0905170790799536E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999995847176764	WITHOUT_CLASSIFICATION	4.1528232365249056E-7	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999952905143037	WITHOUT_CLASSIFICATION	4.709485696359145E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999994727935021	WITHOUT_CLASSIFICATION	5.272064978794927E-7	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999730798504021	WITHOUT_CLASSIFICATION	2.692014959794061E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999918889519005	WITHOUT_CLASSIFICATION	8.111048099448905E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999797665724334	WITHOUT_CLASSIFICATION	2.0233427566628862E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999963282928248	WITHOUT_CLASSIFICATION	3.671707175184939E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999918170256978	WITHOUT_CLASSIFICATION	8.182974302141311E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999797566653219	WITHOUT_CLASSIFICATION	2.0243334678149437E-5	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999693071230893	WITHOUT_CLASSIFICATION	3.069287691077949E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998810654436073	WITHOUT_CLASSIFICATION	1.1893455639259805E-4	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998810654436073	WITHOUT_CLASSIFICATION	1.1893455639259805E-4	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999150484238204	WITHOUT_CLASSIFICATION	8.495157617961774E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999150484238204	WITHOUT_CLASSIFICATION	8.495157617961774E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999149579718951	WITHOUT_CLASSIFICATION	8.504202810492456E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999903107853446	WITHOUT_CLASSIFICATION	9.689214655391586E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999903107853446	WITHOUT_CLASSIFICATION	9.689214655391586E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999454032817263	WITHOUT_CLASSIFICATION	5.459671827373721E-5	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999119553222211	WITHOUT_CLASSIFICATION	8.804467777893222E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999435730854805	WITHOUT_CLASSIFICATION	5.6426914519480555E-5	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999849322918228	WITHOUT_CLASSIFICATION	1.5067708177229574E-5	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9998296612028866	WITHOUT_CLASSIFICATION	1.7033879711334654E-4	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999119553222211	WITHOUT_CLASSIFICATION	8.804467777893222E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998727858376387	WITHOUT_CLASSIFICATION	1.2721416236132532E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999778276430686	WITHOUT_CLASSIFICATION	2.2172356931445328E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998981656812006	WITHOUT_CLASSIFICATION	1.0183431879938115E-4	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999539913817481	WITHOUT_CLASSIFICATION	4.6008618251831936E-5	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999977941922294	WITHOUT_CLASSIFICATION	2.205807770567762E-6	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999943255720232	WITHOUT_CLASSIFICATION	5.674427976918043E-6	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999918114923904	WITHOUT_CLASSIFICATION	8.188507609554472E-6	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9987941494688463	WITHOUT_CLASSIFICATION	0.0012058505311537474	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999569486251516	WITHOUT_CLASSIFICATION	4.3051374848434856E-5	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999986256653725	WITHOUT_CLASSIFICATION	1.374334627596205E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999946245202712	WITHOUT_CLASSIFICATION	5.3754797287523395E-6	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9998910297369098	WITHOUT_CLASSIFICATION	1.0897026309023446E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999747585762958	WITHOUT_CLASSIFICATION	2.524142370416167E-5	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999996558152912	WITHOUT_CLASSIFICATION	3.441847088121484E-7	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999948190565098	WITHOUT_CLASSIFICATION	5.18094349019269E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999983574766965	WITHOUT_CLASSIFICATION	1.6425233034716668E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999971954236644	WITHOUT_CLASSIFICATION	2.8045763355992783E-5	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999971954236644	WITHOUT_CLASSIFICATION	2.8045763355992783E-5	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999987854808366	WITHOUT_CLASSIFICATION	1.214519163305469E-6	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999999638355583	WITHOUT_CLASSIFICATION	3.6164441693835367E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999984627272863	WITHOUT_CLASSIFICATION	1.5372727136058582E-6	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999776353113857	WITHOUT_CLASSIFICATION	2.236468861433112E-5	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999930898379871	WITHOUT_CLASSIFICATION	6.910162012973187E-6	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999441307981	WITHOUT_CLASSIFICATION	5.586920189894434E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999993773400837	WITHOUT_CLASSIFICATION	6.226599162525374E-7	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999909180736287	WITHOUT_CLASSIFICATION	9.081926371261822E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999983270252516	WITHOUT_CLASSIFICATION	1.6729747483917345E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999993963529599	WITHOUT_CLASSIFICATION	6.036470402005849E-7	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999978319960228	WITHOUT_CLASSIFICATION	2.1680039773070297E-6	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996589285136719	WITHOUT_CLASSIFICATION	3.4107148632803907E-4	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997204549257	WITHOUT_CLASSIFICATION	2.795450742912354E-7	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999981981263599	WITHOUT_CLASSIFICATION	1.801873639972421E-6	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999793105264316	WITHOUT_CLASSIFICATION	2.0689473568393397E-5	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999948726340012	WITHOUT_CLASSIFICATION	5.127365998854836E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991439895202	WITHOUT_CLASSIFICATION	8.560104799393531E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991439895202	WITHOUT_CLASSIFICATION	8.560104799393531E-7	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999932245884041	WITHOUT_CLASSIFICATION	6.775411595832912E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999528150900763	WITHOUT_CLASSIFICATION	4.718490992378281E-5	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999991382066962	WITHOUT_CLASSIFICATION	8.617933037989605E-6	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999556339354925	WITHOUT_CLASSIFICATION	4.4366064507504774E-5	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999728975493131	WITHOUT_CLASSIFICATION	2.7102450686971178E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998484594612314	WITHOUT_CLASSIFICATION	1.5154053876864334E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999997803657378	WITHOUT_CLASSIFICATION	2.1963426232097336E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786362659405	WITHOUT_CLASSIFICATION	2.1363734059500148E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999977754558812	WITHOUT_CLASSIFICATION	2.224544118892607E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999935071623479	WITHOUT_CLASSIFICATION	6.49283765209111E-6	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999977452829064	WITHOUT_CLASSIFICATION	2.254717093528383E-6	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786362659405	WITHOUT_CLASSIFICATION	2.1363734059500148E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999963595374843	WITHOUT_CLASSIFICATION	3.640462515619272E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.999996227304325	WITHOUT_CLASSIFICATION	3.7726956750105756E-6	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999993679806474	WITHOUT_CLASSIFICATION	6.320193526727083E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999929341542648	WITHOUT_CLASSIFICATION	7.065845735155047E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999977577240444	WITHOUT_CLASSIFICATION	2.2422759555707615E-6	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998044760204	WITHOUT_CLASSIFICATION	1.955239795571021E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991209838819	WITHOUT_CLASSIFICATION	8.790161180079165E-7	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999771842844354	WITHOUT_CLASSIFICATION	2.281571556458894E-5	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998152526588	WITHOUT_CLASSIFICATION	1.847473411897988E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999881042201865	WITHOUT_CLASSIFICATION	1.1895779813404731E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999992808923756	WITHOUT_CLASSIFICATION	7.191076244524921E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999998507023368	WITHOUT_CLASSIFICATION	1.4929766319919505E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999986794298679	WITHOUT_CLASSIFICATION	1.3205701322100955E-6	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999994233003174	WITHOUT_CLASSIFICATION	5.766996825276998E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999699134765254	WITHOUT_CLASSIFICATION	3.0086523474528874E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999995387740295	WITHOUT_CLASSIFICATION	4.6122597055583154E-7	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999993604205781	WITHOUT_CLASSIFICATION	6.39579421948619E-7	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999779750478286	WITHOUT_CLASSIFICATION	2.2024952171357935E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999775882005787	WITHOUT_CLASSIFICATION	2.241179942132949E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999988716429874	WITHOUT_CLASSIFICATION	1.128357012564802E-6	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999924113767165	WITHOUT_CLASSIFICATION	7.588623283570974E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999993096596934	WITHOUT_CLASSIFICATION	6.903403064778545E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.999955648012458	WITHOUT_CLASSIFICATION	4.435198754196888E-5	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999355467721688	WITHOUT_CLASSIFICATION	6.445322783125931E-5	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999996480207043	WITHOUT_CLASSIFICATION	3.5197929580238265E-7	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999815604272072	WITHOUT_CLASSIFICATION	1.8439572792817742E-5	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999963060004092	WITHOUT_CLASSIFICATION	3.6939995908013983E-6	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999985745867309	WITHOUT_CLASSIFICATION	1.425413269124985E-6	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999996907018363	WITHOUT_CLASSIFICATION	3.09298163735829E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999825453967929	WITHOUT_CLASSIFICATION	1.7454603207076766E-5	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999992132452792	WITHOUT_CLASSIFICATION	7.867547208948116E-7	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9997302212012754	WITHOUT_CLASSIFICATION	2.6977879872459805E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999988570027342	WITHOUT_CLASSIFICATION	1.142997265881351E-6	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999998470641515	WITHOUT_CLASSIFICATION	1.5293584854455046E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999429449524	WITHOUT_CLASSIFICATION	5.7055047655171675E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999993939214525	WITHOUT_CLASSIFICATION	6.060785474230577E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999960955994079	WITHOUT_CLASSIFICATION	3.904400592049085E-6	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999837694260637	WITHOUT_CLASSIFICATION	1.6230573936359757E-5	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999963643001667	WITHOUT_CLASSIFICATION	3.635699833343817E-6	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999969885084378	WITHOUT_CLASSIFICATION	3.0114915621432176E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999907746612284	WITHOUT_CLASSIFICATION	9.225338771646654E-6	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999837790525345	WITHOUT_CLASSIFICATION	1.6220947465433496E-5	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999997801925933	WITHOUT_CLASSIFICATION	2.1980740670083367E-6	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999989819021164	WITHOUT_CLASSIFICATION	1.0180978835435848E-6	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999416102801035	WITHOUT_CLASSIFICATION	5.8389719896483374E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999834629681692	WITHOUT_CLASSIFICATION	1.653703183074706E-5	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999790203963728	WITHOUT_CLASSIFICATION	2.097960362714186E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999987468914892	WITHOUT_CLASSIFICATION	1.2531085107911383E-5	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.99998426144095	WITHOUT_CLASSIFICATION	1.573855905008062E-5	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999872820225518	WITHOUT_CLASSIFICATION	1.271797744822008E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990407004382	WITHOUT_CLASSIFICATION	9.592995618445756E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999379905111	WITHOUT_CLASSIFICATION	6.200948889831535E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999994448067772	WITHOUT_CLASSIFICATION	5.551932228184551E-7	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999867973208041	WITHOUT_CLASSIFICATION	1.3202679195846222E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998838667236	WITHOUT_CLASSIFICATION	1.1613327638738125E-7	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999957275969128	WITHOUT_CLASSIFICATION	4.272403087266783E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998255574767	WITHOUT_CLASSIFICATION	1.744425234164089E-7	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999997044482229	WITHOUT_CLASSIFICATION	2.9555177709104535E-6	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999802350003574	WITHOUT_CLASSIFICATION	1.976499964272616E-5	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999944285592329	WITHOUT_CLASSIFICATION	5.571440767094049E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999989771652216	WITHOUT_CLASSIFICATION	1.0228347784379392E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999969370198777	WITHOUT_CLASSIFICATION	3.0629801222973143E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999975469160256	WITHOUT_CLASSIFICATION	2.4530839743351074E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999777633249022	WITHOUT_CLASSIFICATION	2.2236675097809664E-5	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998759401605157	WITHOUT_CLASSIFICATION	1.240598394843233E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9995772397773476	WITHOUT_CLASSIFICATION	4.2276022265246455E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990407004382	WITHOUT_CLASSIFICATION	9.592995618445756E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999842871661626	WITHOUT_CLASSIFICATION	1.5712833837423877E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999994395814652	WITHOUT_CLASSIFICATION	5.6041853480149834E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998070550564734	WITHOUT_CLASSIFICATION	1.9294494352652773E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999974845747047	WITHOUT_CLASSIFICATION	2.5154252953118954E-6	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999968165578395	WITHOUT_CLASSIFICATION	3.183442160476908E-6	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999803983335693	WITHOUT_CLASSIFICATION	1.9601666430676625E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999977754558812	WITHOUT_CLASSIFICATION	2.224544118892607E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999882199144828	WITHOUT_CLASSIFICATION	1.1780085517108762E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999429449524	WITHOUT_CLASSIFICATION	5.7055047655171675E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999928027994162	WITHOUT_CLASSIFICATION	7.197200583785151E-6	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999982852175158	WITHOUT_CLASSIFICATION	1.714782484247417E-6	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999942575491374	WITHOUT_CLASSIFICATION	5.742450862535462E-6	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999939241947992	WITHOUT_CLASSIFICATION	6.0758052008908565E-6	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999985410680888	WITHOUT_CLASSIFICATION	1.4589319111603342E-6	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9999023065553065	WITHOUT_CLASSIFICATION	9.769344469341947E-5	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999994377448435	WITHOUT_CLASSIFICATION	5.622551565102001E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999994299383567	WITHOUT_CLASSIFICATION	5.700616432839709E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999499627583297	WITHOUT_CLASSIFICATION	5.003724167036251E-5	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991789706509	WITHOUT_CLASSIFICATION	8.210293490090732E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999975876053285	WITHOUT_CLASSIFICATION	2.4123946715029104E-6	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999963391868981	WITHOUT_CLASSIFICATION	3.6608131018729714E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986635443249	WITHOUT_CLASSIFICATION	1.3364556750936165E-6	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999986635443249	WITHOUT_CLASSIFICATION	1.3364556750936165E-6	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999990667506917	WITHOUT_CLASSIFICATION	9.332493082983056E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999863975217833	WITHOUT_CLASSIFICATION	1.3602478216800123E-5	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998181549156	WITHOUT_CLASSIFICATION	1.8184508438997708E-7	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999883405877872	WITHOUT_CLASSIFICATION	1.165941221283439E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998904416991	WITHOUT_CLASSIFICATION	1.0955830093864624E-7	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999942036461286	WITHOUT_CLASSIFICATION	5.796353871436933E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999992521087316	WITHOUT_CLASSIFICATION	7.478912684247762E-7	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999511208707107	WITHOUT_CLASSIFICATION	4.887912928923428E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999993423490341	WITHOUT_CLASSIFICATION	6.576509657712447E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999998643462094	WITHOUT_CLASSIFICATION	1.3565379061563555E-7	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999927965839426	WITHOUT_CLASSIFICATION	7.2034160574123005E-6	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999929573522056	WITHOUT_CLASSIFICATION	7.042647794294672E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999984132346807	WITHOUT_CLASSIFICATION	1.5867653192947851E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999653893743	WITHOUT_CLASSIFICATION	3.461062569791389E-7	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999972574996324	WITHOUT_CLASSIFICATION	2.742500367546395E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999991321514942	WITHOUT_CLASSIFICATION	8.678485058277167E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999972936201512	WITHOUT_CLASSIFICATION	2.706379848827245E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999995513116589	WITHOUT_CLASSIFICATION	4.486883411357068E-7	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999946122964744	WITHOUT_CLASSIFICATION	5.387703525631516E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999820501120928	WITHOUT_CLASSIFICATION	1.7949887907211257E-5	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9996685444906078	WITHOUT_CLASSIFICATION	3.3145550939225925E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999984926051344	WITHOUT_CLASSIFICATION	1.5073948655408302E-6	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999983392472255	WITHOUT_CLASSIFICATION	1.660752774535712E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.99981455875236	WITHOUT_CLASSIFICATION	1.854412476400649E-4	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999938700756644	WITHOUT_CLASSIFICATION	6.129924335569098E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943795632629	WITHOUT_CLASSIFICATION	5.620436737054227E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999991487982087	WITHOUT_CLASSIFICATION	8.512017912868393E-7	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999998758414127	WITHOUT_CLASSIFICATION	1.241585873037793E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999675516815641	WITHOUT_CLASSIFICATION	3.244831843576584E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999998377362498	WITHOUT_CLASSIFICATION	1.6226375019593702E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9974349210564086	WITHOUT_CLASSIFICATION	0.002565078943591338	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996016440282054	WITHOUT_CLASSIFICATION	3.9835597179459486E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999916422794937	WITHOUT_CLASSIFICATION	8.357720506440594E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999998113124826	WITHOUT_CLASSIFICATION	1.886875172604482E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999901820288227	WITHOUT_CLASSIFICATION	9.817971177181538E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999868558419124	WITHOUT_CLASSIFICATION	1.3144158087675432E-5	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999301418361893	WITHOUT_CLASSIFICATION	6.985816381065883E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999953787135625	WITHOUT_CLASSIFICATION	4.6212864376005116E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999924204585721	WITHOUT_CLASSIFICATION	7.579541427873877E-6	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999856610431606	WITHOUT_CLASSIFICATION	1.4338956839391142E-5	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889796518718	WITHOUT_CLASSIFICATION	1.1020348128119591E-5	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999993304465055	WITHOUT_CLASSIFICATION	6.695534945020231E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994137497276014	WITHOUT_CLASSIFICATION	5.862502723985477E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998827669578388	WITHOUT_CLASSIFICATION	1.1723304216109424E-4	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999649520026632	WITHOUT_CLASSIFICATION	3.5047997336804666E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952470261221	WITHOUT_CLASSIFICATION	4.752973877860463E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9677404130607885	WITHOUT_CLASSIFICATION	0.0322595869392115	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999864181123771	WITHOUT_CLASSIFICATION	1.358188762291064E-5	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999984913706812	WITHOUT_CLASSIFICATION	1.5086293187403605E-6	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999992445169984	WITHOUT_CLASSIFICATION	7.554830016595239E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946158623626	WITHOUT_CLASSIFICATION	5.3841376373927E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999886082512623	WITHOUT_CLASSIFICATION	1.1391748737592241E-5	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999963551159965	WITHOUT_CLASSIFICATION	3.6448840034523322E-6	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999988559384474	WITHOUT_CLASSIFICATION	1.144061552648173E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999843360073446	WITHOUT_CLASSIFICATION	1.5663992655415395E-5	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999933061707496	WITHOUT_CLASSIFICATION	6.693829250377007E-6	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999914636321754	WITHOUT_CLASSIFICATION	8.536367824616535E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999919794334734	WITHOUT_CLASSIFICATION	8.020566526603268E-6	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999928243477049	WITHOUT_CLASSIFICATION	7.175652295161603E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999956952236142	WITHOUT_CLASSIFICATION	4.304776385908584E-6	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999739287556939	WITHOUT_CLASSIFICATION	2.6071244306139112E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999475212248694	WITHOUT_CLASSIFICATION	5.247877513062357E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999961871798567	WITHOUT_CLASSIFICATION	3.812820143341369E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999598022645709	WITHOUT_CLASSIFICATION	4.01977354291383E-5	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999745083324504	WITHOUT_CLASSIFICATION	2.5491667549621812E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999960860847389	WITHOUT_CLASSIFICATION	3.913915261172324E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999847728858348	WITHOUT_CLASSIFICATION	1.5227114165356942E-5	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999990620373581	WITHOUT_CLASSIFICATION	9.379626418482458E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999988160781533	WITHOUT_CLASSIFICATION	1.1839218466977542E-6	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999981858668466	WITHOUT_CLASSIFICATION	1.8141331534009539E-6	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999988160781533	WITHOUT_CLASSIFICATION	1.1839218466977542E-6	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999997517564312	WITHOUT_CLASSIFICATION	2.4824356882952174E-7	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999988451148373	WITHOUT_CLASSIFICATION	1.1548851627167604E-5	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999973117495772	WITHOUT_CLASSIFICATION	2.6882504228980143E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999950773488558	WITHOUT_CLASSIFICATION	4.9226511441181985E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999907777760607	WITHOUT_CLASSIFICATION	9.222223939215064E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999940207172902	WITHOUT_CLASSIFICATION	5.9792827098860654E-6	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997832362358	WITHOUT_CLASSIFICATION	2.1676376411762925E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999970747801772	WITHOUT_CLASSIFICATION	2.925219822806686E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999963249247743	WITHOUT_CLASSIFICATION	3.6750752255822907E-6	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999995504499161	WITHOUT_CLASSIFICATION	4.49550083991992E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998352354109	WITHOUT_CLASSIFICATION	1.647645891592228E-7	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999988852896297	WITHOUT_CLASSIFICATION	1.1147103703040321E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999969943115041	WITHOUT_CLASSIFICATION	3.0056884960145995E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999987816719452	WITHOUT_CLASSIFICATION	1.2183280547935557E-6	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999969716096608	WITHOUT_CLASSIFICATION	3.028390339083606E-6	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999957864715978	WITHOUT_CLASSIFICATION	4.21352840222205E-6	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999932202231149	WITHOUT_CLASSIFICATION	6.779776885090417E-6	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999998845338578	WITHOUT_CLASSIFICATION	1.154661422105771E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999982666229625	WITHOUT_CLASSIFICATION	1.7333770373625833E-6	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999890227613513	WITHOUT_CLASSIFICATION	1.0977238648857429E-5	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999934940192902	WITHOUT_CLASSIFICATION	6.5059807098158616E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999816187072071	WITHOUT_CLASSIFICATION	1.8381292792930413E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9999792335899484	WITHOUT_CLASSIFICATION	2.076641005156936E-5	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999429591522535	WITHOUT_CLASSIFICATION	5.7040847746575666E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999965255295344	WITHOUT_CLASSIFICATION	3.47447046545414E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9970606359257039	WITHOUT_CLASSIFICATION	0.00293936407429602	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999626357801424	WITHOUT_CLASSIFICATION	3.736421985759655E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.999953358824571	WITHOUT_CLASSIFICATION	4.6641175428979126E-5	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999973350668865	WITHOUT_CLASSIFICATION	2.6649331134753878E-6	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999196376357253	WITHOUT_CLASSIFICATION	8.03623642747099E-5	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999360022328568	WITHOUT_CLASSIFICATION	6.399776714321498E-5	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999792150253802	WITHOUT_CLASSIFICATION	2.0784974619724494E-5	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999998748507859	WITHOUT_CLASSIFICATION	1.2514921408048757E-7	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999892944834016	WITHOUT_CLASSIFICATION	1.0705516598310995E-5	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999738689339879	WITHOUT_CLASSIFICATION	2.613106601205577E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9998806721853337	WITHOUT_CLASSIFICATION	1.1932781466627406E-4	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999600771074733	WITHOUT_CLASSIFICATION	3.9922892526697394E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999972102424599	WITHOUT_CLASSIFICATION	2.7897575401391515E-6	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999216255524153	WITHOUT_CLASSIFICATION	7.837444758466732E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999953341126787	WITHOUT_CLASSIFICATION	4.665887321246929E-6	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999834717515668	WITHOUT_CLASSIFICATION	1.6528248433275086E-5	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.999961714015703	WITHOUT_CLASSIFICATION	3.8285984297052146E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999981705245516	WITHOUT_CLASSIFICATION	1.829475448325422E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9970606359257039	WITHOUT_CLASSIFICATION	0.00293936407429602	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998604135696072	WITHOUT_CLASSIFICATION	1.395864303927804E-4	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999973767388379	WITHOUT_CLASSIFICATION	2.6232611619927404E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999798273324279	WITHOUT_CLASSIFICATION	2.0172667572238102E-5	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999550313787378	WITHOUT_CLASSIFICATION	4.496862126228005E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999677110252255	WITHOUT_CLASSIFICATION	3.2288974774534094E-5	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999714503057764	WITHOUT_CLASSIFICATION	2.8549694223531702E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999913517073518	WITHOUT_CLASSIFICATION	8.648292648219018E-6	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9999815918350667	WITHOUT_CLASSIFICATION	1.8408164933169807E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999978532194452	WITHOUT_CLASSIFICATION	2.1467805548064706E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999892924112919	WITHOUT_CLASSIFICATION	1.0707588708185385E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999484701282114	WITHOUT_CLASSIFICATION	5.152987178858247E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999996877752781	WITHOUT_CLASSIFICATION	3.1222472182259017E-7	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999699433543162	WITHOUT_CLASSIFICATION	3.0056645683718293E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999147178904133	WITHOUT_CLASSIFICATION	8.528210958663514E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999470344403872	WITHOUT_CLASSIFICATION	5.2965559612795955E-5	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999913057631518	WITHOUT_CLASSIFICATION	8.694236848255916E-6	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999532552463435	WITHOUT_CLASSIFICATION	4.674475365651731E-5	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999297362782712	WITHOUT_CLASSIFICATION	7.026372172886457E-5	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999978823366925	WITHOUT_CLASSIFICATION	2.117663307519728E-6	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9998604135696072	WITHOUT_CLASSIFICATION	1.395864303927804E-4	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999936156892955	WITHOUT_CLASSIFICATION	6.384310704518087E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999989762894522	WITHOUT_CLASSIFICATION	1.0237105477147246E-6	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999850539042623	WITHOUT_CLASSIFICATION	1.4946095737748313E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999938638093729	WITHOUT_CLASSIFICATION	6.136190627142742E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999942809138425	WITHOUT_CLASSIFICATION	5.71908615751543E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999548104191762	WITHOUT_CLASSIFICATION	4.518958082364838E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999548104191762	WITHOUT_CLASSIFICATION	4.518958082364838E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999957195351029	WITHOUT_CLASSIFICATION	4.280464897114662E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999548104191762	WITHOUT_CLASSIFICATION	4.518958082364838E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999548104191762	WITHOUT_CLASSIFICATION	4.518958082364838E-5	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999355210059002	WITHOUT_CLASSIFICATION	6.447899409978865E-5	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9997686863661719	WITHOUT_CLASSIFICATION	2.3131363382806862E-4	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999982964736075	WITHOUT_CLASSIFICATION	1.7035263924476682E-6	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999988410408419	WITHOUT_CLASSIFICATION	1.1589591580972702E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999994743124609	WITHOUT_CLASSIFICATION	5.256875391075149E-6	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999970182333864	WITHOUT_CLASSIFICATION	2.981766613660486E-6	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999854382653491	WITHOUT_CLASSIFICATION	1.4561734650777864E-5	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999947919927902	WITHOUT_CLASSIFICATION	5.208007209918227E-6	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999757801084874	WITHOUT_CLASSIFICATION	2.4219891512563903E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998021412231526	WITHOUT_CLASSIFICATION	1.9785877684734841E-4	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999873475652385	WITHOUT_CLASSIFICATION	1.2652434761422572E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996864562948707	WITHOUT_CLASSIFICATION	3.135437051293162E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998697110759237	WITHOUT_CLASSIFICATION	1.302889240764071E-4	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999938923745602	WITHOUT_CLASSIFICATION	6.107625439802066E-5	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999829679867531	WITHOUT_CLASSIFICATION	1.7032013246805192E-5	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9992082944704599	WITHOUT_CLASSIFICATION	7.917055295400808E-4	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802879084975	WITHOUT_CLASSIFICATION	1.9712091502447072E-5	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999966378991288	WITHOUT_CLASSIFICATION	3.362100871190921E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999495850439554	WITHOUT_CLASSIFICATION	5.04149560446043E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999357340131915	WITHOUT_CLASSIFICATION	6.42659868085368E-5	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999755448411182	WITHOUT_CLASSIFICATION	2.445515888185447E-5	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999927054399954	WITHOUT_CLASSIFICATION	7.294560004705477E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999802879084975	WITHOUT_CLASSIFICATION	1.9712091502447072E-5	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999626357801424	WITHOUT_CLASSIFICATION	3.736421985759655E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.999977730629807	WITHOUT_CLASSIFICATION	2.2269370193105198E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999849912497331	WITHOUT_CLASSIFICATION	1.500875026686968E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999939364415437	WITHOUT_CLASSIFICATION	6.063558456307448E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999449102200675	WITHOUT_CLASSIFICATION	5.508977993241409E-5	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999982255382107	WITHOUT_CLASSIFICATION	1.7744617892182254E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9997276314016759	WITHOUT_CLASSIFICATION	2.7236859832415134E-4	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999738071465845	WITHOUT_CLASSIFICATION	2.6192853415654588E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999964108903683	WITHOUT_CLASSIFICATION	3.589109631699868E-5	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999409001232646	WITHOUT_CLASSIFICATION	5.9099876735303854E-5	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999659076615983	WITHOUT_CLASSIFICATION	3.409233840173939E-5	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992548658729	WITHOUT_CLASSIFICATION	7.451341272084314E-7	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999923997844947	WITHOUT_CLASSIFICATION	7.600215505201318E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999974652409085	WITHOUT_CLASSIFICATION	2.5347590913879146E-6	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999691610761805	WITHOUT_CLASSIFICATION	3.083892381955855E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999993213924218	WITHOUT_CLASSIFICATION	6.786075783803982E-7	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999912503571148	WITHOUT_CLASSIFICATION	8.749642885211455E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999990612993609	WITHOUT_CLASSIFICATION	9.38700639098675E-6	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999991696606494	WITHOUT_CLASSIFICATION	8.303393505905343E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999956145753858	WITHOUT_CLASSIFICATION	4.38542461418797E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999768102746929	WITHOUT_CLASSIFICATION	2.3189725307076634E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999851698694384	WITHOUT_CLASSIFICATION	1.4830130561553067E-5	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999992990920854	WITHOUT_CLASSIFICATION	7.00907914593049E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.999964108903683	WITHOUT_CLASSIFICATION	3.589109631699868E-5	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999990697179128	WITHOUT_CLASSIFICATION	9.302820872020583E-6	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999941128098372	WITHOUT_CLASSIFICATION	5.88719016281795E-6	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999923993994125	WITHOUT_CLASSIFICATION	7.600600587475457E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999819473333685	WITHOUT_CLASSIFICATION	1.8052666631407366E-5	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991113916809	WITHOUT_CLASSIFICATION	8.886083192427915E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999622091545013	WITHOUT_CLASSIFICATION	3.779084549882668E-5	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9998983086143269	WITHOUT_CLASSIFICATION	1.0169138567304282E-4	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.99999403823476	WITHOUT_CLASSIFICATION	5.9617652401346295E-6	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999852000283144	WITHOUT_CLASSIFICATION	1.4799971685718585E-5	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999164416797047	WITHOUT_CLASSIFICATION	8.35583202952978E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999954267655945	WITHOUT_CLASSIFICATION	4.573234405492623E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999945523483641	WITHOUT_CLASSIFICATION	5.447651635946919E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999687893602379	WITHOUT_CLASSIFICATION	3.1210639762049E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998648049678	WITHOUT_CLASSIFICATION	1.3519503216158103E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999658676319296	WITHOUT_CLASSIFICATION	3.4132368070448006E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999503111452	WITHOUT_CLASSIFICATION	4.968885479785652E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999954267655945	WITHOUT_CLASSIFICATION	4.573234405492623E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999943686215172	WITHOUT_CLASSIFICATION	5.631378482775922E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999096907790219	WITHOUT_CLASSIFICATION	9.030922097797608E-5	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999980993541893	WITHOUT_CLASSIFICATION	1.9006458108141514E-6	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999956837715499	WITHOUT_CLASSIFICATION	4.316228450010755E-6	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999398792401369	WITHOUT_CLASSIFICATION	6.0120759862981897E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999451769365424	WITHOUT_CLASSIFICATION	5.482306345754455E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999997813168129	WITHOUT_CLASSIFICATION	2.1868318700855373E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992668951408	WITHOUT_CLASSIFICATION	7.331048591822962E-7	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968730424675	WITHOUT_CLASSIFICATION	3.1269575325890513E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992869871521	WITHOUT_CLASSIFICATION	7.130128477881934E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995599033644	WITHOUT_CLASSIFICATION	4.4009663549993796E-7	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998149453312	WITHOUT_CLASSIFICATION	1.8505466886448804E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999781199302091	WITHOUT_CLASSIFICATION	2.1880069790980582E-5	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999781199302091	WITHOUT_CLASSIFICATION	2.1880069790980582E-5	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999963350787838	WITHOUT_CLASSIFICATION	3.6649212160480515E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999955424588445	WITHOUT_CLASSIFICATION	4.457541155586454E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999960081230177	WITHOUT_CLASSIFICATION	3.991876982260755E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999928108502265	WITHOUT_CLASSIFICATION	7.189149773527052E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9982086529474792	WITHOUT_CLASSIFICATION	0.0017913470525208813	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998466259473	WITHOUT_CLASSIFICATION	1.533740526998481E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805040614885	WITHOUT_CLASSIFICATION	1.9495938511533312E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841349458279	WITHOUT_CLASSIFICATION	1.5865054172073987E-5	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999992712521524	WITHOUT_CLASSIFICATION	7.287478475931484E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959422186326	WITHOUT_CLASSIFICATION	4.057781367409324E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99998466259473	WITHOUT_CLASSIFICATION	1.533740526998481E-5	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999805040614885	WITHOUT_CLASSIFICATION	1.9495938511533312E-5	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841349458279	WITHOUT_CLASSIFICATION	1.5865054172073987E-5	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999873124853563	WITHOUT_CLASSIFICATION	1.2687514643674565E-5	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999225272312426	WITHOUT_CLASSIFICATION	7.747276875733549E-5	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999981228727223	WITHOUT_CLASSIFICATION	1.8771272776286231E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999187116161707	WITHOUT_CLASSIFICATION	8.128838382932462E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999990722712684	WITHOUT_CLASSIFICATION	9.277287315629035E-7	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999990756666238	WITHOUT_CLASSIFICATION	9.243333761244423E-7	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.998467131969673	WITHOUT_CLASSIFICATION	0.0015328680303269876	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.999984588967283	WITHOUT_CLASSIFICATION	1.5411032716938505E-5	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9997232978291266	WITHOUT_CLASSIFICATION	2.767021708733985E-4	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999958043017141	WITHOUT_CLASSIFICATION	4.1956982858830496E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999765898936377	WITHOUT_CLASSIFICATION	2.3410106362320926E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9969436352019245	WITHOUT_CLASSIFICATION	0.0030563647980753855	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999529369156966	WITHOUT_CLASSIFICATION	4.706308430335635E-5	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999993330616215	WITHOUT_CLASSIFICATION	6.669383784143285E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999992003883625	WITHOUT_CLASSIFICATION	7.996116374098954E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999872519004415	WITHOUT_CLASSIFICATION	1.2748099558588379E-5	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995672841006703	WITHOUT_CLASSIFICATION	4.3271589932975175E-4	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994537253785803	WITHOUT_CLASSIFICATION	5.462746214195985E-4	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999941944917559	WITHOUT_CLASSIFICATION	5.8055082442084256E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9970723952392869	WITHOUT_CLASSIFICATION	0.002927604760713143	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999964568334168	WITHOUT_CLASSIFICATION	3.543166583284822E-6	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998272712453267	WITHOUT_CLASSIFICATION	1.7272875467341307E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999045911542842	WITHOUT_CLASSIFICATION	9.540884571585233E-5	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999679114226365	WITHOUT_CLASSIFICATION	3.208857736345908E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999994642490176	WITHOUT_CLASSIFICATION	5.357509822711988E-7	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999934498810109	WITHOUT_CLASSIFICATION	6.550118989089173E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999228886097953	WITHOUT_CLASSIFICATION	7.711139020471152E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899292457621	WITHOUT_CLASSIFICATION	1.0070754237930284E-5	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999713347421111	WITHOUT_CLASSIFICATION	2.8665257888932242E-5	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951071197888	WITHOUT_CLASSIFICATION	4.89288021129951E-6	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849507711389	WITHOUT_CLASSIFICATION	1.5049228861079357E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999901164233949	WITHOUT_CLASSIFICATION	9.883576605158163E-6	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999901164233949	WITHOUT_CLASSIFICATION	9.883576605158163E-6	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999978723461339	WITHOUT_CLASSIFICATION	2.127653866054758E-6	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999996564925735	WITHOUT_CLASSIFICATION	3.4350742654321485E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998754276560928	WITHOUT_CLASSIFICATION	1.2457234390717743E-4	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996589285136719	WITHOUT_CLASSIFICATION	3.4107148632803907E-4	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999991589351889	WITHOUT_CLASSIFICATION	8.410648110839934E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999952187575144	WITHOUT_CLASSIFICATION	4.781242485587568E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9997716678239473	WITHOUT_CLASSIFICATION	2.283321760528173E-4	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999860237518972	WITHOUT_CLASSIFICATION	1.3976248102853118E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999923791144875	WITHOUT_CLASSIFICATION	7.620885512562618E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984388795289	WITHOUT_CLASSIFICATION	1.5611204711358804E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983302627031	WITHOUT_CLASSIFICATION	1.6697372968942301E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998373175067	WITHOUT_CLASSIFICATION	1.6268249330207612E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948797551844	WITHOUT_CLASSIFICATION	5.120244815595404E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958276317377	WITHOUT_CLASSIFICATION	4.1723682622350986E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975034530555	WITHOUT_CLASSIFICATION	2.4965469444914983E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998655100851	WITHOUT_CLASSIFICATION	1.3448991490244052E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987793748851	WITHOUT_CLASSIFICATION	1.2206251149676424E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982632127012	WITHOUT_CLASSIFICATION	1.7367872987320513E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968376170932	WITHOUT_CLASSIFICATION	3.162382906860028E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984636188033	WITHOUT_CLASSIFICATION	1.536381196759371E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999949291385158	WITHOUT_CLASSIFICATION	5.070861484167049E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9869430547350418	WITHOUT_CLASSIFICATION	0.013056945264958033	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999162680579191	WITHOUT_CLASSIFICATION	8.373194208085686E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999990559994915	WITHOUT_CLASSIFICATION	9.440005085970084E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999597136277	WITHOUT_CLASSIFICATION	4.0286372308018813E-7	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999855731015908	WITHOUT_CLASSIFICATION	1.4426898409109477E-5	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999506705361	WITHOUT_CLASSIFICATION	4.932946391195181E-7	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999994179700675	WITHOUT_CLASSIFICATION	5.820299323609362E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999162680579191	WITHOUT_CLASSIFICATION	8.373194208085686E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999162680579191	WITHOUT_CLASSIFICATION	8.373194208085686E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999899291378384	WITHOUT_CLASSIFICATION	1.007086216175706E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999911376733006	WITHOUT_CLASSIFICATION	8.86232669928763E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997897736150976	WITHOUT_CLASSIFICATION	2.1022638490235718E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999977076812232	WITHOUT_CLASSIFICATION	2.2923187767766555E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9970723952392869	WITHOUT_CLASSIFICATION	0.002927604760713143	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999771734661302	WITHOUT_CLASSIFICATION	2.2826533869727927E-5	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999919351767564	WITHOUT_CLASSIFICATION	8.064823243496166E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999936033643172	WITHOUT_CLASSIFICATION	6.396635682737601E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929471199189	WITHOUT_CLASSIFICATION	7.052880081075774E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999991950534675	WITHOUT_CLASSIFICATION	8.049465325749033E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579125756797	WITHOUT_CLASSIFICATION	4.2087424320411746E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999960142683469	WITHOUT_CLASSIFICATION	3.985731652997294E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999960142683469	WITHOUT_CLASSIFICATION	3.985731652997294E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999962738584344	WITHOUT_CLASSIFICATION	3.726141565677921E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999962738584344	WITHOUT_CLASSIFICATION	3.726141565677921E-6	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999775826686	WITHOUT_CLASSIFICATION	2.2417331399788924E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844685097116	WITHOUT_CLASSIFICATION	1.5531490288363837E-5	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999908601477451	WITHOUT_CLASSIFICATION	9.139852254962945E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941432275383	WITHOUT_CLASSIFICATION	5.856772461608033E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999975629597451	WITHOUT_CLASSIFICATION	2.437040254973303E-6	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999922450872336	WITHOUT_CLASSIFICATION	7.754912766320606E-6	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961630165791	WITHOUT_CLASSIFICATION	3.836983420827158E-6	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963213437872	WITHOUT_CLASSIFICATION	3.6786562127855337E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999973263420622	WITHOUT_CLASSIFICATION	2.6736579378750707E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999866520828382	WITHOUT_CLASSIFICATION	1.3347917161854724E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999753585791054	WITHOUT_CLASSIFICATION	2.4641420894741308E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999996522643269	WITHOUT_CLASSIFICATION	3.477356730930523E-6	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.999995650368953	WITHOUT_CLASSIFICATION	4.3496310469984486E-6	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999924663594216	WITHOUT_CLASSIFICATION	7.533640578397679E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999687585731338	WITHOUT_CLASSIFICATION	3.12414268661049E-5	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999945778864345	WITHOUT_CLASSIFICATION	5.422113565505623E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999945778864345	WITHOUT_CLASSIFICATION	5.422113565505623E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999998823754909	WITHOUT_CLASSIFICATION	1.176245091186471E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999965425207291	WITHOUT_CLASSIFICATION	3.457479270817863E-6	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999994742476029	WITHOUT_CLASSIFICATION	5.257523971057813E-7	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997329734729744	WITHOUT_CLASSIFICATION	2.6702652702562254E-4	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841340359921	WITHOUT_CLASSIFICATION	1.586596400793851E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894483622971	WITHOUT_CLASSIFICATION	1.0551637702906488E-5	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999988785864875	WITHOUT_CLASSIFICATION	1.1214135124958347E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984457629271	WITHOUT_CLASSIFICATION	1.5542370730289097E-6	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999923351759502	WITHOUT_CLASSIFICATION	7.664824049802595E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999080675678	WITHOUT_CLASSIFICATION	9.193243219489301E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999182498608	WITHOUT_CLASSIFICATION	8.17501391864619E-8	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999991684445684	WITHOUT_CLASSIFICATION	8.315554315737451E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998494980150885	WITHOUT_CLASSIFICATION	1.5050198491148263E-4	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999655711750985	WITHOUT_CLASSIFICATION	3.4428824901511115E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999982114773297	WITHOUT_CLASSIFICATION	1.7885226702163953E-6	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998608254900363	WITHOUT_CLASSIFICATION	1.3917450996370662E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996412031609	WITHOUT_CLASSIFICATION	3.587968391565399E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999918197901461	WITHOUT_CLASSIFICATION	8.18020985395195E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999990533368889	WITHOUT_CLASSIFICATION	9.466631111060668E-6	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999976081711807	WITHOUT_CLASSIFICATION	2.391828819320152E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999617595563	WITHOUT_CLASSIFICATION	3.824044367551822E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995272308951	WITHOUT_CLASSIFICATION	4.7276910492943877E-7	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999997701653084	WITHOUT_CLASSIFICATION	2.2983469160785344E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999987251911412	WITHOUT_CLASSIFICATION	1.2748088588028712E-6	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999995638841189	WITHOUT_CLASSIFICATION	4.361158810956059E-6	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999872334749028	WITHOUT_CLASSIFICATION	1.2766525097220503E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999875590589211	WITHOUT_CLASSIFICATION	1.2440941078831102E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998551564983007	WITHOUT_CLASSIFICATION	1.4484350169931121E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999998280023981	WITHOUT_CLASSIFICATION	1.7199760185817681E-7	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999423628099922	WITHOUT_CLASSIFICATION	5.763719000788036E-5	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999992176390661	WITHOUT_CLASSIFICATION	7.823609340130723E-7	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999588551748155	WITHOUT_CLASSIFICATION	4.11448251844757E-5	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9980354409885319	WITHOUT_CLASSIFICATION	0.0019645590114680104	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999954433931184	WITHOUT_CLASSIFICATION	4.556606881700055E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9987588125999448	WITHOUT_CLASSIFICATION	0.001241187400055192	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999620454840565	WITHOUT_CLASSIFICATION	3.795451594343655E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999997089062567	WITHOUT_CLASSIFICATION	2.910937433487205E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999988286884385	WITHOUT_CLASSIFICATION	1.1713115615469538E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999945395372729	WITHOUT_CLASSIFICATION	5.460462727082653E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.999993156611832	WITHOUT_CLASSIFICATION	6.843388167995541E-6	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999647777999126	WITHOUT_CLASSIFICATION	3.5222200087481044E-5	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999992355976629	WITHOUT_CLASSIFICATION	7.644023370959046E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999951855167531	WITHOUT_CLASSIFICATION	4.814483246765247E-6	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999999806240485	WITHOUT_CLASSIFICATION	1.9375951504001685E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999713524708795	WITHOUT_CLASSIFICATION	2.8647529120441277E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999956570025358	WITHOUT_CLASSIFICATION	4.342997464222119E-6	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999427083510095	WITHOUT_CLASSIFICATION	5.729164899047488E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.999891626204706	WITHOUT_CLASSIFICATION	1.0837379529404178E-4	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999981011739093	WITHOUT_CLASSIFICATION	1.8988260906428236E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999675601980392	WITHOUT_CLASSIFICATION	3.243980196073873E-5	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999435131607765	WITHOUT_CLASSIFICATION	5.648683922359041E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999731127685979	WITHOUT_CLASSIFICATION	2.688723140197149E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999976812660213	WITHOUT_CLASSIFICATION	2.318733978739697E-6	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999617590122197	WITHOUT_CLASSIFICATION	3.8240987780295783E-5	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.99997404077348	WITHOUT_CLASSIFICATION	2.5959226520066793E-5	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999950058544574	WITHOUT_CLASSIFICATION	4.994145542582667E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999969164726151	WITHOUT_CLASSIFICATION	3.0835273849281952E-6	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999779593503408	WITHOUT_CLASSIFICATION	2.204064965922473E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999943105230559	WITHOUT_CLASSIFICATION	5.689476944022092E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999657495486756	WITHOUT_CLASSIFICATION	3.425045132438731E-5	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999942633700564	WITHOUT_CLASSIFICATION	5.73662994362862E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999931879673534	WITHOUT_CLASSIFICATION	6.81203264663526E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999955604163915	WITHOUT_CLASSIFICATION	4.439583608558606E-6	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999396145548323	WITHOUT_CLASSIFICATION	6.0385445167770565E-5	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999976350083344	WITHOUT_CLASSIFICATION	2.3649916655452944E-6	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999909957682134	WITHOUT_CLASSIFICATION	9.004231786579703E-6	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998036246099	WITHOUT_CLASSIFICATION	1.9637539019817413E-7	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999972721169303	WITHOUT_CLASSIFICATION	2.7278830696981812E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996218298281653	WITHOUT_CLASSIFICATION	3.7817017183471865E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996218298281653	WITHOUT_CLASSIFICATION	3.7817017183471865E-4	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999897234126188	WITHOUT_CLASSIFICATION	1.0276587381296228E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999068300708862	WITHOUT_CLASSIFICATION	9.316992911375547E-5	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.99999886647147	WITHOUT_CLASSIFICATION	1.1335285300401235E-6	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999535244026669	WITHOUT_CLASSIFICATION	4.647559733304911E-5	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999954439262981	WITHOUT_CLASSIFICATION	4.556073701874195E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999989219952722	WITHOUT_CLASSIFICATION	1.078004727760679E-6	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999960263802427	WITHOUT_CLASSIFICATION	3.9736197573715425E-6	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999960021868397	WITHOUT_CLASSIFICATION	3.997813160335011E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999832485523502	WITHOUT_CLASSIFICATION	1.675144764984745E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999904842286045	WITHOUT_CLASSIFICATION	9.515771395433488E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999981750559184	WITHOUT_CLASSIFICATION	1.8249440816224748E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999982762743849	WITHOUT_CLASSIFICATION	1.7237256151940012E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999854635939339	WITHOUT_CLASSIFICATION	1.4536406066064496E-5	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999975975857909	WITHOUT_CLASSIFICATION	2.4024142090519793E-6	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999183571736289	WITHOUT_CLASSIFICATION	8.164282637108311E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999997321603254	WITHOUT_CLASSIFICATION	2.6783967460626E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999875801412731	WITHOUT_CLASSIFICATION	1.241985872687375E-5	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999970934738132	WITHOUT_CLASSIFICATION	2.906526186795136E-6	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999841456564298	WITHOUT_CLASSIFICATION	1.5854343570188132E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999979872759299	WITHOUT_CLASSIFICATION	2.012724070031043E-6	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999898269616875	WITHOUT_CLASSIFICATION	1.017303831261398E-5	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999542506046321	WITHOUT_CLASSIFICATION	4.5749395367887394E-5	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999271830482448	WITHOUT_CLASSIFICATION	7.281695175525736E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999093371074405	WITHOUT_CLASSIFICATION	9.066289255953876E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999955282937394	WITHOUT_CLASSIFICATION	4.4717062605076905E-6	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999770733059693	WITHOUT_CLASSIFICATION	2.2926694030772926E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999894488142772	WITHOUT_CLASSIFICATION	1.0551185722875426E-5	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999379540024755	WITHOUT_CLASSIFICATION	6.204599752440544E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999525681325925	WITHOUT_CLASSIFICATION	4.7431867407503674E-5	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999973345183034	WITHOUT_CLASSIFICATION	2.66548169663667E-6	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999283540367705	WITHOUT_CLASSIFICATION	7.164596322950531E-5	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999657634888784	WITHOUT_CLASSIFICATION	3.423651112158407E-5	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999459475692455	WITHOUT_CLASSIFICATION	5.405243075442675E-5	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.999993006075769	WITHOUT_CLASSIFICATION	6.993924231028549E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999533043461849	WITHOUT_CLASSIFICATION	4.669565381513108E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999533043461849	WITHOUT_CLASSIFICATION	4.669565381513108E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998933047249674	WITHOUT_CLASSIFICATION	1.0669527503260569E-4	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999201473298558	WITHOUT_CLASSIFICATION	7.985267014427932E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999980192420462	WITHOUT_CLASSIFICATION	1.980757953702834E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999976747746151	WITHOUT_CLASSIFICATION	2.3252253850023737E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.999985705535644	WITHOUT_CLASSIFICATION	1.4294464355882195E-5	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999759534474907	WITHOUT_CLASSIFICATION	2.404655250925124E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9994813872961437	WITHOUT_CLASSIFICATION	5.186127038563586E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998518844838	WITHOUT_CLASSIFICATION	1.4811551614309226E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999887531687095	WITHOUT_CLASSIFICATION	1.1246831290535298E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999997502186166	WITHOUT_CLASSIFICATION	2.4978138339206013E-6	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999368975108747	WITHOUT_CLASSIFICATION	6.310248912541527E-5	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999871955958026	WITHOUT_CLASSIFICATION	1.2804404197332144E-5	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999989553869548	WITHOUT_CLASSIFICATION	1.044613045075218E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999991403364081	WITHOUT_CLASSIFICATION	8.596635918703776E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999784845156429	WITHOUT_CLASSIFICATION	2.1515484357159686E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999867554069537	WITHOUT_CLASSIFICATION	1.3244593046330945E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999867554069537	WITHOUT_CLASSIFICATION	1.3244593046330945E-5	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999922623043943	WITHOUT_CLASSIFICATION	7.737695605603355E-6	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999911470715164	WITHOUT_CLASSIFICATION	8.852928483706094E-6	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999995135012831	WITHOUT_CLASSIFICATION	4.864987169249232E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994495602919	WITHOUT_CLASSIFICATION	5.504397081631757E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9980365643473939	WITHOUT_CLASSIFICATION	0.0019634356526061747	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999777286498159	WITHOUT_CLASSIFICATION	2.22713501840443E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999962805183225	WITHOUT_CLASSIFICATION	3.7194816775037115E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999962805183225	WITHOUT_CLASSIFICATION	3.7194816775037115E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999792638396302	WITHOUT_CLASSIFICATION	2.073616036974093E-5	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999992280603212	WITHOUT_CLASSIFICATION	7.719396789239427E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9992259199075383	WITHOUT_CLASSIFICATION	7.740800924616528E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997274452233	WITHOUT_CLASSIFICATION	2.725547767479798E-7	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999984468315087	WITHOUT_CLASSIFICATION	1.55316849131669E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996198450454984	WITHOUT_CLASSIFICATION	3.801549545016247E-4	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999985473252323	WITHOUT_CLASSIFICATION	1.4526747676653246E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999435730854805	WITHOUT_CLASSIFICATION	5.6426914519480555E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.99999762834316	WITHOUT_CLASSIFICATION	2.3716568400669484E-6	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999997324743751	WITHOUT_CLASSIFICATION	2.6752562488353813E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9999969954922104	WITHOUT_CLASSIFICATION	3.0045077895146623E-6	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999941586784351	WITHOUT_CLASSIFICATION	5.84132156489499E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999958717997567	WITHOUT_CLASSIFICATION	4.128200243368633E-6	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999149579718951	WITHOUT_CLASSIFICATION	8.504202810492456E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999675516815641	WITHOUT_CLASSIFICATION	3.244831843576584E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999456119501428	WITHOUT_CLASSIFICATION	5.4388049857371685E-5	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999694964472344	WITHOUT_CLASSIFICATION	3.0503552765594096E-5	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999401245589512	WITHOUT_CLASSIFICATION	5.987544104883336E-5	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998986660681966	WITHOUT_CLASSIFICATION	1.0133393180342237E-4	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999998940712369	WITHOUT_CLASSIFICATION	1.0592876309477667E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999956573031271	WITHOUT_CLASSIFICATION	4.342696872800926E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999454032817263	WITHOUT_CLASSIFICATION	5.459671827373721E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999677869103247	WITHOUT_CLASSIFICATION	3.221308967536274E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999995861084346	WITHOUT_CLASSIFICATION	4.1389156528419604E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999995067186783	WITHOUT_CLASSIFICATION	4.932813217054349E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999999529936325	WITHOUT_CLASSIFICATION	4.7006367500765427E-7	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999998864486855	WITHOUT_CLASSIFICATION	1.1355131443645286E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999522982592	WITHOUT_CLASSIFICATION	4.770174083194859E-8	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999989809008322	WITHOUT_CLASSIFICATION	1.019099167859886E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999991439895202	WITHOUT_CLASSIFICATION	8.560104799393531E-7	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999971780134256	WITHOUT_CLASSIFICATION	2.821986574450335E-6	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999699715234245	WITHOUT_CLASSIFICATION	3.002847657544105E-5	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999791065145069	WITHOUT_CLASSIFICATION	2.0893485493024653E-5	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999917849318124	WITHOUT_CLASSIFICATION	8.215068187570374E-6	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999199184506613	WITHOUT_CLASSIFICATION	8.008154933866048E-5	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999950676950839	WITHOUT_CLASSIFICATION	4.932304916099526E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999634446965847	WITHOUT_CLASSIFICATION	3.655530341525424E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999930541859452	WITHOUT_CLASSIFICATION	6.945814054844542E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.999972889932911	WITHOUT_CLASSIFICATION	2.71100670890148E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999856151627826	WITHOUT_CLASSIFICATION	1.438483721740852E-5	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999992871929727	WITHOUT_CLASSIFICATION	7.128070273063454E-7	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999684810205564	WITHOUT_CLASSIFICATION	3.151897944357303E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999952371439456	WITHOUT_CLASSIFICATION	4.762856054401459E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999991959197911	WITHOUT_CLASSIFICATION	8.040802089810007E-7	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999920835183703	WITHOUT_CLASSIFICATION	7.91648162968468E-6	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999913246588349	WITHOUT_CLASSIFICATION	8.675341165112055E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.999972889932911	WITHOUT_CLASSIFICATION	2.71100670890148E-5	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999856151627826	WITHOUT_CLASSIFICATION	1.438483721740852E-5	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999989910642936	WITHOUT_CLASSIFICATION	1.0089357063785739E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999630087295135	WITHOUT_CLASSIFICATION	3.699127048654201E-5	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999961609570707	WITHOUT_CLASSIFICATION	3.839042929245173E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999765347251133	WITHOUT_CLASSIFICATION	2.3465274886781784E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999863827006278	WITHOUT_CLASSIFICATION	1.361729937213188E-5	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999994163090594	WITHOUT_CLASSIFICATION	5.836909406573182E-7	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998648748253213	WITHOUT_CLASSIFICATION	1.351251746787215E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999395569600908	WITHOUT_CLASSIFICATION	6.0443039909273054E-5	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999995065071478	WITHOUT_CLASSIFICATION	4.934928522252663E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.961431574182568	WITHOUT_CLASSIFICATION	0.03856842581743212	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999623792099	WITHOUT_CLASSIFICATION	3.762079011982217E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.961431574182568	WITHOUT_CLASSIFICATION	0.03856842581743212	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999993083829067	WITHOUT_CLASSIFICATION	6.916170932443341E-7	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999953591037202	WITHOUT_CLASSIFICATION	4.640896279918624E-6	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999970863151962	WITHOUT_CLASSIFICATION	2.9136848037934676E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999262980732985	WITHOUT_CLASSIFICATION	7.370192670159464E-5	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999971443665324	WITHOUT_CLASSIFICATION	2.855633467540139E-6	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9994197574888303	WITHOUT_CLASSIFICATION	5.802425111697424E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9994197574888303	WITHOUT_CLASSIFICATION	5.802425111697424E-4	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999912075915881	WITHOUT_CLASSIFICATION	8.792408411941517E-6	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999867273279307	WITHOUT_CLASSIFICATION	1.3272672069244294E-5	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999531913771779	WITHOUT_CLASSIFICATION	4.680862282213461E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999199066183908	WITHOUT_CLASSIFICATION	8.00933816092138E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999862221985303	WITHOUT_CLASSIFICATION	1.3777801469628957E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999403299641	WITHOUT_CLASSIFICATION	5.967003592118382E-8	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999808778332023	WITHOUT_CLASSIFICATION	1.912216679767651E-5	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999625111090723	WITHOUT_CLASSIFICATION	3.748889092783008E-5	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9998901746295151	WITHOUT_CLASSIFICATION	1.098253704849687E-4	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.9998334858750315	WITHOUT_CLASSIFICATION	1.6651412496846715E-4	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999870949556531	WITHOUT_CLASSIFICATION	1.2905044346831069E-5	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999955982195183	WITHOUT_CLASSIFICATION	4.401780481712902E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.99986037344735	WITHOUT_CLASSIFICATION	1.39626552650069E-4	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.999988005555413	WITHOUT_CLASSIFICATION	1.1994444587114672E-5	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999987789463212	WITHOUT_CLASSIFICATION	1.22105367885016E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999201601933	WITHOUT_CLASSIFICATION	7.983980667205842E-8	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999992196828905	WITHOUT_CLASSIFICATION	7.803171093968569E-7	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999969219902818	WITHOUT_CLASSIFICATION	3.0780097182460113E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999943332242447	WITHOUT_CLASSIFICATION	5.6667757553982265E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9992354078019141	WITHOUT_CLASSIFICATION	7.645921980858891E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999975131031107	WITHOUT_CLASSIFICATION	2.486896889282144E-6	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998887425518896	WITHOUT_CLASSIFICATION	1.1125744811036164E-4	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999907802378963	WITHOUT_CLASSIFICATION	9.21976210362477E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999967158125957	WITHOUT_CLASSIFICATION	3.284187404381966E-6	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999981770744643	WITHOUT_CLASSIFICATION	1.8229255356943243E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996670125195302	WITHOUT_CLASSIFICATION	3.3298748046980194E-4	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999988556088384	WITHOUT_CLASSIFICATION	1.1443911615905162E-6	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999971043971896	WITHOUT_CLASSIFICATION	2.8956028104442413E-6	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999805896731225	WITHOUT_CLASSIFICATION	1.9410326877562644E-5	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999893631243147	WITHOUT_CLASSIFICATION	1.063687568526479E-5	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9950824309801162	WITHOUT_CLASSIFICATION	0.004917569019883905	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999863354684657	WITHOUT_CLASSIFICATION	1.3664531534248328E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999808778332023	WITHOUT_CLASSIFICATION	1.912216679767651E-5	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999946992620837	WITHOUT_CLASSIFICATION	5.3007379163394025E-6	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999615449450489	WITHOUT_CLASSIFICATION	3.845505495115603E-5	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.990273218730876	WITHOUT_CLASSIFICATION	0.009726781269124046	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999526559052332	WITHOUT_CLASSIFICATION	4.734409476687253E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999971855622405	WITHOUT_CLASSIFICATION	2.8144377594655293E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999887069149549	WITHOUT_CLASSIFICATION	1.1293085045131605E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999199066183908	WITHOUT_CLASSIFICATION	8.00933816092138E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999199066183908	WITHOUT_CLASSIFICATION	8.00933816092138E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999838886394397	WITHOUT_CLASSIFICATION	1.6111360560309744E-5	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999343329856883	WITHOUT_CLASSIFICATION	6.566701431164092E-5	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999380134270741	WITHOUT_CLASSIFICATION	6.198657292587897E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999917650044193	WITHOUT_CLASSIFICATION	8.23499558060984E-6	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999951243121222	WITHOUT_CLASSIFICATION	4.875687877775755E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999990530382205	WITHOUT_CLASSIFICATION	9.469617795063003E-7	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999914338284043	WITHOUT_CLASSIFICATION	8.56617159583144E-6	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999995953289127	WITHOUT_CLASSIFICATION	4.046710873541521E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999513584946458	WITHOUT_CLASSIFICATION	4.864150535429848E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954956433684	WITHOUT_CLASSIFICATION	4.50435663161711E-6	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999941261065833	WITHOUT_CLASSIFICATION	5.87389341670535E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989213053810829	WITHOUT_CLASSIFICATION	0.0010786946189170722	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998567966300278	WITHOUT_CLASSIFICATION	1.4320336997221785E-4	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954956433684	WITHOUT_CLASSIFICATION	4.50435663161711E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999401870846246	WITHOUT_CLASSIFICATION	5.9812915375301683E-5	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999739929404028	WITHOUT_CLASSIFICATION	2.600705959717139E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999715135926748	WITHOUT_CLASSIFICATION	2.8486407325340542E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.5362887514533095	DEFECT	0.46371124854669066	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989213053810829	WITHOUT_CLASSIFICATION	0.0010786946189170722	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999952318284949	WITHOUT_CLASSIFICATION	4.76817150510397E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999571891032029	WITHOUT_CLASSIFICATION	4.281089679715909E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999634116324557	WITHOUT_CLASSIFICATION	3.658836754428611E-5	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999996299213295	WITHOUT_CLASSIFICATION	3.7007867044976114E-7	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9990597713299515	WITHOUT_CLASSIFICATION	9.402286700486009E-4	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999764259802741	WITHOUT_CLASSIFICATION	2.3574019725854252E-5	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999996589613068	WITHOUT_CLASSIFICATION	3.4103869320757942E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999414028361203	WITHOUT_CLASSIFICATION	5.8597163879544376E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999902148960883	WITHOUT_CLASSIFICATION	9.785103911713092E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999939336868989	WITHOUT_CLASSIFICATION	6.0663131011164465E-6	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999990751302839	WITHOUT_CLASSIFICATION	9.248697161897812E-7	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999991332853094	WITHOUT_CLASSIFICATION	8.66714690589403E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999954956433684	WITHOUT_CLASSIFICATION	4.50435663161711E-6	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999952318284949	WITHOUT_CLASSIFICATION	4.76817150510397E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999634116324557	WITHOUT_CLASSIFICATION	3.658836754428611E-5	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999211488954964	WITHOUT_CLASSIFICATION	7.88511045034644E-5	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999995424792219	WITHOUT_CLASSIFICATION	4.5752077809262726E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999934654839471	WITHOUT_CLASSIFICATION	6.534516052934973E-6	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9989213053810829	WITHOUT_CLASSIFICATION	0.0010786946189170722	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999990835343151	WITHOUT_CLASSIFICATION	9.164656848489902E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999208283799231	WITHOUT_CLASSIFICATION	7.917162007685132E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9998678626261079	WITHOUT_CLASSIFICATION	1.321373738919998E-4	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999364802388255	WITHOUT_CLASSIFICATION	6.351976117447252E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999414028361203	WITHOUT_CLASSIFICATION	5.8597163879544376E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999401870846246	WITHOUT_CLASSIFICATION	5.9812915375301683E-5	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999039669654833	WITHOUT_CLASSIFICATION	9.603303451658663E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999920379888627	WITHOUT_CLASSIFICATION	7.96201113722626E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999688354695588	WITHOUT_CLASSIFICATION	3.116453044117362E-5	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999946643219783	WITHOUT_CLASSIFICATION	5.335678021709959E-6	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999675391865107	WITHOUT_CLASSIFICATION	3.246081348933727E-5	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999811244715741	WITHOUT_CLASSIFICATION	1.8875528425879393E-5	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999037674610797	WITHOUT_CLASSIFICATION	9.623253892027693E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999262980732985	WITHOUT_CLASSIFICATION	7.370192670159464E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997167701418	WITHOUT_CLASSIFICATION	2.8322985826742507E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999998208503749	WITHOUT_CLASSIFICATION	1.7914962510109767E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999559129832374	WITHOUT_CLASSIFICATION	4.408701676262136E-5	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999957618974216	WITHOUT_CLASSIFICATION	4.238102578446499E-6	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999873559192244	WITHOUT_CLASSIFICATION	1.2644080775625568E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999988878079399	WITHOUT_CLASSIFICATION	1.1121920601442098E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999878481769208	WITHOUT_CLASSIFICATION	1.215182307924037E-5	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999979756692	WITHOUT_CLASSIFICATION	2.0243307999790907E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999364802388255	WITHOUT_CLASSIFICATION	6.351976117447252E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999591065100845	WITHOUT_CLASSIFICATION	4.089348991554579E-5	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999313970773901	WITHOUT_CLASSIFICATION	6.860292260994442E-5	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9997895469069731	WITHOUT_CLASSIFICATION	2.104530930269984E-4	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9998752612590907	WITHOUT_CLASSIFICATION	1.2473874090941845E-4	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999773668074926	WITHOUT_CLASSIFICATION	2.263319250736104E-5	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.999998214954648	WITHOUT_CLASSIFICATION	1.7850453518791854E-6	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999994548792981	WITHOUT_CLASSIFICATION	5.451207019042039E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999381768519053	WITHOUT_CLASSIFICATION	6.182314809462361E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999975392064858	WITHOUT_CLASSIFICATION	2.4607935142452196E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.999996795787711	WITHOUT_CLASSIFICATION	3.20421228904349E-6	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999848796899555	WITHOUT_CLASSIFICATION	1.5120310044493306E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998768587641966	WITHOUT_CLASSIFICATION	1.2314123580333053E-4	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999713831567248	WITHOUT_CLASSIFICATION	2.8616843275127927E-5	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.999820845154455	WITHOUT_CLASSIFICATION	1.7915484554491707E-4	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999981099597122	WITHOUT_CLASSIFICATION	1.8900402878293321E-6	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999982223891805	WITHOUT_CLASSIFICATION	1.777610819464235E-6	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999997194054476	WITHOUT_CLASSIFICATION	2.8059455238226427E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999987133402594	WITHOUT_CLASSIFICATION	1.2866597406762264E-6	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999399540113	WITHOUT_CLASSIFICATION	6.004598870489875E-7	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999545477571126	WITHOUT_CLASSIFICATION	4.545224288745854E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999426913112196	WITHOUT_CLASSIFICATION	5.73086887805127E-5	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999977059129622	WITHOUT_CLASSIFICATION	2.29408703775442E-6	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999996533660601	WITHOUT_CLASSIFICATION	3.466339398943281E-6	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999993435458537	WITHOUT_CLASSIFICATION	6.564541463309152E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999975710394404	WITHOUT_CLASSIFICATION	2.4289605595972486E-6	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9800331264713811	WITHOUT_CLASSIFICATION	0.01996687352861887	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999873861854193	WITHOUT_CLASSIFICATION	1.2613814580707036E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999956635917377	WITHOUT_CLASSIFICATION	4.336408262205053E-6	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999864943913455	WITHOUT_CLASSIFICATION	1.350560865457481E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9988500749237242	WITHOUT_CLASSIFICATION	0.0011499250762758311	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999853436213948	WITHOUT_CLASSIFICATION	1.4656378605195135E-5	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999881042201865	WITHOUT_CLASSIFICATION	1.1895779813404731E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999992495126232	WITHOUT_CLASSIFICATION	7.504873767530517E-7	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999882199144828	WITHOUT_CLASSIFICATION	1.1780085517108762E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999988793374743	WITHOUT_CLASSIFICATION	1.1206625257104419E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999929395877797	WITHOUT_CLASSIFICATION	7.060412220370448E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999900332251607	WITHOUT_CLASSIFICATION	9.966774839350202E-6	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999998661836316	WITHOUT_CLASSIFICATION	1.3381636844992937E-7	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999929395877797	WITHOUT_CLASSIFICATION	7.060412220370448E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999988793374743	WITHOUT_CLASSIFICATION	1.1206625257104419E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999900332251607	WITHOUT_CLASSIFICATION	9.966774839350202E-6	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999906164443962	WITHOUT_CLASSIFICATION	9.383555603751488E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.999999816844641	WITHOUT_CLASSIFICATION	1.8315535897684414E-7	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999970631564872	WITHOUT_CLASSIFICATION	2.936843512867472E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999855369974318	WITHOUT_CLASSIFICATION	1.4463002568239961E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998168015601	WITHOUT_CLASSIFICATION	1.8319843980070223E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9985694086414912	WITHOUT_CLASSIFICATION	0.0014305913585087855	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9980276735568671	WITHOUT_CLASSIFICATION	0.0019723264431328927	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999622293771891	WITHOUT_CLASSIFICATION	3.777062281077705E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999982639463117	WITHOUT_CLASSIFICATION	1.7360536883000622E-5	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999733976189503	WITHOUT_CLASSIFICATION	2.6602381049756334E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999936971069889	WITHOUT_CLASSIFICATION	6.302893011134334E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999964501828633	WITHOUT_CLASSIFICATION	3.549817136652452E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999990196300076	WITHOUT_CLASSIFICATION	9.803699923572126E-7	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999194258431531	WITHOUT_CLASSIFICATION	8.057415684693178E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999990445096082	WITHOUT_CLASSIFICATION	9.554903918940329E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999987765523994	WITHOUT_CLASSIFICATION	1.2234476005891526E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958307400846	WITHOUT_CLASSIFICATION	4.1692599154175775E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999855630953991	WITHOUT_CLASSIFICATION	1.4436904600783158E-5	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999997008307484	WITHOUT_CLASSIFICATION	2.9916925164097665E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999998559807147	WITHOUT_CLASSIFICATION	1.4401928522415765E-7	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999895023193283	WITHOUT_CLASSIFICATION	1.0497680671673003E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998048867712	WITHOUT_CLASSIFICATION	1.9511322881094216E-7	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999040659955674	WITHOUT_CLASSIFICATION	9.593400443257931E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999999704825825	WITHOUT_CLASSIFICATION	2.9517417503245663E-7	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999153728155	WITHOUT_CLASSIFICATION	8.462718446479253E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999153728155	WITHOUT_CLASSIFICATION	8.462718446479253E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997647385109	WITHOUT_CLASSIFICATION	2.352614889946986E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997647385109	WITHOUT_CLASSIFICATION	2.352614889946986E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999860115025897	WITHOUT_CLASSIFICATION	1.3988497410189003E-5	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958307400846	WITHOUT_CLASSIFICATION	4.1692599154175775E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999979508770066	WITHOUT_CLASSIFICATION	2.0491229933911732E-6	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999980641407146	WITHOUT_CLASSIFICATION	1.935859285349863E-6	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999420963481723	WITHOUT_CLASSIFICATION	5.790365182775634E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999420963481723	WITHOUT_CLASSIFICATION	5.790365182775634E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999931252797344	WITHOUT_CLASSIFICATION	6.8747202655408455E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999825128641678	WITHOUT_CLASSIFICATION	1.748713583215354E-5	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999995706811655	WITHOUT_CLASSIFICATION	4.293188345120652E-6	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999761871648983	WITHOUT_CLASSIFICATION	2.3812835101707873E-5	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9999822776476786	WITHOUT_CLASSIFICATION	1.7722352321526948E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999998818770239	WITHOUT_CLASSIFICATION	1.1812297602577058E-7	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999452637024613	WITHOUT_CLASSIFICATION	5.473629753872655E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999616564656073	WITHOUT_CLASSIFICATION	3.834353439260725E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999455997573723	WITHOUT_CLASSIFICATION	5.440024262767103E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999944586261327	WITHOUT_CLASSIFICATION	5.541373867325391E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999687422469516	WITHOUT_CLASSIFICATION	3.1257753048237085E-5	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999162858137418	WITHOUT_CLASSIFICATION	8.371418625814609E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999791256771448	WITHOUT_CLASSIFICATION	2.087432285528552E-5	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999091357457377	WITHOUT_CLASSIFICATION	9.086425426228374E-5	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999709320209764	WITHOUT_CLASSIFICATION	2.9067979023610423E-5	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999999647045982	WITHOUT_CLASSIFICATION	3.5295401793477366E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922397312484	WITHOUT_CLASSIFICATION	7.76026875156171E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999976294682957	WITHOUT_CLASSIFICATION	2.370531704260158E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999963500786575	WITHOUT_CLASSIFICATION	3.649921342460124E-6	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999991004365956	WITHOUT_CLASSIFICATION	8.995634044984171E-7	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999966333769957	WITHOUT_CLASSIFICATION	3.36662300421478E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999863063160626	WITHOUT_CLASSIFICATION	1.369368393744902E-5	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999779378145951	WITHOUT_CLASSIFICATION	2.206218540483223E-5	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999998160556234	WITHOUT_CLASSIFICATION	1.8394437659849462E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996589285136719	WITHOUT_CLASSIFICATION	3.4107148632803907E-4	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999948124853	WITHOUT_CLASSIFICATION	5.1875146858455484E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998768587641966	WITHOUT_CLASSIFICATION	1.2314123580333053E-4	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999700543122716	WITHOUT_CLASSIFICATION	2.994568772839941E-5	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999989171750636	WITHOUT_CLASSIFICATION	1.0828249362951123E-6	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879325149139	WITHOUT_CLASSIFICATION	1.2067485086097653E-5	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920307265567	WITHOUT_CLASSIFICATION	7.969273443195686E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998507070595765	WITHOUT_CLASSIFICATION	1.4929294042342512E-4	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9998507070595765	WITHOUT_CLASSIFICATION	1.4929294042342512E-4	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999992132859545	WITHOUT_CLASSIFICATION	7.867140453994108E-7	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999634225615895	WITHOUT_CLASSIFICATION	3.657743841046515E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999832038470197	WITHOUT_CLASSIFICATION	1.6796152980382976E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999832038470197	WITHOUT_CLASSIFICATION	1.6796152980382976E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999998255574767	WITHOUT_CLASSIFICATION	1.744425234164089E-7	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999878329559572	WITHOUT_CLASSIFICATION	1.2167044042957155E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999393077942503	WITHOUT_CLASSIFICATION	6.06922057497005E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999839677805177	WITHOUT_CLASSIFICATION	1.6032219482320656E-5	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999844178429891	WITHOUT_CLASSIFICATION	1.5582157010897123E-4	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999636349980044	WITHOUT_CLASSIFICATION	3.636500199563114E-5	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999560233546934	WITHOUT_CLASSIFICATION	4.3976645306730896E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999969577197211	WITHOUT_CLASSIFICATION	3.0422802788778056E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999969577197211	WITHOUT_CLASSIFICATION	3.0422802788778056E-6	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999997746695181	WITHOUT_CLASSIFICATION	2.253304819101835E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999845154968576	WITHOUT_CLASSIFICATION	1.548450314233344E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999845154968576	WITHOUT_CLASSIFICATION	1.548450314233344E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999964333423679	WITHOUT_CLASSIFICATION	3.566657632278377E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999991901876743	WITHOUT_CLASSIFICATION	8.098123256970281E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9917878591881508	WITHOUT_CLASSIFICATION	0.008212140811849096	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999811328570587	WITHOUT_CLASSIFICATION	1.8867142941292196E-5	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999854492169089	WITHOUT_CLASSIFICATION	1.4550783091182663E-5	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999977151460964	WITHOUT_CLASSIFICATION	2.2848539036003042E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999997596958423	WITHOUT_CLASSIFICATION	2.4030415766894273E-7	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999941783860767	WITHOUT_CLASSIFICATION	5.82161392325416E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999970959274702	WITHOUT_CLASSIFICATION	2.9040725297710855E-6	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9994378644751186	WITHOUT_CLASSIFICATION	5.621355248813012E-4	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998622235637	WITHOUT_CLASSIFICATION	1.3777643626593295E-7	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999994399994165	WITHOUT_CLASSIFICATION	5.600005834877954E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999344343474809	WITHOUT_CLASSIFICATION	6.556565251915797E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999344343474809	WITHOUT_CLASSIFICATION	6.556565251915797E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999344343474809	WITHOUT_CLASSIFICATION	6.556565251915797E-5	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999344343474809	WITHOUT_CLASSIFICATION	6.556565251915797E-5	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999961610236079	WITHOUT_CLASSIFICATION	3.838976392128907E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999690809451491	WITHOUT_CLASSIFICATION	3.091905485085242E-5	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999122280465685	WITHOUT_CLASSIFICATION	8.77719534314655E-5	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9998757417898162	WITHOUT_CLASSIFICATION	1.2425821018387497E-4	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999989313961295	WITHOUT_CLASSIFICATION	1.068603870504291E-5	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999890493956451	WITHOUT_CLASSIFICATION	1.0950604354952064E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999809105305264	WITHOUT_CLASSIFICATION	1.9089469473599602E-4	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9998227778071171	WITHOUT_CLASSIFICATION	1.7722219288296068E-4	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998129297984	WITHOUT_CLASSIFICATION	1.8707020167902109E-7	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999971632043941	WITHOUT_CLASSIFICATION	2.8367956058870723E-6	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999970672657862	WITHOUT_CLASSIFICATION	2.932734213878405E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511719257456	WITHOUT_CLASSIFICATION	4.8828074254421304E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999939864160308	WITHOUT_CLASSIFICATION	6.013583969238914E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999101513287	WITHOUT_CLASSIFICATION	8.984867130873218E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999926821669123	WITHOUT_CLASSIFICATION	7.317833087725756E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511719257456	WITHOUT_CLASSIFICATION	4.8828074254421304E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999887729947586	WITHOUT_CLASSIFICATION	1.1227005241380895E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999980081661881	WITHOUT_CLASSIFICATION	1.991833811950271E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999994163377944	WITHOUT_CLASSIFICATION	5.836622056002789E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999754227837094	WITHOUT_CLASSIFICATION	2.4577216290584908E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999678127326227	WITHOUT_CLASSIFICATION	3.21872673773269E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999784691960533	WITHOUT_CLASSIFICATION	2.15308039466908E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999984987861148	WITHOUT_CLASSIFICATION	1.5012138851901009E-6	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999899049380606	WITHOUT_CLASSIFICATION	1.0095061939254113E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996082684185	WITHOUT_CLASSIFICATION	3.917315815000266E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999999434343867	WITHOUT_CLASSIFICATION	5.656561329851816E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967277915658	WITHOUT_CLASSIFICATION	3.2722084342135634E-6	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999826757228472	WITHOUT_CLASSIFICATION	1.7324277152883023E-5	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998863377673768	WITHOUT_CLASSIFICATION	1.1366223262322838E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999759118250106	WITHOUT_CLASSIFICATION	2.4088174989490733E-5	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998465696428	WITHOUT_CLASSIFICATION	1.5343035720660778E-6	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9997976866492603	WITHOUT_CLASSIFICATION	2.0231335073973348E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993381406693	WITHOUT_CLASSIFICATION	6.618593307267468E-7	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999693296810341	WITHOUT_CLASSIFICATION	3.067031896587667E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999890171521174	WITHOUT_CLASSIFICATION	1.0982847882477178E-5	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999693296810341	WITHOUT_CLASSIFICATION	3.067031896587667E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999871603898286	WITHOUT_CLASSIFICATION	1.283961017145521E-5	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999988721027762	WITHOUT_CLASSIFICATION	1.1278972238945253E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999969738543657	WITHOUT_CLASSIFICATION	3.0261456343194588E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998800442594432	WITHOUT_CLASSIFICATION	1.1995574055680175E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999993381406693	WITHOUT_CLASSIFICATION	6.618593307267468E-7	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999890171521174	WITHOUT_CLASSIFICATION	1.0982847882477178E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999871603898286	WITHOUT_CLASSIFICATION	1.283961017145521E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999970076888227	WITHOUT_CLASSIFICATION	2.992311177326005E-6	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999010956268385	WITHOUT_CLASSIFICATION	9.890437316157585E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9997576629901964	WITHOUT_CLASSIFICATION	2.4233700980354984E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999027062197889	WITHOUT_CLASSIFICATION	9.729378021102006E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999998337112943	WITHOUT_CLASSIFICATION	1.6628870570494544E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.99999873000087	WITHOUT_CLASSIFICATION	1.269999129937609E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922397312484	WITHOUT_CLASSIFICATION	7.76026875156171E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999988721027762	WITHOUT_CLASSIFICATION	1.1278972238945253E-6	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999996762077672	WITHOUT_CLASSIFICATION	3.2379223272741973E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999715956913421	WITHOUT_CLASSIFICATION	2.8404308657879798E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999984609743433	WITHOUT_CLASSIFICATION	1.5390256567146795E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922397312484	WITHOUT_CLASSIFICATION	7.76026875156171E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999872396816848	WITHOUT_CLASSIFICATION	1.276031831513783E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922397312484	WITHOUT_CLASSIFICATION	7.76026875156171E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999996806790581	WITHOUT_CLASSIFICATION	3.193209419254339E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999856610431606	WITHOUT_CLASSIFICATION	1.4338956839391142E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9974964751303793	WITHOUT_CLASSIFICATION	0.0025035248696207756	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999927686819391	WITHOUT_CLASSIFICATION	7.231318061026805E-6	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999864181123771	WITHOUT_CLASSIFICATION	1.358188762291064E-5	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999942366318681	WITHOUT_CLASSIFICATION	5.763368131888432E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999994124094885	WITHOUT_CLASSIFICATION	5.875905114441853E-7	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998677318053887	WITHOUT_CLASSIFICATION	1.3226819461126477E-4	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999199957779679	WITHOUT_CLASSIFICATION	8.000422203220893E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9998459289773398	WITHOUT_CLASSIFICATION	1.540710226603088E-4	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996218298281653	WITHOUT_CLASSIFICATION	3.7817017183471865E-4	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999998995591715	WITHOUT_CLASSIFICATION	1.0044082856302961E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9917878591881508	WITHOUT_CLASSIFICATION	0.008212140811849096	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9997460100356992	WITHOUT_CLASSIFICATION	2.5398996430080954E-4	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999738249605439	WITHOUT_CLASSIFICATION	2.6175039456097324E-5	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999938661778316	WITHOUT_CLASSIFICATION	6.133822168428334E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9994137497276014	WITHOUT_CLASSIFICATION	5.862502723985477E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999969957461798	WITHOUT_CLASSIFICATION	3.0042538200717576E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999980723826539	WITHOUT_CLASSIFICATION	1.927617346135834E-6	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999981507824977	WITHOUT_CLASSIFICATION	1.8492175023193168E-6	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9999576676055997	WITHOUT_CLASSIFICATION	4.233239440028621E-5	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999992239663656	WITHOUT_CLASSIFICATION	7.760336343973508E-7	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999935063291645	WITHOUT_CLASSIFICATION	6.493670835525628E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9917919611504705	WITHOUT_CLASSIFICATION	0.008208038849529482	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9983417054501303	WITHOUT_CLASSIFICATION	0.0016582945498695724	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9977743655353564	WITHOUT_CLASSIFICATION	0.0022256344646437347	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.999971873583984	WITHOUT_CLASSIFICATION	2.812641601612249E-5	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999932411246537	WITHOUT_CLASSIFICATION	6.758875346207553E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9997710596446591	WITHOUT_CLASSIFICATION	2.2894035534089317E-4	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999939899817315	WITHOUT_CLASSIFICATION	6.010018268569024E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999956805018306	WITHOUT_CLASSIFICATION	4.319498169384517E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999886537698656	WITHOUT_CLASSIFICATION	1.134623013449208E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9998026483132023	WITHOUT_CLASSIFICATION	1.9735168679766715E-4	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999996386733257	WITHOUT_CLASSIFICATION	3.613266743031351E-6	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9941606985847363	WITHOUT_CLASSIFICATION	0.005839301415263593	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999847728858348	WITHOUT_CLASSIFICATION	1.5227114165356942E-5	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999965960980449	WITHOUT_CLASSIFICATION	3.403901955119252E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9997133388545225	WITHOUT_CLASSIFICATION	2.8666114547743756E-4	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999969344775356	WITHOUT_CLASSIFICATION	3.0655224644114995E-6	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999995637599153	WITHOUT_CLASSIFICATION	4.3624008472973824E-7	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9923332026561762	WITHOUT_CLASSIFICATION	0.0076667973438238005	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999977892163059	WITHOUT_CLASSIFICATION	2.2107836941047403E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999960659342984	WITHOUT_CLASSIFICATION	3.934065701693408E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999119307329003	WITHOUT_CLASSIFICATION	8.806926709975974E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999119307329003	WITHOUT_CLASSIFICATION	8.806926709975974E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999996564366703	WITHOUT_CLASSIFICATION	3.435633297716066E-7	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998677318053887	WITHOUT_CLASSIFICATION	1.3226819461126477E-4	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.999987721991322	WITHOUT_CLASSIFICATION	1.2278008678010643E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999919209868743	WITHOUT_CLASSIFICATION	8.07901312560633E-6	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999872832180604	WITHOUT_CLASSIFICATION	1.2716781939638234E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999938417109158	WITHOUT_CLASSIFICATION	6.158289084337418E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998910365489858	WITHOUT_CLASSIFICATION	1.0896345101422753E-4	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9993681702539466	WITHOUT_CLASSIFICATION	6.31829746053403E-4	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999994240389977	WITHOUT_CLASSIFICATION	5.759610022928134E-7	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999956363423985	WITHOUT_CLASSIFICATION	4.363657601433788E-6	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999889135570094	WITHOUT_CLASSIFICATION	1.1086442990632272E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999857991660289	WITHOUT_CLASSIFICATION	1.4200833971027683E-5	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999852046117454	WITHOUT_CLASSIFICATION	1.4795388254557095E-5	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999798746966335	WITHOUT_CLASSIFICATION	2.012530336651476E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999939389526796	WITHOUT_CLASSIFICATION	6.0610473203444085E-6	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999994747778124	WITHOUT_CLASSIFICATION	5.252221876603747E-7	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999747402253132	WITHOUT_CLASSIFICATION	2.525977468681285E-5	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993807912579	WITHOUT_CLASSIFICATION	6.192087421889763E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999995931011251	WITHOUT_CLASSIFICATION	4.0689887491020966E-7	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999990669222875	WITHOUT_CLASSIFICATION	9.330777126187639E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999982660058706	WITHOUT_CLASSIFICATION	1.7339941293275515E-6	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999990061831785	WITHOUT_CLASSIFICATION	9.938168214204062E-7	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999996510696629	WITHOUT_CLASSIFICATION	3.4893033710427466E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999756543227981	WITHOUT_CLASSIFICATION	2.4345677201835032E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9923332026561762	WITHOUT_CLASSIFICATION	0.0076667973438238005	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999983713666765	WITHOUT_CLASSIFICATION	1.6286333236392403E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999878685242283	WITHOUT_CLASSIFICATION	1.2131475771829654E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999883351986649	WITHOUT_CLASSIFICATION	1.1664801335109539E-5	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999912245841418	WITHOUT_CLASSIFICATION	8.775415858150919E-6	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999962236630033	WITHOUT_CLASSIFICATION	3.7763369967028227E-6	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999939929941515	WITHOUT_CLASSIFICATION	6.007005848506692E-5	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999267398397809	WITHOUT_CLASSIFICATION	7.326016021917018E-5	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999989088898834	WITHOUT_CLASSIFICATION	1.0911101165998246E-5	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999975558407153	WITHOUT_CLASSIFICATION	2.444159284634146E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999855767127336	WITHOUT_CLASSIFICATION	1.4423287266395518E-5	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999971629203693	WITHOUT_CLASSIFICATION	2.8370796305392694E-6	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999998297497084	WITHOUT_CLASSIFICATION	1.7025029159579611E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998140997924098	WITHOUT_CLASSIFICATION	1.859002075903512E-4	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999537415382472	WITHOUT_CLASSIFICATION	4.6258461752841336E-5	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999995016484063	WITHOUT_CLASSIFICATION	4.983515936519451E-7	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999995016484063	WITHOUT_CLASSIFICATION	4.983515936519451E-7	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999740860880755	WITHOUT_CLASSIFICATION	2.5913911924516438E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999757695297588	WITHOUT_CLASSIFICATION	2.4230470241285747E-5	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997200430187069	WITHOUT_CLASSIFICATION	2.799569812931343E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997200430187069	WITHOUT_CLASSIFICATION	2.799569812931343E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999939602844433	WITHOUT_CLASSIFICATION	6.039715556676313E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996864562948707	WITHOUT_CLASSIFICATION	3.135437051293162E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999984748219777	WITHOUT_CLASSIFICATION	1.525178022289428E-6	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999891239286971	WITHOUT_CLASSIFICATION	1.0876071302959584E-5	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999789465773512	WITHOUT_CLASSIFICATION	2.1053422648831237E-5	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994756121573269	WITHOUT_CLASSIFICATION	5.243878426729785E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977990106299	WITHOUT_CLASSIFICATION	2.2009893701068036E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999977990106299	WITHOUT_CLASSIFICATION	2.2009893701068036E-6	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994680837317415	WITHOUT_CLASSIFICATION	5.3191626825844E-4	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999957231462949	WITHOUT_CLASSIFICATION	4.276853705108505E-6	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999253945738776	WITHOUT_CLASSIFICATION	7.460542612240561E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999849093465232	WITHOUT_CLASSIFICATION	1.5090653476884334E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999849093465232	WITHOUT_CLASSIFICATION	1.5090653476884334E-5	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999892104645314	WITHOUT_CLASSIFICATION	1.0789535468520867E-5	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999940111224296	WITHOUT_CLASSIFICATION	5.988877570493777E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999991297698781	WITHOUT_CLASSIFICATION	8.702301218726381E-7	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999858308934283	WITHOUT_CLASSIFICATION	1.4169106571709224E-5	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999984125322297	WITHOUT_CLASSIFICATION	1.5874677703059864E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999983389990511	WITHOUT_CLASSIFICATION	1.6610009489317861E-6	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999997027364943	WITHOUT_CLASSIFICATION	2.972635056985837E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999934862013539	WITHOUT_CLASSIFICATION	6.513798646110463E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999945669677894	WITHOUT_CLASSIFICATION	5.433032210580228E-6	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999243091386206	WITHOUT_CLASSIFICATION	7.569086137939158E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999791947408441	WITHOUT_CLASSIFICATION	2.080525915591392E-5	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999869038826897	WITHOUT_CLASSIFICATION	1.3096117310185567E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999900651333162	WITHOUT_CLASSIFICATION	9.93486668380994E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999988084422536	WITHOUT_CLASSIFICATION	1.191557746312114E-6	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999883170926965	WITHOUT_CLASSIFICATION	1.168290730358917E-5	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998933035552313	WITHOUT_CLASSIFICATION	1.0669644476867595E-4	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999980571502275	WITHOUT_CLASSIFICATION	1.942849772514303E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999743305532452	WITHOUT_CLASSIFICATION	2.56694467546519E-5	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999983640664722	WITHOUT_CLASSIFICATION	1.635933527820289E-6	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999950879443446	WITHOUT_CLASSIFICATION	4.912055655439779E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999986441252117	WITHOUT_CLASSIFICATION	1.3558747884197864E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999091260595238	WITHOUT_CLASSIFICATION	9.087394047633946E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9998871982040237	WITHOUT_CLASSIFICATION	1.1280179597632921E-4	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999803991335942	WITHOUT_CLASSIFICATION	1.9600866405830325E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9996792465844023	WITHOUT_CLASSIFICATION	3.207534155977286E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999915895806182	WITHOUT_CLASSIFICATION	8.41041938179078E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.999996604674867	WITHOUT_CLASSIFICATION	3.395325133050251E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9998720803051097	WITHOUT_CLASSIFICATION	1.2791969489039565E-4	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999986466231537	WITHOUT_CLASSIFICATION	1.3533768461781396E-6	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999992003883625	WITHOUT_CLASSIFICATION	7.996116374098954E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9998272712453267	WITHOUT_CLASSIFICATION	1.7272875467341307E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998610991537	WITHOUT_CLASSIFICATION	1.3890084631558878E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999646973604023	WITHOUT_CLASSIFICATION	3.5302639597771896E-5	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999759485892862	WITHOUT_CLASSIFICATION	2.405141071381729E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999975113105223	WITHOUT_CLASSIFICATION	2.488689477799849E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999580464731399	WITHOUT_CLASSIFICATION	4.195352686018474E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999110424832388	WITHOUT_CLASSIFICATION	8.895751676111614E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999968011690158	WITHOUT_CLASSIFICATION	3.1988309842304602E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999951489157382	WITHOUT_CLASSIFICATION	4.851084261822864E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999994815481852	WITHOUT_CLASSIFICATION	5.1845181486246E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999986439113054	WITHOUT_CLASSIFICATION	1.3560886945921274E-6	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999962036953306	WITHOUT_CLASSIFICATION	3.796304669402591E-5	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999904197315429	WITHOUT_CLASSIFICATION	9.580268457158762E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999978265044831	WITHOUT_CLASSIFICATION	2.173495516863279E-6	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999968777680089	WITHOUT_CLASSIFICATION	3.1222319911005793E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999864826040363	WITHOUT_CLASSIFICATION	1.3517395963716813E-5	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999628017697408	WITHOUT_CLASSIFICATION	3.7198230259229623E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999756101384601	WITHOUT_CLASSIFICATION	2.438986153996312E-5	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999994104776203	WITHOUT_CLASSIFICATION	5.895223798078627E-7	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999987345609168	WITHOUT_CLASSIFICATION	1.265439083083333E-6	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999977798654837	WITHOUT_CLASSIFICATION	2.2201345163544032E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999959575877863	WITHOUT_CLASSIFICATION	4.042412213724825E-6	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999954370104288	WITHOUT_CLASSIFICATION	4.562989571206322E-5	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999996883535655	WITHOUT_CLASSIFICATION	3.116464345908621E-7	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999140687159211	WITHOUT_CLASSIFICATION	8.593128407879399E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999980572572824	WITHOUT_CLASSIFICATION	1.94274271761524E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999795920937544	WITHOUT_CLASSIFICATION	2.0407906245596432E-5	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999970583560965	WITHOUT_CLASSIFICATION	2.9416439036070868E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999982464252605	WITHOUT_CLASSIFICATION	1.7535747394842127E-6	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999947983395968	WITHOUT_CLASSIFICATION	5.201660403188001E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998530384949984	WITHOUT_CLASSIFICATION	1.4696150500164668E-4	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9998530384949984	WITHOUT_CLASSIFICATION	1.4696150500164668E-4	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999995019050657	WITHOUT_CLASSIFICATION	4.980949343424516E-7	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999992706162633	WITHOUT_CLASSIFICATION	7.293837367282765E-7	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999513651007	WITHOUT_CLASSIFICATION	4.863489936943597E-8	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999996999642933	WITHOUT_CLASSIFICATION	3.0003570670906176E-6	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999499437923433	WITHOUT_CLASSIFICATION	5.00562076566838E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999959090187317	WITHOUT_CLASSIFICATION	4.0909812682321325E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999972014485549	WITHOUT_CLASSIFICATION	2.7985514451319526E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999992807357012	WITHOUT_CLASSIFICATION	7.192642987677136E-7	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999715215854706	WITHOUT_CLASSIFICATION	2.8478414529364374E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999975012523087	WITHOUT_CLASSIFICATION	2.4987476913199013E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999973693439098	WITHOUT_CLASSIFICATION	2.6306560901780487E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998707460386057	WITHOUT_CLASSIFICATION	1.292539613943856E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999989870287727	WITHOUT_CLASSIFICATION	1.0129712273340999E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999992107138125	WITHOUT_CLASSIFICATION	7.892861875604742E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999503111452	WITHOUT_CLASSIFICATION	4.968885479785652E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999503111452	WITHOUT_CLASSIFICATION	4.968885479785652E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999979333639013	WITHOUT_CLASSIFICATION	2.0666360985724152E-6	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999916708468221	WITHOUT_CLASSIFICATION	8.329153178063555E-6	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999957911993965	WITHOUT_CLASSIFICATION	4.208800603496724E-6	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999945143730866	WITHOUT_CLASSIFICATION	5.485626913341315E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999954267655945	WITHOUT_CLASSIFICATION	4.573234405492623E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898042949389	WITHOUT_CLASSIFICATION	1.019570506116617E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999522177979546	WITHOUT_CLASSIFICATION	4.778220204532048E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999983812171261	WITHOUT_CLASSIFICATION	1.6187828737907329E-6	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999997888201247	WITHOUT_CLASSIFICATION	2.1117987530433244E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999991804596288	WITHOUT_CLASSIFICATION	8.195403710853341E-7	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999990935412141	WITHOUT_CLASSIFICATION	9.064587859128845E-7	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999993988390055	WITHOUT_CLASSIFICATION	6.011609945386806E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999028674309	WITHOUT_CLASSIFICATION	9.713256912534589E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999988733348878	WITHOUT_CLASSIFICATION	1.1266651122671574E-6	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999989156788859	WITHOUT_CLASSIFICATION	1.0843211141202794E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997131998732943	WITHOUT_CLASSIFICATION	2.8680012670570976E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999994694234621	WITHOUT_CLASSIFICATION	5.305765379077231E-7	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999944704468695	WITHOUT_CLASSIFICATION	5.529553130533491E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999994662702075	WITHOUT_CLASSIFICATION	5.337297924224608E-7	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999768601422	WITHOUT_CLASSIFICATION	2.3139857855916405E-8	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999955057692858	WITHOUT_CLASSIFICATION	4.494230714281726E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999266632833	WITHOUT_CLASSIFICATION	7.333671667570049E-8	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999987851792095	WITHOUT_CLASSIFICATION	1.214820790541535E-6	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999374658903671	WITHOUT_CLASSIFICATION	6.253410963288444E-5	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9969436352019245	WITHOUT_CLASSIFICATION	0.0030563647980753855	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999958975434313	WITHOUT_CLASSIFICATION	4.102456568652156E-6	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999996180932744	WITHOUT_CLASSIFICATION	3.81906725621911E-7	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999960320307529	WITHOUT_CLASSIFICATION	3.967969246982988E-6	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999989949785293	WITHOUT_CLASSIFICATION	1.0050214707061069E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999939061893138	WITHOUT_CLASSIFICATION	6.093810686255144E-6	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999341112787486	WITHOUT_CLASSIFICATION	6.588872125141568E-5	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999486788280365	WITHOUT_CLASSIFICATION	5.1321171963523796E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999993516051876	WITHOUT_CLASSIFICATION	6.483948123811769E-7	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999874177807375	WITHOUT_CLASSIFICATION	1.2582219262469498E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9998120096253851	WITHOUT_CLASSIFICATION	1.8799037461485955E-4	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999998975994069	WITHOUT_CLASSIFICATION	1.0240059310327112E-6	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999331161627725	WITHOUT_CLASSIFICATION	6.688383722763014E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999942749696709	WITHOUT_CLASSIFICATION	5.725030329128857E-6	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999960223077704	WITHOUT_CLASSIFICATION	3.9776922295414045E-6	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999999726122528	WITHOUT_CLASSIFICATION	2.7387747077993367E-8	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999991205141567	WITHOUT_CLASSIFICATION	8.794858433253278E-7	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999991205141567	WITHOUT_CLASSIFICATION	8.794858433253278E-7	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999988253986093	WITHOUT_CLASSIFICATION	1.1746013907349338E-6	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999253209496	WITHOUT_CLASSIFICATION	7.467905047221972E-8	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999732617032809	WITHOUT_CLASSIFICATION	2.673829671907098E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999921863468169	WITHOUT_CLASSIFICATION	7.813653183152568E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999067929887748	WITHOUT_CLASSIFICATION	9.320701122509684E-5	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998937614088876	WITHOUT_CLASSIFICATION	1.0623859111242883E-4	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999935462515057	WITHOUT_CLASSIFICATION	6.453748494272453E-6	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999993265146309	WITHOUT_CLASSIFICATION	6.7348536910635465E-6	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999983137074842	WITHOUT_CLASSIFICATION	1.686292515813906E-6	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970634026307	WITHOUT_CLASSIFICATION	2.936597369215613E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972117517194	WITHOUT_CLASSIFICATION	2.788248280592389E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999162680579191	WITHOUT_CLASSIFICATION	8.373194208085686E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9974225723558926	WITHOUT_CLASSIFICATION	0.0025774276441073375	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999997435318307	WITHOUT_CLASSIFICATION	2.5646816931452574E-6	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999993144441773	WITHOUT_CLASSIFICATION	6.855558226661006E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999991737296282	WITHOUT_CLASSIFICATION	8.262703717203007E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9994692349113631	WITHOUT_CLASSIFICATION	5.307650886369459E-4	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998560543514	WITHOUT_CLASSIFICATION	1.4394564868046083E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999884019004183	WITHOUT_CLASSIFICATION	1.1598099581798575E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999999946431701	WITHOUT_CLASSIFICATION	5.356829785366748E-9	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999952823449392	WITHOUT_CLASSIFICATION	4.7176550608219885E-6	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999963665704327	WITHOUT_CLASSIFICATION	3.6334295673434405E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999991366540808	WITHOUT_CLASSIFICATION	8.633459192355056E-7	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9999728214819938	WITHOUT_CLASSIFICATION	2.7178518006220373E-5	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999813794506425	WITHOUT_CLASSIFICATION	1.8620549357549215E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999598926334519	WITHOUT_CLASSIFICATION	4.010736654812359E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999978750471193	WITHOUT_CLASSIFICATION	2.124952880699913E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999981894525855	WITHOUT_CLASSIFICATION	1.8105474145626926E-6	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999998694500248	WITHOUT_CLASSIFICATION	1.3054997514728432E-7	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999950676744769	WITHOUT_CLASSIFICATION	4.9323255231258705E-6	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999993847198938	WITHOUT_CLASSIFICATION	6.152801062017352E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999977572484631	WITHOUT_CLASSIFICATION	2.2427515369070943E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999993528602974	WITHOUT_CLASSIFICATION	6.471397025876337E-7	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999991789706509	WITHOUT_CLASSIFICATION	8.210293490090732E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999997250682361	WITHOUT_CLASSIFICATION	2.7493176391221587E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999429591522535	WITHOUT_CLASSIFICATION	5.7040847746575666E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999932640416236	WITHOUT_CLASSIFICATION	6.735958376351339E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999992566112953	WITHOUT_CLASSIFICATION	7.433887047435155E-7	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999421041451	WITHOUT_CLASSIFICATION	5.789585490654493E-8	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999440739003604	WITHOUT_CLASSIFICATION	5.592609963968872E-5	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999984637689294	WITHOUT_CLASSIFICATION	1.5362310705967955E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999922302384486	WITHOUT_CLASSIFICATION	7.769761551442582E-6	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999994702121301	WITHOUT_CLASSIFICATION	5.297878698582086E-7	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999998808882153	WITHOUT_CLASSIFICATION	1.1911178470017065E-7	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999993176581592	WITHOUT_CLASSIFICATION	6.823418408680808E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999971296495388	WITHOUT_CLASSIFICATION	2.8703504610963846E-6	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999992476765336	WITHOUT_CLASSIFICATION	7.523234664520039E-7	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999989870287727	WITHOUT_CLASSIFICATION	1.0129712273340999E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999985038678865	WITHOUT_CLASSIFICATION	1.496132113490423E-5	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999449084721	WITHOUT_CLASSIFICATION	5.509152789923226E-7	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999837242448246	WITHOUT_CLASSIFICATION	1.627575517540345E-4	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999820994752585	WITHOUT_CLASSIFICATION	1.7900524741457587E-5	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999992025226617	WITHOUT_CLASSIFICATION	7.974773381976117E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9998872751882609	WITHOUT_CLASSIFICATION	1.1272481173913022E-4	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999918033119685	WITHOUT_CLASSIFICATION	8.19668803150574E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999999893268698	WITHOUT_CLASSIFICATION	1.0673130207217997E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999753585791054	WITHOUT_CLASSIFICATION	2.4641420894741308E-5	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998129780974	WITHOUT_CLASSIFICATION	1.8702190253814638E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998830657746	WITHOUT_CLASSIFICATION	1.1693422545305283E-7	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999938638093729	WITHOUT_CLASSIFICATION	6.136190627142742E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999979888617958	WITHOUT_CLASSIFICATION	2.0111382040891763E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999551994883	WITHOUT_CLASSIFICATION	4.4800511716426705E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975747893979	WITHOUT_CLASSIFICATION	2.4252106020451793E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997795044006206	WITHOUT_CLASSIFICATION	2.204955993793497E-4	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999950432714636	WITHOUT_CLASSIFICATION	4.956728536403607E-5	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999998753354047	WITHOUT_CLASSIFICATION	1.2466459538010487E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999987893802482	WITHOUT_CLASSIFICATION	1.210619751760023E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975747893979	WITHOUT_CLASSIFICATION	2.4252106020451793E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999935637614238	WITHOUT_CLASSIFICATION	6.436238576223662E-6	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999903173583844	WITHOUT_CLASSIFICATION	9.682641615595362E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999531826762	WITHOUT_CLASSIFICATION	4.681732368322839E-8	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999896470917238	WITHOUT_CLASSIFICATION	1.0352908276272687E-5	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999421897552084	WITHOUT_CLASSIFICATION	5.7810244791526666E-5	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999996118203552	WITHOUT_CLASSIFICATION	3.881796447904509E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999985565112174	WITHOUT_CLASSIFICATION	1.443488782722514E-6	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999999222414432	WITHOUT_CLASSIFICATION	7.77585567208024E-8	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999973566277213	WITHOUT_CLASSIFICATION	2.6433722787884746E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999368883794	WITHOUT_CLASSIFICATION	6.31116205899862E-8	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999996048076229	WITHOUT_CLASSIFICATION	3.951923771034601E-6	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9998607507566628	WITHOUT_CLASSIFICATION	1.3924924333719662E-4	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999976443283417	WITHOUT_CLASSIFICATION	2.3556716583312746E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999995133465521	WITHOUT_CLASSIFICATION	4.866534479319551E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999087566385793	WITHOUT_CLASSIFICATION	9.124336142077629E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999756543227981	WITHOUT_CLASSIFICATION	2.4345677201835032E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998367160939	WITHOUT_CLASSIFICATION	1.632839060708625E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999932159472447	WITHOUT_CLASSIFICATION	6.784052755286649E-6	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999989431068947	WITHOUT_CLASSIFICATION	1.0568931052495616E-6	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998727854075954	WITHOUT_CLASSIFICATION	1.2721459240452429E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999665086117	WITHOUT_CLASSIFICATION	3.3491388359938336E-8	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999845733048408	WITHOUT_CLASSIFICATION	1.5426695159211713E-5	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999991657898505	WITHOUT_CLASSIFICATION	8.342101495175944E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999939999074	WITHOUT_CLASSIFICATION	6.0000926207880585E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999991322857507	WITHOUT_CLASSIFICATION	8.67714249307473E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999978675154789	WITHOUT_CLASSIFICATION	2.132484521131676E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9998569258185582	WITHOUT_CLASSIFICATION	1.4307418144176887E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999996412031609	WITHOUT_CLASSIFICATION	3.587968391565399E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999996203643754	WITHOUT_CLASSIFICATION	3.796356245552278E-7	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999987470167196	WITHOUT_CLASSIFICATION	1.2529832804083019E-6	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.999992311614253	WITHOUT_CLASSIFICATION	7.688385747108738E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999947892074691	WITHOUT_CLASSIFICATION	5.210792530883134E-6	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998930881476242	WITHOUT_CLASSIFICATION	1.0691185237581276E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999906874453909	WITHOUT_CLASSIFICATION	9.31255460903623E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999609706523299	WITHOUT_CLASSIFICATION	3.9029347670004895E-5	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999567259104558	WITHOUT_CLASSIFICATION	4.327408954419973E-4	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997625935305136	WITHOUT_CLASSIFICATION	2.3740646948644818E-4	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999992888236569	WITHOUT_CLASSIFICATION	7.111763432149584E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999985195703777	WITHOUT_CLASSIFICATION	1.4804296222575507E-6	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999955282937394	WITHOUT_CLASSIFICATION	4.4717062605076905E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999992988284625	WITHOUT_CLASSIFICATION	7.011715375095907E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999992988284625	WITHOUT_CLASSIFICATION	7.011715375095907E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999759534474907	WITHOUT_CLASSIFICATION	2.404655250925124E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999997502186166	WITHOUT_CLASSIFICATION	2.4978138339206013E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994495602919	WITHOUT_CLASSIFICATION	5.504397081631757E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.9978163247693849	WITHOUT_CLASSIFICATION	0.00218367523061516	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999713587399058	WITHOUT_CLASSIFICATION	2.8641260094150196E-5	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999536710254486	WITHOUT_CLASSIFICATION	4.632897455131688E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999456119501428	WITHOUT_CLASSIFICATION	5.4388049857371685E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9996108975903056	WITHOUT_CLASSIFICATION	3.8910240969429704E-4	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999677869103247	WITHOUT_CLASSIFICATION	3.221308967536274E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999014110146	WITHOUT_CLASSIFICATION	9.858898537126798E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999993842145094	WITHOUT_CLASSIFICATION	6.157854905998972E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999976254521874	WITHOUT_CLASSIFICATION	2.3745478124715827E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999941351742475	WITHOUT_CLASSIFICATION	5.864825752554372E-6	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999344779007	WITHOUT_CLASSIFICATION	6.552209930381031E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590206089696	WITHOUT_CLASSIFICATION	4.097939103035819E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999590206089696	WITHOUT_CLASSIFICATION	4.097939103035819E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999955298060015	WITHOUT_CLASSIFICATION	4.470193998552008E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999414028361203	WITHOUT_CLASSIFICATION	5.8597163879544376E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999764259802741	WITHOUT_CLASSIFICATION	2.3574019725854252E-5	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999796314459563	WITHOUT_CLASSIFICATION	2.0368554043675256E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999880504145185	WITHOUT_CLASSIFICATION	1.194958548144393E-5	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997167701418	WITHOUT_CLASSIFICATION	2.8322985826742507E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048048874857	WITHOUT_CLASSIFICATION	9.519511251434621E-5	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997009819656	WITHOUT_CLASSIFICATION	2.9901803447105943E-7	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999476686788034	WITHOUT_CLASSIFICATION	5.2331321196710936E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999896994073353	WITHOUT_CLASSIFICATION	1.030059266465443E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.999840687133585	WITHOUT_CLASSIFICATION	1.5931286641510608E-4	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999368883794	WITHOUT_CLASSIFICATION	6.31116205899862E-8	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999965299511883	WITHOUT_CLASSIFICATION	3.470048811780558E-6	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9973140717014435	WITHOUT_CLASSIFICATION	0.0026859282985565104	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999998612303224	WITHOUT_CLASSIFICATION	1.387696776006085E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999364306394576	WITHOUT_CLASSIFICATION	6.356936054240614E-5	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999882557962648	WITHOUT_CLASSIFICATION	1.174420373522697E-5	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999817228533457	WITHOUT_CLASSIFICATION	1.827714665436107E-5	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.999976559980035	WITHOUT_CLASSIFICATION	2.344001996500781E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999464029156	WITHOUT_CLASSIFICATION	5.359708450252242E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999717550648445	WITHOUT_CLASSIFICATION	2.8244935155415557E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999964751139534	WITHOUT_CLASSIFICATION	3.524886046515474E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999964751139534	WITHOUT_CLASSIFICATION	3.524886046515474E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999511719257456	WITHOUT_CLASSIFICATION	4.8828074254421304E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999489975558	WITHOUT_CLASSIFICATION	5.1002444180175646E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999082751334629	WITHOUT_CLASSIFICATION	9.172486653709177E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999961961275691	WITHOUT_CLASSIFICATION	3.803872430976248E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999768645028104	WITHOUT_CLASSIFICATION	2.313549718954509E-5	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999999736828047	WITHOUT_CLASSIFICATION	2.6317195308048553E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999998465696428	WITHOUT_CLASSIFICATION	1.5343035720660778E-6	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999993567274209	WITHOUT_CLASSIFICATION	6.43272579039983E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999970076888227	WITHOUT_CLASSIFICATION	2.992311177326005E-6	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999597203670668	WITHOUT_CLASSIFICATION	4.027963293308269E-5	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922397312484	WITHOUT_CLASSIFICATION	7.76026875156171E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999963716345887	WITHOUT_CLASSIFICATION	3.628365411330326E-6	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999985041508419	WITHOUT_CLASSIFICATION	1.4958491581053529E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999994610856692	WITHOUT_CLASSIFICATION	5.389143308450308E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999991892773518	WITHOUT_CLASSIFICATION	8.107226481790388E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999951041862962	WITHOUT_CLASSIFICATION	4.8958137036981864E-6	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999998238695788	WITHOUT_CLASSIFICATION	1.7613042134243948E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999882708373252	WITHOUT_CLASSIFICATION	1.1729162674886491E-5	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999624666267314	WITHOUT_CLASSIFICATION	3.753337326863079E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999827821101802	WITHOUT_CLASSIFICATION	1.721788981984237E-5	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.999984384152649	WITHOUT_CLASSIFICATION	1.5615847350963344E-5	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999982751300724	WITHOUT_CLASSIFICATION	1.7248699274780991E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999991297698781	WITHOUT_CLASSIFICATION	8.702301218726381E-7	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999965686816733	WITHOUT_CLASSIFICATION	3.431318326698308E-5	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999125669834	WITHOUT_CLASSIFICATION	8.743301660496222E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999999125669834	WITHOUT_CLASSIFICATION	8.743301660496222E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999970278474788	WITHOUT_CLASSIFICATION	2.9721525212448994E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999998623583762	WITHOUT_CLASSIFICATION	1.376416238691091E-7	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999658654453	WITHOUT_CLASSIFICATION	3.413455471481623E-8	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999999994487589	WITHOUT_CLASSIFICATION	5.512411010634937E-9	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999965957984451	WITHOUT_CLASSIFICATION	3.4042015549290226E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999914783288211	WITHOUT_CLASSIFICATION	8.521671178935846E-6	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999984984426656	WITHOUT_CLASSIFICATION	1.5015573343342654E-6	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999957694505072	WITHOUT_CLASSIFICATION	4.230549492839853E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9999940523532589	WITHOUT_CLASSIFICATION	5.947646741085584E-6	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9999919141456491	WITHOUT_CLASSIFICATION	8.085854350795577E-6	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.9999515501435533	WITHOUT_CLASSIFICATION	4.844985644674906E-5	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9998271621578942	WITHOUT_CLASSIFICATION	1.728378421057573E-4	DEFECT
/*	DEFECT	0.9974349210564086	WITHOUT_CLASSIFICATION	0.002565078943591338	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.986282021361086	WITHOUT_CLASSIFICATION	0.013717978638913933	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9993865169598058	WITHOUT_CLASSIFICATION	6.134830401941345E-4	DEFECT
// TODO : should this be an error?	DEFECT	0.9785083194193773	DEFECT	0.02149168058062267	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9191725381754001	WITHOUT_CLASSIFICATION	0.0808274618245999	DEFECT
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.9931177971940226	WITHOUT_CLASSIFICATION	0.006882202805977341	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9833194329616588	WITHOUT_CLASSIFICATION	0.01668056703834129	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9833194329616588	WITHOUT_CLASSIFICATION	0.01668056703834129	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9997258512948959	WITHOUT_CLASSIFICATION	2.741487051040638E-4	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9996081768773152	WITHOUT_CLASSIFICATION	3.918231226847149E-4	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9978020314563649	WITHOUT_CLASSIFICATION	0.002197968543635058	DEFECT
// this call is side-effecty	DEFECT	0.9998575171744803	WITHOUT_CLASSIFICATION	1.4248282551960792E-4	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9998635004018065	WITHOUT_CLASSIFICATION	1.3649959819361622E-4	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.961984998736007	WITHOUT_CLASSIFICATION	0.03801500126399306	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.9999974787890479	WITHOUT_CLASSIFICATION	2.5212109520705917E-6	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9946083364562458	WITHOUT_CLASSIFICATION	0.005391663543754172	DEFECT
//TODO: is this completely correct?	DEFECT	0.5858002675625955	WITHOUT_CLASSIFICATION	0.4141997324374044	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999990407214162	WITHOUT_CLASSIFICATION	9.59278583736315E-7	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9999315046372174	WITHOUT_CLASSIFICATION	6.849536278263022E-5	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9975860320635838	WITHOUT_CLASSIFICATION	0.002413967936416223	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9982146466061167	WITHOUT_CLASSIFICATION	0.0017853533938832918	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.6683343181355413	WITHOUT_CLASSIFICATION	0.3316656818644588	DEFECT
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9912559581275521	WITHOUT_CLASSIFICATION	0.008744041872447894	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9999794159390673	WITHOUT_CLASSIFICATION	2.0584060932786863E-5	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.9918191042859743	WITHOUT_CLASSIFICATION	0.008180895714025775	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.9632401624476533	WITHOUT_CLASSIFICATION	0.03675983755234673	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9925671098967082	WITHOUT_CLASSIFICATION	0.007432890103291901	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.9833194329616588	WITHOUT_CLASSIFICATION	0.01668056703834129	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.8826919680368231	WITHOUT_CLASSIFICATION	0.1173080319631769	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9999840165267886	WITHOUT_CLASSIFICATION	1.5983473211372945E-5	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.9991848934418975	WITHOUT_CLASSIFICATION	8.151065581025057E-4	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9999978067992267	WITHOUT_CLASSIFICATION	2.193200773290456E-6	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9998867836384193	WITHOUT_CLASSIFICATION	1.1321636158069987E-4	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9999790480714341	WITHOUT_CLASSIFICATION	2.095192856587514E-5	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9999821109973487	WITHOUT_CLASSIFICATION	1.788900265131181E-5	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9998575381954534	WITHOUT_CLASSIFICATION	1.4246180454666386E-4	DEFECT
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9998630525571894	WITHOUT_CLASSIFICATION	1.3694744281060833E-4	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9996671861153131	WITHOUT_CLASSIFICATION	3.3281388468681046E-4	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999714174742588	WITHOUT_CLASSIFICATION	2.8582525741255152E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.9970329047275703	WITHOUT_CLASSIFICATION	0.0029670952724295875	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9998429480271652	WITHOUT_CLASSIFICATION	1.5705197283482432E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9998590995808367	WITHOUT_CLASSIFICATION	1.409004191632506E-4	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9943646258268436	WITHOUT_CLASSIFICATION	0.005635374173156341	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9997620100579505	WITHOUT_CLASSIFICATION	2.3798994204943014E-4	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9999026241642404	WITHOUT_CLASSIFICATION	9.737583575960937E-5	DEFECT
