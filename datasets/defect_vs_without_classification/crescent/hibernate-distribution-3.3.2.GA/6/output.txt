//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999960582383546	WITHOUT_CLASSIFICATION	3.9417616454299325E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999369117877529	WITHOUT_CLASSIFICATION	6.308821224715048E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999998942862828	WITHOUT_CLASSIFICATION	1.0571371720410732E-6	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999995848546437	WITHOUT_CLASSIFICATION	4.1514535630075673E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999951622850135	WITHOUT_CLASSIFICATION	4.837714986507508E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999951622850135	WITHOUT_CLASSIFICATION	4.837714986507508E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999992418972905	WITHOUT_CLASSIFICATION	7.58102709506971E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999990583667702	WITHOUT_CLASSIFICATION	9.416332297875603E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999993496744798	WITHOUT_CLASSIFICATION	6.503255201148685E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999902839403662	WITHOUT_CLASSIFICATION	9.7160596338547E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999903576713339	WITHOUT_CLASSIFICATION	9.642328666077074E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999903576713339	WITHOUT_CLASSIFICATION	9.642328666077074E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999985440487432	WITHOUT_CLASSIFICATION	1.4559512566835E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999985019639611	WITHOUT_CLASSIFICATION	1.49803603893442E-6	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999987539897094	WITHOUT_CLASSIFICATION	1.2460102905216165E-6	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999997251404233	WITHOUT_CLASSIFICATION	2.7485957666018707E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999987404289506	WITHOUT_CLASSIFICATION	1.2595710492965256E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999955022015814	WITHOUT_CLASSIFICATION	4.497798418614931E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999936256389966	WITHOUT_CLASSIFICATION	6.374361003461192E-6	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999942793382237	WITHOUT_CLASSIFICATION	5.720661776299478E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801884474634	WITHOUT_CLASSIFICATION	1.9811552536635383E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.996192926653789	WITHOUT_CLASSIFICATION	0.003807073346210988	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999994637537883	WITHOUT_CLASSIFICATION	5.362462117080439E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999972147329043	WITHOUT_CLASSIFICATION	2.7852670957370915E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995856961372	WITHOUT_CLASSIFICATION	4.1430386277846794E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999996545548932	WITHOUT_CLASSIFICATION	3.454451067867068E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999996545548932	WITHOUT_CLASSIFICATION	3.454451067867068E-6	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999980875081015	WITHOUT_CLASSIFICATION	1.9124918985217566E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999788567886788	WITHOUT_CLASSIFICATION	2.1143211321159513E-5	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997081076236	WITHOUT_CLASSIFICATION	2.918923762823488E-7	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999998857062052	WITHOUT_CLASSIFICATION	1.142937947902991E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999777726322	WITHOUT_CLASSIFICATION	2.2227367868144038E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5302946882829884	WITHOUT_CLASSIFICATION	0.46970531171701163	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5302946882829884	WITHOUT_CLASSIFICATION	0.46970531171701163	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999464003315	WITHOUT_CLASSIFICATION	5.359966850202528E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9994543980955464	WITHOUT_CLASSIFICATION	5.456019044537057E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999995522941402	WITHOUT_CLASSIFICATION	4.47705859826448E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999837448379437	WITHOUT_CLASSIFICATION	1.6255162056321903E-5	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999948367846767	WITHOUT_CLASSIFICATION	5.1632153233083324E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983637948465	WITHOUT_CLASSIFICATION	1.636205153474608E-6	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973465367236	WITHOUT_CLASSIFICATION	2.6534632764181576E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994965645198	WITHOUT_CLASSIFICATION	5.034354801891066E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999674056144325	WITHOUT_CLASSIFICATION	3.259438556750463E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999997096383686	WITHOUT_CLASSIFICATION	2.903616313714375E-7	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999975361696196	WITHOUT_CLASSIFICATION	2.4638303804663345E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999674056144325	WITHOUT_CLASSIFICATION	3.259438556750463E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999975361696196	WITHOUT_CLASSIFICATION	2.4638303804663345E-6	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999981696159457	WITHOUT_CLASSIFICATION	1.8303840542662043E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999920856153465	WITHOUT_CLASSIFICATION	7.914384653546588E-6	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999991539813686	WITHOUT_CLASSIFICATION	8.460186315017275E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999938093217177	WITHOUT_CLASSIFICATION	6.190678282329384E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999993379228701	WITHOUT_CLASSIFICATION	6.620771298993601E-7	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999052086695	WITHOUT_CLASSIFICATION	9.479133042596456E-8	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999985163304644	WITHOUT_CLASSIFICATION	1.4836695356526743E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9998387315976867	WITHOUT_CLASSIFICATION	1.612684023133419E-4	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998777606731	WITHOUT_CLASSIFICATION	1.2223932693337234E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999577390871953	WITHOUT_CLASSIFICATION	4.226091280460306E-5	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999940902225787	WITHOUT_CLASSIFICATION	5.909777421236364E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999993077311244	WITHOUT_CLASSIFICATION	6.922688756103E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996366884507	WITHOUT_CLASSIFICATION	3.633115492902177E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999968114306567	WITHOUT_CLASSIFICATION	3.188569343382148E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999990723105102	WITHOUT_CLASSIFICATION	9.276894897799869E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.99999966867194	WITHOUT_CLASSIFICATION	3.3132806002907233E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999965991810257	WITHOUT_CLASSIFICATION	3.4008189743858728E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999999767609925	WITHOUT_CLASSIFICATION	2.3239007405778266E-8	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999880495485	WITHOUT_CLASSIFICATION	1.195045149881813E-7	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998945964028	WITHOUT_CLASSIFICATION	1.0540359720879377E-7	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999977737792659	WITHOUT_CLASSIFICATION	2.2262207339929476E-6	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999909686423105	WITHOUT_CLASSIFICATION	9.031357689472675E-6	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999539673854	WITHOUT_CLASSIFICATION	4.603261468203574E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967789806535	WITHOUT_CLASSIFICATION	3.2210193465416245E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999060360648533	WITHOUT_CLASSIFICATION	9.396393514664737E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999990752287065	WITHOUT_CLASSIFICATION	9.247712934313104E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999964086829	WITHOUT_CLASSIFICATION	3.5913170686562545E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999634155161443	WITHOUT_CLASSIFICATION	3.658448385559472E-5	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999992433088859	WITHOUT_CLASSIFICATION	7.566911141367262E-7	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999993517651394	WITHOUT_CLASSIFICATION	6.482348606013699E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999988275234482	WITHOUT_CLASSIFICATION	1.1724765518552894E-6	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999992122608649	WITHOUT_CLASSIFICATION	7.877391351959632E-7	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999871043189346	WITHOUT_CLASSIFICATION	1.289568106530648E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994947267371	WITHOUT_CLASSIFICATION	5.052732628856113E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999922663080557	WITHOUT_CLASSIFICATION	7.73369194435373E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999995961014324	WITHOUT_CLASSIFICATION	4.038985675535429E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994947267371	WITHOUT_CLASSIFICATION	5.052732628856113E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999395023030592	WITHOUT_CLASSIFICATION	6.0497696940919174E-5	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999245256258583	WITHOUT_CLASSIFICATION	7.54743741417164E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999957542844321	WITHOUT_CLASSIFICATION	4.245715567882164E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999979150802081	WITHOUT_CLASSIFICATION	2.0849197919178017E-6	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999988613363682	WITHOUT_CLASSIFICATION	1.1386636317498398E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998444887128	WITHOUT_CLASSIFICATION	1.555112871984401E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998444887128	WITHOUT_CLASSIFICATION	1.555112871984401E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999977686535209	WITHOUT_CLASSIFICATION	2.2313464791320663E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998005150675	WITHOUT_CLASSIFICATION	1.9948493256019962E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999813539591201	WITHOUT_CLASSIFICATION	1.8646040879854105E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999693285558	WITHOUT_CLASSIFICATION	3.067144412789446E-8	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999985326596988	WITHOUT_CLASSIFICATION	1.4673403011804088E-6	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999998023733052	WITHOUT_CLASSIFICATION	1.976266946895496E-7	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999951394482234	WITHOUT_CLASSIFICATION	4.8605517766523035E-6	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999765422664946	WITHOUT_CLASSIFICATION	2.34577335053811E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999999720671835	WITHOUT_CLASSIFICATION	2.7932816525917043E-8	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999984998500066	WITHOUT_CLASSIFICATION	1.500149993493888E-6	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999939943067	WITHOUT_CLASSIFICATION	6.005693292812419E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999939943067	WITHOUT_CLASSIFICATION	6.005693292812419E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998448812909	WITHOUT_CLASSIFICATION	1.551187090216658E-7	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999965600001152	WITHOUT_CLASSIFICATION	3.439999884755254E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999991102923341	WITHOUT_CLASSIFICATION	8.897076658832836E-7	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999999939943067	WITHOUT_CLASSIFICATION	6.005693292812419E-8	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998448812909	WITHOUT_CLASSIFICATION	1.551187090216658E-7	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998448812909	WITHOUT_CLASSIFICATION	1.551187090216658E-7	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999998214346035	WITHOUT_CLASSIFICATION	1.7856539653959354E-7	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999992935856653	WITHOUT_CLASSIFICATION	7.064143347021537E-7	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999993588162537	WITHOUT_CLASSIFICATION	6.411837462511892E-7	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999946147247	WITHOUT_CLASSIFICATION	5.3852753038676955E-9	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999935522816276	WITHOUT_CLASSIFICATION	6.447718372379229E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999935522816276	WITHOUT_CLASSIFICATION	6.447718372379229E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999905505074268	WITHOUT_CLASSIFICATION	9.449492573082227E-6	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999888238513319	WITHOUT_CLASSIFICATION	1.117614866811732E-5	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999951653450747	WITHOUT_CLASSIFICATION	4.834654925204845E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995379521546	WITHOUT_CLASSIFICATION	4.620478454235457E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995379521546	WITHOUT_CLASSIFICATION	4.620478454235457E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999965672784394	WITHOUT_CLASSIFICATION	3.432721560658806E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999966114864037	WITHOUT_CLASSIFICATION	3.3885135962914395E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999911371083917	WITHOUT_CLASSIFICATION	8.862891608297351E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999989410187207	WITHOUT_CLASSIFICATION	1.0589812793486598E-6	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999983170169282	WITHOUT_CLASSIFICATION	1.6829830718658264E-6	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999698502381	WITHOUT_CLASSIFICATION	3.014976201869298E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999738278596888	WITHOUT_CLASSIFICATION	2.6172140311105954E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999518402604	WITHOUT_CLASSIFICATION	4.815973968807264E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999278853981185	WITHOUT_CLASSIFICATION	7.211460188148638E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.999911371083917	WITHOUT_CLASSIFICATION	8.862891608297351E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999785423574723	WITHOUT_CLASSIFICATION	2.1457642527703584E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999948259019972	WITHOUT_CLASSIFICATION	5.174098002863642E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999948259019972	WITHOUT_CLASSIFICATION	5.174098002863642E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999906662983824	WITHOUT_CLASSIFICATION	9.33370161759827E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999379708633198	WITHOUT_CLASSIFICATION	6.202913668020823E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999891845565	WITHOUT_CLASSIFICATION	1.0815443488474365E-7	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999991722580592	WITHOUT_CLASSIFICATION	8.277419407369026E-7	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999833455023865	WITHOUT_CLASSIFICATION	1.665449761347833E-5	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999890827705488	WITHOUT_CLASSIFICATION	1.0917229451348757E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9999947275076252	WITHOUT_CLASSIFICATION	5.272492374730301E-6	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999750644374	WITHOUT_CLASSIFICATION	2.493556262623937E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999416889492	WITHOUT_CLASSIFICATION	5.831105072863579E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999416889492	WITHOUT_CLASSIFICATION	5.831105072863579E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999960582383546	WITHOUT_CLASSIFICATION	3.9417616454299325E-6	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999989251222225	WITHOUT_CLASSIFICATION	1.0748777774295575E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999988784072349	WITHOUT_CLASSIFICATION	1.1215927652146654E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999897654235989	WITHOUT_CLASSIFICATION	1.0234576401292433E-5	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999987859790311	WITHOUT_CLASSIFICATION	1.2140209688213195E-6	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999997513764996	WITHOUT_CLASSIFICATION	2.486235004014736E-6	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999991612098071	WITHOUT_CLASSIFICATION	8.387901928729146E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999944170901367	WITHOUT_CLASSIFICATION	5.5829098633259665E-6	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999973279432463	WITHOUT_CLASSIFICATION	2.672056753842748E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999969941919068	WITHOUT_CLASSIFICATION	3.005808093277887E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999979948513462	WITHOUT_CLASSIFICATION	2.0051486536811736E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999998942862828	WITHOUT_CLASSIFICATION	1.0571371720410732E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999971175888079	WITHOUT_CLASSIFICATION	2.8824111920312776E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999971175888079	WITHOUT_CLASSIFICATION	2.8824111920312776E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999995985271471	WITHOUT_CLASSIFICATION	4.0147285284522186E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999386043699896	WITHOUT_CLASSIFICATION	6.139563001040703E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999993220901447	WITHOUT_CLASSIFICATION	6.779098552568202E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999818689699266	WITHOUT_CLASSIFICATION	1.8131030073366465E-5	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999926004164988	WITHOUT_CLASSIFICATION	7.399583501158053E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.999999476260626	WITHOUT_CLASSIFICATION	5.237393740087968E-7	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999951622850135	WITHOUT_CLASSIFICATION	4.837714986507508E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996842343847	WITHOUT_CLASSIFICATION	3.157656153164389E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999922582706825	WITHOUT_CLASSIFICATION	7.74172931747213E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999973948749645	WITHOUT_CLASSIFICATION	2.6051250354031916E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999984469607507	WITHOUT_CLASSIFICATION	1.5530392492934924E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999960888169563	WITHOUT_CLASSIFICATION	3.911183043604787E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999947718616932	WITHOUT_CLASSIFICATION	5.2281383068921745E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999994396545407	WITHOUT_CLASSIFICATION	5.603454593152287E-7	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999994917838704	WITHOUT_CLASSIFICATION	5.08216129649311E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996177146441	WITHOUT_CLASSIFICATION	3.8228535592463334E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999939454378506	WITHOUT_CLASSIFICATION	6.054562149448413E-6	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999996040758516	WITHOUT_CLASSIFICATION	3.959241483272877E-7	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999972556896815	WITHOUT_CLASSIFICATION	2.744310318543038E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999959955283354	WITHOUT_CLASSIFICATION	4.004471664509606E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999969941919068	WITHOUT_CLASSIFICATION	3.005808093277887E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999971175888079	WITHOUT_CLASSIFICATION	2.8824111920312776E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999994396545407	WITHOUT_CLASSIFICATION	5.603454593152287E-7	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999992418972905	WITHOUT_CLASSIFICATION	7.58102709506971E-7	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999946189214951	WITHOUT_CLASSIFICATION	5.381078504909025E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999414800711927	WITHOUT_CLASSIFICATION	5.851992880734816E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.99997442755272	WITHOUT_CLASSIFICATION	2.5572447279992505E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999936355470189	WITHOUT_CLASSIFICATION	6.364452980996001E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999879189552148	WITHOUT_CLASSIFICATION	1.2081044785155104E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999975602737801	WITHOUT_CLASSIFICATION	2.439726219967942E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999979724184173	WITHOUT_CLASSIFICATION	2.0275815826948366E-6	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999839824575417	WITHOUT_CLASSIFICATION	1.6017542458248723E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.999922843476339	WITHOUT_CLASSIFICATION	7.715652366105544E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999785909419023	WITHOUT_CLASSIFICATION	2.140905809761783E-5	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999785909419023	WITHOUT_CLASSIFICATION	2.140905809761783E-5	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999902143914731	WITHOUT_CLASSIFICATION	9.78560852686828E-6	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999984539613443	WITHOUT_CLASSIFICATION	1.5460386556224375E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999364678421523	WITHOUT_CLASSIFICATION	6.353215784769874E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999896938250625	WITHOUT_CLASSIFICATION	1.0306174937577493E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999813592459228	WITHOUT_CLASSIFICATION	1.864075407722277E-5	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.999999423824743	WITHOUT_CLASSIFICATION	5.761752569395745E-7	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999987692712223	WITHOUT_CLASSIFICATION	1.2307287776455E-6	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999990583667702	WITHOUT_CLASSIFICATION	9.416332297875603E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999923278362758	WITHOUT_CLASSIFICATION	7.672163724248047E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999936861679192	WITHOUT_CLASSIFICATION	6.313832080821729E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999936861679192	WITHOUT_CLASSIFICATION	6.313832080821729E-6	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999989140195222	WITHOUT_CLASSIFICATION	1.0859804777128444E-6	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999992640143025	WITHOUT_CLASSIFICATION	7.359856975442266E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999972862746862	WITHOUT_CLASSIFICATION	2.7137253138412665E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999924817049577	WITHOUT_CLASSIFICATION	7.5182950423051005E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999892014831698	WITHOUT_CLASSIFICATION	1.0798516830140116E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999955727593055	WITHOUT_CLASSIFICATION	4.427240694470027E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999969941919068	WITHOUT_CLASSIFICATION	3.005808093277887E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.999998942862828	WITHOUT_CLASSIFICATION	1.0571371720410732E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999994396545407	WITHOUT_CLASSIFICATION	5.603454593152287E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999994396545407	WITHOUT_CLASSIFICATION	5.603454593152287E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994986643695	WITHOUT_CLASSIFICATION	5.013356304173609E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994986643695	WITHOUT_CLASSIFICATION	5.013356304173609E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999963042198987	WITHOUT_CLASSIFICATION	3.69578010116134E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999977618877862	WITHOUT_CLASSIFICATION	2.2381122137655187E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999977618877862	WITHOUT_CLASSIFICATION	2.2381122137655187E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.999998637214239	WITHOUT_CLASSIFICATION	1.3627857610047584E-6	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999967278260129	WITHOUT_CLASSIFICATION	3.272173987181611E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999986397746433	WITHOUT_CLASSIFICATION	1.360225356608538E-6	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999988106512562	WITHOUT_CLASSIFICATION	1.189348743744994E-6	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999994505473488	WITHOUT_CLASSIFICATION	5.494526511358256E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999902839403662	WITHOUT_CLASSIFICATION	9.7160596338547E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999902839403662	WITHOUT_CLASSIFICATION	9.7160596338547E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.999995594104349	WITHOUT_CLASSIFICATION	4.405895650925399E-6	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999888440187701	WITHOUT_CLASSIFICATION	1.1155981229873669E-5	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999991362339185	WITHOUT_CLASSIFICATION	8.63766081659041E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999945385446546	WITHOUT_CLASSIFICATION	5.461455345470776E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999998249591838	WITHOUT_CLASSIFICATION	1.7504081622297854E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.999995707057295	WITHOUT_CLASSIFICATION	4.2929427049758945E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999903576713339	WITHOUT_CLASSIFICATION	9.642328666077074E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999941081501593	WITHOUT_CLASSIFICATION	5.891849840655088E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999941081501593	WITHOUT_CLASSIFICATION	5.891849840655088E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999985440487432	WITHOUT_CLASSIFICATION	1.4559512566835E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999985440487432	WITHOUT_CLASSIFICATION	1.4559512566835E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999947884836095	WITHOUT_CLASSIFICATION	5.211516390512662E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999947884836095	WITHOUT_CLASSIFICATION	5.211516390512662E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.99999991008257	WITHOUT_CLASSIFICATION	8.991742995196059E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.99999991008257	WITHOUT_CLASSIFICATION	8.991742995196059E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999902839403662	WITHOUT_CLASSIFICATION	9.7160596338547E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999903576713339	WITHOUT_CLASSIFICATION	9.642328666077074E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999941081501593	WITHOUT_CLASSIFICATION	5.891849840655088E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999941081501593	WITHOUT_CLASSIFICATION	5.891849840655088E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999985440487432	WITHOUT_CLASSIFICATION	1.4559512566835E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999947884836095	WITHOUT_CLASSIFICATION	5.211516390512662E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999947884836095	WITHOUT_CLASSIFICATION	5.211516390512662E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.99999991008257	WITHOUT_CLASSIFICATION	8.991742995196059E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999214418781875	WITHOUT_CLASSIFICATION	7.855812181243257E-5	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999965600755226	WITHOUT_CLASSIFICATION	3.4399244774546314E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999959395327744	WITHOUT_CLASSIFICATION	4.060467225609154E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999999024962346	WITHOUT_CLASSIFICATION	9.75037653955628E-7	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.999999636723604	WITHOUT_CLASSIFICATION	3.632763959322283E-7	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999983487465804	WITHOUT_CLASSIFICATION	1.65125341946378E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999705459375418	WITHOUT_CLASSIFICATION	2.9454062458195927E-4	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999900319134953	WITHOUT_CLASSIFICATION	9.968086504638981E-6	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999895247650872	WITHOUT_CLASSIFICATION	1.0475234912884925E-5	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999840788597	WITHOUT_CLASSIFICATION	1.5921140291411523E-8	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999999503627655	WITHOUT_CLASSIFICATION	4.963723449282121E-7	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999999064361824	WITHOUT_CLASSIFICATION	9.356381760832877E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999977686535209	WITHOUT_CLASSIFICATION	2.2313464791320663E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999983487465804	WITHOUT_CLASSIFICATION	1.65125341946378E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999648529990183	WITHOUT_CLASSIFICATION	3.514700098174403E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999648529990183	WITHOUT_CLASSIFICATION	3.514700098174403E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999815858786301	WITHOUT_CLASSIFICATION	1.8414121369844435E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998994284293	WITHOUT_CLASSIFICATION	1.0057157066440098E-7	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998994284293	WITHOUT_CLASSIFICATION	1.0057157066440098E-7	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999950647013282	WITHOUT_CLASSIFICATION	4.935298671852785E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999995573137808	WITHOUT_CLASSIFICATION	4.4268621918128877E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999930469354767	WITHOUT_CLASSIFICATION	6.9530645231727106E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999977627737332	WITHOUT_CLASSIFICATION	2.2372262667775688E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999977627737332	WITHOUT_CLASSIFICATION	2.2372262667775688E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999987404289506	WITHOUT_CLASSIFICATION	1.2595710492965256E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999956369283167	WITHOUT_CLASSIFICATION	4.36307168320412E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999956369283167	WITHOUT_CLASSIFICATION	4.36307168320412E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999997617868452	WITHOUT_CLASSIFICATION	2.382131548803068E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999988832531891	WITHOUT_CLASSIFICATION	1.116746810985187E-6	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999994089816332	WITHOUT_CLASSIFICATION	5.91018366775723E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999982093120126	WITHOUT_CLASSIFICATION	1.7906879874047215E-5	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999946993319626	WITHOUT_CLASSIFICATION	5.300668037432678E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999960114474697	WITHOUT_CLASSIFICATION	3.988552530206342E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999955022015814	WITHOUT_CLASSIFICATION	4.497798418614931E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999954720635345	WITHOUT_CLASSIFICATION	4.527936465626577E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9773248228130414	WITHOUT_CLASSIFICATION	0.02267517718695854	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999908846940468	WITHOUT_CLASSIFICATION	9.115305953064975E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999808749566377	WITHOUT_CLASSIFICATION	1.912504336224131E-5	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801884474634	WITHOUT_CLASSIFICATION	1.9811552536635383E-5	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999976587404362	WITHOUT_CLASSIFICATION	2.341259563732797E-6	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999993321208475	WITHOUT_CLASSIFICATION	6.678791524927121E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999969461385411	WITHOUT_CLASSIFICATION	3.0538614590741795E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801884474634	WITHOUT_CLASSIFICATION	1.9811552536635383E-5	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999994474126204	WITHOUT_CLASSIFICATION	5.525873797379724E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998837264056	WITHOUT_CLASSIFICATION	1.1627359439975536E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999953176238574	WITHOUT_CLASSIFICATION	4.682376142492562E-6	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999915413067072	WITHOUT_CLASSIFICATION	8.458693292760297E-6	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999598651074767	WITHOUT_CLASSIFICATION	4.0134892523198E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.999944561564949	WITHOUT_CLASSIFICATION	5.543843505100043E-5	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999645959201774	WITHOUT_CLASSIFICATION	3.540407982259393E-5	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999972147329043	WITHOUT_CLASSIFICATION	2.7852670957370915E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999898710539916	WITHOUT_CLASSIFICATION	1.0128946008512327E-5	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995856961372	WITHOUT_CLASSIFICATION	4.1430386277846794E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999998107509682	WITHOUT_CLASSIFICATION	1.8924903180369314E-6	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999468723898	WITHOUT_CLASSIFICATION	5.312761020170936E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992765965011	WITHOUT_CLASSIFICATION	7.234034989004607E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999955022015814	WITHOUT_CLASSIFICATION	4.497798418614931E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999898710539916	WITHOUT_CLASSIFICATION	1.0128946008512327E-5	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.999998107509682	WITHOUT_CLASSIFICATION	1.8924903180369314E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992765965011	WITHOUT_CLASSIFICATION	7.234034989004607E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999995413698974	WITHOUT_CLASSIFICATION	4.586301025505243E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999831266032728	WITHOUT_CLASSIFICATION	1.687339672722217E-5	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999738182654	WITHOUT_CLASSIFICATION	2.6181734602717785E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999996545548932	WITHOUT_CLASSIFICATION	3.454451067867068E-6	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999975520059363	WITHOUT_CLASSIFICATION	2.447994063632613E-6	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.999999442111518	WITHOUT_CLASSIFICATION	5.578884819255422E-7	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.999992851541547	WITHOUT_CLASSIFICATION	7.148458452998274E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999999702376373	WITHOUT_CLASSIFICATION	2.976236270105831E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999971264492649	WITHOUT_CLASSIFICATION	2.873550735184317E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997837447023	WITHOUT_CLASSIFICATION	2.162552977385247E-7	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999964695607	WITHOUT_CLASSIFICATION	3.530439301637224E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999993192408632	WITHOUT_CLASSIFICATION	6.807591368630469E-7	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999885572598	WITHOUT_CLASSIFICATION	1.1442740144362608E-8	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999819890032	WITHOUT_CLASSIFICATION	1.801099677318194E-8	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999966162793202	WITHOUT_CLASSIFICATION	3.3837206797715573E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999767136101279	WITHOUT_CLASSIFICATION	2.3286389872125842E-5	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999788567886788	WITHOUT_CLASSIFICATION	2.1143211321159513E-5	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999980790948025	WITHOUT_CLASSIFICATION	1.9209051974573595E-6	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999885520027727	WITHOUT_CLASSIFICATION	1.1447997227413064E-5	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999898710539916	WITHOUT_CLASSIFICATION	1.0128946008512327E-5	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999325099882	WITHOUT_CLASSIFICATION	6.749001179815755E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.999999666178917	WITHOUT_CLASSIFICATION	3.3382108300490566E-7	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999158626072	WITHOUT_CLASSIFICATION	8.413739287945155E-8	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999972758523037	WITHOUT_CLASSIFICATION	2.7241476962535476E-6	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999994101265904	WITHOUT_CLASSIFICATION	5.89873409479412E-7	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999998063861132	WITHOUT_CLASSIFICATION	1.9361388679477367E-6	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999975367991416	WITHOUT_CLASSIFICATION	2.4632008584659375E-6	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999058015988	WITHOUT_CLASSIFICATION	9.419840121287267E-8	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999955944148877	WITHOUT_CLASSIFICATION	4.405585112281519E-6	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999930397371868	WITHOUT_CLASSIFICATION	6.960262813237582E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999996683575297	WITHOUT_CLASSIFICATION	3.3164247028733364E-6	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999933697680122	WITHOUT_CLASSIFICATION	6.6302319878449956E-6	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999879092654228	WITHOUT_CLASSIFICATION	1.2090734577229552E-5	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999998857062052	WITHOUT_CLASSIFICATION	1.142937947902991E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999991411976199	WITHOUT_CLASSIFICATION	8.588023800475146E-7	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999998447411336	WITHOUT_CLASSIFICATION	1.5525886636531905E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999901908477321	WITHOUT_CLASSIFICATION	9.80915226785315E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999996322118984	WITHOUT_CLASSIFICATION	3.6778810160648752E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999985615296451	WITHOUT_CLASSIFICATION	1.438470354920631E-6	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999247367356905	WITHOUT_CLASSIFICATION	7.526326430957286E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999998492526124	WITHOUT_CLASSIFICATION	1.5074738760230395E-7	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999998891717757	WITHOUT_CLASSIFICATION	1.1082822426301294E-7	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997606844813	WITHOUT_CLASSIFICATION	2.3931551880342663E-7	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999667314797683	WITHOUT_CLASSIFICATION	3.326852023170254E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999882464163623	WITHOUT_CLASSIFICATION	1.1753583637668318E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999882464163623	WITHOUT_CLASSIFICATION	1.1753583637668318E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997642576719669	WITHOUT_CLASSIFICATION	2.3574232803319825E-4	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999998706808227	WITHOUT_CLASSIFICATION	1.2931917730705285E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999939856361044	WITHOUT_CLASSIFICATION	6.014363895577893E-6	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999957299405196	WITHOUT_CLASSIFICATION	4.270059480448916E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999956336399374	WITHOUT_CLASSIFICATION	4.366360062650022E-6	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999745777188097	WITHOUT_CLASSIFICATION	2.542228119020181E-5	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999994953699284	WITHOUT_CLASSIFICATION	5.0463007159515005E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999997209530131	WITHOUT_CLASSIFICATION	2.7904698690391505E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999451001239121	WITHOUT_CLASSIFICATION	5.4899876087761735E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.999988501120907	WITHOUT_CLASSIFICATION	1.1498879092989922E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999977585339161	WITHOUT_CLASSIFICATION	2.2414660837868787E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999993866366262	WITHOUT_CLASSIFICATION	6.133633737004547E-7	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9997528066222462	WITHOUT_CLASSIFICATION	2.4719337775382306E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999664028689592	WITHOUT_CLASSIFICATION	3.359713104088049E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937972921961	WITHOUT_CLASSIFICATION	6.202707803969511E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988975547712	WITHOUT_CLASSIFICATION	1.1024452288154183E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9994591399389623	WITHOUT_CLASSIFICATION	5.408600610376946E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999991070224686	WITHOUT_CLASSIFICATION	8.929775312577797E-7	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.999999716701499	WITHOUT_CLASSIFICATION	2.8329850105672497E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9996945649863005	WITHOUT_CLASSIFICATION	3.054350136995268E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999969279369352	WITHOUT_CLASSIFICATION	3.0720630648625443E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999969279369352	WITHOUT_CLASSIFICATION	3.0720630648625443E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999891527629471	WITHOUT_CLASSIFICATION	1.0847237052868276E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999891527629471	WITHOUT_CLASSIFICATION	1.0847237052868276E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999997606844813	WITHOUT_CLASSIFICATION	2.3931551880342663E-7	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.99820824026724	WITHOUT_CLASSIFICATION	0.0017917597327599649	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999957150742277	WITHOUT_CLASSIFICATION	4.284925772343951E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999965914988594	WITHOUT_CLASSIFICATION	3.4085011406008147E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999957150742277	WITHOUT_CLASSIFICATION	4.284925772343951E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999965914988594	WITHOUT_CLASSIFICATION	3.4085011406008147E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990212859786	WITHOUT_CLASSIFICATION	9.787140213802917E-7	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999219463540553	WITHOUT_CLASSIFICATION	7.805364594481715E-5	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999996307993189	WITHOUT_CLASSIFICATION	3.6920068115914286E-7	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999996720553072	WITHOUT_CLASSIFICATION	3.279446928823178E-7	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993957658477878	WITHOUT_CLASSIFICATION	6.042341522122716E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999992042008022	WITHOUT_CLASSIFICATION	7.957991977105701E-7	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999994356761976	WITHOUT_CLASSIFICATION	5.643238024171562E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999968032318826	WITHOUT_CLASSIFICATION	3.1967681174980836E-6	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9978351162762654	WITHOUT_CLASSIFICATION	0.0021648837237346966	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999082466133	WITHOUT_CLASSIFICATION	9.175338668389136E-8	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999991160031474	WITHOUT_CLASSIFICATION	8.839968526014552E-7	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999998520714325	WITHOUT_CLASSIFICATION	1.479285674866655E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999996921195528	WITHOUT_CLASSIFICATION	3.0788044720834164E-6	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9997242875351429	WITHOUT_CLASSIFICATION	2.7571246485720964E-4	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9998892513682933	WITHOUT_CLASSIFICATION	1.1074863170667992E-4	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999923086911243	WITHOUT_CLASSIFICATION	7.691308875697088E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999923086911243	WITHOUT_CLASSIFICATION	7.691308875697088E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999939469577855	WITHOUT_CLASSIFICATION	6.05304221447022E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990212859786	WITHOUT_CLASSIFICATION	9.787140213802917E-7	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999842627208645	WITHOUT_CLASSIFICATION	1.573727913550081E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999638702754897	WITHOUT_CLASSIFICATION	3.612972451031728E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999998512698169	WITHOUT_CLASSIFICATION	1.487301829939265E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978639254691	WITHOUT_CLASSIFICATION	2.136074530867808E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998606089729998	WITHOUT_CLASSIFICATION	1.3939102700021103E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990212859786	WITHOUT_CLASSIFICATION	9.787140213802917E-7	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978639254691	WITHOUT_CLASSIFICATION	2.136074530867808E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998606089729998	WITHOUT_CLASSIFICATION	1.3939102700021103E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9997777710922837	WITHOUT_CLASSIFICATION	2.2222890771622433E-4	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999962169765808	WITHOUT_CLASSIFICATION	3.7830234193082153E-6	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999988086235168	WITHOUT_CLASSIFICATION	1.1913764832166264E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990212859786	WITHOUT_CLASSIFICATION	9.787140213802917E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990212859786	WITHOUT_CLASSIFICATION	9.787140213802917E-7	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999977583457561	WITHOUT_CLASSIFICATION	2.2416542437937328E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999983973006664	WITHOUT_CLASSIFICATION	1.6026993335932601E-6	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999876975427574	WITHOUT_CLASSIFICATION	1.230245724269538E-5	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999976779572691	WITHOUT_CLASSIFICATION	2.322042730936252E-6	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999903005087559	WITHOUT_CLASSIFICATION	9.699491244015092E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999972728674071	WITHOUT_CLASSIFICATION	2.727132592766327E-6	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999918207814754	WITHOUT_CLASSIFICATION	8.17921852470285E-6	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999999736508409	WITHOUT_CLASSIFICATION	2.6349159097707843E-7	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999702475794	WITHOUT_CLASSIFICATION	2.9752420600953403E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999976697184749	WITHOUT_CLASSIFICATION	2.3302815251347144E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999322888439558	WITHOUT_CLASSIFICATION	6.771115604417344E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999987498998469	WITHOUT_CLASSIFICATION	1.2501001529993903E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999980307059103	WITHOUT_CLASSIFICATION	1.9692940896762702E-6	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999997271729616	WITHOUT_CLASSIFICATION	2.7282703839587668E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467709490416	WITHOUT_CLASSIFICATION	5.322905095833277E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999998773240282	WITHOUT_CLASSIFICATION	1.226759718681953E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999837448379437	WITHOUT_CLASSIFICATION	1.6255162056321903E-5	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9996207968744707	WITHOUT_CLASSIFICATION	3.792031255292846E-4	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9974927470522097	WITHOUT_CLASSIFICATION	0.0025072529477903355	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999956713496637	WITHOUT_CLASSIFICATION	4.328650336200037E-6	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999834334734775	WITHOUT_CLASSIFICATION	1.6566526522583346E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999950926097775	WITHOUT_CLASSIFICATION	4.907390222555695E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999950926097775	WITHOUT_CLASSIFICATION	4.907390222555695E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999837448379437	WITHOUT_CLASSIFICATION	1.6255162056321903E-5	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999873068047834	WITHOUT_CLASSIFICATION	1.2693195216497275E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999934712101172	WITHOUT_CLASSIFICATION	6.528789882725403E-6	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.999999404387466	WITHOUT_CLASSIFICATION	5.956125340113054E-7	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999977577084117	WITHOUT_CLASSIFICATION	2.242291588268455E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909415697774	WITHOUT_CLASSIFICATION	9.058430222519551E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999991896778176	WITHOUT_CLASSIFICATION	8.10322182295371E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999971605724797	WITHOUT_CLASSIFICATION	2.8394275202595607E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999960526894293	WITHOUT_CLASSIFICATION	3.947310570699221E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999812224021	WITHOUT_CLASSIFICATION	1.8777597949343465E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999998917682986	WITHOUT_CLASSIFICATION	1.0823170131545933E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992793797029	WITHOUT_CLASSIFICATION	7.206202971095082E-7	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9968484115912507	WITHOUT_CLASSIFICATION	0.003151588408749276	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999462333608646	WITHOUT_CLASSIFICATION	5.376663913531814E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999996441734265	WITHOUT_CLASSIFICATION	3.558265736039739E-7	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998070356797	WITHOUT_CLASSIFICATION	1.929643203439424E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999468653531999	WITHOUT_CLASSIFICATION	5.3134646800066065E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999999299148731	WITHOUT_CLASSIFICATION	7.008512682074539E-8	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998858435262369	WITHOUT_CLASSIFICATION	1.1415647376304115E-4	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871102726581	WITHOUT_CLASSIFICATION	1.2889727341929007E-5	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998571060519	WITHOUT_CLASSIFICATION	1.4289394813532596E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999999635073872	WITHOUT_CLASSIFICATION	3.6492612720532815E-8	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999992258468049	WITHOUT_CLASSIFICATION	7.741531951756929E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967467446216	WITHOUT_CLASSIFICATION	3.2532553784600104E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977368975388	WITHOUT_CLASSIFICATION	2.263102461152412E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990656724845	WITHOUT_CLASSIFICATION	9.343275154662821E-7	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992885112129	WITHOUT_CLASSIFICATION	7.114887870958481E-7	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990343051472	WITHOUT_CLASSIFICATION	9.65694852761747E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989378560175	WITHOUT_CLASSIFICATION	1.062143982571088E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999214733665	WITHOUT_CLASSIFICATION	7.852663349836041E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997152099425	WITHOUT_CLASSIFICATION	2.847900575585013E-7	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999993908789989	WITHOUT_CLASSIFICATION	6.09121001175968E-7	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999996592155582	WITHOUT_CLASSIFICATION	3.4078444172359343E-7	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996969295898	WITHOUT_CLASSIFICATION	3.030704102817341E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999982781283	WITHOUT_CLASSIFICATION	1.7218716997359527E-7	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300833574	WITHOUT_CLASSIFICATION	6.99166425496116E-8	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998043970743	WITHOUT_CLASSIFICATION	1.9560292584304557E-7	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989853908889	WITHOUT_CLASSIFICATION	1.0146091111267755E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996810950921	WITHOUT_CLASSIFICATION	3.1890490790807294E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996541636673	WITHOUT_CLASSIFICATION	3.4583633267985333E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990981687186	WITHOUT_CLASSIFICATION	9.018312814769081E-7	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999999229428207	WITHOUT_CLASSIFICATION	7.705717919871359E-8	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942084063955	WITHOUT_CLASSIFICATION	5.791593604544038E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9991821348462703	WITHOUT_CLASSIFICATION	8.178651537296697E-4	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999981187284098	WITHOUT_CLASSIFICATION	1.8812715901597463E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999992376377	WITHOUT_CLASSIFICATION	7.623622897487922E-9	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999914968739652	WITHOUT_CLASSIFICATION	8.503126034852076E-6	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999977546122076	WITHOUT_CLASSIFICATION	2.245387792426852E-6	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999986863082362	WITHOUT_CLASSIFICATION	1.3136917637997904E-6	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9998903559802386	WITHOUT_CLASSIFICATION	1.0964401976137137E-4	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999947170514101	WITHOUT_CLASSIFICATION	5.282948589895212E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999914721830088	WITHOUT_CLASSIFICATION	8.52781699127644E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999453617491794	WITHOUT_CLASSIFICATION	5.463825082057317E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999830705525827	WITHOUT_CLASSIFICATION	1.6929447417255897E-5	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999944945314262	WITHOUT_CLASSIFICATION	5.505468573823802E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999570157123	WITHOUT_CLASSIFICATION	4.298428772496872E-8	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999957833647841	WITHOUT_CLASSIFICATION	4.216635215856041E-6	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999983715191608	WITHOUT_CLASSIFICATION	1.6284808392112655E-6	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999965312719385	WITHOUT_CLASSIFICATION	3.4687280614029988E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999993392082073	WITHOUT_CLASSIFICATION	6.607917927292774E-7	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923007907409	WITHOUT_CLASSIFICATION	7.699209259129747E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804098005143	WITHOUT_CLASSIFICATION	1.9590199485710933E-5	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999749538597236	WITHOUT_CLASSIFICATION	2.504614027642571E-5	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944529465707	WITHOUT_CLASSIFICATION	5.547053429228203E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999647530243407	WITHOUT_CLASSIFICATION	3.52469756592082E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999923835640674	WITHOUT_CLASSIFICATION	7.616435932566961E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999990261823376	WITHOUT_CLASSIFICATION	9.738176624032783E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999978345273087	WITHOUT_CLASSIFICATION	2.1654726911859775E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999853073605425	WITHOUT_CLASSIFICATION	1.4692639457444492E-5	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999623243616	WITHOUT_CLASSIFICATION	3.767563831336507E-8	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999954277567448	WITHOUT_CLASSIFICATION	4.572243255197198E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999927755672124	WITHOUT_CLASSIFICATION	7.224432787637189E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998710540955	WITHOUT_CLASSIFICATION	1.2894590444635245E-7	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.99985992178728	WITHOUT_CLASSIFICATION	1.4007821271997336E-4	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999987095629245	WITHOUT_CLASSIFICATION	1.2904370756242297E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999993516286932	WITHOUT_CLASSIFICATION	6.483713068202597E-7	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999846920722296	WITHOUT_CLASSIFICATION	1.5307927770395025E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999914968739652	WITHOUT_CLASSIFICATION	8.503126034852076E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998818579479261	WITHOUT_CLASSIFICATION	1.1814205207392445E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996706819244	WITHOUT_CLASSIFICATION	3.2931807565002917E-7	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999014724366	WITHOUT_CLASSIFICATION	9.852756350432875E-8	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999972560752405	WITHOUT_CLASSIFICATION	2.7439247594738093E-6	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999980831622531	WITHOUT_CLASSIFICATION	1.916837746896926E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999994065661133	WITHOUT_CLASSIFICATION	5.934338866401547E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9998238187937529	WITHOUT_CLASSIFICATION	1.7618120624697867E-4	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999933144566905	WITHOUT_CLASSIFICATION	6.6855433095253375E-6	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999986616886536	WITHOUT_CLASSIFICATION	1.3383113464493332E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999959131335434	WITHOUT_CLASSIFICATION	4.086866456567764E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999934589792334	WITHOUT_CLASSIFICATION	6.541020766548125E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981570396309	WITHOUT_CLASSIFICATION	1.8429603690885256E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993467726399	WITHOUT_CLASSIFICATION	6.532273600482366E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999958937648	WITHOUT_CLASSIFICATION	4.106235192022369E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999834854983427	WITHOUT_CLASSIFICATION	1.6514501657285494E-5	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999432477453423	WITHOUT_CLASSIFICATION	5.6752254657689096E-5	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999921827780913	WITHOUT_CLASSIFICATION	7.817221908737091E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999872147633971	WITHOUT_CLASSIFICATION	1.278523660285609E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999995499293267	WITHOUT_CLASSIFICATION	4.500706733550318E-7	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999970599964957	WITHOUT_CLASSIFICATION	2.940003504446574E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999994470281728	WITHOUT_CLASSIFICATION	5.529718271138227E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999945769901063	WITHOUT_CLASSIFICATION	5.4230098937219006E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999959570613545	WITHOUT_CLASSIFICATION	4.0429386454553016E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999978528640207	WITHOUT_CLASSIFICATION	2.1471359793073314E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.999998689243029	WITHOUT_CLASSIFICATION	1.3107569709511388E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999998152562098	WITHOUT_CLASSIFICATION	1.8474379025065426E-7	DEFECT
/*	WITHOUT_CLASSIFICATION	0.996192926653789	WITHOUT_CLASSIFICATION	0.003807073346210988	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999980054607563	WITHOUT_CLASSIFICATION	1.9945392436337122E-6	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999971199515558	WITHOUT_CLASSIFICATION	2.880048444202405E-6	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999985366559183	WITHOUT_CLASSIFICATION	1.4633440817312215E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999914968739652	WITHOUT_CLASSIFICATION	8.503126034852076E-6	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999939764003927	WITHOUT_CLASSIFICATION	6.02359960733448E-6	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999963592392	WITHOUT_CLASSIFICATION	3.6407608801906634E-9	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999864346837772	WITHOUT_CLASSIFICATION	1.3565316222697453E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999914968739652	WITHOUT_CLASSIFICATION	8.503126034852076E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999918070049044	WITHOUT_CLASSIFICATION	8.192995095569395E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999994470281728	WITHOUT_CLASSIFICATION	5.529718271138227E-7	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9999357825131517	WITHOUT_CLASSIFICATION	6.42174868482406E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999396779950448	WITHOUT_CLASSIFICATION	6.032200495516932E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999845634584	WITHOUT_CLASSIFICATION	1.5436541585865532E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999959131335434	WITHOUT_CLASSIFICATION	4.086866456567764E-6	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999934589792334	WITHOUT_CLASSIFICATION	6.541020766548125E-6	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981570396309	WITHOUT_CLASSIFICATION	1.8429603690885256E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999141644764	WITHOUT_CLASSIFICATION	8.583552362802508E-8	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999892222130221	WITHOUT_CLASSIFICATION	1.0777786977941844E-5	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999020567422	WITHOUT_CLASSIFICATION	9.794325775337584E-8	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999994780716888	WITHOUT_CLASSIFICATION	5.219283113042818E-7	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999997888991446	WITHOUT_CLASSIFICATION	2.1110085546633032E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999914968739652	WITHOUT_CLASSIFICATION	8.503126034852076E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999993467726399	WITHOUT_CLASSIFICATION	6.532273600482366E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.999999958937648	WITHOUT_CLASSIFICATION	4.106235192022369E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998562108298	WITHOUT_CLASSIFICATION	1.4378917023542097E-7	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999577561496	WITHOUT_CLASSIFICATION	4.224385047303223E-8	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998223979253	WITHOUT_CLASSIFICATION	1.7760207474356195E-7	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999987428526586	WITHOUT_CLASSIFICATION	1.2571473414048736E-6	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999990703707992	WITHOUT_CLASSIFICATION	9.296292008647236E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999876507914833	WITHOUT_CLASSIFICATION	1.2349208516611543E-5	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990981687186	WITHOUT_CLASSIFICATION	9.018312814769081E-7	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999749007275794	WITHOUT_CLASSIFICATION	2.509927242057294E-5	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999925163066661	WITHOUT_CLASSIFICATION	7.4836933338499005E-6	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999964227395037	WITHOUT_CLASSIFICATION	3.5772604963541816E-6	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999869915801	WITHOUT_CLASSIFICATION	1.300841990659072E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999989054224097	WITHOUT_CLASSIFICATION	1.0945775903168855E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990343051472	WITHOUT_CLASSIFICATION	9.65694852761747E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989378560175	WITHOUT_CLASSIFICATION	1.062143982571088E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999982781283	WITHOUT_CLASSIFICATION	1.7218716997359527E-7	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999989054224097	WITHOUT_CLASSIFICATION	1.0945775903168855E-6	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999998815630473	WITHOUT_CLASSIFICATION	1.1843695272128498E-7	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998473848838	WITHOUT_CLASSIFICATION	1.5261511631710967E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996385396251	WITHOUT_CLASSIFICATION	3.6146037479937717E-7	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970306879532	WITHOUT_CLASSIFICATION	2.9693120468536245E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999990535917952	WITHOUT_CLASSIFICATION	9.464082048848706E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9998249923657123	WITHOUT_CLASSIFICATION	1.7500763428753986E-4	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300833574	WITHOUT_CLASSIFICATION	6.99166425496116E-8	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996810950921	WITHOUT_CLASSIFICATION	3.1890490790807294E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998710540955	WITHOUT_CLASSIFICATION	1.2894590444635245E-7	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999993849788212	WITHOUT_CLASSIFICATION	6.150211788066515E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999939067784958	WITHOUT_CLASSIFICATION	6.093221504252169E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999982797809986	WITHOUT_CLASSIFICATION	1.720219001426855E-6	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999893323285058	WITHOUT_CLASSIFICATION	1.0667671494074366E-5	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999986740135773	WITHOUT_CLASSIFICATION	1.3259864226367498E-6	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999995218387804	WITHOUT_CLASSIFICATION	4.781612195745024E-7	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999580554299763	WITHOUT_CLASSIFICATION	4.194457002372951E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999812224021	WITHOUT_CLASSIFICATION	1.8777597949343465E-8	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999789039142425	WITHOUT_CLASSIFICATION	2.1096085757512036E-5	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999996315982836	WITHOUT_CLASSIFICATION	3.684017163690404E-7	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999986936869991	WITHOUT_CLASSIFICATION	1.3063130008130816E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999992873506894	WITHOUT_CLASSIFICATION	7.126493105613286E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999617379727	WITHOUT_CLASSIFICATION	3.8262027397907975E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999996991408856	WITHOUT_CLASSIFICATION	3.008591144042978E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986610101556	WITHOUT_CLASSIFICATION	1.33898984448914E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999289939029	WITHOUT_CLASSIFICATION	7.100609710083159E-6	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999959537201322	WITHOUT_CLASSIFICATION	4.046279867852341E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999971836416178	WITHOUT_CLASSIFICATION	2.816358382145946E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9992257029970971	WITHOUT_CLASSIFICATION	7.742970029029202E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999513618173667	WITHOUT_CLASSIFICATION	4.863818263333834E-5	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999985076865345	WITHOUT_CLASSIFICATION	1.4923134654929577E-5	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999488029320278	WITHOUT_CLASSIFICATION	5.119706797221799E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999988609724657	WITHOUT_CLASSIFICATION	1.1390275343054073E-5	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999985349892332	WITHOUT_CLASSIFICATION	1.465010766839002E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999995895224257	WITHOUT_CLASSIFICATION	4.104775743568183E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999217424280371	WITHOUT_CLASSIFICATION	7.825757196281131E-5	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999982586315283	WITHOUT_CLASSIFICATION	1.7413684716987977E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999982704865252	WITHOUT_CLASSIFICATION	1.7295134748642265E-6	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969129552202	WITHOUT_CLASSIFICATION	3.0870447798598513E-6	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999995652601783	WITHOUT_CLASSIFICATION	4.3473982160382604E-7	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999954774648	WITHOUT_CLASSIFICATION	4.5225351916274425E-9	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999994473663194	WITHOUT_CLASSIFICATION	5.52633680693841E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999995890459304	WITHOUT_CLASSIFICATION	4.109540695294369E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999939801454939	WITHOUT_CLASSIFICATION	6.019854506151515E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999945816525518	WITHOUT_CLASSIFICATION	5.418347448168968E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999448774763	WITHOUT_CLASSIFICATION	5.5122523688507575E-8	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999246720089	WITHOUT_CLASSIFICATION	7.532799104572965E-8	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999999615416423	WITHOUT_CLASSIFICATION	3.8458357701654814E-7	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999798759097	WITHOUT_CLASSIFICATION	2.0124090233921298E-8	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999861171000816	WITHOUT_CLASSIFICATION	1.3882899918488241E-5	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.99999977023371	WITHOUT_CLASSIFICATION	2.2976629002952404E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999986433117409	WITHOUT_CLASSIFICATION	1.3566882589923663E-6	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999984007698454	WITHOUT_CLASSIFICATION	1.599230154681678E-6	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999994138264966	WITHOUT_CLASSIFICATION	5.861735033832414E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999979713193	WITHOUT_CLASSIFICATION	2.0286806883548404E-9	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999999985295766	WITHOUT_CLASSIFICATION	1.4704234176354226E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999979802836629	WITHOUT_CLASSIFICATION	2.019716337072307E-6	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999893106338	WITHOUT_CLASSIFICATION	1.0689366281040863E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999479088819	WITHOUT_CLASSIFICATION	5.2091118041264214E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999978537226332	WITHOUT_CLASSIFICATION	2.146277366741647E-6	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9999966329615861	WITHOUT_CLASSIFICATION	3.3670384137734436E-6	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999994943503653	WITHOUT_CLASSIFICATION	5.056496347316182E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999844988384797	WITHOUT_CLASSIFICATION	1.5501161520374518E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999995863046707	WITHOUT_CLASSIFICATION	4.1369532943418846E-7	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999988765554394	WITHOUT_CLASSIFICATION	1.1234445605487539E-6	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997404943195	WITHOUT_CLASSIFICATION	2.5950568058281375E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999965988951043	WITHOUT_CLASSIFICATION	3.4011048957024482E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999997416783365	WITHOUT_CLASSIFICATION	2.583216635216094E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999975485679182	WITHOUT_CLASSIFICATION	2.4514320817952874E-6	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999938710093006	WITHOUT_CLASSIFICATION	6.128990699404593E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999995835908555	WITHOUT_CLASSIFICATION	4.164091445850155E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999841607364001	WITHOUT_CLASSIFICATION	1.583926359994092E-5	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999950680983486	WITHOUT_CLASSIFICATION	4.931901651434502E-6	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999716935826968	WITHOUT_CLASSIFICATION	2.8306417303338786E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999996094464627	WITHOUT_CLASSIFICATION	3.905535372545979E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999915214603279	WITHOUT_CLASSIFICATION	8.478539672048312E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999981844108534	WITHOUT_CLASSIFICATION	1.8155891465880753E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999945562761187	WITHOUT_CLASSIFICATION	5.44372388132254E-6	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999785374029372	WITHOUT_CLASSIFICATION	2.1462597062874238E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.999976795976015	WITHOUT_CLASSIFICATION	2.3204023984938957E-5	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9999977759657315	WITHOUT_CLASSIFICATION	2.224034268577795E-6	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9998539573438311	WITHOUT_CLASSIFICATION	1.460426561689055E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999553356870272	WITHOUT_CLASSIFICATION	4.466431297271426E-5	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9887695620195686	WITHOUT_CLASSIFICATION	0.011230437980431439	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999927868013	WITHOUT_CLASSIFICATION	7.213198614925222E-9	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9999780412944863	WITHOUT_CLASSIFICATION	2.195870551374307E-5	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997997180888577	WITHOUT_CLASSIFICATION	2.0028191114232233E-4	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998101323819751	WITHOUT_CLASSIFICATION	1.8986761802481544E-4	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999982796520157	WITHOUT_CLASSIFICATION	1.7203479842874667E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999930395329575	WITHOUT_CLASSIFICATION	6.960467042570091E-6	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999850064105619	WITHOUT_CLASSIFICATION	1.4993589438075511E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999827056813321	WITHOUT_CLASSIFICATION	1.729431866790392E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999996245980934	WITHOUT_CLASSIFICATION	3.7540190648432403E-7	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999956697914008	WITHOUT_CLASSIFICATION	4.3302085992709955E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999928806795365	WITHOUT_CLASSIFICATION	7.119320463553614E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999433431211	WITHOUT_CLASSIFICATION	5.6656878762312166E-8	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999985101807	WITHOUT_CLASSIFICATION	1.4898192474729793E-9	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999814482764341	WITHOUT_CLASSIFICATION	1.855172356588054E-5	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9993075190950317	WITHOUT_CLASSIFICATION	6.924809049684419E-4	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999994902305985	WITHOUT_CLASSIFICATION	5.097694014497932E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999747545210991	WITHOUT_CLASSIFICATION	2.524547890098697E-5	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999972618359804	WITHOUT_CLASSIFICATION	2.7381640196497E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999931299914379	WITHOUT_CLASSIFICATION	6.870008562032372E-6	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9992804234320839	WITHOUT_CLASSIFICATION	7.195765679160682E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999986623046847	WITHOUT_CLASSIFICATION	1.337695315277084E-6	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999687177679488	WITHOUT_CLASSIFICATION	3.1282232051214754E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999966035937072	WITHOUT_CLASSIFICATION	3.3964062927471213E-6	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999825253149	WITHOUT_CLASSIFICATION	1.7474685143093966E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999425835468654	WITHOUT_CLASSIFICATION	5.7416453134630926E-5	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999675788343139	WITHOUT_CLASSIFICATION	3.242116568621531E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999997302752648	WITHOUT_CLASSIFICATION	2.697247352057754E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9999425835468654	WITHOUT_CLASSIFICATION	5.7416453134630926E-5	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998989315871	WITHOUT_CLASSIFICATION	1.0106841282875059E-7	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999982102170416	WITHOUT_CLASSIFICATION	1.7897829584090513E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999733049701	WITHOUT_CLASSIFICATION	2.6695029856718244E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999990529934306	WITHOUT_CLASSIFICATION	9.470065693870829E-7	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999951250528395	WITHOUT_CLASSIFICATION	4.874947160548871E-6	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999973610421	WITHOUT_CLASSIFICATION	2.638957895480362E-8	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999011905065267	WITHOUT_CLASSIFICATION	9.880949347318706E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999994827746973	WITHOUT_CLASSIFICATION	5.17225302660492E-7	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998806442973233	WITHOUT_CLASSIFICATION	1.1935570267684427E-4	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999907833392383	WITHOUT_CLASSIFICATION	9.216660761757341E-6	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999975646645657	WITHOUT_CLASSIFICATION	2.435335434375489E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999991924841652	WITHOUT_CLASSIFICATION	8.075158346560715E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999998745337165	WITHOUT_CLASSIFICATION	1.2546628353570362E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999763523792	WITHOUT_CLASSIFICATION	2.3647620756690318E-8	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999487138716636	WITHOUT_CLASSIFICATION	5.128612833634731E-5	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999903094372637	WITHOUT_CLASSIFICATION	9.69056273631027E-6	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999126880752875	WITHOUT_CLASSIFICATION	8.731192471245692E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999126880752875	WITHOUT_CLASSIFICATION	8.731192471245692E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999895997958811	WITHOUT_CLASSIFICATION	1.0400204118983475E-5	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999019073440333	WITHOUT_CLASSIFICATION	9.809265596672473E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9998586585651075	WITHOUT_CLASSIFICATION	1.4134143489249163E-4	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999625026008856	WITHOUT_CLASSIFICATION	3.749739911443262E-5	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999997232414048	WITHOUT_CLASSIFICATION	2.767585950828431E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9978514332899422	WITHOUT_CLASSIFICATION	0.0021485667100578105	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999348561583153	WITHOUT_CLASSIFICATION	6.514384168472792E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999995216765423	WITHOUT_CLASSIFICATION	4.783234578024347E-7	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999986264177992	WITHOUT_CLASSIFICATION	1.3735822007231858E-6	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999597246676494	WITHOUT_CLASSIFICATION	4.027533235053806E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999999858906141	WITHOUT_CLASSIFICATION	1.4109385946073326E-8	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999950660439	WITHOUT_CLASSIFICATION	4.933956106694197E-9	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999876864099111	WITHOUT_CLASSIFICATION	1.2313590088961019E-5	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999857088246729	WITHOUT_CLASSIFICATION	1.4291175327229952E-5	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999996239198934	WITHOUT_CLASSIFICATION	3.760801066682532E-7	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999996991408856	WITHOUT_CLASSIFICATION	3.008591144042978E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999969326637016	WITHOUT_CLASSIFICATION	3.0673362983296428E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999948250486926	WITHOUT_CLASSIFICATION	5.174951307425641E-6	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9996423275685928	WITHOUT_CLASSIFICATION	3.5767243140717356E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999971560757803	WITHOUT_CLASSIFICATION	2.8439242196634287E-6	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998897487968721	WITHOUT_CLASSIFICATION	1.1025120312790669E-4	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999936453932086	WITHOUT_CLASSIFICATION	6.354606791492891E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999594540231	WITHOUT_CLASSIFICATION	4.054597692529401E-8	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998363235483	WITHOUT_CLASSIFICATION	1.6367645177480903E-7	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999998493341385	WITHOUT_CLASSIFICATION	1.5066586148358575E-7	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999996811944422	WITHOUT_CLASSIFICATION	3.188055578195475E-7	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999847017811	WITHOUT_CLASSIFICATION	1.529821893559006E-8	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999945812583784	WITHOUT_CLASSIFICATION	5.418741621584691E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999995785680369	WITHOUT_CLASSIFICATION	4.2143196306195226E-7	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999935936329148	WITHOUT_CLASSIFICATION	6.406367085062497E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999967016916739	WITHOUT_CLASSIFICATION	3.2983083261472217E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999857639693528	WITHOUT_CLASSIFICATION	1.4236030647319744E-5	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999749609616105	WITHOUT_CLASSIFICATION	2.5039038389452406E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999926682968739	WITHOUT_CLASSIFICATION	7.33170312610409E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999877904919476	WITHOUT_CLASSIFICATION	1.2209508052306283E-5	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999855576245748	WITHOUT_CLASSIFICATION	1.4442375425283104E-5	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999998580426771	WITHOUT_CLASSIFICATION	1.419573228968699E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999938387245031	WITHOUT_CLASSIFICATION	6.1612754969420555E-6	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997673061447	WITHOUT_CLASSIFICATION	2.3269385537445064E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999954793556813	WITHOUT_CLASSIFICATION	4.5206443186407495E-6	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995726227095301	WITHOUT_CLASSIFICATION	4.273772904699541E-4	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999997240956827	WITHOUT_CLASSIFICATION	2.7590431732598843E-7	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999531630517716	WITHOUT_CLASSIFICATION	4.6836948228399083E-5	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999996001325989	WITHOUT_CLASSIFICATION	3.998674010494556E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999206667047144	WITHOUT_CLASSIFICATION	7.933329528569129E-5	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999997418974668	WITHOUT_CLASSIFICATION	2.5810253321262977E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986096043841	WITHOUT_CLASSIFICATION	1.3903956158971404E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996236196089	WITHOUT_CLASSIFICATION	3.7638039110438104E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990802789256	WITHOUT_CLASSIFICATION	9.197210744574753E-7	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.999999961126195	WITHOUT_CLASSIFICATION	3.887380497776224E-8	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998062603678	WITHOUT_CLASSIFICATION	1.9373963226819033E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963086685781	WITHOUT_CLASSIFICATION	3.691331421883619E-6	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999940603685	WITHOUT_CLASSIFICATION	5.939631481835109E-9	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999966900810092	WITHOUT_CLASSIFICATION	3.309918990804395E-5	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983538327896	WITHOUT_CLASSIFICATION	1.6461672105013892E-6	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.999966900810092	WITHOUT_CLASSIFICATION	3.309918990804395E-5	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999666294941412	WITHOUT_CLASSIFICATION	3.3370505858755086E-5	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999982596113334	WITHOUT_CLASSIFICATION	1.7403886665799883E-6	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999992991180772	WITHOUT_CLASSIFICATION	7.008819227317621E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992212003114	WITHOUT_CLASSIFICATION	7.787996887036081E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998357333249759	WITHOUT_CLASSIFICATION	1.6426667502409924E-4	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999542347601017	WITHOUT_CLASSIFICATION	4.576523989821974E-5	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992061731066	WITHOUT_CLASSIFICATION	7.938268935276215E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9998396627067079	WITHOUT_CLASSIFICATION	1.6033729329207206E-4	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997119722525	WITHOUT_CLASSIFICATION	2.880277475309129E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999998222698958	WITHOUT_CLASSIFICATION	1.777301040869474E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999966089384952	WITHOUT_CLASSIFICATION	3.3910615048696556E-6	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999766994735	WITHOUT_CLASSIFICATION	2.3300526502268587E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999977291671489	WITHOUT_CLASSIFICATION	2.27083285109798E-5	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9996195369200732	WITHOUT_CLASSIFICATION	3.80463079926772E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999753272145528	WITHOUT_CLASSIFICATION	2.4672785447224293E-5	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999959496587	WITHOUT_CLASSIFICATION	4.050341265242643E-9	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999844851582524	WITHOUT_CLASSIFICATION	1.551484174748955E-5	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999844851582524	WITHOUT_CLASSIFICATION	1.551484174748955E-5	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999900669553903	WITHOUT_CLASSIFICATION	9.933044609812055E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999994645702	WITHOUT_CLASSIFICATION	5.354298000289159E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999978947923698	WITHOUT_CLASSIFICATION	2.105207630282215E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999846444962	WITHOUT_CLASSIFICATION	1.5355503677066366E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.999999946138881	WITHOUT_CLASSIFICATION	5.386111895641934E-8	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999998408535635	WITHOUT_CLASSIFICATION	1.5914643649491085E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999862254265733	WITHOUT_CLASSIFICATION	1.3774573426555902E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999957162332787	WITHOUT_CLASSIFICATION	4.2837667213538136E-6	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999991949492851	WITHOUT_CLASSIFICATION	8.050507147305098E-7	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999784470349	WITHOUT_CLASSIFICATION	2.155296509009972E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999043545443	WITHOUT_CLASSIFICATION	9.564545558672102E-8	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999994904237	WITHOUT_CLASSIFICATION	5.095761680480585E-10	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.99999997335962	WITHOUT_CLASSIFICATION	2.6640380064419103E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999999752971399	WITHOUT_CLASSIFICATION	2.4702860106910663E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997465792013	WITHOUT_CLASSIFICATION	2.5342079869772707E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997923808945	WITHOUT_CLASSIFICATION	2.0761910549698873E-7	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999994619925152	WITHOUT_CLASSIFICATION	5.380074847830232E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999987332538477	WITHOUT_CLASSIFICATION	1.2667461523485716E-6	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.999982472712289	WITHOUT_CLASSIFICATION	1.752728771098147E-5	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998708551026	WITHOUT_CLASSIFICATION	1.2914489749196754E-7	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999980966735308	WITHOUT_CLASSIFICATION	1.9033264692728435E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998481056948	WITHOUT_CLASSIFICATION	1.5189430528329397E-7	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999983193482441	WITHOUT_CLASSIFICATION	1.6806517558426208E-6	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999996887499607	WITHOUT_CLASSIFICATION	3.1125003928883217E-7	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999920515732728	WITHOUT_CLASSIFICATION	7.948426727210126E-6	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999963979430766	WITHOUT_CLASSIFICATION	3.602056923269966E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999690312214097	WITHOUT_CLASSIFICATION	3.096877859032635E-5	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9997896310405121	WITHOUT_CLASSIFICATION	2.1036895948792388E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999948186722601	WITHOUT_CLASSIFICATION	5.181327739858282E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996646729889616	WITHOUT_CLASSIFICATION	3.353270110384441E-4	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999958630265716	WITHOUT_CLASSIFICATION	4.136973428337465E-6	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999867717523921	WITHOUT_CLASSIFICATION	1.3228247607915582E-5	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997107598790452	WITHOUT_CLASSIFICATION	2.892401209547514E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999599304963265	WITHOUT_CLASSIFICATION	4.006950367356873E-5	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999954168513408	WITHOUT_CLASSIFICATION	4.583148659191448E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999992854988723	WITHOUT_CLASSIFICATION	7.145011278384492E-7	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999899317612547	WITHOUT_CLASSIFICATION	1.0068238745313344E-5	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999854842255336	WITHOUT_CLASSIFICATION	1.451577446633234E-5	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999997587306507	WITHOUT_CLASSIFICATION	2.412693492820928E-7	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999937030433823	WITHOUT_CLASSIFICATION	6.296956617713172E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999807132042122	WITHOUT_CLASSIFICATION	1.928679578780214E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998464585775	WITHOUT_CLASSIFICATION	1.535414225030582E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999930131929617	WITHOUT_CLASSIFICATION	6.986807038260203E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999667777725512	WITHOUT_CLASSIFICATION	3.322222744877478E-5	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999581075348	WITHOUT_CLASSIFICATION	4.189246529115393E-8	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999999985872061	WITHOUT_CLASSIFICATION	1.412793909526191E-8	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9999746846197398	WITHOUT_CLASSIFICATION	2.531538026011968E-5	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999919574926	WITHOUT_CLASSIFICATION	8.042507368104362E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.999999858638962	WITHOUT_CLASSIFICATION	1.413610380413881E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999999684753643	WITHOUT_CLASSIFICATION	3.152463568402913E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982213529074	WITHOUT_CLASSIFICATION	1.77864709260467E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999880613786	WITHOUT_CLASSIFICATION	1.1938621282250542E-8	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999170178657277	WITHOUT_CLASSIFICATION	8.298213427227848E-5	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999967057280843	WITHOUT_CLASSIFICATION	3.294271915617943E-6	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999886333022081	WITHOUT_CLASSIFICATION	1.1366697791759273E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999918070049044	WITHOUT_CLASSIFICATION	8.192995095569395E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999918070049044	WITHOUT_CLASSIFICATION	8.192995095569395E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999547685546148	WITHOUT_CLASSIFICATION	4.523144538509285E-5	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999504182634044	WITHOUT_CLASSIFICATION	4.9581736595641685E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999987565401823	WITHOUT_CLASSIFICATION	1.2434598177083117E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999894589554648	WITHOUT_CLASSIFICATION	1.054104453529857E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999984628276443	WITHOUT_CLASSIFICATION	1.5371723556918604E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997293760886	WITHOUT_CLASSIFICATION	2.706239114616784E-7	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999999587260168	WITHOUT_CLASSIFICATION	4.12739832499107E-8	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999728840535319	WITHOUT_CLASSIFICATION	2.7115946468158473E-5	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999999875613888	WITHOUT_CLASSIFICATION	1.243861119893853E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999925466049961	WITHOUT_CLASSIFICATION	7.453395003833506E-6	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999970505525713	WITHOUT_CLASSIFICATION	2.949447428809262E-6	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999833590707016	WITHOUT_CLASSIFICATION	1.6640929298458904E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999854772281117	WITHOUT_CLASSIFICATION	1.4522771888323339E-5	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999997818721112	WITHOUT_CLASSIFICATION	2.1812788868444005E-7	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999996721402857	WITHOUT_CLASSIFICATION	3.2785971426872453E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999929651985516	WITHOUT_CLASSIFICATION	7.034801448404631E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995074288704	WITHOUT_CLASSIFICATION	4.925711296428194E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999932485825327	WITHOUT_CLASSIFICATION	6.751417467269226E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9996642513810768	WITHOUT_CLASSIFICATION	3.357486189232092E-4	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999960687170224	WITHOUT_CLASSIFICATION	3.931282977589698E-6	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999990552708	WITHOUT_CLASSIFICATION	9.44729227523428E-10	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999989145067073	WITHOUT_CLASSIFICATION	1.0854932926959597E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999416358515614	WITHOUT_CLASSIFICATION	5.8364148438565326E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999574387327601	WITHOUT_CLASSIFICATION	4.256126723979932E-5	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9808569721158201	WITHOUT_CLASSIFICATION	0.019143027884179806	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9950331128275333	WITHOUT_CLASSIFICATION	0.004966887172466822	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999997252426295	WITHOUT_CLASSIFICATION	2.7475737058514433E-7	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995625227461561	WITHOUT_CLASSIFICATION	4.374772538438727E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999992602497867	WITHOUT_CLASSIFICATION	7.397502132531884E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999416358515614	WITHOUT_CLASSIFICATION	5.8364148438565326E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999913445647907	WITHOUT_CLASSIFICATION	8.655435209292039E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999837770656165	WITHOUT_CLASSIFICATION	1.622293438349476E-4	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.999913556204193	WITHOUT_CLASSIFICATION	8.644379580709832E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999978783094656	WITHOUT_CLASSIFICATION	2.121690534478709E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999124037036	WITHOUT_CLASSIFICATION	8.759629648512585E-8	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999995348365839	WITHOUT_CLASSIFICATION	4.651634160748282E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999999305883694	WITHOUT_CLASSIFICATION	6.941163053449997E-8	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999350095344	WITHOUT_CLASSIFICATION	6.499046550605795E-8	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999995912896854	WITHOUT_CLASSIFICATION	4.0871031452414715E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999978783094656	WITHOUT_CLASSIFICATION	2.121690534478709E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999998002455399	WITHOUT_CLASSIFICATION	1.997544600477277E-7	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998787172338	WITHOUT_CLASSIFICATION	1.2128276610129782E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999908488369454	WITHOUT_CLASSIFICATION	9.151163054607062E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999514097101007	WITHOUT_CLASSIFICATION	4.85902898993532E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999224756239	WITHOUT_CLASSIFICATION	7.752437602856161E-8	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999999043545443	WITHOUT_CLASSIFICATION	9.564545558672102E-8	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999959685662136	WITHOUT_CLASSIFICATION	4.031433786289327E-6	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.999998625823578	WITHOUT_CLASSIFICATION	1.374176421954462E-6	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999997339441887	WITHOUT_CLASSIFICATION	2.660558112953968E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9999974399172435	WITHOUT_CLASSIFICATION	2.5600827564529945E-6	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999777159988947	WITHOUT_CLASSIFICATION	2.2284001105307583E-5	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999950419822109	WITHOUT_CLASSIFICATION	4.958017789176762E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999991975541707	WITHOUT_CLASSIFICATION	8.02445829366919E-7	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999987679608937	WITHOUT_CLASSIFICATION	1.232039106362856E-6	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999906996298085	WITHOUT_CLASSIFICATION	9.300370191426096E-6	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999997161411269	WITHOUT_CLASSIFICATION	2.838588730136692E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998864606416381	WITHOUT_CLASSIFICATION	1.1353935836183908E-4	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999998356475066	WITHOUT_CLASSIFICATION	1.643524934294566E-7	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999634824699	WITHOUT_CLASSIFICATION	3.651753009602839E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999992837610381	WITHOUT_CLASSIFICATION	7.162389619060149E-6	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999993515155521	WITHOUT_CLASSIFICATION	6.484844479079327E-7	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999995011618528	WITHOUT_CLASSIFICATION	4.988381472184645E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999940725160581	WITHOUT_CLASSIFICATION	5.927483941951139E-6	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999989445941966	WITHOUT_CLASSIFICATION	1.055405803403124E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999991890791893	WITHOUT_CLASSIFICATION	8.109208106791353E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999899166014834	WITHOUT_CLASSIFICATION	1.008339851667628E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999944317353632	WITHOUT_CLASSIFICATION	5.568264636746465E-6	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997685481484	WITHOUT_CLASSIFICATION	2.314518516066377E-7	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998058137699	WITHOUT_CLASSIFICATION	1.9418623007579452E-7	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999998573611831	WITHOUT_CLASSIFICATION	1.4263881683099613E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999960046330957	WITHOUT_CLASSIFICATION	3.995366904261416E-6	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999926146716761	WITHOUT_CLASSIFICATION	7.385328323883112E-6	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.999989312359845	WITHOUT_CLASSIFICATION	1.0687640155067642E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990819114992	WITHOUT_CLASSIFICATION	9.180885006630599E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992538124489	WITHOUT_CLASSIFICATION	7.461875511459699E-7	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999862503284691	WITHOUT_CLASSIFICATION	1.3749671530888236E-5	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999488264755583	WITHOUT_CLASSIFICATION	5.117352444168634E-5	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999996102572342	WITHOUT_CLASSIFICATION	3.8974276590944394E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999963813695	WITHOUT_CLASSIFICATION	3.6186305822922925E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997873513553414	WITHOUT_CLASSIFICATION	2.126486446585843E-4	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999852830805731	WITHOUT_CLASSIFICATION	1.471691942675409E-5	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999997444010786	WITHOUT_CLASSIFICATION	2.5559892137041734E-7	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999992708179035	WITHOUT_CLASSIFICATION	7.29182096469731E-7	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9997857972176737	WITHOUT_CLASSIFICATION	2.1420278232629718E-4	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999823707094907	WITHOUT_CLASSIFICATION	1.7629290509289436E-5	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999880127983147	WITHOUT_CLASSIFICATION	1.1987201685314998E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999993423131084	WITHOUT_CLASSIFICATION	6.576868916284881E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999226701622	WITHOUT_CLASSIFICATION	7.732983782762337E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999808167364756	WITHOUT_CLASSIFICATION	1.9183263524407356E-4	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.99999907503495	WITHOUT_CLASSIFICATION	9.249650499011812E-7	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999997311797938	WITHOUT_CLASSIFICATION	2.688202062720341E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999843022902566	WITHOUT_CLASSIFICATION	1.5697709743476988E-5	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999994584557302	WITHOUT_CLASSIFICATION	5.41544269768619E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988011580574522	WITHOUT_CLASSIFICATION	0.001198841942547815	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999999947465278	WITHOUT_CLASSIFICATION	5.253472199619737E-8	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999976147953209	WITHOUT_CLASSIFICATION	2.385204679115334E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999988625466343	WITHOUT_CLASSIFICATION	1.1374533656919117E-5	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999392331239	WITHOUT_CLASSIFICATION	6.076687612597129E-8	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999993121862499	WITHOUT_CLASSIFICATION	6.878137500617742E-7	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999992724561597	WITHOUT_CLASSIFICATION	7.275438402447915E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999155798701	WITHOUT_CLASSIFICATION	8.442012999256382E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999983512814592	WITHOUT_CLASSIFICATION	1.6487185407786578E-6	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990819114992	WITHOUT_CLASSIFICATION	9.180885006630599E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999810585975758	WITHOUT_CLASSIFICATION	1.8941402424196814E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999880286827	WITHOUT_CLASSIFICATION	1.1971317300716185E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999991532849959	WITHOUT_CLASSIFICATION	8.467150040694865E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999946803498914	WITHOUT_CLASSIFICATION	5.3196501086969615E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999952493147858	WITHOUT_CLASSIFICATION	4.750685214231022E-6	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999840042027376	WITHOUT_CLASSIFICATION	1.5995797262318333E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999144117341	WITHOUT_CLASSIFICATION	8.558826590125391E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999987846000339	WITHOUT_CLASSIFICATION	1.2153999660648098E-6	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999711707437	WITHOUT_CLASSIFICATION	2.882925634321866E-8	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999999096951515	WITHOUT_CLASSIFICATION	9.030484846411464E-8	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999674577421	WITHOUT_CLASSIFICATION	3.2542257793135057E-8	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999509503326033	WITHOUT_CLASSIFICATION	4.9049667396829144E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999665900078	WITHOUT_CLASSIFICATION	3.340999215543196E-8	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999997012743792	WITHOUT_CLASSIFICATION	2.9872562078140286E-6	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999666294941412	WITHOUT_CLASSIFICATION	3.3370505858755086E-5	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998388431262	WITHOUT_CLASSIFICATION	1.611568738004051E-7	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998719923863	WITHOUT_CLASSIFICATION	1.2800761378135003E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999994510549235	WITHOUT_CLASSIFICATION	5.489450765192406E-7	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999984900803411	WITHOUT_CLASSIFICATION	1.5099196588462337E-6	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999843625671	WITHOUT_CLASSIFICATION	1.5637432854834175E-8	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999971829018737	WITHOUT_CLASSIFICATION	2.8170981263510455E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999971829018737	WITHOUT_CLASSIFICATION	2.8170981263510455E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999986735671339	WITHOUT_CLASSIFICATION	1.3264328660723738E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999983053391038	WITHOUT_CLASSIFICATION	1.6946608962170965E-6	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999840246133216	WITHOUT_CLASSIFICATION	1.5975386678438084E-5	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999992227703587	WITHOUT_CLASSIFICATION	7.772296413711346E-7	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999986357723072	WITHOUT_CLASSIFICATION	1.3642276928076305E-5	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999626714028083	WITHOUT_CLASSIFICATION	3.732859719176338E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999876532590668	WITHOUT_CLASSIFICATION	1.2346740933150673E-5	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999981453577779	WITHOUT_CLASSIFICATION	1.8546422221532224E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999981453577779	WITHOUT_CLASSIFICATION	1.8546422221532224E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999968022854804	WITHOUT_CLASSIFICATION	3.197714519507505E-6	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.999990054374468	WITHOUT_CLASSIFICATION	9.945625532087119E-6	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999503579709228	WITHOUT_CLASSIFICATION	4.9642029077191064E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989218647033	WITHOUT_CLASSIFICATION	1.0781352967064022E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989218647033	WITHOUT_CLASSIFICATION	1.0781352967064022E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999989218647033	WITHOUT_CLASSIFICATION	1.0781352967064022E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999283155103267	WITHOUT_CLASSIFICATION	7.168448967335127E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999995229577744	WITHOUT_CLASSIFICATION	4.770422256726072E-7	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999998932951577	WITHOUT_CLASSIFICATION	1.0670484235952532E-7	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999510626204782	WITHOUT_CLASSIFICATION	4.89373795217729E-5	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999947773530355	WITHOUT_CLASSIFICATION	5.222646964538684E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999999925433011	WITHOUT_CLASSIFICATION	7.456698892844903E-9	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999283869297	WITHOUT_CLASSIFICATION	7.161307023907277E-8	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999469223580857	WITHOUT_CLASSIFICATION	5.30776419143743E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999975984767265	WITHOUT_CLASSIFICATION	2.4015232734530786E-6	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999970882402447	WITHOUT_CLASSIFICATION	2.911759755229227E-6	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999927257219805	WITHOUT_CLASSIFICATION	7.274278019485656E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9999367316090204	WITHOUT_CLASSIFICATION	6.326839097962528E-5	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999994620290296	WITHOUT_CLASSIFICATION	5.379709704774224E-7	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999997458203053	WITHOUT_CLASSIFICATION	2.541796947207262E-7	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999973140751499	WITHOUT_CLASSIFICATION	2.6859248501521755E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999976533050414	WITHOUT_CLASSIFICATION	2.3466949585027298E-6	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999741835788651	WITHOUT_CLASSIFICATION	2.5816421134820055E-5	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999741835788651	WITHOUT_CLASSIFICATION	2.5816421134820055E-5	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999829380147233	WITHOUT_CLASSIFICATION	1.706198527674067E-5	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999829380147233	WITHOUT_CLASSIFICATION	1.706198527674067E-5	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999843460721333	WITHOUT_CLASSIFICATION	1.5653927866787555E-5	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999804412167594	WITHOUT_CLASSIFICATION	1.9558783240580678E-5	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999804412167594	WITHOUT_CLASSIFICATION	1.9558783240580678E-5	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999945589455814	WITHOUT_CLASSIFICATION	5.441054418525455E-6	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999884965329984	WITHOUT_CLASSIFICATION	1.1503467001740785E-5	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999977449887085	WITHOUT_CLASSIFICATION	2.2550112914577624E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999971829018737	WITHOUT_CLASSIFICATION	2.8170981263510455E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999972206537351	WITHOUT_CLASSIFICATION	2.7793462649538556E-6	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999884965329984	WITHOUT_CLASSIFICATION	1.1503467001740774E-5	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9996472319155687	WITHOUT_CLASSIFICATION	3.527680844312984E-4	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999904884065747	WITHOUT_CLASSIFICATION	9.511593425295963E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999967036852165	WITHOUT_CLASSIFICATION	3.296314783585946E-6	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999972276925114	WITHOUT_CLASSIFICATION	2.7723074884824206E-6	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998354192308	WITHOUT_CLASSIFICATION	1.645807692634639E-7	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999995541261225	WITHOUT_CLASSIFICATION	4.45873877548295E-7	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999992490107801	WITHOUT_CLASSIFICATION	7.50989219911599E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9989886617496112	WITHOUT_CLASSIFICATION	0.0010113382503887597	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9998941600337913	WITHOUT_CLASSIFICATION	1.0583996620871972E-4	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9998657107674862	WITHOUT_CLASSIFICATION	1.342892325137699E-4	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999164923522	WITHOUT_CLASSIFICATION	8.35076477783732E-8	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999683550806597	WITHOUT_CLASSIFICATION	3.164491934017315E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704384086	WITHOUT_CLASSIFICATION	3.1295615914349253E-6	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999983259293853	WITHOUT_CLASSIFICATION	1.6740706146275094E-6	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998595320519565	WITHOUT_CLASSIFICATION	1.4046794804353947E-4	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999987829733156	WITHOUT_CLASSIFICATION	1.2170266844917109E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999977813182633	WITHOUT_CLASSIFICATION	2.2186817365683704E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976052122512	WITHOUT_CLASSIFICATION	2.394787748725224E-6	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999976052122512	WITHOUT_CLASSIFICATION	2.394787748725224E-6	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999993966370787	WITHOUT_CLASSIFICATION	6.033629212457924E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997165381369	WITHOUT_CLASSIFICATION	2.834618630698429E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999993427706054	WITHOUT_CLASSIFICATION	6.572293946052103E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999952896400792	WITHOUT_CLASSIFICATION	4.710359920735085E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999996900104331	WITHOUT_CLASSIFICATION	3.099895668574519E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999999309515405	WITHOUT_CLASSIFICATION	6.904845949108689E-7	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999997748274106	WITHOUT_CLASSIFICATION	2.2517258933784229E-7	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999982950499205	WITHOUT_CLASSIFICATION	1.7049500793979181E-6	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999806123595616	WITHOUT_CLASSIFICATION	1.9387640438359167E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999454110997	WITHOUT_CLASSIFICATION	5.458890035818235E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999997676605146	WITHOUT_CLASSIFICATION	2.3233948546706195E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999509503326033	WITHOUT_CLASSIFICATION	4.9049667396829144E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999760130337	WITHOUT_CLASSIFICATION	2.398696630431342E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999755331385747	WITHOUT_CLASSIFICATION	2.4466861425310443E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999949539132984	WITHOUT_CLASSIFICATION	5.04608670165154E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999707221882496	WITHOUT_CLASSIFICATION	2.9277811750328872E-5	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999559631042	WITHOUT_CLASSIFICATION	4.40368958245E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999559631042	WITHOUT_CLASSIFICATION	4.40368958245E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999952496498914	WITHOUT_CLASSIFICATION	4.7503501086704835E-6	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999916306472328	WITHOUT_CLASSIFICATION	8.369352767165301E-6	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9996717593269882	WITHOUT_CLASSIFICATION	3.2824067301188417E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998629214002458	WITHOUT_CLASSIFICATION	1.3707859975424082E-4	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999590176560704	WITHOUT_CLASSIFICATION	4.0982343929612784E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9998930705448201	WITHOUT_CLASSIFICATION	1.0692945517995725E-4	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998104980976	WITHOUT_CLASSIFICATION	1.8950190231945182E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786702578569	WITHOUT_CLASSIFICATION	2.1329742143057764E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999896978158668	WITHOUT_CLASSIFICATION	1.0302184133263006E-5	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999996406350492	WITHOUT_CLASSIFICATION	3.5936495080769485E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999999539209338	WITHOUT_CLASSIFICATION	4.607906621222107E-8	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999786702578569	WITHOUT_CLASSIFICATION	2.1329742143057764E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999979138604497	WITHOUT_CLASSIFICATION	2.0861395503308772E-6	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999260040003022	WITHOUT_CLASSIFICATION	7.399599969791137E-5	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9999990609324909	WITHOUT_CLASSIFICATION	9.390675091336425E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999943267684921	WITHOUT_CLASSIFICATION	5.673231507941561E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999171860774	WITHOUT_CLASSIFICATION	8.28139226554363E-8	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998908402892	WITHOUT_CLASSIFICATION	1.0915971082803814E-7	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998411962685	WITHOUT_CLASSIFICATION	1.588037315997958E-7	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999988798570931	WITHOUT_CLASSIFICATION	1.1201429068801059E-6	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999999066714816	WITHOUT_CLASSIFICATION	9.332851836194885E-8	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999951584198444	WITHOUT_CLASSIFICATION	4.84158015556648E-6	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999995089842479	WITHOUT_CLASSIFICATION	4.910157520938586E-7	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999895049346715	WITHOUT_CLASSIFICATION	1.0495065328455878E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999110305418	WITHOUT_CLASSIFICATION	8.896945830341922E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997469230821	WITHOUT_CLASSIFICATION	2.5307691788187366E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999854968128186	WITHOUT_CLASSIFICATION	1.4503187181478344E-5	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999999981770228	WITHOUT_CLASSIFICATION	1.8229772020558514E-8	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999985464534	WITHOUT_CLASSIFICATION	1.4535466070871239E-8	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997895047313319	WITHOUT_CLASSIFICATION	2.1049526866821487E-4	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997794960845274	WITHOUT_CLASSIFICATION	2.2050391547264635E-4	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998799989244	WITHOUT_CLASSIFICATION	1.2000107567279422E-7	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999971182160432	WITHOUT_CLASSIFICATION	2.8817839567328E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999999259377838	WITHOUT_CLASSIFICATION	7.40622162166334E-8	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9996118120550871	WITHOUT_CLASSIFICATION	3.88187944912805E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999908638620383	WITHOUT_CLASSIFICATION	9.136137961713392E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.99999994829044	WITHOUT_CLASSIFICATION	5.1709559959891094E-8	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999948259019972	WITHOUT_CLASSIFICATION	5.174098002863642E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994026848668	WITHOUT_CLASSIFICATION	5.973151331853635E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999818230861	WITHOUT_CLASSIFICATION	1.8176913825960548E-8	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998731149652	WITHOUT_CLASSIFICATION	1.268850348739083E-7	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999997487048127	WITHOUT_CLASSIFICATION	2.5129518734466246E-7	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999835504562	WITHOUT_CLASSIFICATION	1.644954390968058E-8	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9998319458410009	WITHOUT_CLASSIFICATION	1.6805415899911162E-4	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999997063732481	WITHOUT_CLASSIFICATION	2.936267519247614E-7	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999754597932	WITHOUT_CLASSIFICATION	2.4540206751529204E-8	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999800140963	WITHOUT_CLASSIFICATION	1.998590377764281E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999951295551966	WITHOUT_CLASSIFICATION	4.870444803460227E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998750559025446	WITHOUT_CLASSIFICATION	1.249440974554627E-4	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999985607722666	WITHOUT_CLASSIFICATION	1.4392277334234295E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999007441057	WITHOUT_CLASSIFICATION	9.925589424105713E-8	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999988715035949	WITHOUT_CLASSIFICATION	1.1284964051400741E-6	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999994303267972	WITHOUT_CLASSIFICATION	5.696732027617803E-7	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999934071376944	WITHOUT_CLASSIFICATION	6.592862305666378E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999199232869	WITHOUT_CLASSIFICATION	8.007671308776644E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999179688063	WITHOUT_CLASSIFICATION	8.203119369890467E-8	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999945183273643	WITHOUT_CLASSIFICATION	5.481672635711824E-5	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999962837400993	WITHOUT_CLASSIFICATION	3.7162599008570962E-6	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999343668216096	WITHOUT_CLASSIFICATION	6.563317839043234E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999994579783655	WITHOUT_CLASSIFICATION	5.420216345502205E-7	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999983079395017	WITHOUT_CLASSIFICATION	1.6920604982789363E-6	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999966886149566	WITHOUT_CLASSIFICATION	3.3113850434188407E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976123562592	WITHOUT_CLASSIFICATION	2.3876437407907252E-6	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999692520495	WITHOUT_CLASSIFICATION	3.074795053233275E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999554487122	WITHOUT_CLASSIFICATION	4.455128776776999E-8	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999641038916954	WITHOUT_CLASSIFICATION	3.589610830454765E-5	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999602515973	WITHOUT_CLASSIFICATION	3.974840274853175E-8	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999948967834329	WITHOUT_CLASSIFICATION	5.103216567020856E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999976161993394	WITHOUT_CLASSIFICATION	2.3838006605611854E-6	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999701270661867	WITHOUT_CLASSIFICATION	2.9872933813268608E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999995148554293	WITHOUT_CLASSIFICATION	4.851445708128615E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997687432263	WITHOUT_CLASSIFICATION	2.3125677377913022E-7	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999987106238359	WITHOUT_CLASSIFICATION	1.2893761641172787E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999975707945401	WITHOUT_CLASSIFICATION	2.4292054599498653E-6	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999951395929743	WITHOUT_CLASSIFICATION	4.860407025757023E-6	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9920364322569407	WITHOUT_CLASSIFICATION	0.007963567743059353	DEFECT
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9999379334516825	WITHOUT_CLASSIFICATION	6.206654831742629E-5	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997374898086496	WITHOUT_CLASSIFICATION	2.625101913503782E-4	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976123562592	WITHOUT_CLASSIFICATION	2.3876437407907252E-6	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999774565438341	WITHOUT_CLASSIFICATION	2.2543456165901772E-5	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999995050383508	WITHOUT_CLASSIFICATION	4.949616492851468E-7	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998389587375051	WITHOUT_CLASSIFICATION	1.6104126249488055E-4	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999995718314838	WITHOUT_CLASSIFICATION	4.2816851615057304E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997262120423892	WITHOUT_CLASSIFICATION	2.737879576107962E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999851851367338	WITHOUT_CLASSIFICATION	1.481486326621713E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999896978158668	WITHOUT_CLASSIFICATION	1.0302184133263006E-5	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999885117600896	WITHOUT_CLASSIFICATION	1.1488239910345127E-5	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999800140963	WITHOUT_CLASSIFICATION	1.998590377764281E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999930700709782	WITHOUT_CLASSIFICATION	6.929929021880541E-6	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996761358548	WITHOUT_CLASSIFICATION	3.238641451341366E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994266857141	WITHOUT_CLASSIFICATION	5.733142858736254E-7	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996610696785	WITHOUT_CLASSIFICATION	3.3893032145118987E-7	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999990124431889	WITHOUT_CLASSIFICATION	9.875568111115235E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9997227045510781	WITHOUT_CLASSIFICATION	2.7729544892185563E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999536784345	WITHOUT_CLASSIFICATION	4.6321565505386865E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998915363805	WITHOUT_CLASSIFICATION	1.0846361952685021E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9991349746762064	WITHOUT_CLASSIFICATION	8.650253237936397E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995649588345	WITHOUT_CLASSIFICATION	4.350411655319411E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999998830886103	WITHOUT_CLASSIFICATION	1.1691138973744669E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999646698546	WITHOUT_CLASSIFICATION	3.533014540165955E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995440167316	WITHOUT_CLASSIFICATION	4.5598326839412415E-7	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999995440167316	WITHOUT_CLASSIFICATION	4.5598326839412415E-7	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999979597909321	WITHOUT_CLASSIFICATION	2.040209067843815E-6	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999993639775421	WITHOUT_CLASSIFICATION	6.36022457940601E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997830788365	WITHOUT_CLASSIFICATION	2.169211634142164E-7	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999795288497044	WITHOUT_CLASSIFICATION	2.0471150295572213E-5	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999987750682	WITHOUT_CLASSIFICATION	1.224931801725386E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999985757118847	WITHOUT_CLASSIFICATION	1.4242881154035763E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999997341433311	WITHOUT_CLASSIFICATION	2.658566688744992E-7	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999759384129745	WITHOUT_CLASSIFICATION	2.4061587025447348E-5	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999990282551714	WITHOUT_CLASSIFICATION	9.717448286132886E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999999696491739	WITHOUT_CLASSIFICATION	3.035082611781063E-8	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999995863015615	WITHOUT_CLASSIFICATION	4.1369843841230414E-7	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997889701098	WITHOUT_CLASSIFICATION	2.1102989029416692E-7	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997804126444	WITHOUT_CLASSIFICATION	2.1958735575637044E-7	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999562116146	WITHOUT_CLASSIFICATION	4.378838535100559E-8	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999953688607762	WITHOUT_CLASSIFICATION	4.6311392237282934E-6	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.999986061289802	WITHOUT_CLASSIFICATION	1.3938710197875072E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999961797072219	WITHOUT_CLASSIFICATION	3.820292778181046E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999888790176	WITHOUT_CLASSIFICATION	1.1120982235862689E-8	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999994307677381	WITHOUT_CLASSIFICATION	5.692322618168756E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998747628443968	WITHOUT_CLASSIFICATION	1.2523715560315628E-4	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993235620679914	WITHOUT_CLASSIFICATION	6.764379320085606E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999789317283	WITHOUT_CLASSIFICATION	2.1068271718835038E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999529396076	WITHOUT_CLASSIFICATION	4.706039237015318E-8	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.999902880976826	WITHOUT_CLASSIFICATION	9.711902317401042E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999517087063	WITHOUT_CLASSIFICATION	4.829129368602297E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896554081723	WITHOUT_CLASSIFICATION	1.0344591827732644E-5	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999992793797029	WITHOUT_CLASSIFICATION	7.206202971095082E-7	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999996526610485	WITHOUT_CLASSIFICATION	3.4733895146251937E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999885334251091	WITHOUT_CLASSIFICATION	1.1466574890954159E-5	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999932831693528	WITHOUT_CLASSIFICATION	6.716830647225677E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.996192926653789	WITHOUT_CLASSIFICATION	0.003807073346210988	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9989334874064139	WITHOUT_CLASSIFICATION	0.0010665125935862213	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999764155956429	WITHOUT_CLASSIFICATION	2.358440435715715E-5	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999916661929306	WITHOUT_CLASSIFICATION	8.3338070694869E-6	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999964175503405	WITHOUT_CLASSIFICATION	3.5824496595069327E-6	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999980862072471	WITHOUT_CLASSIFICATION	1.91379275298602E-6	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999987362125732	WITHOUT_CLASSIFICATION	1.2637874267947665E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999988815246664	WITHOUT_CLASSIFICATION	1.118475333526206E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997310045698	WITHOUT_CLASSIFICATION	2.6899543018158685E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999981486283328	WITHOUT_CLASSIFICATION	1.8513716671670868E-6	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995990329913	WITHOUT_CLASSIFICATION	4.009670088076745E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999945173685	WITHOUT_CLASSIFICATION	5.482631509087014E-9	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9990287856856083	WITHOUT_CLASSIFICATION	9.712143143917237E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999052216124442	WITHOUT_CLASSIFICATION	9.477838755577205E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999854567925998	WITHOUT_CLASSIFICATION	1.4543207400311366E-5	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996385396251	WITHOUT_CLASSIFICATION	3.6146037479937717E-7	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9917412233343852	WITHOUT_CLASSIFICATION	0.008258776665614854	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999703986134	WITHOUT_CLASSIFICATION	2.9601386597653333E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999995820037021	WITHOUT_CLASSIFICATION	4.1799629786068376E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999022168441	WITHOUT_CLASSIFICATION	9.778315589656776E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998815910406	WITHOUT_CLASSIFICATION	1.1840895948701227E-7	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999992095672463	WITHOUT_CLASSIFICATION	7.904327537377431E-7	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999998684584576	WITHOUT_CLASSIFICATION	1.31541542481336E-7	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999989909236268	WITHOUT_CLASSIFICATION	1.0090763732279168E-6	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999970394933285	WITHOUT_CLASSIFICATION	2.9605066714381575E-6	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.999848070771725	WITHOUT_CLASSIFICATION	1.5192922827499252E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999949710214413	WITHOUT_CLASSIFICATION	5.028978558710261E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999995910290944	WITHOUT_CLASSIFICATION	4.089709056679994E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.99999099712497	WITHOUT_CLASSIFICATION	9.002875030064016E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999811334541879	WITHOUT_CLASSIFICATION	1.8866545812069415E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999965981288124	WITHOUT_CLASSIFICATION	3.4018711876712035E-6	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999760673346619	WITHOUT_CLASSIFICATION	2.393266533814175E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999992392292308	WITHOUT_CLASSIFICATION	7.607707690880738E-7	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999958530063968	WITHOUT_CLASSIFICATION	4.1469936031534155E-6	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999992315029447	WITHOUT_CLASSIFICATION	7.68497055356274E-7	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999998509562507	WITHOUT_CLASSIFICATION	1.4904374934949449E-7	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997769183285	WITHOUT_CLASSIFICATION	2.230816715845274E-7	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998756004066	WITHOUT_CLASSIFICATION	1.2439959345207544E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999997884516867	WITHOUT_CLASSIFICATION	2.115483132682499E-7	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997433037328	WITHOUT_CLASSIFICATION	2.566962672971831E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999997884516867	WITHOUT_CLASSIFICATION	2.115483132682499E-7	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999964011741475	WITHOUT_CLASSIFICATION	3.5988258524950394E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999997625155642	WITHOUT_CLASSIFICATION	2.3748443572874453E-7	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999971310296153	WITHOUT_CLASSIFICATION	2.8689703847123264E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999975935868688	WITHOUT_CLASSIFICATION	2.4064131311641015E-6	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999995241332973	WITHOUT_CLASSIFICATION	4.758667027092935E-7	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999964555689518	WITHOUT_CLASSIFICATION	3.5444310482600894E-6	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999989451545749	WITHOUT_CLASSIFICATION	1.0548454251120552E-6	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999962733233941	WITHOUT_CLASSIFICATION	3.726676605895279E-6	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999899917167899	WITHOUT_CLASSIFICATION	1.000828321008773E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998863272456	WITHOUT_CLASSIFICATION	1.136727544475183E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998726136216	WITHOUT_CLASSIFICATION	1.2738637849160238E-7	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999999830689902	WITHOUT_CLASSIFICATION	1.693100980172324E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999983986992668	WITHOUT_CLASSIFICATION	1.6013007332148173E-6	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999275896743773	WITHOUT_CLASSIFICATION	7.241032562263082E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998774660936	WITHOUT_CLASSIFICATION	1.2253390640247613E-7	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999104750946	WITHOUT_CLASSIFICATION	8.95249054857465E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999999679415615	WITHOUT_CLASSIFICATION	3.205843849302766E-8	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999988924404161	WITHOUT_CLASSIFICATION	1.107559583919175E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999999840964608	WITHOUT_CLASSIFICATION	1.590353918743823E-7	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999963792188803	WITHOUT_CLASSIFICATION	3.6207811195519567E-6	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999987213283366	WITHOUT_CLASSIFICATION	1.2786716633635721E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999190654040859	WITHOUT_CLASSIFICATION	8.093459591409936E-5	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9998257129640534	WITHOUT_CLASSIFICATION	1.742870359466059E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999988865919949	WITHOUT_CLASSIFICATION	1.1134080051014918E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999934609594641	WITHOUT_CLASSIFICATION	6.539040535987193E-6	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9804577718433513	WITHOUT_CLASSIFICATION	0.019542228156648633	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999257061112	WITHOUT_CLASSIFICATION	7.429388880003757E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999919320212799	WITHOUT_CLASSIFICATION	8.067978720041098E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994405941919	WITHOUT_CLASSIFICATION	5.5940580811905E-7	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999885270387099	WITHOUT_CLASSIFICATION	1.1472961290072206E-5	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999963502484783	WITHOUT_CLASSIFICATION	3.649751521679179E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9988552229675509	WITHOUT_CLASSIFICATION	0.0011447770324490016	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999899985979262	WITHOUT_CLASSIFICATION	1.0001402073806993E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999971669155522	WITHOUT_CLASSIFICATION	2.8330844477719003E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999882714911292	WITHOUT_CLASSIFICATION	1.172850887071145E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999959147187735	WITHOUT_CLASSIFICATION	4.085281226556249E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998867300272882	WITHOUT_CLASSIFICATION	1.1326997271176941E-4	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996788510681	WITHOUT_CLASSIFICATION	3.2114893190550144E-7	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999833482158226	WITHOUT_CLASSIFICATION	1.6651784177416216E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999902060101917	WITHOUT_CLASSIFICATION	9.793989808181236E-6	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999953588442635	WITHOUT_CLASSIFICATION	4.641155736481995E-6	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999728216917001	WITHOUT_CLASSIFICATION	2.717830829986658E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999864346837772	WITHOUT_CLASSIFICATION	1.3565316222697453E-5	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9804577718433513	WITHOUT_CLASSIFICATION	0.019542228156648633	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999610216820293	WITHOUT_CLASSIFICATION	3.897831797083705E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999991288260318	WITHOUT_CLASSIFICATION	8.711739682485284E-7	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999872565050358	WITHOUT_CLASSIFICATION	1.274349496419368E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999925033166671	WITHOUT_CLASSIFICATION	7.4966833328702195E-6	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999976494171297	WITHOUT_CLASSIFICATION	2.3505828703423994E-6	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999830799671032	WITHOUT_CLASSIFICATION	1.6920032896762348E-5	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999993545945589	WITHOUT_CLASSIFICATION	6.454054410468252E-7	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9994016491619444	WITHOUT_CLASSIFICATION	5.983508380555297E-4	DEFECT
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999974796171736	WITHOUT_CLASSIFICATION	2.5203828264780885E-6	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999987670704378	WITHOUT_CLASSIFICATION	1.232929562118778E-6	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999854461877485	WITHOUT_CLASSIFICATION	1.455381225148616E-5	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999879666204	WITHOUT_CLASSIFICATION	1.2033379744194021E-8	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998533999190222	WITHOUT_CLASSIFICATION	1.4660008097785616E-4	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999790303677132	WITHOUT_CLASSIFICATION	2.0969632286793817E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999944122708015	WITHOUT_CLASSIFICATION	5.587729198490768E-6	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999997740561224	WITHOUT_CLASSIFICATION	2.2594387753680573E-7	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999984966268263	WITHOUT_CLASSIFICATION	1.5033731737446424E-6	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999994899343837	WITHOUT_CLASSIFICATION	5.100656163306541E-7	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999997728023008	WITHOUT_CLASSIFICATION	2.271976992005677E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999610216820293	WITHOUT_CLASSIFICATION	3.897831797083705E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999871992972038	WITHOUT_CLASSIFICATION	1.2800702796107076E-5	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999994342567984	WITHOUT_CLASSIFICATION	5.657432017320129E-7	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999987140950151	WITHOUT_CLASSIFICATION	1.2859049849794745E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999962695866857	WITHOUT_CLASSIFICATION	3.7304133143300177E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999874544940832	WITHOUT_CLASSIFICATION	1.2545505916747854E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999845435175264	WITHOUT_CLASSIFICATION	1.545648247360334E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999845435175264	WITHOUT_CLASSIFICATION	1.545648247360334E-5	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884784392316	WITHOUT_CLASSIFICATION	1.152156076847524E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999845435175264	WITHOUT_CLASSIFICATION	1.545648247360334E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9999845435175264	WITHOUT_CLASSIFICATION	1.545648247360334E-5	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999095628949252	WITHOUT_CLASSIFICATION	9.043710507479842E-5	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999523896529308	WITHOUT_CLASSIFICATION	4.7610347069321775E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999996397503826	WITHOUT_CLASSIFICATION	3.6024961725997585E-7	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999969608074406	WITHOUT_CLASSIFICATION	3.039192559306808E-6	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999540035200253	WITHOUT_CLASSIFICATION	4.599647997472639E-5	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999999517572526	WITHOUT_CLASSIFICATION	4.824274737997867E-8	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999927432735659	WITHOUT_CLASSIFICATION	7.256726434100262E-5	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999998066830488	WITHOUT_CLASSIFICATION	1.9331695122894704E-7	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999875018378372	WITHOUT_CLASSIFICATION	1.2498162162729784E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999826610659837	WITHOUT_CLASSIFICATION	1.733893401636399E-5	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999869648770742	WITHOUT_CLASSIFICATION	1.3035122925808389E-5	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998826322328256	WITHOUT_CLASSIFICATION	1.17367767174481E-4	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999920603929147	WITHOUT_CLASSIFICATION	7.939607085294478E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999948212297838	WITHOUT_CLASSIFICATION	5.178770216207171E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999967611041077	WITHOUT_CLASSIFICATION	3.238895892357549E-6	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9938530936020806	WITHOUT_CLASSIFICATION	0.006146906397919414	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963086685781	WITHOUT_CLASSIFICATION	3.691331421883619E-6	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999351656267619	WITHOUT_CLASSIFICATION	6.483437323814644E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999910668141966	WITHOUT_CLASSIFICATION	8.93318580338957E-6	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999949928118537	WITHOUT_CLASSIFICATION	5.007188146402964E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999979020951318	WITHOUT_CLASSIFICATION	2.0979048681370878E-6	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999995521689365	WITHOUT_CLASSIFICATION	4.478310634406342E-7	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999963086685781	WITHOUT_CLASSIFICATION	3.691331421883619E-6	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999257061112	WITHOUT_CLASSIFICATION	7.429388880003757E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999608394466343	WITHOUT_CLASSIFICATION	3.916055336578573E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999988609724657	WITHOUT_CLASSIFICATION	1.1390275343054073E-5	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999217424280371	WITHOUT_CLASSIFICATION	7.825757196281131E-5	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999925692305142	WITHOUT_CLASSIFICATION	7.430769485755509E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999996533524305	WITHOUT_CLASSIFICATION	3.4664756949899968E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999978221959165	WITHOUT_CLASSIFICATION	2.1778040835157637E-6	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999890273201743	WITHOUT_CLASSIFICATION	1.0972679825705401E-5	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999988490375585	WITHOUT_CLASSIFICATION	1.1509624414241046E-6	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999349685372	WITHOUT_CLASSIFICATION	6.503146279807153E-7	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999996024935659	WITHOUT_CLASSIFICATION	3.975064340979936E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999993472831229	WITHOUT_CLASSIFICATION	6.527168770381035E-7	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999929324583436	WITHOUT_CLASSIFICATION	7.067541656381808E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999998708769084	WITHOUT_CLASSIFICATION	1.2912309149756706E-7	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999429113905296	WITHOUT_CLASSIFICATION	5.7088609470520465E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999848845009915	WITHOUT_CLASSIFICATION	1.5115499008535126E-5	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999979342186315	WITHOUT_CLASSIFICATION	2.065781368543532E-6	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999952236484508	WITHOUT_CLASSIFICATION	4.776351549209323E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999999271740935	WITHOUT_CLASSIFICATION	7.28259065258251E-8	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999978497937606	WITHOUT_CLASSIFICATION	2.1502062395169443E-6	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999796018803297	WITHOUT_CLASSIFICATION	2.039811967023084E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999981109524025	WITHOUT_CLASSIFICATION	1.8890475974412097E-6	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999997166297754	WITHOUT_CLASSIFICATION	2.833702246551782E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999988490375585	WITHOUT_CLASSIFICATION	1.1509624414241046E-6	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999981581188021	WITHOUT_CLASSIFICATION	1.841881197781236E-6	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999996325199857	WITHOUT_CLASSIFICATION	3.674800144005776E-7	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999990763002293	WITHOUT_CLASSIFICATION	9.236997706286717E-7	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999972642566456	WITHOUT_CLASSIFICATION	2.7357433544870916E-6	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999823421617	WITHOUT_CLASSIFICATION	1.7657838301831277E-7	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999979101643711	WITHOUT_CLASSIFICATION	2.0898356289581683E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999872278881372	WITHOUT_CLASSIFICATION	1.2772111862768708E-5	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999939332503549	WITHOUT_CLASSIFICATION	6.066749645080035E-6	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999995419214333	WITHOUT_CLASSIFICATION	4.580785667369722E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999922735964573	WITHOUT_CLASSIFICATION	7.72640354281217E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999984957634209	WITHOUT_CLASSIFICATION	1.5042365791357599E-6	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999825194961913	WITHOUT_CLASSIFICATION	1.748050380866065E-5	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999591044132883	WITHOUT_CLASSIFICATION	4.089558671166886E-5	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999998932586168	WITHOUT_CLASSIFICATION	1.0674138313423444E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9997784246483173	WITHOUT_CLASSIFICATION	2.2157535168269816E-4	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998798831883	WITHOUT_CLASSIFICATION	1.201168117002334E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999984957634209	WITHOUT_CLASSIFICATION	1.5042365791357599E-6	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999981108589485	WITHOUT_CLASSIFICATION	1.8891410514893068E-6	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9992856401648769	WITHOUT_CLASSIFICATION	7.143598351231419E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999987177986777	WITHOUT_CLASSIFICATION	1.2822013223440753E-6	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999999691683844	WITHOUT_CLASSIFICATION	3.0831615605940965E-7	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999981774935827	WITHOUT_CLASSIFICATION	1.8225064174321935E-6	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999985109504386	WITHOUT_CLASSIFICATION	1.4890495613894878E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999558505925	WITHOUT_CLASSIFICATION	4.4149407485112605E-7	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964735656577	WITHOUT_CLASSIFICATION	3.5264343423969748E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989637867923	WITHOUT_CLASSIFICATION	1.0362132076638173E-6	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987648287314	WITHOUT_CLASSIFICATION	1.2351712685247225E-6	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984303859302	WITHOUT_CLASSIFICATION	1.5696140697557699E-6	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994402997044	WITHOUT_CLASSIFICATION	5.597002955015889E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999991927619091	WITHOUT_CLASSIFICATION	8.07238090824474E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999991927619091	WITHOUT_CLASSIFICATION	8.07238090824474E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999761661646501	WITHOUT_CLASSIFICATION	2.383383534983951E-5	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999987259445499	WITHOUT_CLASSIFICATION	1.2740554501078745E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999983308448601	WITHOUT_CLASSIFICATION	1.6691551398673518E-6	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999988736927761	WITHOUT_CLASSIFICATION	1.126307223977039E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9998877039947056	WITHOUT_CLASSIFICATION	1.1229600529437357E-4	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980044461118	WITHOUT_CLASSIFICATION	1.99555388824638E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902566848354	WITHOUT_CLASSIFICATION	9.743315164652578E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940261522204	WITHOUT_CLASSIFICATION	5.9738477795472215E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999871965486845	WITHOUT_CLASSIFICATION	1.2803451315472977E-5	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989544489315	WITHOUT_CLASSIFICATION	1.0455510684381466E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980044461118	WITHOUT_CLASSIFICATION	1.99555388824638E-6	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902566848354	WITHOUT_CLASSIFICATION	9.743315164652578E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940261522204	WITHOUT_CLASSIFICATION	5.9738477795472215E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999995655398412	WITHOUT_CLASSIFICATION	4.344601587700017E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999803334336209	WITHOUT_CLASSIFICATION	1.9666566379010797E-5	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999998825514244	WITHOUT_CLASSIFICATION	1.1744857557658196E-7	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999626406411816	WITHOUT_CLASSIFICATION	3.735935881847429E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999978285286083	WITHOUT_CLASSIFICATION	2.1714713917022187E-6	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999995308732054	WITHOUT_CLASSIFICATION	4.6912679460407106E-7	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9991527950417184	WITHOUT_CLASSIFICATION	8.47204958281558E-4	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999918372491206	WITHOUT_CLASSIFICATION	8.162750879511034E-6	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999822465582758	WITHOUT_CLASSIFICATION	1.7753441724207157E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999974477807569	WITHOUT_CLASSIFICATION	2.552219243095674E-6	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999967445901524	WITHOUT_CLASSIFICATION	3.255409847487526E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999607595096746	WITHOUT_CLASSIFICATION	3.92404903254727E-5	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999926460128326	WITHOUT_CLASSIFICATION	7.353987167470248E-6	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999996851807816	WITHOUT_CLASSIFICATION	3.1481921842651865E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997909420327	WITHOUT_CLASSIFICATION	2.0905796724581108E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999993883163915	WITHOUT_CLASSIFICATION	6.116836085783495E-7	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999106587479862	WITHOUT_CLASSIFICATION	8.93412520136829E-5	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999054734547812	WITHOUT_CLASSIFICATION	9.45265452188487E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999999455438709	WITHOUT_CLASSIFICATION	5.445612908502636E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999629219108053	WITHOUT_CLASSIFICATION	3.707808919484536E-5	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999996524650033	WITHOUT_CLASSIFICATION	3.4753499676102E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996477468848028	WITHOUT_CLASSIFICATION	3.5225311519708615E-4	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9994245792567391	WITHOUT_CLASSIFICATION	5.754207432608088E-4	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999500906933716	WITHOUT_CLASSIFICATION	4.990930662829155E-5	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.99999997654425	WITHOUT_CLASSIFICATION	2.3455749984961845E-8	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999962178412911	WITHOUT_CLASSIFICATION	3.7821587088600316E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814899893854	WITHOUT_CLASSIFICATION	1.8510010614651682E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998668411972	WITHOUT_CLASSIFICATION	1.3315880279326406E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999977206725968	WITHOUT_CLASSIFICATION	2.2793274031037767E-6	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994419368331	WITHOUT_CLASSIFICATION	5.580631669069185E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884045204176	WITHOUT_CLASSIFICATION	1.1595479582375447E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999994902305985	WITHOUT_CLASSIFICATION	5.097694014497932E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999994902305985	WITHOUT_CLASSIFICATION	5.097694014497932E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999995302096156	WITHOUT_CLASSIFICATION	4.697903843760699E-7	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998501277394	WITHOUT_CLASSIFICATION	1.4987226061239847E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999439010806538	WITHOUT_CLASSIFICATION	5.609891934629753E-5	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999509503326033	WITHOUT_CLASSIFICATION	4.9049667396829144E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999998894587105	WITHOUT_CLASSIFICATION	1.105412895017688E-7	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999990269195608	WITHOUT_CLASSIFICATION	9.73080439192615E-7	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999768266514288	WITHOUT_CLASSIFICATION	2.317334857116766E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999995769652753	WITHOUT_CLASSIFICATION	4.2303472475551705E-7	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999966035937072	WITHOUT_CLASSIFICATION	3.3964062927471213E-6	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981404841016	WITHOUT_CLASSIFICATION	1.8595158984410734E-6	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998752442592	WITHOUT_CLASSIFICATION	1.2475574080344236E-6	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971542673751	WITHOUT_CLASSIFICATION	2.8457326247892826E-6	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947391321322	WITHOUT_CLASSIFICATION	5.2608678677882306E-6	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940134104495	WITHOUT_CLASSIFICATION	5.9865895505016425E-6	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940866890848	WITHOUT_CLASSIFICATION	5.9133109151438945E-6	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968023862972	WITHOUT_CLASSIFICATION	3.197613702766779E-6	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985956001045	WITHOUT_CLASSIFICATION	1.4043998954480995E-6	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975328588568	WITHOUT_CLASSIFICATION	2.4671411432413933E-6	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970143933777	WITHOUT_CLASSIFICATION	2.985606622360064E-6	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988110433635	WITHOUT_CLASSIFICATION	1.1889566364998915E-6	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999988335982123	WITHOUT_CLASSIFICATION	1.1664017877720735E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992880482923264	WITHOUT_CLASSIFICATION	7.119517076735589E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998358946067873	WITHOUT_CLASSIFICATION	1.6410539321262192E-4	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997393909734	WITHOUT_CLASSIFICATION	2.6060902662797923E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999883204875	WITHOUT_CLASSIFICATION	1.1679512375116119E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.999998885870825	WITHOUT_CLASSIFICATION	1.1141291750049756E-6	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999972924669	WITHOUT_CLASSIFICATION	2.707533158964813E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999999749925147	WITHOUT_CLASSIFICATION	2.5007485337805484E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998358946067873	WITHOUT_CLASSIFICATION	1.6410539321262192E-4	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998358946067873	WITHOUT_CLASSIFICATION	1.6410539321262192E-4	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999874923590262	WITHOUT_CLASSIFICATION	1.2507640973833845E-5	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999959054163582	WITHOUT_CLASSIFICATION	4.094583641780243E-6	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997200715898924	WITHOUT_CLASSIFICATION	2.7992841010754686E-4	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999926822278946	WITHOUT_CLASSIFICATION	7.317772105417509E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704384086	WITHOUT_CLASSIFICATION	3.1295615914349253E-6	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999629219108053	WITHOUT_CLASSIFICATION	3.707808919484536E-5	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999993909514872	WITHOUT_CLASSIFICATION	6.090485128531903E-7	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999971148036485	WITHOUT_CLASSIFICATION	2.885196351534208E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999972017101579	WITHOUT_CLASSIFICATION	2.7982898420260337E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977085115102	WITHOUT_CLASSIFICATION	2.291488489807703E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999992850830971	WITHOUT_CLASSIFICATION	7.149169028219041E-7	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999791573895916	WITHOUT_CLASSIFICATION	2.0842610408267173E-5	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999976905532515	WITHOUT_CLASSIFICATION	2.309446748517487E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999976905532515	WITHOUT_CLASSIFICATION	2.309446748517487E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.99999821313096	WITHOUT_CLASSIFICATION	1.786869040041465E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.99999821313096	WITHOUT_CLASSIFICATION	1.786869040041465E-6	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967416102552	WITHOUT_CLASSIFICATION	3.258389744819305E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995194863069	WITHOUT_CLASSIFICATION	4.805136930893184E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999997228070762	WITHOUT_CLASSIFICATION	2.7719292377354233E-7	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970235488848	WITHOUT_CLASSIFICATION	2.9764511152862455E-6	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999999881661659	WITHOUT_CLASSIFICATION	1.1833834227374444E-8	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999309189486733	WITHOUT_CLASSIFICATION	6.908105132677181E-5	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999600510368857	WITHOUT_CLASSIFICATION	3.994896311434115E-5	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957648387091	WITHOUT_CLASSIFICATION	4.235161290931437E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999977017560947	WITHOUT_CLASSIFICATION	2.2982439053106877E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999995662196861	WITHOUT_CLASSIFICATION	4.337803138208281E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985195140475	WITHOUT_CLASSIFICATION	1.4804859524871972E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999993213686922	WITHOUT_CLASSIFICATION	6.786313078951254E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998863035001	WITHOUT_CLASSIFICATION	1.1369649989285003E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999994220766215	WITHOUT_CLASSIFICATION	5.779233785874927E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999935270875344	WITHOUT_CLASSIFICATION	6.47291246558787E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999989545251079	WITHOUT_CLASSIFICATION	1.0454748920928858E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999989545251079	WITHOUT_CLASSIFICATION	1.0454748920928858E-6	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999997527507581	WITHOUT_CLASSIFICATION	2.4724924178961475E-7	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999850474723537	WITHOUT_CLASSIFICATION	1.495252764642529E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999654533475	WITHOUT_CLASSIFICATION	3.454665255317862E-8	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999504182634044	WITHOUT_CLASSIFICATION	4.9581736595641685E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965348636153	WITHOUT_CLASSIFICATION	3.465136384669075E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990035748867	WITHOUT_CLASSIFICATION	9.96425113289274E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999940073502857	WITHOUT_CLASSIFICATION	5.992649714304318E-6	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999794916962395	WITHOUT_CLASSIFICATION	2.0508303760584636E-5	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999663880677437	WITHOUT_CLASSIFICATION	3.361193225625247E-5	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999502427119	WITHOUT_CLASSIFICATION	4.975728806251277E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999999731647449	WITHOUT_CLASSIFICATION	2.6835255181828434E-8	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999929916677467	WITHOUT_CLASSIFICATION	7.008332253259553E-6	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467709490416	WITHOUT_CLASSIFICATION	5.322905095833277E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996314985441822	WITHOUT_CLASSIFICATION	3.6850145581775163E-4	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996113739862	WITHOUT_CLASSIFICATION	3.886260138853031E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999741117269911	WITHOUT_CLASSIFICATION	2.588827300892538E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998818161582	WITHOUT_CLASSIFICATION	1.1818384190379501E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999897202593101	WITHOUT_CLASSIFICATION	1.0279740689799196E-5	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999840325972061	WITHOUT_CLASSIFICATION	1.5967402793880127E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999142484456	WITHOUT_CLASSIFICATION	8.57515544065923E-8	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999508563472	WITHOUT_CLASSIFICATION	4.914365283325291E-8	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999967562541736	WITHOUT_CLASSIFICATION	3.2437458263040365E-6	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999968666199762	WITHOUT_CLASSIFICATION	3.1333800238280763E-6	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999480440159	WITHOUT_CLASSIFICATION	5.195598404211244E-8	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996352640735	WITHOUT_CLASSIFICATION	3.6473592642808237E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999998073322953	WITHOUT_CLASSIFICATION	1.9266770470830287E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999900341744247	WITHOUT_CLASSIFICATION	9.965825575366901E-6	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999820136178368	WITHOUT_CLASSIFICATION	1.7986382163209306E-4	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999993023117804	WITHOUT_CLASSIFICATION	6.976882196212758E-7	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999926682968739	WITHOUT_CLASSIFICATION	7.33170312610409E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999997473423069	WITHOUT_CLASSIFICATION	2.5265769307338173E-7	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999997063436996	WITHOUT_CLASSIFICATION	2.936563003954401E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9991442832479388	WITHOUT_CLASSIFICATION	8.557167520612864E-4	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999894849622691	WITHOUT_CLASSIFICATION	1.0515037730873507E-5	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999664598197091	WITHOUT_CLASSIFICATION	3.3540180290902825E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999158077252224	WITHOUT_CLASSIFICATION	8.419227477769793E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995074288704	WITHOUT_CLASSIFICATION	4.925711296428194E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999951067448818	WITHOUT_CLASSIFICATION	4.893255118180899E-6	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999961638227343	WITHOUT_CLASSIFICATION	3.836177265643956E-6	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999975648753725	WITHOUT_CLASSIFICATION	2.4351246274258867E-6	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999997445005906	WITHOUT_CLASSIFICATION	2.5549940939871773E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991546259437	WITHOUT_CLASSIFICATION	8.453740562924984E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9999209585551919	WITHOUT_CLASSIFICATION	7.904144480805643E-5	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999997559126687	WITHOUT_CLASSIFICATION	2.440873313325416E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999740408117413	WITHOUT_CLASSIFICATION	2.5959188258661982E-5	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999862063622244	WITHOUT_CLASSIFICATION	1.3793637775630402E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999938941657905	WITHOUT_CLASSIFICATION	6.1058342095449284E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999844851582524	WITHOUT_CLASSIFICATION	1.551484174748955E-5	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999990908110491	WITHOUT_CLASSIFICATION	9.091889508219171E-7	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999940565472447	WITHOUT_CLASSIFICATION	5.943452755293623E-6	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999985147712899	WITHOUT_CLASSIFICATION	1.4852287101000969E-5	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999346106081523	WITHOUT_CLASSIFICATION	6.538939184776327E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999999132505767	WITHOUT_CLASSIFICATION	8.674942329376937E-8	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9996724624189818	WITHOUT_CLASSIFICATION	3.275375810181434E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999964648809073	WITHOUT_CLASSIFICATION	3.5351190926535736E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.999999574530695	WITHOUT_CLASSIFICATION	4.254693049139692E-7	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999999207191309	WITHOUT_CLASSIFICATION	7.928086907881296E-8	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999986644099911	WITHOUT_CLASSIFICATION	1.3355900089961395E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999996142881536	WITHOUT_CLASSIFICATION	3.8571184639026005E-6	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999948146786347	WITHOUT_CLASSIFICATION	5.185321365287713E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999944289271361	WITHOUT_CLASSIFICATION	5.571072863844723E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999977169224331	WITHOUT_CLASSIFICATION	2.2830775668688787E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999944239628382	WITHOUT_CLASSIFICATION	5.576037161712804E-6	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999926124226821	WITHOUT_CLASSIFICATION	7.387577317852295E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999883553945	WITHOUT_CLASSIFICATION	1.1644605504242874E-7	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999616130520264	WITHOUT_CLASSIFICATION	3.83869479736659E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999974185414817	WITHOUT_CLASSIFICATION	2.5814585182719656E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999799599090126	WITHOUT_CLASSIFICATION	2.0040090987540074E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999416358515614	WITHOUT_CLASSIFICATION	5.8364148438565326E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999416358515614	WITHOUT_CLASSIFICATION	5.8364148438565326E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999983082727602	WITHOUT_CLASSIFICATION	1.691727239807081E-5	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999992710932256	WITHOUT_CLASSIFICATION	7.289067742844321E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999866302887	WITHOUT_CLASSIFICATION	1.3369711310709139E-8	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999993935669484	WITHOUT_CLASSIFICATION	6.064330516441238E-7	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999998220622104	WITHOUT_CLASSIFICATION	1.7793778960800307E-7	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999726534375	WITHOUT_CLASSIFICATION	2.7346562355967203E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999997545799802	WITHOUT_CLASSIFICATION	2.4542001978455664E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999845929892707	WITHOUT_CLASSIFICATION	1.5407010729337778E-5	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999773999307235	WITHOUT_CLASSIFICATION	2.2600069276519373E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999995124669319	WITHOUT_CLASSIFICATION	4.875330681506209E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999966879669641	WITHOUT_CLASSIFICATION	3.3120330359634156E-6	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999851941745822	WITHOUT_CLASSIFICATION	1.4805825417728397E-5	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999938854150994	WITHOUT_CLASSIFICATION	6.114584900725738E-6	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999247718706	WITHOUT_CLASSIFICATION	7.522812947059003E-8	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999285067286853	WITHOUT_CLASSIFICATION	7.149327131476102E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999992045482425	WITHOUT_CLASSIFICATION	7.954517574879736E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999616266439733	WITHOUT_CLASSIFICATION	3.837335602666771E-5	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999885444130128	WITHOUT_CLASSIFICATION	1.1455586987245114E-5	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999043615180873	WITHOUT_CLASSIFICATION	9.563848191274786E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999021320086	WITHOUT_CLASSIFICATION	9.78679913848871E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999959335549914	WITHOUT_CLASSIFICATION	4.066445008544496E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999946601383498	WITHOUT_CLASSIFICATION	5.339861650251684E-6	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999877260039379	WITHOUT_CLASSIFICATION	1.2273996062134998E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999011898993404	WITHOUT_CLASSIFICATION	9.88101006596381E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998363514172	WITHOUT_CLASSIFICATION	1.636485827351526E-7	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999871113766082	WITHOUT_CLASSIFICATION	1.2888623391729521E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999928484115845	WITHOUT_CLASSIFICATION	7.151588415437066E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999697056921992	WITHOUT_CLASSIFICATION	3.029430780081066E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999945656932161	WITHOUT_CLASSIFICATION	5.434306783911695E-6	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999999758383609	WITHOUT_CLASSIFICATION	2.41616390965682E-7	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999970835212687	WITHOUT_CLASSIFICATION	2.9164787312505765E-6	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999989926285731	WITHOUT_CLASSIFICATION	1.007371426938166E-6	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.999990541694953	WITHOUT_CLASSIFICATION	9.458305046868785E-6	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999986980088424	WITHOUT_CLASSIFICATION	1.3019911575717472E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999530635781753	WITHOUT_CLASSIFICATION	4.693642182470582E-5	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999530635781753	WITHOUT_CLASSIFICATION	4.693642182470582E-5	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999982315476098	WITHOUT_CLASSIFICATION	1.7684523902014164E-5	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999151950321671	WITHOUT_CLASSIFICATION	8.480496783295043E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999993570786279	WITHOUT_CLASSIFICATION	6.429213720666206E-7	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999982968951309	WITHOUT_CLASSIFICATION	1.7031048691307014E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999821567718	WITHOUT_CLASSIFICATION	1.7843228190759128E-8	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999937704437418	WITHOUT_CLASSIFICATION	6.229556258236888E-6	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9997226878473043	WITHOUT_CLASSIFICATION	2.7731215269564865E-4	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998864764621	WITHOUT_CLASSIFICATION	1.1352353785787413E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9999899088950289	WITHOUT_CLASSIFICATION	1.0091104971131817E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999343884457	WITHOUT_CLASSIFICATION	6.561155422259063E-8	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999929790972694	WITHOUT_CLASSIFICATION	7.020902730703833E-6	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999979726386968	WITHOUT_CLASSIFICATION	2.027361303062433E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999973863646497	WITHOUT_CLASSIFICATION	2.613635350374253E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999996105367951	WITHOUT_CLASSIFICATION	3.8946320501196474E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999942402941376	WITHOUT_CLASSIFICATION	5.759705862368187E-6	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999785288778873	WITHOUT_CLASSIFICATION	2.147112211271328E-5	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999785288778873	WITHOUT_CLASSIFICATION	2.147112211271328E-5	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999576089951365	WITHOUT_CLASSIFICATION	4.239100486351073E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999923135332886	WITHOUT_CLASSIFICATION	7.686466711403184E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999779492623164	WITHOUT_CLASSIFICATION	2.205073768360311E-5	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946421003839	WITHOUT_CLASSIFICATION	5.357899616115319E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995625227461561	WITHOUT_CLASSIFICATION	4.374772538438727E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999993583487448	WITHOUT_CLASSIFICATION	6.41651255269643E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999982176007002	WITHOUT_CLASSIFICATION	1.7823992997241981E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999982176007002	WITHOUT_CLASSIFICATION	1.7823992997241981E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999964965587889	WITHOUT_CLASSIFICATION	3.503441211064511E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999989608118302	WITHOUT_CLASSIFICATION	1.039188169841878E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999516073116352	WITHOUT_CLASSIFICATION	4.8392688364882355E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997182621092	WITHOUT_CLASSIFICATION	2.8173789082299214E-7	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999975525344593	WITHOUT_CLASSIFICATION	2.4474655406358374E-6	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999514097101007	WITHOUT_CLASSIFICATION	4.85902898993532E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999997840666102	WITHOUT_CLASSIFICATION	2.159333898354767E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999977449887085	WITHOUT_CLASSIFICATION	2.2550112914577624E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999245401996	WITHOUT_CLASSIFICATION	7.545980035962382E-8	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999997066586581	WITHOUT_CLASSIFICATION	2.9334134188734404E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9988011580574522	WITHOUT_CLASSIFICATION	0.001198841942547815	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999946803498914	WITHOUT_CLASSIFICATION	5.3196501086969615E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999304203677	WITHOUT_CLASSIFICATION	6.95796322986317E-8	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999843460721333	WITHOUT_CLASSIFICATION	1.5653927866787555E-5	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999885334251091	WITHOUT_CLASSIFICATION	1.1466574890954159E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999995302729296	WITHOUT_CLASSIFICATION	4.697270704688909E-7	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999993748233398	WITHOUT_CLASSIFICATION	6.251766601546222E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999906424907069	WITHOUT_CLASSIFICATION	9.357509293023975E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9996562494213801	WITHOUT_CLASSIFICATION	3.4375057861985145E-4	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999995235205537	WITHOUT_CLASSIFICATION	4.7647944629424505E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999982817818351	WITHOUT_CLASSIFICATION	1.7182181649330239E-6	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999945589455814	WITHOUT_CLASSIFICATION	5.441054418525455E-6	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999871047820904	WITHOUT_CLASSIFICATION	1.2895217909559352E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999993765551353	WITHOUT_CLASSIFICATION	6.23444864763552E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999937703417269	WITHOUT_CLASSIFICATION	6.2296582731460975E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999994157340874	WITHOUT_CLASSIFICATION	5.842659126029709E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999999816563809	WITHOUT_CLASSIFICATION	1.8343618996518476E-8	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999921346214	WITHOUT_CLASSIFICATION	7.8653785787969E-9	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999996549394418	WITHOUT_CLASSIFICATION	3.4506055825109625E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999559631042	WITHOUT_CLASSIFICATION	4.40368958245E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999873046891711	WITHOUT_CLASSIFICATION	1.2695310828949826E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999988028958973	WITHOUT_CLASSIFICATION	1.197104102640754E-6	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999610927719844	WITHOUT_CLASSIFICATION	3.890722801560698E-4	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999996060986852	WITHOUT_CLASSIFICATION	3.939013147512699E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999987514097799	WITHOUT_CLASSIFICATION	1.2485902201076446E-6	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.99996765842151	WITHOUT_CLASSIFICATION	3.234157849003909E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999835213858712	WITHOUT_CLASSIFICATION	1.647861412887185E-5	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999964885602175	WITHOUT_CLASSIFICATION	3.51143978252058E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999987845199116	WITHOUT_CLASSIFICATION	1.2154800883830425E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999902331502987	WITHOUT_CLASSIFICATION	9.766849701252426E-6	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999940922166	WITHOUT_CLASSIFICATION	5.907783363251048E-9	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999976976262488	WITHOUT_CLASSIFICATION	2.302373751163635E-6	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999825725291279	WITHOUT_CLASSIFICATION	1.7427470872116954E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999997134956944	WITHOUT_CLASSIFICATION	2.8650430557703397E-7	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999991601424459	WITHOUT_CLASSIFICATION	8.398575540239941E-7	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999982949908258	WITHOUT_CLASSIFICATION	1.7050091741736818E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999987845199116	WITHOUT_CLASSIFICATION	1.2154800883830425E-6	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999902331502987	WITHOUT_CLASSIFICATION	9.766849701252426E-6	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999979958269869	WITHOUT_CLASSIFICATION	2.0041730131697243E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999955202764816	WITHOUT_CLASSIFICATION	4.47972351832795E-6	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999996906794205	WITHOUT_CLASSIFICATION	3.093205795076496E-6	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999851957340339	WITHOUT_CLASSIFICATION	1.4804265966063102E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999466549109	WITHOUT_CLASSIFICATION	5.334508909336253E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999949174041085	WITHOUT_CLASSIFICATION	5.0825958915064414E-5	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9996462321130277	WITHOUT_CLASSIFICATION	3.537678869722699E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999919181721179	WITHOUT_CLASSIFICATION	8.081827882194886E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999998466733941	WITHOUT_CLASSIFICATION	1.533266057596373E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8096099809904875	WITHOUT_CLASSIFICATION	0.19039001900951252	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999998989823067	WITHOUT_CLASSIFICATION	1.0101769336999037E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.8096099809904875	WITHOUT_CLASSIFICATION	0.19039001900951252	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999979320219814	WITHOUT_CLASSIFICATION	2.067978018615361E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999995293670066	WITHOUT_CLASSIFICATION	4.7063299342448043E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999883828288246	WITHOUT_CLASSIFICATION	1.161717117538627E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915147311261	WITHOUT_CLASSIFICATION	8.485268873868178E-6	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999969381775097	WITHOUT_CLASSIFICATION	3.061822490293068E-6	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999031105977587	WITHOUT_CLASSIFICATION	9.688940224137567E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999031105977587	WITHOUT_CLASSIFICATION	9.688940224137567E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999601874225656	WITHOUT_CLASSIFICATION	3.981257743425846E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999948604855858	WITHOUT_CLASSIFICATION	5.139514414245059E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999686009580495	WITHOUT_CLASSIFICATION	3.139904195045913E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999526154802453	WITHOUT_CLASSIFICATION	4.738451975472872E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999843293716476	WITHOUT_CLASSIFICATION	1.5670628352380917E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999999811062426	WITHOUT_CLASSIFICATION	1.889375745156975E-8	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999962815837226	WITHOUT_CLASSIFICATION	3.7184162772978527E-6	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999941606725142	WITHOUT_CLASSIFICATION	5.839327485684269E-6	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.999992765965011	WITHOUT_CLASSIFICATION	7.234034989004607E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999994793653167	WITHOUT_CLASSIFICATION	5.206346832953503E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999989519187974	WITHOUT_CLASSIFICATION	1.0480812026628598E-6	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999741785665721	WITHOUT_CLASSIFICATION	2.582143342794158E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999673530638645	WITHOUT_CLASSIFICATION	3.2646936135528225E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999995024635528	WITHOUT_CLASSIFICATION	4.97536447139272E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999970382553877	WITHOUT_CLASSIFICATION	2.9617446124390765E-6	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999997519355138	WITHOUT_CLASSIFICATION	2.48064486139411E-7	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999977642347995	WITHOUT_CLASSIFICATION	2.23576520044811E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999981823706948	WITHOUT_CLASSIFICATION	1.8176293052323213E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999988376604665	WITHOUT_CLASSIFICATION	1.1623395335084824E-5	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998919549453491	WITHOUT_CLASSIFICATION	1.0804505465090388E-4	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999784802264	WITHOUT_CLASSIFICATION	2.151977359894203E-7	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999822005030278	WITHOUT_CLASSIFICATION	1.779949697218532E-5	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999990211483721	WITHOUT_CLASSIFICATION	9.78851627812984E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999992868161192	WITHOUT_CLASSIFICATION	7.131838808700516E-7	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999980198719081	WITHOUT_CLASSIFICATION	1.9801280919722433E-6	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999721301428125	WITHOUT_CLASSIFICATION	2.786985718757343E-5	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999997077204661	WITHOUT_CLASSIFICATION	2.922795339769527E-7	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999536248674938	WITHOUT_CLASSIFICATION	4.637513250623847E-5	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999880511954885	WITHOUT_CLASSIFICATION	1.1948804511344331E-5	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999982715566657	WITHOUT_CLASSIFICATION	1.7284433343092902E-6	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9718424655160239	WITHOUT_CLASSIFICATION	0.028157534483976118	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.999982405716702	WITHOUT_CLASSIFICATION	1.7594283297983747E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999962815837226	WITHOUT_CLASSIFICATION	3.7184162772978527E-6	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999911021807993	WITHOUT_CLASSIFICATION	8.897819200667184E-6	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.99999761440565	WITHOUT_CLASSIFICATION	2.38559434994359E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9752709284756101	WITHOUT_CLASSIFICATION	0.02472907152438995	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999769164557033	WITHOUT_CLASSIFICATION	2.3083544296749896E-5	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999989916934925	WITHOUT_CLASSIFICATION	1.00830650760139E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999992292412759	WITHOUT_CLASSIFICATION	7.707587241368651E-7	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999526154802453	WITHOUT_CLASSIFICATION	4.738451975472872E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999526154802453	WITHOUT_CLASSIFICATION	4.738451975472872E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999996592358003	WITHOUT_CLASSIFICATION	3.4076419968526784E-7	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999935765517544	WITHOUT_CLASSIFICATION	6.42344824569158E-6	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999531099164268	WITHOUT_CLASSIFICATION	4.689008357306804E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999996745548874	WITHOUT_CLASSIFICATION	3.2544511263663224E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.999999762662772	WITHOUT_CLASSIFICATION	2.3733722805483361E-7	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999991140510955	WITHOUT_CLASSIFICATION	8.859489044863051E-7	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999979108001954	WITHOUT_CLASSIFICATION	2.0891998046554684E-6	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999052704083	WITHOUT_CLASSIFICATION	9.472959175544554E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999965715458742	WITHOUT_CLASSIFICATION	3.4284541258561955E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998885432394	WITHOUT_CLASSIFICATION	1.1145676053397663E-7	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999879900194153	WITHOUT_CLASSIFICATION	1.2009980584805694E-5	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999176085190421	WITHOUT_CLASSIFICATION	8.23914809579347E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999924751461743	WITHOUT_CLASSIFICATION	7.5248538257359355E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998885432394	WITHOUT_CLASSIFICATION	1.1145676053397663E-7	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999998683528909	WITHOUT_CLASSIFICATION	1.3164710910068987E-6	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999901085659242	WITHOUT_CLASSIFICATION	9.891434075800617E-5	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999943029824891	WITHOUT_CLASSIFICATION	5.697017510925753E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.7407912608786225	WITHOUT_CLASSIFICATION	0.2592087391213776	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999176085190421	WITHOUT_CLASSIFICATION	8.23914809579347E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999960574294527	WITHOUT_CLASSIFICATION	3.942570547208547E-6	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997792349966	WITHOUT_CLASSIFICATION	2.2076500327116517E-7	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999750593915	WITHOUT_CLASSIFICATION	2.4940608576282458E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999993541156101	WITHOUT_CLASSIFICATION	6.458843898860273E-7	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999023834736517	WITHOUT_CLASSIFICATION	9.761652634826357E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991304007219	WITHOUT_CLASSIFICATION	8.695992781772263E-7	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999156616958	WITHOUT_CLASSIFICATION	8.433830419188994E-8	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894503067334	WITHOUT_CLASSIFICATION	1.0549693266664878E-5	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999955997846246	WITHOUT_CLASSIFICATION	4.400215375419771E-6	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999965662782079	WITHOUT_CLASSIFICATION	3.433721792088701E-6	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999935505969405	WITHOUT_CLASSIFICATION	6.449403059481041E-6	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999526032448	WITHOUT_CLASSIFICATION	4.739675515863346E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998885432394	WITHOUT_CLASSIFICATION	1.1145676053397663E-7	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999960574294527	WITHOUT_CLASSIFICATION	3.942570547208547E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999750593915	WITHOUT_CLASSIFICATION	2.4940608576282458E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999980266918591	WITHOUT_CLASSIFICATION	1.973308140918028E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999913680688548	WITHOUT_CLASSIFICATION	8.631931145236441E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999998084802438	WITHOUT_CLASSIFICATION	1.9151975620573218E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999176085190421	WITHOUT_CLASSIFICATION	8.23914809579347E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999976847201534	WITHOUT_CLASSIFICATION	2.3152798465696106E-6	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999947638186473	WITHOUT_CLASSIFICATION	5.236181352689597E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999801884474634	WITHOUT_CLASSIFICATION	1.9811552536635383E-5	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999996545548932	WITHOUT_CLASSIFICATION	3.454451067867068E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894503067334	WITHOUT_CLASSIFICATION	1.0549693266664878E-5	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.999998683528909	WITHOUT_CLASSIFICATION	1.3164710910068987E-6	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999871983581472	WITHOUT_CLASSIFICATION	1.2801641852856163E-5	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999959197304946	WITHOUT_CLASSIFICATION	4.080269505366942E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999988875555975	WITHOUT_CLASSIFICATION	1.112444402515055E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999999108419455	WITHOUT_CLASSIFICATION	8.915805447935412E-8	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999999701223485	WITHOUT_CLASSIFICATION	2.9877651498223903E-7	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999991555731462	WITHOUT_CLASSIFICATION	8.444268538073198E-7	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999890197009575	WITHOUT_CLASSIFICATION	1.0980299042423172E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915147311261	WITHOUT_CLASSIFICATION	8.485268873868178E-6	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999453704428	WITHOUT_CLASSIFICATION	5.4629557311181364E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999904354447802	WITHOUT_CLASSIFICATION	9.564555219907573E-6	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999275292561131	WITHOUT_CLASSIFICATION	7.24707438869263E-5	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999970780426377	WITHOUT_CLASSIFICATION	2.9219573623056267E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999923006473024	WITHOUT_CLASSIFICATION	7.699352697737773E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998849343451	WITHOUT_CLASSIFICATION	1.1506565494090076E-7	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999986813634294	WITHOUT_CLASSIFICATION	1.3186365705090664E-6	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999995462272478	WITHOUT_CLASSIFICATION	4.5377275213012877E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.999996545548932	WITHOUT_CLASSIFICATION	3.454451067867068E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999918185179135	WITHOUT_CLASSIFICATION	8.181482086423128E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999963481003845	WITHOUT_CLASSIFICATION	3.65189961540714E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999840926073552	WITHOUT_CLASSIFICATION	1.5907392644735866E-5	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999812993602629	WITHOUT_CLASSIFICATION	1.8700639737097658E-5	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999952145604811	WITHOUT_CLASSIFICATION	4.785439518900509E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999527431792	WITHOUT_CLASSIFICATION	4.725682068860375E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999981222005683	WITHOUT_CLASSIFICATION	1.8777994316206801E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9999734460535403	WITHOUT_CLASSIFICATION	2.6553946459721822E-5	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999901647207813	WITHOUT_CLASSIFICATION	9.83527921879264E-6	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9992447912004986	WITHOUT_CLASSIFICATION	7.55208799501553E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999976236895622	WITHOUT_CLASSIFICATION	2.3763104377497513E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999814875541794	WITHOUT_CLASSIFICATION	1.8512445820661876E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999984857501825	WITHOUT_CLASSIFICATION	1.514249817617881E-6	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999320932912401	WITHOUT_CLASSIFICATION	6.790670875988056E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999961981642833	WITHOUT_CLASSIFICATION	3.801835716648301E-6	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999997926101073	WITHOUT_CLASSIFICATION	2.0738989265140014E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.999999695810563	WITHOUT_CLASSIFICATION	3.041894369378778E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999995644074117	WITHOUT_CLASSIFICATION	4.355925882644018E-7	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999988742420691	WITHOUT_CLASSIFICATION	1.1257579309527987E-6	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999070732915388	WITHOUT_CLASSIFICATION	9.29267084610526E-5	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999959971227466	WITHOUT_CLASSIFICATION	4.002877253447348E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999997680023806	WITHOUT_CLASSIFICATION	2.3199761944339073E-7	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999995162827885	WITHOUT_CLASSIFICATION	4.83717211604078E-7	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999998682536242	WITHOUT_CLASSIFICATION	1.3174637587500614E-7	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998500209464	WITHOUT_CLASSIFICATION	1.4997905366595943E-7	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5768897974043832	WITHOUT_CLASSIFICATION	0.4231102025956169	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999823327156945	WITHOUT_CLASSIFICATION	1.7667284305462513E-5	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999995947373238	WITHOUT_CLASSIFICATION	4.052626761993618E-6	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999944463265897	WITHOUT_CLASSIFICATION	5.553673410286865E-6	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9906752827794019	WITHOUT_CLASSIFICATION	0.0093247172205981	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999950728532765	WITHOUT_CLASSIFICATION	4.927146723451868E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999951584198444	WITHOUT_CLASSIFICATION	4.84158015556648E-6	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999986360845554	WITHOUT_CLASSIFICATION	1.3639154446174983E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999885117600896	WITHOUT_CLASSIFICATION	1.1488239910345127E-5	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999970344705933	WITHOUT_CLASSIFICATION	2.9655294067551358E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999977105091818	WITHOUT_CLASSIFICATION	2.2894908180329866E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999994226219635	WITHOUT_CLASSIFICATION	5.773780365506357E-7	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.99999965511405	WITHOUT_CLASSIFICATION	3.448859500508657E-7	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999977105091818	WITHOUT_CLASSIFICATION	2.2894908180329866E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999970344705933	WITHOUT_CLASSIFICATION	2.9655294067551358E-6	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999994226219635	WITHOUT_CLASSIFICATION	5.773780365506357E-7	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999948643440735	WITHOUT_CLASSIFICATION	5.135655926575296E-6	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999306712258	WITHOUT_CLASSIFICATION	6.932877415681828E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999993998599367	WITHOUT_CLASSIFICATION	6.001400632648021E-7	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999925635908798	WITHOUT_CLASSIFICATION	7.4364091201466465E-6	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997061668352	WITHOUT_CLASSIFICATION	2.938331647904966E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7319164408645358	WITHOUT_CLASSIFICATION	0.26808355913546433	DEFECT
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9961488397579922	WITHOUT_CLASSIFICATION	0.003851160242007938	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999963300049913	WITHOUT_CLASSIFICATION	3.6699950087214346E-6	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999995277231254	WITHOUT_CLASSIFICATION	4.722768745527128E-7	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999961405098157	WITHOUT_CLASSIFICATION	3.859490184318903E-6	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999972402373268	WITHOUT_CLASSIFICATION	2.7597626731604922E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999997778335086	WITHOUT_CLASSIFICATION	2.2216649133822506E-7	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999977618066341	WITHOUT_CLASSIFICATION	2.238193365770975E-6	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999532467309336	WITHOUT_CLASSIFICATION	4.6753269066561604E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999974056408114	WITHOUT_CLASSIFICATION	2.5943591886981193E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997614074354	WITHOUT_CLASSIFICATION	2.385925646528375E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999989311932395	WITHOUT_CLASSIFICATION	1.068806760548273E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999448617258	WITHOUT_CLASSIFICATION	5.513827420040084E-7	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999999669050554	WITHOUT_CLASSIFICATION	3.309494453941199E-8	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999098662532	WITHOUT_CLASSIFICATION	9.013374685603258E-8	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999822968714059	WITHOUT_CLASSIFICATION	1.7703128594008898E-5	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999618930095	WITHOUT_CLASSIFICATION	3.810699051721845E-8	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999898904607474	WITHOUT_CLASSIFICATION	1.0109539252741211E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999929927037	WITHOUT_CLASSIFICATION	7.007296289357413E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999469202476	WITHOUT_CLASSIFICATION	5.3079752267244265E-8	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999469202476	WITHOUT_CLASSIFICATION	5.3079752267244265E-8	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998468684579	WITHOUT_CLASSIFICATION	1.5313154214179043E-7	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998468684579	WITHOUT_CLASSIFICATION	1.5313154214179043E-7	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999996834073254	WITHOUT_CLASSIFICATION	3.1659267457011846E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999989311932395	WITHOUT_CLASSIFICATION	1.068806760548273E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999240674233	WITHOUT_CLASSIFICATION	7.593257668026862E-8	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999036889088	WITHOUT_CLASSIFICATION	9.631109117362536E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999708475374115	WITHOUT_CLASSIFICATION	2.9152462588450318E-5	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999708475374115	WITHOUT_CLASSIFICATION	2.9152462588450318E-5	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999995391838493	WITHOUT_CLASSIFICATION	4.6081615066990266E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999946737627528	WITHOUT_CLASSIFICATION	5.326237247276254E-6	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999998785720932	WITHOUT_CLASSIFICATION	1.2142790691491832E-7	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999973528326177	WITHOUT_CLASSIFICATION	2.647167382227951E-6	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.99998387449462	WITHOUT_CLASSIFICATION	1.61255053799524E-5	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9998641685384546	WITHOUT_CLASSIFICATION	1.3583146154529492E-4	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999863039713577	WITHOUT_CLASSIFICATION	1.3696028642380091E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999591934352439	WITHOUT_CLASSIFICATION	4.0806564756095807E-5	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999938392245801	WITHOUT_CLASSIFICATION	6.1607754198161665E-6	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.999997662669903	WITHOUT_CLASSIFICATION	2.3373300970417514E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999979799434059	WITHOUT_CLASSIFICATION	2.0200565940027078E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999691961876706	WITHOUT_CLASSIFICATION	3.080381232946663E-5	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999970074552585	WITHOUT_CLASSIFICATION	2.9925447415117508E-6	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999964729762093	WITHOUT_CLASSIFICATION	3.5270237907651833E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999965493104802	WITHOUT_CLASSIFICATION	3.4506895197593295E-6	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999981822477916	WITHOUT_CLASSIFICATION	1.8177522084461327E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975174104141	WITHOUT_CLASSIFICATION	2.4825895859385315E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999995428221722	WITHOUT_CLASSIFICATION	4.571778277912192E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999998659845823	WITHOUT_CLASSIFICATION	1.340154176192986E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999936763696013	WITHOUT_CLASSIFICATION	6.32363039866659E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999980283319871	WITHOUT_CLASSIFICATION	1.9716680128452505E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999945880080224	WITHOUT_CLASSIFICATION	5.411991977562588E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999926066475349	WITHOUT_CLASSIFICATION	7.393352465058653E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999124485606	WITHOUT_CLASSIFICATION	8.755143952042873E-8	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999509503326033	WITHOUT_CLASSIFICATION	4.9049667396829144E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999988815428071	WITHOUT_CLASSIFICATION	1.118457192870671E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999814875541794	WITHOUT_CLASSIFICATION	1.8512445820661876E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999983996825051	WITHOUT_CLASSIFICATION	1.6003174948468082E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999630233471798	WITHOUT_CLASSIFICATION	3.697665282023161E-5	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991374041535	WITHOUT_CLASSIFICATION	8.625958465367996E-7	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973492070358	WITHOUT_CLASSIFICATION	2.650792964153407E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999961484253801	WITHOUT_CLASSIFICATION	3.8515746199430255E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999961484253801	WITHOUT_CLASSIFICATION	3.8515746199430255E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999991514660792	WITHOUT_CLASSIFICATION	8.485339208128356E-7	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999962548132834	WITHOUT_CLASSIFICATION	3.7451867167291144E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999943768765053	WITHOUT_CLASSIFICATION	5.623123494776514E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999943768765053	WITHOUT_CLASSIFICATION	5.623123494776514E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999976161993394	WITHOUT_CLASSIFICATION	2.3838006605611854E-6	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999861079005706	WITHOUT_CLASSIFICATION	1.389209942934702E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999395499556413	WITHOUT_CLASSIFICATION	6.0450044358716325E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704384086	WITHOUT_CLASSIFICATION	3.1295615914349253E-6	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.999997779829736	WITHOUT_CLASSIFICATION	2.2201702639777244E-6	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999985679277709	WITHOUT_CLASSIFICATION	1.4320722291653338E-6	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999988682005435	WITHOUT_CLASSIFICATION	1.1317994565159742E-6	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999214418781875	WITHOUT_CLASSIFICATION	7.855812181243257E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991754643887	WITHOUT_CLASSIFICATION	8.245356112765572E-7	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999991754643887	WITHOUT_CLASSIFICATION	8.245356112765572E-7	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999992131341484	WITHOUT_CLASSIFICATION	7.868658517012417E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999896613413317	WITHOUT_CLASSIFICATION	1.0338658668298763E-5	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999896613413317	WITHOUT_CLASSIFICATION	1.0338658668298763E-5	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999990157112558	WITHOUT_CLASSIFICATION	9.842887442484346E-7	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999991353086002	WITHOUT_CLASSIFICATION	8.64691399800422E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9976808978872914	WITHOUT_CLASSIFICATION	0.002319102112708575	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999989751703374	WITHOUT_CLASSIFICATION	1.0248296625923845E-6	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999984452864997	WITHOUT_CLASSIFICATION	1.554713500385971E-6	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999966093649145	WITHOUT_CLASSIFICATION	3.390635085450773E-6	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999892741301639	WITHOUT_CLASSIFICATION	1.0725869836097236E-4	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999997311087326	WITHOUT_CLASSIFICATION	2.6889126738120137E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999990765726392	WITHOUT_CLASSIFICATION	9.234273607643584E-7	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999703980522191	WITHOUT_CLASSIFICATION	2.960194778093331E-5	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999993778558747	WITHOUT_CLASSIFICATION	6.221441253006609E-7	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.999999660961714	WITHOUT_CLASSIFICATION	3.3903828591174136E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909415697774	WITHOUT_CLASSIFICATION	9.058430222519551E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909415697774	WITHOUT_CLASSIFICATION	9.058430222519551E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909415697774	WITHOUT_CLASSIFICATION	9.058430222519551E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999909415697774	WITHOUT_CLASSIFICATION	9.058430222519551E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999984820378031	WITHOUT_CLASSIFICATION	1.5179621970065326E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999973052318801	WITHOUT_CLASSIFICATION	2.694768119913822E-6	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999759152197616	WITHOUT_CLASSIFICATION	2.4084780238375833E-5	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999923539015494	WITHOUT_CLASSIFICATION	7.646098450654182E-6	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999993769297476	WITHOUT_CLASSIFICATION	6.230702523605519E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999956953846989	WITHOUT_CLASSIFICATION	4.304615301118344E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999888224072668	WITHOUT_CLASSIFICATION	1.1177592733164325E-5	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999686729873378	WITHOUT_CLASSIFICATION	3.132701266213977E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999839019038	WITHOUT_CLASSIFICATION	1.609809618933469E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999992088292062	WITHOUT_CLASSIFICATION	7.911707938710542E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999972803301431	WITHOUT_CLASSIFICATION	2.719669856993095E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999724492345374	WITHOUT_CLASSIFICATION	2.7550765462527946E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9977547610229098	WITHOUT_CLASSIFICATION	0.0022452389770901237	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999949058440738	WITHOUT_CLASSIFICATION	5.0941559262321995E-6	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999989333962511	WITHOUT_CLASSIFICATION	1.066603748930538E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999724492345374	WITHOUT_CLASSIFICATION	2.7550765462527946E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999967061886293	WITHOUT_CLASSIFICATION	3.293811370701339E-6	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999977716493693	WITHOUT_CLASSIFICATION	2.228350630784761E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999905958043306	WITHOUT_CLASSIFICATION	9.404195669513436E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999893527842151	WITHOUT_CLASSIFICATION	1.0647215784918779E-5	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999728393553227	WITHOUT_CLASSIFICATION	2.7160644677240367E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999854304422633	WITHOUT_CLASSIFICATION	1.4569557736693401E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999478192171	WITHOUT_CLASSIFICATION	5.218078289797524E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999988976493576	WITHOUT_CLASSIFICATION	1.1023506424138335E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988495999121	WITHOUT_CLASSIFICATION	1.1504000878714896E-6	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999997854328967	WITHOUT_CLASSIFICATION	2.1456710337115146E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990842356847	WITHOUT_CLASSIFICATION	9.157643152901817E-7	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999979999605485	WITHOUT_CLASSIFICATION	2.0000394515717396E-6	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9996075812837737	WITHOUT_CLASSIFICATION	3.924187162262357E-4	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999949870987908	WITHOUT_CLASSIFICATION	5.012901209249895E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999840567257	WITHOUT_CLASSIFICATION	1.594327426617338E-8	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9996986892427144	WITHOUT_CLASSIFICATION	3.013107572856627E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999058772955	WITHOUT_CLASSIFICATION	9.412270448290461E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999390728000057	WITHOUT_CLASSIFICATION	6.0927199994266375E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999966769243747	WITHOUT_CLASSIFICATION	3.3230756252323424E-6	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999390728000057	WITHOUT_CLASSIFICATION	6.0927199994266375E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996233472378	WITHOUT_CLASSIFICATION	3.7665276217203794E-7	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993857134233	WITHOUT_CLASSIFICATION	6.142865767082866E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999997517195603	WITHOUT_CLASSIFICATION	2.4828043956853984E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999997468624079	WITHOUT_CLASSIFICATION	2.531375920514272E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999058772955	WITHOUT_CLASSIFICATION	9.412270448290461E-8	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999966769243747	WITHOUT_CLASSIFICATION	3.3230756252323424E-6	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999996233472378	WITHOUT_CLASSIFICATION	3.7665276217203794E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997549587971	WITHOUT_CLASSIFICATION	2.450412029251829E-7	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999814925900048	WITHOUT_CLASSIFICATION	1.85074099952541E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999910944761776	WITHOUT_CLASSIFICATION	8.90552382239105E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999856743164556	WITHOUT_CLASSIFICATION	1.4325683544363146E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999980682363767	WITHOUT_CLASSIFICATION	1.9317636233597448E-6	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999953353699	WITHOUT_CLASSIFICATION	4.6646301962854705E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975174104141	WITHOUT_CLASSIFICATION	2.4825895859385315E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993857134233	WITHOUT_CLASSIFICATION	6.142865767082866E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999994341413302	WITHOUT_CLASSIFICATION	5.658586698118695E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999826037313275	WITHOUT_CLASSIFICATION	1.739626867243244E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998505032708	WITHOUT_CLASSIFICATION	1.4949672930698377E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975174104141	WITHOUT_CLASSIFICATION	2.4825895859385315E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999929147630893	WITHOUT_CLASSIFICATION	7.085236910620028E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975174104141	WITHOUT_CLASSIFICATION	2.4825895859385315E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999804895304	WITHOUT_CLASSIFICATION	1.9510469584820804E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999981486283328	WITHOUT_CLASSIFICATION	1.8513716671670868E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9987576124829836	WITHOUT_CLASSIFICATION	0.0012423875170164828	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999486136399	WITHOUT_CLASSIFICATION	5.138636016300658E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999703986134	WITHOUT_CLASSIFICATION	2.9601386597653333E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999961923815593	WITHOUT_CLASSIFICATION	3.807618440780661E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999975510637404	WITHOUT_CLASSIFICATION	2.4489362595616814E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999737007828005	WITHOUT_CLASSIFICATION	2.6299217199540214E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999745564218663	WITHOUT_CLASSIFICATION	2.544357813369288E-5	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999178265985684	WITHOUT_CLASSIFICATION	8.217340143157754E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999416358515614	WITHOUT_CLASSIFICATION	5.8364148438565326E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999988421464808	WITHOUT_CLASSIFICATION	1.1578535191803348E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9976808978872914	WITHOUT_CLASSIFICATION	0.002319102112708575	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999069093991061	WITHOUT_CLASSIFICATION	9.309060089395183E-5	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999932715941939	WITHOUT_CLASSIFICATION	6.728405805995771E-6	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999954955612123	WITHOUT_CLASSIFICATION	4.504438787853853E-6	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9990287856856083	WITHOUT_CLASSIFICATION	9.712143143917237E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999987826097259	WITHOUT_CLASSIFICATION	1.2173902741576376E-6	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999999185368244	WITHOUT_CLASSIFICATION	8.146317559373046E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999965553416896	WITHOUT_CLASSIFICATION	3.44465831028523E-6	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9998758637998092	WITHOUT_CLASSIFICATION	1.2413620019077878E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999202227653	WITHOUT_CLASSIFICATION	7.97772346545754E-8	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999989206431471	WITHOUT_CLASSIFICATION	1.0793568528942385E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9976986051278495	WITHOUT_CLASSIFICATION	0.0023013948721505753	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9993576362987586	WITHOUT_CLASSIFICATION	6.423637012414076E-4	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9991203468969394	WITHOUT_CLASSIFICATION	8.796531030606725E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999950384440306	WITHOUT_CLASSIFICATION	4.961555969302984E-6	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999780536372321	WITHOUT_CLASSIFICATION	2.194636276785598E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999648529990183	WITHOUT_CLASSIFICATION	3.514700098174403E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999993945173329	WITHOUT_CLASSIFICATION	6.054826670992163E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999995316876428	WITHOUT_CLASSIFICATION	4.68312357305659E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999885825999344	WITHOUT_CLASSIFICATION	1.1417400065613268E-5	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999343190259989	WITHOUT_CLASSIFICATION	6.568097400103996E-5	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999778129337968	WITHOUT_CLASSIFICATION	2.2187066203136546E-5	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9996656516881602	WITHOUT_CLASSIFICATION	3.3434831183973924E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999997769183285	WITHOUT_CLASSIFICATION	2.230816715845274E-7	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999995198232982	WITHOUT_CLASSIFICATION	4.8017670179654494E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.999993090140273	WITHOUT_CLASSIFICATION	6.909859726957854E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999932471042927	WITHOUT_CLASSIFICATION	6.75289570733771E-6	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999915835360049	WITHOUT_CLASSIFICATION	8.41646399515009E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9981178551978626	WITHOUT_CLASSIFICATION	0.0018821448021373768	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999978528162755	WITHOUT_CLASSIFICATION	2.1471837244494926E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999817361289681	WITHOUT_CLASSIFICATION	1.8263871031779203E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999772769166636	WITHOUT_CLASSIFICATION	2.272308333645665E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999772769166636	WITHOUT_CLASSIFICATION	2.272308333645665E-5	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999958636508538	WITHOUT_CLASSIFICATION	4.136349146222721E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999737007828005	WITHOUT_CLASSIFICATION	2.6299217199540214E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999948596598472	WITHOUT_CLASSIFICATION	5.140340152786421E-6	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999743986371832	WITHOUT_CLASSIFICATION	2.5601362816874554E-5	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999897951280713	WITHOUT_CLASSIFICATION	1.0204871928695931E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999961960065145	WITHOUT_CLASSIFICATION	3.8039934856181916E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999723738098972	WITHOUT_CLASSIFICATION	2.7626190102788362E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999395537594734	WITHOUT_CLASSIFICATION	6.0446240526559814E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999969765700181	WITHOUT_CLASSIFICATION	3.023429981852602E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999980028099914	WITHOUT_CLASSIFICATION	1.9971900086477687E-6	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999818367959977	WITHOUT_CLASSIFICATION	1.8163204002179128E-5	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999954928714652	WITHOUT_CLASSIFICATION	4.507128534915858E-6	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999954453661709	WITHOUT_CLASSIFICATION	4.554633829147536E-6	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999442547179958	WITHOUT_CLASSIFICATION	5.574528200411087E-5	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999997726111364	WITHOUT_CLASSIFICATION	2.2738886360256357E-6	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999011323457	WITHOUT_CLASSIFICATION	9.886765426936782E-8	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999981529968286	WITHOUT_CLASSIFICATION	1.8470031713303516E-6	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999997478720861	WITHOUT_CLASSIFICATION	2.521279139574523E-7	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999998027762145	WITHOUT_CLASSIFICATION	1.972237855547261E-7	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999998193081965	WITHOUT_CLASSIFICATION	1.8069180350467186E-6	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999644347661	WITHOUT_CLASSIFICATION	3.556523384693184E-8	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999826575982832	WITHOUT_CLASSIFICATION	1.7342401716804994E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999943918524284	WITHOUT_CLASSIFICATION	5.6081475715164745E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999997237760276	WITHOUT_CLASSIFICATION	2.7622397240062605E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9981178551978626	WITHOUT_CLASSIFICATION	0.0018821448021373768	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999924510142567	WITHOUT_CLASSIFICATION	7.548985743256528E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9994967247424319	WITHOUT_CLASSIFICATION	5.032752575680627E-4	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999995366205326	WITHOUT_CLASSIFICATION	4.633794673588068E-7	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999205941902838	WITHOUT_CLASSIFICATION	7.940580971613091E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999863116567313	WITHOUT_CLASSIFICATION	1.3688343268707665E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999991950590164	WITHOUT_CLASSIFICATION	8.049409835911066E-7	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999976697302693	WITHOUT_CLASSIFICATION	2.3302697307767792E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999992563097121	WITHOUT_CLASSIFICATION	7.436902878571831E-7	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997323127985	WITHOUT_CLASSIFICATION	2.676872015096095E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999942589403781	WITHOUT_CLASSIFICATION	5.74105962188131E-6	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998150394307	WITHOUT_CLASSIFICATION	1.8496056934154415E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999998466342928	WITHOUT_CLASSIFICATION	1.5336570718911617E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999110770091548	WITHOUT_CLASSIFICATION	8.892299084516874E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9985673716023044	WITHOUT_CLASSIFICATION	0.001432628397695746	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999904141811	WITHOUT_CLASSIFICATION	9.58581904204913E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999904141811	WITHOUT_CLASSIFICATION	9.58581904204913E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999918944803157	WITHOUT_CLASSIFICATION	8.105519684290472E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999994730942983	WITHOUT_CLASSIFICATION	5.269057017617867E-7	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996860583893081	WITHOUT_CLASSIFICATION	3.1394161069181735E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9996860583893081	WITHOUT_CLASSIFICATION	3.1394161069181735E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.999999251158639	WITHOUT_CLASSIFICATION	7.48841360931546E-7	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998826322328256	WITHOUT_CLASSIFICATION	1.17367767174481E-4	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999990406356871	WITHOUT_CLASSIFICATION	9.59364312875938E-7	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999990283987773	WITHOUT_CLASSIFICATION	9.716012226999488E-7	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999978385298509	WITHOUT_CLASSIFICATION	2.161470149055709E-6	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998599050680611	WITHOUT_CLASSIFICATION	1.4009493193892794E-4	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999993123791395	WITHOUT_CLASSIFICATION	6.876208603628952E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999993123791395	WITHOUT_CLASSIFICATION	6.876208603628952E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999905004553206	WITHOUT_CLASSIFICATION	9.499544679405064E-5	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999817945363971	WITHOUT_CLASSIFICATION	1.8205463602891847E-5	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999893665262173	WITHOUT_CLASSIFICATION	1.063347378263938E-5	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999949502194518	WITHOUT_CLASSIFICATION	5.049780548151699E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999949502194518	WITHOUT_CLASSIFICATION	5.049780548151699E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999987619362746	WITHOUT_CLASSIFICATION	1.2380637254336092E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999961790567035	WITHOUT_CLASSIFICATION	3.8209432965440065E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999796585947919	WITHOUT_CLASSIFICATION	2.034140520810331E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999984783837966	WITHOUT_CLASSIFICATION	1.5216162033859747E-6	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999999202719975	WITHOUT_CLASSIFICATION	7.972800249977771E-7	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999996672197725	WITHOUT_CLASSIFICATION	3.327802274760524E-7	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999942677056617	WITHOUT_CLASSIFICATION	5.732294338392362E-6	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999982717115056	WITHOUT_CLASSIFICATION	1.7282884944900713E-6	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999998668317297	WITHOUT_CLASSIFICATION	1.3316827025606186E-7	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999712873118601	WITHOUT_CLASSIFICATION	2.8712688139873946E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.999967777343272	WITHOUT_CLASSIFICATION	3.222265672801227E-5	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9999785907011798	WITHOUT_CLASSIFICATION	2.140929882021063E-5	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999988687934099	WITHOUT_CLASSIFICATION	1.1312065900826605E-6	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999991403307807	WITHOUT_CLASSIFICATION	8.596692193066948E-7	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999940569401936	WITHOUT_CLASSIFICATION	5.943059806342093E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.999981786363526	WITHOUT_CLASSIFICATION	1.8213636474032105E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999963523872162	WITHOUT_CLASSIFICATION	3.647612783903473E-6	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999995128620205	WITHOUT_CLASSIFICATION	4.871379793955779E-7	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999993265845714	WITHOUT_CLASSIFICATION	6.734154286120736E-7	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999998183765488	WITHOUT_CLASSIFICATION	1.8162345117681522E-7	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999999496099877	WITHOUT_CLASSIFICATION	5.0390012166682E-8	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999828580315848	WITHOUT_CLASSIFICATION	1.714196841515386E-5	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999964127032133	WITHOUT_CLASSIFICATION	3.5872967868107278E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999645765600377	WITHOUT_CLASSIFICATION	3.5423439962379756E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9998200171339141	WITHOUT_CLASSIFICATION	1.799828660858033E-4	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999996644947065	WITHOUT_CLASSIFICATION	3.355052934560919E-7	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999979993107065	WITHOUT_CLASSIFICATION	2.0006892935365685E-6	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999592639846937	WITHOUT_CLASSIFICATION	4.0736015306243426E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999666212266	WITHOUT_CLASSIFICATION	3.3378773343726295E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997909420327	WITHOUT_CLASSIFICATION	2.0905796724581108E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9996477468848028	WITHOUT_CLASSIFICATION	3.5225311519708615E-4	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999996808800306	WITHOUT_CLASSIFICATION	3.19119969452791E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999993807491077	WITHOUT_CLASSIFICATION	6.192508923041714E-6	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999950672295885	WITHOUT_CLASSIFICATION	4.932770411512167E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999996315579306	WITHOUT_CLASSIFICATION	3.6844206940608857E-6	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999890683361783	WITHOUT_CLASSIFICATION	1.0931663821659057E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999608501916073	WITHOUT_CLASSIFICATION	3.91498083927436E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999984126361572	WITHOUT_CLASSIFICATION	1.5873638427653952E-6	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999906585216725	WITHOUT_CLASSIFICATION	9.341478327551678E-6	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999997012442843	WITHOUT_CLASSIFICATION	2.9875571580054903E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999982637019252	WITHOUT_CLASSIFICATION	1.7362980748472964E-6	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9997736556968332	WITHOUT_CLASSIFICATION	2.2634430316674953E-4	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999976603389262	WITHOUT_CLASSIFICATION	2.339661073815539E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999996200164714	WITHOUT_CLASSIFICATION	3.7998352866101E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999989783375527	WITHOUT_CLASSIFICATION	1.021662447300956E-6	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999961740077026	WITHOUT_CLASSIFICATION	3.825992297424694E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999880651194897	WITHOUT_CLASSIFICATION	1.1934880510269924E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.999998064988765	WITHOUT_CLASSIFICATION	1.935011235057733E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999999625355551	WITHOUT_CLASSIFICATION	3.7464444895182396E-7	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999756321118	WITHOUT_CLASSIFICATION	2.4367888127848702E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999974784066769	WITHOUT_CLASSIFICATION	2.521593323135078E-6	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999109492091	WITHOUT_CLASSIFICATION	8.905079083934087E-8	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999994380190791	WITHOUT_CLASSIFICATION	5.619809209241138E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999999992506928	WITHOUT_CLASSIFICATION	7.493072054957838E-9	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999711181788851	WITHOUT_CLASSIFICATION	2.8881821114877765E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999986209834202	WITHOUT_CLASSIFICATION	1.3790165797555032E-6	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999781013536664	WITHOUT_CLASSIFICATION	2.1898646333542435E-5	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999994985479618	WITHOUT_CLASSIFICATION	5.014520382513852E-7	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999903653286856	WITHOUT_CLASSIFICATION	9.634671314422418E-6	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999994664068639	WITHOUT_CLASSIFICATION	5.335931361470406E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.99999416000309	WITHOUT_CLASSIFICATION	5.839996909960423E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.99999416000309	WITHOUT_CLASSIFICATION	5.839996909960423E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999652947954234	WITHOUT_CLASSIFICATION	3.470520457663846E-5	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999946337179153	WITHOUT_CLASSIFICATION	5.366282084636426E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999870832811	WITHOUT_CLASSIFICATION	1.2916718949060369E-8	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999996080471801	WITHOUT_CLASSIFICATION	3.919528198597466E-7	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999909620283801	WITHOUT_CLASSIFICATION	9.037971619957219E-6	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999962513719115	WITHOUT_CLASSIFICATION	3.7486280885445272E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999946191550608	WITHOUT_CLASSIFICATION	5.380844939232408E-6	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999810200498	WITHOUT_CLASSIFICATION	1.897995013296911E-8	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999732163713556	WITHOUT_CLASSIFICATION	2.6783628644505667E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999949362063812	WITHOUT_CLASSIFICATION	5.063793618757426E-6	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999622495353899	WITHOUT_CLASSIFICATION	3.7750464610076394E-5	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999928152338691	WITHOUT_CLASSIFICATION	7.1847661310245854E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999768833615	WITHOUT_CLASSIFICATION	2.3116638503938005E-8	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999997626386745	WITHOUT_CLASSIFICATION	2.3736132545620746E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998798831883	WITHOUT_CLASSIFICATION	1.201168117002334E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999998798831883	WITHOUT_CLASSIFICATION	1.201168117002334E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999998189593388	WITHOUT_CLASSIFICATION	1.810406611466536E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998835008409399	WITHOUT_CLASSIFICATION	1.1649915906008089E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999994938786049	WITHOUT_CLASSIFICATION	5.061213951367551E-7	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999997929209539	WITHOUT_CLASSIFICATION	2.0707904605625393E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999984957634209	WITHOUT_CLASSIFICATION	1.5042365791357599E-6	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998244326116	WITHOUT_CLASSIFICATION	1.755673884109993E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999891572232142	WITHOUT_CLASSIFICATION	1.0842776785774677E-5	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9999205018830395	WITHOUT_CLASSIFICATION	7.949811696047062E-5	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999996110652971	WITHOUT_CLASSIFICATION	3.8893470291247544E-7	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9998603230689656	WITHOUT_CLASSIFICATION	1.3967693103452282E-4	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999677204289744	WITHOUT_CLASSIFICATION	3.227957102563314E-5	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999997511101394	WITHOUT_CLASSIFICATION	2.4888986056266643E-7	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999995781056352	WITHOUT_CLASSIFICATION	4.2189436484233427E-7	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999992593156799	WITHOUT_CLASSIFICATION	7.406843200641851E-7	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999977341596014	WITHOUT_CLASSIFICATION	2.2658403986607113E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998818579479261	WITHOUT_CLASSIFICATION	1.1814205207392445E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999845634584	WITHOUT_CLASSIFICATION	1.5436541585865532E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999993691928863	WITHOUT_CLASSIFICATION	6.308071137001252E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999993726215438	WITHOUT_CLASSIFICATION	6.273784561568597E-7	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999987861959597	WITHOUT_CLASSIFICATION	1.2138040403119476E-6	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999982168770803	WITHOUT_CLASSIFICATION	1.7831229197037469E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999371712537	WITHOUT_CLASSIFICATION	6.282874622088551E-8	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.99999973097852	WITHOUT_CLASSIFICATION	2.6902147991343194E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999929690221034	WITHOUT_CLASSIFICATION	7.0309778966100615E-6	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9999607595096746	WITHOUT_CLASSIFICATION	3.92404903254727E-5	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999253418476413	WITHOUT_CLASSIFICATION	7.465815235874335E-5	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999981118560644	WITHOUT_CLASSIFICATION	1.8881439356880667E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999826913336511	WITHOUT_CLASSIFICATION	1.730866634884754E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999988713581185	WITHOUT_CLASSIFICATION	1.1286418815469528E-6	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999982065421315	WITHOUT_CLASSIFICATION	1.7934578685121414E-6	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999990573029319	WITHOUT_CLASSIFICATION	9.426970680923603E-7	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9986888975663094	WITHOUT_CLASSIFICATION	0.0013111024336907057	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999998718862328	WITHOUT_CLASSIFICATION	1.2811376715570528E-7	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999765745500439	WITHOUT_CLASSIFICATION	2.3425449956186358E-5	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9620811488975242	WITHOUT_CLASSIFICATION	0.0379188511024758	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999997378675973	WITHOUT_CLASSIFICATION	2.621324026123881E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999690095419478	WITHOUT_CLASSIFICATION	3.0990458052213157E-5	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999992062211354	WITHOUT_CLASSIFICATION	7.937788647016648E-7	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999975695018026	WITHOUT_CLASSIFICATION	2.430498197361579E-6	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999986928306775	WITHOUT_CLASSIFICATION	1.3071693224594491E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990425692878	WITHOUT_CLASSIFICATION	9.57430712181864E-7	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999990425692878	WITHOUT_CLASSIFICATION	9.57430712181864E-7	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999204656417	WITHOUT_CLASSIFICATION	7.953435830936115E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999766340781593	WITHOUT_CLASSIFICATION	2.3365921840801922E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999950224672914	WITHOUT_CLASSIFICATION	4.9775327085915854E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999973592485417	WITHOUT_CLASSIFICATION	2.640751458360599E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999949745135276	WITHOUT_CLASSIFICATION	5.025486472368576E-6	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999993177769548	WITHOUT_CLASSIFICATION	6.82223045092307E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999887346255184	WITHOUT_CLASSIFICATION	1.1265374481634433E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999997009727577	WITHOUT_CLASSIFICATION	2.9902724231938203E-7	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9999443047602773	WITHOUT_CLASSIFICATION	5.569523972282444E-5	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953360532792	WITHOUT_CLASSIFICATION	4.663946720834567E-6	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970688229434	WITHOUT_CLASSIFICATION	2.931177056637198E-6	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9998358946067873	WITHOUT_CLASSIFICATION	1.6410539321262192E-4	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.998126540806909	WITHOUT_CLASSIFICATION	0.0018734591930910053	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999999844784748	WITHOUT_CLASSIFICATION	1.5521525199915542E-7	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999608571264	WITHOUT_CLASSIFICATION	3.914287373890632E-8	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999988327799474	WITHOUT_CLASSIFICATION	1.167220052659544E-6	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999961468377103	WITHOUT_CLASSIFICATION	3.853162289715937E-6	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999843098382	WITHOUT_CLASSIFICATION	1.5690161878292263E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999578283536245	WITHOUT_CLASSIFICATION	4.217164637560225E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999996600093667	WITHOUT_CLASSIFICATION	3.39990633297949E-7	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999950624911846	WITHOUT_CLASSIFICATION	4.9375088153811115E-6	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999995091794732	WITHOUT_CLASSIFICATION	4.908205267541293E-7	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999995712066178	WITHOUT_CLASSIFICATION	4.2879338216750463E-7	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9994057985235585	WITHOUT_CLASSIFICATION	5.942014764414782E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999965982602992	WITHOUT_CLASSIFICATION	3.4017397007245215E-6	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999900114742938	WITHOUT_CLASSIFICATION	9.988525706299602E-6	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999978249981061	WITHOUT_CLASSIFICATION	2.1750018939099352E-6	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999961455820556	WITHOUT_CLASSIFICATION	3.854417944411245E-6	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999993097989748	WITHOUT_CLASSIFICATION	6.902010253556292E-7	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999798933300057	WITHOUT_CLASSIFICATION	2.0106669994274104E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999999985089454	WITHOUT_CLASSIFICATION	1.4910545955213896E-9	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.999999974944617	WITHOUT_CLASSIFICATION	2.5055382929300775E-8	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.999999988171445	WITHOUT_CLASSIFICATION	1.1828555066228985E-8	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995649588345	WITHOUT_CLASSIFICATION	4.350411655319411E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999996085899943	WITHOUT_CLASSIFICATION	3.914100057692833E-7	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999988865919949	WITHOUT_CLASSIFICATION	1.1134080051014918E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999078793881	WITHOUT_CLASSIFICATION	9.212061189769698E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999952896267	WITHOUT_CLASSIFICATION	4.710373301361678E-9	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999999590419798	WITHOUT_CLASSIFICATION	4.0958020181076905E-8	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.999992325076563	WITHOUT_CLASSIFICATION	7.674923437029856E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999965453271171	WITHOUT_CLASSIFICATION	3.4546728829247493E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999925530510111	WITHOUT_CLASSIFICATION	7.446948988928489E-6	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999999997530497	WITHOUT_CLASSIFICATION	2.4695029659457347E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999811454519	WITHOUT_CLASSIFICATION	1.8854548257990685E-8	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999998333537268	WITHOUT_CLASSIFICATION	1.6664627314272122E-7	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999994630547906	WITHOUT_CLASSIFICATION	5.369452093593019E-7	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9997766159010851	WITHOUT_CLASSIFICATION	2.233840989148211E-4	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999768833615	WITHOUT_CLASSIFICATION	2.3116638503938005E-8	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999998406892956	WITHOUT_CLASSIFICATION	1.5931070447681925E-7	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999932598327	WITHOUT_CLASSIFICATION	6.740167237076649E-9	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999723867099057	WITHOUT_CLASSIFICATION	2.7613290094229215E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999221727187	WITHOUT_CLASSIFICATION	7.782728131647411E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999838866247	WITHOUT_CLASSIFICATION	1.611337530093903E-7	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999660386954987	WITHOUT_CLASSIFICATION	3.396130450125436E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9975642822111128	WITHOUT_CLASSIFICATION	0.0024357177888871457	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998365912829	WITHOUT_CLASSIFICATION	1.6340871707316955E-7	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985195140475	WITHOUT_CLASSIFICATION	1.4804859524871972E-6	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999993277397109	WITHOUT_CLASSIFICATION	6.722602891066844E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999992315140679	WITHOUT_CLASSIFICATION	7.684859320061135E-7	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999962695866857	WITHOUT_CLASSIFICATION	3.7304133143300177E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999343315206	WITHOUT_CLASSIFICATION	6.566847943722106E-8	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999989796739022	WITHOUT_CLASSIFICATION	1.0203260978049545E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983903764146	WITHOUT_CLASSIFICATION	1.6096235854677101E-6	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999831370907906	WITHOUT_CLASSIFICATION	1.686290920945155E-5	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999977561625041	WITHOUT_CLASSIFICATION	2.2438374959589787E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999910899673	WITHOUT_CLASSIFICATION	8.910032821511284E-9	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999998779407097	WITHOUT_CLASSIFICATION	1.220592902882683E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983903764146	WITHOUT_CLASSIFICATION	1.6096235854677101E-6	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999915634640378	WITHOUT_CLASSIFICATION	8.4365359621429E-6	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999860120029	WITHOUT_CLASSIFICATION	1.3987997086618918E-8	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999996798139109	WITHOUT_CLASSIFICATION	3.201860891356599E-7	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999958203025608	WITHOUT_CLASSIFICATION	4.179697439170216E-6	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997810390155408	WITHOUT_CLASSIFICATION	2.1896098445909522E-4	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999973183608489	WITHOUT_CLASSIFICATION	2.681639151006577E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999832591746	WITHOUT_CLASSIFICATION	1.674082532730642E-8	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999991635254835	WITHOUT_CLASSIFICATION	8.364745165147345E-7	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999970139305393	WITHOUT_CLASSIFICATION	2.986069460763424E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999999790652944	WITHOUT_CLASSIFICATION	2.0934705590701965E-7	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.999998999141067	WITHOUT_CLASSIFICATION	1.0008589329012635E-6	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9958016444765364	WITHOUT_CLASSIFICATION	0.004198355523463662	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999996242548544	WITHOUT_CLASSIFICATION	3.7574514558509836E-7	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999998238035348	WITHOUT_CLASSIFICATION	1.7619646511963384E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999986576665221	WITHOUT_CLASSIFICATION	1.3423334779492629E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.999997237760276	WITHOUT_CLASSIFICATION	2.7622397240062605E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999977732501989	WITHOUT_CLASSIFICATION	2.2267498011699338E-6	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998392853665	WITHOUT_CLASSIFICATION	1.607146335726432E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999262157519255	WITHOUT_CLASSIFICATION	7.378424807443382E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.999955017319177	WITHOUT_CLASSIFICATION	4.498268082301774E-5	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999616355607	WITHOUT_CLASSIFICATION	3.83644392265608E-8	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999966220041485	WITHOUT_CLASSIFICATION	3.3779958514442603E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999997181255219	WITHOUT_CLASSIFICATION	2.8187447806773507E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999987223862	WITHOUT_CLASSIFICATION	1.277613875233438E-9	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999993667136045	WITHOUT_CLASSIFICATION	6.332863955170379E-7	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999993265577857	WITHOUT_CLASSIFICATION	6.734422142526949E-7	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9981917527559392	WITHOUT_CLASSIFICATION	0.0018082472440607593	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998818161582	WITHOUT_CLASSIFICATION	1.1818384190379501E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.998831581561397	WITHOUT_CLASSIFICATION	0.0011684184386030424	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999618313028826	WITHOUT_CLASSIFICATION	3.816869711728822E-5	DEFECT
// and perform the load	WITHOUT_CLASSIFICATION	0.9999948364519454	WITHOUT_CLASSIFICATION	5.163548054530544E-6	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999862091262521	WITHOUT_CLASSIFICATION	1.3790873747962552E-5	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998100675673345	WITHOUT_CLASSIFICATION	1.899324326655681E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999986723737444	WITHOUT_CLASSIFICATION	1.3276262555753444E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999991780427622	WITHOUT_CLASSIFICATION	8.2195723792281E-7	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999971478954491	WITHOUT_CLASSIFICATION	2.85210455082005E-6	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999872936085591	WITHOUT_CLASSIFICATION	1.2706391440997695E-5	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999983000077299	WITHOUT_CLASSIFICATION	1.6999922699746614E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.999999908629685	WITHOUT_CLASSIFICATION	9.137031499229177E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999998363514172	WITHOUT_CLASSIFICATION	1.636485827351526E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999979396181771	WITHOUT_CLASSIFICATION	2.06038182291249E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999979396181771	WITHOUT_CLASSIFICATION	2.06038182291249E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999937704437418	WITHOUT_CLASSIFICATION	6.229556258236888E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999343884457	WITHOUT_CLASSIFICATION	6.561155422259063E-8	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946421003839	WITHOUT_CLASSIFICATION	5.357899616115319E-6	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5302946882829884	WITHOUT_CLASSIFICATION	0.46970531171701163	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704384086	WITHOUT_CLASSIFICATION	3.1295615914349253E-6	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999968704384086	WITHOUT_CLASSIFICATION	3.1295615914349253E-6	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999967446584526	WITHOUT_CLASSIFICATION	3.2553415474980054E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999995302729296	WITHOUT_CLASSIFICATION	4.697270704688909E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999632019650584	WITHOUT_CLASSIFICATION	3.679803494166217E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999871047820904	WITHOUT_CLASSIFICATION	1.2895217909559352E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999995606063343	WITHOUT_CLASSIFICATION	4.393936657127517E-7	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999993687502238	WITHOUT_CLASSIFICATION	6.312497762367063E-7	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999990530373319	WITHOUT_CLASSIFICATION	9.469626680260008E-7	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999998668839146	WITHOUT_CLASSIFICATION	1.3311608540529267E-7	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999908841475988	WITHOUT_CLASSIFICATION	9.115852401178225E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897377909223	WITHOUT_CLASSIFICATION	1.0262209077706778E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999897377909223	WITHOUT_CLASSIFICATION	1.0262209077706778E-5	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999670495073414	WITHOUT_CLASSIFICATION	3.2950492658697984E-5	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999894503067334	WITHOUT_CLASSIFICATION	1.0549693266664878E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999991304007219	WITHOUT_CLASSIFICATION	8.695992781772263E-7	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9998881577054243	WITHOUT_CLASSIFICATION	1.1184229457569477E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999991092326651	WITHOUT_CLASSIFICATION	8.907673349516489E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999453704428	WITHOUT_CLASSIFICATION	5.4629557311181364E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907309277064	WITHOUT_CLASSIFICATION	9.269072293697474E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999163247578	WITHOUT_CLASSIFICATION	8.367524226770261E-8	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999943501198362	WITHOUT_CLASSIFICATION	5.649880163772322E-6	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998801762517245	WITHOUT_CLASSIFICATION	1.1982374827544544E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999532339030174	WITHOUT_CLASSIFICATION	4.6766096982657506E-5	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999999790652944	WITHOUT_CLASSIFICATION	2.0934705590701965E-7	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999999861129824	WITHOUT_CLASSIFICATION	1.3887017605138504E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995594127105182	WITHOUT_CLASSIFICATION	4.4058728948179773E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999990543724806	WITHOUT_CLASSIFICATION	9.456275194502367E-7	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999964800228102	WITHOUT_CLASSIFICATION	3.5199771899096057E-6	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999875781980899	WITHOUT_CLASSIFICATION	1.242180191000398E-5	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999981235530762	WITHOUT_CLASSIFICATION	1.876446923866748E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999855771532793	WITHOUT_CLASSIFICATION	1.442284672078674E-5	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999613526475	WITHOUT_CLASSIFICATION	3.864735255877248E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999988553745525	WITHOUT_CLASSIFICATION	1.1446254475104253E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999968766481655	WITHOUT_CLASSIFICATION	3.123351834499284E-5	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.999968766481655	WITHOUT_CLASSIFICATION	3.123351834499284E-5	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999724492345374	WITHOUT_CLASSIFICATION	2.7550765462527946E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999413953693	WITHOUT_CLASSIFICATION	5.860463063337412E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999217116302458	WITHOUT_CLASSIFICATION	7.828836975421994E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999995276872871	WITHOUT_CLASSIFICATION	4.72312712853904E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999979150802081	WITHOUT_CLASSIFICATION	2.0849197919178017E-6	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999997712285655	WITHOUT_CLASSIFICATION	2.2877143456003695E-7	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999840567257	WITHOUT_CLASSIFICATION	1.594327426617338E-8	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999997580335674	WITHOUT_CLASSIFICATION	2.419664325988432E-7	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999997549587971	WITHOUT_CLASSIFICATION	2.450412029251829E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999938093217177	WITHOUT_CLASSIFICATION	6.190678282329384E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975174104141	WITHOUT_CLASSIFICATION	2.4825895859385315E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999980117622423	WITHOUT_CLASSIFICATION	1.9882377575435698E-6	DEFECT
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999999857343517	WITHOUT_CLASSIFICATION	1.426564838373391E-8	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999996366884507	WITHOUT_CLASSIFICATION	3.633115492902177E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997518481387	WITHOUT_CLASSIFICATION	2.481518613232211E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999539673854	WITHOUT_CLASSIFICATION	4.603261468203574E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999991502572253	WITHOUT_CLASSIFICATION	8.497427748127776E-7	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967789806535	WITHOUT_CLASSIFICATION	3.2210193465416245E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999126806316854	WITHOUT_CLASSIFICATION	8.73193683146997E-5	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9983338948099427	WITHOUT_CLASSIFICATION	0.0016661051900573112	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999890601256763	WITHOUT_CLASSIFICATION	1.0939874323730318E-5	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999885831178811	WITHOUT_CLASSIFICATION	1.1416882118852546E-5	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999796585947919	WITHOUT_CLASSIFICATION	2.034140520810331E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.7360850282267123	WITHOUT_CLASSIFICATION	0.2639149717732876	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998444887128	WITHOUT_CLASSIFICATION	1.555112871984401E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999998444887128	WITHOUT_CLASSIFICATION	1.555112871984401E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999966114864037	WITHOUT_CLASSIFICATION	3.3885135962914395E-6	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999999891845565	WITHOUT_CLASSIFICATION	1.0815443488474365E-7	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999499548	WITHOUT_CLASSIFICATION	5.004517852523623E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999998128303831	WITHOUT_CLASSIFICATION	1.8716961678403012E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964782550108	WITHOUT_CLASSIFICATION	3.5217449892703866E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9975002266821831	WITHOUT_CLASSIFICATION	0.002499773317816984	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9998892748342469	WITHOUT_CLASSIFICATION	1.1072516575305327E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.999998772895491	WITHOUT_CLASSIFICATION	1.2271045089875347E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9917986856354265	WITHOUT_CLASSIFICATION	0.008201314364573555	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.6688281442017696	WITHOUT_CLASSIFICATION	0.33117185579823044	DEFECT
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.998008268579539	WITHOUT_CLASSIFICATION	0.0019917314204610285	DEFECT
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.9920215701455184	WITHOUT_CLASSIFICATION	0.007978429854481536	DEFECT
/*	DEFECT	0.996192926653789	WITHOUT_CLASSIFICATION	0.003807073346210988	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9711588799678318	WITHOUT_CLASSIFICATION	0.02884112003216823	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9712215540532396	WITHOUT_CLASSIFICATION	0.0287784459467604	DEFECT
// TODO : should this be an error?	DEFECT	0.9992335702994056	DEFECT	7.664297005943307E-4	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9991237704108215	DEFECT	8.762295891784462E-4	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.5436407880853932	DEFECT	0.4563592119146068	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5855328653415124	WITHOUT_CLASSIFICATION	0.41446713465848756	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5855328653415124	WITHOUT_CLASSIFICATION	0.41446713465848756	DEFECT
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.8615195797336703	WITHOUT_CLASSIFICATION	0.13848042026632967	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999591025085633	WITHOUT_CLASSIFICATION	4.0897491436597266E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.5506108359470278	DEFECT	0.4493891640529723	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.999968384354941	WITHOUT_CLASSIFICATION	3.161564505906216E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.997485461860249	WITHOUT_CLASSIFICATION	0.002514538139751068	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.7089854879889126	WITHOUT_CLASSIFICATION	0.29101451201108747	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.99580297168249	WITHOUT_CLASSIFICATION	0.004197028317510052	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.5225709192676066	WITHOUT_CLASSIFICATION	0.4774290807323935	DEFECT
//TODO: is this completely correct?	DEFECT	0.9802585414227829	DEFECT	0.019741458577217083	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999560202783296	WITHOUT_CLASSIFICATION	4.3979721670432445E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9993703141571627	WITHOUT_CLASSIFICATION	6.296858428373086E-4	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9734411446264428	WITHOUT_CLASSIFICATION	0.026558855373557205	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.9788161258320542	WITHOUT_CLASSIFICATION	0.021183874167945742	DEFECT
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999990654374864	DEFECT	9.345625136040409E-7	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.8766074390673382	WITHOUT_CLASSIFICATION	0.12339256093266174	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9965874915196384	WITHOUT_CLASSIFICATION	0.0034125084803616024	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.7187311083395593	WITHOUT_CLASSIFICATION	0.2812688916604406	DEFECT
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.6050179431352835	DEFECT	0.3949820568647165	WITHOUT_CLASSIFICATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7237295321165665	WITHOUT_CLASSIFICATION	0.27627046788343335	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.5855328653415124	WITHOUT_CLASSIFICATION	0.41446713465848756	DEFECT
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.997655695335457	DEFECT	0.0023443046645429187	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9980205396951507	WITHOUT_CLASSIFICATION	0.0019794603048493165	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.842677214079493	WITHOUT_CLASSIFICATION	0.15732278592050702	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9998925834764646	WITHOUT_CLASSIFICATION	1.0741652353541843E-4	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999947019049589	WITHOUT_CLASSIFICATION	5.298095041100186E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9891812036811505	WITHOUT_CLASSIFICATION	0.010818796318849513	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9994110971110083	WITHOUT_CLASSIFICATION	5.889028889917497E-4	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.5353748572899429	DEFECT	0.4646251427100572	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.8491442649570168	WITHOUT_CLASSIFICATION	0.15085573504298333	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.972327676885511	WITHOUT_CLASSIFICATION	0.02767232311448897	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9866149347579243	WITHOUT_CLASSIFICATION	0.01338506524207567	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.5502362607904796	WITHOUT_CLASSIFICATION	0.4497637392095204	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9999943050973982	WITHOUT_CLASSIFICATION	5.694902601905692E-6	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.6397198312948668	WITHOUT_CLASSIFICATION	0.36028016870513324	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.6842375326379386	WITHOUT_CLASSIFICATION	0.3157624673620613	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9969985403636279	WITHOUT_CLASSIFICATION	0.003001459636372147	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.5332380041776814	DEFECT	0.4667619958223187	WITHOUT_CLASSIFICATION
