//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999914302922	WITHOUT_CLASSIFICATION	8.569707791267343E-9	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999908717264584	WITHOUT_CLASSIFICATION	9.128273541556312E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252712004	WITHOUT_CLASSIFICATION	4.747287996702235E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999999793325303	WITHOUT_CLASSIFICATION	2.0667469759830706E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907822439323	WITHOUT_CLASSIFICATION	9.217756067695879E-6	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907822439323	WITHOUT_CLASSIFICATION	9.217756067695879E-6	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999953339905	WITHOUT_CLASSIFICATION	4.666009431954035E-9	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992109974417	WITHOUT_CLASSIFICATION	7.890025581781689E-7	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999998531121996	WITHOUT_CLASSIFICATION	1.4688780042519347E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999978455084847	WITHOUT_CLASSIFICATION	2.1544915153503363E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045419234	WITHOUT_CLASSIFICATION	2.995458076553462E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045419234	WITHOUT_CLASSIFICATION	2.995458076553462E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872252716355	WITHOUT_CLASSIFICATION	1.2774728364510427E-5	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999747994907	WITHOUT_CLASSIFICATION	2.5200509440682262E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999110072842288	WITHOUT_CLASSIFICATION	8.899271577129617E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999970442026435	WITHOUT_CLASSIFICATION	2.955797356510619E-6	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999103049315	WITHOUT_CLASSIFICATION	8.969506846887111E-8	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072261799	WITHOUT_CLASSIFICATION	4.92773820124103E-7	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999899062571536	WITHOUT_CLASSIFICATION	1.0093742846401279E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999995951812314	WITHOUT_CLASSIFICATION	4.04818768493699E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694132361	WITHOUT_CLASSIFICATION	2.5305867639304343E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934717883781972	WITHOUT_CLASSIFICATION	0.006528211621802898	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999997331573393	WITHOUT_CLASSIFICATION	2.668426607243583E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996121183585	WITHOUT_CLASSIFICATION	3.87881641451958E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995618596802	WITHOUT_CLASSIFICATION	4.381403197842369E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510755437	WITHOUT_CLASSIFICATION	4.489244563833877E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510755437	WITHOUT_CLASSIFICATION	4.489244563833877E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999989659421956	WITHOUT_CLASSIFICATION	1.0340578043368377E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999954595808245	WITHOUT_CLASSIFICATION	4.5404191755765215E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999774753335	WITHOUT_CLASSIFICATION	2.2524666477835235E-8	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991502236821	WITHOUT_CLASSIFICATION	8.497763178221446E-7	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999999676803983	WITHOUT_CLASSIFICATION	3.231960163315848E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246673660859225	WITHOUT_CLASSIFICATION	0.4753326339140776	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246673660859225	WITHOUT_CLASSIFICATION	0.4753326339140776	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998913679766	WITHOUT_CLASSIFICATION	1.0863202329417313E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998665357200652	WITHOUT_CLASSIFICATION	1.33464279934736E-4	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999874923889	WITHOUT_CLASSIFICATION	1.2507611138737141E-8	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988925589147	WITHOUT_CLASSIFICATION	1.1074410852651552E-6	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999926241589289	WITHOUT_CLASSIFICATION	7.375841071101753E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998122845725	WITHOUT_CLASSIFICATION	1.8771542747791293E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985909816012	WITHOUT_CLASSIFICATION	1.4090183987927936E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999476364587	WITHOUT_CLASSIFICATION	5.236354130314056E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999705365384551	WITHOUT_CLASSIFICATION	2.9463461544910183E-5	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9870291954340644	WITHOUT_CLASSIFICATION	0.012970804565935702	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999923887961442	WITHOUT_CLASSIFICATION	7.6112038558174115E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999705365384551	WITHOUT_CLASSIFICATION	2.9463461544910183E-5	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999923887961442	WITHOUT_CLASSIFICATION	7.6112038558174115E-6	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999997553267562	WITHOUT_CLASSIFICATION	2.4467324380464004E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999998090232204	WITHOUT_CLASSIFICATION	1.909767795370939E-7	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999994531122043	WITHOUT_CLASSIFICATION	5.468877957087235E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999945036171894	WITHOUT_CLASSIFICATION	5.496382810606158E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999610801685	WITHOUT_CLASSIFICATION	3.891983143630909E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999978863883	WITHOUT_CLASSIFICATION	2.113611778690921E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999902875114651	WITHOUT_CLASSIFICATION	9.712488534967227E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9999265815273303	WITHOUT_CLASSIFICATION	7.341847266974352E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999998967398258	WITHOUT_CLASSIFICATION	1.0326017422208315E-7	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999998697399053	WITHOUT_CLASSIFICATION	1.3026009474018755E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999969783344581	WITHOUT_CLASSIFICATION	3.0216655420292527E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999966978750476	WITHOUT_CLASSIFICATION	3.3021249524117025E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998838774248	WITHOUT_CLASSIFICATION	1.1612257518648626E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999990126615657	WITHOUT_CLASSIFICATION	9.873384343517827E-7	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997110366137	WITHOUT_CLASSIFICATION	2.8896338632591294E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999996315227203	WITHOUT_CLASSIFICATION	3.684772796230772E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999981130050493	WITHOUT_CLASSIFICATION	1.8869949507896554E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999982580079166	WITHOUT_CLASSIFICATION	1.7419920833248418E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999546059948	WITHOUT_CLASSIFICATION	4.5394005106053793E-8	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999758702082	WITHOUT_CLASSIFICATION	2.4129791766828656E-8	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999999576488283	WITHOUT_CLASSIFICATION	4.235117178779042E-8	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999964061447	WITHOUT_CLASSIFICATION	3.593855373139499E-9	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999883126293	WITHOUT_CLASSIFICATION	1.1687370725493653E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999983483737133	WITHOUT_CLASSIFICATION	1.651626286770983E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.999976290261148	WITHOUT_CLASSIFICATION	2.3709738852022437E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999878024282	WITHOUT_CLASSIFICATION	1.2197571799753526E-7	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999998966046	WITHOUT_CLASSIFICATION	1.0339541521200793E-10	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999902430777	WITHOUT_CLASSIFICATION	9.756922206838389E-9	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.999999957057967	WITHOUT_CLASSIFICATION	4.294203305646595E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999971257336	WITHOUT_CLASSIFICATION	2.874266508039714E-9	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999851356716	WITHOUT_CLASSIFICATION	1.4864328342986109E-8	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999968510337	WITHOUT_CLASSIFICATION	3.1489662982488762E-9	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999605912103302	WITHOUT_CLASSIFICATION	3.940878966979056E-5	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990645091648	WITHOUT_CLASSIFICATION	9.354908351619304E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999925606049023	WITHOUT_CLASSIFICATION	7.439395097640463E-6	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998833732552	WITHOUT_CLASSIFICATION	1.1662674493175846E-7	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999990645091648	WITHOUT_CLASSIFICATION	9.354908351619304E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996862562115	WITHOUT_CLASSIFICATION	3.1374378851572435E-7	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999970356912192	WITHOUT_CLASSIFICATION	2.964308780792797E-5	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999956134614287	WITHOUT_CLASSIFICATION	4.386538571314233E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999993290123669	WITHOUT_CLASSIFICATION	6.709876331803744E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.9999998989919092	WITHOUT_CLASSIFICATION	1.0100809084889784E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623953108	WITHOUT_CLASSIFICATION	7.376046891515284E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623953108	WITHOUT_CLASSIFICATION	7.376046891515284E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999931435265292	WITHOUT_CLASSIFICATION	6.856473470862631E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998438315696	WITHOUT_CLASSIFICATION	1.5616843039897877E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999963563973462	WITHOUT_CLASSIFICATION	3.6436026538472167E-6	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999993951024	WITHOUT_CLASSIFICATION	6.048975255396081E-10	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997396103971	WITHOUT_CLASSIFICATION	2.603896029562468E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999961529015	WITHOUT_CLASSIFICATION	3.847098506201209E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999993276843538	WITHOUT_CLASSIFICATION	6.72315646127137E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999805859366891	WITHOUT_CLASSIFICATION	1.9414063310791672E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999996229725	WITHOUT_CLASSIFICATION	3.770274898116837E-9	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999835276517	WITHOUT_CLASSIFICATION	1.6472348324478905E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110998	WITHOUT_CLASSIFICATION	3.5889002454229458E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110998	WITHOUT_CLASSIFICATION	3.5889002454229458E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734483205562	WITHOUT_CLASSIFICATION	2.655167944379127E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999968736087751	WITHOUT_CLASSIFICATION	3.1263912248466647E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999999214800275	WITHOUT_CLASSIFICATION	7.851997251632305E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999964110998	WITHOUT_CLASSIFICATION	3.5889002454229458E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734483205562	WITHOUT_CLASSIFICATION	2.655167944379127E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999734483205562	WITHOUT_CLASSIFICATION	2.655167944379127E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999950765442	WITHOUT_CLASSIFICATION	4.923455732521042E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999984822475555	WITHOUT_CLASSIFICATION	1.5177524445196632E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999962893365405	WITHOUT_CLASSIFICATION	3.710663459353012E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999981229625	WITHOUT_CLASSIFICATION	1.8770375322341465E-9	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999998142487656	WITHOUT_CLASSIFICATION	1.8575123439965262E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999998142487656	WITHOUT_CLASSIFICATION	1.8575123439965262E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999440052099	WITHOUT_CLASSIFICATION	5.5994790184837556E-8	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999993360477819	WITHOUT_CLASSIFICATION	6.639522181094637E-7	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999989800901703	WITHOUT_CLASSIFICATION	1.0199098297271193E-6	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996467326139	WITHOUT_CLASSIFICATION	3.5326738614522923E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999996467326139	WITHOUT_CLASSIFICATION	3.5326738614522923E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999985691891933	WITHOUT_CLASSIFICATION	1.430810806728014E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999848629501866	WITHOUT_CLASSIFICATION	1.5137049813407222E-5	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999742937193117	WITHOUT_CLASSIFICATION	2.57062806883883E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999815230302	WITHOUT_CLASSIFICATION	1.8476969926032386E-8	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999999939594681	WITHOUT_CLASSIFICATION	6.040531830282237E-9	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999697535422	WITHOUT_CLASSIFICATION	3.024645777948008E-8	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999905464188498	WITHOUT_CLASSIFICATION	9.453581150217341E-6	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999999149716376	WITHOUT_CLASSIFICATION	8.502836232347795E-8	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999987463854307	WITHOUT_CLASSIFICATION	1.2536145692366133E-6	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999742937193117	WITHOUT_CLASSIFICATION	2.57062806883883E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999777011847222	WITHOUT_CLASSIFICATION	2.2298815277755915E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731178641	WITHOUT_CLASSIFICATION	2.7268821358873735E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731178641	WITHOUT_CLASSIFICATION	2.7268821358873735E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999984774838679	WITHOUT_CLASSIFICATION	1.5225161320778143E-6	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999992119436637	WITHOUT_CLASSIFICATION	7.880563363293398E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938132233771	WITHOUT_CLASSIFICATION	6.186776622876436E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999918548121025	WITHOUT_CLASSIFICATION	8.145187897409973E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.99999974267946	WITHOUT_CLASSIFICATION	2.5732054005348344E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999850323347038	WITHOUT_CLASSIFICATION	1.4967665296098148E-5	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9996673150173648	WITHOUT_CLASSIFICATION	3.3268498263526594E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999996169004	WITHOUT_CLASSIFICATION	3.8309961889768967E-10	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999199494205	WITHOUT_CLASSIFICATION	8.005057950995007E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999199494205	WITHOUT_CLASSIFICATION	8.005057950995007E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999914302922	WITHOUT_CLASSIFICATION	8.569707791267343E-9	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997718652124	WITHOUT_CLASSIFICATION	2.2813478771956893E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999995040109414	WITHOUT_CLASSIFICATION	4.959890585551188E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999989449388292	WITHOUT_CLASSIFICATION	1.0550611706835724E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999999329238518	WITHOUT_CLASSIFICATION	6.707614811139868E-8	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999999377407034	WITHOUT_CLASSIFICATION	6.225929665946684E-8	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999993218140963	WITHOUT_CLASSIFICATION	6.781859037339405E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998455347730731	WITHOUT_CLASSIFICATION	1.5446522692682914E-4	DEFECT
// new	WITHOUT_CLASSIFICATION	0.9999979424361471	WITHOUT_CLASSIFICATION	2.057563852844805E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128209047	WITHOUT_CLASSIFICATION	4.087179095289106E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999996889969931	WITHOUT_CLASSIFICATION	3.1100300695318906E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252712004	WITHOUT_CLASSIFICATION	4.747287996702235E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403271168	WITHOUT_CLASSIFICATION	1.1596728832076568E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403271168	WITHOUT_CLASSIFICATION	1.1596728832076568E-6	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.999999884443118	WITHOUT_CLASSIFICATION	1.155568819550852E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999896466980092	WITHOUT_CLASSIFICATION	1.0353301990700119E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999994570126772	WITHOUT_CLASSIFICATION	5.42987322717467E-7	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.99999693008117	WITHOUT_CLASSIFICATION	3.0699188300006077E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999994394060878	WITHOUT_CLASSIFICATION	5.60593912047467E-7	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999704586899	WITHOUT_CLASSIFICATION	2.954131002635211E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999907822439323	WITHOUT_CLASSIFICATION	9.217756067695879E-6	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999998393392459	WITHOUT_CLASSIFICATION	1.6066075418380649E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976740980658	WITHOUT_CLASSIFICATION	2.3259019342750787E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999995085897861	WITHOUT_CLASSIFICATION	4.914102138109187E-7	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996051565253	WITHOUT_CLASSIFICATION	3.9484347473932165E-7	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999948503381071	WITHOUT_CLASSIFICATION	5.149661892922703E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.999998245878914	WITHOUT_CLASSIFICATION	1.7541210860388861E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601736448	WITHOUT_CLASSIFICATION	3.982635530960894E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998402931423	WITHOUT_CLASSIFICATION	1.5970685777931248E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999999172234622	WITHOUT_CLASSIFICATION	8.277653790070837E-8	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999981816570902	WITHOUT_CLASSIFICATION	1.818342909802241E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999989438151671	WITHOUT_CLASSIFICATION	1.0561848329172454E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.999999920430737	WITHOUT_CLASSIFICATION	7.956926301787513E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.9999988588659576	WITHOUT_CLASSIFICATION	1.1411340423010304E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128209047	WITHOUT_CLASSIFICATION	4.087179095289106E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999988403271168	WITHOUT_CLASSIFICATION	1.1596728832076568E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601736448	WITHOUT_CLASSIFICATION	3.982635530960894E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999953339905	WITHOUT_CLASSIFICATION	4.666009431954035E-9	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999996564149883	WITHOUT_CLASSIFICATION	3.435850117044574E-7	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999267602348226	WITHOUT_CLASSIFICATION	7.32397651773565E-5	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999940752007005	WITHOUT_CLASSIFICATION	5.924799299467045E-6	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999929298000104	WITHOUT_CLASSIFICATION	7.070199989605081E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999873319087276	WITHOUT_CLASSIFICATION	1.266809127246922E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999980742403783	WITHOUT_CLASSIFICATION	1.9257596216376627E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999121228447184	WITHOUT_CLASSIFICATION	8.787715528161539E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999874234159283	WITHOUT_CLASSIFICATION	1.25765840717333E-5	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999998771135516	WITHOUT_CLASSIFICATION	1.2288644838355332E-7	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999980567079741	WITHOUT_CLASSIFICATION	1.943292025932433E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999980567079741	WITHOUT_CLASSIFICATION	1.943292025932433E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999937632353	WITHOUT_CLASSIFICATION	6.236764621125572E-9	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994077017926	WITHOUT_CLASSIFICATION	5.922982074169272E-7	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999898621226073	WITHOUT_CLASSIFICATION	1.0137877392582096E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999903402404184	WITHOUT_CLASSIFICATION	9.659759581563514E-6	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999939657434	WITHOUT_CLASSIFICATION	6.034256644927127E-9	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999412299714	WITHOUT_CLASSIFICATION	5.877002849483682E-8	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999375861107	WITHOUT_CLASSIFICATION	6.241388921238393E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999992109974417	WITHOUT_CLASSIFICATION	7.890025581781689E-7	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999898352055987	WITHOUT_CLASSIFICATION	1.0164794401201824E-5	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993185999594	WITHOUT_CLASSIFICATION	6.814000405747916E-7	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993185999594	WITHOUT_CLASSIFICATION	6.814000405747916E-7	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999407045895	WITHOUT_CLASSIFICATION	5.9295410395397906E-8	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999997386807526	WITHOUT_CLASSIFICATION	2.613192473227415E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999995398287648	WITHOUT_CLASSIFICATION	4.601712353209662E-7	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999943097345364	WITHOUT_CLASSIFICATION	5.690265463603093E-6	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999880077536633	WITHOUT_CLASSIFICATION	1.1992246336823029E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999981897458348	WITHOUT_CLASSIFICATION	1.810254165258258E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999959128209047	WITHOUT_CLASSIFICATION	4.087179095289106E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995252712004	WITHOUT_CLASSIFICATION	4.747287996702235E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601736448	WITHOUT_CLASSIFICATION	3.982635530960894E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999601736448	WITHOUT_CLASSIFICATION	3.982635530960894E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109379243	WITHOUT_CLASSIFICATION	3.8906207569075217E-7	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999996109379243	WITHOUT_CLASSIFICATION	3.8906207569075217E-7	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997538953005	WITHOUT_CLASSIFICATION	2.461046994641424E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983773420525	WITHOUT_CLASSIFICATION	1.6226579473713015E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999983773420525	WITHOUT_CLASSIFICATION	1.6226579473713015E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999997855464786	WITHOUT_CLASSIFICATION	2.1445352144374482E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999986967276273	WITHOUT_CLASSIFICATION	1.3032723726361516E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999999098035487	WITHOUT_CLASSIFICATION	9.01964513039187E-8	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999993571808727	WITHOUT_CLASSIFICATION	6.428191273437791E-7	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999848025069618	WITHOUT_CLASSIFICATION	1.519749303833626E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999978455084847	WITHOUT_CLASSIFICATION	2.1544915153503363E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999978455084847	WITHOUT_CLASSIFICATION	2.1544915153503363E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999869521038103	WITHOUT_CLASSIFICATION	1.3047896189732736E-5	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999923919562749	WITHOUT_CLASSIFICATION	7.6080437250890206E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999998758739594	WITHOUT_CLASSIFICATION	1.241260406175639E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999971802254203	WITHOUT_CLASSIFICATION	2.8197745797121746E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999999126778062	WITHOUT_CLASSIFICATION	8.73221937909138E-8	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999986831717103	WITHOUT_CLASSIFICATION	1.3168282898289283E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045419234	WITHOUT_CLASSIFICATION	2.995458076553462E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999915544171236	WITHOUT_CLASSIFICATION	8.445582876413845E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999915544171236	WITHOUT_CLASSIFICATION	8.445582876413845E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872252716355	WITHOUT_CLASSIFICATION	1.2774728364510427E-5	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872252716355	WITHOUT_CLASSIFICATION	1.2774728364510427E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028498459	WITHOUT_CLASSIFICATION	3.1971501540389765E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028498459	WITHOUT_CLASSIFICATION	3.1971501540389765E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270669	WITHOUT_CLASSIFICATION	4.272933101685553E-9	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270669	WITHOUT_CLASSIFICATION	4.272933101685553E-9	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999978455084847	WITHOUT_CLASSIFICATION	2.1544915153503363E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999970045419234	WITHOUT_CLASSIFICATION	2.995458076553462E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999915544171236	WITHOUT_CLASSIFICATION	8.445582876413845E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999915544171236	WITHOUT_CLASSIFICATION	8.445582876413845E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999872252716355	WITHOUT_CLASSIFICATION	1.2774728364510427E-5	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028498459	WITHOUT_CLASSIFICATION	3.1971501540389765E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999968028498459	WITHOUT_CLASSIFICATION	3.1971501540389765E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999957270669	WITHOUT_CLASSIFICATION	4.272933101685553E-9	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999988854840071	WITHOUT_CLASSIFICATION	1.1145159929640837E-6	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999998668311866	WITHOUT_CLASSIFICATION	1.331688133943712E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999944718966028	WITHOUT_CLASSIFICATION	5.528103397175983E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999988297384974	WITHOUT_CLASSIFICATION	1.1702615026140904E-6	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999522909239	WITHOUT_CLASSIFICATION	4.770907620794292E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980659288731	WITHOUT_CLASSIFICATION	1.9340711270134435E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999959809647664	WITHOUT_CLASSIFICATION	4.019035233601741E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9593217019976156	WITHOUT_CLASSIFICATION	0.04067829800238447	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9995841837405632	WITHOUT_CLASSIFICATION	4.1581625943682717E-4	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998524198298	WITHOUT_CLASSIFICATION	1.4758017015674796E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999979594282056	WITHOUT_CLASSIFICATION	2.040571794529756E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999056297131	WITHOUT_CLASSIFICATION	9.437028684924885E-8	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999931435265292	WITHOUT_CLASSIFICATION	6.856473470862631E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999980659288731	WITHOUT_CLASSIFICATION	1.9340711270134435E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518495986599	WITHOUT_CLASSIFICATION	4.815040134003213E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518495986599	WITHOUT_CLASSIFICATION	4.815040134003213E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999696827215211	WITHOUT_CLASSIFICATION	3.0317278478990892E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999220768859	WITHOUT_CLASSIFICATION	7.792311411129354E-8	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999220768859	WITHOUT_CLASSIFICATION	7.792311411129354E-8	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999958561130539	WITHOUT_CLASSIFICATION	4.143886946143286E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999961834478879	WITHOUT_CLASSIFICATION	3.81655211212239E-6	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999943455147621	WITHOUT_CLASSIFICATION	5.6544852379358405E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99999981133523	WITHOUT_CLASSIFICATION	1.886647700511202E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.99999981133523	WITHOUT_CLASSIFICATION	1.886647700511202E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999103049315	WITHOUT_CLASSIFICATION	8.969506846887111E-8	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999926945774299	WITHOUT_CLASSIFICATION	7.305422570045211E-6	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999926945774299	WITHOUT_CLASSIFICATION	7.305422570045211E-6	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999999523870968	WITHOUT_CLASSIFICATION	4.761290320312787E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999998060839523	WITHOUT_CLASSIFICATION	1.9391604767641795E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999994540445213	WITHOUT_CLASSIFICATION	5.459554786417867E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999985994817696	WITHOUT_CLASSIFICATION	1.40051823043717E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999988697156844	WITHOUT_CLASSIFICATION	1.1302843155927214E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999974811849267	WITHOUT_CLASSIFICATION	2.5188150732971356E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072261799	WITHOUT_CLASSIFICATION	4.92773820124103E-7	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999985218208531	WITHOUT_CLASSIFICATION	1.4781791468848837E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.996708258015879	WITHOUT_CLASSIFICATION	0.0032917419841208286	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999953061411841	WITHOUT_CLASSIFICATION	4.693858815820776E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999998587432796	WITHOUT_CLASSIFICATION	1.4125672040026219E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694132361	WITHOUT_CLASSIFICATION	2.5305867639304343E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999999895208631	WITHOUT_CLASSIFICATION	1.0479136902057777E-7	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999997802046161	WITHOUT_CLASSIFICATION	2.1979538397712114E-7	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999813877433	WITHOUT_CLASSIFICATION	1.8612256784310992E-8	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694132361	WITHOUT_CLASSIFICATION	2.5305867639304343E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.99999971619506	WITHOUT_CLASSIFICATION	2.8380494007578183E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997945829083	WITHOUT_CLASSIFICATION	2.0541709165794126E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999997764582501	WITHOUT_CLASSIFICATION	2.23541749797142E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.999989423923791	WITHOUT_CLASSIFICATION	1.057607620905223E-5	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999905119568488	WITHOUT_CLASSIFICATION	9.488043151119047E-6	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987287630494	WITHOUT_CLASSIFICATION	1.2712369506397024E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999998361616911	WITHOUT_CLASSIFICATION	1.6383830887746612E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999996121183585	WITHOUT_CLASSIFICATION	3.87881641451958E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462234507	WITHOUT_CLASSIFICATION	6.537765493579335E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999995618596802	WITHOUT_CLASSIFICATION	4.381403197842369E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991105862869	WITHOUT_CLASSIFICATION	8.894137131286389E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999961184429	WITHOUT_CLASSIFICATION	3.881557092385022E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967235587119	WITHOUT_CLASSIFICATION	3.2764412880020773E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999995072261799	WITHOUT_CLASSIFICATION	4.92773820124103E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462234507	WITHOUT_CLASSIFICATION	6.537765493579335E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999991105862869	WITHOUT_CLASSIFICATION	8.894137131286389E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967235587119	WITHOUT_CLASSIFICATION	3.2764412880020773E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998571055958	WITHOUT_CLASSIFICATION	1.428944042247915E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999958064498099	WITHOUT_CLASSIFICATION	4.193550190077002E-6	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999713092584	WITHOUT_CLASSIFICATION	2.8690741625091256E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510755437	WITHOUT_CLASSIFICATION	4.489244563833877E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999997468533642	WITHOUT_CLASSIFICATION	2.531466358281613E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.999988690260202	WITHOUT_CLASSIFICATION	1.130973979805116E-5	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.999996200867441	WITHOUT_CLASSIFICATION	3.7991325589173014E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999998877069276	WITHOUT_CLASSIFICATION	1.1229307240361243E-7	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999987941936248	WITHOUT_CLASSIFICATION	1.2058063751530532E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999949670547	WITHOUT_CLASSIFICATION	5.032945268688065E-9	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999245905611	WITHOUT_CLASSIFICATION	7.540943894769734E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999987922677956	WITHOUT_CLASSIFICATION	1.2077322043900507E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999992532647	WITHOUT_CLASSIFICATION	7.467352422004273E-10	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996429435458	WITHOUT_CLASSIFICATION	3.5705645423186505E-7	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999922132489829	WITHOUT_CLASSIFICATION	7.78675101702069E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999997010274128	WITHOUT_CLASSIFICATION	2.9897258731753253E-7	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999954595808245	WITHOUT_CLASSIFICATION	4.5404191755765215E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999993922854568	WITHOUT_CLASSIFICATION	6.077145432729686E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999967685409664	WITHOUT_CLASSIFICATION	3.2314590335862106E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999993462234507	WITHOUT_CLASSIFICATION	6.537765493579335E-7	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999637247312	WITHOUT_CLASSIFICATION	3.6275268713532235E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999921131505	WITHOUT_CLASSIFICATION	7.88684953883203E-9	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999441860021	WITHOUT_CLASSIFICATION	5.581399792338432E-8	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999999815032576	WITHOUT_CLASSIFICATION	1.849674239579896E-8	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.999999976716072	WITHOUT_CLASSIFICATION	2.3283927930741265E-8	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999889485998044	WITHOUT_CLASSIFICATION	1.1051400195621026E-5	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999804320704	WITHOUT_CLASSIFICATION	1.9567929582952444E-8	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999991471575	WITHOUT_CLASSIFICATION	8.528424342931596E-10	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999930213716607	WITHOUT_CLASSIFICATION	6.978628339299866E-6	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.999997943408941	WITHOUT_CLASSIFICATION	2.056591058970192E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994138296615	WITHOUT_CLASSIFICATION	5.861703385131802E-7	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999999486952401	WITHOUT_CLASSIFICATION	5.13047599015226E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999983147133468	WITHOUT_CLASSIFICATION	1.6852866533072817E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999991502236821	WITHOUT_CLASSIFICATION	8.497763178221446E-7	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999999445264434	WITHOUT_CLASSIFICATION	5.547355671343481E-8	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999996829954153	WITHOUT_CLASSIFICATION	3.170045847172848E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999927767397349	WITHOUT_CLASSIFICATION	7.223260265129736E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999975422387705	WITHOUT_CLASSIFICATION	2.4577612295484135E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999991306730405	WITHOUT_CLASSIFICATION	8.693269596147288E-7	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999880886780288	WITHOUT_CLASSIFICATION	1.1911321971171668E-5	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999999999998879	WITHOUT_CLASSIFICATION	1.1210387308139493E-12	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999850224038018	WITHOUT_CLASSIFICATION	1.497759619819297E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999744305734	WITHOUT_CLASSIFICATION	2.5569426458760842E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999963937360301	WITHOUT_CLASSIFICATION	3.6062639699346087E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999881397617416	WITHOUT_CLASSIFICATION	1.186023825845436E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999881397617416	WITHOUT_CLASSIFICATION	1.186023825845436E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999722820803726	WITHOUT_CLASSIFICATION	2.771791962733831E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999994093993638	WITHOUT_CLASSIFICATION	5.906006361905748E-7	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999997500041297	WITHOUT_CLASSIFICATION	2.4999587039541313E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999987470647101	WITHOUT_CLASSIFICATION	1.252935289839646E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999997705430098	WITHOUT_CLASSIFICATION	2.2945699021410807E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9994657461143673	WITHOUT_CLASSIFICATION	5.342538856326413E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999868878684176	WITHOUT_CLASSIFICATION	1.3112131582344639E-5	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999998973425879	WITHOUT_CLASSIFICATION	1.0265741222273458E-7	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999971059514029	WITHOUT_CLASSIFICATION	2.8940485970724435E-6	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999984705861144	WITHOUT_CLASSIFICATION	1.5294138856391253E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999979185089528	WITHOUT_CLASSIFICATION	2.0814910471362085E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999954393937965	WITHOUT_CLASSIFICATION	4.560606203505425E-6	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9992617118305674	WITHOUT_CLASSIFICATION	7.382881694324521E-4	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999894626999472	WITHOUT_CLASSIFICATION	1.053730005294727E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990221704186	WITHOUT_CLASSIFICATION	9.778295814153888E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978029960823	WITHOUT_CLASSIFICATION	2.1970039176187936E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999992574027905	WITHOUT_CLASSIFICATION	7.425972095092527E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999967524603385	WITHOUT_CLASSIFICATION	3.2475396615975394E-6	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999871899034359	WITHOUT_CLASSIFICATION	1.2810096564077797E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999806011717215	WITHOUT_CLASSIFICATION	1.939882827858455E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999976912246543	WITHOUT_CLASSIFICATION	2.3087753456415974E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999976912246543	WITHOUT_CLASSIFICATION	2.3087753456415974E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999949456716293	WITHOUT_CLASSIFICATION	5.054328370808103E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999949456716293	WITHOUT_CLASSIFICATION	5.054328370808103E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999744305734	WITHOUT_CLASSIFICATION	2.5569426458760842E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999647547220613	WITHOUT_CLASSIFICATION	3.5245277938790674E-5	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999966310919677	WITHOUT_CLASSIFICATION	3.3689080323799396E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996303124842	WITHOUT_CLASSIFICATION	3.696875157496729E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999966310919677	WITHOUT_CLASSIFICATION	3.3689080323799396E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999996303124842	WITHOUT_CLASSIFICATION	3.696875157496729E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213615843	WITHOUT_CLASSIFICATION	1.2786384157659957E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999075341738	WITHOUT_CLASSIFICATION	9.246582617678399E-8	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999945963813127	WITHOUT_CLASSIFICATION	5.403618687392608E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999435708342	WITHOUT_CLASSIFICATION	5.642916588760252E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.999676622394101	WITHOUT_CLASSIFICATION	3.233776058989075E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999969861024519	WITHOUT_CLASSIFICATION	3.0138975481287893E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996481688052	WITHOUT_CLASSIFICATION	3.5183119478220315E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991807927274	WITHOUT_CLASSIFICATION	8.192072725338084E-7	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995958096213369	WITHOUT_CLASSIFICATION	4.0419037866314757E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999999596485	WITHOUT_CLASSIFICATION	4.0351502070584977E-10	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999991186291063	WITHOUT_CLASSIFICATION	8.813708936866736E-7	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999997248391006	WITHOUT_CLASSIFICATION	2.7516089937129087E-7	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999909774558	WITHOUT_CLASSIFICATION	9.02254421239687E-9	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999920712793353	WITHOUT_CLASSIFICATION	7.928720664666576E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999795245701605	WITHOUT_CLASSIFICATION	2.047542983947312E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999857454480603	WITHOUT_CLASSIFICATION	1.4254551939707549E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999857454480603	WITHOUT_CLASSIFICATION	1.4254551939707549E-5	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999951270201543	WITHOUT_CLASSIFICATION	4.87297984577518E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213615843	WITHOUT_CLASSIFICATION	1.2786384157659957E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999308325222839	WITHOUT_CLASSIFICATION	6.916747771610338E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999087571787699	WITHOUT_CLASSIFICATION	9.1242821230172E-5	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999421992623648	WITHOUT_CLASSIFICATION	5.7800737635045935E-5	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978599662134	WITHOUT_CLASSIFICATION	2.140033786549761E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998197874651863	WITHOUT_CLASSIFICATION	1.8021253481377884E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213615843	WITHOUT_CLASSIFICATION	1.2786384157659957E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999978599662134	WITHOUT_CLASSIFICATION	2.140033786549761E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998197874651863	WITHOUT_CLASSIFICATION	1.8021253481377884E-4	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999992254246095	WITHOUT_CLASSIFICATION	7.74575390434949E-7	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998398480667	WITHOUT_CLASSIFICATION	1.6015193331501366E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998627860663152	WITHOUT_CLASSIFICATION	1.3721393368487146E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213615843	WITHOUT_CLASSIFICATION	1.2786384157659957E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987213615843	WITHOUT_CLASSIFICATION	1.2786384157659957E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999992640705767	WITHOUT_CLASSIFICATION	7.359294233045772E-7	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999995055822384	WITHOUT_CLASSIFICATION	4.944177617075718E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.999998334336683	WITHOUT_CLASSIFICATION	1.6656633169298153E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999992801709884	WITHOUT_CLASSIFICATION	7.198290116706284E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999989200991387	WITHOUT_CLASSIFICATION	1.0799008612778311E-6	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999890857678	WITHOUT_CLASSIFICATION	1.0914232165013889E-8	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999286004457	WITHOUT_CLASSIFICATION	7.139955418621536E-8	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999893144264	WITHOUT_CLASSIFICATION	1.068557354156371E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999996340013303	WITHOUT_CLASSIFICATION	3.659986697465738E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999928579776084	WITHOUT_CLASSIFICATION	7.142022391706064E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999867079557084	WITHOUT_CLASSIFICATION	1.3292044291528608E-5	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999989755702253	WITHOUT_CLASSIFICATION	1.0244297746907445E-6	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998191336674	WITHOUT_CLASSIFICATION	1.8086633254663024E-7	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999997576243267	WITHOUT_CLASSIFICATION	2.423756733312469E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810508558744	WITHOUT_CLASSIFICATION	1.8949144125615018E-5	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999973210828489	WITHOUT_CLASSIFICATION	2.678917151067759E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988925589147	WITHOUT_CLASSIFICATION	1.1074410852651552E-6	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999530280364134	WITHOUT_CLASSIFICATION	4.697196358655664E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9994664807638443	WITHOUT_CLASSIFICATION	5.335192361557361E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999707933463	WITHOUT_CLASSIFICATION	2.9206653542457902E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999989958197136	WITHOUT_CLASSIFICATION	1.004180286449876E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999888490507428	WITHOUT_CLASSIFICATION	1.115094925733079E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999888490507428	WITHOUT_CLASSIFICATION	1.115094925733079E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999988925589147	WITHOUT_CLASSIFICATION	1.1074410852651552E-6	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999854407172267	WITHOUT_CLASSIFICATION	1.4559282773352125E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999992954872929	WITHOUT_CLASSIFICATION	7.045127070603046E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999766456572114	WITHOUT_CLASSIFICATION	2.3354342788485118E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999994386430833	WITHOUT_CLASSIFICATION	5.613569168063427E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914979752381	WITHOUT_CLASSIFICATION	8.502024761907036E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998773582969	WITHOUT_CLASSIFICATION	1.2264170316394114E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999820680661654	WITHOUT_CLASSIFICATION	1.793193383453872E-5	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999999625047126	WITHOUT_CLASSIFICATION	3.7495287411895666E-8	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999988082	WITHOUT_CLASSIFICATION	1.1918047015273103E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999718431416	WITHOUT_CLASSIFICATION	2.815685837764046E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999540825891613	WITHOUT_CLASSIFICATION	4.5917410838612995E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9984316769413009	WITHOUT_CLASSIFICATION	0.001568323058699043	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999764375176	WITHOUT_CLASSIFICATION	2.3562482400045442E-5	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999994188336	WITHOUT_CLASSIFICATION	5.811664363427513E-10	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996633319138	WITHOUT_CLASSIFICATION	3.366680862610273E-7	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999365864469477	WITHOUT_CLASSIFICATION	6.341355305238154E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999999421781936	WITHOUT_CLASSIFICATION	5.782180640219733E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999943202965806	WITHOUT_CLASSIFICATION	5.679703419423601E-6	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988224948331	WITHOUT_CLASSIFICATION	1.1775051668648645E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999992363433498	WITHOUT_CLASSIFICATION	7.636566503511699E-7	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999997900268688	WITHOUT_CLASSIFICATION	2.099731311709296E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999998819668092	WITHOUT_CLASSIFICATION	1.1803319077237611E-7	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999751268464595	WITHOUT_CLASSIFICATION	2.487315354049627E-5	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976024057015	WITHOUT_CLASSIFICATION	2.397594298472873E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992563574494	WITHOUT_CLASSIFICATION	7.436425505892675E-7	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985967058401	WITHOUT_CLASSIFICATION	1.4032941599177954E-6	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999384357689	WITHOUT_CLASSIFICATION	6.156423109843692E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993296252182	WITHOUT_CLASSIFICATION	6.703747818984499E-7	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994234650056	WITHOUT_CLASSIFICATION	5.765349944312917E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998745796297	WITHOUT_CLASSIFICATION	1.2542037030142854E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999644929173	WITHOUT_CLASSIFICATION	3.550708277704026E-8	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.999999913460631	WITHOUT_CLASSIFICATION	8.653936900321857E-8	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996682756466	WITHOUT_CLASSIFICATION	3.317243533647326E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999624186723	WITHOUT_CLASSIFICATION	3.7581327607612526E-8	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998773736757	WITHOUT_CLASSIFICATION	1.2262632427839722E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989272319855	WITHOUT_CLASSIFICATION	1.072768014547693E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986043134889	WITHOUT_CLASSIFICATION	1.3956865110706804E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777934489	WITHOUT_CLASSIFICATION	2.220655110443327E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999669730858	WITHOUT_CLASSIFICATION	3.302691420082023E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988508648288	WITHOUT_CLASSIFICATION	1.1491351711700865E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999972004334152	WITHOUT_CLASSIFICATION	2.799566584737201E-6	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964311724704	WITHOUT_CLASSIFICATION	3.5688275295685707E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9110344820310607	WITHOUT_CLASSIFICATION	0.08896551796893924	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999994072048441	WITHOUT_CLASSIFICATION	5.927951559072011E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999979108	WITHOUT_CLASSIFICATION	2.0892598332256276E-12	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405008804	WITHOUT_CLASSIFICATION	3.594991194960816E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.999999703925528	WITHOUT_CLASSIFICATION	2.96074471992985E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996409782133	WITHOUT_CLASSIFICATION	3.5902178679513483E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999995641352273	WITHOUT_CLASSIFICATION	4.3586477274264915E-7	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999997679623662	WITHOUT_CLASSIFICATION	2.3203763387788503E-7	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999973860822217	WITHOUT_CLASSIFICATION	2.6139177783957E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999998268141836	WITHOUT_CLASSIFICATION	1.7318581640019896E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999988851935075	WITHOUT_CLASSIFICATION	1.1148064924595223E-6	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999988746049832	WITHOUT_CLASSIFICATION	1.1253950168470876E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.99999979195166	WITHOUT_CLASSIFICATION	2.080483399478468E-7	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9991809145232806	WITHOUT_CLASSIFICATION	8.19085476719528E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999719805576655	WITHOUT_CLASSIFICATION	2.801944233462958E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999982510745906	WITHOUT_CLASSIFICATION	1.748925409479258E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999692257259273	WITHOUT_CLASSIFICATION	3.07742740726068E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999267259654	WITHOUT_CLASSIFICATION	7.327403458856103E-7	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943910119969	WITHOUT_CLASSIFICATION	5.608988003082409E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995531798926	WITHOUT_CLASSIFICATION	4.4682010747316424E-7	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973189303724	WITHOUT_CLASSIFICATION	2.6810696275981836E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999838374868931	WITHOUT_CLASSIFICATION	1.6162513106954026E-5	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999996686784836	WITHOUT_CLASSIFICATION	3.3132151646274725E-7	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999988808721003	WITHOUT_CLASSIFICATION	1.1191278997146028E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999964668911683	WITHOUT_CLASSIFICATION	3.533108831709203E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999266940994	WITHOUT_CLASSIFICATION	7.330590061645883E-8	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998535516752	WITHOUT_CLASSIFICATION	1.4644832473551222E-7	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999966925283872	WITHOUT_CLASSIFICATION	3.3074716128363926E-6	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999984544896989	WITHOUT_CLASSIFICATION	1.5455103010625666E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991811034	WITHOUT_CLASSIFICATION	8.188966435044717E-10	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999962746768011	WITHOUT_CLASSIFICATION	3.7253231989514728E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999995950582896	WITHOUT_CLASSIFICATION	4.049417104013563E-7	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999985551223706	WITHOUT_CLASSIFICATION	1.444877629405815E-6	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999954442153723	WITHOUT_CLASSIFICATION	4.5557846276751826E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405008804	WITHOUT_CLASSIFICATION	3.594991194960816E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998494223415819	WITHOUT_CLASSIFICATION	1.505776584180971E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999756472358	WITHOUT_CLASSIFICATION	2.4352764216177718E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999980944626404	WITHOUT_CLASSIFICATION	1.905537359544235E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999447859448463	WITHOUT_CLASSIFICATION	5.5214055153786584E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999909663473073	WITHOUT_CLASSIFICATION	9.033652692780389E-6	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999999100363675	WITHOUT_CLASSIFICATION	8.99636325462718E-8	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999311404347779	WITHOUT_CLASSIFICATION	6.885956522207399E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9996639865814648	WITHOUT_CLASSIFICATION	3.3601341853516374E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999996420672492	WITHOUT_CLASSIFICATION	3.579327508189037E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999890877249188	WITHOUT_CLASSIFICATION	1.0912275081094418E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999873790507059	WITHOUT_CLASSIFICATION	1.262094929418658E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999947719238305	WITHOUT_CLASSIFICATION	5.228076169551729E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999690995544	WITHOUT_CLASSIFICATION	3.0900445595187326E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999996569145101	WITHOUT_CLASSIFICATION	3.4308548990644196E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.99999845649558	WITHOUT_CLASSIFICATION	1.543504420012934E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999961361066453	WITHOUT_CLASSIFICATION	3.863893354726117E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999984861822095	WITHOUT_CLASSIFICATION	1.5138177904988969E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999800079660972	WITHOUT_CLASSIFICATION	1.9992033902733158E-5	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999763617685	WITHOUT_CLASSIFICATION	2.3638231489984724E-8	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999998639562334	WITHOUT_CLASSIFICATION	1.3604376651970797E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855323587	WITHOUT_CLASSIFICATION	1.446764135790516E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999994418088536	WITHOUT_CLASSIFICATION	5.581911464434481E-7	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999928697799427	WITHOUT_CLASSIFICATION	7.130220057314307E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999998216884741	WITHOUT_CLASSIFICATION	1.7831152590266181E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999954352104117	WITHOUT_CLASSIFICATION	4.564789588416897E-6	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.99999999008455	WITHOUT_CLASSIFICATION	9.915449915404585E-9	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934717883781972	WITHOUT_CLASSIFICATION	0.006528211621802898	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994501899571	WITHOUT_CLASSIFICATION	5.498100429705388E-7	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999376551613	WITHOUT_CLASSIFICATION	6.234483879890178E-8	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999969430648664	WITHOUT_CLASSIFICATION	3.0569351335898227E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405008804	WITHOUT_CLASSIFICATION	3.594991194960816E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9990726973566835	WITHOUT_CLASSIFICATION	9.27302643316662E-4	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999320528901	WITHOUT_CLASSIFICATION	6.79471099581205E-8	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999783419654605	WITHOUT_CLASSIFICATION	2.1658034539489372E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405008804	WITHOUT_CLASSIFICATION	3.594991194960816E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703841836	WITHOUT_CLASSIFICATION	6.296158164193003E-7	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999999855323587	WITHOUT_CLASSIFICATION	1.446764135790516E-8	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999549095198505	WITHOUT_CLASSIFICATION	4.5090480149512674E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999929808265874	WITHOUT_CLASSIFICATION	7.019173412610873E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999728322402	WITHOUT_CLASSIFICATION	2.7167759797013443E-8	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999890877249188	WITHOUT_CLASSIFICATION	1.0912275081094418E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999873790507059	WITHOUT_CLASSIFICATION	1.262094929418658E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999947719238305	WITHOUT_CLASSIFICATION	5.228076169551729E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999936305122	WITHOUT_CLASSIFICATION	6.369487849452658E-9	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999991667456968	WITHOUT_CLASSIFICATION	8.332543033186903E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999087297353	WITHOUT_CLASSIFICATION	9.127026471817516E-8	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999977601177761	WITHOUT_CLASSIFICATION	2.2398822238932152E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999997556510585	WITHOUT_CLASSIFICATION	2.4434894145230173E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999996405008804	WITHOUT_CLASSIFICATION	3.594991194960816E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999690995544	WITHOUT_CLASSIFICATION	3.0900445595187326E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999996569145101	WITHOUT_CLASSIFICATION	3.4308548990644196E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999886668646	WITHOUT_CLASSIFICATION	1.1333135401679739E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984846338665	WITHOUT_CLASSIFICATION	1.5153661334048644E-6	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999205777713	WITHOUT_CLASSIFICATION	7.942222867707562E-8	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999604757298	WITHOUT_CLASSIFICATION	3.952427032643126E-8	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999998006192269	WITHOUT_CLASSIFICATION	1.9938077310529512E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999994916264536	WITHOUT_CLASSIFICATION	5.083735462959328E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988508648288	WITHOUT_CLASSIFICATION	1.1491351711700865E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999914726965133	WITHOUT_CLASSIFICATION	8.527303486532688E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999999402874196	WITHOUT_CLASSIFICATION	5.971258039400944E-8	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999998510250847	WITHOUT_CLASSIFICATION	1.4897491525063946E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999862041625	WITHOUT_CLASSIFICATION	1.3795837378992876E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999784386961	WITHOUT_CLASSIFICATION	2.1561303869659673E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999384357689	WITHOUT_CLASSIFICATION	6.156423109843692E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993296252182	WITHOUT_CLASSIFICATION	6.703747818984499E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999624186723	WITHOUT_CLASSIFICATION	3.7581327607612526E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999784386961	WITHOUT_CLASSIFICATION	2.1561303869659673E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999846685669	WITHOUT_CLASSIFICATION	1.5331433163319555E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997002858894	WITHOUT_CLASSIFICATION	2.9971411057007785E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912025384115	WITHOUT_CLASSIFICATION	8.79746158863627E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958516936561	WITHOUT_CLASSIFICATION	4.14830634393062E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998773108254306	WITHOUT_CLASSIFICATION	1.226891745694101E-4	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999346959175491	WITHOUT_CLASSIFICATION	6.53040824508078E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998773736757	WITHOUT_CLASSIFICATION	1.2262632427839722E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999777934489	WITHOUT_CLASSIFICATION	2.220655110443327E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991811034	WITHOUT_CLASSIFICATION	8.188966435044717E-10	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999996311509983	WITHOUT_CLASSIFICATION	3.6884900161052356E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999982829249007	WITHOUT_CLASSIFICATION	1.7170750993276563E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999848908562	WITHOUT_CLASSIFICATION	1.5109143778275523E-8	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999999244742547	WITHOUT_CLASSIFICATION	7.552574531502526E-8	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999721989048	WITHOUT_CLASSIFICATION	2.780109526525282E-8	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999852035379	WITHOUT_CLASSIFICATION	1.4796462027505508E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999935937177535	WITHOUT_CLASSIFICATION	6.406282246429959E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999988082	WITHOUT_CLASSIFICATION	1.1918047015273103E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999927121961038	WITHOUT_CLASSIFICATION	7.2878038962466175E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999948210484	WITHOUT_CLASSIFICATION	5.178951610329635E-9	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999978807936893	WITHOUT_CLASSIFICATION	2.1192063107514904E-6	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999998440920733	WITHOUT_CLASSIFICATION	1.5590792667733177E-7	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999690526341	WITHOUT_CLASSIFICATION	3.094736599913692E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988104875984	WITHOUT_CLASSIFICATION	1.1895124015395678E-6	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995096472412	WITHOUT_CLASSIFICATION	4.90352758900115E-7	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987686039984	WITHOUT_CLASSIFICATION	1.2313960015886023E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999863910512	WITHOUT_CLASSIFICATION	1.3608948794384438E-7	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999976777908925	WITHOUT_CLASSIFICATION	2.322209107419765E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9995887589699693	WITHOUT_CLASSIFICATION	4.112410300307038E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985730203608	WITHOUT_CLASSIFICATION	1.4269796391486443E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996281748456	WITHOUT_CLASSIFICATION	3.718251543968963E-7	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993644799674	WITHOUT_CLASSIFICATION	6.355200325550918E-7	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994229632889	WITHOUT_CLASSIFICATION	5.770367111757371E-7	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999995351504845	WITHOUT_CLASSIFICATION	4.6484951555015555E-7	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999938776536	WITHOUT_CLASSIFICATION	6.1223464344800665E-9	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990320367345	WITHOUT_CLASSIFICATION	9.679632654870612E-7	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999638115543825	WITHOUT_CLASSIFICATION	3.6188445617477515E-5	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999871542915	WITHOUT_CLASSIFICATION	1.2845708442922506E-8	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992211513958	WITHOUT_CLASSIFICATION	7.788486042012043E-7	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999999137555482	WITHOUT_CLASSIFICATION	8.624445181663309E-8	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999993559950947	WITHOUT_CLASSIFICATION	6.440049053471929E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.99999904066232	WITHOUT_CLASSIFICATION	9.593376800522115E-7	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999967699563027	WITHOUT_CLASSIFICATION	3.2300436973917472E-6	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999937271923082	WITHOUT_CLASSIFICATION	6.272807691857014E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999970891870487	WITHOUT_CLASSIFICATION	2.910812951364311E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999995593211005	WITHOUT_CLASSIFICATION	4.40678899591422E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999998642477019	WITHOUT_CLASSIFICATION	1.3575229811040018E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999999233030983	WITHOUT_CLASSIFICATION	7.669690171820417E-8	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999957191985	WITHOUT_CLASSIFICATION	4.2808015003317573E-8	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998124942052697	WITHOUT_CLASSIFICATION	1.8750579473034403E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999995603479064	WITHOUT_CLASSIFICATION	4.3965209362630407E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999683386965	WITHOUT_CLASSIFICATION	3.166130341517305E-8	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999937259652	WITHOUT_CLASSIFICATION	6.274034799234941E-9	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999990151432886	WITHOUT_CLASSIFICATION	9.848567114153446E-7	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999936990308	WITHOUT_CLASSIFICATION	6.300969160532727E-9	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999762281717	WITHOUT_CLASSIFICATION	2.3771828230531704E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999220321464	WITHOUT_CLASSIFICATION	7.796785360490589E-7	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999979264846	WITHOUT_CLASSIFICATION	2.07351536902919E-9	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999966838942	WITHOUT_CLASSIFICATION	3.3161058921379378E-9	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999995763822218	WITHOUT_CLASSIFICATION	4.2361777816118176E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9993312717491789	WITHOUT_CLASSIFICATION	6.68728250821125E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999375129687	WITHOUT_CLASSIFICATION	6.248703125944064E-8	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999881695351321	WITHOUT_CLASSIFICATION	1.1830464867905389E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999786768263	WITHOUT_CLASSIFICATION	2.132317367328745E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999999062504833	WITHOUT_CLASSIFICATION	9.374951669332166E-8	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998176136717	WITHOUT_CLASSIFICATION	1.8238632826107387E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999968673445784	WITHOUT_CLASSIFICATION	3.1326554217277458E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999987755682683	WITHOUT_CLASSIFICATION	1.2244317316649743E-6	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999994695824962	WITHOUT_CLASSIFICATION	5.304175037967009E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994607327045	WITHOUT_CLASSIFICATION	5.392672954110915E-7	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999999581047585	WITHOUT_CLASSIFICATION	4.189524150674838E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999963507584053	WITHOUT_CLASSIFICATION	3.6492415946411858E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999804256215451	WITHOUT_CLASSIFICATION	1.957437845487077E-5	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999207541262555	WITHOUT_CLASSIFICATION	7.924587374458595E-5	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999999373876028	WITHOUT_CLASSIFICATION	6.261239718832191E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999935014522625	WITHOUT_CLASSIFICATION	6.4985477374327665E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999983998536697	WITHOUT_CLASSIFICATION	1.6001463302482716E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992999642203	WITHOUT_CLASSIFICATION	7.000357796318508E-7	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999623155930366	WITHOUT_CLASSIFICATION	3.768440696342091E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999993244023269	WITHOUT_CLASSIFICATION	6.755976731272131E-7	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.9997992509720335	WITHOUT_CLASSIFICATION	2.0074902796657712E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9986213717967468	WITHOUT_CLASSIFICATION	0.0013786282032532272	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999997473593154	WITHOUT_CLASSIFICATION	2.5264068460376952E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9947484577755932	WITHOUT_CLASSIFICATION	0.005251542224406757	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999992871349	WITHOUT_CLASSIFICATION	7.128650110621071E-10	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995647745681644	WITHOUT_CLASSIFICATION	4.352254318356452E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999880993992661	WITHOUT_CLASSIFICATION	1.1900600733769649E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999932630314132	WITHOUT_CLASSIFICATION	6.736968586813011E-6	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999968329455349	WITHOUT_CLASSIFICATION	3.1670544650823985E-6	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999999386079148	WITHOUT_CLASSIFICATION	6.139208517620187E-8	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999862994526284	WITHOUT_CLASSIFICATION	1.370054737167589E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999924576248997	WITHOUT_CLASSIFICATION	7.542375100363852E-6	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999955717705801	WITHOUT_CLASSIFICATION	4.4282294199707145E-6	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999974091906118	WITHOUT_CLASSIFICATION	2.5908093882776527E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999968801726457	WITHOUT_CLASSIFICATION	3.1198273543022837E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999919249127	WITHOUT_CLASSIFICATION	8.075087302520887E-9	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999996217539	WITHOUT_CLASSIFICATION	3.782461267524335E-10	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999995642443436	WITHOUT_CLASSIFICATION	4.357556565138053E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999967987246322	WITHOUT_CLASSIFICATION	3.201275367801405E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836346156	WITHOUT_CLASSIFICATION	1.1636538449430682E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999996895890201	WITHOUT_CLASSIFICATION	3.1041097984577795E-7	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999995477324956	WITHOUT_CLASSIFICATION	4.522675044867497E-7	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999835624594816	WITHOUT_CLASSIFICATION	1.6437540518422442E-5	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997845328735542	WITHOUT_CLASSIFICATION	2.1546712644574727E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999995910124523	WITHOUT_CLASSIFICATION	4.089875477683927E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999899782840033	WITHOUT_CLASSIFICATION	1.002171599675497E-5	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995783493639	WITHOUT_CLASSIFICATION	4.2165063601177524E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999719781312	WITHOUT_CLASSIFICATION	2.8021868817119173E-8	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994458137172747	WITHOUT_CLASSIFICATION	5.541862827253501E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999623482015207	WITHOUT_CLASSIFICATION	3.7651798479254676E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999997582904377	WITHOUT_CLASSIFICATION	2.4170956226723975E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9994458137172747	WITHOUT_CLASSIFICATION	5.541862827253501E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999897990736	WITHOUT_CLASSIFICATION	1.0200926363678163E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.9999992647315857	WITHOUT_CLASSIFICATION	7.352684143280603E-7	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999234053335	WITHOUT_CLASSIFICATION	7.6594666557734E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999799202887664	WITHOUT_CLASSIFICATION	2.0079711233731153E-5	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997302005172	WITHOUT_CLASSIFICATION	2.697994828050878E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999987609403	WITHOUT_CLASSIFICATION	1.2390597492009814E-9	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999961152239843	WITHOUT_CLASSIFICATION	3.884776015721769E-6	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999908854957	WITHOUT_CLASSIFICATION	9.114504235759375E-9	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999983756095465	WITHOUT_CLASSIFICATION	1.6243904533709168E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999996351213888	WITHOUT_CLASSIFICATION	3.6487861125401127E-7	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999983588830567	WITHOUT_CLASSIFICATION	1.6411169433305339E-6	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999991324402963	WITHOUT_CLASSIFICATION	8.675597037090341E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999999557329107	WITHOUT_CLASSIFICATION	4.4267089358198124E-8	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999999224501	WITHOUT_CLASSIFICATION	7.754990938786487E-10	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999995596869544	WITHOUT_CLASSIFICATION	4.4031304559904487E-7	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999990444136106	WITHOUT_CLASSIFICATION	9.555863892989614E-7	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999890954626557	WITHOUT_CLASSIFICATION	1.0904537344259868E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999890954626557	WITHOUT_CLASSIFICATION	1.0904537344259868E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989916173725	WITHOUT_CLASSIFICATION	1.0083826275350217E-6	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999492384072797	WITHOUT_CLASSIFICATION	5.076159272042314E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999299100075519	WITHOUT_CLASSIFICATION	7.008999244802411E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999934693166913	WITHOUT_CLASSIFICATION	6.530683308731537E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996368460119	WITHOUT_CLASSIFICATION	3.631539880859403E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8607899636331107	WITHOUT_CLASSIFICATION	0.1392100363668894	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9998837848931649	WITHOUT_CLASSIFICATION	1.1621510683510145E-4	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999821640111	WITHOUT_CLASSIFICATION	1.783598894342313E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.999999365975333	WITHOUT_CLASSIFICATION	6.340246670423446E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999206792684229	WITHOUT_CLASSIFICATION	7.932073157708588E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999873490710903	WITHOUT_CLASSIFICATION	1.2650928909750176E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999997466053	WITHOUT_CLASSIFICATION	2.5339475581717605E-10	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.999999969553652	WITHOUT_CLASSIFICATION	3.044634797567381E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999992244524971	WITHOUT_CLASSIFICATION	7.755475028127103E-7	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999775553624	WITHOUT_CLASSIFICATION	2.244463760890449E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999988104875984	WITHOUT_CLASSIFICATION	1.1895124015395678E-6	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999995442083761	WITHOUT_CLASSIFICATION	4.5579162387510054E-7	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999997145043439	WITHOUT_CLASSIFICATION	2.8549565607563954E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9995543311750246	WITHOUT_CLASSIFICATION	4.4566882497542774E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999990651831668	WITHOUT_CLASSIFICATION	9.348168330669402E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999967747402366	WITHOUT_CLASSIFICATION	3.225259763375334E-6	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999953344620763	WITHOUT_CLASSIFICATION	4.665537923630189E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999963323978	WITHOUT_CLASSIFICATION	3.6676023537307437E-9	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999999966570821	WITHOUT_CLASSIFICATION	3.3429178932217726E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999831770613	WITHOUT_CLASSIFICATION	1.6822938675332117E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999532622852	WITHOUT_CLASSIFICATION	4.6737714789837543E-8	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999998698266	WITHOUT_CLASSIFICATION	1.3017354692500136E-10	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999961591529244	WITHOUT_CLASSIFICATION	3.840847075581902E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999989110163091	WITHOUT_CLASSIFICATION	1.0889836908574197E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999949305266942	WITHOUT_CLASSIFICATION	5.069473305805174E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999998874149482	WITHOUT_CLASSIFICATION	1.1258505180474126E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999991184885415	WITHOUT_CLASSIFICATION	8.815114585656821E-7	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.999962599303653	WITHOUT_CLASSIFICATION	3.740069634703719E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999972967928188	WITHOUT_CLASSIFICATION	2.703207181185847E-6	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999941993859487	WITHOUT_CLASSIFICATION	5.800614051306023E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999961668656793	WITHOUT_CLASSIFICATION	3.833134320679776E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999989510658919	WITHOUT_CLASSIFICATION	1.048934108106404E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999976010427589	WITHOUT_CLASSIFICATION	2.3989572411045856E-5	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999999836489802	WITHOUT_CLASSIFICATION	1.6351019814130044E-7	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998278795424109	WITHOUT_CLASSIFICATION	1.721204575889892E-4	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999954034583834	WITHOUT_CLASSIFICATION	4.596541616588169E-6	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999999231360414	WITHOUT_CLASSIFICATION	7.686395862331883E-8	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9953673057197111	WITHOUT_CLASSIFICATION	0.004632694280288813	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998340834786	WITHOUT_CLASSIFICATION	1.659165213927272E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999947510158018	WITHOUT_CLASSIFICATION	5.248984198193424E-6	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998381686607	WITHOUT_CLASSIFICATION	1.6183133931912938E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975208514753	WITHOUT_CLASSIFICATION	2.479148524646784E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994170316663	WITHOUT_CLASSIFICATION	5.829683337012753E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976387944247	WITHOUT_CLASSIFICATION	2.361205575163297E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9998952629229017	WITHOUT_CLASSIFICATION	1.0473707709829728E-4	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999961608892565	WITHOUT_CLASSIFICATION	3.8391107435361404E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001873341	WITHOUT_CLASSIFICATION	1.9981266590154372E-7	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999998875794927	WITHOUT_CLASSIFICATION	1.1242050726185017E-7	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9989562924914523	WITHOUT_CLASSIFICATION	0.0010437075085476654	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998832452181358	WITHOUT_CLASSIFICATION	1.1675478186421413E-4	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9989562924914523	WITHOUT_CLASSIFICATION	0.0010437075085476654	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999971726675904	WITHOUT_CLASSIFICATION	2.8273324096432438E-6	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999992997983789	WITHOUT_CLASSIFICATION	7.00201621204918E-7	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999999039861119	WITHOUT_CLASSIFICATION	9.601388803855422E-8	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999993057753868	WITHOUT_CLASSIFICATION	6.942246131426458E-7	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999986139913997	WITHOUT_CLASSIFICATION	1.3860086003991768E-6	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999976473891912	WITHOUT_CLASSIFICATION	2.3526108088258656E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998666372178	WITHOUT_CLASSIFICATION	1.3336278218187577E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999828692194261	WITHOUT_CLASSIFICATION	1.7130780573880177E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999503960814	WITHOUT_CLASSIFICATION	4.960391858214449E-8	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999997112087275	WITHOUT_CLASSIFICATION	2.8879127238157224E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999994581095482	WITHOUT_CLASSIFICATION	5.418904518494588E-7	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999999607037631	WITHOUT_CLASSIFICATION	3.929623700536892E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999989722376932	WITHOUT_CLASSIFICATION	1.0277623068306888E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9992852453597689	WITHOUT_CLASSIFICATION	7.147546402311118E-4	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999833139837	WITHOUT_CLASSIFICATION	1.6686016380616323E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999523501993	WITHOUT_CLASSIFICATION	4.7649800591965164E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963906644709	WITHOUT_CLASSIFICATION	3.609335529188973E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963906644709	WITHOUT_CLASSIFICATION	3.609335529188973E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999961379292859	WITHOUT_CLASSIFICATION	3.862070714107295E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999300891869	WITHOUT_CLASSIFICATION	6.991081304629995E-8	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999986583833398	WITHOUT_CLASSIFICATION	1.341616660270412E-6	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.99999999206582	WITHOUT_CLASSIFICATION	7.934180078115562E-9	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999998505031124	WITHOUT_CLASSIFICATION	1.494968877034376E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999997138046179	WITHOUT_CLASSIFICATION	2.8619538209775923E-7	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999641641361913	WITHOUT_CLASSIFICATION	3.5835863808708385E-5	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999991178037728	WITHOUT_CLASSIFICATION	8.82196227069439E-7	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999161260572	WITHOUT_CLASSIFICATION	8.387394276543546E-8	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999997673919389	WITHOUT_CLASSIFICATION	2.3260806104327835E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997054545795	WITHOUT_CLASSIFICATION	2.945454205173748E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999999996743948	WITHOUT_CLASSIFICATION	3.256051280587047E-10	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999781886117	WITHOUT_CLASSIFICATION	2.1811388140991318E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999996382714097	WITHOUT_CLASSIFICATION	3.6172859022300595E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999997789537451	WITHOUT_CLASSIFICATION	2.2104625496767627E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999357290685	WITHOUT_CLASSIFICATION	6.427093151038204E-8	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999999102121312	WITHOUT_CLASSIFICATION	8.978786883165667E-8	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.999999825134766	WITHOUT_CLASSIFICATION	1.7486523393310465E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999979449929842	WITHOUT_CLASSIFICATION	2.0550070156925125E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999972049508	WITHOUT_CLASSIFICATION	2.7950490793508574E-9	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999989022571197	WITHOUT_CLASSIFICATION	1.09774288026691E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999813307955	WITHOUT_CLASSIFICATION	1.8669204600293463E-8	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999929206544	WITHOUT_CLASSIFICATION	7.079345598286007E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999988631685	WITHOUT_CLASSIFICATION	1.1368315123041461E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999991647633376	WITHOUT_CLASSIFICATION	8.352366624860748E-7	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999987401541043	WITHOUT_CLASSIFICATION	1.259845895703111E-6	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999920157122523	WITHOUT_CLASSIFICATION	7.984287747742966E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998780472383404	WITHOUT_CLASSIFICATION	1.2195276165957872E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999977676254075	WITHOUT_CLASSIFICATION	2.2323745926234113E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999964378321072	WITHOUT_CLASSIFICATION	3.5621678928065463E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999996374430176	WITHOUT_CLASSIFICATION	3.625569825196333E-7	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999996577116389	WITHOUT_CLASSIFICATION	3.422883610368391E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9995714244376978	WITHOUT_CLASSIFICATION	4.285755623022943E-4	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999998120500777	WITHOUT_CLASSIFICATION	1.8794992220886633E-7	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999845470738262	WITHOUT_CLASSIFICATION	1.5452926173767542E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999999984893343	WITHOUT_CLASSIFICATION	1.510665704574496E-8	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999995772687177	WITHOUT_CLASSIFICATION	4.227312822635282E-7	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999988091139719	WITHOUT_CLASSIFICATION	1.1908860281402412E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999873252179545	WITHOUT_CLASSIFICATION	1.2674782045427405E-5	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999970601957815	WITHOUT_CLASSIFICATION	2.93980421862606E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999855148466519	WITHOUT_CLASSIFICATION	1.448515334806533E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984147307392	WITHOUT_CLASSIFICATION	1.5852692607525926E-6	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999987375771631	WITHOUT_CLASSIFICATION	1.2624228369700071E-6	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998658842255792	WITHOUT_CLASSIFICATION	1.3411577442071514E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999998436168867	WITHOUT_CLASSIFICATION	1.563831133760661E-7	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999657686197346	WITHOUT_CLASSIFICATION	3.423138026529664E-5	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9753386012292601	WITHOUT_CLASSIFICATION	0.0246613987707399	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999972952731	WITHOUT_CLASSIFICATION	2.7047268850960544E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998307092863	WITHOUT_CLASSIFICATION	1.6929071378412224E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999989570434303	WITHOUT_CLASSIFICATION	1.0429565696818737E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988560532302	WITHOUT_CLASSIFICATION	1.1439467698074946E-6	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999941902697	WITHOUT_CLASSIFICATION	5.809730308246628E-9	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9990397794315429	WITHOUT_CLASSIFICATION	9.60220568457231E-4	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999999916255412	WITHOUT_CLASSIFICATION	8.37445880873741E-8	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999986118394448	WITHOUT_CLASSIFICATION	1.3881605551196558E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703841836	WITHOUT_CLASSIFICATION	6.296158164193003E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993703841836	WITHOUT_CLASSIFICATION	6.296158164193003E-7	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991689336332	WITHOUT_CLASSIFICATION	8.31066366824941E-7	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999923319419088	WITHOUT_CLASSIFICATION	7.668058091207195E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999978179682218	WITHOUT_CLASSIFICATION	2.1820317781454223E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999837079007956	WITHOUT_CLASSIFICATION	1.6292099204368952E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999995133081245	WITHOUT_CLASSIFICATION	4.866918754602809E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999987448841849	WITHOUT_CLASSIFICATION	1.2551158150986587E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999997075756676	WITHOUT_CLASSIFICATION	2.9242433246010386E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999998558045802	WITHOUT_CLASSIFICATION	1.4419541985298803E-7	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999985381796797	WITHOUT_CLASSIFICATION	1.4618203204281442E-6	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999826489451	WITHOUT_CLASSIFICATION	1.7351054988944263E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999989351608624	WITHOUT_CLASSIFICATION	1.0648391375957791E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999721306285952	WITHOUT_CLASSIFICATION	2.7869371404739012E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999989688332224	WITHOUT_CLASSIFICATION	1.0311667776456795E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999834064116	WITHOUT_CLASSIFICATION	1.6593588404227483E-8	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.999999685455292	WITHOUT_CLASSIFICATION	3.1454470798476864E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998851249058939	WITHOUT_CLASSIFICATION	1.1487509410604846E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995487763939	WITHOUT_CLASSIFICATION	4.512236061592647E-7	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999985341136909	WITHOUT_CLASSIFICATION	1.4658863091043369E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999145622606624	WITHOUT_CLASSIFICATION	8.54377393375531E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999781084847361	WITHOUT_CLASSIFICATION	2.1891515263867995E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999974586145	WITHOUT_CLASSIFICATION	2.5413856016163666E-9	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999942832198813	WITHOUT_CLASSIFICATION	5.716780118747268E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677054480484	WITHOUT_CLASSIFICATION	3.229455195162183E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9996514462715969	WITHOUT_CLASSIFICATION	3.485537284031359E-4	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9983848231108597	WITHOUT_CLASSIFICATION	0.001615176889140328	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9783886322085734	WITHOUT_CLASSIFICATION	0.02161136779142668	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999987694884882	WITHOUT_CLASSIFICATION	1.230511511719729E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994057206812746	WITHOUT_CLASSIFICATION	5.942793187252727E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999993493404709	WITHOUT_CLASSIFICATION	6.506595292080257E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677054480484	WITHOUT_CLASSIFICATION	3.229455195162183E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999906217623297	WITHOUT_CLASSIFICATION	9.378237670378015E-6	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999703665092916	WITHOUT_CLASSIFICATION	2.9633490708294307E-5	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999872180841678	WITHOUT_CLASSIFICATION	1.2781915832300613E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999979357951831	WITHOUT_CLASSIFICATION	2.0642048168915197E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999959410535	WITHOUT_CLASSIFICATION	4.058946573934882E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999999115439379	WITHOUT_CLASSIFICATION	8.845606221720191E-8	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999989586991719	WITHOUT_CLASSIFICATION	1.0413008280099648E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998281097413	WITHOUT_CLASSIFICATION	1.718902588264935E-7	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999997863346141	WITHOUT_CLASSIFICATION	2.1366538592359723E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999979357951831	WITHOUT_CLASSIFICATION	2.0642048168915197E-6	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999826480899	WITHOUT_CLASSIFICATION	1.735191019259952E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999998049790902	WITHOUT_CLASSIFICATION	1.9502090978655177E-7	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999199773207801	WITHOUT_CLASSIFICATION	8.002267921992599E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999894335229524	WITHOUT_CLASSIFICATION	1.056647704754643E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999590298182	WITHOUT_CLASSIFICATION	4.0970181864867395E-8	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999997054545795	WITHOUT_CLASSIFICATION	2.945454205173748E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999980443	WITHOUT_CLASSIFICATION	1.9557000021247856E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999998067588018	WITHOUT_CLASSIFICATION	1.9324119807876645E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999999151172587	WITHOUT_CLASSIFICATION	8.488274127883368E-8	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999802936988404	WITHOUT_CLASSIFICATION	1.9706301159606076E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999998943949941	WITHOUT_CLASSIFICATION	1.0560500578741565E-7	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999982684657492	WITHOUT_CLASSIFICATION	1.7315342507551403E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999954473424	WITHOUT_CLASSIFICATION	4.552657577392714E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999998066760128	WITHOUT_CLASSIFICATION	1.9332398726597647E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998407975527	WITHOUT_CLASSIFICATION	1.5920244734039219E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999990147488222	WITHOUT_CLASSIFICATION	9.852511778327426E-7	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999966009501119	WITHOUT_CLASSIFICATION	3.399049888094847E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999968993886	WITHOUT_CLASSIFICATION	3.100611473690122E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.999999913931038	WITHOUT_CLASSIFICATION	8.606896198506158E-8	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.999969763504308	WITHOUT_CLASSIFICATION	3.0236495692082575E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999989609565	WITHOUT_CLASSIFICATION	1.0390435885382081E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999995644997682	WITHOUT_CLASSIFICATION	4.3550023174975946E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999997242616926	WITHOUT_CLASSIFICATION	2.757383074633399E-7	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999988570776672	WITHOUT_CLASSIFICATION	1.1429223327814546E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999994121627312	WITHOUT_CLASSIFICATION	5.878372688255475E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999988803207501	WITHOUT_CLASSIFICATION	1.1196792498958563E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999923537806257	WITHOUT_CLASSIFICATION	7.64621937438711E-6	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999820950937	WITHOUT_CLASSIFICATION	1.7904906327025425E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999985123783935	WITHOUT_CLASSIFICATION	1.487621606396442E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999997194425919	WITHOUT_CLASSIFICATION	2.8055740806294724E-7	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999835046288227	WITHOUT_CLASSIFICATION	1.649537117735173E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999992086132559	WITHOUT_CLASSIFICATION	7.913867441833856E-7	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999345323340841	WITHOUT_CLASSIFICATION	6.54676659158547E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998914213095	WITHOUT_CLASSIFICATION	1.0857869057568083E-7	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977116296611	WITHOUT_CLASSIFICATION	2.2883703388359205E-6	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9996535144949414	WITHOUT_CLASSIFICATION	3.464855050585351E-4	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999980019200625	WITHOUT_CLASSIFICATION	1.998079937468199E-6	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999986431972535	WITHOUT_CLASSIFICATION	1.3568027464470338E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999983308294	WITHOUT_CLASSIFICATION	1.6691705550617745E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999920770784789	WITHOUT_CLASSIFICATION	7.92292152107314E-6	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999997395858808	WITHOUT_CLASSIFICATION	2.6041411923635353E-7	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999995626522352	WITHOUT_CLASSIFICATION	4.373477648011139E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999989244665658	WITHOUT_CLASSIFICATION	1.0755334343031328E-6	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9981233732346542	WITHOUT_CLASSIFICATION	0.0018766267653458166	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999987873581175	WITHOUT_CLASSIFICATION	1.2126418823788596E-6	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999873171243778	WITHOUT_CLASSIFICATION	1.268287562214056E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998772187664	WITHOUT_CLASSIFICATION	1.227812335666655E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999184981836	WITHOUT_CLASSIFICATION	8.150181647464498E-8	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.994625367458529	WITHOUT_CLASSIFICATION	0.005374632541470977	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999999994521822	WITHOUT_CLASSIFICATION	5.478178070417241E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999971580716818	WITHOUT_CLASSIFICATION	2.841928318200838E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999952328591895	WITHOUT_CLASSIFICATION	4.767140810545178E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999990643774496	WITHOUT_CLASSIFICATION	9.356225504757143E-7	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995286274243688	WITHOUT_CLASSIFICATION	4.713725756312394E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999999924725428	WITHOUT_CLASSIFICATION	7.527457298353752E-9	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999993557566482	WITHOUT_CLASSIFICATION	6.442433517327095E-7	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999946326560002	WITHOUT_CLASSIFICATION	5.367343999737632E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999968024038804	WITHOUT_CLASSIFICATION	3.1975961195639546E-6	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999986828788	WITHOUT_CLASSIFICATION	1.3171211351038789E-9	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999993688676154	WITHOUT_CLASSIFICATION	6.311323846879438E-7	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999895281622	WITHOUT_CLASSIFICATION	1.0471837814554872E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999997980020163	WITHOUT_CLASSIFICATION	2.0199798357718146E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998914213095	WITHOUT_CLASSIFICATION	1.0857869057568083E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999902071345445	WITHOUT_CLASSIFICATION	9.792865455517502E-6	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998823002406	WITHOUT_CLASSIFICATION	1.1769975930071438E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.999999652481057	WITHOUT_CLASSIFICATION	3.4751894290829165E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969697738865	WITHOUT_CLASSIFICATION	3.0302261134081737E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999863808896	WITHOUT_CLASSIFICATION	1.3619110312638858E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999777819604271	WITHOUT_CLASSIFICATION	2.221803957294333E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994932073626	WITHOUT_CLASSIFICATION	5.067926374864909E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999542895113	WITHOUT_CLASSIFICATION	4.571048869002643E-8	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999947837768	WITHOUT_CLASSIFICATION	5.2162232224067695E-9	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999935362018549	WITHOUT_CLASSIFICATION	6.463798145051148E-6	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999985719675648	WITHOUT_CLASSIFICATION	1.4280324351009644E-6	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999991958999284	WITHOUT_CLASSIFICATION	8.041000716124525E-6	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999998847618	WITHOUT_CLASSIFICATION	1.1523817964069772E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999595392716	WITHOUT_CLASSIFICATION	4.0460728379111645E-8	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999971726675904	WITHOUT_CLASSIFICATION	2.8273324096432438E-6	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999999156705758	WITHOUT_CLASSIFICATION	8.432942417436392E-8	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999998354909875	WITHOUT_CLASSIFICATION	1.645090124619617E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999805156537847	WITHOUT_CLASSIFICATION	1.9484346215274706E-5	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.999999891861787	WITHOUT_CLASSIFICATION	1.0813821308908381E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999995789430625	WITHOUT_CLASSIFICATION	4.2105693760863626E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499261262	WITHOUT_CLASSIFICATION	1.6500738737969086E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499261262	WITHOUT_CLASSIFICATION	1.6500738737969086E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999986973501322	WITHOUT_CLASSIFICATION	1.3026498677590455E-6	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999494426699	WITHOUT_CLASSIFICATION	5.05573301308183E-8	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999949721197388	WITHOUT_CLASSIFICATION	5.027880261177312E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999635208982851	WITHOUT_CLASSIFICATION	3.64791017147769E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999934198885124	WITHOUT_CLASSIFICATION	6.580111487508339E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.999990820493293	WITHOUT_CLASSIFICATION	9.179506706974922E-6	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999994224128852	WITHOUT_CLASSIFICATION	5.775871148048096E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999943893202181	WITHOUT_CLASSIFICATION	5.610679781787893E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999943893202181	WITHOUT_CLASSIFICATION	5.610679781787893E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999925371708145	WITHOUT_CLASSIFICATION	7.462829185533396E-6	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997071213209	WITHOUT_CLASSIFICATION	2.928786791755585E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.999982540552479	WITHOUT_CLASSIFICATION	1.7459447520912214E-5	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927009393716	WITHOUT_CLASSIFICATION	7.299060628305253E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927009393716	WITHOUT_CLASSIFICATION	7.299060628305253E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999927009393716	WITHOUT_CLASSIFICATION	7.299060628305253E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999148907140928	WITHOUT_CLASSIFICATION	8.510928590728082E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999477644219	WITHOUT_CLASSIFICATION	5.223557810276281E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999563055155	WITHOUT_CLASSIFICATION	4.36944845806037E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9459952798562175	WITHOUT_CLASSIFICATION	0.054004720143782645	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999865473688833	WITHOUT_CLASSIFICATION	1.3452631116850322E-5	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999991139618094	WITHOUT_CLASSIFICATION	8.860381905270101E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999998974265	WITHOUT_CLASSIFICATION	1.0257360866921561E-10	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.999921447612179	WITHOUT_CLASSIFICATION	7.85523878209971E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999959652305	WITHOUT_CLASSIFICATION	4.034769565599887E-9	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9996873440642289	WITHOUT_CLASSIFICATION	3.126559357711275E-4	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999991980479654	WITHOUT_CLASSIFICATION	8.019520345965344E-7	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9993897707563086	WITHOUT_CLASSIFICATION	6.102292436913105E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999940202523563	WITHOUT_CLASSIFICATION	5.979747643722186E-6	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999975188432526	WITHOUT_CLASSIFICATION	2.4811567473395518E-6	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999995078081086	WITHOUT_CLASSIFICATION	4.92191891263655E-7	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999874155615411	WITHOUT_CLASSIFICATION	1.2584438458809062E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999997967307287	WITHOUT_CLASSIFICATION	2.0326927121329663E-7	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999997967307287	WITHOUT_CLASSIFICATION	2.0326927121329663E-7	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999998610652886	WITHOUT_CLASSIFICATION	1.389347113827718E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999998610652886	WITHOUT_CLASSIFICATION	1.389347113827718E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999998912333611	WITHOUT_CLASSIFICATION	1.0876663893170173E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997373304966	WITHOUT_CLASSIFICATION	2.6266950336947694E-7	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999997373304966	WITHOUT_CLASSIFICATION	2.6266950336947694E-7	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999302867812	WITHOUT_CLASSIFICATION	6.971321883029614E-8	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998094590165	WITHOUT_CLASSIFICATION	1.9054098362310558E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997886539981	WITHOUT_CLASSIFICATION	2.1134600198491273E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999983499261262	WITHOUT_CLASSIFICATION	1.6500738737969086E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999997683417456	WITHOUT_CLASSIFICATION	2.316582544050984E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999998094590165	WITHOUT_CLASSIFICATION	1.9054098362310558E-7	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999978864945325	WITHOUT_CLASSIFICATION	2.1135054675066483E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999929998363181	WITHOUT_CLASSIFICATION	7.000163681926075E-6	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999546026654	WITHOUT_CLASSIFICATION	4.539733457358194E-8	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999999771614487	WITHOUT_CLASSIFICATION	2.2838551252419742E-8	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999967841009	WITHOUT_CLASSIFICATION	3.21589911755596E-9	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999999945914929	WITHOUT_CLASSIFICATION	5.408507084692464E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999996109256009	WITHOUT_CLASSIFICATION	3.890743991356526E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9992382569507868	WITHOUT_CLASSIFICATION	7.617430492132687E-4	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9973957246829794	WITHOUT_CLASSIFICATION	0.0026042753170204902	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999840575813647	WITHOUT_CLASSIFICATION	1.5942418635347238E-5	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999996430636086	WITHOUT_CLASSIFICATION	3.5693639140711935E-7	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999222281446422	WITHOUT_CLASSIFICATION	7.777185535786606E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078491958	WITHOUT_CLASSIFICATION	7.92150804223452E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999533085848	WITHOUT_CLASSIFICATION	4.669141518763227E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9809238250991594	WITHOUT_CLASSIFICATION	0.019076174900840466	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999985381126892	WITHOUT_CLASSIFICATION	1.4618873107582652E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999752113794	WITHOUT_CLASSIFICATION	2.4788620596789086E-8	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998253614867	WITHOUT_CLASSIFICATION	1.746385133760602E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998253614867	WITHOUT_CLASSIFICATION	1.746385133760602E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999998809445393	WITHOUT_CLASSIFICATION	1.1905546072430136E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998560594338	WITHOUT_CLASSIFICATION	1.439405661611923E-7	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999999774497685	WITHOUT_CLASSIFICATION	2.255023152861787E-8	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999995943909772	WITHOUT_CLASSIFICATION	4.0560902273605537E-7	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998341323356	WITHOUT_CLASSIFICATION	1.658676643296539E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999879024537441	WITHOUT_CLASSIFICATION	1.2097546255956094E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999964993372	WITHOUT_CLASSIFICATION	3.500662610370104E-9	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999995694327474	WITHOUT_CLASSIFICATION	4.305672526018843E-7	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999938323854534	WITHOUT_CLASSIFICATION	6.167614546550733E-6	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999798794824	WITHOUT_CLASSIFICATION	2.01205175389437E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999999931845591	WITHOUT_CLASSIFICATION	6.815440896200383E-8	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999991958999284	WITHOUT_CLASSIFICATION	8.041000716124525E-6	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999831252355	WITHOUT_CLASSIFICATION	1.6874764369120423E-8	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999180370828908	WITHOUT_CLASSIFICATION	8.196291710918166E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999970588042634	WITHOUT_CLASSIFICATION	2.9411957366110315E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999976678594784	WITHOUT_CLASSIFICATION	2.3321405216369734E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999997800479	WITHOUT_CLASSIFICATION	2.1995209962820657E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999997800479	WITHOUT_CLASSIFICATION	2.1995209962820657E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999993093056238	WITHOUT_CLASSIFICATION	6.906943762911958E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9997752459057337	WITHOUT_CLASSIFICATION	2.2475409426636004E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9991350817287376	WITHOUT_CLASSIFICATION	8.649182712623697E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9985840664389087	WITHOUT_CLASSIFICATION	0.0014159335610912504	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9997742404638252	WITHOUT_CLASSIFICATION	2.2575953617467282E-4	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999885180818858	WITHOUT_CLASSIFICATION	1.148191811421854E-5	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999999366357812	WITHOUT_CLASSIFICATION	6.336421874510506E-8	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930932774175	WITHOUT_CLASSIFICATION	6.906722582452647E-6	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999251223415	WITHOUT_CLASSIFICATION	7.4877658499938795E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999990728765465	WITHOUT_CLASSIFICATION	9.271234535026637E-7	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999993850171224	WITHOUT_CLASSIFICATION	6.149828775935687E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999930932774175	WITHOUT_CLASSIFICATION	6.906722582452647E-6	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999803369502682	WITHOUT_CLASSIFICATION	1.9663049731728556E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999998795006096	WITHOUT_CLASSIFICATION	1.204993903395016E-7	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999999080679247	WITHOUT_CLASSIFICATION	9.193207528794971E-7	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.999995988819431	WITHOUT_CLASSIFICATION	4.0111805690001245E-6	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997707134053	WITHOUT_CLASSIFICATION	2.2928659456444049E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999795313994	WITHOUT_CLASSIFICATION	2.0468600546169023E-8	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999992160301	WITHOUT_CLASSIFICATION	7.839698465987006E-10	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999993604057993	WITHOUT_CLASSIFICATION	6.39594200814338E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999998982186722	WITHOUT_CLASSIFICATION	1.0178132788120902E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998862421561102	WITHOUT_CLASSIFICATION	1.1375784388979332E-4	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999603591480569	WITHOUT_CLASSIFICATION	3.9640851943099834E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999952570284282	WITHOUT_CLASSIFICATION	4.7429715718305264E-6	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999807708453	WITHOUT_CLASSIFICATION	1.922915460889508E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999997738230788	WITHOUT_CLASSIFICATION	2.261769212460845E-7	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999935286018306	WITHOUT_CLASSIFICATION	6.471398169543027E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999948551664	WITHOUT_CLASSIFICATION	5.144833560166207E-9	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999980802123	WITHOUT_CLASSIFICATION	1.9197876604373647E-9	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999860168045	WITHOUT_CLASSIFICATION	1.3983195499948305E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999702741986153	WITHOUT_CLASSIFICATION	2.9725801384747974E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999994697173	WITHOUT_CLASSIFICATION	5.302826883973873E-10	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999987984971144	WITHOUT_CLASSIFICATION	1.2015028856302626E-6	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999996823588316	WITHOUT_CLASSIFICATION	3.176411684488546E-7	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9986963284974758	WITHOUT_CLASSIFICATION	0.0013036715025241965	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999954413911136	WITHOUT_CLASSIFICATION	4.558608886417677E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999977992853	WITHOUT_CLASSIFICATION	2.2007146694163656E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999972731178641	WITHOUT_CLASSIFICATION	2.7268821358873735E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999997018230824	WITHOUT_CLASSIFICATION	2.981769175722687E-7	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999406909116	WITHOUT_CLASSIFICATION	5.930908830376451E-8	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999764011112	WITHOUT_CLASSIFICATION	2.359888885929113E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999999388797677	WITHOUT_CLASSIFICATION	6.112023230424518E-8	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999948116034	WITHOUT_CLASSIFICATION	5.188396715793161E-9	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999632097738583	WITHOUT_CLASSIFICATION	3.679022614168643E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9998102004809118	WITHOUT_CLASSIFICATION	1.8979951908822834E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999961643827	WITHOUT_CLASSIFICATION	3.835617202049815E-9	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999829240888	WITHOUT_CLASSIFICATION	1.707591117117773E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996654667106	WITHOUT_CLASSIFICATION	3.345332894282745E-7	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999999886506705	WITHOUT_CLASSIFICATION	1.1349329489731579E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999994024662049	WITHOUT_CLASSIFICATION	5.975337950825715E-7	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999948463899	WITHOUT_CLASSIFICATION	5.153610205829195E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999872202039644	WITHOUT_CLASSIFICATION	1.2779796035592663E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999701289287	WITHOUT_CLASSIFICATION	2.987107130722897E-8	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999981436380101	WITHOUT_CLASSIFICATION	1.8563619899108605E-6	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999843261704	WITHOUT_CLASSIFICATION	1.5673829551167956E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999999989350688	WITHOUT_CLASSIFICATION	1.0649311966853986E-8	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999993323186425	WITHOUT_CLASSIFICATION	6.676813575085346E-7	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999994412435662	WITHOUT_CLASSIFICATION	5.587564338668662E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999911963453577	WITHOUT_CLASSIFICATION	8.803654642342192E-6	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999597680685	WITHOUT_CLASSIFICATION	4.023193138747718E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996255965451	WITHOUT_CLASSIFICATION	3.7440345488391525E-7	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999946965703219	WITHOUT_CLASSIFICATION	5.303429677977074E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999476635921	WITHOUT_CLASSIFICATION	5.233640788934948E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999999766196231	WITHOUT_CLASSIFICATION	2.3380376831118395E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999974414792	WITHOUT_CLASSIFICATION	2.5585208016452104E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997923744158363	WITHOUT_CLASSIFICATION	2.076255841636621E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999975900937	WITHOUT_CLASSIFICATION	2.4099063556422E-9	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.999999142450506	WITHOUT_CLASSIFICATION	8.575494940614812E-7	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999840989046367	WITHOUT_CLASSIFICATION	1.5901095363331258E-5	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999820854187154	WITHOUT_CLASSIFICATION	1.7914581284671244E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.999999694133688	WITHOUT_CLASSIFICATION	3.0586631201666817E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999975324966788	WITHOUT_CLASSIFICATION	2.4675033212529496E-6	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999989847293571	WITHOUT_CLASSIFICATION	1.015270642937357E-6	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999990744325006	WITHOUT_CLASSIFICATION	9.255674994158667E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9998244599689168	WITHOUT_CLASSIFICATION	1.7554003108321086E-4	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9796666945225417	DEFECT	0.020333305477458263	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9998127555617037	WITHOUT_CLASSIFICATION	1.8724443829643E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999707412723122	WITHOUT_CLASSIFICATION	2.925872768780916E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999476635921	WITHOUT_CLASSIFICATION	5.233640788934948E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999985912357234	WITHOUT_CLASSIFICATION	1.408764276604497E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999959372718361	WITHOUT_CLASSIFICATION	4.062728163879832E-6	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999973569002778	WITHOUT_CLASSIFICATION	2.6430997222311305E-6	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999999889604355	WITHOUT_CLASSIFICATION	1.1039564490197394E-7	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998949520217295	WITHOUT_CLASSIFICATION	1.0504797827055451E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9998835734101162	WITHOUT_CLASSIFICATION	1.1642658988377172E-4	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.99999251223415	WITHOUT_CLASSIFICATION	7.4877658499938795E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993980280534	WITHOUT_CLASSIFICATION	6.019719465847931E-7	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999829240888	WITHOUT_CLASSIFICATION	1.707591117117773E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9963693975986236	WITHOUT_CLASSIFICATION	0.0036306024013763732	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998905966898	WITHOUT_CLASSIFICATION	1.0940331011446453E-7	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999994102638	WITHOUT_CLASSIFICATION	5.8973619923452915E-9	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999948223282	WITHOUT_CLASSIFICATION	5.177671786590334E-9	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999998909660345	WITHOUT_CLASSIFICATION	1.0903396551934381E-7	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9981229414506829	WITHOUT_CLASSIFICATION	0.0018770585493171714	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999400071661	WITHOUT_CLASSIFICATION	5.999283398328159E-8	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999996300920626	WITHOUT_CLASSIFICATION	3.6990793747339405E-7	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9797062666666367	WITHOUT_CLASSIFICATION	0.020293733333363147	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994181423156	WITHOUT_CLASSIFICATION	5.818576843902713E-7	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999760982303	WITHOUT_CLASSIFICATION	2.3901769694462754E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999666407653	WITHOUT_CLASSIFICATION	3.335923470805601E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999650095989	WITHOUT_CLASSIFICATION	3.4990401179054185E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999999650095989	WITHOUT_CLASSIFICATION	3.4990401179054185E-8	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999419380988	WITHOUT_CLASSIFICATION	5.806190114354422E-8	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.999999777992746	WITHOUT_CLASSIFICATION	2.2200725402107824E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999971490477	WITHOUT_CLASSIFICATION	2.8509522048885438E-9	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999999989497121	WITHOUT_CLASSIFICATION	1.0502878017397058E-9	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999857921128	WITHOUT_CLASSIFICATION	1.4207887244763307E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999987547102879	WITHOUT_CLASSIFICATION	1.245289712058251E-6	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999946897631564	WITHOUT_CLASSIFICATION	5.310236843579334E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999939804914274	WITHOUT_CLASSIFICATION	6.019508572589419E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997415309868	WITHOUT_CLASSIFICATION	2.584690131588666E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994670722879	WITHOUT_CLASSIFICATION	5.329277120922838E-7	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999486478718915	WITHOUT_CLASSIFICATION	5.1352128108359986E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999919068513768	WITHOUT_CLASSIFICATION	8.093148623137711E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999970457916441	WITHOUT_CLASSIFICATION	2.9542083559083865E-6	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999396661597	WITHOUT_CLASSIFICATION	6.033384019124567E-8	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998660159239638	WITHOUT_CLASSIFICATION	1.339840760361355E-4	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999873533018491	WITHOUT_CLASSIFICATION	1.264669815097129E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999986200902808	WITHOUT_CLASSIFICATION	1.3799097191758107E-6	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997341597	WITHOUT_CLASSIFICATION	2.6584038957110134E-10	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999980918634244	WITHOUT_CLASSIFICATION	1.908136575581346E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999998946159254	WITHOUT_CLASSIFICATION	1.0538407461787269E-7	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9997058126615298	WITHOUT_CLASSIFICATION	2.9418733847020586E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999999993710272	WITHOUT_CLASSIFICATION	6.28972789668341E-9	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999998293443316	WITHOUT_CLASSIFICATION	1.7065566840300992E-6	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999891909367287	WITHOUT_CLASSIFICATION	1.0809063271399573E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999999950826223	WITHOUT_CLASSIFICATION	4.9173777079804347E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992081978715	WITHOUT_CLASSIFICATION	7.918021285955199E-7	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999540825891613	WITHOUT_CLASSIFICATION	4.5917410838612995E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999973097237068	WITHOUT_CLASSIFICATION	2.690276293054006E-6	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981660270386	WITHOUT_CLASSIFICATION	1.8339729613444523E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999967220126891	WITHOUT_CLASSIFICATION	3.2779873109060744E-5	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934717883781972	WITHOUT_CLASSIFICATION	0.006528211621802898	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9999263780998721	WITHOUT_CLASSIFICATION	7.362190012800659E-5	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999998602194486	WITHOUT_CLASSIFICATION	1.3978055140360181E-7	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999991250957375	WITHOUT_CLASSIFICATION	8.749042623930399E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999995768651128	WITHOUT_CLASSIFICATION	4.2313488729282236E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999997838612407	WITHOUT_CLASSIFICATION	2.161387592799216E-7	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999940467146667	WITHOUT_CLASSIFICATION	5.953285333285594E-6	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999975426265794	WITHOUT_CLASSIFICATION	2.4573734206733324E-6	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.99999992904324	WITHOUT_CLASSIFICATION	7.095676008978046E-8	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996589269462	WITHOUT_CLASSIFICATION	3.410730538268469E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990881467378	WITHOUT_CLASSIFICATION	9.118532623793513E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999821209031	WITHOUT_CLASSIFICATION	1.7879096899603007E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998699078525656	WITHOUT_CLASSIFICATION	1.300921474343593E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999776709569376	WITHOUT_CLASSIFICATION	2.232904306234112E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999988245381027	WITHOUT_CLASSIFICATION	1.1754618972910113E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912025384115	WITHOUT_CLASSIFICATION	8.79746158863627E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.9988587242902139	WITHOUT_CLASSIFICATION	0.0011412757097860385	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998813967212	WITHOUT_CLASSIFICATION	1.1860327862148199E-7	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997915583166	WITHOUT_CLASSIFICATION	2.0844168341017618E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998400837876	WITHOUT_CLASSIFICATION	1.599162124119513E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920190429765	WITHOUT_CLASSIFICATION	7.980957023380636E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999953718114	WITHOUT_CLASSIFICATION	4.628188674913411E-9	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999999288516008	WITHOUT_CLASSIFICATION	7.114839915009127E-8	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999995618102719	WITHOUT_CLASSIFICATION	4.381897279631969E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998313723145	WITHOUT_CLASSIFICATION	1.6862768550765952E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999764021271684	WITHOUT_CLASSIFICATION	2.3597872831594376E-5	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999971285682078	WITHOUT_CLASSIFICATION	2.871431792302374E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999999140928082	WITHOUT_CLASSIFICATION	8.590719186419355E-8	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999979116681916	WITHOUT_CLASSIFICATION	2.0883318083883343E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999841113461043	WITHOUT_CLASSIFICATION	1.5888653895678396E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999976792064877	WITHOUT_CLASSIFICATION	2.320793512295828E-5	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999996341011401	WITHOUT_CLASSIFICATION	3.65898859910863E-6	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999978487876114	WITHOUT_CLASSIFICATION	2.151212388665427E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999942297428	WITHOUT_CLASSIFICATION	5.770257055056554E-9	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.999994068806282	WITHOUT_CLASSIFICATION	5.9311937178726905E-6	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999998756411596	WITHOUT_CLASSIFICATION	1.2435884040520473E-6	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999030482574	WITHOUT_CLASSIFICATION	9.695174254071088E-8	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999159521521	WITHOUT_CLASSIFICATION	8.404784791110985E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999493954198	WITHOUT_CLASSIFICATION	5.06045801590241E-8	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999485078577	WITHOUT_CLASSIFICATION	5.149214228674553E-8	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999493954198	WITHOUT_CLASSIFICATION	5.06045801590241E-8	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999944273412315	WITHOUT_CLASSIFICATION	5.572658768476595E-6	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999986100779997	WITHOUT_CLASSIFICATION	1.3899220002597748E-6	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999993957456622	WITHOUT_CLASSIFICATION	6.042543377500264E-7	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999894176465	WITHOUT_CLASSIFICATION	1.0582353497856425E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999984244277262	WITHOUT_CLASSIFICATION	1.5755722737365787E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999998036831316	WITHOUT_CLASSIFICATION	1.9631686854815303E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999997405151717	WITHOUT_CLASSIFICATION	2.5948482827780863E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999999681845485	WITHOUT_CLASSIFICATION	3.1815451520648904E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999580611835128	WITHOUT_CLASSIFICATION	4.193881648711153E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998743638053	WITHOUT_CLASSIFICATION	1.2563619458936229E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999856730304	WITHOUT_CLASSIFICATION	1.4326969720640477E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999998949009255	WITHOUT_CLASSIFICATION	1.0509907449336356E-6	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999987765754	WITHOUT_CLASSIFICATION	1.2234245866584903E-9	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999535072542879	WITHOUT_CLASSIFICATION	4.649274571222015E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999733277270594	WITHOUT_CLASSIFICATION	2.6672272940637578E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999680643523	WITHOUT_CLASSIFICATION	3.193564759867766E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999999823100516	WITHOUT_CLASSIFICATION	1.7689948404290593E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999128550647	WITHOUT_CLASSIFICATION	8.71449352956911E-7	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999944891179	WITHOUT_CLASSIFICATION	5.5108821164493874E-9	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999999775415793	WITHOUT_CLASSIFICATION	2.2458420695546875E-8	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999975819669272	WITHOUT_CLASSIFICATION	2.4180330728433683E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999965931898579	WITHOUT_CLASSIFICATION	3.406810142142517E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9987865192480814	WITHOUT_CLASSIFICATION	0.0012134807519186715	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99999794878516	WITHOUT_CLASSIFICATION	2.0512148399462917E-6	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997331223539	WITHOUT_CLASSIFICATION	2.6687764611125926E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993058260358063	WITHOUT_CLASSIFICATION	6.941739641937432E-4	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999966576670466	WITHOUT_CLASSIFICATION	3.3423329534028464E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999979249505491	WITHOUT_CLASSIFICATION	2.075049450864815E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999969859353	WITHOUT_CLASSIFICATION	3.014064699853013E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.99994154812837	WITHOUT_CLASSIFICATION	5.8451871629991226E-5	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.9999932341909643	WITHOUT_CLASSIFICATION	6.765809035719906E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9336252550081636	WITHOUT_CLASSIFICATION	0.06637474499183646	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995420420114617	WITHOUT_CLASSIFICATION	4.5795798853823135E-4	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999930235441885	WITHOUT_CLASSIFICATION	6.976455811563274E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999819656290234	WITHOUT_CLASSIFICATION	1.8034370976674165E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999960879054602	WITHOUT_CLASSIFICATION	3.912094539834218E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999884621096096	WITHOUT_CLASSIFICATION	1.1537890390358631E-5	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999813590779	WITHOUT_CLASSIFICATION	1.8640922164410163E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999528349559351	WITHOUT_CLASSIFICATION	4.716504406497148E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999692873241	WITHOUT_CLASSIFICATION	3.071267590483945E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998466614954	WITHOUT_CLASSIFICATION	1.5333850456162842E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999823286589181	WITHOUT_CLASSIFICATION	1.7671341081837156E-5	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999783419654605	WITHOUT_CLASSIFICATION	2.1658034539489372E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993058260358063	WITHOUT_CLASSIFICATION	6.941739641937432E-4	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999645195949851	WITHOUT_CLASSIFICATION	3.548040501484705E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999981083381501	WITHOUT_CLASSIFICATION	1.8916618500109133E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9998613166697821	WITHOUT_CLASSIFICATION	1.38683330217981E-4	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999538654941109	WITHOUT_CLASSIFICATION	4.613450588912014E-5	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999996260397209	WITHOUT_CLASSIFICATION	3.7396027911115073E-7	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999990425370696	WITHOUT_CLASSIFICATION	9.574629303030467E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999187342792	WITHOUT_CLASSIFICATION	8.126572081380986E-8	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7111845843273377	DEFECT	0.2888154156726624	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998654951343	WITHOUT_CLASSIFICATION	1.3450486567653002E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999524427156076	WITHOUT_CLASSIFICATION	4.755728439233046E-5	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999959129892717	WITHOUT_CLASSIFICATION	4.087010728221875E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999923559371	WITHOUT_CLASSIFICATION	7.644062926311167E-9	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999777849766933	WITHOUT_CLASSIFICATION	2.2215023306690626E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999564272351409	WITHOUT_CLASSIFICATION	4.357276485914484E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996254863729	WITHOUT_CLASSIFICATION	3.745136270776644E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999959597602	WITHOUT_CLASSIFICATION	4.040239872208963E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999115757515	WITHOUT_CLASSIFICATION	8.842424839646943E-8	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999636529426	WITHOUT_CLASSIFICATION	3.634705746769964E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999997167933858	WITHOUT_CLASSIFICATION	2.8320661416353194E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999645195949851	WITHOUT_CLASSIFICATION	3.548040501484705E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999957867250423	WITHOUT_CLASSIFICATION	4.213274957660687E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9997352071773749	WITHOUT_CLASSIFICATION	2.647928226252146E-4	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999973127711453	WITHOUT_CLASSIFICATION	2.6872288546042086E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999977441672852	WITHOUT_CLASSIFICATION	2.255832714811989E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999342723108414	WITHOUT_CLASSIFICATION	6.572768915851918E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799685827119	WITHOUT_CLASSIFICATION	2.2003141728809176E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799685827119	WITHOUT_CLASSIFICATION	2.2003141728809176E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999884097718851	WITHOUT_CLASSIFICATION	1.1590228114916704E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799685827119	WITHOUT_CLASSIFICATION	2.2003141728809176E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9997799685827119	WITHOUT_CLASSIFICATION	2.2003141728809176E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9946069157666638	WITHOUT_CLASSIFICATION	0.005393084233336139	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999739360026977	WITHOUT_CLASSIFICATION	2.6063997302293277E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999760658492	WITHOUT_CLASSIFICATION	2.3934150754623945E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999998465185025	WITHOUT_CLASSIFICATION	1.5348149754531703E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9979345381706721	WITHOUT_CLASSIFICATION	0.0020654618293278904	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999996500435155	WITHOUT_CLASSIFICATION	3.499564845132855E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9991407383924479	WITHOUT_CLASSIFICATION	8.592616075522072E-4	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999999996736664	WITHOUT_CLASSIFICATION	3.263335983038295E-9	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999864194427047	WITHOUT_CLASSIFICATION	1.3580557295281095E-5	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999965544971597	WITHOUT_CLASSIFICATION	3.4455028403319056E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999988649809292	WITHOUT_CLASSIFICATION	1.135019070903889E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999487117435453	WITHOUT_CLASSIFICATION	5.128825645480907E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999987525683153	WITHOUT_CLASSIFICATION	1.2474316847246425E-6	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999974307764239	WITHOUT_CLASSIFICATION	2.5692235761555037E-6	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999998064273814	WITHOUT_CLASSIFICATION	1.9357261847717646E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9982312979323346	WITHOUT_CLASSIFICATION	0.0017687020676653757	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001873341	WITHOUT_CLASSIFICATION	1.9981266590154372E-7	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999308313831832	WITHOUT_CLASSIFICATION	6.91686168167617E-5	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9999123955544805	WITHOUT_CLASSIFICATION	8.760444551951826E-5	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999971205677649	WITHOUT_CLASSIFICATION	2.8794322351564945E-6	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999994522555168	WITHOUT_CLASSIFICATION	5.477444831392917E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999992197865774	WITHOUT_CLASSIFICATION	7.802134227396266E-7	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998001873341	WITHOUT_CLASSIFICATION	1.9981266590154372E-7	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.999966576670466	WITHOUT_CLASSIFICATION	3.3423329534028464E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999875030495431	WITHOUT_CLASSIFICATION	1.2496950456895295E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994229632889	WITHOUT_CLASSIFICATION	5.770367111757371E-7	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990320367345	WITHOUT_CLASSIFICATION	9.679632654870612E-7	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999988512855619	WITHOUT_CLASSIFICATION	1.1487144381874842E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999926412219151	WITHOUT_CLASSIFICATION	7.358778084990343E-6	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.9999995609789435	WITHOUT_CLASSIFICATION	4.3902105640677597E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997444092957202	WITHOUT_CLASSIFICATION	2.5559070427988646E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998157342149	WITHOUT_CLASSIFICATION	1.8426578501258633E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999984355498	WITHOUT_CLASSIFICATION	1.564450194067004E-8	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999900278627415	WITHOUT_CLASSIFICATION	9.972137258562667E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999989661163816	WITHOUT_CLASSIFICATION	1.0338836184509439E-6	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999986944359945	WITHOUT_CLASSIFICATION	1.305564005419853E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999993374419	WITHOUT_CLASSIFICATION	6.625580736518271E-10	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999250070437372	WITHOUT_CLASSIFICATION	7.499295626278223E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999961632028	WITHOUT_CLASSIFICATION	3.8367972038761076E-8	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999899503287079	WITHOUT_CLASSIFICATION	1.0049671292071497E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999444282839951	WITHOUT_CLASSIFICATION	5.557171600495663E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998398254517	WITHOUT_CLASSIFICATION	1.6017454823455908E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999993558169092	WITHOUT_CLASSIFICATION	6.441830908059402E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998981382956308	WITHOUT_CLASSIFICATION	1.0186170436916565E-4	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999642700175	WITHOUT_CLASSIFICATION	3.5729982433584655E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999980081162644	WITHOUT_CLASSIFICATION	1.991883735710931E-6	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998157342149	WITHOUT_CLASSIFICATION	1.8426578501258633E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999586553681	WITHOUT_CLASSIFICATION	4.134463198714064E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999999696399198	WITHOUT_CLASSIFICATION	3.036008029632043E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999998896888298	WITHOUT_CLASSIFICATION	1.1031117019641453E-6	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999998853977227	WITHOUT_CLASSIFICATION	1.1460227728123522E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999806146839	WITHOUT_CLASSIFICATION	1.9385316150117835E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999986644400559	WITHOUT_CLASSIFICATION	1.3355599440539828E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.999997287012113	WITHOUT_CLASSIFICATION	2.712987886913292E-6	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.999999937021774	WITHOUT_CLASSIFICATION	6.297822598700912E-8	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999998556005643	WITHOUT_CLASSIFICATION	1.4439943571462702E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999894668643253	WITHOUT_CLASSIFICATION	1.0533135674608967E-5	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695473227	WITHOUT_CLASSIFICATION	3.0452677295656944E-8	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999948783626587	WITHOUT_CLASSIFICATION	5.121637341394949E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999986358330588	WITHOUT_CLASSIFICATION	1.3641669412629366E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999999705107	WITHOUT_CLASSIFICATION	2.9489337625180456E-11	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999625603680414	WITHOUT_CLASSIFICATION	3.743963195865779E-5	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999890006906	WITHOUT_CLASSIFICATION	1.099930940362081E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695473227	WITHOUT_CLASSIFICATION	3.0452677295656944E-8	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999211566315	WITHOUT_CLASSIFICATION	7.884336845360566E-8	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9993406725122316	WITHOUT_CLASSIFICATION	6.593274877684178E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997965746873	WITHOUT_CLASSIFICATION	2.034253126499646E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999244714858	WITHOUT_CLASSIFICATION	7.552851419778338E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999868010427695	WITHOUT_CLASSIFICATION	1.3198957230564224E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999733390865	WITHOUT_CLASSIFICATION	2.6660913360170835E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999998949259702	WITHOUT_CLASSIFICATION	1.0507402980923495E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989875124459	WITHOUT_CLASSIFICATION	1.012487554152979E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999769527659	WITHOUT_CLASSIFICATION	2.3047234141055152E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996196725266	WITHOUT_CLASSIFICATION	3.803274733364404E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990459925103	WITHOUT_CLASSIFICATION	9.540074896678542E-7	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999110007151	WITHOUT_CLASSIFICATION	8.899928502473781E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999905179283	WITHOUT_CLASSIFICATION	9.482071688188949E-8	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.999999905179283	WITHOUT_CLASSIFICATION	9.482071688188949E-8	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999948798242196	WITHOUT_CLASSIFICATION	5.120175780282147E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993761832089	WITHOUT_CLASSIFICATION	6.238167910680575E-7	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999994996014678	WITHOUT_CLASSIFICATION	5.00398532274172E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999893609162172	WITHOUT_CLASSIFICATION	1.063908378294381E-5	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9490656052182762	WITHOUT_CLASSIFICATION	0.05093439478172379	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999911276958	WITHOUT_CLASSIFICATION	8.872304194653557E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983812556851	WITHOUT_CLASSIFICATION	1.6187443149310238E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972925557261	WITHOUT_CLASSIFICATION	2.7074442738759033E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999999044095107	WITHOUT_CLASSIFICATION	9.55904892247713E-8	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969936168566	WITHOUT_CLASSIFICATION	3.0063831433880983E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999911276958	WITHOUT_CLASSIFICATION	8.872304194653557E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983812556851	WITHOUT_CLASSIFICATION	1.6187443149310238E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972925557261	WITHOUT_CLASSIFICATION	2.7074442738759033E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999998706635977	WITHOUT_CLASSIFICATION	1.2933640228297877E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999989737395938	WITHOUT_CLASSIFICATION	1.026260406272641E-6	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999965920530215	WITHOUT_CLASSIFICATION	3.4079469785298513E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999911674979695	WITHOUT_CLASSIFICATION	8.832502030576227E-6	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999649496121	WITHOUT_CLASSIFICATION	3.50503879326566E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999727980519396	WITHOUT_CLASSIFICATION	2.720194806043632E-5	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999530852994039	WITHOUT_CLASSIFICATION	4.691470059616018E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999998253237067	WITHOUT_CLASSIFICATION	1.7467629319722352E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.9999937248045893	WITHOUT_CLASSIFICATION	6.275195410726386E-6	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.99999955119627	WITHOUT_CLASSIFICATION	4.488037298393091E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999812738539	WITHOUT_CLASSIFICATION	1.8726146037017423E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.996806706952108	WITHOUT_CLASSIFICATION	0.0031932930478919775	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9997128126385945	WITHOUT_CLASSIFICATION	2.871873614055423E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999999256900921	WITHOUT_CLASSIFICATION	7.430990796197556E-8	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997511718873	WITHOUT_CLASSIFICATION	2.4882811270572E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999911570609722	WITHOUT_CLASSIFICATION	8.842939027806099E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996347579133	WITHOUT_CLASSIFICATION	3.6524208671366793E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999888786121995	WITHOUT_CLASSIFICATION	1.1121387800358478E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999995332163331	WITHOUT_CLASSIFICATION	4.667836669117992E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985034183554	WITHOUT_CLASSIFICATION	1.4965816446116574E-6	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999992648925372	WITHOUT_CLASSIFICATION	7.351074627751242E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9828379455920822	WITHOUT_CLASSIFICATION	0.017162054407917893	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999992616521862	WITHOUT_CLASSIFICATION	7.383478137738068E-7	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999995672236958	WITHOUT_CLASSIFICATION	4.3277630425882714E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999960218616	WITHOUT_CLASSIFICATION	3.978138403632348E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999960123581839	WITHOUT_CLASSIFICATION	3.9876418160807085E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922437394819	WITHOUT_CLASSIFICATION	7.756260517995007E-6	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989149642765	WITHOUT_CLASSIFICATION	1.0850357235407995E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999998861134565	WITHOUT_CLASSIFICATION	1.1388654354312114E-7	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995644588745	WITHOUT_CLASSIFICATION	4.3554112556919486E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864226226348	WITHOUT_CLASSIFICATION	1.3577377365179409E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836346156	WITHOUT_CLASSIFICATION	1.1636538449430682E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999998836346156	WITHOUT_CLASSIFICATION	1.1636538449430682E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999956192507	WITHOUT_CLASSIFICATION	4.380749377024476E-9	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999998591068381	WITHOUT_CLASSIFICATION	1.4089316183689747E-7	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999977792540755	WITHOUT_CLASSIFICATION	2.2207459245320264E-6	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999991958999284	WITHOUT_CLASSIFICATION	8.041000716124525E-6	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999733434353	WITHOUT_CLASSIFICATION	2.665656471857766E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999978914878774	WITHOUT_CLASSIFICATION	2.108512122484236E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999749685467603	WITHOUT_CLASSIFICATION	2.5031453239645642E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999919397495	WITHOUT_CLASSIFICATION	8.060250559837108E-9	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995783493639	WITHOUT_CLASSIFICATION	4.2165063601177524E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999325292679	WITHOUT_CLASSIFICATION	6.747073214049873E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998169086615	WITHOUT_CLASSIFICATION	1.830913385187581E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991211755884	WITHOUT_CLASSIFICATION	8.788244115422674E-7	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998708479716	WITHOUT_CLASSIFICATION	1.291520283628453E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999136252038	WITHOUT_CLASSIFICATION	8.63747962510643E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998135342174	WITHOUT_CLASSIFICATION	1.8646578253821445E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997960097016	WITHOUT_CLASSIFICATION	2.0399029838729304E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998549567086	WITHOUT_CLASSIFICATION	1.450432913224948E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996011471451	WITHOUT_CLASSIFICATION	3.9885285477976E-7	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994391578769	WITHOUT_CLASSIFICATION	5.60842123087238E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999875547381	WITHOUT_CLASSIFICATION	1.2445261929328505E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999987298881946	WITHOUT_CLASSIFICATION	1.2701118053820227E-6	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9769936980278113	WITHOUT_CLASSIFICATION	0.023006301972188677	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806861265972	WITHOUT_CLASSIFICATION	1.931387340282425E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999994877188064	WITHOUT_CLASSIFICATION	5.122811935682314E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999849463636	WITHOUT_CLASSIFICATION	1.5053636437830596E-8	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999995460307971	WITHOUT_CLASSIFICATION	4.5396920285150216E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999986098206	WITHOUT_CLASSIFICATION	1.3901794364694656E-9	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999994079942569	WITHOUT_CLASSIFICATION	5.920057429790003E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806861265972	WITHOUT_CLASSIFICATION	1.931387340282425E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806861265972	WITHOUT_CLASSIFICATION	1.931387340282425E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999981282827753	WITHOUT_CLASSIFICATION	1.8717172247763824E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999992553710315	WITHOUT_CLASSIFICATION	7.446289684267399E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999956792384	WITHOUT_CLASSIFICATION	4.320761598076922E-8	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999991355358073	WITHOUT_CLASSIFICATION	8.644641926287217E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078491958	WITHOUT_CLASSIFICATION	7.92150804223452E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999985034183554	WITHOUT_CLASSIFICATION	1.4965816446116574E-6	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999999986831819	WITHOUT_CLASSIFICATION	1.3168181048056654E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999152865854953	WITHOUT_CLASSIFICATION	8.47134145046904E-5	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999971880461488	WITHOUT_CLASSIFICATION	2.811953851277434E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987573297646	WITHOUT_CLASSIFICATION	1.2426702354203974E-6	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999998401894413	WITHOUT_CLASSIFICATION	1.5981055869492128E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999920612479662	WITHOUT_CLASSIFICATION	7.9387520338105E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999777750601	WITHOUT_CLASSIFICATION	2.2224939892767327E-7	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999999777750601	WITHOUT_CLASSIFICATION	2.2224939892767327E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999805801946	WITHOUT_CLASSIFICATION	1.9419805409491036E-8	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999999805801946	WITHOUT_CLASSIFICATION	1.9419805409491036E-8	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994373006712	WITHOUT_CLASSIFICATION	5.626993288710386E-7	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992890055971	WITHOUT_CLASSIFICATION	7.109944029873432E-7	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999986364137075	WITHOUT_CLASSIFICATION	1.363586292579798E-6	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996927427875	WITHOUT_CLASSIFICATION	3.0725721238117484E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.999991668322791	WITHOUT_CLASSIFICATION	8.331677208993729E-6	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9998641380764309	WITHOUT_CLASSIFICATION	1.3586192356909447E-4	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997554497301995	WITHOUT_CLASSIFICATION	2.445502698005801E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936741792762	WITHOUT_CLASSIFICATION	6.325820723767748E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.999998457169737	WITHOUT_CLASSIFICATION	1.5428302630097066E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999604264541	WITHOUT_CLASSIFICATION	3.9573545884193194E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999814790785	WITHOUT_CLASSIFICATION	1.8520921497221044E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999997093083276	WITHOUT_CLASSIFICATION	2.9069167246961724E-7	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999993000781893	WITHOUT_CLASSIFICATION	6.999218107260161E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993703244996	WITHOUT_CLASSIFICATION	6.296755004539613E-7	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999967677401717	WITHOUT_CLASSIFICATION	3.232259828255467E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999996868863238	WITHOUT_CLASSIFICATION	3.131136762125927E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999996868863238	WITHOUT_CLASSIFICATION	3.131136762125927E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999893049922	WITHOUT_CLASSIFICATION	1.0695007643675108E-8	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999664778708864	WITHOUT_CLASSIFICATION	3.352212911362576E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999973278105	WITHOUT_CLASSIFICATION	2.672189499002067E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999234425491565	WITHOUT_CLASSIFICATION	7.655745084343407E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994561299476	WITHOUT_CLASSIFICATION	5.43870052401317E-6	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990392825546	WITHOUT_CLASSIFICATION	9.60717445370963E-7	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999994486073692	WITHOUT_CLASSIFICATION	5.513926307645341E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997678844986719	WITHOUT_CLASSIFICATION	2.321155013280774E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999986506145577	WITHOUT_CLASSIFICATION	1.3493854422507851E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999899445009	WITHOUT_CLASSIFICATION	1.005549916550928E-8	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999994995023122	WITHOUT_CLASSIFICATION	5.004976878542752E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9986102696464704	WITHOUT_CLASSIFICATION	0.0013897303535295492	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810508558744	WITHOUT_CLASSIFICATION	1.8949144125615018E-5	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999911155942667	WITHOUT_CLASSIFICATION	8.884405733404498E-6	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996107908041	WITHOUT_CLASSIFICATION	3.8920919590191546E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998036395627803	WITHOUT_CLASSIFICATION	1.963604372196333E-4	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999552659781	WITHOUT_CLASSIFICATION	4.473402199533028E-8	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999918453236815	WITHOUT_CLASSIFICATION	8.154676318556617E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999885109121124	WITHOUT_CLASSIFICATION	1.1489087887589509E-5	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999992211655746	WITHOUT_CLASSIFICATION	7.7883442534954E-7	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999999009613	WITHOUT_CLASSIFICATION	9.903867627864007E-11	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999948248605737	WITHOUT_CLASSIFICATION	5.175139426300812E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992559280347	WITHOUT_CLASSIFICATION	7.440719652464073E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999958865814	WITHOUT_CLASSIFICATION	4.113418610639628E-9	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999998386021531	WITHOUT_CLASSIFICATION	1.6139784681944572E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999909956253968	WITHOUT_CLASSIFICATION	9.004374603165352E-6	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999666840712893	WITHOUT_CLASSIFICATION	3.3315928710753065E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999320803710072	WITHOUT_CLASSIFICATION	6.791962899276262E-5	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999937088885	WITHOUT_CLASSIFICATION	6.291111420940575E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999972967928188	WITHOUT_CLASSIFICATION	2.703207181185847E-6	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9997949116762257	WITHOUT_CLASSIFICATION	2.0508832377416617E-4	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999975983273371	WITHOUT_CLASSIFICATION	2.4016726628850676E-6	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999506678275201	WITHOUT_CLASSIFICATION	4.9332172479821415E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999983691329136	WITHOUT_CLASSIFICATION	1.630867086304461E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998779936070862	WITHOUT_CLASSIFICATION	1.2200639291382073E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999861144798298	WITHOUT_CLASSIFICATION	1.3885520170173546E-5	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999995487763939	WITHOUT_CLASSIFICATION	4.512236061592647E-7	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999997792074466	WITHOUT_CLASSIFICATION	2.2079255330145276E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999344656775	WITHOUT_CLASSIFICATION	6.553432257355667E-8	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999999561265939	WITHOUT_CLASSIFICATION	4.387340617383972E-8	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999998653065099	WITHOUT_CLASSIFICATION	1.3469349012795577E-7	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999997759198732	WITHOUT_CLASSIFICATION	2.2408012686482592E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9991879996086773	WITHOUT_CLASSIFICATION	8.120003913225424E-4	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999989142484835	WITHOUT_CLASSIFICATION	1.085751516484599E-6	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999963777747524	WITHOUT_CLASSIFICATION	3.622225247711063E-6	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999937613933354	WITHOUT_CLASSIFICATION	6.238606664602764E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998982678161	WITHOUT_CLASSIFICATION	1.0173218394259453E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999963906644709	WITHOUT_CLASSIFICATION	3.609335529188973E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999896890795733	WITHOUT_CLASSIFICATION	1.0310920426707531E-5	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999999793154461	WITHOUT_CLASSIFICATION	2.068455389406607E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999973415184776	WITHOUT_CLASSIFICATION	2.6584815223953235E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999988344294376	WITHOUT_CLASSIFICATION	1.1655705624070536E-5	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999915106886	WITHOUT_CLASSIFICATION	8.489311393170607E-8	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998623482377609	WITHOUT_CLASSIFICATION	1.376517622391141E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999979426467425	WITHOUT_CLASSIFICATION	2.0573532575009765E-6	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.999998497991329	WITHOUT_CLASSIFICATION	1.502008671050815E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999996413860294	WITHOUT_CLASSIFICATION	3.58613970623717E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999923783884846	WITHOUT_CLASSIFICATION	7.621611515364533E-6	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999999336268276	WITHOUT_CLASSIFICATION	6.637317236678325E-8	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999953183035686	WITHOUT_CLASSIFICATION	4.681696431400309E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999976741706118	WITHOUT_CLASSIFICATION	2.3258293881494464E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999521793239	WITHOUT_CLASSIFICATION	4.7820676105942816E-8	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999594939708	WITHOUT_CLASSIFICATION	4.0506029195379046E-8	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999999564331671	WITHOUT_CLASSIFICATION	4.356683289394735E-7	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999801941936	WITHOUT_CLASSIFICATION	1.980580646426181E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999309122293292	WITHOUT_CLASSIFICATION	6.908777067087195E-5	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999984854180821	WITHOUT_CLASSIFICATION	1.5145819177885752E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997180348474	WITHOUT_CLASSIFICATION	2.8196515255038503E-7	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677054480484	WITHOUT_CLASSIFICATION	3.229455195162183E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677054480484	WITHOUT_CLASSIFICATION	3.229455195162183E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999261316279	WITHOUT_CLASSIFICATION	7.386837207136406E-8	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999996300212494	WITHOUT_CLASSIFICATION	3.6997875060927863E-7	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999993110194243	WITHOUT_CLASSIFICATION	6.889805756567538E-7	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999990325056595	WITHOUT_CLASSIFICATION	9.674943405006306E-7	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999985823932039	WITHOUT_CLASSIFICATION	1.417606796058499E-6	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999547909166	WITHOUT_CLASSIFICATION	4.520908335376221E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999999400629756	WITHOUT_CLASSIFICATION	5.993702440482466E-7	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999982694407606	WITHOUT_CLASSIFICATION	1.7305592392903075E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999403293352945	WITHOUT_CLASSIFICATION	5.967066470554461E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999996914966516	WITHOUT_CLASSIFICATION	3.0850334843172233E-7	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997658171507	WITHOUT_CLASSIFICATION	2.341828494182663E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996348588833	WITHOUT_CLASSIFICATION	3.6514111669951435E-7	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999997200375702	WITHOUT_CLASSIFICATION	2.799624298888919E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999992974225	WITHOUT_CLASSIFICATION	7.025775013361748E-9	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999941360817677	WITHOUT_CLASSIFICATION	5.863918232276796E-6	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999969899212312	WITHOUT_CLASSIFICATION	3.010078768713057E-6	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999986396364035	WITHOUT_CLASSIFICATION	1.3603635965495065E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9994426757102924	WITHOUT_CLASSIFICATION	5.573242897076595E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999982868387	WITHOUT_CLASSIFICATION	1.7131612999794704E-6	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999825795968	WITHOUT_CLASSIFICATION	1.7420403238216584E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.999998717843074	WITHOUT_CLASSIFICATION	1.282156925959276E-6	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999995346037088	WITHOUT_CLASSIFICATION	4.653962911979709E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999863875180764	WITHOUT_CLASSIFICATION	1.3612481923534038E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999607164672362	WITHOUT_CLASSIFICATION	3.928353276388258E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999891030344132	WITHOUT_CLASSIFICATION	1.0896965586704815E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999814394206856	WITHOUT_CLASSIFICATION	1.8560579314372246E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999993389362618	WITHOUT_CLASSIFICATION	6.610637381636563E-7	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999835047210336	WITHOUT_CLASSIFICATION	1.6495278966374635E-5	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999997103957591	WITHOUT_CLASSIFICATION	2.8960424090159905E-7	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999947444385	WITHOUT_CLASSIFICATION	5.255561549079384E-9	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998143237906	WITHOUT_CLASSIFICATION	1.8567620943603884E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999999294629632	WITHOUT_CLASSIFICATION	7.053703680192556E-8	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999998146721575	WITHOUT_CLASSIFICATION	1.8532784241238976E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999991376554689	WITHOUT_CLASSIFICATION	8.623445311428369E-7	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910533196957	WITHOUT_CLASSIFICATION	8.946680304153582E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999910533196957	WITHOUT_CLASSIFICATION	8.946680304153582E-6	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999906382585854	WITHOUT_CLASSIFICATION	9.361741414635663E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999920123649747	WITHOUT_CLASSIFICATION	7.98763502530876E-6	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999996619060829	WITHOUT_CLASSIFICATION	3.3809391710099234E-6	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999983915235765	WITHOUT_CLASSIFICATION	1.6084764234487585E-6	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999989586	WITHOUT_CLASSIFICATION	1.0413674840021864E-12	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999855014388099	WITHOUT_CLASSIFICATION	1.4498561190010023E-5	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999757542121476	WITHOUT_CLASSIFICATION	2.4245787852417006E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999996900749927	WITHOUT_CLASSIFICATION	3.099250073907185E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9998065431379726	WITHOUT_CLASSIFICATION	1.9345686202742324E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994503345138	WITHOUT_CLASSIFICATION	5.496654861293741E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9977020818368989	WITHOUT_CLASSIFICATION	0.002297918163101043	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999964161464452	WITHOUT_CLASSIFICATION	3.583853554712216E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999996973951798	WITHOUT_CLASSIFICATION	3.0260482020660085E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999997210634342	WITHOUT_CLASSIFICATION	2.7893656587379677E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999996654225151	WITHOUT_CLASSIFICATION	3.3457748499055617E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993897767603691	WITHOUT_CLASSIFICATION	6.102232396308911E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993897767603691	WITHOUT_CLASSIFICATION	6.102232396308911E-4	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999767339832488	WITHOUT_CLASSIFICATION	2.3266016751097864E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999510357367662	WITHOUT_CLASSIFICATION	4.896426323368877E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999956976083263	WITHOUT_CLASSIFICATION	4.302391673698822E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999373100683	WITHOUT_CLASSIFICATION	6.268993171832975E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994057206812746	WITHOUT_CLASSIFICATION	5.942793187252727E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999999863697063	WITHOUT_CLASSIFICATION	1.363029370422103E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997766055205	WITHOUT_CLASSIFICATION	2.233944795406762E-7	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999997766055205	WITHOUT_CLASSIFICATION	2.233944795406762E-7	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999954775482571	WITHOUT_CLASSIFICATION	4.5224517428172275E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999994550011682	WITHOUT_CLASSIFICATION	5.449988318476961E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999993202168136	WITHOUT_CLASSIFICATION	6.797831863923246E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9975792692239202	WITHOUT_CLASSIFICATION	0.0024207307760798504	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999997512968861	WITHOUT_CLASSIFICATION	2.4870311387117414E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999894335229524	WITHOUT_CLASSIFICATION	1.056647704754643E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999983377146436	WITHOUT_CLASSIFICATION	1.6622853564083497E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997886539981	WITHOUT_CLASSIFICATION	2.1134600198491273E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999981697486	WITHOUT_CLASSIFICATION	1.8302514090068378E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999950777842901	WITHOUT_CLASSIFICATION	4.922215709995327E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995286274243688	WITHOUT_CLASSIFICATION	4.713725756312394E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999969697738865	WITHOUT_CLASSIFICATION	3.0302261134081737E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999931298001	WITHOUT_CLASSIFICATION	6.870199851445222E-9	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999998912333611	WITHOUT_CLASSIFICATION	1.0876663893170173E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999981660270386	WITHOUT_CLASSIFICATION	1.8339729613444523E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999943613278	WITHOUT_CLASSIFICATION	5.638672200588655E-8	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997237550534	WITHOUT_CLASSIFICATION	2.762449466174379E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999989051802013	WITHOUT_CLASSIFICATION	1.094819798695256E-6	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999925210562455	WITHOUT_CLASSIFICATION	7.478943754419461E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999993727198443	WITHOUT_CLASSIFICATION	6.272801557019249E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998765824858	WITHOUT_CLASSIFICATION	1.234175140960656E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999999302867812	WITHOUT_CLASSIFICATION	6.971321883029614E-8	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998533365843224	WITHOUT_CLASSIFICATION	1.4666341567767176E-4	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999946627664593	WITHOUT_CLASSIFICATION	5.337233540590014E-6	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999998573466843	WITHOUT_CLASSIFICATION	1.4265331569932544E-6	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999963568149731	WITHOUT_CLASSIFICATION	3.6431850269073576E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999997287649329	WITHOUT_CLASSIFICATION	2.712350670538883E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999977022	WITHOUT_CLASSIFICATION	2.2978008151767664E-12	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999992944293313	WITHOUT_CLASSIFICATION	7.055706687149244E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.99999997800479	WITHOUT_CLASSIFICATION	2.1995209962820657E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999860386230363	WITHOUT_CLASSIFICATION	1.3961376963672944E-5	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999995887421191	WITHOUT_CLASSIFICATION	4.112578807979942E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9948193303345954	WITHOUT_CLASSIFICATION	0.0051806696654046495	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999503958165	WITHOUT_CLASSIFICATION	4.960418343511799E-8	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999727643326	WITHOUT_CLASSIFICATION	2.7235667288108602E-8	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999847249743844	WITHOUT_CLASSIFICATION	1.527502561560399E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999949418463948	WITHOUT_CLASSIFICATION	5.058153605242031E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999975372070994	WITHOUT_CLASSIFICATION	2.4627929006632823E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999454223577	WITHOUT_CLASSIFICATION	5.457764218864297E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996512340069	WITHOUT_CLASSIFICATION	3.487659930107143E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999885098296	WITHOUT_CLASSIFICATION	1.1490170420315459E-8	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999737001371262	WITHOUT_CLASSIFICATION	2.6299862873832014E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999812482419261	WITHOUT_CLASSIFICATION	1.875175807388644E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999899488945	WITHOUT_CLASSIFICATION	1.0051105471744552E-8	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999812895	WITHOUT_CLASSIFICATION	1.871042207631942E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999937483261581	WITHOUT_CLASSIFICATION	6.2516738420370894E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999454223577	WITHOUT_CLASSIFICATION	5.457764218864297E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996512340069	WITHOUT_CLASSIFICATION	3.487659930107143E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999993029843349	WITHOUT_CLASSIFICATION	6.97015665033576E-7	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999999234113257	WITHOUT_CLASSIFICATION	7.658867429949112E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999998836177099	WITHOUT_CLASSIFICATION	1.1638229020886519E-7	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999918054065313	WITHOUT_CLASSIFICATION	8.194593468732495E-6	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999999375319266	WITHOUT_CLASSIFICATION	6.246807339752098E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9998750112820991	WITHOUT_CLASSIFICATION	1.249887179010008E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999228903628566	WITHOUT_CLASSIFICATION	7.710963714336892E-5	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999959127060933	WITHOUT_CLASSIFICATION	4.087293906587278E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999999837069252	WITHOUT_CLASSIFICATION	1.6293074800906352E-7	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.990960784112335	WITHOUT_CLASSIFICATION	0.009039215887664981	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999998643837	WITHOUT_CLASSIFICATION	1.3561627065135347E-10	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.990960784112335	WITHOUT_CLASSIFICATION	0.009039215887664981	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999878983256627	WITHOUT_CLASSIFICATION	1.21016743373388E-5	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999997615918091	WITHOUT_CLASSIFICATION	2.384081908754034E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9998822964980948	WITHOUT_CLASSIFICATION	1.1770350190519814E-4	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999736112305	WITHOUT_CLASSIFICATION	2.6388769415905474E-8	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998743148251341	WITHOUT_CLASSIFICATION	1.2568517486586314E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999806896324589	WITHOUT_CLASSIFICATION	1.9310367541039914E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999806896324589	WITHOUT_CLASSIFICATION	1.9310367541039914E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999594938861828	WITHOUT_CLASSIFICATION	4.050611381727709E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999959763048075	WITHOUT_CLASSIFICATION	4.023695192410932E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999913420062869	WITHOUT_CLASSIFICATION	8.657993713019025E-6	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443935015006	WITHOUT_CLASSIFICATION	5.5606498499464414E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999893659041705	WITHOUT_CLASSIFICATION	1.0634095829407508E-5	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999996208996165	WITHOUT_CLASSIFICATION	3.791003835071726E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997798559442	WITHOUT_CLASSIFICATION	2.201440557138414E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998673884466	WITHOUT_CLASSIFICATION	1.3261155340773317E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999967235587119	WITHOUT_CLASSIFICATION	3.2764412880020773E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999994174756243	WITHOUT_CLASSIFICATION	5.825243757020794E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999999522876678	WITHOUT_CLASSIFICATION	4.771233227903666E-8	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999968421224341	WITHOUT_CLASSIFICATION	3.157877565947882E-6	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999876332304116	WITHOUT_CLASSIFICATION	1.236676958836231E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999998798012075	WITHOUT_CLASSIFICATION	1.201987924349605E-7	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999998512604072	WITHOUT_CLASSIFICATION	1.4873959279383035E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999984069913266	WITHOUT_CLASSIFICATION	1.5930086733527395E-6	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999974684092973	WITHOUT_CLASSIFICATION	2.5315907027664517E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999746443042	WITHOUT_CLASSIFICATION	2.535569579788659E-7	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999996201018706	WITHOUT_CLASSIFICATION	3.798981293890805E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999739778495008	WITHOUT_CLASSIFICATION	2.6022150499219304E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999999880211586	WITHOUT_CLASSIFICATION	1.1978841299736114E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999991718316675	WITHOUT_CLASSIFICATION	8.281683324315355E-7	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999990325905818	WITHOUT_CLASSIFICATION	9.674094182403548E-7	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999588898593	WITHOUT_CLASSIFICATION	4.1110140781406E-8	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999997331829718	WITHOUT_CLASSIFICATION	2.6681702830413795E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999971826433138	WITHOUT_CLASSIFICATION	2.817356686199565E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999710625036	WITHOUT_CLASSIFICATION	2.893749637480979E-8	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996821893940787	WITHOUT_CLASSIFICATION	3.178106059213477E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999997768799994	WITHOUT_CLASSIFICATION	2.2312000055131506E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999998956025145	WITHOUT_CLASSIFICATION	1.0439748557641801E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9998517331140796	WITHOUT_CLASSIFICATION	1.4826688592051239E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999557510475988	WITHOUT_CLASSIFICATION	4.4248952401187504E-5	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999997798559442	WITHOUT_CLASSIFICATION	2.201440557138414E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9998426562196645	WITHOUT_CLASSIFICATION	1.573437803355172E-4	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.99999820525059	WITHOUT_CLASSIFICATION	1.7947494099748326E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9916468706042375	WITHOUT_CLASSIFICATION	0.008353129395762514	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999993823984151	WITHOUT_CLASSIFICATION	6.176015847931186E-7	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999993271935977	WITHOUT_CLASSIFICATION	6.728064022663017E-7	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999632026426	WITHOUT_CLASSIFICATION	3.679735738604816E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443935015006	WITHOUT_CLASSIFICATION	5.5606498499464414E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999443935015006	WITHOUT_CLASSIFICATION	5.5606498499464414E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999860811033	WITHOUT_CLASSIFICATION	1.3918896764807992E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999997875352319	WITHOUT_CLASSIFICATION	2.1246476808978499E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.999989770091502	WITHOUT_CLASSIFICATION	1.0229908498039881E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.99999991881683	WITHOUT_CLASSIFICATION	8.118316986938102E-8	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999968100333847	WITHOUT_CLASSIFICATION	3.1899666152441086E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997023491908236	WITHOUT_CLASSIFICATION	2.976508091763508E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999422602788213	WITHOUT_CLASSIFICATION	5.773972117875874E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999097003465	WITHOUT_CLASSIFICATION	9.02996534817886E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999906370420457	WITHOUT_CLASSIFICATION	9.362957954201013E-6	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110813643	WITHOUT_CLASSIFICATION	8.891863566614192E-8	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999991743528295	WITHOUT_CLASSIFICATION	8.256471705027048E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729693442351	WITHOUT_CLASSIFICATION	2.7030655764822198E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.999999764507469	WITHOUT_CLASSIFICATION	2.3549253115044475E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110813643	WITHOUT_CLASSIFICATION	8.891863566614192E-8	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997949079606	WITHOUT_CLASSIFICATION	2.0509203940303104E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999958124947742	WITHOUT_CLASSIFICATION	4.187505225848342E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999908821826168	WITHOUT_CLASSIFICATION	9.117817383254014E-6	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9788457154283164	WITHOUT_CLASSIFICATION	0.021154284571683498	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729693442351	WITHOUT_CLASSIFICATION	2.7030655764822198E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999679157130632	WITHOUT_CLASSIFICATION	3.208428693677478E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999950332698655	WITHOUT_CLASSIFICATION	4.966730134487106E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999459117971	WITHOUT_CLASSIFICATION	5.408820278807926E-8	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999449177866522	WITHOUT_CLASSIFICATION	5.5082213347927214E-5	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999851933102535	WITHOUT_CLASSIFICATION	1.4806689746614964E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999117376726	WITHOUT_CLASSIFICATION	8.826232744629775E-8	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999993315161082	WITHOUT_CLASSIFICATION	6.68483891861138E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317162138	WITHOUT_CLASSIFICATION	1.8682837863321892E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999996542834225	WITHOUT_CLASSIFICATION	3.45716577527212E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999560062839	WITHOUT_CLASSIFICATION	4.399371606595775E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9956842791066225	WITHOUT_CLASSIFICATION	0.004315720893377501	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999503829484	WITHOUT_CLASSIFICATION	4.9617051579324465E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999110813643	WITHOUT_CLASSIFICATION	8.891863566614192E-8	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999679157130632	WITHOUT_CLASSIFICATION	3.208428693677478E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999459117971	WITHOUT_CLASSIFICATION	5.408820278807926E-8	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999923613220117	WITHOUT_CLASSIFICATION	7.638677988345055E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.999991891394535	WITHOUT_CLASSIFICATION	8.1086054649884E-6	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999992456101128	WITHOUT_CLASSIFICATION	7.543898872425995E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999729693442351	WITHOUT_CLASSIFICATION	2.7030655764822198E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.99999988427723	WITHOUT_CLASSIFICATION	1.1572277007659398E-7	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997429541043	WITHOUT_CLASSIFICATION	2.5704589564551367E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999974694132361	WITHOUT_CLASSIFICATION	2.5305867639304343E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510755437	WITHOUT_CLASSIFICATION	4.489244563833877E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317162138	WITHOUT_CLASSIFICATION	1.8682837863321892E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997949079606	WITHOUT_CLASSIFICATION	2.0509203940303104E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999952365078592	WITHOUT_CLASSIFICATION	4.7634921409144145E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999985296890017	WITHOUT_CLASSIFICATION	1.4703109982648642E-6	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999999666085038	WITHOUT_CLASSIFICATION	3.3391496206878755E-7	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999999812949627	WITHOUT_CLASSIFICATION	1.8705037289826065E-7	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999264668942	WITHOUT_CLASSIFICATION	7.353310578682267E-8	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999323412031	WITHOUT_CLASSIFICATION	6.765879682905106E-8	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999832592800536	WITHOUT_CLASSIFICATION	1.674071994639105E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999736112305	WITHOUT_CLASSIFICATION	2.6388769415905474E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999741893383	WITHOUT_CLASSIFICATION	2.5810661683765593E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999981964041	WITHOUT_CLASSIFICATION	1.8035958998018818E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9978696296974635	WITHOUT_CLASSIFICATION	0.0021303703025365916	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999514836856651	WITHOUT_CLASSIFICATION	4.8516314334877024E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999992432221681	WITHOUT_CLASSIFICATION	7.567778319080809E-6	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999976694001866	WITHOUT_CLASSIFICATION	2.330599813396577E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999993819689534	WITHOUT_CLASSIFICATION	6.180310466619093E-7	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999811818222	WITHOUT_CLASSIFICATION	1.8818177800539918E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999995510755437	WITHOUT_CLASSIFICATION	4.489244563833877E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999986005215289	WITHOUT_CLASSIFICATION	1.3994784711097122E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.9999982711773819	WITHOUT_CLASSIFICATION	1.728822617993043E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999993278679845	WITHOUT_CLASSIFICATION	6.721320154865183E-7	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999994514274495	WITHOUT_CLASSIFICATION	5.485725505349676E-7	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999971035694833	WITHOUT_CLASSIFICATION	2.896430516514132E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999868725038	WITHOUT_CLASSIFICATION	1.3127496148971579E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999914558852744	WITHOUT_CLASSIFICATION	8.544114725654022E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9998149362670856	WITHOUT_CLASSIFICATION	1.8506373291442117E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999974551071284	WITHOUT_CLASSIFICATION	2.5448928716098828E-5	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9984243390631083	WITHOUT_CLASSIFICATION	0.0015756609368916758	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998528211822	WITHOUT_CLASSIFICATION	1.4717881777733259E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999802468982594	WITHOUT_CLASSIFICATION	1.9753101740645214E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999998280557495	WITHOUT_CLASSIFICATION	1.719442504218229E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999739206881545	WITHOUT_CLASSIFICATION	2.6079311845564514E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999998691050555	WITHOUT_CLASSIFICATION	1.308949445163293E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999998789238451	WITHOUT_CLASSIFICATION	1.2107615493142387E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999998526549677	WITHOUT_CLASSIFICATION	1.4734503240289555E-7	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999872123102	WITHOUT_CLASSIFICATION	1.278768984984229E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999974183538	WITHOUT_CLASSIFICATION	2.5816462016614243E-8	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999976658049226	WITHOUT_CLASSIFICATION	2.334195077525896E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.999995687714129	WITHOUT_CLASSIFICATION	4.312285871019765E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999999959966213	WITHOUT_CLASSIFICATION	4.003378756647608E-9	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999357436972	WITHOUT_CLASSIFICATION	6.425630283329578E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999644278436	WITHOUT_CLASSIFICATION	3.557215643908893E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999795715304	WITHOUT_CLASSIFICATION	2.0428469637192965E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9957760043623923	WITHOUT_CLASSIFICATION	0.0042239956376075955	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999984608489316	WITHOUT_CLASSIFICATION	1.5391510683151204E-6	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998181625144372	WITHOUT_CLASSIFICATION	1.8183748556285776E-4	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999569688028705	WITHOUT_CLASSIFICATION	4.303119712939515E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9697548955821774	WITHOUT_CLASSIFICATION	0.030245104417822577	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999949350394836	WITHOUT_CLASSIFICATION	5.064960516447003E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998862421561102	WITHOUT_CLASSIFICATION	1.1375784388979332E-4	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999407992972	WITHOUT_CLASSIFICATION	5.920070274022283E-8	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999993980280534	WITHOUT_CLASSIFICATION	6.019719465847931E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999751765417924	WITHOUT_CLASSIFICATION	2.4823458207608513E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998863387493	WITHOUT_CLASSIFICATION	1.1366125076250112E-7	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999560510777	WITHOUT_CLASSIFICATION	4.3948922224078656E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999975655373783	WITHOUT_CLASSIFICATION	2.4344626216729677E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998863387493	WITHOUT_CLASSIFICATION	1.1366125076250112E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999751765417924	WITHOUT_CLASSIFICATION	2.4823458207608513E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999560510777	WITHOUT_CLASSIFICATION	4.3948922224078656E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999998062435071	WITHOUT_CLASSIFICATION	1.9375649276899034E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999860519359	WITHOUT_CLASSIFICATION	1.3948064130166032E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999997451548347	WITHOUT_CLASSIFICATION	2.5484516530641904E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999798491816979	WITHOUT_CLASSIFICATION	2.0150818302108862E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999996523426726	WITHOUT_CLASSIFICATION	3.4765732739984293E-7	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8075863644163759	DEFECT	0.19241363558362415	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9997665065021853	WITHOUT_CLASSIFICATION	2.334934978146295E-4	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999983397424004	WITHOUT_CLASSIFICATION	1.6602575996033684E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999983471607	WITHOUT_CLASSIFICATION	1.6528392344350032E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999179812572713	WITHOUT_CLASSIFICATION	8.201874272877448E-5	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999944276415704	WITHOUT_CLASSIFICATION	5.57235842952064E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999989010712935	WITHOUT_CLASSIFICATION	1.0989287065390409E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999770757888635	WITHOUT_CLASSIFICATION	2.2924211136495087E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999814787515143	WITHOUT_CLASSIFICATION	1.8521248485687993E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997573007036	WITHOUT_CLASSIFICATION	2.4269929648553163E-7	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994007471121	WITHOUT_CLASSIFICATION	5.992528878721588E-7	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994153038194	WITHOUT_CLASSIFICATION	5.846961806105649E-7	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999999959879719	WITHOUT_CLASSIFICATION	4.0120281022399156E-8	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999996455570331	WITHOUT_CLASSIFICATION	3.5444296683360054E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999974432733	WITHOUT_CLASSIFICATION	2.5567267809069997E-9	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999923316096959	WITHOUT_CLASSIFICATION	7.668390304137866E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999995996908	WITHOUT_CLASSIFICATION	4.0030924178875415E-10	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999615161646146	WITHOUT_CLASSIFICATION	3.848383538541406E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999981317017	WITHOUT_CLASSIFICATION	1.868298247350063E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999989471128	WITHOUT_CLASSIFICATION	1.0528872075327E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999989471128	WITHOUT_CLASSIFICATION	1.0528872075327E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968393356	WITHOUT_CLASSIFICATION	3.1606644181040846E-9	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999968393356	WITHOUT_CLASSIFICATION	3.1606644181040846E-9	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999979847376815	WITHOUT_CLASSIFICATION	2.0152623183763307E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999994153038194	WITHOUT_CLASSIFICATION	5.846961806105649E-7	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999924857766	WITHOUT_CLASSIFICATION	7.514223393563774E-9	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999997809033	WITHOUT_CLASSIFICATION	2.1909661987383992E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999709764026	WITHOUT_CLASSIFICATION	2.902359742947141E-8	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999999709764026	WITHOUT_CLASSIFICATION	2.902359742947141E-8	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999990153694382	WITHOUT_CLASSIFICATION	9.84630561677514E-7	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999998753580673	WITHOUT_CLASSIFICATION	1.2464193266684334E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999999997816412	WITHOUT_CLASSIFICATION	2.1835880096228647E-9	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999999171492842	WITHOUT_CLASSIFICATION	8.28507159015558E-8	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9991341212387992	WITHOUT_CLASSIFICATION	8.658787612008177E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9850249245967603	WITHOUT_CLASSIFICATION	0.014975075403239738	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999848209855489	WITHOUT_CLASSIFICATION	1.517901445117094E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999950171340956	WITHOUT_CLASSIFICATION	4.982865904424714E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.999986221919683	WITHOUT_CLASSIFICATION	1.377808031710507E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999987206035693	WITHOUT_CLASSIFICATION	1.2793964307517415E-6	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999975285881905	WITHOUT_CLASSIFICATION	2.471411809593305E-6	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999979367507762	WITHOUT_CLASSIFICATION	2.063249223735865E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996556924943	WITHOUT_CLASSIFICATION	3.4430750575466013E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999995466113341	WITHOUT_CLASSIFICATION	4.5338866594482755E-7	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999285337984	WITHOUT_CLASSIFICATION	7.14662016599777E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999997869209465	WITHOUT_CLASSIFICATION	2.1307905344794155E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709868454	WITHOUT_CLASSIFICATION	1.3290131546507656E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999996486549132	WITHOUT_CLASSIFICATION	3.513450868184172E-7	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999997506254645	WITHOUT_CLASSIFICATION	2.4937453551873113E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999979249940705	WITHOUT_CLASSIFICATION	2.075005929614569E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999995412295286	WITHOUT_CLASSIFICATION	4.587704713668397E-7	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999961732700775	WITHOUT_CLASSIFICATION	3.826729922543318E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999996546037124	WITHOUT_CLASSIFICATION	3.453962875136001E-7	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999999835262491	WITHOUT_CLASSIFICATION	1.6473750893006784E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.999991958999284	WITHOUT_CLASSIFICATION	8.041000716124525E-6	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999914322131	WITHOUT_CLASSIFICATION	8.567786832686681E-9	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999802468982594	WITHOUT_CLASSIFICATION	1.9753101740645214E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999983904495104	WITHOUT_CLASSIFICATION	1.6095504894859001E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998463153198226	WITHOUT_CLASSIFICATION	1.5368468017745273E-4	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987358814839	WITHOUT_CLASSIFICATION	1.2641185159881182E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935841124058	WITHOUT_CLASSIFICATION	6.415887594201463E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999977285339533	WITHOUT_CLASSIFICATION	2.2714660466030447E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999977285339533	WITHOUT_CLASSIFICATION	2.2714660466030447E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999910575278412	WITHOUT_CLASSIFICATION	8.942472158750322E-6	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999971906160121	WITHOUT_CLASSIFICATION	2.8093839879000227E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999231753507402	WITHOUT_CLASSIFICATION	7.682464925984793E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999231753507402	WITHOUT_CLASSIFICATION	7.682464925984793E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999840989046367	WITHOUT_CLASSIFICATION	1.5901095363331258E-5	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999851272770092	WITHOUT_CLASSIFICATION	1.4872722990942974E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999180718927589	WITHOUT_CLASSIFICATION	8.192810724117016E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078491958	WITHOUT_CLASSIFICATION	7.92150804223452E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999990996020666	WITHOUT_CLASSIFICATION	9.003979335235165E-7	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999973576721954	WITHOUT_CLASSIFICATION	2.6423278044855626E-6	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999998400138441	WITHOUT_CLASSIFICATION	1.5998615597946996E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999988854840071	WITHOUT_CLASSIFICATION	1.1145159929640837E-6	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999812466704983	WITHOUT_CLASSIFICATION	1.875332950169269E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999812466704983	WITHOUT_CLASSIFICATION	1.875332950169269E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999990789528727	WITHOUT_CLASSIFICATION	9.210471273888097E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998629591978	WITHOUT_CLASSIFICATION	1.3704080207710177E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999998629591978	WITHOUT_CLASSIFICATION	1.3704080207710177E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999954599815865	WITHOUT_CLASSIFICATION	4.54001841347552E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999190817269	WITHOUT_CLASSIFICATION	8.091827310807423E-8	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.998095054141475	WITHOUT_CLASSIFICATION	0.001904945858524919	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998730381623	WITHOUT_CLASSIFICATION	1.2696183773141966E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998883648965	WITHOUT_CLASSIFICATION	1.1163510352110093E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998936464187	WITHOUT_CLASSIFICATION	1.0635358132269404E-7	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999717523772	WITHOUT_CLASSIFICATION	2.8247622783208324E-8	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999996300600026	WITHOUT_CLASSIFICATION	3.6993999742179634E-7	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999831694865	WITHOUT_CLASSIFICATION	1.6830513558581082E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9900929470142537	WITHOUT_CLASSIFICATION	0.009907052985746385	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999942215798212	WITHOUT_CLASSIFICATION	5.778420178763973E-6	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999977088228269	WITHOUT_CLASSIFICATION	2.291177173161936E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914979752381	WITHOUT_CLASSIFICATION	8.502024761907036E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914979752381	WITHOUT_CLASSIFICATION	8.502024761907036E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914979752381	WITHOUT_CLASSIFICATION	8.502024761907036E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999914979752381	WITHOUT_CLASSIFICATION	8.502024761907036E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999944720808696	WITHOUT_CLASSIFICATION	5.527919130400055E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9859103687149964	WITHOUT_CLASSIFICATION	0.014089631285003686	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999970033413633	WITHOUT_CLASSIFICATION	2.99665863673408E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999940566552571	WITHOUT_CLASSIFICATION	5.943344742864941E-6	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999529249128	WITHOUT_CLASSIFICATION	4.7075087272099515E-8	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999045174222011	WITHOUT_CLASSIFICATION	9.548257779885537E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999999817309631	WITHOUT_CLASSIFICATION	1.8269036904222493E-7	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999979612814067	WITHOUT_CLASSIFICATION	2.0387185933295073E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999960667133	WITHOUT_CLASSIFICATION	3.933286643565574E-9	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998333893331	WITHOUT_CLASSIFICATION	1.6661066686574845E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999995351068293	WITHOUT_CLASSIFICATION	4.648931706978627E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923771447923	WITHOUT_CLASSIFICATION	7.6228552077851565E-6	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999903435771377	WITHOUT_CLASSIFICATION	9.656422862341677E-6	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.999999313341551	WITHOUT_CLASSIFICATION	6.866584489757927E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999994066910051	WITHOUT_CLASSIFICATION	5.933089949090591E-7	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923771447923	WITHOUT_CLASSIFICATION	7.6228552077851565E-6	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999431838875001	WITHOUT_CLASSIFICATION	5.6816112499901375E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999599464001797	WITHOUT_CLASSIFICATION	4.0053599820340184E-5	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999979015084584	WITHOUT_CLASSIFICATION	2.0984915416300375E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999977894201216	WITHOUT_CLASSIFICATION	2.2105798783718527E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999531419965192	WITHOUT_CLASSIFICATION	4.685800348086864E-5	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999389639613254	WITHOUT_CLASSIFICATION	6.10360386746637E-5	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999998863732443	WITHOUT_CLASSIFICATION	1.1362675574018117E-7	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999833746413088	WITHOUT_CLASSIFICATION	1.6625358691195907E-5	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999804741693	WITHOUT_CLASSIFICATION	1.9525830699760494E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998461807447	WITHOUT_CLASSIFICATION	1.5381925533394516E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999905680478	WITHOUT_CLASSIFICATION	9.431952324195259E-9	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999998662483609	WITHOUT_CLASSIFICATION	1.3375163914611507E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9964311558458806	WITHOUT_CLASSIFICATION	0.003568844154119473	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999973455592244	WITHOUT_CLASSIFICATION	2.6544407756142405E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994862046491	WITHOUT_CLASSIFICATION	5.137953508859999E-7	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9998566830976929	WITHOUT_CLASSIFICATION	1.4331690230703784E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999931194887	WITHOUT_CLASSIFICATION	6.880511346871599E-9	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999601387086583	WITHOUT_CLASSIFICATION	3.9861291341690976E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999534886113	WITHOUT_CLASSIFICATION	4.651138864136242E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999601387086583	WITHOUT_CLASSIFICATION	3.9861291341690976E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999464188523	WITHOUT_CLASSIFICATION	5.3581147770327323E-8	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999215251988	WITHOUT_CLASSIFICATION	7.847480120446483E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999479530617384	WITHOUT_CLASSIFICATION	5.2046938261545555E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999996595041295	WITHOUT_CLASSIFICATION	3.4049587058540857E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999931194887	WITHOUT_CLASSIFICATION	6.880511346871599E-9	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999534886113	WITHOUT_CLASSIFICATION	4.651138864136242E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999464188523	WITHOUT_CLASSIFICATION	5.3581147770327323E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999065432718	WITHOUT_CLASSIFICATION	9.345672830126224E-8	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999625036766647	WITHOUT_CLASSIFICATION	3.7496323335291695E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.9999953465984879	WITHOUT_CLASSIFICATION	4.6534015121412594E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999870852188274	WITHOUT_CLASSIFICATION	1.2914781172697963E-5	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994946223608826	WITHOUT_CLASSIFICATION	5.053776391174264E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999970806999	WITHOUT_CLASSIFICATION	2.919300010516658E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709868454	WITHOUT_CLASSIFICATION	1.3290131546507656E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999999215251988	WITHOUT_CLASSIFICATION	7.847480120446483E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999992134359296	WITHOUT_CLASSIFICATION	7.865640704609408E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9978269931002332	WITHOUT_CLASSIFICATION	0.0021730068997668837	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999999282968682	WITHOUT_CLASSIFICATION	7.170313183627243E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709868454	WITHOUT_CLASSIFICATION	1.3290131546507656E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999999935291001	WITHOUT_CLASSIFICATION	6.470899908916244E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709868454	WITHOUT_CLASSIFICATION	1.3290131546507656E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999988388124	WITHOUT_CLASSIFICATION	1.1611876276040056E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996589269462	WITHOUT_CLASSIFICATION	3.410730538268469E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9982895601452434	WITHOUT_CLASSIFICATION	0.0017104398547566914	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999682278311	WITHOUT_CLASSIFICATION	3.1772168822701756E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999998813967212	WITHOUT_CLASSIFICATION	1.1860327862148199E-7	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999988321591479	WITHOUT_CLASSIFICATION	1.16784085217021E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999939384813639	WITHOUT_CLASSIFICATION	6.061518636104362E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999902048153688	WITHOUT_CLASSIFICATION	9.79518463116501E-6	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998959624291	WITHOUT_CLASSIFICATION	1.0403757080465471E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999963715314414	WITHOUT_CLASSIFICATION	3.6284685586814894E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999677054480484	WITHOUT_CLASSIFICATION	3.229455195162183E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.999999172858249	WITHOUT_CLASSIFICATION	8.271417509901602E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.998095054141475	WITHOUT_CLASSIFICATION	0.001904945858524919	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999934102494179	WITHOUT_CLASSIFICATION	6.589750582121075E-6	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9951209559360924	WITHOUT_CLASSIFICATION	0.004879044063907521	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999992782987784	WITHOUT_CLASSIFICATION	7.217012215372579E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998699078525656	WITHOUT_CLASSIFICATION	1.300921474343593E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999997169251775	WITHOUT_CLASSIFICATION	2.830748224964863E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999039811488	WITHOUT_CLASSIFICATION	9.60188511955015E-8	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998241170197505	WITHOUT_CLASSIFICATION	1.758829802494148E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9997257929856315	WITHOUT_CLASSIFICATION	2.7420701436859637E-4	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999938398233	WITHOUT_CLASSIFICATION	6.160176663401955E-9	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999953233957777	WITHOUT_CLASSIFICATION	4.676604222300533E-6	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9979630735213691	WITHOUT_CLASSIFICATION	0.00203692647863089	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985204407878607	WITHOUT_CLASSIFICATION	0.0014795592121392923	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9995437436948293	WITHOUT_CLASSIFICATION	4.562563051707002E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999730026697	WITHOUT_CLASSIFICATION	2.6997330214279834E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999999912612958	WITHOUT_CLASSIFICATION	8.738704204873879E-8	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999518495986599	WITHOUT_CLASSIFICATION	4.815040134003213E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999977482982012	WITHOUT_CLASSIFICATION	2.2517017987413007E-6	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999990728090592	WITHOUT_CLASSIFICATION	9.271909407775907E-7	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999957212581926	WITHOUT_CLASSIFICATION	4.278741807377298E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999984276544222	WITHOUT_CLASSIFICATION	1.5723455779418928E-6	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9996480511736423	WITHOUT_CLASSIFICATION	3.519488263576111E-4	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9997857045270508	WITHOUT_CLASSIFICATION	2.14295472949203E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999030482574	WITHOUT_CLASSIFICATION	9.695174254071088E-8	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999906103045113	WITHOUT_CLASSIFICATION	9.38969548874877E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999969791123513	WITHOUT_CLASSIFICATION	3.0208876487593153E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999885470291335	WITHOUT_CLASSIFICATION	1.1452970866499963E-5	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999925808506908	WITHOUT_CLASSIFICATION	7.419149309221931E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989488764060808	WITHOUT_CLASSIFICATION	0.0010511235939192557	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995932593683	WITHOUT_CLASSIFICATION	4.0674063175413436E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999902922538267	WITHOUT_CLASSIFICATION	9.707746173195694E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999903413519863	WITHOUT_CLASSIFICATION	9.658648013845847E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999903413519863	WITHOUT_CLASSIFICATION	9.658648013845847E-6	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9996957058434817	WITHOUT_CLASSIFICATION	3.042941565183835E-4	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999902048153688	WITHOUT_CLASSIFICATION	9.79518463116501E-6	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999388800907321	WITHOUT_CLASSIFICATION	6.11199092679845E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999891150169	WITHOUT_CLASSIFICATION	1.0884983190765654E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999435046684543	WITHOUT_CLASSIFICATION	5.649533154562255E-5	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999900631316343	WITHOUT_CLASSIFICATION	9.936868365621726E-6	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999930222863471	WITHOUT_CLASSIFICATION	6.977713652753034E-6	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999781749568954	WITHOUT_CLASSIFICATION	2.1825043104516703E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999992257809626	WITHOUT_CLASSIFICATION	7.742190373904725E-6	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999961145548	WITHOUT_CLASSIFICATION	3.885445193840737E-9	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999985420901571	WITHOUT_CLASSIFICATION	1.4579098429187878E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999993862923264	WITHOUT_CLASSIFICATION	6.137076734885312E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999998232391815	WITHOUT_CLASSIFICATION	1.7676081862648085E-7	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999650089588	WITHOUT_CLASSIFICATION	3.499104113204442E-8	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999250069573	WITHOUT_CLASSIFICATION	7.499304268032541E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999059718382	WITHOUT_CLASSIFICATION	9.40281617391108E-8	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997242189522	WITHOUT_CLASSIFICATION	2.7578104776119726E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999893258518	WITHOUT_CLASSIFICATION	1.0674148186768653E-8	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999966922223	WITHOUT_CLASSIFICATION	3.3077776446924337E-9	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999998341226062	WITHOUT_CLASSIFICATION	1.6587739385758578E-7	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998603334393	WITHOUT_CLASSIFICATION	1.3966656065409578E-7	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999914269591371	WITHOUT_CLASSIFICATION	8.573040862912754E-6	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999990705665008	WITHOUT_CLASSIFICATION	9.29433499046638E-7	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999857351281582	WITHOUT_CLASSIFICATION	1.426487184167564E-5	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9989488764060808	WITHOUT_CLASSIFICATION	0.0010511235939192557	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999987286132955	WITHOUT_CLASSIFICATION	1.271386704481334E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999242878386297	WITHOUT_CLASSIFICATION	7.5712161370224E-5	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999979475667322	WITHOUT_CLASSIFICATION	2.0524332677233705E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999854056850044	WITHOUT_CLASSIFICATION	1.4594314995581632E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9987198298607471	WITHOUT_CLASSIFICATION	0.001280170139252871	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999984934353049	WITHOUT_CLASSIFICATION	1.5065646951461755E-6	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999980631115755	WITHOUT_CLASSIFICATION	1.936888424504255E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999696355241	WITHOUT_CLASSIFICATION	3.036447587053898E-8	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998673740386	WITHOUT_CLASSIFICATION	1.3262596133544972E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995592619357	WITHOUT_CLASSIFICATION	4.407380642887152E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999175223812	WITHOUT_CLASSIFICATION	8.247761887193176E-8	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999970209690731	WITHOUT_CLASSIFICATION	2.979030926893569E-6	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991590152215422	WITHOUT_CLASSIFICATION	8.409847784577244E-4	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9934819643753219	WITHOUT_CLASSIFICATION	0.006518035624678086	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999975950316	WITHOUT_CLASSIFICATION	2.404968465478553E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999975950316	WITHOUT_CLASSIFICATION	2.404968465478553E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999982336124063	WITHOUT_CLASSIFICATION	1.766387593702067E-5	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999962470352	WITHOUT_CLASSIFICATION	3.7529648544658564E-9	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9990334379696639	WITHOUT_CLASSIFICATION	9.665620303361725E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9990334379696639	WITHOUT_CLASSIFICATION	9.665620303361725E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999922618882	WITHOUT_CLASSIFICATION	7.738111778081994E-9	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999487117435453	WITHOUT_CLASSIFICATION	5.128825645480907E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999092657807201	WITHOUT_CLASSIFICATION	9.073421927979052E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999997602964	WITHOUT_CLASSIFICATION	2.3970354969258107E-10	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995117421107	WITHOUT_CLASSIFICATION	4.882578893259479E-7	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999966635790585	WITHOUT_CLASSIFICATION	3.3364209414615444E-6	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997177045111	WITHOUT_CLASSIFICATION	2.8229548878232066E-7	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997177045111	WITHOUT_CLASSIFICATION	2.8229548878232066E-7	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999998922896806	WITHOUT_CLASSIFICATION	1.077103194022911E-6	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999995230531769	WITHOUT_CLASSIFICATION	4.769468231036829E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999994238213911	WITHOUT_CLASSIFICATION	5.761786088205181E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931435489905	WITHOUT_CLASSIFICATION	6.856451009463668E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999931435489905	WITHOUT_CLASSIFICATION	6.856451009463668E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999993179277495	WITHOUT_CLASSIFICATION	6.820722505011204E-7	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999990447705746	WITHOUT_CLASSIFICATION	9.552294254490313E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998395095994799	WITHOUT_CLASSIFICATION	1.6049040052005704E-4	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999858505857	WITHOUT_CLASSIFICATION	1.4149414198047193E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999929139465878	WITHOUT_CLASSIFICATION	7.086053412139377E-6	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999675902387	WITHOUT_CLASSIFICATION	3.2409761347634376E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999820994250966	WITHOUT_CLASSIFICATION	1.7900574903324993E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.999999727265496	WITHOUT_CLASSIFICATION	2.727345040538932E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999962579044	WITHOUT_CLASSIFICATION	3.742095616736138E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999906698405712	WITHOUT_CLASSIFICATION	9.330159428762E-6	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999988230194491	WITHOUT_CLASSIFICATION	1.176980550974287E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9996647708547415	WITHOUT_CLASSIFICATION	3.3522914525857376E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.999999847885318	WITHOUT_CLASSIFICATION	1.521146819359203E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999984110237635	WITHOUT_CLASSIFICATION	1.58897623650444E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999994800295856	WITHOUT_CLASSIFICATION	5.199704143176256E-7	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999811596086503	WITHOUT_CLASSIFICATION	1.884039134971015E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999999969494477	WITHOUT_CLASSIFICATION	3.050552292748411E-8	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999992457454049	WITHOUT_CLASSIFICATION	7.542545951072857E-6	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999892348256604	WITHOUT_CLASSIFICATION	1.0765174339601357E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999985505628882	WITHOUT_CLASSIFICATION	1.4494371118252425E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999963063897375	WITHOUT_CLASSIFICATION	3.693610262640865E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999913668701695	WITHOUT_CLASSIFICATION	8.63312983040253E-6	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999970956209634	WITHOUT_CLASSIFICATION	2.9043790366264354E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999889845270171	WITHOUT_CLASSIFICATION	1.1015472982841096E-5	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999883973885778	WITHOUT_CLASSIFICATION	1.1602611422198541E-5	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999974330393856	WITHOUT_CLASSIFICATION	2.566960614404385E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999997268640929	WITHOUT_CLASSIFICATION	2.7313590712517225E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999981820184968	WITHOUT_CLASSIFICATION	1.8179815032066024E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999998384379	WITHOUT_CLASSIFICATION	1.61562170483968E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999997511718873	WITHOUT_CLASSIFICATION	2.4882811270572E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9828379455920822	WITHOUT_CLASSIFICATION	0.017162054407917893	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999999760423581	WITHOUT_CLASSIFICATION	2.3957641885886362E-8	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999999723977481	WITHOUT_CLASSIFICATION	2.7602251995536102E-8	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999918088543714	WITHOUT_CLASSIFICATION	8.191145628543882E-6	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999996788503067	WITHOUT_CLASSIFICATION	3.211496933187409E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999799799861351	WITHOUT_CLASSIFICATION	2.0020013864896042E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.999985167878335	WITHOUT_CLASSIFICATION	1.4832121664927576E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999997433924603	WITHOUT_CLASSIFICATION	2.566075397409605E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999997834294659	WITHOUT_CLASSIFICATION	2.1657053412758375E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999996911557849	WITHOUT_CLASSIFICATION	3.088442151063402E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999459516187195	WITHOUT_CLASSIFICATION	5.404838128060727E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9973635871690203	WITHOUT_CLASSIFICATION	0.002636412830979682	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999984771412963	WITHOUT_CLASSIFICATION	1.5228587036625958E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999998775422688	WITHOUT_CLASSIFICATION	1.2245773114827796E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999994225273235	WITHOUT_CLASSIFICATION	5.774726765535475E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999982122625531	WITHOUT_CLASSIFICATION	1.7877374468474075E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9996151125791689	WITHOUT_CLASSIFICATION	3.848874208310343E-4	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999992333221914	WITHOUT_CLASSIFICATION	7.666778085547085E-7	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999968125007539	WITHOUT_CLASSIFICATION	3.1874992461770472E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999373953996	WITHOUT_CLASSIFICATION	6.260460048155929E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998746947390508	WITHOUT_CLASSIFICATION	1.2530526094920344E-4	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999998942862033	WITHOUT_CLASSIFICATION	1.0571379659332439E-7	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998146171167	WITHOUT_CLASSIFICATION	1.8538288325746412E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999995706518	WITHOUT_CLASSIFICATION	4.2934819511839317E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999194313708704	WITHOUT_CLASSIFICATION	8.056862912963084E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999996301034677	WITHOUT_CLASSIFICATION	3.6989653228482247E-7	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9993117453199756	WITHOUT_CLASSIFICATION	6.882546800244496E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999967199228547	WITHOUT_CLASSIFICATION	3.280077145346832E-6	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.999856281080813	WITHOUT_CLASSIFICATION	1.4371891918695272E-4	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999990843187051	WITHOUT_CLASSIFICATION	9.156812949439141E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999964493308942	WITHOUT_CLASSIFICATION	3.5506691059608227E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999964493308942	WITHOUT_CLASSIFICATION	3.5506691059608227E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999903921765	WITHOUT_CLASSIFICATION	9.607823558967774E-9	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999964204313918	WITHOUT_CLASSIFICATION	3.5795686080892837E-6	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999999727855	WITHOUT_CLASSIFICATION	2.7214431646712076E-11	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999986105269	WITHOUT_CLASSIFICATION	1.3894730057781437E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999628347576779	WITHOUT_CLASSIFICATION	3.7165242322119816E-5	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995501381413	WITHOUT_CLASSIFICATION	4.4986185860760315E-7	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999977758571	WITHOUT_CLASSIFICATION	2.2241428958610243E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999980173433	WITHOUT_CLASSIFICATION	1.9826566824785275E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999617780008675	WITHOUT_CLASSIFICATION	3.8221999132439956E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999775613752454	WITHOUT_CLASSIFICATION	2.2438624754495073E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999952270416039	WITHOUT_CLASSIFICATION	4.772958396069807E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999778340313195	WITHOUT_CLASSIFICATION	2.216596868050535E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981072968979	WITHOUT_CLASSIFICATION	1.89270310225204E-6	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999999000375	WITHOUT_CLASSIFICATION	9.996249864646039E-11	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999890006906	WITHOUT_CLASSIFICATION	1.099930940362081E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999890006906	WITHOUT_CLASSIFICATION	1.099930940362081E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999998627777922	WITHOUT_CLASSIFICATION	1.3722220776854856E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995248371584078	WITHOUT_CLASSIFICATION	4.751628415920971E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999900465225	WITHOUT_CLASSIFICATION	9.953477497861932E-9	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998761141694	WITHOUT_CLASSIFICATION	1.23885830600613E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999695473227	WITHOUT_CLASSIFICATION	3.0452677295656944E-8	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996777245465	WITHOUT_CLASSIFICATION	3.2227545357608963E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999972669524303	WITHOUT_CLASSIFICATION	2.733047569672011E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9966894972105416	WITHOUT_CLASSIFICATION	0.0033105027894584508	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999999637245	WITHOUT_CLASSIFICATION	3.627551790804123E-11	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999124347472	WITHOUT_CLASSIFICATION	8.756525289766551E-8	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999927706804	WITHOUT_CLASSIFICATION	7.229319626685761E-9	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999187079911	WITHOUT_CLASSIFICATION	8.129200893354303E-8	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999595682671	WITHOUT_CLASSIFICATION	4.043173295877491E-8	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999647394633	WITHOUT_CLASSIFICATION	3.52605367560144E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999983957743955	WITHOUT_CLASSIFICATION	1.6042256044315033E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998494223415819	WITHOUT_CLASSIFICATION	1.505776584180971E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999999728322402	WITHOUT_CLASSIFICATION	2.7167759797013443E-8	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999987773189253	WITHOUT_CLASSIFICATION	1.2226810747456979E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999968913587828	WITHOUT_CLASSIFICATION	3.1086412171454234E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999419133834	WITHOUT_CLASSIFICATION	5.808661668692699E-8	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999974986066956	WITHOUT_CLASSIFICATION	2.5013933042974993E-6	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998400955318	WITHOUT_CLASSIFICATION	1.599044682918921E-7	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999999605194398	WITHOUT_CLASSIFICATION	3.948056013513936E-8	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999997954385197	WITHOUT_CLASSIFICATION	2.0456148025682803E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.996806706952108	WITHOUT_CLASSIFICATION	0.0031932930478919775	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998913837268816	WITHOUT_CLASSIFICATION	1.0861627311846973E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999924713940513	WITHOUT_CLASSIFICATION	7.528605948722549E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999741824714326	WITHOUT_CLASSIFICATION	2.581752856740143E-4	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999625945518	WITHOUT_CLASSIFICATION	3.740544827630705E-8	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999846052588	WITHOUT_CLASSIFICATION	1.5394741213769866E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999985819458691	WITHOUT_CLASSIFICATION	1.4180541308204516E-6	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999162734982137	WITHOUT_CLASSIFICATION	8.37265017863293E-5	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999987722417	WITHOUT_CLASSIFICATION	1.2277583846599914E-9	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999963530076522	WITHOUT_CLASSIFICATION	3.646992347659364E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999202069272872	WITHOUT_CLASSIFICATION	7.979307271280003E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998650103272	WITHOUT_CLASSIFICATION	1.349896727979871E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999999620226849	WITHOUT_CLASSIFICATION	3.7977315015911297E-8	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999867206428	WITHOUT_CLASSIFICATION	1.3279357235385869E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999710660453683	WITHOUT_CLASSIFICATION	2.893395463163618E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999936257448022	WITHOUT_CLASSIFICATION	6.374255197802267E-6	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999359955932372	WITHOUT_CLASSIFICATION	6.40044067628778E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9999359955932372	WITHOUT_CLASSIFICATION	6.40044067628778E-5	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999960857028	WITHOUT_CLASSIFICATION	3.914297275061131E-9	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999073427724962	WITHOUT_CLASSIFICATION	9.265722750390451E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999986323306412	WITHOUT_CLASSIFICATION	1.3676693587965728E-5	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999877813030538	WITHOUT_CLASSIFICATION	1.2218696946137399E-5	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999999065889357	WITHOUT_CLASSIFICATION	9.341106429328775E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999996174929603	WITHOUT_CLASSIFICATION	3.8250703967815354E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998122916068346	WITHOUT_CLASSIFICATION	1.8770839316532088E-4	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999999989247647	WITHOUT_CLASSIFICATION	1.0752353018369823E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9983378023351214	WITHOUT_CLASSIFICATION	0.0016621976648787077	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997958691101	WITHOUT_CLASSIFICATION	2.0413088990938406E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999939186063	WITHOUT_CLASSIFICATION	6.081393698602676E-8	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999806861265972	WITHOUT_CLASSIFICATION	1.931387340282425E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9998864185985544	WITHOUT_CLASSIFICATION	1.1358140144561798E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999859016382	WITHOUT_CLASSIFICATION	1.4098361758036857E-8	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999993202607144	WITHOUT_CLASSIFICATION	6.797392855918405E-7	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999998990681461	WITHOUT_CLASSIFICATION	1.0093185384908386E-7	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.998970461328578	WITHOUT_CLASSIFICATION	0.0010295386714219094	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999989966099381	WITHOUT_CLASSIFICATION	1.0033900619814775E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999536606296562	WITHOUT_CLASSIFICATION	4.633937034375132E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999947464047338	WITHOUT_CLASSIFICATION	5.253595266149917E-6	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9998924863742369	WITHOUT_CLASSIFICATION	1.0751362576315898E-4	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999988167298084	WITHOUT_CLASSIFICATION	1.183270191617949E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999997082386	WITHOUT_CLASSIFICATION	2.917613705076928E-10	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997484703013427	WITHOUT_CLASSIFICATION	2.5152969865723055E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999688088426074	WITHOUT_CLASSIFICATION	3.119115739263062E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999510659274168	WITHOUT_CLASSIFICATION	4.89340725832627E-5	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999996138092911	WITHOUT_CLASSIFICATION	3.86190708832031E-7	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999179504537	WITHOUT_CLASSIFICATION	8.204954634488813E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999998292293486	WITHOUT_CLASSIFICATION	1.7077065139480844E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999565462197241	WITHOUT_CLASSIFICATION	4.3453780275858545E-5	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998252149522	WITHOUT_CLASSIFICATION	1.7478504774842478E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999990274349689	WITHOUT_CLASSIFICATION	9.725650310689029E-7	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999972078258	WITHOUT_CLASSIFICATION	2.7921740906077417E-9	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999994181423156	WITHOUT_CLASSIFICATION	5.818576843902713E-7	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999999998644572	WITHOUT_CLASSIFICATION	1.355427962650544E-9	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.99999794878516	WITHOUT_CLASSIFICATION	2.0512148399462917E-6	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999696474697	WITHOUT_CLASSIFICATION	3.035253031945006E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999933177731	WITHOUT_CLASSIFICATION	6.682226842613325E-9	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.999985933981113	WITHOUT_CLASSIFICATION	1.4066018887012577E-5	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999951417730756	WITHOUT_CLASSIFICATION	4.858226924480801E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999994802523948	WITHOUT_CLASSIFICATION	5.197476051697653E-7	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998111789085511	WITHOUT_CLASSIFICATION	1.8882109144885686E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999956731812	WITHOUT_CLASSIFICATION	4.3268188419864874E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999987340731	WITHOUT_CLASSIFICATION	1.2659268860063885E-9	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999811118575	WITHOUT_CLASSIFICATION	1.8888142530177515E-8	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9997925371097175	WITHOUT_CLASSIFICATION	2.0746289028257843E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999979654700377	WITHOUT_CLASSIFICATION	2.0345299622971915E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999981072968979	WITHOUT_CLASSIFICATION	1.89270310225204E-6	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999065640091	WITHOUT_CLASSIFICATION	9.343599085839879E-8	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.99999999987715	WITHOUT_CLASSIFICATION	1.2284992830660846E-10	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999609959852523	WITHOUT_CLASSIFICATION	3.90040147476986E-5	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999999142987441	WITHOUT_CLASSIFICATION	8.570125589225019E-8	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999990075538	WITHOUT_CLASSIFICATION	9.924462914171761E-10	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999800213535598	WITHOUT_CLASSIFICATION	1.9978646440184616E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999764275396505	WITHOUT_CLASSIFICATION	2.3572460349453707E-5	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999835982107732	WITHOUT_CLASSIFICATION	1.640178922673656E-5	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999814790785	WITHOUT_CLASSIFICATION	1.8520921497221044E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999614499460505	WITHOUT_CLASSIFICATION	3.855005394946547E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999766545685498	WITHOUT_CLASSIFICATION	2.3345431450245245E-5	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999977441672852	WITHOUT_CLASSIFICATION	2.255832714811989E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999990325384887	WITHOUT_CLASSIFICATION	9.674615113287427E-7	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999998332427064	WITHOUT_CLASSIFICATION	1.667572935932965E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133456132	WITHOUT_CLASSIFICATION	8.665438680670874E-8	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999986011231469	WITHOUT_CLASSIFICATION	1.398876853090006E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999995759536815	WITHOUT_CLASSIFICATION	4.240463184996722E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999212870923	WITHOUT_CLASSIFICATION	7.87129076857335E-8	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999399012340818	WITHOUT_CLASSIFICATION	6.00987659181423E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999133456132	WITHOUT_CLASSIFICATION	8.665438680670874E-8	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9977274247325398	WITHOUT_CLASSIFICATION	0.0022725752674601905	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999915988607639	WITHOUT_CLASSIFICATION	8.401139235939384E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999999999435388	WITHOUT_CLASSIFICATION	5.646120121970374E-10	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999996527081494	WITHOUT_CLASSIFICATION	3.472918506118163E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999972570767892	WITHOUT_CLASSIFICATION	2.7429232107383376E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999967014879172	WITHOUT_CLASSIFICATION	3.298512082888673E-6	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999999141587	WITHOUT_CLASSIFICATION	8.584124912124061E-11	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999985820200589	WITHOUT_CLASSIFICATION	1.4179799410839914E-6	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999082410224	WITHOUT_CLASSIFICATION	9.175897769470196E-8	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995730677693152	WITHOUT_CLASSIFICATION	4.2693223068479655E-4	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999992503102797	WITHOUT_CLASSIFICATION	7.496897203088521E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999965165903197	WITHOUT_CLASSIFICATION	3.4834096803109495E-6	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999538206419945	WITHOUT_CLASSIFICATION	4.617935800552861E-5	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999999497280578	WITHOUT_CLASSIFICATION	5.027194213072541E-8	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999976236197644	WITHOUT_CLASSIFICATION	2.376380235491772E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999857351281582	WITHOUT_CLASSIFICATION	1.426487184167564E-5	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998944402703	WITHOUT_CLASSIFICATION	1.0555972980293362E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999215297315	WITHOUT_CLASSIFICATION	7.847026852289891E-8	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999893510443488	WITHOUT_CLASSIFICATION	1.0648955651310295E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998054590800193	WITHOUT_CLASSIFICATION	1.9454091998076756E-4	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999996901584	WITHOUT_CLASSIFICATION	3.0984168692985745E-10	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999990857685968	WITHOUT_CLASSIFICATION	9.142314031856976E-7	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996280369843	WITHOUT_CLASSIFICATION	3.719630157062811E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999806474	WITHOUT_CLASSIFICATION	1.935261950464135E-11	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999849319988	WITHOUT_CLASSIFICATION	1.5068001163048188E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999921620085988	WITHOUT_CLASSIFICATION	7.83799140136999E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.7042125529398624	WITHOUT_CLASSIFICATION	0.29578744706013743	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999552659781	WITHOUT_CLASSIFICATION	4.473402199533028E-8	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9988050399895045	WITHOUT_CLASSIFICATION	0.001194960010495375	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.5704753672138004	DEFECT	0.4295246327861997	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999999947518618	WITHOUT_CLASSIFICATION	5.248138202554093E-8	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9996581886808834	WITHOUT_CLASSIFICATION	3.418113191166008E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.99905351627663	WITHOUT_CLASSIFICATION	9.464837233700982E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999994738989935	WITHOUT_CLASSIFICATION	5.26101006485859E-7	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999981005113	WITHOUT_CLASSIFICATION	1.899488689877662E-9	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999821033391	WITHOUT_CLASSIFICATION	1.789666093913062E-8	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999997324008321	WITHOUT_CLASSIFICATION	2.6759916784353246E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999987768209704	WITHOUT_CLASSIFICATION	1.2231790295700827E-6	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999887092426	WITHOUT_CLASSIFICATION	1.1290757520436922E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999891030344132	WITHOUT_CLASSIFICATION	1.0896965586704815E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995381898681	WITHOUT_CLASSIFICATION	4.618101319832767E-7	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995381898681	WITHOUT_CLASSIFICATION	4.618101319832767E-7	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999855014388099	WITHOUT_CLASSIFICATION	1.4498561190010023E-5	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999994503345138	WITHOUT_CLASSIFICATION	5.496654861293741E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999373100683	WITHOUT_CLASSIFICATION	6.268993171832975E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5246673660859225	WITHOUT_CLASSIFICATION	0.4753326339140776	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078491958	WITHOUT_CLASSIFICATION	7.92150804223452E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999992078491958	WITHOUT_CLASSIFICATION	7.92150804223452E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999978212904953	WITHOUT_CLASSIFICATION	2.178709504749628E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999999943613278	WITHOUT_CLASSIFICATION	5.638672200588655E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999878126341641	WITHOUT_CLASSIFICATION	1.2187365835872708E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998533365843224	WITHOUT_CLASSIFICATION	1.4666341567767176E-4	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999999992450863	WITHOUT_CLASSIFICATION	7.549137035109925E-9	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999926541210956	WITHOUT_CLASSIFICATION	7.345878904308013E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999983627828783	WITHOUT_CLASSIFICATION	1.637217121695011E-6	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999961315742	WITHOUT_CLASSIFICATION	3.868425733253965E-9	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999946226257113	WITHOUT_CLASSIFICATION	5.3773742887718125E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994823333591	WITHOUT_CLASSIFICATION	5.176666409119309E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994823333591	WITHOUT_CLASSIFICATION	5.176666409119309E-7	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999978701397779	WITHOUT_CLASSIFICATION	2.1298602219842474E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999981317162138	WITHOUT_CLASSIFICATION	1.8682837863321892E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999117376726	WITHOUT_CLASSIFICATION	8.826232744629775E-8	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999478429918457	WITHOUT_CLASSIFICATION	5.215700815432018E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999482135973	WITHOUT_CLASSIFICATION	5.1786402726855364E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999741893383	WITHOUT_CLASSIFICATION	2.5810661683765593E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995139078022	WITHOUT_CLASSIFICATION	4.860921978122463E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999984208284	WITHOUT_CLASSIFICATION	1.579171503921739E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999500747191631	WITHOUT_CLASSIFICATION	4.992528083693216E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9999613847566292	WITHOUT_CLASSIFICATION	3.8615243370748205E-5	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999989714815289	WITHOUT_CLASSIFICATION	1.0285184709935377E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9995730677693152	WITHOUT_CLASSIFICATION	4.2693223068479655E-4	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999997482639781	WITHOUT_CLASSIFICATION	2.5173602191424826E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9993364722098661	WITHOUT_CLASSIFICATION	6.635277901338527E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999924853524376	WITHOUT_CLASSIFICATION	7.5146475624626E-6	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999999030627582	WITHOUT_CLASSIFICATION	9.69372418562017E-8	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992706461198	WITHOUT_CLASSIFICATION	7.293538801803497E-7	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999986228031607	WITHOUT_CLASSIFICATION	1.377196839340918E-6	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999986313803371	WITHOUT_CLASSIFICATION	1.3686196629945322E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999951529684	WITHOUT_CLASSIFICATION	4.847031525194231E-9	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999915927404551	WITHOUT_CLASSIFICATION	8.40725954481213E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985546701905333	WITHOUT_CLASSIFICATION	0.0014453298094666783	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9985546701905333	WITHOUT_CLASSIFICATION	0.0014453298094666783	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999923771447923	WITHOUT_CLASSIFICATION	7.6228552077851565E-6	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999193233097	WITHOUT_CLASSIFICATION	8.067669036314216E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999867803725935	WITHOUT_CLASSIFICATION	1.3219627406572286E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999982805758617	WITHOUT_CLASSIFICATION	1.719424138295338E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.9999993290123669	WITHOUT_CLASSIFICATION	6.709876331803744E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999888559291	WITHOUT_CLASSIFICATION	1.1144070975169327E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999994862046491	WITHOUT_CLASSIFICATION	5.137953508859999E-7	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999707979738843	WITHOUT_CLASSIFICATION	2.9202026115688025E-5	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999065432718	WITHOUT_CLASSIFICATION	9.345672830126224E-8	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999945036171894	WITHOUT_CLASSIFICATION	5.496382810606158E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986709868454	WITHOUT_CLASSIFICATION	1.3290131546507656E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.7132502032493492	DEFECT	0.28674979675065093	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999992926430877	WITHOUT_CLASSIFICATION	7.073569122567776E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998838774248	WITHOUT_CLASSIFICATION	1.1612257518648626E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9999997797602357	WITHOUT_CLASSIFICATION	2.2023976428460665E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999883126293	WITHOUT_CLASSIFICATION	1.1687370725493653E-8	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999985927040597	WITHOUT_CLASSIFICATION	1.4072959402541073E-6	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999983483737133	WITHOUT_CLASSIFICATION	1.651626286770983E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996901007092709	WITHOUT_CLASSIFICATION	3.0989929072920496E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9976903467955088	WITHOUT_CLASSIFICATION	0.0023096532044911363	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999981936044348	WITHOUT_CLASSIFICATION	1.8063955652189454E-6	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999994423060345	WITHOUT_CLASSIFICATION	5.576939653848486E-7	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998395095994799	WITHOUT_CLASSIFICATION	1.6049040052005704E-4	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999013416699	WITHOUT_CLASSIFICATION	9.865832997577457E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623953108	WITHOUT_CLASSIFICATION	7.376046891515284E-7	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999992623953108	WITHOUT_CLASSIFICATION	7.376046891515284E-7	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999848629501866	WITHOUT_CLASSIFICATION	1.5137049813407222E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999938132233771	WITHOUT_CLASSIFICATION	6.186776622876436E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999931344	WITHOUT_CLASSIFICATION	6.865685049368283E-12	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999982597539784	WITHOUT_CLASSIFICATION	1.7402460215262633E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999978526393004	WITHOUT_CLASSIFICATION	2.147360699615163E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9999831951730453	WITHOUT_CLASSIFICATION	1.6804826954656845E-5	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9998894509708337	WITHOUT_CLASSIFICATION	1.105490291662702E-4	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999963196467305	WITHOUT_CLASSIFICATION	3.6803532695151597E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9863677707788238	WITHOUT_CLASSIFICATION	0.013632229221176222	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9721957532997998	DEFECT	0.02780424670020025	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.5085201438195492	DEFECT	0.49147985618045065	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.7778191446005566	DEFECT	0.22218085539944343	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9934717883781972	WITHOUT_CLASSIFICATION	0.006528211621802898	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9974103303266866	WITHOUT_CLASSIFICATION	0.002589669673313391	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.9934269207573958	DEFECT	0.0065730792426042925	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9992546233888121	DEFECT	7.453766111878462E-4	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999989370424789	DEFECT	1.0629575210356626E-6	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.5712677462205766	DEFECT	0.4287322537794235	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708153564071349	DEFECT	0.229184643592865	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708153564071349	DEFECT	0.229184643592865	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9131204922211273	WITHOUT_CLASSIFICATION	0.08687950777887256	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999690684812653	WITHOUT_CLASSIFICATION	3.093151873456282E-5	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9819782814460091	DEFECT	0.01802171855399095	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999825680151435	WITHOUT_CLASSIFICATION	1.7431984856476946E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9978664938794418	WITHOUT_CLASSIFICATION	0.002133506120558078	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.8046041267927238	WITHOUT_CLASSIFICATION	0.1953958732072763	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.7061001163844927	DEFECT	0.2938998836155074	WITHOUT_CLASSIFICATION
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9939708316606102	WITHOUT_CLASSIFICATION	0.006029168339389832	DEFECT
//TODO: is this completely correct?	DEFECT	0.5051256528961738	WITHOUT_CLASSIFICATION	0.4948743471038262	DEFECT
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999666700013943	WITHOUT_CLASSIFICATION	3.3329998605784156E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.531438140489629	WITHOUT_CLASSIFICATION	0.46856185951037105	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9994720200023114	WITHOUT_CLASSIFICATION	5.279799976885913E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.97498880811886	DEFECT	0.025011191881140007	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999229632961518	DEFECT	7.70367038482361E-5	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9967469595083251	WITHOUT_CLASSIFICATION	0.003253040491674946	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.8593771755045204	WITHOUT_CLASSIFICATION	0.14062282449547953	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.5383056271292007	DEFECT	0.4616943728707993	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.8288651501753372	WITHOUT_CLASSIFICATION	0.1711348498246627	DEFECT
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.7503041595385163	WITHOUT_CLASSIFICATION	0.24969584046148374	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.7708153564071349	DEFECT	0.229184643592865	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9999692874469704	DEFECT	3.071255302953428E-5	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9090727633630027	WITHOUT_CLASSIFICATION	0.09092723663699741	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.634876705880156	WITHOUT_CLASSIFICATION	0.365123294119844	DEFECT
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9388741025948605	WITHOUT_CLASSIFICATION	0.061125897405139476	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9999925868875909	WITHOUT_CLASSIFICATION	7.413112409212878E-6	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9993991588935184	WITHOUT_CLASSIFICATION	6.008411064815764E-4	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9966005371938641	WITHOUT_CLASSIFICATION	0.0033994628061358987	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9957308379614241	DEFECT	0.004269162038575837	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.8652368938408633	WITHOUT_CLASSIFICATION	0.1347631061591367	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.9965573663773024	WITHOUT_CLASSIFICATION	0.0034426336226976166	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999395418102786	WITHOUT_CLASSIFICATION	6.045818972137913E-5	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.6935903773975163	DEFECT	0.3064096226024838	WITHOUT_CLASSIFICATION
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9992801015120737	WITHOUT_CLASSIFICATION	7.198984879262731E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.7133505925607948	WITHOUT_CLASSIFICATION	0.2866494074392052	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9730677445142646	WITHOUT_CLASSIFICATION	0.026932255485735395	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.5379078184055421	WITHOUT_CLASSIFICATION	0.46209218159445786	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.8355546560260552	DEFECT	0.1644453439739449	WITHOUT_CLASSIFICATION
