//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999828583609	WITHOUT_CLASSIFICATION	1.7141639095079792E-8	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999809346028328	WITHOUT_CLASSIFICATION	1.906539716714257E-5	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995950881485	WITHOUT_CLASSIFICATION	4.0491185154815974E-7	DEFECT
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999999961218891	WITHOUT_CLASSIFICATION	3.878110897843925E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999842043623087	WITHOUT_CLASSIFICATION	1.579563769124903E-5	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999842043623087	WITHOUT_CLASSIFICATION	1.579563769124903E-5	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999803806322	WITHOUT_CLASSIFICATION	1.9619367779330778E-8	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999955974505037	WITHOUT_CLASSIFICATION	4.402549496250004E-6	DEFECT
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999997805964922	WITHOUT_CLASSIFICATION	2.194035077768159E-7	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999972080899737	WITHOUT_CLASSIFICATION	2.791910026193075E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999978259506642	WITHOUT_CLASSIFICATION	2.1740493358599775E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999978259506642	WITHOUT_CLASSIFICATION	2.1740493358599775E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999923630015595	WITHOUT_CLASSIFICATION	7.636998440637169E-6	DEFECT
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999999539475914	WITHOUT_CLASSIFICATION	4.605240866883009E-8	DEFECT
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999766468978297	WITHOUT_CLASSIFICATION	2.335310217030553E-5	DEFECT
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999992571803296	WITHOUT_CLASSIFICATION	7.428196704517856E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997642029939	WITHOUT_CLASSIFICATION	2.357970062458196E-7	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999961210472051	WITHOUT_CLASSIFICATION	3.878952794836155E-6	DEFECT
// ROW ID	WITHOUT_CLASSIFICATION	0.9999868287714603	WITHOUT_CLASSIFICATION	1.3171228539613608E-5	DEFECT
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999994891508382	WITHOUT_CLASSIFICATION	5.108491618509815E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999964715984813	WITHOUT_CLASSIFICATION	3.5284015186677506E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934873711131419	WITHOUT_CLASSIFICATION	0.006512628886858194	DEFECT
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999992564624938	WITHOUT_CLASSIFICATION	7.435375062050786E-7	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999992257947196	WITHOUT_CLASSIFICATION	7.742052804075621E-7	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999671261098	WITHOUT_CLASSIFICATION	3.2873890195918456E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999939649476	WITHOUT_CLASSIFICATION	6.035052400453817E-7	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999939649476	WITHOUT_CLASSIFICATION	6.035052400453817E-7	DEFECT
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999977633730776	WITHOUT_CLASSIFICATION	2.2366269224501132E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999912645021789	WITHOUT_CLASSIFICATION	8.735497821110298E-6	DEFECT
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999999970914305	WITHOUT_CLASSIFICATION	2.9085694441472495E-9	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999975323982421	WITHOUT_CLASSIFICATION	2.467601757897162E-6	DEFECT
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9999992939093573	WITHOUT_CLASSIFICATION	7.060906427750404E-7	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5290311772180933	WITHOUT_CLASSIFICATION	0.47096882278190666	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5290311772180933	WITHOUT_CLASSIFICATION	0.47096882278190666	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999998388207046	WITHOUT_CLASSIFICATION	1.6117929543066355E-7	DEFECT
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9962986594773808	WITHOUT_CLASSIFICATION	0.0037013405226192313	DEFECT
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999999627168843	WITHOUT_CLASSIFICATION	3.728311569306155E-7	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994561543357	WITHOUT_CLASSIFICATION	5.438456643104071E-7	DEFECT
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999967943645661	WITHOUT_CLASSIFICATION	3.2056354339514365E-6	DEFECT
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997449566742	WITHOUT_CLASSIFICATION	2.5504332578408287E-7	DEFECT
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977573599209	WITHOUT_CLASSIFICATION	2.2426400790993317E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998519908814	WITHOUT_CLASSIFICATION	1.4800911852794795E-7	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999911055027573	WITHOUT_CLASSIFICATION	8.894497242635011E-6	DEFECT
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9958644803312613	WITHOUT_CLASSIFICATION	0.004135519668738723	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999942503283062	WITHOUT_CLASSIFICATION	5.749671693815071E-6	DEFECT
//ignore!	WITHOUT_CLASSIFICATION	0.9999911055027573	WITHOUT_CLASSIFICATION	8.894497242635011E-6	DEFECT
//60 seconds	WITHOUT_CLASSIFICATION	0.9999942503283062	WITHOUT_CLASSIFICATION	5.749671693815071E-6	DEFECT
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999989955796363	WITHOUT_CLASSIFICATION	1.0044203636922234E-6	DEFECT
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9999950423871388	WITHOUT_CLASSIFICATION	4.957612861199908E-6	DEFECT
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999995488136583	WITHOUT_CLASSIFICATION	4.511863416673948E-7	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999978746456265	WITHOUT_CLASSIFICATION	2.1253543735912828E-6	DEFECT
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999999050933525	WITHOUT_CLASSIFICATION	9.490664749485573E-8	DEFECT
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999999905165572	WITHOUT_CLASSIFICATION	9.483442839458021E-9	DEFECT
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999972519336613	WITHOUT_CLASSIFICATION	2.7480663386843934E-6	DEFECT
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.99996559522852	WITHOUT_CLASSIFICATION	3.440477148001939E-5	DEFECT
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999128948104	WITHOUT_CLASSIFICATION	8.7105189636158E-8	DEFECT
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999992674249701	WITHOUT_CLASSIFICATION	7.325750298187775E-7	DEFECT
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999933069153129	WITHOUT_CLASSIFICATION	6.6930846871066715E-6	DEFECT
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999977024368788	WITHOUT_CLASSIFICATION	2.2975631212483935E-6	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998802406372	WITHOUT_CLASSIFICATION	1.197593627675036E-7	DEFECT
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999995024657799	WITHOUT_CLASSIFICATION	4.975342201030489E-6	DEFECT
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999997981590504	WITHOUT_CLASSIFICATION	2.0184094962055692E-7	DEFECT
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999993088549476	WITHOUT_CLASSIFICATION	6.911450524215991E-7	DEFECT
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999975784148432	WITHOUT_CLASSIFICATION	2.4215851569130598E-6	DEFECT
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999983447946603	WITHOUT_CLASSIFICATION	1.655205339653052E-6	DEFECT
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999788940346	WITHOUT_CLASSIFICATION	2.110596531220649E-8	DEFECT
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999909932744	WITHOUT_CLASSIFICATION	9.006725546282513E-9	DEFECT
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.99999995623708	WITHOUT_CLASSIFICATION	4.376291982753406E-8	DEFECT
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999768600355	WITHOUT_CLASSIFICATION	2.313996453273336E-8	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999963484741	WITHOUT_CLASSIFICATION	3.6515258603933453E-9	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999984087914933	WITHOUT_CLASSIFICATION	1.591208506648341E-6	DEFECT
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999861814716579	WITHOUT_CLASSIFICATION	1.3818528342169147E-5	DEFECT
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.999999940638963	WITHOUT_CLASSIFICATION	5.936103707587078E-8	DEFECT
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999988861135	WITHOUT_CLASSIFICATION	1.1138865514979659E-9	DEFECT
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9999999762959172	WITHOUT_CLASSIFICATION	2.3704082888977243E-8	DEFECT
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999716765849	WITHOUT_CLASSIFICATION	2.8323414948523854E-8	DEFECT
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999093567945	WITHOUT_CLASSIFICATION	9.064320548563279E-8	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999961176372	WITHOUT_CLASSIFICATION	3.8823627388173845E-9	DEFECT
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999783486953	WITHOUT_CLASSIFICATION	2.16513047610949E-8	DEFECT
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998600558688504	WITHOUT_CLASSIFICATION	1.3994413114965567E-4	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996690589564	WITHOUT_CLASSIFICATION	3.309410436085459E-7	DEFECT
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999872043793299	WITHOUT_CLASSIFICATION	1.2795620670099504E-5	DEFECT
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999384272404	WITHOUT_CLASSIFICATION	6.157275963133166E-8	DEFECT
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999996690589564	WITHOUT_CLASSIFICATION	3.309410436085459E-7	DEFECT
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999959041838119	WITHOUT_CLASSIFICATION	4.095816188103963E-6	DEFECT
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999906020186664	WITHOUT_CLASSIFICATION	9.39798133360325E-6	DEFECT
// ignore!	WITHOUT_CLASSIFICATION	0.9999982565072362	WITHOUT_CLASSIFICATION	1.7434927637931947E-6	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999999778978874	WITHOUT_CLASSIFICATION	2.2102112584914347E-7	DEFECT
// construct the cache	WITHOUT_CLASSIFICATION	0.999999917559968	WITHOUT_CLASSIFICATION	8.244003201208136E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999321692846	WITHOUT_CLASSIFICATION	6.783071542681034E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999321692846	WITHOUT_CLASSIFICATION	6.783071542681034E-8	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999958385747141	WITHOUT_CLASSIFICATION	4.161425285921316E-6	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999998790862007	WITHOUT_CLASSIFICATION	1.209137992687489E-7	DEFECT
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999847010692832	WITHOUT_CLASSIFICATION	1.529893071676369E-5	DEFECT
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999993597047	WITHOUT_CLASSIFICATION	6.40295280955885E-10	DEFECT
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996929473489	WITHOUT_CLASSIFICATION	3.070526510753548E-7	DEFECT
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999999985229623	WITHOUT_CLASSIFICATION	1.4770376342232634E-9	DEFECT
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999539232795	WITHOUT_CLASSIFICATION	4.6076720489848706E-7	DEFECT
// return the connection	WITHOUT_CLASSIFICATION	0.9999856718461052	WITHOUT_CLASSIFICATION	1.4328153894895963E-5	DEFECT
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999999996836989	WITHOUT_CLASSIFICATION	3.1630108884547686E-9	DEFECT
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999839224412	WITHOUT_CLASSIFICATION	1.6077558849535465E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999974559113	WITHOUT_CLASSIFICATION	2.5440886400996705E-9	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999974559113	WITHOUT_CLASSIFICATION	2.5440886400996705E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999823872537777	WITHOUT_CLASSIFICATION	1.7612746222270818E-5	DEFECT
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999987349082902	WITHOUT_CLASSIFICATION	1.265091709745041E-6	DEFECT
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999999482472122	WITHOUT_CLASSIFICATION	5.1752787838186385E-8	DEFECT
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999999974559113	WITHOUT_CLASSIFICATION	2.5440886400996705E-9	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999823872537777	WITHOUT_CLASSIFICATION	1.7612746222270818E-5	DEFECT
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999823872537777	WITHOUT_CLASSIFICATION	1.7612746222270818E-5	DEFECT
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999999945468755	WITHOUT_CLASSIFICATION	5.453124553270923E-9	DEFECT
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.99999895439253	WITHOUT_CLASSIFICATION	1.0456074700346114E-6	DEFECT
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999967229108483	WITHOUT_CLASSIFICATION	3.2770891516784654E-6	DEFECT
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999990403069	WITHOUT_CLASSIFICATION	9.596931662579556E-10	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999952426122842	WITHOUT_CLASSIFICATION	4.757387715704832E-6	DEFECT
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999952426122842	WITHOUT_CLASSIFICATION	4.757387715704832E-6	DEFECT
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.999999734131975	WITHOUT_CLASSIFICATION	2.65868025001977E-7	DEFECT
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999984428057976	WITHOUT_CLASSIFICATION	1.557194202429865E-6	DEFECT
// default is POJO	WITHOUT_CLASSIFICATION	0.9999991360997822	WITHOUT_CLASSIFICATION	8.639002178611975E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995636005916	WITHOUT_CLASSIFICATION	4.363994084290571E-7	DEFECT
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999995636005916	WITHOUT_CLASSIFICATION	4.363994084290571E-7	DEFECT
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999934142771437	WITHOUT_CLASSIFICATION	6.58572285625994E-6	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999992688657336	WITHOUT_CLASSIFICATION	7.311342663456472E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999797663770198	WITHOUT_CLASSIFICATION	2.0233622980268203E-5	DEFECT
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999968201898	WITHOUT_CLASSIFICATION	3.1798101033800085E-9	DEFECT
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999999905119933	WITHOUT_CLASSIFICATION	9.488006701239366E-8	DEFECT
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998749480112	WITHOUT_CLASSIFICATION	1.250519887393505E-7	DEFECT
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.999989758939529	WITHOUT_CLASSIFICATION	1.0241060471019094E-5	DEFECT
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999998490462598	WITHOUT_CLASSIFICATION	1.509537400838798E-7	DEFECT
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999990087020956	WITHOUT_CLASSIFICATION	9.912979044351161E-7	DEFECT
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999797663770198	WITHOUT_CLASSIFICATION	2.0233622980268203E-5	DEFECT
//then by fk	WITHOUT_CLASSIFICATION	0.9999845560819717	WITHOUT_CLASSIFICATION	1.544391802829637E-5	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999979940865101	WITHOUT_CLASSIFICATION	2.00591348985349E-6	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999979940865101	WITHOUT_CLASSIFICATION	2.00591348985349E-6	DEFECT
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9999894960083555	WITHOUT_CLASSIFICATION	1.0503991644468064E-5	DEFECT
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999866216741558	WITHOUT_CLASSIFICATION	1.33783258441616E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999943500333407	WITHOUT_CLASSIFICATION	5.649966659276818E-6	DEFECT
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999982775419848	WITHOUT_CLASSIFICATION	1.7224580152418725E-6	DEFECT
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999996515695657	WITHOUT_CLASSIFICATION	3.484304342607979E-7	DEFECT
//then by id	WITHOUT_CLASSIFICATION	0.9999928595191644	WITHOUT_CLASSIFICATION	7.1404808355641406E-6	DEFECT
// to be safe...	WITHOUT_CLASSIFICATION	0.9998565686454783	WITHOUT_CLASSIFICATION	1.4343135452170693E-4	DEFECT
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999962661466	WITHOUT_CLASSIFICATION	3.733853379679167E-9	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999330757435	WITHOUT_CLASSIFICATION	6.69242564386361E-8	DEFECT
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999330757435	WITHOUT_CLASSIFICATION	6.69242564386361E-8	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999828583609	WITHOUT_CLASSIFICATION	1.7141639095079792E-8	DEFECT
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994650950892	WITHOUT_CLASSIFICATION	5.349049108364127E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// invokespecial	WITHOUT_CLASSIFICATION	0.9999996910281789	WITHOUT_CLASSIFICATION	3.089718211240538E-7	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999965374569629	WITHOUT_CLASSIFICATION	3.4625430371683512E-6	DEFECT
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999998275283368	WITHOUT_CLASSIFICATION	1.7247166322153803E-7	DEFECT
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999998333940422	WITHOUT_CLASSIFICATION	1.6660595787820782E-7	DEFECT
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999991302359772	WITHOUT_CLASSIFICATION	8.697640229483017E-7	DEFECT
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999732790783108	WITHOUT_CLASSIFICATION	2.6720921689249135E-5	DEFECT
// new	WITHOUT_CLASSIFICATION	0.999997669930386	WITHOUT_CLASSIFICATION	2.330069614105985E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999957471730692	WITHOUT_CLASSIFICATION	4.252826930835239E-6	DEFECT
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992028869803	WITHOUT_CLASSIFICATION	7.971130197190428E-7	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995950881485	WITHOUT_CLASSIFICATION	4.0491185154815974E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999992654622133	WITHOUT_CLASSIFICATION	7.345377866305936E-7	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999992654622133	WITHOUT_CLASSIFICATION	7.345377866305936E-7	DEFECT
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998675988806	WITHOUT_CLASSIFICATION	1.324011194509E-7	DEFECT
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.999950625034796	WITHOUT_CLASSIFICATION	4.937496520402248E-5	DEFECT
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999986066117188	WITHOUT_CLASSIFICATION	1.393388281171587E-6	DEFECT
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999955631751767	WITHOUT_CLASSIFICATION	4.436824823312634E-6	DEFECT
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999984588236985	WITHOUT_CLASSIFICATION	1.5411763014976821E-6	DEFECT
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999999538023292	WITHOUT_CLASSIFICATION	4.619767084956176E-8	DEFECT
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999842043623087	WITHOUT_CLASSIFICATION	1.579563769124903E-5	DEFECT
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999995919999511	WITHOUT_CLASSIFICATION	4.0800004893045544E-7	DEFECT
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999960479299388	WITHOUT_CLASSIFICATION	3.952070061284638E-6	DEFECT
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999986250936415	WITHOUT_CLASSIFICATION	1.3749063585397687E-6	DEFECT
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.999998672752099	WITHOUT_CLASSIFICATION	1.3272479010100496E-6	DEFECT
// iconst_i	WITHOUT_CLASSIFICATION	0.9999974193819228	WITHOUT_CLASSIFICATION	2.5806180772607245E-6	DEFECT
// aaload	WITHOUT_CLASSIFICATION	0.9999977695659323	WITHOUT_CLASSIFICATION	2.230434067600754E-6	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999029175817	WITHOUT_CLASSIFICATION	9.708241828086722E-8	DEFECT
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998251114328	WITHOUT_CLASSIFICATION	1.7488856708403204E-7	DEFECT
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999998712323411	WITHOUT_CLASSIFICATION	1.287676588137364E-7	DEFECT
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999706918447574	WITHOUT_CLASSIFICATION	2.9308155242627433E-5	DEFECT
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999940940847212	WITHOUT_CLASSIFICATION	5.9059152787778424E-6	DEFECT
// register in exception table	WITHOUT_CLASSIFICATION	0.9999997996809973	WITHOUT_CLASSIFICATION	2.003190026564725E-7	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// aload_0	WITHOUT_CLASSIFICATION	0.999997837482765	WITHOUT_CLASSIFICATION	2.1625172349843193E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999957471730692	WITHOUT_CLASSIFICATION	4.252826930835239E-6	DEFECT
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999992654622133	WITHOUT_CLASSIFICATION	7.345377866305936E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999029175817	WITHOUT_CLASSIFICATION	9.708241828086722E-8	DEFECT
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999803806322	WITHOUT_CLASSIFICATION	1.9619367779330778E-8	DEFECT
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999987217231567	WITHOUT_CLASSIFICATION	1.2782768432065563E-6	DEFECT
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9997193120530193	WITHOUT_CLASSIFICATION	2.806879469806104E-4	DEFECT
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999678047337925	WITHOUT_CLASSIFICATION	3.219526620740623E-5	DEFECT
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999937436679242	WITHOUT_CLASSIFICATION	6.256332075856608E-6	DEFECT
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999232583860981	WITHOUT_CLASSIFICATION	7.674161390183634E-5	DEFECT
// athrow	WITHOUT_CLASSIFICATION	0.9999983910714246	WITHOUT_CLASSIFICATION	1.6089285754515636E-6	DEFECT
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999639575683138	WITHOUT_CLASSIFICATION	3.604243168617678E-5	DEFECT
//swallow	WITHOUT_CLASSIFICATION	0.9999922918767984	WITHOUT_CLASSIFICATION	7.708123201676869E-6	DEFECT
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999985638018115	WITHOUT_CLASSIFICATION	1.4361981884834662E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999909649289	WITHOUT_CLASSIFICATION	9.035071099867864E-6	DEFECT
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999909649289	WITHOUT_CLASSIFICATION	9.035071099867864E-6	DEFECT
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999564854607	WITHOUT_CLASSIFICATION	4.351453932328557E-8	DEFECT
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999988110831743	WITHOUT_CLASSIFICATION	1.188916825710198E-6	DEFECT
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999537265891105	WITHOUT_CLASSIFICATION	4.6273410889554276E-5	DEFECT
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999731789983783	WITHOUT_CLASSIFICATION	2.6821001621589598E-5	DEFECT
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999577940363	WITHOUT_CLASSIFICATION	4.220596372934995E-8	DEFECT
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999830024424	WITHOUT_CLASSIFICATION	1.6997557604315235E-8	DEFECT
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999998488866995	WITHOUT_CLASSIFICATION	1.5111330054467153E-7	DEFECT
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999955974505037	WITHOUT_CLASSIFICATION	4.402549496250004E-6	DEFECT
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999961094470767	WITHOUT_CLASSIFICATION	3.8905529233417304E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999960831564627	WITHOUT_CLASSIFICATION	3.916843537262599E-6	DEFECT
// *return // each type	WITHOUT_CLASSIFICATION	0.9999960831564627	WITHOUT_CLASSIFICATION	3.916843537262599E-6	DEFECT
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999996560863722	WITHOUT_CLASSIFICATION	3.439136278481561E-7	DEFECT
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999995820122117	WITHOUT_CLASSIFICATION	4.1798778822854375E-7	DEFECT
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999986836653706	WITHOUT_CLASSIFICATION	1.3163346294252405E-6	DEFECT
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999688063651727	WITHOUT_CLASSIFICATION	3.11936348273475E-5	DEFECT
// int	WITHOUT_CLASSIFICATION	0.9999847668982812	WITHOUT_CLASSIFICATION	1.5233101718826485E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.999998283303749	WITHOUT_CLASSIFICATION	1.7166962510406623E-6	DEFECT
// dup	WITHOUT_CLASSIFICATION	0.9999957471730692	WITHOUT_CLASSIFICATION	4.252826930835239E-6	DEFECT
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999995950881485	WITHOUT_CLASSIFICATION	4.0491185154815974E-7	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999029175817	WITHOUT_CLASSIFICATION	9.708241828086722E-8	DEFECT
// checkcast	WITHOUT_CLASSIFICATION	0.9999999029175817	WITHOUT_CLASSIFICATION	9.708241828086722E-8	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970380234453	WITHOUT_CLASSIFICATION	2.961976554669024E-6	DEFECT
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999970380234453	WITHOUT_CLASSIFICATION	2.961976554669024E-6	DEFECT
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997784996691	WITHOUT_CLASSIFICATION	2.215003308639926E-7	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999981933185925	WITHOUT_CLASSIFICATION	1.8066814075723704E-6	DEFECT
// *load_1	WITHOUT_CLASSIFICATION	0.9999981933185925	WITHOUT_CLASSIFICATION	1.8066814075723704E-6	DEFECT
// putfield	WITHOUT_CLASSIFICATION	0.9999998621934526	WITHOUT_CLASSIFICATION	1.3780654741541533E-7	DEFECT
// return ;	WITHOUT_CLASSIFICATION	0.9999987615485181	WITHOUT_CLASSIFICATION	1.2384514819651942E-6	DEFECT
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999998809911703	WITHOUT_CLASSIFICATION	1.1900882969138734E-7	DEFECT
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999991603230709	WITHOUT_CLASSIFICATION	8.396769291037544E-7	DEFECT
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999804509565303	WITHOUT_CLASSIFICATION	1.9549043469623224E-5	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999972080899737	WITHOUT_CLASSIFICATION	2.791910026193075E-6	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999972080899737	WITHOUT_CLASSIFICATION	2.791910026193075E-6	DEFECT
// not array	WITHOUT_CLASSIFICATION	0.9999952123384968	WITHOUT_CLASSIFICATION	4.787661503194298E-6	DEFECT
// array of reference type	WITHOUT_CLASSIFICATION	0.9999935281474489	WITHOUT_CLASSIFICATION	6.471852551143239E-6	DEFECT
// boolean	WITHOUT_CLASSIFICATION	0.9999998328075417	WITHOUT_CLASSIFICATION	1.6719245824417212E-7	DEFECT
// byte	WITHOUT_CLASSIFICATION	0.9999958072602874	WITHOUT_CLASSIFICATION	4.192739712745918E-6	DEFECT
// char	WITHOUT_CLASSIFICATION	0.9999997339283547	WITHOUT_CLASSIFICATION	2.6607164535860806E-7	DEFECT
// short	WITHOUT_CLASSIFICATION	0.9999975456483874	WITHOUT_CLASSIFICATION	2.4543516125142824E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999978259506642	WITHOUT_CLASSIFICATION	2.1740493358599775E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999934659046269	WITHOUT_CLASSIFICATION	6.534095373148953E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999934659046269	WITHOUT_CLASSIFICATION	6.534095373148953E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999923630015595	WITHOUT_CLASSIFICATION	7.636998440637169E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999923630015595	WITHOUT_CLASSIFICATION	7.636998440637169E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999939292250194	WITHOUT_CLASSIFICATION	6.070774980648074E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999939292250194	WITHOUT_CLASSIFICATION	6.070774980648074E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999790066174	WITHOUT_CLASSIFICATION	2.0993382625490915E-8	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999790066174	WITHOUT_CLASSIFICATION	2.0993382625490915E-8	DEFECT
// reference type	WITHOUT_CLASSIFICATION	0.9999972080899737	WITHOUT_CLASSIFICATION	2.791910026193075E-6	DEFECT
// double	WITHOUT_CLASSIFICATION	0.9999978259506642	WITHOUT_CLASSIFICATION	2.1740493358599775E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999934659046269	WITHOUT_CLASSIFICATION	6.534095373148953E-6	DEFECT
// float	WITHOUT_CLASSIFICATION	0.9999934659046269	WITHOUT_CLASSIFICATION	6.534095373148953E-6	DEFECT
// long	WITHOUT_CLASSIFICATION	0.9999923630015595	WITHOUT_CLASSIFICATION	7.636998440637169E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999939292250194	WITHOUT_CLASSIFICATION	6.070774980648074E-6	DEFECT
// bad type	WITHOUT_CLASSIFICATION	0.9999939292250194	WITHOUT_CLASSIFICATION	6.070774980648074E-6	DEFECT
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999790066174	WITHOUT_CLASSIFICATION	2.0993382625490915E-8	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999990898446587	WITHOUT_CLASSIFICATION	9.101553412992782E-7	DEFECT
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999982982451434	WITHOUT_CLASSIFICATION	1.701754856514544E-6	DEFECT
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999961769823067	WITHOUT_CLASSIFICATION	3.823017693321976E-6	DEFECT
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999997258732556	WITHOUT_CLASSIFICATION	2.7412674434132085E-7	DEFECT
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999999045314016	WITHOUT_CLASSIFICATION	9.546859838534437E-8	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999988033667724	WITHOUT_CLASSIFICATION	1.1966332276347587E-6	DEFECT
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999826060478324	WITHOUT_CLASSIFICATION	1.73939521676389E-5	DEFECT
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9921625212475143	WITHOUT_CLASSIFICATION	0.007837478752485702	DEFECT
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999677511465213	WITHOUT_CLASSIFICATION	3.2248853478674514E-5	DEFECT
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999998588925771	WITHOUT_CLASSIFICATION	1.4110742280299014E-7	DEFECT
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999980783378121	WITHOUT_CLASSIFICATION	1.921662187906059E-6	DEFECT
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997096495918	WITHOUT_CLASSIFICATION	2.903504081518166E-7	DEFECT
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999958385747141	WITHOUT_CLASSIFICATION	4.161425285921316E-6	DEFECT
// noop	WITHOUT_CLASSIFICATION	0.9999988033667724	WITHOUT_CLASSIFICATION	1.1966332276347587E-6	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999794820819601	WITHOUT_CLASSIFICATION	2.0517918039911306E-5	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999794820819601	WITHOUT_CLASSIFICATION	2.0517918039911306E-5	DEFECT
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999740300022094	WITHOUT_CLASSIFICATION	2.5969997790548337E-5	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999196747781	WITHOUT_CLASSIFICATION	8.032522187136706E-8	DEFECT
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999999196747781	WITHOUT_CLASSIFICATION	8.032522187136706E-8	DEFECT
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999926953175345	WITHOUT_CLASSIFICATION	7.304682465511453E-6	DEFECT
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999990124987858	WITHOUT_CLASSIFICATION	9.875012141925554E-7	DEFECT
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999995941038365	WITHOUT_CLASSIFICATION	4.058961635041113E-6	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997629787011	WITHOUT_CLASSIFICATION	2.3702129889316928E-7	DEFECT
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999997629787011	WITHOUT_CLASSIFICATION	2.3702129889316928E-7	DEFECT
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997642029939	WITHOUT_CLASSIFICATION	2.357970062458196E-7	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999997994837395	WITHOUT_CLASSIFICATION	2.005162605215201E-7	DEFECT
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999997994837395	WITHOUT_CLASSIFICATION	2.005162605215201E-7	DEFECT
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999991440522887	WITHOUT_CLASSIFICATION	8.559477112608056E-7	DEFECT
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999997420864603	WITHOUT_CLASSIFICATION	2.579135396627434E-7	DEFECT
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999993933969527	WITHOUT_CLASSIFICATION	6.066030473468376E-7	DEFECT
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999969530094344	WITHOUT_CLASSIFICATION	3.046990565525891E-6	DEFECT
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999941637350466	WITHOUT_CLASSIFICATION	5.836264953440958E-6	DEFECT
// WHERE	WITHOUT_CLASSIFICATION	0.9999925136394565	WITHOUT_CLASSIFICATION	7.486360543457831E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999961210472051	WITHOUT_CLASSIFICATION	3.878952794836155E-6	DEFECT
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999997738686095	WITHOUT_CLASSIFICATION	2.261313905056746E-6	DEFECT
// TODO:	WITHOUT_CLASSIFICATION	0.9974488082186812	WITHOUT_CLASSIFICATION	0.002551191781318712	DEFECT
// ID	WITHOUT_CLASSIFICATION	0.9999934175518997	WITHOUT_CLASSIFICATION	6.582448100328403E-6	DEFECT
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999986229733799	WITHOUT_CLASSIFICATION	1.3770266200760912E-6	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999964715984813	WITHOUT_CLASSIFICATION	3.5284015186677506E-6	DEFECT
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998700831035	WITHOUT_CLASSIFICATION	1.2991689643108506E-7	DEFECT
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999988364485164	WITHOUT_CLASSIFICATION	1.1635514836003698E-6	DEFECT
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999933372227	WITHOUT_CLASSIFICATION	6.662777347693182E-9	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999964715984813	WITHOUT_CLASSIFICATION	3.5284015186677506E-6	DEFECT
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999996514986801	WITHOUT_CLASSIFICATION	3.485013198840097E-7	DEFECT
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999992525915724	WITHOUT_CLASSIFICATION	7.474084276515404E-7	DEFECT
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999999284361172	WITHOUT_CLASSIFICATION	7.156388278960689E-7	DEFECT
// IMPORT	WITHOUT_CLASSIFICATION	0.9999954671141144	WITHOUT_CLASSIFICATION	4.532885885558518E-6	DEFECT
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999725245626165	WITHOUT_CLASSIFICATION	2.747543738346617E-5	DEFECT
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999922911154261	WITHOUT_CLASSIFICATION	7.708884573892033E-6	DEFECT
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999984681115497	WITHOUT_CLASSIFICATION	1.53188845036146E-6	DEFECT
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999992257947196	WITHOUT_CLASSIFICATION	7.742052804075621E-7	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999978183449872	WITHOUT_CLASSIFICATION	2.1816550127690526E-6	DEFECT
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999671261098	WITHOUT_CLASSIFICATION	3.2873890195918456E-7	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994350177916	WITHOUT_CLASSIFICATION	5.649822083216366E-7	DEFECT
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999999676708601	WITHOUT_CLASSIFICATION	3.2329139882701616E-8	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999929377822121	WITHOUT_CLASSIFICATION	7.0622177879108325E-6	DEFECT
// CHECK	WITHOUT_CLASSIFICATION	0.9999961210472051	WITHOUT_CLASSIFICATION	3.878952794836155E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999978183449872	WITHOUT_CLASSIFICATION	2.1816550127690526E-6	DEFECT
// properties	WITHOUT_CLASSIFICATION	0.9999994350177916	WITHOUT_CLASSIFICATION	5.649822083216366E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999929377822121	WITHOUT_CLASSIFICATION	7.0622177879108325E-6	DEFECT
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998015508349	WITHOUT_CLASSIFICATION	1.9844916500566527E-7	DEFECT
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999955915520181	WITHOUT_CLASSIFICATION	4.4084479819355906E-6	DEFECT
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999497616588	WITHOUT_CLASSIFICATION	5.023834110986534E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999939649476	WITHOUT_CLASSIFICATION	6.035052400453817E-7	DEFECT
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999992626968949	WITHOUT_CLASSIFICATION	7.373031051140193E-7	DEFECT
// column index	WITHOUT_CLASSIFICATION	0.9999971259345634	WITHOUT_CLASSIFICATION	2.874065436710603E-6	DEFECT
//column unique-key	WITHOUT_CLASSIFICATION	0.9999979420250497	WITHOUT_CLASSIFICATION	2.057974950330027E-6	DEFECT
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999999172993191	WITHOUT_CLASSIFICATION	8.270068081423296E-8	DEFECT
// for an any	WITHOUT_CLASSIFICATION	0.9999987768313975	WITHOUT_CLASSIFICATION	1.2231686024104616E-6	DEFECT
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999795222165	WITHOUT_CLASSIFICATION	2.0477783504178356E-8	DEFECT
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999979138114	WITHOUT_CLASSIFICATION	2.0861885997268043E-8	DEFECT
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999954544363511	WITHOUT_CLASSIFICATION	4.54556364885233E-6	DEFECT
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999985104588	WITHOUT_CLASSIFICATION	1.4895411309202017E-9	DEFECT
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999924416207	WITHOUT_CLASSIFICATION	7.558379298204342E-8	DEFECT
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999908774403576	WITHOUT_CLASSIFICATION	9.122559642362339E-6	DEFECT
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999977306000911	WITHOUT_CLASSIFICATION	2.2693999088115307E-6	DEFECT
// TABLE	WITHOUT_CLASSIFICATION	0.9999912645021789	WITHOUT_CLASSIFICATION	8.735497821110298E-6	DEFECT
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999995720825433	WITHOUT_CLASSIFICATION	4.2791745666925086E-7	DEFECT
// SORT	WITHOUT_CLASSIFICATION	0.9999962203833407	WITHOUT_CLASSIFICATION	3.7796166593360584E-6	DEFECT
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999978183449872	WITHOUT_CLASSIFICATION	2.1816550127690526E-6	DEFECT
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999999190093959	WITHOUT_CLASSIFICATION	8.099060404798314E-8	DEFECT
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999999547399555	WITHOUT_CLASSIFICATION	4.526004455661222E-8	DEFECT
// set up second pass	WITHOUT_CLASSIFICATION	0.9999998715401563	WITHOUT_CLASSIFICATION	1.284598436334604E-7	DEFECT
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999993952351174	WITHOUT_CLASSIFICATION	6.04764882666751E-7	DEFECT
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999998770067969	WITHOUT_CLASSIFICATION	1.2299320305204622E-7	DEFECT
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999991146516375	WITHOUT_CLASSIFICATION	8.853483624499744E-7	DEFECT
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999779778723	WITHOUT_CLASSIFICATION	2.2022127676217363E-8	DEFECT
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999987463928	WITHOUT_CLASSIFICATION	1.2536072873462647E-9	DEFECT
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999967745068064	WITHOUT_CLASSIFICATION	3.2254931936035136E-6	DEFECT
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999984994199764	WITHOUT_CLASSIFICATION	1.5005800236606278E-6	DEFECT
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999992650717531	WITHOUT_CLASSIFICATION	7.349282469344272E-7	DEFECT
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999992226799974	WITHOUT_CLASSIFICATION	7.773200026957306E-7	DEFECT
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999987989735831	WITHOUT_CLASSIFICATION	1.2010264168915809E-6	DEFECT
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999975323982421	WITHOUT_CLASSIFICATION	2.467601757897162E-6	DEFECT
// contained elements:	WITHOUT_CLASSIFICATION	0.9999998861738115	WITHOUT_CLASSIFICATION	1.1382618846102272E-7	DEFECT
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999998719793799	WITHOUT_CLASSIFICATION	1.2802062022137336E-7	DEFECT
// Bind the where	WITHOUT_CLASSIFICATION	0.9999969058016577	WITHOUT_CLASSIFICATION	3.0941983423295768E-6	DEFECT
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999988589457722	WITHOUT_CLASSIFICATION	1.14105422777423E-6	DEFECT
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999992358011891	WITHOUT_CLASSIFICATION	7.641988109029763E-7	DEFECT
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998360478455817	WITHOUT_CLASSIFICATION	1.6395215441830776E-4	DEFECT
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999997041755	WITHOUT_CLASSIFICATION	2.9582442008128555E-10	DEFECT
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999844724616047	WITHOUT_CLASSIFICATION	1.552753839526958E-5	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999398445794	WITHOUT_CLASSIFICATION	6.015542063636545E-8	DEFECT
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999936896019979	WITHOUT_CLASSIFICATION	6.310398002061021E-6	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999785140835104	WITHOUT_CLASSIFICATION	2.1485916489751378E-5	DEFECT
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999785140835104	WITHOUT_CLASSIFICATION	2.1485916489751378E-5	DEFECT
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999467901471487	WITHOUT_CLASSIFICATION	5.320985285131275E-5	DEFECT
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999988671956304	WITHOUT_CLASSIFICATION	1.1328043696609864E-6	DEFECT
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999994541839792	WITHOUT_CLASSIFICATION	5.458160208044026E-7	DEFECT
// Transaction settings:	WITHOUT_CLASSIFICATION	0.999998690280452	WITHOUT_CLASSIFICATION	1.3097195481074121E-6	DEFECT
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999995269223354	WITHOUT_CLASSIFICATION	4.7307766463700233E-7	DEFECT
//Query parser settings:	WITHOUT_CLASSIFICATION	0.999738795039625	WITHOUT_CLASSIFICATION	2.612049603748657E-4	DEFECT
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999995050691633	WITHOUT_CLASSIFICATION	4.949308367126181E-6	DEFECT
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999999092444942	WITHOUT_CLASSIFICATION	9.07555057489403E-8	DEFECT
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999711206263531	WITHOUT_CLASSIFICATION	2.8879373646959082E-5	DEFECT
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999988356403919	WITHOUT_CLASSIFICATION	1.1643596080067037E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//Schema export:	WITHOUT_CLASSIFICATION	0.9999947180080524	WITHOUT_CLASSIFICATION	5.28199194762428E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999642703672191	WITHOUT_CLASSIFICATION	3.572963278080191E-5	DEFECT
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9958694271133349	WITHOUT_CLASSIFICATION	0.004130572886665098	DEFECT
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999903901851502	WITHOUT_CLASSIFICATION	9.609814849854218E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999072169463	WITHOUT_CLASSIFICATION	9.278305369383203E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978158166914	WITHOUT_CLASSIFICATION	2.184183308580917E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999748810802064	WITHOUT_CLASSIFICATION	2.5118919793614014E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999889733526165	WITHOUT_CLASSIFICATION	1.102664738349015E-5	DEFECT
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9999962023593281	WITHOUT_CLASSIFICATION	3.7976406720605226E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999426489643906	WITHOUT_CLASSIFICATION	5.735103560946404E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999983487378374	WITHOUT_CLASSIFICATION	1.6512621625812905E-6	DEFECT
// found	WITHOUT_CLASSIFICATION	0.9999983487378374	WITHOUT_CLASSIFICATION	1.6512621625812905E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999939660421608	WITHOUT_CLASSIFICATION	6.033957839100009E-6	DEFECT
//<String, String>	WITHOUT_CLASSIFICATION	0.9999939660421608	WITHOUT_CLASSIFICATION	6.033957839100009E-6	DEFECT
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9999999398445794	WITHOUT_CLASSIFICATION	6.015542063636545E-8	DEFECT
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997721672515423	WITHOUT_CLASSIFICATION	2.2783274845764175E-4	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999901275218135	WITHOUT_CLASSIFICATION	9.872478186397178E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999991772218756	WITHOUT_CLASSIFICATION	8.227781244839351E-7	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999901275218135	WITHOUT_CLASSIFICATION	9.872478186397178E-6	DEFECT
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999991772218756	WITHOUT_CLASSIFICATION	8.227781244839351E-7	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986378397621	WITHOUT_CLASSIFICATION	1.3621602379396682E-6	DEFECT
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999988436886179	WITHOUT_CLASSIFICATION	1.1563113821011311E-6	DEFECT
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999982342273162	WITHOUT_CLASSIFICATION	1.7657726837981899E-6	DEFECT
// the element has changed	WITHOUT_CLASSIFICATION	0.9999999310168317	WITHOUT_CLASSIFICATION	6.89831682977577E-8	DEFECT
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9996941922215281	WITHOUT_CLASSIFICATION	3.0580777847190587E-4	DEFECT
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9999987643178926	WITHOUT_CLASSIFICATION	1.235682107418981E-6	DEFECT
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991206299518	WITHOUT_CLASSIFICATION	8.793700481489869E-7	DEFECT
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999981429470857	WITHOUT_CLASSIFICATION	1.8570529143578708E-6	DEFECT
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998445688157948	WITHOUT_CLASSIFICATION	1.554311842053563E-4	DEFECT
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999987376883	WITHOUT_CLASSIFICATION	1.2623117241707962E-9	DEFECT
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999987940416866	WITHOUT_CLASSIFICATION	1.2059583134105355E-6	DEFECT
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999969791258132	WITHOUT_CLASSIFICATION	3.0208741868593644E-6	DEFECT
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999705835648	WITHOUT_CLASSIFICATION	2.941643507516662E-8	DEFECT
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999697656719478	WITHOUT_CLASSIFICATION	3.0234328052195623E-5	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999430643018307	WITHOUT_CLASSIFICATION	5.693569816940479E-5	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999926937760605	WITHOUT_CLASSIFICATION	7.3062239395116275E-6	DEFECT
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999926937760605	WITHOUT_CLASSIFICATION	7.3062239395116275E-6	DEFECT
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.999997599141037	WITHOUT_CLASSIFICATION	2.400858962910754E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986378397621	WITHOUT_CLASSIFICATION	1.3621602379396682E-6	DEFECT
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999806808823483	WITHOUT_CLASSIFICATION	1.9319117651635544E-5	DEFECT
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.999777090354229	WITHOUT_CLASSIFICATION	2.2290964577105016E-4	DEFECT
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9999969851600593	WITHOUT_CLASSIFICATION	3.0148399405955696E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999957894824191	WITHOUT_CLASSIFICATION	4.210517580936344E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999190263770181	WITHOUT_CLASSIFICATION	8.09736229819381E-5	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986378397621	WITHOUT_CLASSIFICATION	1.3621602379396682E-6	DEFECT
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999957894824191	WITHOUT_CLASSIFICATION	4.210517580936344E-6	DEFECT
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9999190263770181	WITHOUT_CLASSIFICATION	8.09736229819381E-5	DEFECT
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9999956506953309	WITHOUT_CLASSIFICATION	4.349304669073017E-6	DEFECT
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999997412486309	WITHOUT_CLASSIFICATION	2.587513691484815E-7	DEFECT
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9998296989173723	WITHOUT_CLASSIFICATION	1.7030108262775732E-4	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986378397621	WITHOUT_CLASSIFICATION	1.3621602379396682E-6	DEFECT
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999986378397621	WITHOUT_CLASSIFICATION	1.3621602379396682E-6	DEFECT
// from Map	WITHOUT_CLASSIFICATION	0.9999989302964122	WITHOUT_CLASSIFICATION	1.0697035877605603E-6	DEFECT
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999993048290592	WITHOUT_CLASSIFICATION	6.9517094086935E-7	DEFECT
//inject the data	WITHOUT_CLASSIFICATION	0.9999973935951986	WITHOUT_CLASSIFICATION	2.6064048015318097E-6	DEFECT
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999997139644475	WITHOUT_CLASSIFICATION	2.8603555249361067E-7	DEFECT
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999993078584559	WITHOUT_CLASSIFICATION	6.921415440045812E-7	DEFECT
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999928191642	WITHOUT_CLASSIFICATION	7.180835752135433E-9	DEFECT
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999997367757122	WITHOUT_CLASSIFICATION	2.6322428783020334E-7	DEFECT
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999999837092627	WITHOUT_CLASSIFICATION	1.6290737311824898E-8	DEFECT
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999997909381046	WITHOUT_CLASSIFICATION	2.0906189539407034E-7	DEFECT
// then bind it	WITHOUT_CLASSIFICATION	0.9999966570185185	WITHOUT_CLASSIFICATION	3.3429814815202397E-6	DEFECT
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999947689498165	WITHOUT_CLASSIFICATION	5.231050183384493E-6	DEFECT
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999991757150642	WITHOUT_CLASSIFICATION	8.242849356557212E-7	DEFECT
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999997560182365	WITHOUT_CLASSIFICATION	2.439817634949078E-7	DEFECT
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9999995731795666	WITHOUT_CLASSIFICATION	4.268204334462216E-7	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999105942221	WITHOUT_CLASSIFICATION	8.940577789956143E-6	DEFECT
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.99999682092384	WITHOUT_CLASSIFICATION	3.179076159922995E-6	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994561543357	WITHOUT_CLASSIFICATION	5.438456643104071E-7	DEFECT
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999743902201051	WITHOUT_CLASSIFICATION	2.5609779894897027E-5	DEFECT
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.999492715724469	WITHOUT_CLASSIFICATION	5.072842755310522E-4	DEFECT
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999116411039	WITHOUT_CLASSIFICATION	8.835889610467483E-8	DEFECT
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999989074517436	WITHOUT_CLASSIFICATION	1.0925482564036686E-6	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999878495634489	WITHOUT_CLASSIFICATION	1.2150436551122699E-5	DEFECT
//unsupported	WITHOUT_CLASSIFICATION	0.9999878495634489	WITHOUT_CLASSIFICATION	1.2150436551122699E-5	DEFECT
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999994561543357	WITHOUT_CLASSIFICATION	5.438456643104071E-7	DEFECT
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999781487440298	WITHOUT_CLASSIFICATION	2.1851255970123584E-5	DEFECT
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999998319773139	WITHOUT_CLASSIFICATION	1.680226861016112E-7	DEFECT
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9999882407125219	WITHOUT_CLASSIFICATION	1.1759287478151236E-5	DEFECT
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999993980348862	WITHOUT_CLASSIFICATION	6.01965113838112E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999918025886109	WITHOUT_CLASSIFICATION	8.19741138913233E-6	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998810272758	WITHOUT_CLASSIFICATION	1.1897272416404885E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999990097605457	WITHOUT_CLASSIFICATION	9.902394542968393E-6	DEFECT
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999996103796089	WITHOUT_CLASSIFICATION	3.896203910514976E-7	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999709435	WITHOUT_CLASSIFICATION	2.9056541565413344E-11	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999999567160943	WITHOUT_CLASSIFICATION	4.32839055952493E-8	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999834878379013	WITHOUT_CLASSIFICATION	1.651216209874937E-5	DEFECT
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9950280884052942	WITHOUT_CLASSIFICATION	0.004971911594705814	DEFECT
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999849719993365	WITHOUT_CLASSIFICATION	1.5028000663495802E-4	DEFECT
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999944619206	WITHOUT_CLASSIFICATION	5.5380794294590625E-9	DEFECT
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999273136335	WITHOUT_CLASSIFICATION	7.268636658259212E-8	DEFECT
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999233883342525	WITHOUT_CLASSIFICATION	7.661166574746271E-5	DEFECT
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999998869789268	WITHOUT_CLASSIFICATION	1.1302107322978645E-7	DEFECT
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999465568794977	WITHOUT_CLASSIFICATION	5.3443120502156244E-5	DEFECT
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989188754881	WITHOUT_CLASSIFICATION	1.0811245119075477E-6	DEFECT
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999989382484702	WITHOUT_CLASSIFICATION	1.0617515298124562E-6	DEFECT
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999991497041485	WITHOUT_CLASSIFICATION	8.502958515737756E-7	DEFECT
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999999861248821	WITHOUT_CLASSIFICATION	1.3875117928657214E-8	DEFECT
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918546010214	WITHOUT_CLASSIFICATION	8.145398978695753E-6	DEFECT
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980332708865	WITHOUT_CLASSIFICATION	1.9667291133824466E-6	DEFECT
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990137061704	WITHOUT_CLASSIFICATION	9.862938296663961E-7	DEFECT
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992349898751	WITHOUT_CLASSIFICATION	7.650101249476958E-7	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992416733597	WITHOUT_CLASSIFICATION	7.583266402897082E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986723314321	WITHOUT_CLASSIFICATION	1.3276685678242353E-6	DEFECT
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990752029343	WITHOUT_CLASSIFICATION	9.24797065782098E-7	DEFECT
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989656839107	WITHOUT_CLASSIFICATION	1.0343160893392107E-6	DEFECT
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999999513354225	WITHOUT_CLASSIFICATION	4.866457749718017E-8	DEFECT
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999999922402786	WITHOUT_CLASSIFICATION	7.759721372603337E-9	DEFECT
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996204571784	WITHOUT_CLASSIFICATION	3.795428216023621E-7	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999362017373	WITHOUT_CLASSIFICATION	6.379826274816779E-8	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997625187653	WITHOUT_CLASSIFICATION	2.3748123478335455E-7	DEFECT
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989998435515	WITHOUT_CLASSIFICATION	1.000156448518577E-6	DEFECT
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968445617785	WITHOUT_CLASSIFICATION	3.1554382215354463E-6	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996119199691	WITHOUT_CLASSIFICATION	3.8808003094401236E-7	DEFECT
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994532495244	WITHOUT_CLASSIFICATION	5.467504756914109E-7	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983303294544	WITHOUT_CLASSIFICATION	1.66967054567299E-6	DEFECT
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999985960027283	WITHOUT_CLASSIFICATION	1.4039972715822409E-6	DEFECT
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957737511316	WITHOUT_CLASSIFICATION	4.226248868475468E-6	DEFECT
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9803301660905946	WITHOUT_CLASSIFICATION	0.019669833909405382	DEFECT
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999974493644014	WITHOUT_CLASSIFICATION	2.5506355986111033E-6	DEFECT
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999999989274	WITHOUT_CLASSIFICATION	1.072621217012508E-12	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997547815206	WITHOUT_CLASSIFICATION	2.4521847944846213E-7	DEFECT
//" cascade";	WITHOUT_CLASSIFICATION	0.9999997467404785	WITHOUT_CLASSIFICATION	2.5325952142632655E-7	DEFECT
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996920676275	WITHOUT_CLASSIFICATION	3.0793237260145184E-7	DEFECT
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9999984611371491	WITHOUT_CLASSIFICATION	1.5388628509179338E-6	DEFECT
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999989747199093	WITHOUT_CLASSIFICATION	1.0252800906431506E-6	DEFECT
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999970166087329	WITHOUT_CLASSIFICATION	2.9833912670491727E-6	DEFECT
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999964140100569	WITHOUT_CLASSIFICATION	3.585989943060052E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999979151631302	WITHOUT_CLASSIFICATION	2.084836869700645E-6	DEFECT
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999969574218792	WITHOUT_CLASSIFICATION	3.0425781207703177E-6	DEFECT
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999999261748637	WITHOUT_CLASSIFICATION	7.38251362600789E-8	DEFECT
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9997972580163423	WITHOUT_CLASSIFICATION	2.027419836576779E-4	DEFECT
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999836651651751	WITHOUT_CLASSIFICATION	1.6334834824870535E-5	DEFECT
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999960112896541	WITHOUT_CLASSIFICATION	3.988710345831852E-6	DEFECT
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999645188029261	WITHOUT_CLASSIFICATION	3.548119707390103E-5	DEFECT
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989698740116	WITHOUT_CLASSIFICATION	1.0301259884476647E-6	DEFECT
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936908013738	WITHOUT_CLASSIFICATION	6.309198626167448E-6	DEFECT
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999141017122	WITHOUT_CLASSIFICATION	8.589828781002768E-7	DEFECT
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973602888514	WITHOUT_CLASSIFICATION	2.6397111485914866E-6	DEFECT
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999940017899893	WITHOUT_CLASSIFICATION	5.998210010661992E-6	DEFECT
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999986431138945	WITHOUT_CLASSIFICATION	1.3568861054865889E-6	DEFECT
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999904382936428	WITHOUT_CLASSIFICATION	9.561706357231909E-6	DEFECT
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999931811818312	WITHOUT_CLASSIFICATION	6.818818168770236E-6	DEFECT
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992116248816	WITHOUT_CLASSIFICATION	7.88375118408387E-7	DEFECT
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999049501661	WITHOUT_CLASSIFICATION	9.504983388918149E-8	DEFECT
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999997895751751	WITHOUT_CLASSIFICATION	2.104248249550524E-7	DEFECT
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999964431956163	WITHOUT_CLASSIFICATION	3.5568043837421337E-6	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991745252	WITHOUT_CLASSIFICATION	8.254748864437498E-10	DEFECT
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999931418434045	WITHOUT_CLASSIFICATION	6.858156595512925E-6	DEFECT
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999988566880029	WITHOUT_CLASSIFICATION	1.1433119970771079E-6	DEFECT
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999998028294035	WITHOUT_CLASSIFICATION	1.971705963856315E-7	DEFECT
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999931948237634	WITHOUT_CLASSIFICATION	6.805176236552721E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997547815206	WITHOUT_CLASSIFICATION	2.4521847944846213E-7	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997468667904691	WITHOUT_CLASSIFICATION	2.5313320953092533E-4	DEFECT
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999840902473	WITHOUT_CLASSIFICATION	1.5909752706281928E-8	DEFECT
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999985902514883	WITHOUT_CLASSIFICATION	1.4097485116865608E-6	DEFECT
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999804130897659	WITHOUT_CLASSIFICATION	1.958691023402752E-5	DEFECT
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999881634560073	WITHOUT_CLASSIFICATION	1.1836543992814035E-5	DEFECT
// function templates	WITHOUT_CLASSIFICATION	0.9999998018833351	WITHOUT_CLASSIFICATION	1.981166648595547E-7	DEFECT
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999772764791517	WITHOUT_CLASSIFICATION	2.272352084839273E-5	DEFECT
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998413353638722	WITHOUT_CLASSIFICATION	1.5866463612774644E-4	DEFECT
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999959049827247	WITHOUT_CLASSIFICATION	4.095017275271526E-6	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999857695531729	WITHOUT_CLASSIFICATION	1.4230446827109361E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999806222755115	WITHOUT_CLASSIFICATION	1.937772448844552E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999902311470316	WITHOUT_CLASSIFICATION	9.768852968409288E-6	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999419621506	WITHOUT_CLASSIFICATION	5.8037849449277976E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999994957744971	WITHOUT_CLASSIFICATION	5.042255028989363E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999946548147755	WITHOUT_CLASSIFICATION	5.3451852245060605E-6	DEFECT
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999948441266822	WITHOUT_CLASSIFICATION	5.1558733178520005E-6	DEFECT
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999961243854267	WITHOUT_CLASSIFICATION	3.875614573267652E-6	DEFECT
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999944222680417	WITHOUT_CLASSIFICATION	5.577731958295137E-6	DEFECT
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999653993392	WITHOUT_CLASSIFICATION	3.4600660734870066E-8	DEFECT
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999996106051002	WITHOUT_CLASSIFICATION	3.8939489980437214E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999983243043	WITHOUT_CLASSIFICATION	1.6756956999564227E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999987841742324	WITHOUT_CLASSIFICATION	1.2158257675139447E-6	DEFECT
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999946964814421	WITHOUT_CLASSIFICATION	5.303518557876487E-6	DEFECT
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999989012585238	WITHOUT_CLASSIFICATION	1.0987414762343408E-6	DEFECT
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999997318592556	WITHOUT_CLASSIFICATION	2.6814074431027517E-7	DEFECT
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999687619224	WITHOUT_CLASSIFICATION	3.123807761248036E-8	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934873711131419	WITHOUT_CLASSIFICATION	0.006512628886858194	DEFECT
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999997017510609	WITHOUT_CLASSIFICATION	2.9824893906729696E-7	DEFECT
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999999474989008	WITHOUT_CLASSIFICATION	5.250109918851252E-8	DEFECT
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999989723640639	WITHOUT_CLASSIFICATION	1.0276359361924955E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997547815206	WITHOUT_CLASSIFICATION	2.4521847944846213E-7	DEFECT
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9978773089865829	WITHOUT_CLASSIFICATION	0.0021226910134170417	DEFECT
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999954626643262	WITHOUT_CLASSIFICATION	4.537335673875595E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998989844496009	WITHOUT_CLASSIFICATION	1.0101555039907112E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997547815206	WITHOUT_CLASSIFICATION	2.4521847944846213E-7	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999983103656915	WITHOUT_CLASSIFICATION	1.689634308521776E-6	DEFECT
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999999983243043	WITHOUT_CLASSIFICATION	1.6756956999564227E-8	DEFECT
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9978556596741863	WITHOUT_CLASSIFICATION	0.0021443403258137052	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999924786142393	WITHOUT_CLASSIFICATION	7.521385760685826E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999993688439962	WITHOUT_CLASSIFICATION	6.31156003734558E-7	DEFECT
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999857695531729	WITHOUT_CLASSIFICATION	1.4230446827109361E-5	DEFECT
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999806222755115	WITHOUT_CLASSIFICATION	1.937772448844552E-5	DEFECT
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999902311470316	WITHOUT_CLASSIFICATION	9.768852968409288E-6	DEFECT
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.999999996574105	WITHOUT_CLASSIFICATION	3.425894982292903E-9	DEFECT
// add the main query	WITHOUT_CLASSIFICATION	0.9999991847876637	WITHOUT_CLASSIFICATION	8.15212336212714E-7	DEFECT
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999387034906	WITHOUT_CLASSIFICATION	6.129650944318181E-8	DEFECT
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999984469160924	WITHOUT_CLASSIFICATION	1.5530839076061683E-6	DEFECT
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999046676542	WITHOUT_CLASSIFICATION	9.533234578608615E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997547815206	WITHOUT_CLASSIFICATION	2.4521847944846213E-7	DEFECT
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999419621506	WITHOUT_CLASSIFICATION	5.8037849449277976E-8	DEFECT
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999994957744971	WITHOUT_CLASSIFICATION	5.042255028989363E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999664054035	WITHOUT_CLASSIFICATION	3.359459647984098E-8	DEFECT
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998612221411	WITHOUT_CLASSIFICATION	1.387778589180364E-7	DEFECT
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999300795139	WITHOUT_CLASSIFICATION	6.99204860126545E-8	DEFECT
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998754224555	WITHOUT_CLASSIFICATION	1.2457754461158328E-7	DEFECT
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999995676384746	WITHOUT_CLASSIFICATION	4.3236152532071046E-7	DEFECT
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999980696752142	WITHOUT_CLASSIFICATION	1.930324785742709E-6	DEFECT
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983303294544	WITHOUT_CLASSIFICATION	1.66967054567299E-6	DEFECT
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999993825659931	WITHOUT_CLASSIFICATION	6.174340069001792E-6	DEFECT
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9999994924891717	WITHOUT_CLASSIFICATION	5.075108283112872E-7	DEFECT
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999996689287995	WITHOUT_CLASSIFICATION	3.3107120045194276E-7	DEFECT
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.999999997208903	WITHOUT_CLASSIFICATION	2.79109712909378E-9	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999939825241	WITHOUT_CLASSIFICATION	6.017475892138051E-8	DEFECT
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992416733597	WITHOUT_CLASSIFICATION	7.583266402897082E-7	DEFECT
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986723314321	WITHOUT_CLASSIFICATION	1.3276685678242353E-6	DEFECT
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999362017373	WITHOUT_CLASSIFICATION	6.379826274816779E-8	DEFECT
// identifier-commalist	WITHOUT_CLASSIFICATION	0.999999939825241	WITHOUT_CLASSIFICATION	6.017475892138051E-8	DEFECT
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999999895603046	WITHOUT_CLASSIFICATION	1.04396955015997E-8	DEFECT
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999997923859439	WITHOUT_CLASSIFICATION	2.0761405599343797E-7	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951348195655	WITHOUT_CLASSIFICATION	4.865180434471761E-6	DEFECT
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946599694784	WITHOUT_CLASSIFICATION	5.3400305214752395E-6	DEFECT
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9976426861857347	WITHOUT_CLASSIFICATION	0.002357313814265305	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999160626092544	WITHOUT_CLASSIFICATION	8.393739074566905E-5	DEFECT
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997625187653	WITHOUT_CLASSIFICATION	2.3748123478335455E-7	DEFECT
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996119199691	WITHOUT_CLASSIFICATION	3.8808003094401236E-7	DEFECT
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999999991745252	WITHOUT_CLASSIFICATION	8.254748864437498E-10	DEFECT
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.999999761620393	WITHOUT_CLASSIFICATION	2.38379607014087E-7	DEFECT
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999977614825434	WITHOUT_CLASSIFICATION	2.2385174565910135E-6	DEFECT
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.999999993104215	WITHOUT_CLASSIFICATION	6.895785035980494E-9	DEFECT
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999993333875813	WITHOUT_CLASSIFICATION	6.666124186601925E-7	DEFECT
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999686024293	WITHOUT_CLASSIFICATION	3.1397570621157745E-8	DEFECT
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999876477029	WITHOUT_CLASSIFICATION	1.2352297116966342E-8	DEFECT
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999820807066525	WITHOUT_CLASSIFICATION	1.791929334747874E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999709435	WITHOUT_CLASSIFICATION	2.9056541565413344E-11	DEFECT
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999960875574726	WITHOUT_CLASSIFICATION	3.912442527388296E-6	DEFECT
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999999934388215	WITHOUT_CLASSIFICATION	6.561178503665416E-9	DEFECT
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999999014636369	WITHOUT_CLASSIFICATION	9.85363630981199E-7	DEFECT
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999267363763	WITHOUT_CLASSIFICATION	7.326362366316647E-8	DEFECT
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999999789716582	WITHOUT_CLASSIFICATION	2.102834185524692E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992597078597	WITHOUT_CLASSIFICATION	7.40292140360555E-7	DEFECT
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979288142058	WITHOUT_CLASSIFICATION	2.0711857942100367E-6	DEFECT
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999725655127361	WITHOUT_CLASSIFICATION	2.743448726406628E-5	DEFECT
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983723467917	WITHOUT_CLASSIFICATION	1.6276532082900128E-6	DEFECT
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999990418000486	WITHOUT_CLASSIFICATION	9.581999514073618E-6	DEFECT
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9993956026099547	WITHOUT_CLASSIFICATION	6.043973900451973E-4	DEFECT
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999949898174733	WITHOUT_CLASSIFICATION	5.010182526724997E-6	DEFECT
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999985515394902	WITHOUT_CLASSIFICATION	1.4484605097001115E-6	DEFECT
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999952677714827	WITHOUT_CLASSIFICATION	4.732228517266896E-6	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999939951479899	WITHOUT_CLASSIFICATION	6.004852010031947E-6	DEFECT
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999970793773548	WITHOUT_CLASSIFICATION	2.9206226451564164E-6	DEFECT
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999999840445924	WITHOUT_CLASSIFICATION	1.5955407463509333E-8	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999993868489874	WITHOUT_CLASSIFICATION	6.131510125979836E-6	DEFECT
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999934623394731	WITHOUT_CLASSIFICATION	6.53766052685847E-6	DEFECT
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998471225632	WITHOUT_CLASSIFICATION	1.5287743672100002E-7	DEFECT
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997283709187	WITHOUT_CLASSIFICATION	2.716290813577642E-7	DEFECT
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999999982230982	WITHOUT_CLASSIFICATION	1.7769018052039515E-8	DEFECT
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999996129060973	WITHOUT_CLASSIFICATION	3.8709390276964894E-7	DEFECT
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999949148146859	WITHOUT_CLASSIFICATION	5.085185314155838E-6	DEFECT
// continue loop	WITHOUT_CLASSIFICATION	0.9999990103271907	WITHOUT_CLASSIFICATION	9.896728091808686E-7	DEFECT
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999912298406427	WITHOUT_CLASSIFICATION	8.770159357227901E-6	DEFECT
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999952400311352	WITHOUT_CLASSIFICATION	4.759968864811393E-6	DEFECT
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999993200769007	WITHOUT_CLASSIFICATION	6.79923099369036E-7	DEFECT
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999968595639956	WITHOUT_CLASSIFICATION	3.140436004301313E-6	DEFECT
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.999999975885799	WITHOUT_CLASSIFICATION	2.4114200990953468E-8	DEFECT
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999511306737	WITHOUT_CLASSIFICATION	4.88693262475211E-8	DEFECT
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997518540187473	WITHOUT_CLASSIFICATION	2.4814598125275935E-4	DEFECT
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999997390744702	WITHOUT_CLASSIFICATION	2.609255299551999E-7	DEFECT
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998345212339	WITHOUT_CLASSIFICATION	1.6547876614933661E-7	DEFECT
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999834255502	WITHOUT_CLASSIFICATION	1.657444980257271E-8	DEFECT
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999976425198068	WITHOUT_CLASSIFICATION	2.3574801932119394E-6	DEFECT
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999823156669	WITHOUT_CLASSIFICATION	1.7684333142161687E-8	DEFECT
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999650872158	WITHOUT_CLASSIFICATION	3.491278421147917E-8	DEFECT
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999975668210482	WITHOUT_CLASSIFICATION	2.4331789516668036E-6	DEFECT
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999814016541	WITHOUT_CLASSIFICATION	1.8598345971954637E-8	DEFECT
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999999657837428	WITHOUT_CLASSIFICATION	3.4216257161465364E-8	DEFECT
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999993613094866	WITHOUT_CLASSIFICATION	6.386905133566634E-7	DEFECT
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9997163375630965	WITHOUT_CLASSIFICATION	2.836624369035518E-4	DEFECT
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998928321142	WITHOUT_CLASSIFICATION	1.0716788588408713E-7	DEFECT
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999886601854807	WITHOUT_CLASSIFICATION	1.1339814519369525E-5	DEFECT
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999999668505539	WITHOUT_CLASSIFICATION	3.3149445993373355E-8	DEFECT
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999998211761005	WITHOUT_CLASSIFICATION	1.7882389941222679E-7	DEFECT
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999996589617348	WITHOUT_CLASSIFICATION	3.4103826524942176E-7	DEFECT
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999982906480565	WITHOUT_CLASSIFICATION	1.7093519436047872E-6	DEFECT
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999992586352405	WITHOUT_CLASSIFICATION	7.413647595660157E-7	DEFECT
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999993376397722	WITHOUT_CLASSIFICATION	6.62360227827943E-7	DEFECT
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999982100517192	WITHOUT_CLASSIFICATION	1.7899482807770687E-6	DEFECT
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999997807408677	WITHOUT_CLASSIFICATION	2.1925913220370414E-7	DEFECT
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999989809166726	WITHOUT_CLASSIFICATION	1.0190833274103505E-6	DEFECT
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999990472949539	WITHOUT_CLASSIFICATION	9.527050460723534E-7	DEFECT
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9998550615559976	WITHOUT_CLASSIFICATION	1.4493844400242947E-4	DEFECT
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999997783889157	WITHOUT_CLASSIFICATION	2.2161108424870346E-7	DEFECT
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999908267901014	WITHOUT_CLASSIFICATION	9.173209898596639E-6	DEFECT
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999982428432542	WITHOUT_CLASSIFICATION	1.7571567458484951E-6	DEFECT
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999997714545715	WITHOUT_CLASSIFICATION	2.285454285069842E-6	DEFECT
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999530301604936	WITHOUT_CLASSIFICATION	4.696983950632805E-5	DEFECT
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999990549185992	WITHOUT_CLASSIFICATION	9.450814008090131E-7	DEFECT
// early exit...	WITHOUT_CLASSIFICATION	0.999681697055659	WITHOUT_CLASSIFICATION	3.1830294434100287E-4	DEFECT
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9992183987953749	WITHOUT_CLASSIFICATION	7.816012046251593E-4	DEFECT
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999958865185804	WITHOUT_CLASSIFICATION	4.11348141960311E-6	DEFECT
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9883824640107662	WITHOUT_CLASSIFICATION	0.011617535989233763	DEFECT
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999978890912	WITHOUT_CLASSIFICATION	2.110908791899454E-9	DEFECT
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999721880225826	WITHOUT_CLASSIFICATION	2.781197741739673E-4	DEFECT
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999782291543355	WITHOUT_CLASSIFICATION	2.1770845664374996E-5	DEFECT
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999837241306663	WITHOUT_CLASSIFICATION	1.627586933371022E-5	DEFECT
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999813819402683	WITHOUT_CLASSIFICATION	1.86180597315873E-5	DEFECT
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999997089683437	WITHOUT_CLASSIFICATION	2.9103165636869206E-7	DEFECT
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999742047868301	WITHOUT_CLASSIFICATION	2.579521316995274E-5	DEFECT
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999975028013982	WITHOUT_CLASSIFICATION	2.4971986018040717E-5	DEFECT
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999887945955676	WITHOUT_CLASSIFICATION	1.120540443253497E-5	DEFECT
//bad cast	WITHOUT_CLASSIFICATION	0.9999954328884983	WITHOUT_CLASSIFICATION	4.567111501568545E-6	DEFECT
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999962973869635	WITHOUT_CLASSIFICATION	3.7026130366313654E-6	DEFECT
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999923976399	WITHOUT_CLASSIFICATION	7.602359981747694E-9	DEFECT
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999997360031	WITHOUT_CLASSIFICATION	2.639969633467633E-10	DEFECT
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999998243229941	WITHOUT_CLASSIFICATION	1.756770059194013E-7	DEFECT
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999949760911375	WITHOUT_CLASSIFICATION	5.023908862492609E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997707465832	WITHOUT_CLASSIFICATION	2.2925341679409706E-7	DEFECT
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999993158349187	WITHOUT_CLASSIFICATION	6.841650812119038E-7	DEFECT
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999988964411409	WITHOUT_CLASSIFICATION	1.1035588590836998E-6	DEFECT
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999922275180885	WITHOUT_CLASSIFICATION	7.772481911496691E-6	DEFECT
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9994038411301414	WITHOUT_CLASSIFICATION	5.961588698587704E-4	DEFECT
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999993094076236	WITHOUT_CLASSIFICATION	6.905923764740705E-7	DEFECT
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999900950236642	WITHOUT_CLASSIFICATION	9.904976335897732E-6	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995234403047	WITHOUT_CLASSIFICATION	4.765596952084418E-7	DEFECT
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999998698491388	WITHOUT_CLASSIFICATION	1.3015086115446102E-7	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9993989600361133	WITHOUT_CLASSIFICATION	6.010399638867231E-4	DEFECT
// We've been here before	WITHOUT_CLASSIFICATION	0.9999794634500752	WITHOUT_CLASSIFICATION	2.053654992479912E-5	DEFECT
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999983466351384	WITHOUT_CLASSIFICATION	1.653364861491787E-6	DEFECT
// do the work	WITHOUT_CLASSIFICATION	0.9993989600361133	WITHOUT_CLASSIFICATION	6.010399638867231E-4	DEFECT
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999869807524	WITHOUT_CLASSIFICATION	1.3019247664157113E-8	DEFECT
// or its key changed	WITHOUT_CLASSIFICATION	0.999998898809642	WITHOUT_CLASSIFICATION	1.101190357970733E-6	DEFECT
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999999767152674	WITHOUT_CLASSIFICATION	2.3284732555565536E-8	DEFECT
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999937944924348	WITHOUT_CLASSIFICATION	6.205507565237789E-6	DEFECT
// force initialize!	WITHOUT_CLASSIFICATION	0.9999996426268445	WITHOUT_CLASSIFICATION	3.5737315555773185E-7	DEFECT
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999972974863	WITHOUT_CLASSIFICATION	2.702513705205949E-9	DEFECT
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999687312030561	WITHOUT_CLASSIFICATION	3.126879694386035E-5	DEFECT
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999999781963071	WITHOUT_CLASSIFICATION	2.180369294710371E-8	DEFECT
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999967285723554	WITHOUT_CLASSIFICATION	3.271427644603543E-6	DEFECT
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999965164543508	WITHOUT_CLASSIFICATION	3.483545649252812E-6	DEFECT
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999994643357827	WITHOUT_CLASSIFICATION	5.356642173702031E-7	DEFECT
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999998302120924	WITHOUT_CLASSIFICATION	1.697879076363878E-7	DEFECT
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.99999989999472	WITHOUT_CLASSIFICATION	1.0000527999555232E-7	DEFECT
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999999998348027	WITHOUT_CLASSIFICATION	1.6519729963573989E-9	DEFECT
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999988415416022	WITHOUT_CLASSIFICATION	1.1584583977816587E-6	DEFECT
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999898927287609	WITHOUT_CLASSIFICATION	1.0107271239010453E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999846686448197	WITHOUT_CLASSIFICATION	1.5331355180205565E-5	DEFECT
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999846686448197	WITHOUT_CLASSIFICATION	1.5331355180205565E-5	DEFECT
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999990054572725	WITHOUT_CLASSIFICATION	9.945427274789796E-7	DEFECT
//optimization	WITHOUT_CLASSIFICATION	0.9999854346195228	WITHOUT_CLASSIFICATION	1.4565380477189582E-5	DEFECT
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999735241040212	WITHOUT_CLASSIFICATION	2.6475895978846546E-5	DEFECT
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999936414436202	WITHOUT_CLASSIFICATION	6.358556379665281E-6	DEFECT
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999993671575571	WITHOUT_CLASSIFICATION	6.328424428089203E-7	DEFECT
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9858644431002701	WITHOUT_CLASSIFICATION	0.014135556899729942	DEFECT
//memory optimization	WITHOUT_CLASSIFICATION	0.9999477738480521	WITHOUT_CLASSIFICATION	5.222615194776041E-5	DEFECT
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999804854641	WITHOUT_CLASSIFICATION	1.9514535888058704E-8	DEFECT
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999994808752973	WITHOUT_CLASSIFICATION	5.191247027618409E-7	DEFECT
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999835777182327	WITHOUT_CLASSIFICATION	1.6422281767329957E-5	DEFECT
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9999863331026954	WITHOUT_CLASSIFICATION	1.3666897304585936E-5	DEFECT
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999999526454	WITHOUT_CLASSIFICATION	4.735460485405314E-11	DEFECT
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999999478527647	WITHOUT_CLASSIFICATION	5.214723525042644E-8	DEFECT
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999934177319589	WITHOUT_CLASSIFICATION	6.582268041031189E-6	DEFECT
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999999951377537	WITHOUT_CLASSIFICATION	4.862246308775142E-8	DEFECT
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999992597078597	WITHOUT_CLASSIFICATION	7.40292140360555E-7	DEFECT
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999977394938091	WITHOUT_CLASSIFICATION	2.260506190882757E-6	DEFECT
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999994678679139	WITHOUT_CLASSIFICATION	5.321320861478572E-7	DEFECT
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997923371344765	WITHOUT_CLASSIFICATION	2.0766286552344892E-4	DEFECT
//do the test	WITHOUT_CLASSIFICATION	0.9999991532280423	WITHOUT_CLASSIFICATION	8.467719576864701E-7	DEFECT
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999863889652981	WITHOUT_CLASSIFICATION	1.3611034701813807E-5	DEFECT
//unwrap it	WITHOUT_CLASSIFICATION	0.9999945397105415	WITHOUT_CLASSIFICATION	5.460289458496117E-6	DEFECT
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999492835328	WITHOUT_CLASSIFICATION	5.071646739104302E-8	DEFECT
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999727165836	WITHOUT_CLASSIFICATION	2.72834164021329E-8	DEFECT
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999891328155	WITHOUT_CLASSIFICATION	1.0867184544547529E-8	DEFECT
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999760053164	WITHOUT_CLASSIFICATION	2.3994683663549285E-8	DEFECT
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999994330406	WITHOUT_CLASSIFICATION	5.66959403425182E-10	DEFECT
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999946805666604	WITHOUT_CLASSIFICATION	5.319433339603254E-6	DEFECT
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999969662455143	WITHOUT_CLASSIFICATION	3.0337544857601456E-6	DEFECT
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999969966403051	WITHOUT_CLASSIFICATION	3.0033596948338493E-6	DEFECT
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999997531746308	WITHOUT_CLASSIFICATION	2.468253692038549E-6	DEFECT
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999989761963498	WITHOUT_CLASSIFICATION	1.0238036501081908E-6	DEFECT
//count++;	WITHOUT_CLASSIFICATION	0.9999833306555816	WITHOUT_CLASSIFICATION	1.6669344418286303E-5	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993943279508	WITHOUT_CLASSIFICATION	6.056720491507197E-7	DEFECT
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999971884395852	WITHOUT_CLASSIFICATION	2.8115604147241688E-6	DEFECT
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999980468239608	WITHOUT_CLASSIFICATION	1.95317603926472E-6	DEFECT
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999984710860486	WITHOUT_CLASSIFICATION	1.5289139514270706E-6	DEFECT
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999904943681518	WITHOUT_CLASSIFICATION	9.505631848144931E-6	DEFECT
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999981015158478	WITHOUT_CLASSIFICATION	1.8984841523513935E-6	DEFECT
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999123012123426	WITHOUT_CLASSIFICATION	8.769878765743038E-5	DEFECT
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999921983487718	WITHOUT_CLASSIFICATION	7.801651228191392E-6	DEFECT
// create one	WITHOUT_CLASSIFICATION	0.9999999579630615	WITHOUT_CLASSIFICATION	4.2036938492552334E-8	DEFECT
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9578899645627071	WITHOUT_CLASSIFICATION	0.042110035437292824	DEFECT
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998271015821	WITHOUT_CLASSIFICATION	1.728984180026605E-7	DEFECT
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999898656061443	WITHOUT_CLASSIFICATION	1.0134393855634392E-5	DEFECT
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999998613286543	WITHOUT_CLASSIFICATION	1.3867134583055847E-7	DEFECT
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959196314968	WITHOUT_CLASSIFICATION	4.0803685031413636E-6	DEFECT
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925357963961	WITHOUT_CLASSIFICATION	7.464203603845653E-6	DEFECT
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993983345064	WITHOUT_CLASSIFICATION	6.0166549360425206E-6	DEFECT
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999825088728101	WITHOUT_CLASSIFICATION	1.7491127189930157E-5	DEFECT
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999994505335003	WITHOUT_CLASSIFICATION	5.494664996975429E-7	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999062456278	WITHOUT_CLASSIFICATION	9.375437213801929E-8	DEFECT
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999999729136961	WITHOUT_CLASSIFICATION	2.7086303865800874E-8	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9994562274486212	WITHOUT_CLASSIFICATION	5.43772551378855E-4	DEFECT
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999288350439373	WITHOUT_CLASSIFICATION	7.116495606269489E-5	DEFECT
// don't care...	WITHOUT_CLASSIFICATION	0.9994562274486212	WITHOUT_CLASSIFICATION	5.43772551378855E-4	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999992402017892	WITHOUT_CLASSIFICATION	7.597982107061846E-7	DEFECT
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999996708339486	WITHOUT_CLASSIFICATION	3.2916605152014906E-7	DEFECT
// named parameter	WITHOUT_CLASSIFICATION	0.9999997238560839	WITHOUT_CLASSIFICATION	2.761439161094735E-7	DEFECT
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999978936869489	WITHOUT_CLASSIFICATION	2.106313051159588E-6	DEFECT
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999928865480397	WITHOUT_CLASSIFICATION	7.113451960246032E-6	DEFECT
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999949441811339	WITHOUT_CLASSIFICATION	5.055818866170078E-6	DEFECT
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999877542433	WITHOUT_CLASSIFICATION	1.2245756704677916E-7	DEFECT
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999780157597655	WITHOUT_CLASSIFICATION	2.198424023449628E-5	DEFECT
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998370870811	WITHOUT_CLASSIFICATION	1.6291291899308855E-7	DEFECT
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999999653473725	WITHOUT_CLASSIFICATION	3.465262749337905E-7	DEFECT
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999998496610297	WITHOUT_CLASSIFICATION	1.5033897019711283E-7	DEFECT
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999999954432612	WITHOUT_CLASSIFICATION	4.556738805057656E-8	DEFECT
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999958704380459	WITHOUT_CLASSIFICATION	4.1295619541254855E-6	DEFECT
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9985121607284062	WITHOUT_CLASSIFICATION	0.001487839271593769	DEFECT
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9999999618075095	WITHOUT_CLASSIFICATION	3.8192490521235203E-8	DEFECT
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999706844739	WITHOUT_CLASSIFICATION	2.9315526157547682E-8	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999959801098491	WITHOUT_CLASSIFICATION	4.019890150884817E-6	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999959801098491	WITHOUT_CLASSIFICATION	4.019890150884817E-6	DEFECT
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999909770792005	WITHOUT_CLASSIFICATION	9.022920799516662E-6	DEFECT
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999998542123032	WITHOUT_CLASSIFICATION	1.457876967097803E-7	DEFECT
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999994439303268	WITHOUT_CLASSIFICATION	5.560696732124561E-7	DEFECT
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999822171534	WITHOUT_CLASSIFICATION	1.7782846674521464E-8	DEFECT
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999996789636916	WITHOUT_CLASSIFICATION	3.2103630847832736E-7	DEFECT
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999999146581091	WITHOUT_CLASSIFICATION	8.534189090432976E-8	DEFECT
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9997990327151423	WITHOUT_CLASSIFICATION	2.0096728485779545E-4	DEFECT
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999990969718828	WITHOUT_CLASSIFICATION	9.03028117139493E-7	DEFECT
// grab its current state	WITHOUT_CLASSIFICATION	0.9999999292582359	WITHOUT_CLASSIFICATION	7.074176401123057E-8	DEFECT
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999993098861321	WITHOUT_CLASSIFICATION	6.901138680455701E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998650233156	WITHOUT_CLASSIFICATION	1.3497668433319282E-7	DEFECT
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.99999999215906	WITHOUT_CLASSIFICATION	7.840940095266042E-9	DEFECT
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999795910428	WITHOUT_CLASSIFICATION	2.0408957211879376E-8	DEFECT
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999997448387284	WITHOUT_CLASSIFICATION	2.5516127152737645E-7	DEFECT
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999120274955	WITHOUT_CLASSIFICATION	8.797250449988091E-7	DEFECT
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999996687305783	WITHOUT_CLASSIFICATION	3.312694216639573E-7	DEFECT
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999995860471383	WITHOUT_CLASSIFICATION	4.1395286169575665E-7	DEFECT
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9999997954741582	WITHOUT_CLASSIFICATION	2.045258418921964E-7	DEFECT
//use the current version	WITHOUT_CLASSIFICATION	0.9999963778200206	WITHOUT_CLASSIFICATION	3.622179979420639E-6	DEFECT
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999820470331	WITHOUT_CLASSIFICATION	1.7952966861134032E-8	DEFECT
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999946079312262	WITHOUT_CLASSIFICATION	5.392068773834644E-6	DEFECT
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999999916695329	WITHOUT_CLASSIFICATION	8.330467092371706E-9	DEFECT
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999999423631206	WITHOUT_CLASSIFICATION	5.7636879246133884E-8	DEFECT
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999999927581245	WITHOUT_CLASSIFICATION	7.241875500770606E-9	DEFECT
//even process null collections	WITHOUT_CLASSIFICATION	0.9999776856868933	WITHOUT_CLASSIFICATION	2.231431310675521E-5	DEFECT
// get the id from the object	WITHOUT_CLASSIFICATION	0.999999411389061	WITHOUT_CLASSIFICATION	5.886109389139642E-7	DEFECT
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999925395561402	WITHOUT_CLASSIFICATION	7.460443859718982E-6	DEFECT
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.999445424028299	WITHOUT_CLASSIFICATION	5.545759717009916E-4	DEFECT
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999955001047353	WITHOUT_CLASSIFICATION	4.499895264660771E-6	DEFECT
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999710024633207	WITHOUT_CLASSIFICATION	2.899753667928167E-5	DEFECT
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999992457629401	WITHOUT_CLASSIFICATION	7.542370598091062E-7	DEFECT
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999994791759846	WITHOUT_CLASSIFICATION	5.208240153271232E-7	DEFECT
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9989058640858695	WITHOUT_CLASSIFICATION	0.001094135914130538	DEFECT
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999986974059418	WITHOUT_CLASSIFICATION	1.302594058210716E-6	DEFECT
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.999980943549995	WITHOUT_CLASSIFICATION	1.9056450004994377E-5	DEFECT
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998421430697	WITHOUT_CLASSIFICATION	1.57856930297481E-7	DEFECT
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988996609275	WITHOUT_CLASSIFICATION	1.100339072531955E-6	DEFECT
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999982970107791	WITHOUT_CLASSIFICATION	1.7029892208864902E-6	DEFECT
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999997929493178	WITHOUT_CLASSIFICATION	2.07050682187803E-6	DEFECT
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999975632369854	WITHOUT_CLASSIFICATION	2.436763014558769E-6	DEFECT
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999924309548945	WITHOUT_CLASSIFICATION	7.569045105515612E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992172585549	WITHOUT_CLASSIFICATION	7.827414451328876E-7	DEFECT
//some statistics	WITHOUT_CLASSIFICATION	0.9999995087367088	WITHOUT_CLASSIFICATION	4.912632911254874E-7	DEFECT
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998659907509503	WITHOUT_CLASSIFICATION	1.340092490498251E-4	DEFECT
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999376184686	WITHOUT_CLASSIFICATION	6.238153135756096E-8	DEFECT
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9996324054875556	WITHOUT_CLASSIFICATION	3.675945124443867E-4	DEFECT
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9668215089712986	WITHOUT_CLASSIFICATION	0.033178491028701414	DEFECT
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999923052588	WITHOUT_CLASSIFICATION	7.694741256779129E-9	DEFECT
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997287593234	WITHOUT_CLASSIFICATION	2.7124067657501986E-7	DEFECT
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999998350853859	WITHOUT_CLASSIFICATION	1.649146141019771E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994869850645	WITHOUT_CLASSIFICATION	5.130149355751159E-7	DEFECT
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999966394325	WITHOUT_CLASSIFICATION	3.3605674213159196E-9	DEFECT
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9911685201124152	WITHOUT_CLASSIFICATION	0.008831479887584776	DEFECT
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999995783610222	WITHOUT_CLASSIFICATION	4.2163897785605046E-7	DEFECT
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999986246287987	WITHOUT_CLASSIFICATION	1.3753712012110876E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999983103656915	WITHOUT_CLASSIFICATION	1.689634308521776E-6	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999983103656915	WITHOUT_CLASSIFICATION	1.689634308521776E-6	DEFECT
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999937764047733	WITHOUT_CLASSIFICATION	6.223595226742545E-6	DEFECT
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999253233473172	WITHOUT_CLASSIFICATION	7.467665268284501E-5	DEFECT
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999976586674496	WITHOUT_CLASSIFICATION	2.3413325503445845E-6	DEFECT
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999750702526747	WITHOUT_CLASSIFICATION	2.4929747325304313E-5	DEFECT
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999999304796127	WITHOUT_CLASSIFICATION	6.952038729822837E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999989143224276	WITHOUT_CLASSIFICATION	1.0856775724118268E-6	DEFECT
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999998147774093	WITHOUT_CLASSIFICATION	1.852225906369137E-7	DEFECT
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999999869803801	WITHOUT_CLASSIFICATION	1.3019619902248115E-7	DEFECT
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999996446579701	WITHOUT_CLASSIFICATION	3.553420298895945E-7	DEFECT
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999356092457	WITHOUT_CLASSIFICATION	6.43907542488514E-8	DEFECT
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999980990311843	WITHOUT_CLASSIFICATION	1.900968815703755E-5	DEFECT
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999454721322595	WITHOUT_CLASSIFICATION	5.452786774062689E-5	DEFECT
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999997919169159	WITHOUT_CLASSIFICATION	2.0808308410108014E-6	DEFECT
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999999972283938	WITHOUT_CLASSIFICATION	2.7716062046684044E-9	DEFECT
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9999995818968955	WITHOUT_CLASSIFICATION	4.1810310444008725E-7	DEFECT
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9997134221143462	WITHOUT_CLASSIFICATION	2.865778856538694E-4	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999946366220711	WITHOUT_CLASSIFICATION	5.363377928883552E-6	DEFECT
//cachedState,	WITHOUT_CLASSIFICATION	0.9999981480377802	WITHOUT_CLASSIFICATION	1.8519622197768299E-6	DEFECT
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999523981467721	WITHOUT_CLASSIFICATION	4.7601853227917E-5	DEFECT
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999820080694333	WITHOUT_CLASSIFICATION	1.7991930566739132E-5	DEFECT
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999999882618039	WITHOUT_CLASSIFICATION	1.1738196133005804E-8	DEFECT
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999965838650163	WITHOUT_CLASSIFICATION	3.4161349836795633E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999482262848953	WITHOUT_CLASSIFICATION	5.177371510467682E-5	DEFECT
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9982039323813161	WITHOUT_CLASSIFICATION	0.0017960676186838979	DEFECT
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9908738929003664	WITHOUT_CLASSIFICATION	0.009126107099633502	DEFECT
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9581102881059498	WITHOUT_CLASSIFICATION	0.04188971189405021	DEFECT
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999988559139706	WITHOUT_CLASSIFICATION	1.1440860293356173E-6	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996173751503539	WITHOUT_CLASSIFICATION	3.826248496461154E-4	DEFECT
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999999574983095	WITHOUT_CLASSIFICATION	4.2501690569941206E-8	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999482262848953	WITHOUT_CLASSIFICATION	5.177371510467682E-5	DEFECT
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9997978158545566	WITHOUT_CLASSIFICATION	2.0218414544345407E-4	DEFECT
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.99999157719436	WITHOUT_CLASSIFICATION	8.422805639960238E-6	DEFECT
//DELETED	WITHOUT_CLASSIFICATION	0.9999766056058945	WITHOUT_CLASSIFICATION	2.3394394105457195E-5	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999994550779869	WITHOUT_CLASSIFICATION	5.449220131553299E-7	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999966676734	WITHOUT_CLASSIFICATION	3.332326598539727E-9	DEFECT
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999996089024576	WITHOUT_CLASSIFICATION	3.910975424196935E-7	DEFECT
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999981168012936	WITHOUT_CLASSIFICATION	1.8831987063856905E-6	DEFECT
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999999805322043	WITHOUT_CLASSIFICATION	1.946779568730022E-8	DEFECT
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999996637563183	WITHOUT_CLASSIFICATION	3.362436815844175E-7	DEFECT
//before cascade!	WITHOUT_CLASSIFICATION	0.9999994550779869	WITHOUT_CLASSIFICATION	5.449220131553299E-7	DEFECT
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999999897668151	WITHOUT_CLASSIFICATION	1.0233184791583327E-8	DEFECT
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999979689841	WITHOUT_CLASSIFICATION	2.0310158993338022E-8	DEFECT
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999460634138869	WITHOUT_CLASSIFICATION	5.393658611314215E-5	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999978901840855	WITHOUT_CLASSIFICATION	2.109815914496179E-5	DEFECT
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999997853825248	WITHOUT_CLASSIFICATION	2.1461747512457342E-7	DEFECT
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999998650233156	WITHOUT_CLASSIFICATION	1.3497668433319282E-7	DEFECT
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999805508866	WITHOUT_CLASSIFICATION	1.944911336932202E-8	DEFECT
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992133809351	WITHOUT_CLASSIFICATION	7.866190648309122E-7	DEFECT
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999998209219569	WITHOUT_CLASSIFICATION	1.790780430582066E-7	DEFECT
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9997710994821914	WITHOUT_CLASSIFICATION	2.2890051780861855E-4	DEFECT
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999997592045351	WITHOUT_CLASSIFICATION	2.407954649107465E-7	DEFECT
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999919515839393	WITHOUT_CLASSIFICATION	8.048416060633796E-6	DEFECT
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999999943679172	WITHOUT_CLASSIFICATION	5.6320828467755105E-9	DEFECT
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999994634260784	WITHOUT_CLASSIFICATION	5.36573921551484E-7	DEFECT
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998591011156	WITHOUT_CLASSIFICATION	1.4089888442251014E-7	DEFECT
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999989395376814	WITHOUT_CLASSIFICATION	1.0604623185521024E-6	DEFECT
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999939542437585	WITHOUT_CLASSIFICATION	6.0457562414983E-5	DEFECT
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999999968864258	WITHOUT_CLASSIFICATION	3.113574207390696E-9	DEFECT
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999998252655494	WITHOUT_CLASSIFICATION	1.7473445060645394E-7	DEFECT
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999550895184407	WITHOUT_CLASSIFICATION	4.491048155938896E-5	DEFECT
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999987136512	WITHOUT_CLASSIFICATION	1.2863487688776056E-9	DEFECT
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999997489428725	WITHOUT_CLASSIFICATION	2.5105712761663684E-7	DEFECT
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999828507243074	WITHOUT_CLASSIFICATION	1.7149275692562744E-5	DEFECT
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999988221510296	WITHOUT_CLASSIFICATION	1.1778489703334696E-6	DEFECT
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999993317555241	WITHOUT_CLASSIFICATION	6.682444757829149E-7	DEFECT
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999988389856265	WITHOUT_CLASSIFICATION	1.1610143734986796E-5	DEFECT
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999856005665384	WITHOUT_CLASSIFICATION	1.4399433461617747E-5	DEFECT
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999722883428	WITHOUT_CLASSIFICATION	2.771165720551207E-8	DEFECT
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999940128901923	WITHOUT_CLASSIFICATION	5.987109807704438E-6	DEFECT
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999999278437627	WITHOUT_CLASSIFICATION	7.21562373851266E-8	DEFECT
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999816911384579	WITHOUT_CLASSIFICATION	1.830886154204434E-5	DEFECT
// Note this!!	WITHOUT_CLASSIFICATION	0.9999981611743687	WITHOUT_CLASSIFICATION	1.8388256312216924E-6	DEFECT
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999884159720671	WITHOUT_CLASSIFICATION	1.1584027932964148E-5	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999485608774	WITHOUT_CLASSIFICATION	5.143912264218824E-8	DEFECT
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998464718884	WITHOUT_CLASSIFICATION	1.5352811142105743E-7	DEFECT
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9999908924342144	WITHOUT_CLASSIFICATION	9.10756578563528E-6	DEFECT
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999991275094456	WITHOUT_CLASSIFICATION	8.724905543120656E-7	DEFECT
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999994103571604	WITHOUT_CLASSIFICATION	5.89642839530634E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999999974559759	WITHOUT_CLASSIFICATION	2.5440240466079533E-9	DEFECT
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999378280934369	WITHOUT_CLASSIFICATION	6.217190656310604E-5	DEFECT
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999992729993907	WITHOUT_CLASSIFICATION	7.270006092146616E-7	DEFECT
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999998978316144	WITHOUT_CLASSIFICATION	1.0216838559677731E-6	DEFECT
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999997765054717	WITHOUT_CLASSIFICATION	2.2349452827640584E-7	DEFECT
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9954468530103139	WITHOUT_CLASSIFICATION	0.004553146989686192	DEFECT
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999996114097026	WITHOUT_CLASSIFICATION	3.8859029737321524E-7	DEFECT
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999715253395649	WITHOUT_CLASSIFICATION	2.8474660435142276E-5	DEFECT
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999991757744162	WITHOUT_CLASSIFICATION	8.242255838952641E-7	DEFECT
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999998680972812	WITHOUT_CLASSIFICATION	1.3190271880501513E-6	DEFECT
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9217692135877401	WITHOUT_CLASSIFICATION	0.07823078641225985	DEFECT
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999999925634686	WITHOUT_CLASSIFICATION	7.43653139595176E-9	DEFECT
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999984985549406	WITHOUT_CLASSIFICATION	1.5014450593778813E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999918217439034	WITHOUT_CLASSIFICATION	8.178256096550635E-6	DEFECT
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999988106935518	WITHOUT_CLASSIFICATION	1.1893064482439943E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996811305150888	WITHOUT_CLASSIFICATION	3.1886948491125405E-4	DEFECT
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999999991500874	WITHOUT_CLASSIFICATION	8.499126034074947E-9	DEFECT
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999998868614447	WITHOUT_CLASSIFICATION	1.1313855530719153E-6	DEFECT
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999964637954525	WITHOUT_CLASSIFICATION	3.5362045475031725E-6	DEFECT
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999999241693394	WITHOUT_CLASSIFICATION	7.583066072443934E-8	DEFECT
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999879093888	WITHOUT_CLASSIFICATION	1.2090611192802156E-8	DEFECT
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999988639988218	WITHOUT_CLASSIFICATION	1.1360011782752328E-6	DEFECT
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999999327216714	WITHOUT_CLASSIFICATION	6.727832861325827E-8	DEFECT
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999997109653852	WITHOUT_CLASSIFICATION	2.890346148810887E-7	DEFECT
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999485608774	WITHOUT_CLASSIFICATION	5.143912264218824E-8	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999443906766985	WITHOUT_CLASSIFICATION	5.5609323301571985E-5	DEFECT
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999994021019911	WITHOUT_CLASSIFICATION	5.978980087677347E-7	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999996009725789	WITHOUT_CLASSIFICATION	3.990274210308756E-7	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999968834407472	WITHOUT_CLASSIFICATION	3.1165592528202764E-6	DEFECT
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999999093550614	WITHOUT_CLASSIFICATION	9.064493865170976E-8	DEFECT
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999575382924192	WITHOUT_CLASSIFICATION	4.246170758078734E-5	DEFECT
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996263430987	WITHOUT_CLASSIFICATION	3.7365690119788247E-7	DEFECT
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998857940728	WITHOUT_CLASSIFICATION	1.1420592712381986E-7	DEFECT
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999954250207	WITHOUT_CLASSIFICATION	4.574979326048688E-9	DEFECT
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999974926276005	WITHOUT_CLASSIFICATION	2.5073723995299244E-6	DEFECT
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999999122003998	WITHOUT_CLASSIFICATION	8.779960020569733E-7	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999859263725492	WITHOUT_CLASSIFICATION	1.407362745074521E-5	DEFECT
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999999663778	WITHOUT_CLASSIFICATION	3.3622206228539873E-10	DEFECT
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999998236366675	WITHOUT_CLASSIFICATION	1.7636333239533036E-7	DEFECT
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999992402017892	WITHOUT_CLASSIFICATION	7.597982107061846E-7	DEFECT
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999999971688213	WITHOUT_CLASSIFICATION	2.8311787012531324E-8	DEFECT
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.999999662364547	WITHOUT_CLASSIFICATION	3.37635453022253E-7	DEFECT
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999942255480277	WITHOUT_CLASSIFICATION	5.7744519722155515E-6	DEFECT
// all clear	WITHOUT_CLASSIFICATION	0.9999997483242214	WITHOUT_CLASSIFICATION	2.516757784480606E-7	DEFECT
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999995196085059	WITHOUT_CLASSIFICATION	4.803914940895637E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999940778928641	WITHOUT_CLASSIFICATION	5.922107135906556E-6	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999940778928641	WITHOUT_CLASSIFICATION	5.922107135906556E-6	DEFECT
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999997809628928	WITHOUT_CLASSIFICATION	2.1903710726405516E-7	DEFECT
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999306989416	WITHOUT_CLASSIFICATION	6.930105846846786E-8	DEFECT
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999972259803056	WITHOUT_CLASSIFICATION	2.77401969435448E-6	DEFECT
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999715370073994	WITHOUT_CLASSIFICATION	2.846299260059434E-5	DEFECT
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999914384137037	WITHOUT_CLASSIFICATION	8.561586296283273E-6	DEFECT
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999632867715451	WITHOUT_CLASSIFICATION	3.671322845493817E-5	DEFECT
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999990658905722	WITHOUT_CLASSIFICATION	9.341094279187338E-7	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999977051649567	WITHOUT_CLASSIFICATION	2.294835043375756E-6	DEFECT
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999977051649567	WITHOUT_CLASSIFICATION	2.294835043375756E-6	DEFECT
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999965660724459	WITHOUT_CLASSIFICATION	3.43392755398015E-6	DEFECT
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999994917881462	WITHOUT_CLASSIFICATION	5.08211853852038E-7	DEFECT
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999906236808798	WITHOUT_CLASSIFICATION	9.376319120157328E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999957311761474	WITHOUT_CLASSIFICATION	4.268823852533162E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999957311761474	WITHOUT_CLASSIFICATION	4.268823852533162E-6	DEFECT
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999957311761474	WITHOUT_CLASSIFICATION	4.268823852533162E-6	DEFECT
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999431797056307	WITHOUT_CLASSIFICATION	5.682029436935509E-5	DEFECT
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999999123086684	WITHOUT_CLASSIFICATION	8.769133160144461E-8	DEFECT
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999878664853	WITHOUT_CLASSIFICATION	1.2133514675923385E-8	DEFECT
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9891909378525402	WITHOUT_CLASSIFICATION	0.010809062147459862	DEFECT
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999927919577815	WITHOUT_CLASSIFICATION	7.208042218641475E-6	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999999591144919	WITHOUT_CLASSIFICATION	4.0885508102529115E-7	DEFECT
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999992037192	WITHOUT_CLASSIFICATION	7.962808213540101E-10	DEFECT
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999639107203582	WITHOUT_CLASSIFICATION	3.608927964187336E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999999872364548	WITHOUT_CLASSIFICATION	1.2763545333336509E-8	DEFECT
// igndore it...	WITHOUT_CLASSIFICATION	0.9999245345367692	WITHOUT_CLASSIFICATION	7.546546323073907E-5	DEFECT
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999979017950552	WITHOUT_CLASSIFICATION	2.0982049448154456E-6	DEFECT
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9992248560834998	WITHOUT_CLASSIFICATION	7.751439165002038E-4	DEFECT
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999813699168669	WITHOUT_CLASSIFICATION	1.863008313312342E-5	DEFECT
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999984239587055	WITHOUT_CLASSIFICATION	1.576041294507005E-5	DEFECT
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999982017632857	WITHOUT_CLASSIFICATION	1.7982367143462094E-6	DEFECT
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999978584975864	WITHOUT_CLASSIFICATION	2.1415024135950665E-5	DEFECT
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999989009780438	WITHOUT_CLASSIFICATION	1.0990219562176104E-6	DEFECT
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999989009780438	WITHOUT_CLASSIFICATION	1.0990219562176104E-6	DEFECT
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999990100044098	WITHOUT_CLASSIFICATION	9.899955902578423E-7	DEFECT
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999990100044098	WITHOUT_CLASSIFICATION	9.899955902578423E-7	DEFECT
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999991994613159	WITHOUT_CLASSIFICATION	8.005386841138474E-7	DEFECT
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974454680217	WITHOUT_CLASSIFICATION	2.5545319781736426E-6	DEFECT
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974454680217	WITHOUT_CLASSIFICATION	2.5545319781736426E-6	DEFECT
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999992544758267	WITHOUT_CLASSIFICATION	7.455241733036209E-7	DEFECT
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999987936755281	WITHOUT_CLASSIFICATION	1.2063244718291742E-6	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996520983687	WITHOUT_CLASSIFICATION	3.4790163123431554E-7	DEFECT
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999940778928641	WITHOUT_CLASSIFICATION	5.922107135906556E-6	DEFECT
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999998197142711	WITHOUT_CLASSIFICATION	1.8028572884334388E-7	DEFECT
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999987936755281	WITHOUT_CLASSIFICATION	1.2063244718291742E-6	DEFECT
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9999971905631284	WITHOUT_CLASSIFICATION	2.8094368715566347E-6	DEFECT
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999803937272316	WITHOUT_CLASSIFICATION	1.9606272768461926E-5	DEFECT
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995213063002	WITHOUT_CLASSIFICATION	4.786936998569665E-7	DEFECT
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999996814306361	WITHOUT_CLASSIFICATION	3.185693638193029E-7	DEFECT
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999738748919	WITHOUT_CLASSIFICATION	2.612510806122208E-8	DEFECT
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999999035781377	WITHOUT_CLASSIFICATION	9.642186236953368E-8	DEFECT
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.99999912196689	WITHOUT_CLASSIFICATION	8.780331098617024E-7	DEFECT
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9895205497837064	WITHOUT_CLASSIFICATION	0.01047945021629367	DEFECT
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.99632568780948	WITHOUT_CLASSIFICATION	0.0036743121905198984	DEFECT
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999940036694612	WITHOUT_CLASSIFICATION	5.99633053879239E-6	DEFECT
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999987890403749	WITHOUT_CLASSIFICATION	1.2109596251994734E-6	DEFECT
// Set it!	WITHOUT_CLASSIFICATION	0.9999495221254807	WITHOUT_CLASSIFICATION	5.047787451916375E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999652584362	WITHOUT_CLASSIFICATION	3.474156380665116E-7	DEFECT
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999999570011974	WITHOUT_CLASSIFICATION	4.29988027130226E-8	DEFECT
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9973004277835319	WITHOUT_CLASSIFICATION	0.0026995722164681562	DEFECT
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999930852749848	WITHOUT_CLASSIFICATION	6.914725015247784E-6	DEFECT
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998052213497	WITHOUT_CLASSIFICATION	1.9477865024468736E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998186466874	WITHOUT_CLASSIFICATION	1.8135331260787128E-7	DEFECT
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999998186466874	WITHOUT_CLASSIFICATION	1.8135331260787128E-7	DEFECT
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999997109217327	WITHOUT_CLASSIFICATION	2.890782673235112E-7	DEFECT
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999987125832374	WITHOUT_CLASSIFICATION	1.2874167625972484E-6	DEFECT
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999998804210227	WITHOUT_CLASSIFICATION	1.195789772652565E-7	DEFECT
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999997837283221	WITHOUT_CLASSIFICATION	2.1627167790639426E-6	DEFECT
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998544682467	WITHOUT_CLASSIFICATION	1.4553175339684903E-7	DEFECT
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999278191021007	WITHOUT_CLASSIFICATION	7.218089789930698E-5	DEFECT
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999044556003	WITHOUT_CLASSIFICATION	9.55443997282624E-8	DEFECT
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999991066932704	WITHOUT_CLASSIFICATION	8.933067296141404E-7	DEFECT
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999472155604977	WITHOUT_CLASSIFICATION	5.278443950232163E-5	DEFECT
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999999406588838	WITHOUT_CLASSIFICATION	5.9341116218539774E-8	DEFECT
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999998371001655	WITHOUT_CLASSIFICATION	1.6289983444637187E-7	DEFECT
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999859263725492	WITHOUT_CLASSIFICATION	1.407362745074521E-5	DEFECT
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999999934716018	WITHOUT_CLASSIFICATION	6.5283981214711786E-9	DEFECT
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999489272919971	WITHOUT_CLASSIFICATION	5.107270800292318E-5	DEFECT
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999987340624349	WITHOUT_CLASSIFICATION	1.265937565084841E-6	DEFECT
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999993847721496	WITHOUT_CLASSIFICATION	6.152278503595551E-7	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999983724186	WITHOUT_CLASSIFICATION	1.6275813971330648E-8	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999983724186	WITHOUT_CLASSIFICATION	1.6275813971330648E-8	DEFECT
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999996400571999	WITHOUT_CLASSIFICATION	3.599428000969249E-7	DEFECT
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9992792321538695	WITHOUT_CLASSIFICATION	7.207678461306372E-4	DEFECT
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9994130823868351	WITHOUT_CLASSIFICATION	5.869176131648519E-4	DEFECT
// The property is a component...	WITHOUT_CLASSIFICATION	0.9985702119412572	WITHOUT_CLASSIFICATION	0.001429788058742781	DEFECT
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999291313162864	WITHOUT_CLASSIFICATION	7.086868371363344E-5	DEFECT
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999650097171267	WITHOUT_CLASSIFICATION	3.499028287331745E-5	DEFECT
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9999998701527588	WITHOUT_CLASSIFICATION	1.2984724116192595E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999877212280017	WITHOUT_CLASSIFICATION	1.227877199828907E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999942308962233	WITHOUT_CLASSIFICATION	5.769103776781284E-6	DEFECT
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999088590917	WITHOUT_CLASSIFICATION	9.114090825580871E-8	DEFECT
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999998300607695	WITHOUT_CLASSIFICATION	1.6993923057337549E-7	DEFECT
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999877212280017	WITHOUT_CLASSIFICATION	1.227877199828907E-5	DEFECT
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9999239035880837	WITHOUT_CLASSIFICATION	7.60964119163279E-5	DEFECT
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999996930027384	WITHOUT_CLASSIFICATION	3.06997261558908E-7	DEFECT
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999998539055309	WITHOUT_CLASSIFICATION	1.4609446909860285E-6	DEFECT
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999992999294117	WITHOUT_CLASSIFICATION	7.000705883656969E-7	DEFECT
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998648923573	WITHOUT_CLASSIFICATION	1.351076427920876E-7	DEFECT
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999995711763	WITHOUT_CLASSIFICATION	4.288236979420864E-9	DEFECT
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999992411672	WITHOUT_CLASSIFICATION	7.588326681501989E-10	DEFECT
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.999999610832838	WITHOUT_CLASSIFICATION	3.891671621142167E-7	DEFECT
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999997044169004	WITHOUT_CLASSIFICATION	2.9558309954098117E-7	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999634941556155	WITHOUT_CLASSIFICATION	3.650584438453611E-5	DEFECT
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999851976606597	WITHOUT_CLASSIFICATION	1.4802339340145845E-5	DEFECT
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999788488159254	WITHOUT_CLASSIFICATION	2.1151184074564376E-5	DEFECT
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999999869113602	WITHOUT_CLASSIFICATION	1.3088639770997668E-8	DEFECT
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999988365096284	WITHOUT_CLASSIFICATION	1.1634903715377506E-6	DEFECT
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999951619631104	WITHOUT_CLASSIFICATION	4.838036889510035E-6	DEFECT
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999968255446	WITHOUT_CLASSIFICATION	3.174455282232908E-9	DEFECT
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999999929649719	WITHOUT_CLASSIFICATION	7.035028215261165E-9	DEFECT
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.99998101977235	WITHOUT_CLASSIFICATION	1.8980227649997907E-5	DEFECT
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999655506134653	WITHOUT_CLASSIFICATION	3.444938653463557E-5	DEFECT
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999999996470282	WITHOUT_CLASSIFICATION	3.529718302633856E-10	DEFECT
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999998061040417	WITHOUT_CLASSIFICATION	1.93895958212446E-7	DEFECT
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9999979312040737	WITHOUT_CLASSIFICATION	2.068795926406563E-6	DEFECT
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9996371147907038	WITHOUT_CLASSIFICATION	3.628852092961678E-4	DEFECT
// #2	WITHOUT_CLASSIFICATION	0.9999909811829972	WITHOUT_CLASSIFICATION	9.018817002664795E-6	DEFECT
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999950333318	WITHOUT_CLASSIFICATION	4.96666811593008E-9	DEFECT
// nothing to do	WITHOUT_CLASSIFICATION	0.9999979940865101	WITHOUT_CLASSIFICATION	2.00591348985349E-6	DEFECT
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999281907477	WITHOUT_CLASSIFICATION	7.180925229592362E-8	DEFECT
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999787274624	WITHOUT_CLASSIFICATION	2.127253758538637E-7	DEFECT
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999999567965774	WITHOUT_CLASSIFICATION	4.320342264986374E-8	DEFECT
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9999995432119252	WITHOUT_CLASSIFICATION	4.5678807479106864E-7	DEFECT
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.999999998373249	WITHOUT_CLASSIFICATION	1.6267509179666965E-9	DEFECT
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999450025234103	WITHOUT_CLASSIFICATION	5.499747658965089E-5	DEFECT
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9996921279650963	WITHOUT_CLASSIFICATION	3.078720349035984E-4	DEFECT
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999999886025083	WITHOUT_CLASSIFICATION	1.1397491653468864E-8	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999822015121	WITHOUT_CLASSIFICATION	1.779848790352036E-8	DEFECT
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999976870475752	WITHOUT_CLASSIFICATION	2.312952424833768E-6	DEFECT
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999996898902239	WITHOUT_CLASSIFICATION	3.101097759719586E-7	DEFECT
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999998819066346	WITHOUT_CLASSIFICATION	1.1809336540223495E-6	DEFECT
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999905751772	WITHOUT_CLASSIFICATION	9.424822760279276E-9	DEFECT
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999849690109487	WITHOUT_CLASSIFICATION	1.5030989051259236E-5	DEFECT
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999645379463	WITHOUT_CLASSIFICATION	3.5462053681984816E-8	DEFECT
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999997264831981	WITHOUT_CLASSIFICATION	2.735168018442963E-7	DEFECT
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999999863004561	WITHOUT_CLASSIFICATION	1.369954383659525E-8	DEFECT
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998681080037	WITHOUT_CLASSIFICATION	1.318919964246876E-7	DEFECT
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999982839235847	WITHOUT_CLASSIFICATION	1.7160764153559271E-6	DEFECT
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999993483191693	WITHOUT_CLASSIFICATION	6.516808308362721E-7	DEFECT
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999492601243999	WITHOUT_CLASSIFICATION	5.073987560020601E-5	DEFECT
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999999614361583	WITHOUT_CLASSIFICATION	3.856384173598082E-8	DEFECT
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996617310838	WITHOUT_CLASSIFICATION	3.382689162613631E-7	DEFECT
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999911925636306	WITHOUT_CLASSIFICATION	8.807436369402242E-6	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996265910455	WITHOUT_CLASSIFICATION	3.734089544880043E-7	DEFECT
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999999985716917	WITHOUT_CLASSIFICATION	1.4283082963683915E-8	DEFECT
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999972752073	WITHOUT_CLASSIFICATION	2.7247927590695913E-9	DEFECT
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9997740971713627	WITHOUT_CLASSIFICATION	2.2590282863740177E-4	DEFECT
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999936048903	WITHOUT_CLASSIFICATION	6.39510976979234E-9	DEFECT
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999988178610792	WITHOUT_CLASSIFICATION	1.182138920739958E-6	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999937445814472	WITHOUT_CLASSIFICATION	6.255418552828615E-6	DEFECT
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999704605937658	WITHOUT_CLASSIFICATION	2.9539406234223634E-5	DEFECT
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999996794333369	WITHOUT_CLASSIFICATION	3.2056666306208385E-7	DEFECT
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999994100248579	WITHOUT_CLASSIFICATION	5.899751420010212E-7	DEFECT
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999996506668191	WITHOUT_CLASSIFICATION	3.49333180983014E-7	DEFECT
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995953286988	WITHOUT_CLASSIFICATION	4.04671301233853E-7	DEFECT
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999687802399477	WITHOUT_CLASSIFICATION	3.121976005223651E-5	DEFECT
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9879488569974688	DEFECT	0.012051143002531227	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9997183096056985	WITHOUT_CLASSIFICATION	2.8169039430158934E-4	DEFECT
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999512722648275	WITHOUT_CLASSIFICATION	4.8727735172537515E-5	DEFECT
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996265910455	WITHOUT_CLASSIFICATION	3.734089544880043E-7	DEFECT
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999986177801145	WITHOUT_CLASSIFICATION	1.3822198854937909E-6	DEFECT
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999994412286183	WITHOUT_CLASSIFICATION	5.587713817070606E-7	DEFECT
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999951898724537	WITHOUT_CLASSIFICATION	4.81012754627164E-6	DEFECT
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999999090485034	WITHOUT_CLASSIFICATION	9.095149651460569E-8	DEFECT
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9998652222329936	WITHOUT_CLASSIFICATION	1.3477776700633517E-4	DEFECT
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999752971008895	WITHOUT_CLASSIFICATION	2.470289911048626E-5	DEFECT
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999942308962233	WITHOUT_CLASSIFICATION	5.769103776781284E-6	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999972667925344	WITHOUT_CLASSIFICATION	2.7332074655712003E-6	DEFECT
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999999822015121	WITHOUT_CLASSIFICATION	1.779848790352036E-8	DEFECT
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9982666224035156	WITHOUT_CLASSIFICATION	0.0017333775964844236	DEFECT
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999018720794	WITHOUT_CLASSIFICATION	9.812792047216764E-8	DEFECT
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999945648113	WITHOUT_CLASSIFICATION	5.4351886582594705E-9	DEFECT
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999999951308501	WITHOUT_CLASSIFICATION	4.869149890257579E-9	DEFECT
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999999476194475	WITHOUT_CLASSIFICATION	5.238055246309304E-8	DEFECT
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9990281283714408	WITHOUT_CLASSIFICATION	9.718716285591513E-4	DEFECT
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999998925654753	WITHOUT_CLASSIFICATION	1.074345247868455E-7	DEFECT
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999999683125298	WITHOUT_CLASSIFICATION	3.1687470146121305E-8	DEFECT
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.999306573954891	WITHOUT_CLASSIFICATION	6.934260451089747E-4	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999614820347	WITHOUT_CLASSIFICATION	3.85179653089338E-8	DEFECT
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999997279670829	WITHOUT_CLASSIFICATION	2.720329170352082E-7	DEFECT
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999999790477773	WITHOUT_CLASSIFICATION	2.0952222707926092E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999955800294	WITHOUT_CLASSIFICATION	4.419970587321555E-8	DEFECT
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999999955800294	WITHOUT_CLASSIFICATION	4.419970587321555E-8	DEFECT
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999999609550955	WITHOUT_CLASSIFICATION	3.9044904486136685E-8	DEFECT
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999994271617344	WITHOUT_CLASSIFICATION	5.72838265565318E-7	DEFECT
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999999930561193	WITHOUT_CLASSIFICATION	6.943880661009077E-9	DEFECT
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999999994132771	WITHOUT_CLASSIFICATION	5.867229035236097E-9	DEFECT
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999867490632	WITHOUT_CLASSIFICATION	1.3250936770547219E-8	DEFECT
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999995924698919	WITHOUT_CLASSIFICATION	4.0753010809317306E-7	DEFECT
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999976356136303	WITHOUT_CLASSIFICATION	2.3643863698064077E-6	DEFECT
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999943394774182	WITHOUT_CLASSIFICATION	5.660522581753395E-6	DEFECT
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999998367047012	WITHOUT_CLASSIFICATION	1.6329529879767968E-7	DEFECT
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999981974441194	WITHOUT_CLASSIFICATION	1.8025558806383983E-6	DEFECT
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999986161197864	WITHOUT_CLASSIFICATION	1.383880213606012E-5	DEFECT
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999970078464897	WITHOUT_CLASSIFICATION	2.9921535102614795E-6	DEFECT
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999991156991254	WITHOUT_CLASSIFICATION	8.843008746901178E-7	DEFECT
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999850128923	WITHOUT_CLASSIFICATION	1.498710764398763E-8	DEFECT
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999204544235124	WITHOUT_CLASSIFICATION	7.954557648765896E-5	DEFECT
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999978898517571	WITHOUT_CLASSIFICATION	2.110148242863389E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9999996720483559	WITHOUT_CLASSIFICATION	3.279516440976875E-7	DEFECT
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999996632932	WITHOUT_CLASSIFICATION	3.367068368599602E-10	DEFECT
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999980379347434	WITHOUT_CLASSIFICATION	1.962065256577639E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999994884453947	WITHOUT_CLASSIFICATION	5.115546053844589E-7	DEFECT
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993467603148752	WITHOUT_CLASSIFICATION	6.532396851247659E-4	DEFECT
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999999863391039	WITHOUT_CLASSIFICATION	1.3660896074891471E-8	DEFECT
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999994639833675	WITHOUT_CLASSIFICATION	5.360166325662342E-7	DEFECT
/*implied*/	WITHOUT_CLASSIFICATION	0.9999898216406273	WITHOUT_CLASSIFICATION	1.017835937268927E-5	DEFECT
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999999285566412	WITHOUT_CLASSIFICATION	7.144335883243377E-8	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957716303136	WITHOUT_CLASSIFICATION	4.228369686330071E-6	DEFECT
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999834878379013	WITHOUT_CLASSIFICATION	1.651216209874937E-5	DEFECT
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999999183614895	WITHOUT_CLASSIFICATION	8.16385104989382E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999978335094881	WITHOUT_CLASSIFICATION	2.1664905119422152E-6	DEFECT
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999925081344785	WITHOUT_CLASSIFICATION	7.49186552157577E-6	DEFECT
/*	WITHOUT_CLASSIFICATION	0.9934873711131419	WITHOUT_CLASSIFICATION	0.006512628886858194	DEFECT
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9998692163962062	WITHOUT_CLASSIFICATION	1.307836037938519E-4	DEFECT
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.999998167204016	WITHOUT_CLASSIFICATION	1.8327959839096755E-6	DEFECT
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999994229412893	WITHOUT_CLASSIFICATION	5.7705871074985E-7	DEFECT
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996082299221	WITHOUT_CLASSIFICATION	3.917700779532806E-7	DEFECT
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999999850610625	WITHOUT_CLASSIFICATION	1.493893749985703E-7	DEFECT
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999872960976065	WITHOUT_CLASSIFICATION	1.2703902393512523E-5	DEFECT
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999890811291636	WITHOUT_CLASSIFICATION	1.0918870836303777E-5	DEFECT
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996921362146	WITHOUT_CLASSIFICATION	3.0786378535154284E-7	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998284327348	WITHOUT_CLASSIFICATION	1.715672651539634E-7	DEFECT
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990024390966	WITHOUT_CLASSIFICATION	9.975609034048825E-7	DEFECT
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999974048547	WITHOUT_CLASSIFICATION	2.5951453028700048E-8	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997409024530424	WITHOUT_CLASSIFICATION	2.590975469576369E-4	DEFECT
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.99991971544792	WITHOUT_CLASSIFICATION	8.02845520799877E-5	DEFECT
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999985283145214	WITHOUT_CLASSIFICATION	1.471685478564886E-6	DEFECT
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951348195655	WITHOUT_CLASSIFICATION	4.865180434471761E-6	DEFECT
//TODO:	WITHOUT_CLASSIFICATION	0.998617376713319	WITHOUT_CLASSIFICATION	0.0013826232866810042	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999258563821	WITHOUT_CLASSIFICATION	7.414361784018834E-8	DEFECT
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998232341742	WITHOUT_CLASSIFICATION	1.76765825837078E-7	DEFECT
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993961835902	WITHOUT_CLASSIFICATION	6.038164096749272E-7	DEFECT
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917957995806	WITHOUT_CLASSIFICATION	8.20420041932132E-6	DEFECT
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999239827331	WITHOUT_CLASSIFICATION	7.601726694037018E-8	DEFECT
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999998469721904	WITHOUT_CLASSIFICATION	1.530278096274887E-7	DEFECT
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999996694317451	WITHOUT_CLASSIFICATION	3.3056825489467336E-7	DEFECT
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999999696391508	WITHOUT_CLASSIFICATION	3.0360849202382353E-7	DEFECT
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993714108539823	WITHOUT_CLASSIFICATION	6.285891460178025E-4	DEFECT
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999929359737169	WITHOUT_CLASSIFICATION	7.064026283187907E-6	DEFECT
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999997525072476	WITHOUT_CLASSIFICATION	2.4749275236048254E-7	DEFECT
// Dialect function	WITHOUT_CLASSIFICATION	0.9999980481479004	WITHOUT_CLASSIFICATION	1.9518520996599936E-6	DEFECT
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999897667286072	WITHOUT_CLASSIFICATION	1.0233271392751107E-5	DEFECT
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999997538151928	WITHOUT_CLASSIFICATION	2.461848071869508E-6	DEFECT
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999895562667721	WITHOUT_CLASSIFICATION	1.0443733227904602E-5	DEFECT
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999966162840077	WITHOUT_CLASSIFICATION	3.3837159923780963E-6	DEFECT
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999734016817	WITHOUT_CLASSIFICATION	2.659831830146877E-8	DEFECT
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999894317466347	WITHOUT_CLASSIFICATION	1.0568253365407792E-5	DEFECT
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999995473420424	WITHOUT_CLASSIFICATION	4.52657957512445E-7	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999597413239	WITHOUT_CLASSIFICATION	4.025867613462707E-8	DEFECT
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998824968873	WITHOUT_CLASSIFICATION	1.1750311273017272E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999600709693	WITHOUT_CLASSIFICATION	3.992903080966252E-8	DEFECT
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999997433687556	WITHOUT_CLASSIFICATION	2.5663124433784116E-7	DEFECT
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999600709693	WITHOUT_CLASSIFICATION	3.992903080966252E-8	DEFECT
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999645180740866	WITHOUT_CLASSIFICATION	3.548192591344609E-5	DEFECT
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999866675775334	WITHOUT_CLASSIFICATION	1.3332422466697823E-5	DEFECT
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999980309978117	WITHOUT_CLASSIFICATION	1.9690021882848364E-6	DEFECT
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.999999761183411	WITHOUT_CLASSIFICATION	2.388165889579675E-7	DEFECT
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999996442829013	WITHOUT_CLASSIFICATION	3.5571709868498193E-6	DEFECT
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999992022888246	WITHOUT_CLASSIFICATION	7.977111754702725E-7	DEFECT
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999996229338954	WITHOUT_CLASSIFICATION	3.7706610453901506E-7	DEFECT
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999999971547176	WITHOUT_CLASSIFICATION	2.845282397032164E-8	DEFECT
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999741045701286	WITHOUT_CLASSIFICATION	2.5895429871398435E-5	DEFECT
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999998323638049	WITHOUT_CLASSIFICATION	1.676361952222309E-7	DEFECT
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999241162255	WITHOUT_CLASSIFICATION	7.588377447764975E-8	DEFECT
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999995685608755	WITHOUT_CLASSIFICATION	4.3143912459639685E-7	DEFECT
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999907079326	WITHOUT_CLASSIFICATION	9.292067430186424E-9	DEFECT
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999266670439507	WITHOUT_CLASSIFICATION	7.33329560493228E-5	DEFECT
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999829363608961	WITHOUT_CLASSIFICATION	1.7063639103871302E-5	DEFECT
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999579925813	WITHOUT_CLASSIFICATION	4.2007418688883036E-8	DEFECT
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999998407824112	WITHOUT_CLASSIFICATION	1.592175887445017E-7	DEFECT
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999961305545445	WITHOUT_CLASSIFICATION	3.86944545557571E-6	DEFECT
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999745540522	WITHOUT_CLASSIFICATION	2.5445947700212757E-8	DEFECT
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9999998446483326	WITHOUT_CLASSIFICATION	1.5535166737209526E-7	DEFECT
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999997353784658	WITHOUT_CLASSIFICATION	2.6462153420691684E-6	DEFECT
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999936618844922	WITHOUT_CLASSIFICATION	6.338115507735689E-6	DEFECT
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9995445551228561	WITHOUT_CLASSIFICATION	4.554448771439957E-4	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999770884441044	WITHOUT_CLASSIFICATION	2.2911555895606766E-5	DEFECT
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999992091457793	WITHOUT_CLASSIFICATION	7.908542206915378E-7	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9937899300967201	WITHOUT_CLASSIFICATION	0.006210069903279896	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999696729514236	WITHOUT_CLASSIFICATION	3.0327048576360094E-5	DEFECT
//default mode	WITHOUT_CLASSIFICATION	0.9999979016140332	WITHOUT_CLASSIFICATION	2.098385966763439E-6	DEFECT
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999766502005	WITHOUT_CLASSIFICATION	2.3349799557289432E-8	DEFECT
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999940927707511	WITHOUT_CLASSIFICATION	5.9072292488775034E-6	DEFECT
//after reset!	WITHOUT_CLASSIFICATION	0.999998170826587	WITHOUT_CLASSIFICATION	1.8291734128841056E-6	DEFECT
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9300698465096052	WITHOUT_CLASSIFICATION	0.0699301534903947	DEFECT
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9364070960748707	WITHOUT_CLASSIFICATION	0.06359290392512933	DEFECT
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999962718472222	WITHOUT_CLASSIFICATION	3.7281527778344184E-6	DEFECT
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999962040426051	WITHOUT_CLASSIFICATION	3.795957394907801E-5	DEFECT
//if its "id"	WITHOUT_CLASSIFICATION	0.9999968473754662	WITHOUT_CLASSIFICATION	3.152624533752393E-6	DEFECT
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999970552780237	WITHOUT_CLASSIFICATION	2.944721976224436E-6	DEFECT
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999819114681	WITHOUT_CLASSIFICATION	1.8088531941782728E-8	DEFECT
//important!!	WITHOUT_CLASSIFICATION	0.9999721341431071	WITHOUT_CLASSIFICATION	2.7865856892860296E-5	DEFECT
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999994097338974	WITHOUT_CLASSIFICATION	5.902661024410429E-7	DEFECT
// an association	WITHOUT_CLASSIFICATION	0.9999998389712049	WITHOUT_CLASSIFICATION	1.6102879500126944E-7	DEFECT
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999937769768588	WITHOUT_CLASSIFICATION	6.223023141291293E-6	DEFECT
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9998989844496009	WITHOUT_CLASSIFICATION	1.0101555039907112E-4	DEFECT
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9937899300967201	WITHOUT_CLASSIFICATION	0.006210069903279896	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999748755560195	WITHOUT_CLASSIFICATION	2.5124443980542904E-5	DEFECT
// collections of values	WITHOUT_CLASSIFICATION	0.9999964044635317	WITHOUT_CLASSIFICATION	3.5955364684236955E-6	DEFECT
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9999064133159428	WITHOUT_CLASSIFICATION	9.358668405730374E-5	DEFECT
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9998972930212023	WITHOUT_CLASSIFICATION	1.0270697879771049E-4	DEFECT
//special case	WITHOUT_CLASSIFICATION	0.9999999058993829	WITHOUT_CLASSIFICATION	9.410061713810425E-8	DEFECT
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999990447437566	WITHOUT_CLASSIFICATION	9.552562434302237E-7	DEFECT
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999999739085544	WITHOUT_CLASSIFICATION	2.609144557862704E-8	DEFECT
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8802220944027659	DEFECT	0.11977790559723413	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999995489293858	WITHOUT_CLASSIFICATION	4.510706142331999E-7	DEFECT
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9998923390643378	WITHOUT_CLASSIFICATION	1.0766093566218499E-4	DEFECT
//register collection role	WITHOUT_CLASSIFICATION	0.9999983014469561	WITHOUT_CLASSIFICATION	1.698553043833164E-6	DEFECT
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999828830015	WITHOUT_CLASSIFICATION	1.7116998463208437E-8	DEFECT
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999793726108934	WITHOUT_CLASSIFICATION	2.0627389106578478E-5	DEFECT
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999790163347009	WITHOUT_CLASSIFICATION	2.0983665299132563E-5	DEFECT
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999993908615283	WITHOUT_CLASSIFICATION	6.091384716600431E-7	DEFECT
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999960963476	WITHOUT_CLASSIFICATION	3.903652435785221E-9	DEFECT
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998941583926	WITHOUT_CLASSIFICATION	1.0584160729997757E-7	DEFECT
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999052731483	WITHOUT_CLASSIFICATION	9.472685167574895E-8	DEFECT
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999994838379138	WITHOUT_CLASSIFICATION	5.161620861635683E-7	DEFECT
//many-to-many	WITHOUT_CLASSIFICATION	0.9999748755560195	WITHOUT_CLASSIFICATION	2.5124443980542904E-5	DEFECT
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999924638109619	WITHOUT_CLASSIFICATION	7.536189038121833E-6	DEFECT
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9988265640177814	WITHOUT_CLASSIFICATION	0.0011734359822185498	DEFECT
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999936111680541	WITHOUT_CLASSIFICATION	6.3888319458341E-6	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999950503846464	WITHOUT_CLASSIFICATION	4.949615353577953E-6	DEFECT
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999668950244736	WITHOUT_CLASSIFICATION	3.3104975526520146E-5	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998760276846496	WITHOUT_CLASSIFICATION	1.2397231535041163E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998760276846496	WITHOUT_CLASSIFICATION	1.2397231535041163E-4	DEFECT
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999932616260824	WITHOUT_CLASSIFICATION	6.738373917533694E-6	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998760276846496	WITHOUT_CLASSIFICATION	1.2397231535041163E-4	DEFECT
// not known!	WITHOUT_CLASSIFICATION	0.9998760276846496	WITHOUT_CLASSIFICATION	1.2397231535041163E-4	DEFECT
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9738183628238842	WITHOUT_CLASSIFICATION	0.026181637176115834	DEFECT
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999763879845017	WITHOUT_CLASSIFICATION	2.3612015498220315E-5	DEFECT
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999999539953677	WITHOUT_CLASSIFICATION	4.6004632389335805E-8	DEFECT
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999993615942633	WITHOUT_CLASSIFICATION	6.384057367335905E-7	DEFECT
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992117635769077	WITHOUT_CLASSIFICATION	7.882364230923817E-4	DEFECT
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9999998935020443	WITHOUT_CLASSIFICATION	1.064979555782219E-7	DEFECT
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9981634739313219	WITHOUT_CLASSIFICATION	0.0018365260686781595	DEFECT
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999559418091	WITHOUT_CLASSIFICATION	4.4058190781171044E-8	DEFECT
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999906036365928	WITHOUT_CLASSIFICATION	9.396363407220565E-6	DEFECT
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999979952703554	WITHOUT_CLASSIFICATION	2.0047296446768886E-6	DEFECT
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999966452933319	WITHOUT_CLASSIFICATION	3.354706668158881E-6	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999612435492372	WITHOUT_CLASSIFICATION	3.8756450762781464E-5	DEFECT
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999990457721246	WITHOUT_CLASSIFICATION	9.542278752978372E-7	DEFECT
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999997600897693	WITHOUT_CLASSIFICATION	2.399102305839686E-7	DEFECT
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999992672390303	WITHOUT_CLASSIFICATION	7.327609697623206E-7	DEFECT
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9873813204874461	WITHOUT_CLASSIFICATION	0.012618679512553887	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999062456278	WITHOUT_CLASSIFICATION	9.375437213801929E-8	DEFECT
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9955178465967578	WITHOUT_CLASSIFICATION	0.004482153403242276	DEFECT
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.999744248502503	WITHOUT_CLASSIFICATION	2.5575149749704933E-4	DEFECT
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999997304421431	WITHOUT_CLASSIFICATION	2.695578568838552E-7	DEFECT
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999991966326125	WITHOUT_CLASSIFICATION	8.033673875522234E-7	DEFECT
// Add any joins	WITHOUT_CLASSIFICATION	0.9999989190549381	WITHOUT_CLASSIFICATION	1.0809450617941995E-6	DEFECT
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999062456278	WITHOUT_CLASSIFICATION	9.375437213801929E-8	DEFECT
//named query parameter	WITHOUT_CLASSIFICATION	0.9999696729514236	WITHOUT_CLASSIFICATION	3.0327048576360094E-5	DEFECT
//path expression	WITHOUT_CLASSIFICATION	0.9999879655446647	WITHOUT_CLASSIFICATION	1.2034455335228566E-5	DEFECT
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999939951479899	WITHOUT_CLASSIFICATION	6.004852010031947E-6	DEFECT
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999993868489874	WITHOUT_CLASSIFICATION	6.131510125979836E-6	DEFECT
//anything else	WITHOUT_CLASSIFICATION	0.9999983909856487	WITHOUT_CLASSIFICATION	1.6090143513246252E-6	DEFECT
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999976509157187	WITHOUT_CLASSIFICATION	2.3490842812982277E-5	DEFECT
// careful with this!	WITHOUT_CLASSIFICATION	0.999999702120102	WITHOUT_CLASSIFICATION	2.978798979728644E-7	DEFECT
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9997376338377696	WITHOUT_CLASSIFICATION	2.6236616223033977E-4	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998690400134	WITHOUT_CLASSIFICATION	1.30959986566892E-7	DEFECT
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999999990741919	WITHOUT_CLASSIFICATION	9.258080973366259E-9	DEFECT
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999979454278616	WITHOUT_CLASSIFICATION	2.0545721384145563E-6	DEFECT
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997307274435	WITHOUT_CLASSIFICATION	2.692725564368464E-7	DEFECT
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999949247242166	WITHOUT_CLASSIFICATION	5.075275783345488E-6	DEFECT
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999967327886	WITHOUT_CLASSIFICATION	3.267211452837665E-9	DEFECT
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999116295086006	WITHOUT_CLASSIFICATION	8.837049139937368E-5	DEFECT
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999999775564823	WITHOUT_CLASSIFICATION	2.2443517703814554E-7	DEFECT
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999886973041868	WITHOUT_CLASSIFICATION	1.1302695813201146E-5	DEFECT
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999452808096496	WITHOUT_CLASSIFICATION	5.471919035035389E-5	DEFECT
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999998848517083	WITHOUT_CLASSIFICATION	1.1514829165104575E-7	DEFECT
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999999518194762	WITHOUT_CLASSIFICATION	4.818052379912698E-7	DEFECT
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9999751963403127	WITHOUT_CLASSIFICATION	2.4803659687228248E-5	DEFECT
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999999591861213	WITHOUT_CLASSIFICATION	4.08138787690956E-8	DEFECT
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999991741833822	WITHOUT_CLASSIFICATION	8.258166177440725E-7	DEFECT
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998690400134	WITHOUT_CLASSIFICATION	1.30959986566892E-7	DEFECT
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999564009112	WITHOUT_CLASSIFICATION	4.35990888405636E-8	DEFECT
//do replacements	WITHOUT_CLASSIFICATION	0.9999999374085179	WITHOUT_CLASSIFICATION	6.259148211991753E-8	DEFECT
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999996229079394	WITHOUT_CLASSIFICATION	3.770920604874262E-7	DEFECT
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.999999414078947	WITHOUT_CLASSIFICATION	5.859210529461579E-7	DEFECT
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999476020424	WITHOUT_CLASSIFICATION	5.239795765488292E-8	DEFECT
//hilo params	WITHOUT_CLASSIFICATION	0.9999983872435507	WITHOUT_CLASSIFICATION	1.612756449284662E-6	DEFECT
//sql = query;	WITHOUT_CLASSIFICATION	0.9999991148278844	WITHOUT_CLASSIFICATION	8.851721156810517E-7	DEFECT
// performance opt	WITHOUT_CLASSIFICATION	0.9999998285683077	WITHOUT_CLASSIFICATION	1.714316922099543E-7	DEFECT
//sql = update;	WITHOUT_CLASSIFICATION	0.9999998588067389	WITHOUT_CLASSIFICATION	1.411932610069263E-7	DEFECT
//hilo config	WITHOUT_CLASSIFICATION	0.9999968564901784	WITHOUT_CLASSIFICATION	3.143509821552758E-6	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999915863657	WITHOUT_CLASSIFICATION	8.413634360023803E-9	DEFECT
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999900229045496	WITHOUT_CLASSIFICATION	9.977095450354636E-6	DEFECT
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999954467206256	WITHOUT_CLASSIFICATION	4.553279374390268E-6	DEFECT
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999990456284	WITHOUT_CLASSIFICATION	9.543716071831053E-10	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999911494224973	WITHOUT_CLASSIFICATION	8.850577502600896E-6	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996560705329	WITHOUT_CLASSIFICATION	3.4392946714509596E-7	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999915863657	WITHOUT_CLASSIFICATION	8.413634360023803E-9	DEFECT
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999998890546838	WITHOUT_CLASSIFICATION	1.1094531615666851E-7	DEFECT
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9991520570416375	WITHOUT_CLASSIFICATION	8.479429583624867E-4	DEFECT
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999996433206622	WITHOUT_CLASSIFICATION	3.5667933795316715E-7	DEFECT
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999999554276214	WITHOUT_CLASSIFICATION	4.457237858348944E-8	DEFECT
// the default...	WITHOUT_CLASSIFICATION	0.9999761554897969	WITHOUT_CLASSIFICATION	2.3844510203075508E-5	DEFECT
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999943069366	WITHOUT_CLASSIFICATION	5.693063418250803E-9	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999997004520325	WITHOUT_CLASSIFICATION	2.995479674980386E-6	DEFECT
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986809809653	WITHOUT_CLASSIFICATION	1.3190190346386736E-6	DEFECT
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999574549477	WITHOUT_CLASSIFICATION	4.2545052354014547E-8	DEFECT
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995799813903	WITHOUT_CLASSIFICATION	4.200186096091661E-7	DEFECT
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991489448113	WITHOUT_CLASSIFICATION	8.510551885322769E-7	DEFECT
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998614899955	WITHOUT_CLASSIFICATION	1.3851000438789848E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995950793198	WITHOUT_CLASSIFICATION	4.049206802081329E-7	DEFECT
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995950793198	WITHOUT_CLASSIFICATION	4.049206802081329E-7	DEFECT
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999916229972395	WITHOUT_CLASSIFICATION	8.37700276051224E-6	DEFECT
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999981047936468	WITHOUT_CLASSIFICATION	1.8952063532234218E-6	DEFECT
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999997719721165	WITHOUT_CLASSIFICATION	2.280278835533946E-7	DEFECT
// scroll backward	WITHOUT_CLASSIFICATION	0.9999946399735833	WITHOUT_CLASSIFICATION	5.360026416781809E-6	DEFECT
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9584678643440155	WITHOUT_CLASSIFICATION	0.041532135655984494	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999100839063	WITHOUT_CLASSIFICATION	8.991609364010072E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997388163889	WITHOUT_CLASSIFICATION	2.6118361110437555E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947258125628	WITHOUT_CLASSIFICATION	5.27418743723133E-6	DEFECT
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999998921661933	WITHOUT_CLASSIFICATION	1.0783380661165947E-7	DEFECT
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969927628355	WITHOUT_CLASSIFICATION	3.007237164393689E-6	DEFECT
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999100839063	WITHOUT_CLASSIFICATION	8.991609364010072E-8	DEFECT
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997388163889	WITHOUT_CLASSIFICATION	2.6118361110437555E-6	DEFECT
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947258125628	WITHOUT_CLASSIFICATION	5.27418743723133E-6	DEFECT
// Caches	WITHOUT_CLASSIFICATION	0.9999993174793077	WITHOUT_CLASSIFICATION	6.825206923840431E-7	DEFECT
//Generators:	WITHOUT_CLASSIFICATION	0.9999990910603896	WITHOUT_CLASSIFICATION	9.089396104997284E-7	DEFECT
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999935447893417	WITHOUT_CLASSIFICATION	6.45521065825165E-6	DEFECT
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999487733939811	WITHOUT_CLASSIFICATION	5.122660601875335E-5	DEFECT
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999541444157	WITHOUT_CLASSIFICATION	4.585558422168746E-8	DEFECT
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9997500899599897	WITHOUT_CLASSIFICATION	2.499100400103641E-4	DEFECT
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999963322315483	WITHOUT_CLASSIFICATION	3.6677684517038316E-5	DEFECT
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999997538772214	WITHOUT_CLASSIFICATION	2.461227786350948E-7	DEFECT
//stats	WITHOUT_CLASSIFICATION	0.999989121908728	WITHOUT_CLASSIFICATION	1.0878091272093214E-5	DEFECT
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999999840862202	WITHOUT_CLASSIFICATION	1.59137798020094E-7	DEFECT
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999999222244642	WITHOUT_CLASSIFICATION	7.777553582162002E-8	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999806058857574	WITHOUT_CLASSIFICATION	1.93941142426097E-4	DEFECT
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9998033501070874	WITHOUT_CLASSIFICATION	1.9664989291267237E-4	DEFECT
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999998835160023	WITHOUT_CLASSIFICATION	1.1648399770599434E-7	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999998691614852	WITHOUT_CLASSIFICATION	1.3083851479604747E-7	DEFECT
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999995334648721	WITHOUT_CLASSIFICATION	4.665351278922956E-6	DEFECT
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999996969783909	WITHOUT_CLASSIFICATION	3.0302160914353575E-7	DEFECT
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.99997536298421	WITHOUT_CLASSIFICATION	2.463701579000747E-5	DEFECT
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999994572402251	WITHOUT_CLASSIFICATION	5.42759774954056E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999992810302499	WITHOUT_CLASSIFICATION	7.189697499543531E-7	DEFECT
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999993915202128	WITHOUT_CLASSIFICATION	6.084797872293157E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9973685953935605	WITHOUT_CLASSIFICATION	0.002631404606439565	DEFECT
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999957917424427	WITHOUT_CLASSIFICATION	4.208257557307264E-6	DEFECT
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999993995311579	WITHOUT_CLASSIFICATION	6.004688421120932E-7	DEFECT
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999956147975	WITHOUT_CLASSIFICATION	4.385202547208655E-9	DEFECT
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999986262325543	WITHOUT_CLASSIFICATION	1.3737674456672422E-6	DEFECT
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892824554221	WITHOUT_CLASSIFICATION	1.0717544577834453E-5	DEFECT
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983087625788	WITHOUT_CLASSIFICATION	1.6912374211918256E-6	DEFECT
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999995666953756	WITHOUT_CLASSIFICATION	4.3330462441361766E-7	DEFECT
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991597296828	WITHOUT_CLASSIFICATION	8.402703173017967E-7	DEFECT
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999817997438776	WITHOUT_CLASSIFICATION	1.8200256122504297E-5	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997707465832	WITHOUT_CLASSIFICATION	2.2925341679409706E-7	DEFECT
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997707465832	WITHOUT_CLASSIFICATION	2.2925341679409706E-7	DEFECT
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999999893884077	WITHOUT_CLASSIFICATION	1.061159221166636E-8	DEFECT
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999243621287	WITHOUT_CLASSIFICATION	7.563787130699165E-8	DEFECT
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999965624843627	WITHOUT_CLASSIFICATION	3.437515637232658E-6	DEFECT
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999859263725492	WITHOUT_CLASSIFICATION	1.407362745074521E-5	DEFECT
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999999604292581	WITHOUT_CLASSIFICATION	3.957074200602488E-8	DEFECT
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999982642271124	WITHOUT_CLASSIFICATION	1.7357728876087441E-6	DEFECT
//for EJB3	WITHOUT_CLASSIFICATION	0.9999728023576353	WITHOUT_CLASSIFICATION	2.7197642364676263E-5	DEFECT
// just ignore	WITHOUT_CLASSIFICATION	0.9999999963351298	WITHOUT_CLASSIFICATION	3.6648701753406777E-9	DEFECT
// do a check	WITHOUT_CLASSIFICATION	0.9999995234403047	WITHOUT_CLASSIFICATION	4.765596952084418E-7	DEFECT
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999152995314	WITHOUT_CLASSIFICATION	8.470046859313938E-8	DEFECT
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997880422837	WITHOUT_CLASSIFICATION	2.1195771631114405E-7	DEFECT
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992895415163	WITHOUT_CLASSIFICATION	7.104584837714214E-7	DEFECT
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998085464845	WITHOUT_CLASSIFICATION	1.9145351550878178E-7	DEFECT
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999084404322	WITHOUT_CLASSIFICATION	9.155956783314788E-8	DEFECT
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996760385824	WITHOUT_CLASSIFICATION	3.2396141758269525E-7	DEFECT
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997552611488	WITHOUT_CLASSIFICATION	2.4473885124130044E-7	DEFECT
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998221976133	WITHOUT_CLASSIFICATION	1.7780238663513491E-7	DEFECT
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993580952521	WITHOUT_CLASSIFICATION	6.419047478784496E-7	DEFECT
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995407367261	WITHOUT_CLASSIFICATION	4.592632737563946E-7	DEFECT
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999859270848	WITHOUT_CLASSIFICATION	1.4072915317272763E-8	DEFECT
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999995938044761	WITHOUT_CLASSIFICATION	4.061955239188736E-7	DEFECT
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9761379809613878	WITHOUT_CLASSIFICATION	0.02386201903861217	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999470071492296	WITHOUT_CLASSIFICATION	5.299285077048769E-5	DEFECT
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999997884611208	WITHOUT_CLASSIFICATION	2.1153887913848307E-7	DEFECT
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999999929542291	WITHOUT_CLASSIFICATION	7.045770966033592E-9	DEFECT
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999998108444237	WITHOUT_CLASSIFICATION	1.8915557629264141E-7	DEFECT
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999990074213	WITHOUT_CLASSIFICATION	9.92578704725921E-10	DEFECT
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999995943432881	WITHOUT_CLASSIFICATION	4.056567118589044E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999470071492296	WITHOUT_CLASSIFICATION	5.299285077048769E-5	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999470071492296	WITHOUT_CLASSIFICATION	5.299285077048769E-5	DEFECT
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9999974214580577	WITHOUT_CLASSIFICATION	2.5785419423158428E-6	DEFECT
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999592689096	WITHOUT_CLASSIFICATION	4.0731090403012654E-7	DEFECT
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999905371272623	WITHOUT_CLASSIFICATION	9.46287273760466E-6	DEFECT
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999997505610164	WITHOUT_CLASSIFICATION	2.4943898358748803E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999652584362	WITHOUT_CLASSIFICATION	3.474156380665116E-7	DEFECT
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999992810302499	WITHOUT_CLASSIFICATION	7.189697499543531E-7	DEFECT
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999999998774792	WITHOUT_CLASSIFICATION	1.225208061958559E-9	DEFECT
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999914054297204	WITHOUT_CLASSIFICATION	8.594570279568768E-6	DEFECT
// parameter bind values...	WITHOUT_CLASSIFICATION	0.999995870946933	WITHOUT_CLASSIFICATION	4.129053066966478E-6	DEFECT
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993433694764	WITHOUT_CLASSIFICATION	6.566305235122457E-7	DEFECT
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999996283121498	WITHOUT_CLASSIFICATION	3.7168785020707163E-6	DEFECT
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918185598001	WITHOUT_CLASSIFICATION	8.181440199862598E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999961039327596	WITHOUT_CLASSIFICATION	3.896067240349918E-6	DEFECT
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999961039327596	WITHOUT_CLASSIFICATION	3.896067240349918E-6	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995161661683	WITHOUT_CLASSIFICATION	4.838338316448169E-7	DEFECT
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999995161661683	WITHOUT_CLASSIFICATION	4.838338316448169E-7	DEFECT
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987872911532	WITHOUT_CLASSIFICATION	1.2127088467804377E-6	DEFECT
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987781404982	WITHOUT_CLASSIFICATION	1.221859501883601E-6	DEFECT
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999998468807428	WITHOUT_CLASSIFICATION	1.5311925712527166E-7	DEFECT
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996483690416	WITHOUT_CLASSIFICATION	3.5163095832363373E-7	DEFECT
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999996068477234	WITHOUT_CLASSIFICATION	3.931522766299928E-7	DEFECT
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9986566575879269	WITHOUT_CLASSIFICATION	0.0013433424120730512	DEFECT
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998783336878859	WITHOUT_CLASSIFICATION	1.2166631211404327E-4	DEFECT
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948770701776	WITHOUT_CLASSIFICATION	5.122929822322689E-6	DEFECT
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999951842612305	WITHOUT_CLASSIFICATION	4.815738769547823E-6	DEFECT
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999999574542574	WITHOUT_CLASSIFICATION	4.254574253126529E-8	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999977295634	WITHOUT_CLASSIFICATION	2.2704366088204254E-8	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999999870255873	WITHOUT_CLASSIFICATION	1.297441267964338E-8	DEFECT
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999998062184529	WITHOUT_CLASSIFICATION	1.9378154713151087E-7	DEFECT
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999995576704847	WITHOUT_CLASSIFICATION	4.423295153082815E-6	DEFECT
//no big deal	WITHOUT_CLASSIFICATION	0.9999978569821554	WITHOUT_CLASSIFICATION	2.143017844734358E-6	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999997143144329	WITHOUT_CLASSIFICATION	2.856855671022421E-7	DEFECT
// no big deal	WITHOUT_CLASSIFICATION	0.9999997143144329	WITHOUT_CLASSIFICATION	2.856855671022421E-7	DEFECT
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999923945752	WITHOUT_CLASSIFICATION	7.605424852224176E-9	DEFECT
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999390711798658	WITHOUT_CLASSIFICATION	6.0928820134308065E-5	DEFECT
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999911570727	WITHOUT_CLASSIFICATION	8.842927199964931E-9	DEFECT
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999253237905474	WITHOUT_CLASSIFICATION	7.467620945263175E-5	DEFECT
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834735615007	WITHOUT_CLASSIFICATION	1.6526438499260056E-5	DEFECT
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982014265931	WITHOUT_CLASSIFICATION	1.7985734069070494E-6	DEFECT
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999990134104016	WITHOUT_CLASSIFICATION	9.865895983664122E-7	DEFECT
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998908036038473	WITHOUT_CLASSIFICATION	1.0919639615273307E-4	DEFECT
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999976102169569	WITHOUT_CLASSIFICATION	2.389783043037719E-6	DEFECT
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999999923042283	WITHOUT_CLASSIFICATION	7.695771727196805E-9	DEFECT
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999998569486354	WITHOUT_CLASSIFICATION	1.4305136468605902E-7	DEFECT
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9973468723377195	WITHOUT_CLASSIFICATION	0.0026531276622805567	DEFECT
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999105942221	WITHOUT_CLASSIFICATION	8.940577789956143E-6	DEFECT
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999847303613983	WITHOUT_CLASSIFICATION	1.5269638601700904E-5	DEFECT
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999998616907249	WITHOUT_CLASSIFICATION	1.383092751074943E-7	DEFECT
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999493536284045	WITHOUT_CLASSIFICATION	5.0646371595599854E-5	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998592521907	WITHOUT_CLASSIFICATION	1.407478093277122E-7	DEFECT
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999953453331744	WITHOUT_CLASSIFICATION	4.654666825659219E-6	DEFECT
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.99999274862423	WITHOUT_CLASSIFICATION	7.251375769956746E-6	DEFECT
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999978256573422	WITHOUT_CLASSIFICATION	2.1743426578099915E-6	DEFECT
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999969898955	WITHOUT_CLASSIFICATION	3.010104432939699E-9	DEFECT
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999416517613164	WITHOUT_CLASSIFICATION	5.834823868347054E-5	DEFECT
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999999648602016	WITHOUT_CLASSIFICATION	3.51397984095067E-7	DEFECT
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999932088164	WITHOUT_CLASSIFICATION	6.791183670139E-9	DEFECT
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996464822628	WITHOUT_CLASSIFICATION	3.535177371715949E-7	DEFECT
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999709308630812	WITHOUT_CLASSIFICATION	2.9069136918733982E-5	DEFECT
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999691899387602	WITHOUT_CLASSIFICATION	3.081006123980353E-5	DEFECT
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999902612218368	WITHOUT_CLASSIFICATION	9.738778163167754E-6	DEFECT
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999982155178	WITHOUT_CLASSIFICATION	1.784482169810503E-9	DEFECT
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999993943279508	WITHOUT_CLASSIFICATION	6.056720491507197E-7	DEFECT
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9993717774222115	WITHOUT_CLASSIFICATION	6.282225777884683E-4	DEFECT
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999990627713389	WITHOUT_CLASSIFICATION	9.37228661054715E-7	DEFECT
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999872147858095	WITHOUT_CLASSIFICATION	1.2785214190357027E-5	DEFECT
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999986657483728	WITHOUT_CLASSIFICATION	1.334251627172342E-6	DEFECT
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9998044158245024	WITHOUT_CLASSIFICATION	1.9558417549764352E-4	DEFECT
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999932179254032	WITHOUT_CLASSIFICATION	6.7820745968316775E-6	DEFECT
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999946366220711	WITHOUT_CLASSIFICATION	5.363377928883552E-6	DEFECT
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999998830980412	WITHOUT_CLASSIFICATION	1.1690195873873158E-7	DEFECT
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999321922686	WITHOUT_CLASSIFICATION	6.780773140875036E-8	DEFECT
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999998402638232	WITHOUT_CLASSIFICATION	1.5973617692883274E-7	DEFECT
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999966234599053	WITHOUT_CLASSIFICATION	3.3765400946564757E-6	DEFECT
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998793778879	WITHOUT_CLASSIFICATION	1.206221121147957E-7	DEFECT
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9989306116106572	WITHOUT_CLASSIFICATION	0.0010693883893427153	DEFECT
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999992227723022	WITHOUT_CLASSIFICATION	7.772276976270764E-7	DEFECT
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998946705094367	WITHOUT_CLASSIFICATION	1.0532949056336282E-4	DEFECT
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999768285964623	WITHOUT_CLASSIFICATION	2.3171403537689442E-5	DEFECT
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999998648973032	WITHOUT_CLASSIFICATION	1.3510269674540834E-7	DEFECT
//do nothing	WITHOUT_CLASSIFICATION	0.9999959801098491	WITHOUT_CLASSIFICATION	4.019890150884817E-6	DEFECT
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999977812707738	WITHOUT_CLASSIFICATION	2.218729226286119E-6	DEFECT
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999997884126743	WITHOUT_CLASSIFICATION	2.1158732566868684E-7	DEFECT
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999925665563799	WITHOUT_CLASSIFICATION	7.433443620064015E-6	DEFECT
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999982803265691	WITHOUT_CLASSIFICATION	1.7196734308752531E-6	DEFECT
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999999777881737	WITHOUT_CLASSIFICATION	2.2211826312501897E-7	DEFECT
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9992863052896696	WITHOUT_CLASSIFICATION	7.136947103304346E-4	DEFECT
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999879824673565	WITHOUT_CLASSIFICATION	1.2017532643555219E-5	DEFECT
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999979748938095	WITHOUT_CLASSIFICATION	2.02510619053279E-6	DEFECT
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999996318729097	WITHOUT_CLASSIFICATION	3.6812709023500737E-7	DEFECT
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999847575604177	WITHOUT_CLASSIFICATION	1.5242439582159709E-5	DEFECT
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999998640340771	WITHOUT_CLASSIFICATION	1.3596592292635803E-7	DEFECT
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999965984901316	WITHOUT_CLASSIFICATION	3.4015098683254163E-6	DEFECT
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999944509652183	WITHOUT_CLASSIFICATION	5.5490347816006815E-6	DEFECT
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999516677962	WITHOUT_CLASSIFICATION	4.8332203935006015E-8	DEFECT
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998127282151	WITHOUT_CLASSIFICATION	1.8727178472956586E-7	DEFECT
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999982003155902	WITHOUT_CLASSIFICATION	1.7996844098651283E-6	DEFECT
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999999670308289	WITHOUT_CLASSIFICATION	3.296917105698477E-8	DEFECT
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998791478189264	WITHOUT_CLASSIFICATION	1.2085218107360111E-4	DEFECT
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999989946125803	WITHOUT_CLASSIFICATION	1.0053874196618215E-6	DEFECT
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999981500128405	WITHOUT_CLASSIFICATION	1.8499871594254318E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999482262848953	WITHOUT_CLASSIFICATION	5.177371510467682E-5	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999482262848953	WITHOUT_CLASSIFICATION	5.177371510467682E-5	DEFECT
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998228779859	WITHOUT_CLASSIFICATION	1.7712201398879472E-7	DEFECT
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999999709822653	WITHOUT_CLASSIFICATION	2.901773471530229E-8	DEFECT
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999999007079252	WITHOUT_CLASSIFICATION	9.929207476952973E-8	DEFECT
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999992865736188	WITHOUT_CLASSIFICATION	7.134263811871232E-7	DEFECT
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999995726468338	WITHOUT_CLASSIFICATION	4.273531661458718E-7	DEFECT
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999999796109273	WITHOUT_CLASSIFICATION	2.0389072753193116E-8	DEFECT
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999999896411645	WITHOUT_CLASSIFICATION	1.0358835517815157E-8	DEFECT
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999952732446026	WITHOUT_CLASSIFICATION	4.726755397457593E-6	DEFECT
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999774973720539	WITHOUT_CLASSIFICATION	2.2502627946069717E-5	DEFECT
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999944901035116	WITHOUT_CLASSIFICATION	5.509896488414307E-6	DEFECT
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999999841818343	WITHOUT_CLASSIFICATION	1.5818165704640635E-7	DEFECT
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999989225596978	WITHOUT_CLASSIFICATION	1.0774403021779084E-6	DEFECT
//a composite key	WITHOUT_CLASSIFICATION	0.9999992460732641	WITHOUT_CLASSIFICATION	7.539267359083914E-7	DEFECT
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999999764818097	WITHOUT_CLASSIFICATION	2.3518190347527103E-8	DEFECT
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999781373229824	WITHOUT_CLASSIFICATION	2.1862677017639255E-5	DEFECT
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999990336978989	WITHOUT_CLASSIFICATION	9.663021010936711E-7	DEFECT
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999982617936706	WITHOUT_CLASSIFICATION	1.7382063293796943E-6	DEFECT
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9994530200919505	WITHOUT_CLASSIFICATION	5.46979908049574E-4	DEFECT
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9999796182774452	WITHOUT_CLASSIFICATION	2.0381722554830062E-5	DEFECT
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999999719360717	WITHOUT_CLASSIFICATION	2.8063928338553185E-8	DEFECT
// we found it	WITHOUT_CLASSIFICATION	0.9999991694803999	WITHOUT_CLASSIFICATION	8.305196001251916E-7	DEFECT
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999996370215218	WITHOUT_CLASSIFICATION	3.629784781018193E-7	DEFECT
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9999687511924251	WITHOUT_CLASSIFICATION	3.124880757479194E-5	DEFECT
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999892255974779	WITHOUT_CLASSIFICATION	1.0774402522043694E-5	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999874123270346	WITHOUT_CLASSIFICATION	1.2587672965327153E-5	DEFECT
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999798629449155	WITHOUT_CLASSIFICATION	2.013705508443759E-5	DEFECT
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999989891090317	WITHOUT_CLASSIFICATION	1.0108909682180665E-6	DEFECT
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998776141885877	WITHOUT_CLASSIFICATION	1.2238581141224786E-4	DEFECT
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999992238693076	WITHOUT_CLASSIFICATION	7.761306922760124E-7	DEFECT
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999999422450611	WITHOUT_CLASSIFICATION	5.775493903705257E-8	DEFECT
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999998529067579	WITHOUT_CLASSIFICATION	1.4709324213034763E-7	DEFECT
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999998503378829	WITHOUT_CLASSIFICATION	1.4966211713142628E-7	DEFECT
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999996361336518	WITHOUT_CLASSIFICATION	3.638663481123676E-7	DEFECT
// the entity name	WITHOUT_CLASSIFICATION	0.9999991027084781	WITHOUT_CLASSIFICATION	8.972915218341969E-7	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999972939179312	WITHOUT_CLASSIFICATION	2.706082068817666E-6	DEFECT
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999972939179312	WITHOUT_CLASSIFICATION	2.706082068817666E-6	DEFECT
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999945157893206	WITHOUT_CLASSIFICATION	5.484210679339442E-6	DEFECT
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999824241984967	WITHOUT_CLASSIFICATION	1.7575801503264315E-5	DEFECT
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999994439234696	WITHOUT_CLASSIFICATION	5.560765302602664E-7	DEFECT
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999997491813616	WITHOUT_CLASSIFICATION	2.508186383360581E-7	DEFECT
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999999999983036	WITHOUT_CLASSIFICATION	1.696374381716614E-12	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999937637066469	WITHOUT_CLASSIFICATION	6.236293353048641E-6	DEFECT
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999663597956544	WITHOUT_CLASSIFICATION	3.364020434560666E-5	DEFECT
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999984360700698	WITHOUT_CLASSIFICATION	1.5639299301205026E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9992550589094134	WITHOUT_CLASSIFICATION	7.449410905866821E-4	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997310290512	WITHOUT_CLASSIFICATION	2.689709488536726E-7	DEFECT
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9997086993959191	WITHOUT_CLASSIFICATION	2.9130060408096947E-4	DEFECT
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999960146237341	WITHOUT_CLASSIFICATION	3.985376265842287E-6	DEFECT
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999983340192441	WITHOUT_CLASSIFICATION	1.6659807559242552E-6	DEFECT
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999992395767292	WITHOUT_CLASSIFICATION	7.604232707436946E-7	DEFECT
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999993108914703	WITHOUT_CLASSIFICATION	6.891085297308808E-7	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994076238260711	WITHOUT_CLASSIFICATION	5.923761739289563E-4	DEFECT
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994076238260711	WITHOUT_CLASSIFICATION	5.923761739289563E-4	DEFECT
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999709596160007	WITHOUT_CLASSIFICATION	2.9040383999226937E-5	DEFECT
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999637005674602	WITHOUT_CLASSIFICATION	3.629943253967331E-5	DEFECT
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9999960298321868	WITHOUT_CLASSIFICATION	3.970167813245703E-6	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999400366728	WITHOUT_CLASSIFICATION	5.996332715744083E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996173751503539	WITHOUT_CLASSIFICATION	3.826248496461154E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999988333450646	WITHOUT_CLASSIFICATION	1.1666549354045087E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999983639728854	WITHOUT_CLASSIFICATION	1.6360271145481726E-6	DEFECT
// already been processed...	WITHOUT_CLASSIFICATION	0.9999983639728854	WITHOUT_CLASSIFICATION	1.6360271145481726E-6	DEFECT
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999982351076037	WITHOUT_CLASSIFICATION	1.764892396331537E-6	DEFECT
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999996710689478	WITHOUT_CLASSIFICATION	3.2893105217426895E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999988195846501	WITHOUT_CLASSIFICATION	1.1804153499058279E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999994459674871	WITHOUT_CLASSIFICATION	5.540325127728973E-7	DEFECT
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999994866212304	WITHOUT_CLASSIFICATION	5.133787696346073E-7	DEFECT
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999978901840855	WITHOUT_CLASSIFICATION	2.109815914496179E-5	DEFECT
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999996361681018	WITHOUT_CLASSIFICATION	3.638318981435171E-7	DEFECT
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999996520983687	WITHOUT_CLASSIFICATION	3.4790163123431554E-7	DEFECT
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999991222256	WITHOUT_CLASSIFICATION	8.777743939258714E-9	DEFECT
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999979925984641	WITHOUT_CLASSIFICATION	2.007401535965585E-6	DEFECT
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9996811305150888	WITHOUT_CLASSIFICATION	3.1886948491125405E-4	DEFECT
// make a new one	WITHOUT_CLASSIFICATION	0.9999968834407472	WITHOUT_CLASSIFICATION	3.1165592528202764E-6	DEFECT
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999999909022208	WITHOUT_CLASSIFICATION	9.097779247660544E-9	DEFECT
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999991994613159	WITHOUT_CLASSIFICATION	8.005386841138474E-7	DEFECT
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999978335094881	WITHOUT_CLASSIFICATION	2.1664905119422152E-6	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997193400948	WITHOUT_CLASSIFICATION	2.806599051914089E-7	DEFECT
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999993795438803	WITHOUT_CLASSIFICATION	6.204561196547536E-7	DEFECT
//by default	WITHOUT_CLASSIFICATION	0.9999992628974167	WITHOUT_CLASSIFICATION	7.37102583346067E-7	DEFECT
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999961361307148	WITHOUT_CLASSIFICATION	3.8638692851047465E-6	DEFECT
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999952779674378	WITHOUT_CLASSIFICATION	4.722032562195492E-6	DEFECT
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999996064853923	WITHOUT_CLASSIFICATION	3.9351460764355564E-7	DEFECT
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999992544758267	WITHOUT_CLASSIFICATION	7.455241733036209E-7	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999589383196973	WITHOUT_CLASSIFICATION	4.106168030266946E-5	DEFECT
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999998994620687	WITHOUT_CLASSIFICATION	1.0053793124272875E-7	DEFECT
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999995986582918	WITHOUT_CLASSIFICATION	4.013417081873568E-7	DEFECT
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999937732385845	WITHOUT_CLASSIFICATION	6.226761415558687E-6	DEFECT
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999996897770986	WITHOUT_CLASSIFICATION	3.102229014005781E-7	DEFECT
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999999999985809	WITHOUT_CLASSIFICATION	1.4191270891942916E-12	DEFECT
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999988705349513	WITHOUT_CLASSIFICATION	1.1294650487619055E-6	DEFECT
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999983724186	WITHOUT_CLASSIFICATION	1.6275813971330648E-8	DEFECT
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9999971152680518	WITHOUT_CLASSIFICATION	2.8847319481715084E-6	DEFECT
//usually useless	WITHOUT_CLASSIFICATION	0.9999993863617379	WITHOUT_CLASSIFICATION	6.13638262192693E-7	DEFECT
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9957785868958353	WITHOUT_CLASSIFICATION	0.004221413104164684	DEFECT
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999996629072209	WITHOUT_CLASSIFICATION	3.370927791695466E-7	DEFECT
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999999551112472	WITHOUT_CLASSIFICATION	4.488875279320025E-8	DEFECT
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999804676042703	WITHOUT_CLASSIFICATION	1.9532395729749654E-5	DEFECT
//may be final	WITHOUT_CLASSIFICATION	0.9999964145813967	WITHOUT_CLASSIFICATION	3.5854186033641986E-6	DEFECT
// may be final	WITHOUT_CLASSIFICATION	0.9999982465603688	WITHOUT_CLASSIFICATION	1.7534396312290287E-6	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999455256986	WITHOUT_CLASSIFICATION	5.447430132785809E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995588413078	WITHOUT_CLASSIFICATION	4.411586921561237E-7	DEFECT
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999947704262	WITHOUT_CLASSIFICATION	5.229573780527188E-9	DEFECT
// ignore it...	WITHOUT_CLASSIFICATION	0.9999859373610039	WITHOUT_CLASSIFICATION	1.406263899601072E-5	DEFECT
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999976628946402	WITHOUT_CLASSIFICATION	2.3371053598011263E-5	DEFECT
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999999969445086	WITHOUT_CLASSIFICATION	3.055491399849111E-8	DEFECT
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999132313	WITHOUT_CLASSIFICATION	8.676865837104793E-11	DEFECT
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999879515940342	WITHOUT_CLASSIFICATION	1.2048405965829117E-5	DEFECT
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999999455256986	WITHOUT_CLASSIFICATION	5.447430132785809E-8	DEFECT
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995588413078	WITHOUT_CLASSIFICATION	4.411586921561237E-7	DEFECT
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999989785644736	WITHOUT_CLASSIFICATION	1.0214355263191779E-6	DEFECT
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999998097091857	WITHOUT_CLASSIFICATION	1.9029081432332405E-7	DEFECT
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999997865583478	WITHOUT_CLASSIFICATION	2.1344165225171058E-7	DEFECT
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999443817340526	WITHOUT_CLASSIFICATION	5.5618265947231666E-5	DEFECT
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999978337971478	WITHOUT_CLASSIFICATION	2.1662028523012433E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.999637196898852	WITHOUT_CLASSIFICATION	3.628031011480234E-4	DEFECT
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999874583957739	WITHOUT_CLASSIFICATION	1.2541604226102716E-4	DEFECT
// }	WITHOUT_CLASSIFICATION	0.9999928033404363	WITHOUT_CLASSIFICATION	7.196659563722136E-6	DEFECT
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999724728712	WITHOUT_CLASSIFICATION	2.7527128802674828E-8	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9874611609026439	WITHOUT_CLASSIFICATION	0.012538839097356147	DEFECT
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999999279623	WITHOUT_CLASSIFICATION	7.203772117377807E-11	DEFECT
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9874611609026439	WITHOUT_CLASSIFICATION	0.012538839097356147	DEFECT
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.999990690313725	WITHOUT_CLASSIFICATION	9.309686275085437E-6	DEFECT
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999998095165442	WITHOUT_CLASSIFICATION	1.9048345565517968E-7	DEFECT
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999308602243723	WITHOUT_CLASSIFICATION	6.913977562773195E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999803906312	WITHOUT_CLASSIFICATION	1.9609368803223242E-7	DEFECT
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9997422837032194	WITHOUT_CLASSIFICATION	2.577162967806399E-4	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999734756514426	WITHOUT_CLASSIFICATION	2.6524348557419864E-5	DEFECT
//}	WITHOUT_CLASSIFICATION	0.9999734756514426	WITHOUT_CLASSIFICATION	2.6524348557419864E-5	DEFECT
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999789170677824	WITHOUT_CLASSIFICATION	2.1082932217589413E-5	DEFECT
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999966283425856	WITHOUT_CLASSIFICATION	3.371657414325656E-6	DEFECT
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999846457948648	WITHOUT_CLASSIFICATION	1.535420513520621E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999533253684679	WITHOUT_CLASSIFICATION	4.667463153204674E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999931523254474	WITHOUT_CLASSIFICATION	6.847674552541218E-6	DEFECT
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9999998079890313	WITHOUT_CLASSIFICATION	1.9201096866919147E-7	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991505023891	WITHOUT_CLASSIFICATION	8.494976108372538E-7	DEFECT
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999993098401834	WITHOUT_CLASSIFICATION	6.901598165164747E-7	DEFECT
// KEY	WITHOUT_CLASSIFICATION	0.9999929377822121	WITHOUT_CLASSIFICATION	7.0622177879108325E-6	DEFECT
//columns	WITHOUT_CLASSIFICATION	0.999993716336068	WITHOUT_CLASSIFICATION	6.2836639319897514E-6	DEFECT
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998775172617	WITHOUT_CLASSIFICATION	1.2248273818713118E-7	DEFECT
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999806265579217	WITHOUT_CLASSIFICATION	1.937344207828193E-5	DEFECT
//types	WITHOUT_CLASSIFICATION	0.9999670008035987	WITHOUT_CLASSIFICATION	3.2999196401372135E-5	DEFECT
// custom sql	WITHOUT_CLASSIFICATION	0.9999999444992345	WITHOUT_CLASSIFICATION	5.5500765496059475E-8	DEFECT
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999997935673541	WITHOUT_CLASSIFICATION	2.0643264574786467E-7	DEFECT
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999994250067693	WITHOUT_CLASSIFICATION	5.749932307607257E-7	DEFECT
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999985721641153	WITHOUT_CLASSIFICATION	1.4278358847087307E-6	DEFECT
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999984719352726	WITHOUT_CLASSIFICATION	1.5280647273348555E-6	DEFECT
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999946106892862	WITHOUT_CLASSIFICATION	5.3893107138567844E-6	DEFECT
//ELEMENT	WITHOUT_CLASSIFICATION	0.9999573949679246	WITHOUT_CLASSIFICATION	4.260503207549129E-5	DEFECT
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999999919410155	WITHOUT_CLASSIFICATION	8.058984494073106E-8	DEFECT
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999987877385755	WITHOUT_CLASSIFICATION	1.2122614244166266E-6	DEFECT
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999942572008514	WITHOUT_CLASSIFICATION	5.742799148614877E-6	DEFECT
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999998732161963	WITHOUT_CLASSIFICATION	1.2678380371876612E-7	DEFECT
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999993569308214	WITHOUT_CLASSIFICATION	6.430691786234305E-7	DEFECT
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999960306039483	WITHOUT_CLASSIFICATION	3.969396051777583E-6	DEFECT
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999999900968487	WITHOUT_CLASSIFICATION	9.903151330209357E-9	DEFECT
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997332752381332	WITHOUT_CLASSIFICATION	2.667247618667633E-4	DEFECT
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9999996858284871	WITHOUT_CLASSIFICATION	3.1417151295786455E-7	DEFECT
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9999997804518833	WITHOUT_CLASSIFICATION	2.1954811667166004E-7	DEFECT
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9995016147776767	WITHOUT_CLASSIFICATION	4.98385222323333E-4	DEFECT
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998883292723123	WITHOUT_CLASSIFICATION	1.116707276876623E-4	DEFECT
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991505023891	WITHOUT_CLASSIFICATION	8.494976108372538E-7	DEFECT
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999602047477054	WITHOUT_CLASSIFICATION	3.979525229465877E-5	DEFECT
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999989136519053	WITHOUT_CLASSIFICATION	1.0863480946593563E-6	DEFECT
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9983032139500679	WITHOUT_CLASSIFICATION	0.0016967860499320492	DEFECT
//an assertion	WITHOUT_CLASSIFICATION	0.9999991848988593	WITHOUT_CLASSIFICATION	8.151011407905865E-7	DEFECT
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999987904749639	WITHOUT_CLASSIFICATION	1.2095250361212494E-6	DEFECT
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999999492829055	WITHOUT_CLASSIFICATION	5.0717094587028435E-8	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999533253684679	WITHOUT_CLASSIFICATION	4.667463153204674E-5	DEFECT
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999533253684679	WITHOUT_CLASSIFICATION	4.667463153204674E-5	DEFECT
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999999146991096	WITHOUT_CLASSIFICATION	8.530089035652093E-8	DEFECT
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999995414495465	WITHOUT_CLASSIFICATION	4.5855045358227484E-7	DEFECT
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999811732104643	WITHOUT_CLASSIFICATION	1.8826789535731965E-5	DEFECT
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998536652357	WITHOUT_CLASSIFICATION	1.4633476424228674E-7	DEFECT
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999900511133126	WITHOUT_CLASSIFICATION	9.948886687455037E-6	DEFECT
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9998625426715743	WITHOUT_CLASSIFICATION	1.3745732842582967E-4	DEFECT
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.999937338989095	WITHOUT_CLASSIFICATION	6.26610109050568E-5	DEFECT
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998580589519	WITHOUT_CLASSIFICATION	1.4194104810911047E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999879534000501	WITHOUT_CLASSIFICATION	1.204659994995263E-5	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999598178094	WITHOUT_CLASSIFICATION	4.018219061396717E-8	DEFECT
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999996412689854	WITHOUT_CLASSIFICATION	3.587310145687869E-7	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999765545166601	WITHOUT_CLASSIFICATION	2.344548333995843E-5	DEFECT
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999997245419529	WITHOUT_CLASSIFICATION	2.754580472432499E-7	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999598178094	WITHOUT_CLASSIFICATION	4.018219061396717E-8	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996832435123	WITHOUT_CLASSIFICATION	3.1675648769177446E-7	DEFECT
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9999980729030283	WITHOUT_CLASSIFICATION	1.927096971731858E-6	DEFECT
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.99998605833546	WITHOUT_CLASSIFICATION	1.3941664539987469E-5	DEFECT
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9848129573812545	WITHOUT_CLASSIFICATION	0.015187042618745485	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999765545166601	WITHOUT_CLASSIFICATION	2.344548333995843E-5	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999067723801361	WITHOUT_CLASSIFICATION	9.322761986395542E-5	DEFECT
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999980737763512	WITHOUT_CLASSIFICATION	1.926223648756145E-6	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998783950288	WITHOUT_CLASSIFICATION	1.2160497121020159E-7	DEFECT
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999987218701082	WITHOUT_CLASSIFICATION	1.2781298917918416E-6	DEFECT
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9999645527949812	WITHOUT_CLASSIFICATION	3.5447205018822206E-5	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999540793958	WITHOUT_CLASSIFICATION	4.5920604233431366E-8	DEFECT
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999075615419	WITHOUT_CLASSIFICATION	9.243845817176701E-8	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945035155113	WITHOUT_CLASSIFICATION	5.496484488692122E-6	DEFECT
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999999507851824	WITHOUT_CLASSIFICATION	4.921481759793463E-7	DEFECT
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999999584158694	WITHOUT_CLASSIFICATION	4.158413058686648E-8	DEFECT
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9921274892177893	WITHOUT_CLASSIFICATION	0.00787251078221075	DEFECT
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999999841449412	WITHOUT_CLASSIFICATION	1.5855058753798145E-8	DEFECT
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999999598178094	WITHOUT_CLASSIFICATION	4.018219061396717E-8	DEFECT
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999067723801361	WITHOUT_CLASSIFICATION	9.322761986395542E-5	DEFECT
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998783950288	WITHOUT_CLASSIFICATION	1.2160497121020159E-7	DEFECT
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999904342416898	WITHOUT_CLASSIFICATION	9.565758310244065E-6	DEFECT
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999600643044608	WITHOUT_CLASSIFICATION	3.993569553928832E-5	DEFECT
// discriminator column	WITHOUT_CLASSIFICATION	0.9999999537402341	WITHOUT_CLASSIFICATION	4.625976591297017E-8	DEFECT
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999765545166601	WITHOUT_CLASSIFICATION	2.344548333995843E-5	DEFECT
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999313714714	WITHOUT_CLASSIFICATION	6.862852865708358E-8	DEFECT
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999999385917661	WITHOUT_CLASSIFICATION	6.140823389746103E-7	DEFECT
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999964715984813	WITHOUT_CLASSIFICATION	3.5284015186677506E-6	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999939649476	WITHOUT_CLASSIFICATION	6.035052400453817E-7	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945035155113	WITHOUT_CLASSIFICATION	5.496484488692122E-6	DEFECT
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999996832435123	WITHOUT_CLASSIFICATION	3.1675648769177446E-7	DEFECT
// JOINS	WITHOUT_CLASSIFICATION	0.9999905366319585	WITHOUT_CLASSIFICATION	9.463368041507102E-6	DEFECT
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.999999171242901	WITHOUT_CLASSIFICATION	8.2875709887241E-7	DEFECT
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999987710208113	WITHOUT_CLASSIFICATION	1.2289791888252078E-6	DEFECT
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999999409815226	WITHOUT_CLASSIFICATION	5.901847741450051E-8	DEFECT
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999999655640648	WITHOUT_CLASSIFICATION	3.443593529827506E-8	DEFECT
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999617552242	WITHOUT_CLASSIFICATION	3.8244775733932536E-8	DEFECT
//render the SQL	WITHOUT_CLASSIFICATION	0.9999861743903736	WITHOUT_CLASSIFICATION	1.3825609626323681E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999803906312	WITHOUT_CLASSIFICATION	1.9609368803223242E-7	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999513378027	WITHOUT_CLASSIFICATION	4.8662197349178065E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999969651944	WITHOUT_CLASSIFICATION	3.0348056840032808E-9	DEFECT
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9958816357537197	WITHOUT_CLASSIFICATION	0.004118364246280369	DEFECT
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999376625802411	WITHOUT_CLASSIFICATION	6.233741975892582E-5	DEFECT
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999891127249971	WITHOUT_CLASSIFICATION	1.0887275002817623E-5	DEFECT
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999988504773353	WITHOUT_CLASSIFICATION	1.1495226647825164E-6	DEFECT
// SQL strings	WITHOUT_CLASSIFICATION	0.9999991470951055	WITHOUT_CLASSIFICATION	8.529048946153599E-7	DEFECT
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999482960499	WITHOUT_CLASSIFICATION	5.1703950120043595E-8	DEFECT
// PROPERTIES	WITHOUT_CLASSIFICATION	0.99999939649476	WITHOUT_CLASSIFICATION	6.035052400453817E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999983310417156	WITHOUT_CLASSIFICATION	1.668958284323692E-6	DEFECT
// VERSION	WITHOUT_CLASSIFICATION	0.999998148380146	WITHOUT_CLASSIFICATION	1.8516198539470418E-6	DEFECT
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999974526951886	WITHOUT_CLASSIFICATION	2.547304811325923E-6	DEFECT
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999973093632897	WITHOUT_CLASSIFICATION	2.6906367103185162E-6	DEFECT
//before add :-)	WITHOUT_CLASSIFICATION	0.9999983612720901	WITHOUT_CLASSIFICATION	1.6387279099570731E-6	DEFECT
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999999613133265	WITHOUT_CLASSIFICATION	3.86866735887159E-8	DEFECT
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999963180025032	WITHOUT_CLASSIFICATION	3.681997496756999E-6	DEFECT
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996804929297374	WITHOUT_CLASSIFICATION	3.195070702626798E-4	DEFECT
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9998981889924143	WITHOUT_CLASSIFICATION	1.0181100758561962E-4	DEFECT
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9995007381513177	WITHOUT_CLASSIFICATION	4.992618486823428E-4	DEFECT
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999995054284649	WITHOUT_CLASSIFICATION	4.945715350929382E-7	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999975160485083	WITHOUT_CLASSIFICATION	2.4839514916995802E-5	DEFECT
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999997713167921	WITHOUT_CLASSIFICATION	2.2868320779392877E-7	DEFECT
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999749980131472	WITHOUT_CLASSIFICATION	2.500198685284572E-5	DEFECT
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999997147714383	WITHOUT_CLASSIFICATION	2.8522856164920495E-7	DEFECT
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999994951385014	WITHOUT_CLASSIFICATION	5.048614985432579E-7	DEFECT
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999836088657698	WITHOUT_CLASSIFICATION	1.639113423026223E-5	DEFECT
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999899948817	WITHOUT_CLASSIFICATION	1.000511821295814E-8	DEFECT
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999999987730737	WITHOUT_CLASSIFICATION	1.226926305459266E-8	DEFECT
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999923732188284	WITHOUT_CLASSIFICATION	7.6267811717085735E-6	DEFECT
// ALIASES	WITHOUT_CLASSIFICATION	0.9999905724627729	WITHOUT_CLASSIFICATION	9.42753722716956E-6	DEFECT
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999999986870421	WITHOUT_CLASSIFICATION	1.3129578867727612E-8	DEFECT
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999153083586	WITHOUT_CLASSIFICATION	8.469164129758459E-8	DEFECT
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999620741776	WITHOUT_CLASSIFICATION	3.792582233004205E-8	DEFECT
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999467044163	WITHOUT_CLASSIFICATION	5.329558364032273E-8	DEFECT
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9950924079108786	WITHOUT_CLASSIFICATION	0.004907592089121372	DEFECT
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999993166514102	WITHOUT_CLASSIFICATION	6.83348589748022E-7	DEFECT
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999635444981823	WITHOUT_CLASSIFICATION	3.645550181775637E-5	DEFECT
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999833203092601	WITHOUT_CLASSIFICATION	1.6679690740006084E-5	DEFECT
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9926614387491481	WITHOUT_CLASSIFICATION	0.0073385612508518865	DEFECT
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999967632978359	WITHOUT_CLASSIFICATION	3.236702164036816E-6	DEFECT
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999634941556155	WITHOUT_CLASSIFICATION	3.650584438453611E-5	DEFECT
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999999905143021	WITHOUT_CLASSIFICATION	9.485697898237345E-9	DEFECT
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999972667925344	WITHOUT_CLASSIFICATION	2.7332074655712003E-6	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999602146768425	WITHOUT_CLASSIFICATION	3.9785323157605994E-5	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998495900017	WITHOUT_CLASSIFICATION	1.5040999840055182E-7	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999689038693	WITHOUT_CLASSIFICATION	3.109613065771251E-8	DEFECT
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.999997484287138	WITHOUT_CLASSIFICATION	2.515712861933129E-6	DEFECT
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998495900017	WITHOUT_CLASSIFICATION	1.5040999840055182E-7	DEFECT
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999602146768425	WITHOUT_CLASSIFICATION	3.9785323157605994E-5	DEFECT
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999689038693	WITHOUT_CLASSIFICATION	3.109613065771251E-8	DEFECT
// add the primary key	WITHOUT_CLASSIFICATION	0.9999995307668659	WITHOUT_CLASSIFICATION	4.692331341469289E-7	DEFECT
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999999877013939	WITHOUT_CLASSIFICATION	1.2298606227256155E-8	DEFECT
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999997748756969	WITHOUT_CLASSIFICATION	2.2512430309712204E-6	DEFECT
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999886613584626	WITHOUT_CLASSIFICATION	1.1338641537307761E-5	DEFECT
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999929233405649	WITHOUT_CLASSIFICATION	7.076659435127685E-6	DEFECT
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6332535572778057	DEFECT	0.3667464427221943	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999196261354562	WITHOUT_CLASSIFICATION	8.037386454382932E-5	DEFECT
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999789727996334	WITHOUT_CLASSIFICATION	2.1027200366634217E-5	DEFECT
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999999992417575	WITHOUT_CLASSIFICATION	7.582425050559571E-9	DEFECT
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998605129620324	WITHOUT_CLASSIFICATION	1.394870379675933E-4	DEFECT
// starting index	WITHOUT_CLASSIFICATION	0.9999958332019847	WITHOUT_CLASSIFICATION	4.166798015356024E-6	DEFECT
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999986976199471	WITHOUT_CLASSIFICATION	1.3023800528925155E-6	DEFECT
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994889112031392	WITHOUT_CLASSIFICATION	5.110887968608979E-4	DEFECT
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999882065181183	WITHOUT_CLASSIFICATION	1.1793481881710586E-5	DEFECT
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999998037233726	WITHOUT_CLASSIFICATION	1.96276627397396E-6	DEFECT
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999986138585906	WITHOUT_CLASSIFICATION	1.386141409377818E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958618348979	WITHOUT_CLASSIFICATION	4.1381651020474324E-6	DEFECT
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999999526813262	WITHOUT_CLASSIFICATION	4.731867364640011E-8	DEFECT
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9999991926859609	WITHOUT_CLASSIFICATION	8.07314039062127E-7	DEFECT
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999999992232811	WITHOUT_CLASSIFICATION	7.767189931153909E-10	DEFECT
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999975259966616	WITHOUT_CLASSIFICATION	2.474003338384027E-6	DEFECT
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999999420334	WITHOUT_CLASSIFICATION	5.7966585296979244E-11	DEFECT
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999757124265104	WITHOUT_CLASSIFICATION	2.4287573489692343E-5	DEFECT
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999959661524	WITHOUT_CLASSIFICATION	4.033847576555583E-9	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999996310168	WITHOUT_CLASSIFICATION	3.689831973107802E-10	DEFECT
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999996310168	WITHOUT_CLASSIFICATION	3.689831973107802E-10	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999993813546	WITHOUT_CLASSIFICATION	6.186453506181669E-10	DEFECT
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999993813546	WITHOUT_CLASSIFICATION	6.186453506181669E-10	DEFECT
// not supported	WITHOUT_CLASSIFICATION	0.9999975980623655	WITHOUT_CLASSIFICATION	2.4019376344647214E-6	DEFECT
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999958618348979	WITHOUT_CLASSIFICATION	4.1381651020474324E-6	DEFECT
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999999938781277	WITHOUT_CLASSIFICATION	6.121872323728325E-9	DEFECT
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999992689164	WITHOUT_CLASSIFICATION	7.310836742663828E-10	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998988381725	WITHOUT_CLASSIFICATION	1.0116182756097678E-7	DEFECT
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999998988381725	WITHOUT_CLASSIFICATION	1.0116182756097678E-7	DEFECT
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999980983128287	WITHOUT_CLASSIFICATION	1.901687171377291E-6	DEFECT
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999998473081074	WITHOUT_CLASSIFICATION	1.526918925797717E-7	DEFECT
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999999729815201	WITHOUT_CLASSIFICATION	2.701847988843083E-8	DEFECT
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999997404186843	WITHOUT_CLASSIFICATION	2.5958131573016554E-7	DEFECT
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9995360393678695	WITHOUT_CLASSIFICATION	4.639606321305044E-4	DEFECT
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9748815646398998	WITHOUT_CLASSIFICATION	0.02511843536010011	DEFECT
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999786338986467	WITHOUT_CLASSIFICATION	2.136610135326195E-5	DEFECT
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9999909467256053	WITHOUT_CLASSIFICATION	9.053274394747241E-6	DEFECT
//now render the joins	WITHOUT_CLASSIFICATION	0.9999896992458134	WITHOUT_CLASSIFICATION	1.0300754186636807E-5	DEFECT
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999995964364495	WITHOUT_CLASSIFICATION	4.035635504920653E-7	DEFECT
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999991470043095	WITHOUT_CLASSIFICATION	8.52995690458592E-7	DEFECT
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999988597477454	WITHOUT_CLASSIFICATION	1.140252254554026E-6	DEFECT
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999990351122967	WITHOUT_CLASSIFICATION	9.648877033470332E-7	DEFECT
//select SQL	WITHOUT_CLASSIFICATION	0.9999987662214738	WITHOUT_CLASSIFICATION	1.233778526236001E-6	DEFECT
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999999776027471	WITHOUT_CLASSIFICATION	2.2397252948426854E-8	DEFECT
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999998784129063	WITHOUT_CLASSIFICATION	1.2158709376852227E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973462927207	WITHOUT_CLASSIFICATION	2.653707279261163E-6	DEFECT
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999988010313687	WITHOUT_CLASSIFICATION	1.198968631260563E-6	DEFECT
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.99999979994277	WITHOUT_CLASSIFICATION	2.0005722997352823E-7	DEFECT
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999948585844097	WITHOUT_CLASSIFICATION	5.141415590292449E-6	DEFECT
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999980806118215	WITHOUT_CLASSIFICATION	1.9193881784739415E-6	DEFECT
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999978790478417	WITHOUT_CLASSIFICATION	2.1209521582811556E-6	DEFECT
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999987895341715	WITHOUT_CLASSIFICATION	1.2104658284206988E-6	DEFECT
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999999362481676	WITHOUT_CLASSIFICATION	6.375183241077795E-8	DEFECT
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999859263725492	WITHOUT_CLASSIFICATION	1.407362745074521E-5	DEFECT
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999999993009315	WITHOUT_CLASSIFICATION	6.990684996188418E-9	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999975160485083	WITHOUT_CLASSIFICATION	2.4839514916995802E-5	DEFECT
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999963537574238	WITHOUT_CLASSIFICATION	3.646242576226498E-6	DEFECT
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999347438662521	WITHOUT_CLASSIFICATION	6.525613374780718E-5	DEFECT
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976424281071	WITHOUT_CLASSIFICATION	2.3575718929394173E-6	DEFECT
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943628225636	WITHOUT_CLASSIFICATION	5.637177436482888E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999974579031847	WITHOUT_CLASSIFICATION	2.5420968152512615E-6	DEFECT
//cannot occur	WITHOUT_CLASSIFICATION	0.9999974579031847	WITHOUT_CLASSIFICATION	2.5420968152512615E-6	DEFECT
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999970737358131	WITHOUT_CLASSIFICATION	2.9262641869409894E-6	DEFECT
// try "get"	WITHOUT_CLASSIFICATION	0.9999978413254956	WITHOUT_CLASSIFICATION	2.1586745044050825E-6	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999605477858731	WITHOUT_CLASSIFICATION	3.945221412691986E-5	DEFECT
// do nothing...	WITHOUT_CLASSIFICATION	0.9999605477858731	WITHOUT_CLASSIFICATION	3.945221412691986E-5	DEFECT
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999937445814472	WITHOUT_CLASSIFICATION	6.255418552828615E-6	DEFECT
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999876518950654	WITHOUT_CLASSIFICATION	1.2348104934497873E-5	DEFECT
// do not do anything	WITHOUT_CLASSIFICATION	0.9999437390531845	WITHOUT_CLASSIFICATION	5.626094681552834E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999652584362	WITHOUT_CLASSIFICATION	3.474156380665116E-7	DEFECT
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999997540232642	WITHOUT_CLASSIFICATION	2.45976735832726E-7	DEFECT
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999961187571734	WITHOUT_CLASSIFICATION	3.881242826549723E-6	DEFECT
// otherwise:	WITHOUT_CLASSIFICATION	0.9999998101231957	WITHOUT_CLASSIFICATION	1.8987680415247954E-7	DEFECT
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999990898446587	WITHOUT_CLASSIFICATION	9.101553412992782E-7	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999779525830603	WITHOUT_CLASSIFICATION	2.2047416939609754E-5	DEFECT
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999779525830603	WITHOUT_CLASSIFICATION	2.2047416939609754E-5	DEFECT
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999998362345136	WITHOUT_CLASSIFICATION	1.637654864042277E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999994375423554	WITHOUT_CLASSIFICATION	5.624576444878993E-7	DEFECT
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999994375423554	WITHOUT_CLASSIFICATION	5.624576444878993E-7	DEFECT
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9999938528291074	WITHOUT_CLASSIFICATION	6.147170892632447E-6	DEFECT
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998879447709	WITHOUT_CLASSIFICATION	1.1205522907373909E-7	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9977479713041162	WITHOUT_CLASSIFICATION	0.0022520286958837396	DEFECT
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997757281464	WITHOUT_CLASSIFICATION	2.2427185369137059E-7	DEFECT
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997731910258	WITHOUT_CLASSIFICATION	2.2680897424474486E-7	DEFECT
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999595752829	WITHOUT_CLASSIFICATION	4.0424717248362884E-8	DEFECT
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999976689295337	WITHOUT_CLASSIFICATION	2.3310704663509815E-6	DEFECT
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999985316279161	WITHOUT_CLASSIFICATION	1.4683720838203311E-6	DEFECT
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999347663497	WITHOUT_CLASSIFICATION	6.523365022994707E-8	DEFECT
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9977907896944028	WITHOUT_CLASSIFICATION	0.002209210305597224	DEFECT
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999861583046201	WITHOUT_CLASSIFICATION	1.3841695379837662E-5	DEFECT
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999998722913196	WITHOUT_CLASSIFICATION	1.2770868030525985E-7	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999918025886109	WITHOUT_CLASSIFICATION	8.19741138913233E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999918025886109	WITHOUT_CLASSIFICATION	8.19741138913233E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999918025886109	WITHOUT_CLASSIFICATION	8.19741138913233E-6	DEFECT
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999918025886109	WITHOUT_CLASSIFICATION	8.19741138913233E-6	DEFECT
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999945477272735	WITHOUT_CLASSIFICATION	5.452272726443756E-6	DEFECT
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9806633109279801	WITHOUT_CLASSIFICATION	0.019336689072019946	DEFECT
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999959049045889	WITHOUT_CLASSIFICATION	4.095095411176388E-6	DEFECT
//for MySQL	WITHOUT_CLASSIFICATION	0.9999949751979099	WITHOUT_CLASSIFICATION	5.024802090114392E-6	DEFECT
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999998667347494	WITHOUT_CLASSIFICATION	1.33265250677474E-7	DEFECT
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999573292115058	WITHOUT_CLASSIFICATION	4.267078849425934E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9999969099839751	WITHOUT_CLASSIFICATION	3.090016024983941E-6	DEFECT
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999984337664048	WITHOUT_CLASSIFICATION	1.5662335952636383E-6	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999964324796	WITHOUT_CLASSIFICATION	3.567520409389804E-8	DEFECT
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998711674293	WITHOUT_CLASSIFICATION	1.288325706840618E-7	DEFECT
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999986125331468	WITHOUT_CLASSIFICATION	1.3874668531817165E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999316651144505	WITHOUT_CLASSIFICATION	6.833488554949776E-5	DEFECT
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999320603399053	WITHOUT_CLASSIFICATION	6.793966009467615E-5	DEFECT
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999998669742367	WITHOUT_CLASSIFICATION	1.3302576333037668E-7	DEFECT
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999977059208828	WITHOUT_CLASSIFICATION	2.2940791171935883E-6	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999316651144505	WITHOUT_CLASSIFICATION	6.833488554949776E-5	DEFECT
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999866472714077	WITHOUT_CLASSIFICATION	1.335272859219767E-5	DEFECT
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999969781297776	WITHOUT_CLASSIFICATION	3.0218702222999865E-6	DEFECT
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998131678266	WITHOUT_CLASSIFICATION	1.868321734001334E-6	DEFECT
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999989277553142	WITHOUT_CLASSIFICATION	1.0722446858488033E-6	DEFECT
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999986649803757	WITHOUT_CLASSIFICATION	1.335019624330019E-6	DEFECT
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9997858867869089	WITHOUT_CLASSIFICATION	2.1411321309108925E-4	DEFECT
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999999042994313	WITHOUT_CLASSIFICATION	9.570056864324598E-8	DEFECT
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999973476239872	WITHOUT_CLASSIFICATION	2.6523760128226503E-6	DEFECT
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999166510705	WITHOUT_CLASSIFICATION	8.334892953727197E-8	DEFECT
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999998445508831	WITHOUT_CLASSIFICATION	1.554491169901315E-7	DEFECT
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999657638605	WITHOUT_CLASSIFICATION	3.423613945516977E-8	DEFECT
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999997866740705	WITHOUT_CLASSIFICATION	2.1332592952015615E-7	DEFECT
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9989634029106633	WITHOUT_CLASSIFICATION	0.0010365970893367103	DEFECT
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999974177387203	WITHOUT_CLASSIFICATION	2.5822612797539513E-6	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999757479728	WITHOUT_CLASSIFICATION	2.425202713962601E-8	DEFECT
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9996836122843019	WITHOUT_CLASSIFICATION	3.1638771569802103E-4	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982493346	WITHOUT_CLASSIFICATION	1.7506653905341298E-9	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999546256342219	WITHOUT_CLASSIFICATION	4.537436577824995E-5	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999580992789	WITHOUT_CLASSIFICATION	4.1900721079598366E-8	DEFECT
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999546256342219	WITHOUT_CLASSIFICATION	4.537436577824995E-5	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999872996197	WITHOUT_CLASSIFICATION	1.2700380250763662E-8	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993586547968	WITHOUT_CLASSIFICATION	6.413452030715611E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999775398139349	WITHOUT_CLASSIFICATION	2.246018606516106E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999998821217934	WITHOUT_CLASSIFICATION	1.178782066398004E-7	DEFECT
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999999982493346	WITHOUT_CLASSIFICATION	1.7506653905341298E-9	DEFECT
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999999580992789	WITHOUT_CLASSIFICATION	4.1900721079598366E-8	DEFECT
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999872996197	WITHOUT_CLASSIFICATION	1.2700380250763662E-8	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999431753723	WITHOUT_CLASSIFICATION	5.68246276643255E-8	DEFECT
//return currentId;	WITHOUT_CLASSIFICATION	0.9999580139440308	WITHOUT_CLASSIFICATION	4.198605596928347E-5	DEFECT
//reset the id	WITHOUT_CLASSIFICATION	0.999998128910328	WITHOUT_CLASSIFICATION	1.8710896719490298E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//reset the version	WITHOUT_CLASSIFICATION	0.9999938289198266	WITHOUT_CLASSIFICATION	6.171080173349398E-6	DEFECT
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.999863064273741	WITHOUT_CLASSIFICATION	1.369357262590013E-4	DEFECT
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999982624228	WITHOUT_CLASSIFICATION	1.7375773195687045E-9	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973462927207	WITHOUT_CLASSIFICATION	2.653707279261163E-6	DEFECT
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999993586547968	WITHOUT_CLASSIFICATION	6.413452030715611E-7	DEFECT
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999980719129854	WITHOUT_CLASSIFICATION	1.928087014564289E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999513414686825	WITHOUT_CLASSIFICATION	4.865853131748437E-5	DEFECT
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999998732275646	WITHOUT_CLASSIFICATION	1.267724354827363E-7	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973462927207	WITHOUT_CLASSIFICATION	2.653707279261163E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999999376951465	WITHOUT_CLASSIFICATION	6.230485351324855E-8	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973462927207	WITHOUT_CLASSIFICATION	2.653707279261163E-6	DEFECT
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999999998671591	WITHOUT_CLASSIFICATION	1.3284090833463108E-9	DEFECT
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998284327348	WITHOUT_CLASSIFICATION	1.715672651539634E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9983550787287659	WITHOUT_CLASSIFICATION	0.001644921271233979	DEFECT
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999999663126551	WITHOUT_CLASSIFICATION	3.368734497642837E-8	DEFECT
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999999258563821	WITHOUT_CLASSIFICATION	7.414361784018834E-8	DEFECT
// Collection Types:	WITHOUT_CLASSIFICATION	0.999998661229086	WITHOUT_CLASSIFICATION	1.3387709140182501E-6	DEFECT
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999977796273017	WITHOUT_CLASSIFICATION	2.2203726983018676E-5	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999737387009944	WITHOUT_CLASSIFICATION	2.626129900555684E-5	DEFECT
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999999804255136	WITHOUT_CLASSIFICATION	1.957448639377214E-7	DEFECT
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999919931514452	WITHOUT_CLASSIFICATION	8.006848554839448E-6	DEFECT
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999482262848953	WITHOUT_CLASSIFICATION	5.177371510467682E-5	DEFECT
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999988738827332	WITHOUT_CLASSIFICATION	1.1261172667134572E-6	DEFECT
//TODO!	WITHOUT_CLASSIFICATION	0.9977479713041162	WITHOUT_CLASSIFICATION	0.0022520286958837396	DEFECT
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999880906328141	WITHOUT_CLASSIFICATION	1.1909367185768999E-5	DEFECT
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9984554126884999	WITHOUT_CLASSIFICATION	0.0015445873115001302	DEFECT
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999990499613522	WITHOUT_CLASSIFICATION	9.500386477441644E-7	DEFECT
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9997409024530424	WITHOUT_CLASSIFICATION	2.590975469576369E-4	DEFECT
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999991411459654	WITHOUT_CLASSIFICATION	8.588540346180823E-7	DEFECT
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999995851041453	WITHOUT_CLASSIFICATION	4.148958546094152E-7	DEFECT
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9995978534312147	WITHOUT_CLASSIFICATION	4.021465687853788E-4	DEFECT
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9980212438511906	WITHOUT_CLASSIFICATION	0.001978756148809338	DEFECT
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999920479479	WITHOUT_CLASSIFICATION	7.952052140175321E-9	DEFECT
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999984593783532	WITHOUT_CLASSIFICATION	1.5406216467987715E-5	DEFECT
//TODO!!!	WITHOUT_CLASSIFICATION	0.9975981021321088	WITHOUT_CLASSIFICATION	0.002401897867891282	DEFECT
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9984791304398316	WITHOUT_CLASSIFICATION	0.0015208695601684104	DEFECT
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994670590304169	WITHOUT_CLASSIFICATION	5.329409695831994E-4	DEFECT
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999393017274	WITHOUT_CLASSIFICATION	6.069827264310503E-8	DEFECT
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999997050310114	WITHOUT_CLASSIFICATION	2.949689885498219E-7	DEFECT
//noop	WITHOUT_CLASSIFICATION	0.9999794820819601	WITHOUT_CLASSIFICATION	2.0517918039911306E-5	DEFECT
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999825226600144	WITHOUT_CLASSIFICATION	1.7477339985616143E-5	DEFECT
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999953318797217	WITHOUT_CLASSIFICATION	4.668120278411008E-6	DEFECT
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999940056702942	WITHOUT_CLASSIFICATION	5.994329705907646E-6	DEFECT
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999961897211516	WITHOUT_CLASSIFICATION	3.810278848486255E-6	DEFECT
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999667342164321	WITHOUT_CLASSIFICATION	3.326578356784626E-5	DEFECT
//TODO	WITHOUT_CLASSIFICATION	0.9996839197581463	WITHOUT_CLASSIFICATION	3.1608024185364247E-4	DEFECT
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999597413239	WITHOUT_CLASSIFICATION	4.025867613462707E-8	DEFECT
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999974704783872	WITHOUT_CLASSIFICATION	2.5295216128131005E-6	DEFECT
//cache this	WITHOUT_CLASSIFICATION	0.9999950841791453	WITHOUT_CLASSIFICATION	4.91582085467797E-6	DEFECT
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999977132980677	WITHOUT_CLASSIFICATION	2.286701932250698E-6	DEFECT
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999966981366375	WITHOUT_CLASSIFICATION	3.3018633624612217E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9990232758542367	WITHOUT_CLASSIFICATION	9.7672414576336E-4	DEFECT
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999992920715035	WITHOUT_CLASSIFICATION	7.079284964890469E-7	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999700331896604	WITHOUT_CLASSIFICATION	2.9966810339645897E-5	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999936539565946	WITHOUT_CLASSIFICATION	6.3460434054333985E-6	DEFECT
//nothing to do	WITHOUT_CLASSIFICATION	0.9999936539565946	WITHOUT_CLASSIFICATION	6.3460434054333985E-6	DEFECT
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999931746053385	WITHOUT_CLASSIFICATION	6.8253946615063105E-6	DEFECT
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999737387009944	WITHOUT_CLASSIFICATION	2.626129900555684E-5	DEFECT
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9999807272671755	WITHOUT_CLASSIFICATION	1.92727328245946E-5	DEFECT
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999819957437	WITHOUT_CLASSIFICATION	1.8004256319348225E-8	DEFECT
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999756488775005	WITHOUT_CLASSIFICATION	2.4351122499506833E-4	DEFECT
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999679041446512	WITHOUT_CLASSIFICATION	3.209585534867446E-5	DEFECT
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999809934929713	WITHOUT_CLASSIFICATION	1.9006507028608285E-5	DEFECT
//NOOP	WITHOUT_CLASSIFICATION	0.9999760462932411	WITHOUT_CLASSIFICATION	2.3953706758889568E-5	DEFECT
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999015915938875	WITHOUT_CLASSIFICATION	9.840840611252357E-5	DEFECT
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999999950633838	WITHOUT_CLASSIFICATION	4.93661622084824E-9	DEFECT
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999993470591419	WITHOUT_CLASSIFICATION	6.5294085810004364E-6	DEFECT
// return false;	WITHOUT_CLASSIFICATION	0.9999991721410384	WITHOUT_CLASSIFICATION	8.2785896149733E-7	DEFECT
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9999999557879856	WITHOUT_CLASSIFICATION	4.4212014440509765E-8	DEFECT
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999998132594718	WITHOUT_CLASSIFICATION	1.8674052815672852E-7	DEFECT
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999999220144395	WITHOUT_CLASSIFICATION	7.798556041724086E-8	DEFECT
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999989659067	WITHOUT_CLASSIFICATION	1.0340932004768213E-9	DEFECT
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997818124259	WITHOUT_CLASSIFICATION	2.1818757405625001E-7	DEFECT
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999983899155	WITHOUT_CLASSIFICATION	1.6100845517543298E-9	DEFECT
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999994618369	WITHOUT_CLASSIFICATION	5.381631265257094E-10	DEFECT
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999999756625678	WITHOUT_CLASSIFICATION	2.4337432137719057E-8	DEFECT
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999999967915085	WITHOUT_CLASSIFICATION	3.2084914984498607E-9	DEFECT
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.999979298567076	WITHOUT_CLASSIFICATION	2.070143292388074E-5	DEFECT
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999983301038609	WITHOUT_CLASSIFICATION	1.6698961390586369E-6	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999923416954889	WITHOUT_CLASSIFICATION	7.658304511050048E-6	DEFECT
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9990232758542367	WITHOUT_CLASSIFICATION	9.7672414576336E-4	DEFECT
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999945003276318	WITHOUT_CLASSIFICATION	5.499672368194436E-6	DEFECT
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999829311892115	WITHOUT_CLASSIFICATION	1.7068810788493572E-4	DEFECT
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999985302574957	WITHOUT_CLASSIFICATION	1.4697425042453248E-6	DEFECT
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999883306714364	WITHOUT_CLASSIFICATION	1.1669328563551437E-5	DEFECT
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9990798975340811	WITHOUT_CLASSIFICATION	9.201024659189291E-4	DEFECT
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999999661322935	WITHOUT_CLASSIFICATION	3.386770650097354E-7	DEFECT
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999983472878419	WITHOUT_CLASSIFICATION	1.6527121580438792E-6	DEFECT
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999999585488106	WITHOUT_CLASSIFICATION	4.145118945678354E-8	DEFECT
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998151523748	WITHOUT_CLASSIFICATION	1.8484762527362278E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999995512898021	WITHOUT_CLASSIFICATION	4.4871019791931914E-7	DEFECT
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998685518987	WITHOUT_CLASSIFICATION	1.314481012260571E-7	DEFECT
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999592824382	WITHOUT_CLASSIFICATION	4.0717561867494256E-8	DEFECT
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9999626304119498	WITHOUT_CLASSIFICATION	3.736958805023045E-5	DEFECT
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.8184087341650411	WITHOUT_CLASSIFICATION	0.18159126583495885	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999907967824	WITHOUT_CLASSIFICATION	9.203217576070386E-9	DEFECT
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999999907967824	WITHOUT_CLASSIFICATION	9.203217576070386E-9	DEFECT
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999981016265868	WITHOUT_CLASSIFICATION	1.8983734132081974E-6	DEFECT
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999999891890841	WITHOUT_CLASSIFICATION	1.0810916022976708E-8	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995907748039686	WITHOUT_CLASSIFICATION	4.0922519603138534E-4	DEFECT
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995907748039686	WITHOUT_CLASSIFICATION	4.0922519603138534E-4	DEFECT
// use default behavior	WITHOUT_CLASSIFICATION	0.9999999765389184	WITHOUT_CLASSIFICATION	2.3461081565679496E-8	DEFECT
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999612435492372	WITHOUT_CLASSIFICATION	3.8756450762781464E-5	DEFECT
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9999811168004642	WITHOUT_CLASSIFICATION	1.8883199535794936E-5	DEFECT
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999999981186507	WITHOUT_CLASSIFICATION	1.8813492982451228E-9	DEFECT
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999995070944342	WITHOUT_CLASSIFICATION	4.929055657334163E-7	DEFECT
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999889251226683	WITHOUT_CLASSIFICATION	1.107487733169415E-5	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999048948854	WITHOUT_CLASSIFICATION	9.51051145911501E-8	DEFECT
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999048948854	WITHOUT_CLASSIFICATION	9.51051145911501E-8	DEFECT
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999960860154068	WITHOUT_CLASSIFICATION	3.913984593194003E-6	DEFECT
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999996613520465	WITHOUT_CLASSIFICATION	3.386479534348521E-7	DEFECT
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999992477651397	WITHOUT_CLASSIFICATION	7.522348603343695E-7	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999952634667842	WITHOUT_CLASSIFICATION	4.736533215810747E-6	DEFECT
// returnign null!	WITHOUT_CLASSIFICATION	0.9999952634667842	WITHOUT_CLASSIFICATION	4.736533215810747E-6	DEFECT
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999972911609679	WITHOUT_CLASSIFICATION	2.708839032129925E-6	DEFECT
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999985317971998	WITHOUT_CLASSIFICATION	1.4682028001602825E-6	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999755653025313	WITHOUT_CLASSIFICATION	2.443469746868758E-5	DEFECT
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999999626602853	WITHOUT_CLASSIFICATION	3.733971472640591E-8	DEFECT
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999831435674884	WITHOUT_CLASSIFICATION	1.685643251151117E-5	DEFECT
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999437034134	WITHOUT_CLASSIFICATION	5.629658660034277E-8	DEFECT
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999825803340398	WITHOUT_CLASSIFICATION	1.741966596022054E-5	DEFECT
// the current iterator	WITHOUT_CLASSIFICATION	0.9999997497792308	WITHOUT_CLASSIFICATION	2.5022076924399717E-7	DEFECT
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999999915882473	WITHOUT_CLASSIFICATION	8.41175275112246E-9	DEFECT
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999856053543938	WITHOUT_CLASSIFICATION	1.4394645606246237E-5	DEFECT
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999980837760282	WITHOUT_CLASSIFICATION	1.916223971821408E-6	DEFECT
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998841408102551	WITHOUT_CLASSIFICATION	1.1585918974484705E-4	DEFECT
//doable if needed	WITHOUT_CLASSIFICATION	0.9999998809811914	WITHOUT_CLASSIFICATION	1.1901880853742866E-7	DEFECT
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999660156816089	WITHOUT_CLASSIFICATION	3.3984318391101677E-5	DEFECT
// peek ahead	WITHOUT_CLASSIFICATION	0.9999989133784942	WITHOUT_CLASSIFICATION	1.08662150583533E-6	DEFECT
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999321791963532	WITHOUT_CLASSIFICATION	6.782080364682394E-5	DEFECT
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999998370184605	WITHOUT_CLASSIFICATION	1.629815395214614E-7	DEFECT
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999939042986047	WITHOUT_CLASSIFICATION	6.095701395309701E-6	DEFECT
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999112122916399	WITHOUT_CLASSIFICATION	8.87877083600808E-5	DEFECT
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999924126181624	WITHOUT_CLASSIFICATION	7.587381837514799E-6	DEFECT
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999970739121754	WITHOUT_CLASSIFICATION	2.926087824635173E-6	DEFECT
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9999901196185988	WITHOUT_CLASSIFICATION	9.880381401179489E-6	DEFECT
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999981502216283	WITHOUT_CLASSIFICATION	1.8497783716814605E-6	DEFECT
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999910907212555	WITHOUT_CLASSIFICATION	8.909278744481848E-6	DEFECT
//faster?	WITHOUT_CLASSIFICATION	0.9999359734010721	WITHOUT_CLASSIFICATION	6.402659892790204E-5	DEFECT
// the name of a class	WITHOUT_CLASSIFICATION	0.9999953668130129	WITHOUT_CLASSIFICATION	4.633186987059345E-6	DEFECT
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999993693792976	WITHOUT_CLASSIFICATION	6.306207024623226E-7	DEFECT
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.999978302935995	WITHOUT_CLASSIFICATION	2.1697064005052546E-5	DEFECT
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999997985244	WITHOUT_CLASSIFICATION	2.014755705724357E-10	DEFECT
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999998691614852	WITHOUT_CLASSIFICATION	1.3083851479604747E-7	DEFECT
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9973685953935605	WITHOUT_CLASSIFICATION	0.002631404606439565	DEFECT
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999998726884244	WITHOUT_CLASSIFICATION	1.2731157564685788E-7	DEFECT
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999997966891465	WITHOUT_CLASSIFICATION	2.0331085345428498E-7	DEFECT
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999869697434425	WITHOUT_CLASSIFICATION	1.3030256557502352E-5	DEFECT
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999991101603405	WITHOUT_CLASSIFICATION	8.898396596696995E-7	DEFECT
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.999988807258113	WITHOUT_CLASSIFICATION	1.1192741886941109E-5	DEFECT
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999840045978293	WITHOUT_CLASSIFICATION	1.599540217069138E-5	DEFECT
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999998989572682	WITHOUT_CLASSIFICATION	1.0104273183967095E-7	DEFECT
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999994239623954	WITHOUT_CLASSIFICATION	5.760376045339076E-7	DEFECT
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999998183706351	WITHOUT_CLASSIFICATION	1.8162936491754597E-7	DEFECT
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999719530780843	WITHOUT_CLASSIFICATION	2.8046921915796103E-5	DEFECT
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9984662513467731	WITHOUT_CLASSIFICATION	0.0015337486532268872	DEFECT
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999976186644344	WITHOUT_CLASSIFICATION	2.3813355655361936E-6	DEFECT
// Handle actions	WITHOUT_CLASSIFICATION	0.9999997966563534	WITHOUT_CLASSIFICATION	2.0334364660786548E-7	DEFECT
// Print page	WITHOUT_CLASSIFICATION	0.9999994212700777	WITHOUT_CLASSIFICATION	5.787299222731594E-7	DEFECT
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999984923817037	WITHOUT_CLASSIFICATION	1.507618296317738E-6	DEFECT
// End unit of work	WITHOUT_CLASSIFICATION	0.9999147806198411	WITHOUT_CLASSIFICATION	8.52193801589389E-5	DEFECT
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999977230310046	WITHOUT_CLASSIFICATION	2.2769689953450307E-6	DEFECT
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999973432128247	WITHOUT_CLASSIFICATION	2.6567871753276614E-6	DEFECT
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999440682029	WITHOUT_CLASSIFICATION	5.5931797026564865E-8	DEFECT
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999179287894102	WITHOUT_CLASSIFICATION	8.207121058989559E-5	DEFECT
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999837105258	WITHOUT_CLASSIFICATION	1.628947422308764E-8	DEFECT
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998902672687	WITHOUT_CLASSIFICATION	1.0973273140146512E-7	DEFECT
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999992489639	WITHOUT_CLASSIFICATION	7.510360799293913E-10	DEFECT
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999986122893487	WITHOUT_CLASSIFICATION	1.3877106512960798E-5	DEFECT
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999994731964383	WITHOUT_CLASSIFICATION	5.268035616845844E-7	DEFECT
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9997665281336587	WITHOUT_CLASSIFICATION	2.3347186634129852E-4	DEFECT
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999990444184508	WITHOUT_CLASSIFICATION	9.555815492051707E-7	DEFECT
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999709313068271	WITHOUT_CLASSIFICATION	2.9068693172916002E-5	DEFECT
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999996595245357	WITHOUT_CLASSIFICATION	3.404754642239248E-7	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999939660472901	WITHOUT_CLASSIFICATION	6.033952709879247E-6	DEFECT
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999939660472901	WITHOUT_CLASSIFICATION	6.033952709879247E-6	DEFECT
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999210714341	WITHOUT_CLASSIFICATION	7.892856590607171E-8	DEFECT
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999319267055926	WITHOUT_CLASSIFICATION	6.807329440739311E-5	DEFECT
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999999615324	WITHOUT_CLASSIFICATION	3.846749702613553E-11	DEFECT
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999999911696976	WITHOUT_CLASSIFICATION	8.830302405342304E-9	DEFECT
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9994105274681476	WITHOUT_CLASSIFICATION	5.8947253185233E-4	DEFECT
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999969907306415	WITHOUT_CLASSIFICATION	3.0092693585783343E-6	DEFECT
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999874868369	WITHOUT_CLASSIFICATION	1.2513163104425802E-8	DEFECT
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999903196183	WITHOUT_CLASSIFICATION	9.680381779440322E-9	DEFECT
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.999945748851176	WITHOUT_CLASSIFICATION	5.425114882390748E-5	DEFECT
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999786578110214	WITHOUT_CLASSIFICATION	2.1342188978595003E-5	DEFECT
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999974317563284	WITHOUT_CLASSIFICATION	2.568243671640644E-6	DEFECT
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999900194553454	WITHOUT_CLASSIFICATION	9.980544654659482E-6	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997875219017	WITHOUT_CLASSIFICATION	2.1247809840385357E-7	DEFECT
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999999996287454	WITHOUT_CLASSIFICATION	3.7125460662492484E-10	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996560705329	WITHOUT_CLASSIFICATION	3.4392946714509596E-7	DEFECT
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999996560705329	WITHOUT_CLASSIFICATION	3.4392946714509596E-7	DEFECT
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999998078509332	WITHOUT_CLASSIFICATION	1.9214906680698685E-7	DEFECT
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9996437739179147	WITHOUT_CLASSIFICATION	3.5622608208525045E-4	DEFECT
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999114800447	WITHOUT_CLASSIFICATION	8.851995529669274E-8	DEFECT
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999149804465	WITHOUT_CLASSIFICATION	8.501955353233899E-8	DEFECT
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999915863657	WITHOUT_CLASSIFICATION	8.413634360023803E-9	DEFECT
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999671793923	WITHOUT_CLASSIFICATION	3.2820607694625296E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999939988130826	WITHOUT_CLASSIFICATION	6.001186917466629E-6	DEFECT
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9995725353425686	WITHOUT_CLASSIFICATION	4.274646574313172E-4	DEFECT
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999999992689306	WITHOUT_CLASSIFICATION	7.310694019794991E-10	DEFECT
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997959504707	WITHOUT_CLASSIFICATION	2.0404952937515207E-7	DEFECT
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999345082076	WITHOUT_CLASSIFICATION	6.549179237515669E-8	DEFECT
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999973323506	WITHOUT_CLASSIFICATION	2.6676494074488874E-8	DEFECT
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999942665355	WITHOUT_CLASSIFICATION	5.733464455618518E-9	DEFECT
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999999609965263	WITHOUT_CLASSIFICATION	3.900347371974545E-8	DEFECT
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999926201957687	WITHOUT_CLASSIFICATION	7.3798042311953375E-6	DEFECT
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9997468667904691	WITHOUT_CLASSIFICATION	2.5313320953092533E-4	DEFECT
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999993688439962	WITHOUT_CLASSIFICATION	6.31156003734558E-7	DEFECT
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.999999078952819	WITHOUT_CLASSIFICATION	9.210471809145877E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999963823287344	WITHOUT_CLASSIFICATION	3.6176712655610797E-6	DEFECT
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999330161217	WITHOUT_CLASSIFICATION	6.698387837706551E-8	DEFECT
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999764318253556	WITHOUT_CLASSIFICATION	2.356817464453546E-5	DEFECT
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998868616042	WITHOUT_CLASSIFICATION	1.1313839582112718E-7	DEFECT
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999998794921694	WITHOUT_CLASSIFICATION	1.2050783058396757E-7	DEFECT
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999997028066179	WITHOUT_CLASSIFICATION	2.9719338216030317E-7	DEFECT
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.999806058857574	WITHOUT_CLASSIFICATION	1.93941142426097E-4	DEFECT
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998689099337821	WITHOUT_CLASSIFICATION	1.3109006621795315E-4	DEFECT
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999968998089317	WITHOUT_CLASSIFICATION	3.100191068321501E-6	DEFECT
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999446724059949	WITHOUT_CLASSIFICATION	5.532759400508979E-5	DEFECT
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999464245306	WITHOUT_CLASSIFICATION	5.357546951164224E-8	DEFECT
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999999643618343	WITHOUT_CLASSIFICATION	3.5638165691423256E-7	DEFECT
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999994589186267	WITHOUT_CLASSIFICATION	5.410813733422663E-7	DEFECT
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9997131161055154	WITHOUT_CLASSIFICATION	2.868838944846128E-4	DEFECT
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999999421300308	WITHOUT_CLASSIFICATION	5.786996921186452E-8	DEFECT
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999996915715546	WITHOUT_CLASSIFICATION	3.0842844539006693E-6	DEFECT
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9999261649663347	WITHOUT_CLASSIFICATION	7.383503366536772E-5	DEFECT
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998272981103	WITHOUT_CLASSIFICATION	1.7270188964290537E-7	DEFECT
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999998456656137	WITHOUT_CLASSIFICATION	1.5433438626853804E-7	DEFECT
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999052236175	WITHOUT_CLASSIFICATION	9.477638248997644E-8	DEFECT
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999847439371033	WITHOUT_CLASSIFICATION	1.5256062896639561E-5	DEFECT
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999883889828011	WITHOUT_CLASSIFICATION	1.1611017198968503E-5	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998507098031902	WITHOUT_CLASSIFICATION	1.4929019680969078E-4	DEFECT
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998507098031902	WITHOUT_CLASSIFICATION	1.4929019680969078E-4	DEFECT
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999195629283	WITHOUT_CLASSIFICATION	8.043707161845387E-8	DEFECT
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999000387550496	WITHOUT_CLASSIFICATION	9.996124495045663E-5	DEFECT
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9999931127737045	WITHOUT_CLASSIFICATION	6.887226295469179E-6	DEFECT
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999912774425133	WITHOUT_CLASSIFICATION	8.722557486694165E-6	DEFECT
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999997320766868	WITHOUT_CLASSIFICATION	2.6792331313873037E-7	DEFECT
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999998983403836	WITHOUT_CLASSIFICATION	1.0165961640295324E-7	DEFECT
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999552142747552	WITHOUT_CLASSIFICATION	4.478572524485547E-5	DEFECT
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999344165972	WITHOUT_CLASSIFICATION	6.558340275269804E-8	DEFECT
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9974228869483784	WITHOUT_CLASSIFICATION	0.002577113051621444	DEFECT
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996456755046	WITHOUT_CLASSIFICATION	3.543244954308037E-7	DEFECT
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998369123404	WITHOUT_CLASSIFICATION	1.6308765967912327E-7	DEFECT
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9999470071492296	WITHOUT_CLASSIFICATION	5.299285077048769E-5	DEFECT
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999242594408884	WITHOUT_CLASSIFICATION	7.574055911161366E-4	DEFECT
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999061838948	WITHOUT_CLASSIFICATION	9.381610519432672E-8	DEFECT
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999982887825201	WITHOUT_CLASSIFICATION	1.7112174799344207E-6	DEFECT
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999999548317197	WITHOUT_CLASSIFICATION	4.516828026637637E-8	DEFECT
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9954832204741899	WITHOUT_CLASSIFICATION	0.004516779525810009	DEFECT
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999408827339	WITHOUT_CLASSIFICATION	5.9117266162419796E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999710082801928	WITHOUT_CLASSIFICATION	2.8991719807240275E-5	DEFECT
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999999862117113	WITHOUT_CLASSIFICATION	1.3788288695277064E-7	DEFECT
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999786732130275	WITHOUT_CLASSIFICATION	2.1326786972571388E-5	DEFECT
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.99999516214482	WITHOUT_CLASSIFICATION	4.837855180010147E-6	DEFECT
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999999907265391	WITHOUT_CLASSIFICATION	9.273460912223082E-9	DEFECT
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9997317481692928	WITHOUT_CLASSIFICATION	2.682518307071775E-4	DEFECT
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999445214966756	WITHOUT_CLASSIFICATION	5.5478503324471084E-5	DEFECT
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999869370391874	WITHOUT_CLASSIFICATION	1.3062960812616027E-4	DEFECT
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.999989961465372	WITHOUT_CLASSIFICATION	1.0038534628125158E-5	DEFECT
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999792671495	WITHOUT_CLASSIFICATION	2.0732850594314195E-8	DEFECT
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.999998062587046	WITHOUT_CLASSIFICATION	1.937412954017902E-6	DEFECT
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9995927599809266	WITHOUT_CLASSIFICATION	4.0724001907347133E-4	DEFECT
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999998556009116	WITHOUT_CLASSIFICATION	1.4439908823345255E-7	DEFECT
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999957094700185	WITHOUT_CLASSIFICATION	4.290529981461991E-6	DEFECT
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999646357224	WITHOUT_CLASSIFICATION	3.536427763640827E-8	DEFECT
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999614820347	WITHOUT_CLASSIFICATION	3.85179653089338E-8	DEFECT
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999982158051	WITHOUT_CLASSIFICATION	1.7841948908823164E-9	DEFECT
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999770884441044	WITHOUT_CLASSIFICATION	2.2911555895606766E-5	DEFECT
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999884397478	WITHOUT_CLASSIFICATION	1.1560252289385852E-8	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999988842061	WITHOUT_CLASSIFICATION	1.11579390463667E-8	DEFECT
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999958217112652	WITHOUT_CLASSIFICATION	4.178288734715099E-6	DEFECT
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999981607677836	WITHOUT_CLASSIFICATION	1.8392322163809595E-6	DEFECT
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999966187805435	WITHOUT_CLASSIFICATION	3.381219456404629E-6	DEFECT
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998141261615614	WITHOUT_CLASSIFICATION	1.8587383843851046E-4	DEFECT
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999979553658	WITHOUT_CLASSIFICATION	2.044634305827681E-9	DEFECT
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999998440087	WITHOUT_CLASSIFICATION	1.5599132963333617E-10	DEFECT
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999999634862553	WITHOUT_CLASSIFICATION	3.65137447694109E-8	DEFECT
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9998457277809568	WITHOUT_CLASSIFICATION	1.5427221904314398E-4	DEFECT
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999625672335797	WITHOUT_CLASSIFICATION	3.7432766420312763E-5	DEFECT
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997875219017	WITHOUT_CLASSIFICATION	2.1247809840385357E-7	DEFECT
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999997877320764	WITHOUT_CLASSIFICATION	2.1226792356833191E-7	DEFECT
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999982648241	WITHOUT_CLASSIFICATION	1.7351758462817296E-9	DEFECT
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999992756325203	WITHOUT_CLASSIFICATION	7.243674797017539E-6	DEFECT
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999997637843667	WITHOUT_CLASSIFICATION	2.3621563319498505E-7	DEFECT
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999749412186	WITHOUT_CLASSIFICATION	2.5058781387240222E-8	DEFECT
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999221486183876	WITHOUT_CLASSIFICATION	7.785138161249205E-5	DEFECT
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9989751594812333	WITHOUT_CLASSIFICATION	0.0010248405187667537	DEFECT
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999966069713487	WITHOUT_CLASSIFICATION	3.3930286513673483E-6	DEFECT
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999977295634	WITHOUT_CLASSIFICATION	2.2704366088204254E-8	DEFECT
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997530044223731	WITHOUT_CLASSIFICATION	2.4699557762692233E-4	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999684204995	WITHOUT_CLASSIFICATION	3.157950049367925E-8	DEFECT
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999950503846464	WITHOUT_CLASSIFICATION	4.949615353577953E-6	DEFECT
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999977892850961	WITHOUT_CLASSIFICATION	2.210714903970629E-6	DEFECT
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999937895648022	WITHOUT_CLASSIFICATION	6.210435197786004E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996183527083	WITHOUT_CLASSIFICATION	3.8164729162650977E-7	DEFECT
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999955990815119	WITHOUT_CLASSIFICATION	4.400918488063783E-6	DEFECT
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999914154465995	WITHOUT_CLASSIFICATION	8.584553400555429E-6	DEFECT
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999997463637516	WITHOUT_CLASSIFICATION	2.536362483948437E-7	DEFECT
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999944604500319	WITHOUT_CLASSIFICATION	5.539549968017054E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996183527083	WITHOUT_CLASSIFICATION	3.8164729162650977E-7	DEFECT
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9823360558275751	WITHOUT_CLASSIFICATION	0.017663944172424974	DEFECT
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999984637966672	WITHOUT_CLASSIFICATION	1.5362033327743656E-6	DEFECT
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999999997290162	WITHOUT_CLASSIFICATION	2.709838324140759E-10	DEFECT
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998502253276	WITHOUT_CLASSIFICATION	1.4977467253691926E-7	DEFECT
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999948411322152	WITHOUT_CLASSIFICATION	5.158867784915057E-6	DEFECT
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999796756429307	WITHOUT_CLASSIFICATION	2.032435706939486E-5	DEFECT
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999878821996	WITHOUT_CLASSIFICATION	1.2117800495222692E-8	DEFECT
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999837252805682	WITHOUT_CLASSIFICATION	1.627471943173747E-5	DEFECT
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999993629021139	WITHOUT_CLASSIFICATION	6.37097886162703E-7	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.99998441240371	WITHOUT_CLASSIFICATION	1.5587596289864966E-5	DEFECT
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999997688460076	WITHOUT_CLASSIFICATION	2.3115399230185901E-7	DEFECT
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999883977461153	WITHOUT_CLASSIFICATION	1.1602253884738726E-5	DEFECT
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999979435679085	WITHOUT_CLASSIFICATION	2.056432091488179E-6	DEFECT
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999997751714302	WITHOUT_CLASSIFICATION	2.2482856973812347E-7	DEFECT
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999993485360905	WITHOUT_CLASSIFICATION	6.514639094980562E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999923416954889	WITHOUT_CLASSIFICATION	7.658304511050048E-6	DEFECT
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999996709063119	WITHOUT_CLASSIFICATION	3.2909368805572844E-7	DEFECT
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998856641679	WITHOUT_CLASSIFICATION	1.143358320325987E-7	DEFECT
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999935773295405	WITHOUT_CLASSIFICATION	6.422670459509022E-5	DEFECT
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9986317938149384	WITHOUT_CLASSIFICATION	0.0013682061850616488	DEFECT
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999999993226795	WITHOUT_CLASSIFICATION	6.773205799963319E-10	DEFECT
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999975059410388	WITHOUT_CLASSIFICATION	2.4940589611437572E-6	DEFECT
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999993489967264	WITHOUT_CLASSIFICATION	6.510032736019056E-7	DEFECT
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999579509	WITHOUT_CLASSIFICATION	4.2049074972695875E-11	DEFECT
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999887696892	WITHOUT_CLASSIFICATION	1.1230310747626161E-8	DEFECT
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999970173320659	WITHOUT_CLASSIFICATION	2.982667934142625E-6	DEFECT
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9026839418803172	WITHOUT_CLASSIFICATION	0.09731605811968289	DEFECT
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998592521907	WITHOUT_CLASSIFICATION	1.407478093277122E-7	DEFECT
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9798732152360513	WITHOUT_CLASSIFICATION	0.020126784763948705	DEFECT
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.826097444045747	DEFECT	0.17390255595425294	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999999671956601	WITHOUT_CLASSIFICATION	3.280433989680781E-7	DEFECT
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9997347304590153	WITHOUT_CLASSIFICATION	2.6526954098474246E-4	DEFECT
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.999420914463485	WITHOUT_CLASSIFICATION	5.790855365149931E-4	DEFECT
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999987441282829	WITHOUT_CLASSIFICATION	1.2558717170352975E-6	DEFECT
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999978925799	WITHOUT_CLASSIFICATION	2.1074201327872782E-9	DEFECT
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999766701868	WITHOUT_CLASSIFICATION	2.3329813215304034E-8	DEFECT
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999994169883133	WITHOUT_CLASSIFICATION	5.830116866781377E-7	DEFECT
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999991030229813	WITHOUT_CLASSIFICATION	8.969770186605764E-7	DEFECT
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999394653776	WITHOUT_CLASSIFICATION	6.053462244920611E-8	DEFECT
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999874123270346	WITHOUT_CLASSIFICATION	1.2587672965327153E-5	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999989929525811	WITHOUT_CLASSIFICATION	1.0070474188901034E-6	DEFECT
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999989929525811	WITHOUT_CLASSIFICATION	1.0070474188901034E-6	DEFECT
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999937637066469	WITHOUT_CLASSIFICATION	6.236293353048641E-6	DEFECT
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997310290512	WITHOUT_CLASSIFICATION	2.689709488536726E-7	DEFECT
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999999400366728	WITHOUT_CLASSIFICATION	5.996332715744083E-8	DEFECT
/**	WITHOUT_CLASSIFICATION	0.5290311772180933	WITHOUT_CLASSIFICATION	0.47096882278190666	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999652584362	WITHOUT_CLASSIFICATION	3.474156380665116E-7	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.999999652584362	WITHOUT_CLASSIFICATION	3.474156380665116E-7	DEFECT
//        }	WITHOUT_CLASSIFICATION	0.9999988539271226	WITHOUT_CLASSIFICATION	1.146072877424137E-6	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999997193400948	WITHOUT_CLASSIFICATION	2.806599051914089E-7	DEFECT
//	WITHOUT_CLASSIFICATION	0.9999819846362304	WITHOUT_CLASSIFICATION	1.8015363769552413E-5	DEFECT
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999589383196973	WITHOUT_CLASSIFICATION	4.106168030266946E-5	DEFECT
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999823569891	WITHOUT_CLASSIFICATION	1.7643010981232494E-8	DEFECT
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999976050039492	WITHOUT_CLASSIFICATION	2.3949960508439877E-6	DEFECT
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999990160972403	WITHOUT_CLASSIFICATION	9.8390275975089E-7	DEFECT
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999999741036103	WITHOUT_CLASSIFICATION	2.5896389675572585E-8	DEFECT
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999901812670478	WITHOUT_CLASSIFICATION	9.818732952255861E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950857516404	WITHOUT_CLASSIFICATION	4.914248359544805E-6	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950857516404	WITHOUT_CLASSIFICATION	4.914248359544805E-6	DEFECT
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999962473986396	WITHOUT_CLASSIFICATION	3.7526013603902147E-6	DEFECT
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999945035155113	WITHOUT_CLASSIFICATION	5.496484488692122E-6	DEFECT
// Custom sql	WITHOUT_CLASSIFICATION	0.9999999540793958	WITHOUT_CLASSIFICATION	4.5920604233431366E-8	DEFECT
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9999135064765865	WITHOUT_CLASSIFICATION	8.64935234134516E-5	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999999560242786	WITHOUT_CLASSIFICATION	4.397572139521293E-8	DEFECT
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999513378027	WITHOUT_CLASSIFICATION	4.8662197349178065E-8	DEFECT
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999278678886	WITHOUT_CLASSIFICATION	7.2132111399292634E-6	DEFECT
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999980018955	WITHOUT_CLASSIFICATION	1.9981043772850837E-9	DEFECT
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999826297629298	WITHOUT_CLASSIFICATION	1.7370237070107273E-5	DEFECT
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9998857297390875	WITHOUT_CLASSIFICATION	1.1427026091250844E-4	DEFECT
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9999962809783445	WITHOUT_CLASSIFICATION	3.7190216554268773E-6	DEFECT
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.99998441240371	WITHOUT_CLASSIFICATION	1.5587596289864966E-5	DEFECT
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999998022524363	WITHOUT_CLASSIFICATION	1.9774756376292722E-7	DEFECT
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9992222426066403	WITHOUT_CLASSIFICATION	7.777573933596753E-4	DEFECT
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999729576410596	WITHOUT_CLASSIFICATION	2.7042358940247797E-5	DEFECT
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999998908232063	WITHOUT_CLASSIFICATION	1.0917679376134498E-7	DEFECT
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999985654223813	WITHOUT_CLASSIFICATION	1.434577618738356E-6	DEFECT
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999995471717386	WITHOUT_CLASSIFICATION	4.52828261431435E-7	DEFECT
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9999966074999523	WITHOUT_CLASSIFICATION	3.392500047774667E-6	DEFECT
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999999832435095	WITHOUT_CLASSIFICATION	1.6756490569993966E-8	DEFECT
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999981437074573	WITHOUT_CLASSIFICATION	1.856292542586827E-6	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995778836659398	WITHOUT_CLASSIFICATION	4.221163340601068E-4	DEFECT
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9995778836659398	WITHOUT_CLASSIFICATION	4.221163340601068E-4	DEFECT
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999316651144505	WITHOUT_CLASSIFICATION	6.833488554949776E-5	DEFECT
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999908352148	WITHOUT_CLASSIFICATION	9.164785191598774E-9	DEFECT
/*package*/	WITHOUT_CLASSIFICATION	0.9999817954548013	WITHOUT_CLASSIFICATION	1.8204545198711285E-5	DEFECT
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999990873154013	WITHOUT_CLASSIFICATION	9.126845986208627E-7	DEFECT
// ignore it	WITHOUT_CLASSIFICATION	0.999999778978874	WITHOUT_CLASSIFICATION	2.2102112584914347E-7	DEFECT
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999999851670693	WITHOUT_CLASSIFICATION	1.4832930592306718E-8	DEFECT
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999999757479728	WITHOUT_CLASSIFICATION	2.425202713962601E-8	DEFECT
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999981464764091	WITHOUT_CLASSIFICATION	1.853523590908138E-6	DEFECT
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999999431753723	WITHOUT_CLASSIFICATION	5.68246276643255E-8	DEFECT
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999978746456265	WITHOUT_CLASSIFICATION	2.1253543735912828E-6	DEFECT
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973462927207	WITHOUT_CLASSIFICATION	2.653707279261163E-6	DEFECT
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9041540428403229	DEFECT	0.09584595715967713	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.999999723020411	WITHOUT_CLASSIFICATION	2.7697958908641295E-7	DEFECT
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999998802406372	WITHOUT_CLASSIFICATION	1.197593627675036E-7	DEFECT
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.999999800308688	WITHOUT_CLASSIFICATION	1.9969131210327137E-7	DEFECT
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999999963484741	WITHOUT_CLASSIFICATION	3.6515258603933453E-9	DEFECT
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9999999008292338	WITHOUT_CLASSIFICATION	9.917076618600092E-8	DEFECT
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999984087914933	WITHOUT_CLASSIFICATION	1.591208506648341E-6	DEFECT
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9997780202097873	WITHOUT_CLASSIFICATION	2.2197979021252155E-4	DEFECT
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9822503995403441	WITHOUT_CLASSIFICATION	0.017749600459655877	DEFECT
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999991936660412	WITHOUT_CLASSIFICATION	8.063339589556314E-7	DEFECT
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999999080534407	WITHOUT_CLASSIFICATION	9.194655924693976E-8	DEFECT
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999755653025313	WITHOUT_CLASSIFICATION	2.443469746868758E-5	DEFECT
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999971622871899	WITHOUT_CLASSIFICATION	2.8377128100269315E-6	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999321692846	WITHOUT_CLASSIFICATION	6.783071542681034E-8	DEFECT
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999999321692846	WITHOUT_CLASSIFICATION	6.783071542681034E-8	DEFECT
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999992688657336	WITHOUT_CLASSIFICATION	7.311342663456472E-7	DEFECT
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999943500333407	WITHOUT_CLASSIFICATION	5.649966659276818E-6	DEFECT
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999999807506	WITHOUT_CLASSIFICATION	1.9249425100252092E-11	DEFECT
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999955899354982	WITHOUT_CLASSIFICATION	4.410064501756556E-6	DEFECT
// intentionally empty	WITHOUT_CLASSIFICATION	0.999995394568919	WITHOUT_CLASSIFICATION	4.6054310810830045E-6	DEFECT
//FIXME we don't have the associated entity table name here, has to be done in a second pass	DEFECT	0.9992931470561408	WITHOUT_CLASSIFICATION	7.068529438592595E-4	DEFECT
// For a one-to-many, a <bag> is not really a bag; // it is *really* a set, since it can't contain the // same element twice. It could be considered a bug // in the mapping dtd that <bag> allows <one-to-many>.	DEFECT	0.9999070695566392	WITHOUT_CLASSIFICATION	9.29304433608285E-5	DEFECT
// RDMS does not directly support the trim() function, we use rtrim() and ltrim()	DEFECT	0.9999913999902765	WITHOUT_CLASSIFICATION	8.600009723403564E-6	DEFECT
/*         * The following types are not supported in RDMS/JDBC and therefore commented out.         * However, in some cases, mapping them to CHARACTER columns works         * for many applications, but does not work for all cases.         */	DEFECT	0.9420166633719989	WITHOUT_CLASSIFICATION	0.05798333662800108	DEFECT
// The preference here would be //   SQLFunctionTemplate( Hibernate.TIMESTAMP, "current_timestamp(?1)", false) // but this appears not to work. // Jay Nance 2006-09-22	DEFECT	0.9575987433678166	DEFECT	0.042401256632183484	WITHOUT_CLASSIFICATION
// note: at least my local SQL Server 2005 Express shows this not working...	DEFECT	0.847358696838759	DEFECT	0.15264130316124105	WITHOUT_CLASSIFICATION
// note: at least my local MySQL 5.1 install shows this not working...	DEFECT	0.8189473736349494	DEFECT	0.18105262636505057	WITHOUT_CLASSIFICATION
/*	DEFECT	0.9934873711131419	WITHOUT_CLASSIFICATION	0.006512628886858194	DEFECT
//Don't need this, because we should never ever be selecting no columns in an insert ... select... //and because it causes a bug on DB2	DEFECT	0.9862878140130449	WITHOUT_CLASSIFICATION	0.013712185986955129	DEFECT
// TODO : this is broke for subqueries in statements other than selects...	DEFECT	0.7424485917827977	DEFECT	0.25755140821720235	WITHOUT_CLASSIFICATION
// TODO : should this be an error?	DEFECT	0.9984228878753858	DEFECT	0.0015771121246142918	WITHOUT_CLASSIFICATION
// TODO : not sure which (either?) is correct, could not find docs on how to do this. // did find various blogs and forums mentioning that select CURRENT_TIMESTAMP // does not work...	DEFECT	0.9999996539145181	DEFECT	3.460854820089184E-7	WITHOUT_CLASSIFICATION
// TODO: figure out how this should be set. /////////////////////////////////////////////////////////////////////////////// // This was the reason for failures regarding INDEX_OP and subclass joins on // theta-join dialects; not sure what behaviour we were trying to emulate ;) //	DEFECT	0.8265527956382094	WITHOUT_CLASSIFICATION	0.17344720436179048	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8081405729502416	DEFECT	0.1918594270497585	WITHOUT_CLASSIFICATION
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8081405729502416	DEFECT	0.1918594270497585	WITHOUT_CLASSIFICATION
// TODO: cannot use generateSuffixes() - it handles the initial suffix differently.	DEFECT	0.9945200703236545	WITHOUT_CLASSIFICATION	0.005479929676345514	DEFECT
// starts with an alias (old style) // semi-bad thing about this: can't re-alias another alias.....	DEFECT	0.9999949358647644	WITHOUT_CLASSIFICATION	5.064135235548523E-6	DEFECT
//TODO: BUG! this currently fails for named queries for non-POJO entities	DEFECT	0.9731874757276983	DEFECT	0.026812524272301803	WITHOUT_CLASSIFICATION
// this call is side-effecty	DEFECT	0.9999808738769582	WITHOUT_CLASSIFICATION	1.9126123041761414E-5	DEFECT
//TODO: old version did not require hashmap lookup: //keys[collectionOwner].getIdentifier()	DEFECT	0.9996470161197375	WITHOUT_CLASSIFICATION	3.529838802624312E-4	DEFECT
//TODO: when this is the entry point, we should use an INNER_JOIN for fetching the many-to-many elements!	DEFECT	0.9101337908422332	WITHOUT_CLASSIFICATION	0.08986620915776675	DEFECT
// this is only needed (afaict) for processing results from the query cache; // however, this cannot possibly work in the case of discovered types...	DEFECT	0.7704864094044627	WITHOUT_CLASSIFICATION	0.22951359059553725	DEFECT
//TODO: this requires that the collection is defined after the //      referenced property in the mapping file (ok?)	DEFECT	0.9983752102967971	WITHOUT_CLASSIFICATION	0.001624789703202854	DEFECT
//TODO: is this completely correct?	DEFECT	0.7453992427753638	DEFECT	0.25460075722463626	WITHOUT_CLASSIFICATION
// three general cases we check here as to whether to render a physical SQL join: // 1) is our parent a DotNode as well?  If so, our property reference is // 	DEFECT	0.9999848450162786	WITHOUT_CLASSIFICATION	1.5154983721444253E-5	DEFECT
// TODO : currently we really do not handle ValueInclusion.PARTIAL... // ValueInclusion.PARTIAL would indicate parts of a component need to // be included in the select; currently we then just render the entire // component into the select clause in that case.	DEFECT	0.9775523401005977	WITHOUT_CLASSIFICATION	0.022447659899402332	DEFECT
//TODO: inexact, what we really need to know is: are any outer joins used?	DEFECT	0.9990469829008911	WITHOUT_CLASSIFICATION	9.530170991089227E-4	DEFECT
// todo : this call will not work for anything other than pojos!	DEFECT	0.6582487482096753	DEFECT	0.3417512517903247	WITHOUT_CLASSIFICATION
//TODO: currently we don't know a SessionFactory reference when building the Tuplizer //      THIS IS A BUG (embedded-xml=false on component) // TODO : fix this after HHH-1907 is complete	DEFECT	0.9999865984028712	DEFECT	1.3401597128819399E-5	WITHOUT_CLASSIFICATION
// TODO: this disables laziness even in non-pojo entity modes:	DEFECT	0.9883874591849191	WITHOUT_CLASSIFICATION	0.011612540815080863	DEFECT
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object) //the owner of the association is not the owner of the id	DEFECT	0.9035209746463286	WITHOUT_CLASSIFICATION	0.09647902535367141	DEFECT
//TODO: entities CAN be compared, by PK, fix this! -> only if/when we can extract the id values....	DEFECT	0.7584928264998646	DEFECT	0.24150717350013534	WITHOUT_CLASSIFICATION
//TODO: entities CAN be compared, by PK and entity name, fix this!	DEFECT	0.7643398220617903	DEFECT	0.2356601779382098	WITHOUT_CLASSIFICATION
//TODO: this is kinda inconsistent with CollectionType	DEFECT	0.9204451376882629	WITHOUT_CLASSIFICATION	0.07955486231173711	DEFECT
//TODO: would be nice to use false, but issues with MS SQL	DEFECT	0.8081405729502416	DEFECT	0.1918594270497585	WITHOUT_CLASSIFICATION
// TODO: does not work for EntityMode.DOM4J yet!	DEFECT	0.9990108059876796	DEFECT	9.891940123204098E-4	WITHOUT_CLASSIFICATION
//TODO: currently broken for unique-key references (does not detect //      change to unique key property of the associated object)	DEFECT	0.9189083741495165	WITHOUT_CLASSIFICATION	0.0810916258504835	DEFECT
//TODO: not really completely correct, since //      the uoe could occur while resolving //      associations, leaving the PC in an //      inconsistent state	DEFECT	0.503999248988103	DEFECT	0.4960007510118969	WITHOUT_CLASSIFICATION
// could happen for custom Criteria impls.  Not likely, but... // 	DEFECT	0.9835893053494766	WITHOUT_CLASSIFICATION	0.016410694650523337	DEFECT
// This does not support the Cache SQL 'DISTINCT BY (comma-list)' extensions, // but this extension is not supported through Hibernate anyway.	DEFECT	0.9981354276594352	WITHOUT_CLASSIFICATION	0.0018645723405647653	DEFECT
// note that this timestamp is not correct if the connection provider // returns an older JDBC connection that was associated with a // transaction that was already begun before openSession() was called // (don't know any possible solution to this!)	DEFECT	0.9950316650505795	WITHOUT_CLASSIFICATION	0.004968334949420539	DEFECT
//no need to take a snapshot - this is a  //performance optimization, but not really //important, except for entities with huge  //mutable property values	DEFECT	0.9981560318531422	WITHOUT_CLASSIFICATION	0.001843968146857754	DEFECT
// TODO : this really needs to be delayed unitl after we definitively know the operand node type; // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DEFECT	0.9877942394375229	DEFECT	0.012205760562477184	WITHOUT_CLASSIFICATION
// First, validate all the enabled filters... //TODO: this implementation has bad performance	DEFECT	0.9619735516147301	WITHOUT_CLASSIFICATION	0.03802644838527002	DEFECT
// TODO: what if batchUpdate is a callablestatement ? // calls executeBatch()	DEFECT	0.8708431476996935	WITHOUT_CLASSIFICATION	0.1291568523003065	DEFECT
// assume that the row was not there since it previously had only null // values, so do an INSERT instead //TODO: does not respect dynamic-insert	DEFECT	0.9999948761687607	WITHOUT_CLASSIFICATION	5.123831239360636E-6	DEFECT
//TODO: passing null here, because this method is not really used for DOM4J at the moment //      but it is still a bug, if we don't get rid of this!	DEFECT	0.859923688764172	WITHOUT_CLASSIFICATION	0.1400763112358279	DEFECT
//note that this implementation is kinda broken //for components with many-to-one associations	DEFECT	0.9991074129356384	WITHOUT_CLASSIFICATION	8.925870643616078E-4	DEFECT
// TODO: at the point where we are resolving collection references, we don't // know if the uk value has been resolved (depends if it was earlier or // later in the mapping document) - now, we could try and use e.getStatus() // to decide to semiResolve(), trouble is that initializeEntity() reuses // the same array for resolved and hydrated values	DEFECT	0.9635478521348928	WITHOUT_CLASSIFICATION	0.03645214786510724	DEFECT
//TODO: This is assertion is disabled because there is a bug that means the //	DEFECT	0.9727060188494611	WITHOUT_CLASSIFICATION	0.02729398115053894	DEFECT
// This doesn't actually seem to work but it *might* // work on some dbs. Also it doesn't work if there // are multiple columns of results because it // is not accounting for the suffix: // return new String[] { getDiscriminatorColumnName() };	DEFECT	0.9932757055783057	WITHOUT_CLASSIFICATION	0.006724294421694331	DEFECT
// TODO: Deal with the "optional" attribute in the <join> mapping; // this code assumes that optional defaults to "true" because it // doesn't actually seem to work in the fetch="join" code // // Note that actual proper handling of optional-ality here is actually // more involved than this patch assumes.  Remember that we might have // multiple <join/> mappings associated with a single entity.  Really // a couple of things need to happen to properly handle optional here: //  1) First and foremost, when handling multiple <join/>s, we really //      should be using the entity root table as the driving table; //      another option here would be to choose some non-optional joined //      table to use as the driving table.  In all likelihood, just using //      the root table is much simplier //  2) Need to add the FK columns corresponding to each joined table //      to the generated select list; these would then be used when //      iterating the result set to determine whether all non-optional //      data is present // My initial thoughts on the best way to deal with this would be // to introduce a new SequentialSelect abstraction that actually gets // generated in the persisters (ok, SingleTable...) and utilized here. // It would encapsulated all this required optional-ality checking...	DEFECT	0.9963741422045241	DEFECT	0.0036258577954758914	WITHOUT_CLASSIFICATION
