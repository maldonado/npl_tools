// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999929899747158	WITHOUT_CLASSIFICATION	7.010025284357616E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9998956205684854	WITHOUT_CLASSIFICATION	1.0437943151456851E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9997249684570261	WITHOUT_CLASSIFICATION	2.750315429738715E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999705132496871	WITHOUT_CLASSIFICATION	2.948675031282923E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999705132496871	WITHOUT_CLASSIFICATION	2.948675031282923E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9998102451211927	WITHOUT_CLASSIFICATION	1.8975487880736988E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.999965714513374	WITHOUT_CLASSIFICATION	3.428548662602482E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9997929206250658	WITHOUT_CLASSIFICATION	2.0707937493434804E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9997376433391467	WITHOUT_CLASSIFICATION	2.62356660853353E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.999958323806385	WITHOUT_CLASSIFICATION	4.16761936149382E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999434374123312	WITHOUT_CLASSIFICATION	5.6562587668757087E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999434374123312	WITHOUT_CLASSIFICATION	5.6562587668757087E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999434374123312	WITHOUT_CLASSIFICATION	5.6562587668757087E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999434374123312	WITHOUT_CLASSIFICATION	5.6562587668757087E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9990627571598181	WITHOUT_CLASSIFICATION	9.372428401819477E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9998709741122372	WITHOUT_CLASSIFICATION	1.2902588776282932E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9998791704443679	WITHOUT_CLASSIFICATION	1.2082955563212774E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9999012717671456	WITHOUT_CLASSIFICATION	9.872823285435949E-5	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999369236042019	WITHOUT_CLASSIFICATION	6.30763957981372E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999737077364872	WITHOUT_CLASSIFICATION	2.6292263512816092E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999768254679741	WITHOUT_CLASSIFICATION	2.317453202588168E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.9999772756769397	WITHOUT_CLASSIFICATION	2.272432306029101E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999776718226823	WITHOUT_CLASSIFICATION	2.23281773177915E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9983640149353156	WITHOUT_CLASSIFICATION	0.001635985064684373	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999858561412145	WITHOUT_CLASSIFICATION	1.41438587854996E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999890843860878	WITHOUT_CLASSIFICATION	1.0915613912295025E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9996929009488881	WITHOUT_CLASSIFICATION	3.070990511119115E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999607304313124	WITHOUT_CLASSIFICATION	3.926956868771925E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999216960596887	WITHOUT_CLASSIFICATION	7.830394031135807E-5	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9992423726010132	WITHOUT_CLASSIFICATION	7.576273989866605E-4	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9999928668988652	WITHOUT_CLASSIFICATION	7.1331011347923346E-6	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9999434374123312	WITHOUT_CLASSIFICATION	5.6562587668757087E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998985371615339	WITHOUT_CLASSIFICATION	1.0146283846616512E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999961101568815	WITHOUT_CLASSIFICATION	3.889843118526292E-6	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999000999592064	WITHOUT_CLASSIFICATION	9.990004079368094E-5	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9998870078175118	WITHOUT_CLASSIFICATION	1.1299218248817066E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9999303744363186	WITHOUT_CLASSIFICATION	6.962556368146052E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9998987642299229	WITHOUT_CLASSIFICATION	1.0123577007708633E-4	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9999003365049465	WITHOUT_CLASSIFICATION	9.966349505354527E-5	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999929129282176	WITHOUT_CLASSIFICATION	7.087071782482686E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.999934938391019	WITHOUT_CLASSIFICATION	6.506160898105033E-5	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998344978401926	WITHOUT_CLASSIFICATION	1.6550215980736598E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9977303252177707	WITHOUT_CLASSIFICATION	0.0022696747822293513	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9999186008484371	WITHOUT_CLASSIFICATION	8.139915156299372E-5	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9996808449413866	WITHOUT_CLASSIFICATION	3.191550586132925E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999206882857021	WITHOUT_CLASSIFICATION	7.931171429785455E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.999729985545988	WITHOUT_CLASSIFICATION	2.700144540119641E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9998197913179139	WITHOUT_CLASSIFICATION	1.802086820861413E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9998920496391602	WITHOUT_CLASSIFICATION	1.0795036083971695E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.996795021469329	WITHOUT_CLASSIFICATION	0.0032049785306710148	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999420682822063	WITHOUT_CLASSIFICATION	5.7931717793697234E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9996451177433475	WITHOUT_CLASSIFICATION	3.5488225665252654E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999921209948197	WITHOUT_CLASSIFICATION	7.87900518015804E-6	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.99995268947276	WITHOUT_CLASSIFICATION	4.7310527240055576E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999719359172071	WITHOUT_CLASSIFICATION	2.806408279279192E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999581390923442	WITHOUT_CLASSIFICATION	4.18609076557368E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9992414932840832	WITHOUT_CLASSIFICATION	7.585067159167975E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9997331176271573	WITHOUT_CLASSIFICATION	2.668823728426218E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9998439245571138	WITHOUT_CLASSIFICATION	1.560754428861585E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9993870700489769	WITHOUT_CLASSIFICATION	6.129299510231814E-4	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9999292847712582	WITHOUT_CLASSIFICATION	7.071522874185153E-5	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999881367254522	WITHOUT_CLASSIFICATION	1.1863274547781598E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9993139398511076	WITHOUT_CLASSIFICATION	6.860601488924728E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9999050495846079	WITHOUT_CLASSIFICATION	9.495041539204183E-5	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9998970097424971	WITHOUT_CLASSIFICATION	1.0299025750294972E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999156621217996	WITHOUT_CLASSIFICATION	8.433787820043376E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9999537039861148	WITHOUT_CLASSIFICATION	4.6296013885107296E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997550248158813	WITHOUT_CLASSIFICATION	2.449751841187755E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9995581545694946	WITHOUT_CLASSIFICATION	4.4184543050550154E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9995581545694946	WITHOUT_CLASSIFICATION	4.4184543050550154E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999925778217019	WITHOUT_CLASSIFICATION	7.422178298034377E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9996980625897763	WITHOUT_CLASSIFICATION	3.019374102236572E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999702536180081	WITHOUT_CLASSIFICATION	2.9746381991971853E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9987613948086679	WITHOUT_CLASSIFICATION	0.001238605191332061	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9991219655604441	WITHOUT_CLASSIFICATION	8.780344395558754E-4	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9906520948821655	WITHOUT_CLASSIFICATION	0.009347905117834517	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9998142171888942	WITHOUT_CLASSIFICATION	1.857828111057873E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9998000397159041	WITHOUT_CLASSIFICATION	1.9996028409589078E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999540885911422	WITHOUT_CLASSIFICATION	4.591140885789474E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999637096667416	WITHOUT_CLASSIFICATION	3.629033325837057E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999997724215878	WITHOUT_CLASSIFICATION	2.2757841236953254E-7	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999928274035113	WITHOUT_CLASSIFICATION	7.172596488685575E-6	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999370749205013	WITHOUT_CLASSIFICATION	6.292507949870285E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999370749205013	WITHOUT_CLASSIFICATION	6.292507949870285E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9999370749205013	WITHOUT_CLASSIFICATION	6.292507949870285E-5	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999539482779286	WITHOUT_CLASSIFICATION	4.6051722071362836E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9999754922091737	WITHOUT_CLASSIFICATION	2.4507790826214753E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999803134279528	WITHOUT_CLASSIFICATION	1.968657204725577E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.994173372361135	WITHOUT_CLASSIFICATION	0.00582662763886489	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9996707567936328	WITHOUT_CLASSIFICATION	3.292432063671466E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999954400877799	WITHOUT_CLASSIFICATION	4.55991222019067E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9991740301565138	WITHOUT_CLASSIFICATION	8.259698434860405E-4	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9998680149733933	WITHOUT_CLASSIFICATION	1.319850266066827E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999550582387258	WITHOUT_CLASSIFICATION	4.494176127429774E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999752708383793	WITHOUT_CLASSIFICATION	2.4729161620735736E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999196041215482	WITHOUT_CLASSIFICATION	8.039587845166494E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999196041215482	WITHOUT_CLASSIFICATION	8.039587845166494E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9998317130104738	WITHOUT_CLASSIFICATION	1.6828698952619972E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9997809263299452	WITHOUT_CLASSIFICATION	2.1907367005488223E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999394444590105	WITHOUT_CLASSIFICATION	6.055554098948882E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998054043636027	WITHOUT_CLASSIFICATION	1.9459563639726666E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9996708835470709	WITHOUT_CLASSIFICATION	3.2911645292907815E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999648417124721	WITHOUT_CLASSIFICATION	3.515828752789297E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999836919659155	WITHOUT_CLASSIFICATION	1.6308034084496903E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9999138084840417	WITHOUT_CLASSIFICATION	8.619151595829367E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999655197508407	WITHOUT_CLASSIFICATION	3.448024915926312E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998651472801001	WITHOUT_CLASSIFICATION	1.3485271989980814E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9960695249995628	WITHOUT_CLASSIFICATION	0.00393047500043724	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999912290460587	WITHOUT_CLASSIFICATION	8.77095394114734E-6	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9998307172168377	WITHOUT_CLASSIFICATION	1.6928278316227888E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998646760154969	WITHOUT_CLASSIFICATION	1.3532398450316084E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9998793015345504	WITHOUT_CLASSIFICATION	1.2069846544959048E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9986505708747703	WITHOUT_CLASSIFICATION	0.0013494291252297039	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9996480570752435	WITHOUT_CLASSIFICATION	3.5194292475646205E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9998553995622581	WITHOUT_CLASSIFICATION	1.4460043774189727E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9999832988856326	WITHOUT_CLASSIFICATION	1.670111436737081E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828355095298	WITHOUT_CLASSIFICATION	1.7164490470182684E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9997289042589984	WITHOUT_CLASSIFICATION	2.710957410015811E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9991407843741614	WITHOUT_CLASSIFICATION	8.592156258384804E-4	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999851619098052	WITHOUT_CLASSIFICATION	1.4838090194862053E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9997401302573943	WITHOUT_CLASSIFICATION	2.5986974260579985E-4	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.999425617989497	WITHOUT_CLASSIFICATION	5.743820105029942E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.999990225344098	WITHOUT_CLASSIFICATION	9.774655902034335E-6	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999682336198793	WITHOUT_CLASSIFICATION	3.176638012078913E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999847653808076	WITHOUT_CLASSIFICATION	1.5234619192398601E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9998943924930205	WITHOUT_CLASSIFICATION	1.056075069795535E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.999922212561988	WITHOUT_CLASSIFICATION	7.778743801193557E-5	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999628341947451	WITHOUT_CLASSIFICATION	3.71658052548402E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9996956125221449	WITHOUT_CLASSIFICATION	3.0438747785505716E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999616505702953	WITHOUT_CLASSIFICATION	3.8349429704696446E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998784567696997	WITHOUT_CLASSIFICATION	1.2154323030033448E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9998333010780489	WITHOUT_CLASSIFICATION	1.6669892195100757E-4	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999755884570672	WITHOUT_CLASSIFICATION	2.4411542932753518E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9998677140246449	WITHOUT_CLASSIFICATION	1.32285975355074E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999739842351221	WITHOUT_CLASSIFICATION	2.6015764877822572E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997456551132573	WITHOUT_CLASSIFICATION	2.543448867427067E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.9999790723186738	WITHOUT_CLASSIFICATION	2.0927681326253446E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9993164413827001	WITHOUT_CLASSIFICATION	6.835586172999793E-4	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998309376559753	WITHOUT_CLASSIFICATION	1.6906234402466294E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999655928010193	WITHOUT_CLASSIFICATION	3.440719898067156E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9938911728362161	WITHOUT_CLASSIFICATION	0.006108827163783912	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9999244697353953	WITHOUT_CLASSIFICATION	7.553026460463011E-5	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998965912351132	WITHOUT_CLASSIFICATION	1.034087648867466E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9999956470168304	WITHOUT_CLASSIFICATION	4.352983169642155E-6	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9999272748965283	WITHOUT_CLASSIFICATION	7.27251034716577E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9996745513234488	WITHOUT_CLASSIFICATION	3.2544867655119174E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999650298274166	WITHOUT_CLASSIFICATION	3.497017258349409E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9998560633298258	WITHOUT_CLASSIFICATION	1.4393667017424224E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999585241482587	WITHOUT_CLASSIFICATION	4.1475851741212484E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9995221287360768	WITHOUT_CLASSIFICATION	4.7787126392326713E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9985295967901592	WITHOUT_CLASSIFICATION	0.0014704032098407664	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9999099506158051	WITHOUT_CLASSIFICATION	9.004938419489416E-5	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9999391802815991	WITHOUT_CLASSIFICATION	6.081971840087487E-5	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9999329310843834	WITHOUT_CLASSIFICATION	6.706891561659181E-5	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9999028396114967	WITHOUT_CLASSIFICATION	9.716038850326149E-5	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998637953071425	WITHOUT_CLASSIFICATION	1.3620469285752449E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9986227274443679	WITHOUT_CLASSIFICATION	0.0013772725556321366	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.999942663970008	WITHOUT_CLASSIFICATION	5.7336029992028685E-5	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9992644949583163	WITHOUT_CLASSIFICATION	7.35505041683721E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9998771165800708	WITHOUT_CLASSIFICATION	1.2288341992915537E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999895986735048	WITHOUT_CLASSIFICATION	1.0401326495219789E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998445050564749	WITHOUT_CLASSIFICATION	1.5549494352507542E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9998445050564749	WITHOUT_CLASSIFICATION	1.5549494352507542E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999898512157422	WITHOUT_CLASSIFICATION	1.0148784257726284E-5	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.999977046321166	WITHOUT_CLASSIFICATION	2.2953678834033387E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999235196109383	WITHOUT_CLASSIFICATION	7.648038906173374E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.999436673837833	WITHOUT_CLASSIFICATION	5.633261621670662E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.999934549984422	WITHOUT_CLASSIFICATION	6.545001557804411E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9991776917590472	WITHOUT_CLASSIFICATION	8.223082409527106E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998949410474486	WITHOUT_CLASSIFICATION	1.050589525514227E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999925434250257	WITHOUT_CLASSIFICATION	7.456574974338609E-6	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999879653059711	WITHOUT_CLASSIFICATION	1.2034694028848243E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.99999864446744	WITHOUT_CLASSIFICATION	1.355532559892238E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9998612444382736	WITHOUT_CLASSIFICATION	1.3875556172640428E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9988757417871368	WITHOUT_CLASSIFICATION	0.0011242582128632621	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9815982833703005	WITHOUT_CLASSIFICATION	0.01840171662969945	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9998611629111477	WITHOUT_CLASSIFICATION	1.3883708885237427E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999346862383606	WITHOUT_CLASSIFICATION	6.531376163944174E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999653908334338	WITHOUT_CLASSIFICATION	3.460916656619974E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9997966079492402	WITHOUT_CLASSIFICATION	2.0339205075968998E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999649968318557	WITHOUT_CLASSIFICATION	3.500316814428227E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999984472560108	WITHOUT_CLASSIFICATION	1.552743989087357E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.999940869868765	WITHOUT_CLASSIFICATION	5.913013123511797E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999969026180721	WITHOUT_CLASSIFICATION	3.097381927950938E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999969026180721	WITHOUT_CLASSIFICATION	3.097381927950938E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999515297894928	WITHOUT_CLASSIFICATION	4.847021050735146E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999893448201959	WITHOUT_CLASSIFICATION	1.0655179804118018E-5	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999831409283626	WITHOUT_CLASSIFICATION	1.6859071637421895E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9992735476200811	WITHOUT_CLASSIFICATION	7.264523799187698E-4	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9994146804897116	WITHOUT_CLASSIFICATION	5.853195102884173E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999095315568521	WITHOUT_CLASSIFICATION	9.046844314775859E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999095315568521	WITHOUT_CLASSIFICATION	9.046844314775859E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.94691562015321	WITHOUT_CLASSIFICATION	0.053084379846790083	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999813730031553	WITHOUT_CLASSIFICATION	1.862699684477141E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999813730031553	WITHOUT_CLASSIFICATION	1.862699684477141E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.999514696718403	WITHOUT_CLASSIFICATION	4.8530328159705446E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995307270999105	WITHOUT_CLASSIFICATION	4.6927290008948316E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9995307270999105	WITHOUT_CLASSIFICATION	4.6927290008948316E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999973868928811	WITHOUT_CLASSIFICATION	2.613107118899314E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999973868928811	WITHOUT_CLASSIFICATION	2.613107118899314E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.999937749363958	WITHOUT_CLASSIFICATION	6.225063604203918E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999852595191033	WITHOUT_CLASSIFICATION	1.474048089671096E-5	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999866413788547	WITHOUT_CLASSIFICATION	1.3358621145184902E-5	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9998898857077974	WITHOUT_CLASSIFICATION	1.1011429220267027E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9998204071354189	WITHOUT_CLASSIFICATION	1.795928645812367E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999604534953384	WITHOUT_CLASSIFICATION	3.954650466169977E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9999094123492928	WITHOUT_CLASSIFICATION	9.058765070725998E-5	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999604534953384	WITHOUT_CLASSIFICATION	3.954650466169977E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9969390254574182	WITHOUT_CLASSIFICATION	0.0030609745425819036	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999649060397493	WITHOUT_CLASSIFICATION	3.5093960250634336E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9999379345403615	WITHOUT_CLASSIFICATION	6.20654596385781E-5	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999363619317628	WITHOUT_CLASSIFICATION	6.363806823713688E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999476502289917	WITHOUT_CLASSIFICATION	5.2349771008338035E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9986256334147166	WITHOUT_CLASSIFICATION	0.0013743665852834566	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999515500769495	WITHOUT_CLASSIFICATION	4.844992305062742E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999353841867873	WITHOUT_CLASSIFICATION	6.461581321267339E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998670173507369	WITHOUT_CLASSIFICATION	1.3298264926314457E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9997741332412096	WITHOUT_CLASSIFICATION	2.2586675879042678E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.999912571552451	WITHOUT_CLASSIFICATION	8.742844754904483E-5	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999478600182552	WITHOUT_CLASSIFICATION	5.213998174477823E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999428255595568	WITHOUT_CLASSIFICATION	5.717444044311655E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9998695563446085	WITHOUT_CLASSIFICATION	1.3044365539155366E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999471854957905	WITHOUT_CLASSIFICATION	5.281450420952767E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9997442521442327	WITHOUT_CLASSIFICATION	2.557478557673012E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9999424020884548	WITHOUT_CLASSIFICATION	5.759791154526564E-5	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9999374608934061	WITHOUT_CLASSIFICATION	6.253910659394685E-5	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.999585977784232	WITHOUT_CLASSIFICATION	4.1402221576799993E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.986986482833966	WITHOUT_CLASSIFICATION	0.013013517166034065	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999209694216127	WITHOUT_CLASSIFICATION	7.903057838727126E-5	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999945657853058	WITHOUT_CLASSIFICATION	5.43421469418062E-6	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999719067173427	WITHOUT_CLASSIFICATION	2.8093282657233286E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9997945824487474	WITHOUT_CLASSIFICATION	2.0541755125263894E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999702889123139	WITHOUT_CLASSIFICATION	2.971108768617247E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9999156269808895	WITHOUT_CLASSIFICATION	8.437301911050794E-5	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999682983918423	WITHOUT_CLASSIFICATION	3.170160815761783E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.999983138440206	WITHOUT_CLASSIFICATION	1.686155979399564E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9999589704388087	WITHOUT_CLASSIFICATION	4.102956119139533E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9999379516139725	WITHOUT_CLASSIFICATION	6.204838602756763E-5	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999877565117623	WITHOUT_CLASSIFICATION	1.2243488237706738E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999888302628511	WITHOUT_CLASSIFICATION	1.1169737148834596E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9996705130201099	WITHOUT_CLASSIFICATION	3.294869798901791E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9999591754256921	WITHOUT_CLASSIFICATION	4.082457430783458E-5	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9999633290082667	WITHOUT_CLASSIFICATION	3.667099173343184E-5	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9998988344773103	WITHOUT_CLASSIFICATION	1.0116552268968789E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999788163431591	WITHOUT_CLASSIFICATION	2.1183656840887118E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.999973271842676	WITHOUT_CLASSIFICATION	2.6728157323900593E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9998980006668884	WITHOUT_CLASSIFICATION	1.0199933311158156E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999805875051351	WITHOUT_CLASSIFICATION	1.9412494864950792E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9999514884318214	WITHOUT_CLASSIFICATION	4.8511568178659276E-5	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9999564240720892	WITHOUT_CLASSIFICATION	4.357592791084232E-5	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9999236270915796	WITHOUT_CLASSIFICATION	7.637290842045333E-5	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999819377729997	WITHOUT_CLASSIFICATION	1.8062227000180572E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999211144809602	WITHOUT_CLASSIFICATION	7.888551903966913E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.9998897441551181	WITHOUT_CLASSIFICATION	1.1025584488188244E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999795490869523	WITHOUT_CLASSIFICATION	2.0450913047697875E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.99984763327219	WITHOUT_CLASSIFICATION	1.5236672781005712E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9997984889670797	WITHOUT_CLASSIFICATION	2.015110329204035E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999596906773603	WITHOUT_CLASSIFICATION	4.030932263960469E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999966951943392	WITHOUT_CLASSIFICATION	3.3048056608300956E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9993818543817121	WITHOUT_CLASSIFICATION	6.181456182877977E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999945422828104	WITHOUT_CLASSIFICATION	5.457717189588245E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999988591232088	WITHOUT_CLASSIFICATION	1.1408767911929534E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999988591232088	WITHOUT_CLASSIFICATION	1.1408767911929534E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9995544727917665	WITHOUT_CLASSIFICATION	4.455272082334418E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9998560862489966	WITHOUT_CLASSIFICATION	1.439137510034116E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9967899704628937	WITHOUT_CLASSIFICATION	0.0032100295371061227	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999606142494536	WITHOUT_CLASSIFICATION	3.9385750546332824E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9999261825205454	WITHOUT_CLASSIFICATION	7.381747945462355E-5	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999775519598122	WITHOUT_CLASSIFICATION	2.2448040187792675E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9849825742462008	WITHOUT_CLASSIFICATION	0.015017425753799113	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999910145132395	WITHOUT_CLASSIFICATION	8.985486760465147E-6	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9998999795929898	WITHOUT_CLASSIFICATION	1.0002040701018481E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999509634861399	WITHOUT_CLASSIFICATION	4.9036513860089695E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999935732685373	WITHOUT_CLASSIFICATION	6.426731462702719E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999935732685373	WITHOUT_CLASSIFICATION	6.426731462702719E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.999959246508726	WITHOUT_CLASSIFICATION	4.0753491274007E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9996105261682647	WITHOUT_CLASSIFICATION	3.894738317352783E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997524561145474	WITHOUT_CLASSIFICATION	2.4754388545251326E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998958162307775	WITHOUT_CLASSIFICATION	1.0418376922248347E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999892853356556	WITHOUT_CLASSIFICATION	1.071466434446989E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.999994924351868	WITHOUT_CLASSIFICATION	5.0756481320112205E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999867691066776	WITHOUT_CLASSIFICATION	1.323089332226804E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9994188894994765	WITHOUT_CLASSIFICATION	5.811105005234558E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999968093194674	WITHOUT_CLASSIFICATION	3.190680532602491E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9994676640058637	WITHOUT_CLASSIFICATION	5.323359941362419E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9998556421434475	WITHOUT_CLASSIFICATION	1.4435785655254053E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9999093414990194	WITHOUT_CLASSIFICATION	9.065850098054489E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999284043553853	WITHOUT_CLASSIFICATION	7.159564461466007E-5	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999284043553853	WITHOUT_CLASSIFICATION	7.159564461466007E-5	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9986188487153901	WITHOUT_CLASSIFICATION	0.001381151284609977	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999826870446038	WITHOUT_CLASSIFICATION	1.7312955396206575E-5	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9998456952868221	WITHOUT_CLASSIFICATION	1.5430471317779746E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9997334497898416	WITHOUT_CLASSIFICATION	2.665502101584626E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9998656392391984	WITHOUT_CLASSIFICATION	1.34360760801616E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998795243219574	WITHOUT_CLASSIFICATION	1.2047567804258372E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9998564631225736	WITHOUT_CLASSIFICATION	1.4353687742641873E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999443875473657	WITHOUT_CLASSIFICATION	5.561245263423316E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9983587137981583	WITHOUT_CLASSIFICATION	0.0016412862018417205	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999595637802012	WITHOUT_CLASSIFICATION	4.043621979882175E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9997524561145474	WITHOUT_CLASSIFICATION	2.4754388545251326E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9996089628836787	WITHOUT_CLASSIFICATION	3.910371163212868E-4	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9963021351041799	WITHOUT_CLASSIFICATION	0.003697864895820239	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9999743813666001	WITHOUT_CLASSIFICATION	2.561863339989068E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9999429652304828	WITHOUT_CLASSIFICATION	5.703476951737269E-5	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999465497306993	WITHOUT_CLASSIFICATION	5.345026930074599E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9999689364218636	WITHOUT_CLASSIFICATION	3.106357813637501E-5	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999875819512624	WITHOUT_CLASSIFICATION	1.2418048737681604E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9993491240049757	WITHOUT_CLASSIFICATION	6.50875995024256E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9997735028294886	WITHOUT_CLASSIFICATION	2.2649717051141985E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9997801220157695	WITHOUT_CLASSIFICATION	2.1987798423047245E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9999024524733289	WITHOUT_CLASSIFICATION	9.7547526671053E-5	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9999799178571227	WITHOUT_CLASSIFICATION	2.0082142877260538E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999613865985539	WITHOUT_CLASSIFICATION	3.8613401446025095E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9999072740190114	WITHOUT_CLASSIFICATION	9.272598098873189E-5	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999520788432945	WITHOUT_CLASSIFICATION	4.792115670543651E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9999169728184993	WITHOUT_CLASSIFICATION	8.302718150065564E-5	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9985698074541844	WITHOUT_CLASSIFICATION	0.0014301925458154818	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999470060226077	WITHOUT_CLASSIFICATION	5.2993977392334357E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9998350684543711	WITHOUT_CLASSIFICATION	1.649315456288683E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9996216894879476	WITHOUT_CLASSIFICATION	3.783105120523956E-4	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999917671879404	WITHOUT_CLASSIFICATION	8.232812059638241E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9997993308931308	WITHOUT_CLASSIFICATION	2.0066910686917863E-4	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9986361540778247	WITHOUT_CLASSIFICATION	0.0013638459221753034	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9999601123325873	WITHOUT_CLASSIFICATION	3.988766741267765E-5	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9998841904396587	WITHOUT_CLASSIFICATION	1.158095603412698E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9998435368765475	WITHOUT_CLASSIFICATION	1.5646312345240465E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999405178539187	WITHOUT_CLASSIFICATION	5.9482146081257134E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.993993964199033	WITHOUT_CLASSIFICATION	0.006006035800967084	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998529860615722	WITHOUT_CLASSIFICATION	1.4701393842770174E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9998529860615722	WITHOUT_CLASSIFICATION	1.4701393842770174E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998672724914002	WITHOUT_CLASSIFICATION	1.3272750859984574E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998732055486322	WITHOUT_CLASSIFICATION	1.267944513678047E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999453134706464	WITHOUT_CLASSIFICATION	5.468652935363102E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9998774704021913	WITHOUT_CLASSIFICATION	1.2252959780865833E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9998669461619446	WITHOUT_CLASSIFICATION	1.3305383805549244E-4	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999646392088178	WITHOUT_CLASSIFICATION	3.5360791182099375E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999679234852695	WITHOUT_CLASSIFICATION	3.207651473051731E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9965892880728218	WITHOUT_CLASSIFICATION	0.0034107119271783483	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998817166823396	WITHOUT_CLASSIFICATION	1.1828331766042064E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9998317130104738	WITHOUT_CLASSIFICATION	1.6828698952619972E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999894269496605	WITHOUT_CLASSIFICATION	1.0573050339380713E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9991218354066252	WITHOUT_CLASSIFICATION	8.781645933747921E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998965912351132	WITHOUT_CLASSIFICATION	1.034087648867466E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9999158904273562	WITHOUT_CLASSIFICATION	8.410957264388614E-5	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9997864432911451	WITHOUT_CLASSIFICATION	2.135567088549922E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9997725068304463	WITHOUT_CLASSIFICATION	2.2749316955373428E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999989371607229	WITHOUT_CLASSIFICATION	1.0628392771904307E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999089743620319	WITHOUT_CLASSIFICATION	9.102563796819858E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998588706164596	WITHOUT_CLASSIFICATION	1.411293835403568E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9998491884226577	WITHOUT_CLASSIFICATION	1.5081157734237073E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.999874063096477	WITHOUT_CLASSIFICATION	1.259369035230183E-4	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999466247220324	WITHOUT_CLASSIFICATION	5.337527796767483E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9995403128594371	WITHOUT_CLASSIFICATION	4.5968714056294824E-4	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9999340412029325	WITHOUT_CLASSIFICATION	6.595879706759169E-5	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999573558003416	WITHOUT_CLASSIFICATION	4.264419965839539E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999972099898832	WITHOUT_CLASSIFICATION	2.7900101167960083E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999677768310491	WITHOUT_CLASSIFICATION	3.222316895088284E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9999853263700369	WITHOUT_CLASSIFICATION	1.467362996311726E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9996698900206973	WITHOUT_CLASSIFICATION	3.3010997930278836E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999950188271837	WITHOUT_CLASSIFICATION	4.98117281637357E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999767535192482	WITHOUT_CLASSIFICATION	2.3246480751908197E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999865651533009	WITHOUT_CLASSIFICATION	1.3434846699081387E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.999681959253041	WITHOUT_CLASSIFICATION	3.1804074695890197E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999225009615621	WITHOUT_CLASSIFICATION	7.749903843791336E-5	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999509061019827	WITHOUT_CLASSIFICATION	4.9093898017340495E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999982140707656	WITHOUT_CLASSIFICATION	1.7859292343257798E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9996402372819921	WITHOUT_CLASSIFICATION	3.5976271800790066E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999870359735399	WITHOUT_CLASSIFICATION	1.2964026460104356E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999830850905397	WITHOUT_CLASSIFICATION	1.6914909460323234E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.8938341862501132	WITHOUT_CLASSIFICATION	0.10616581374988675	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9995952523095875	WITHOUT_CLASSIFICATION	4.0474769041243697E-4	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9971269867611984	WITHOUT_CLASSIFICATION	0.0028730132388016154	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999488871887108	WITHOUT_CLASSIFICATION	5.111281128914119E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998690436429563	WITHOUT_CLASSIFICATION	1.3095635704375507E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.999941760566839	WITHOUT_CLASSIFICATION	5.823943316107043E-5	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9978069951868872	WITHOUT_CLASSIFICATION	0.002193004813112839	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.999763487885926	WITHOUT_CLASSIFICATION	2.3651211407407064E-4	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999884769777965	WITHOUT_CLASSIFICATION	1.1523022203536855E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999439328581947	WITHOUT_CLASSIFICATION	5.606714180529535E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9995935502713741	WITHOUT_CLASSIFICATION	4.0644972862593235E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9996759472821972	WITHOUT_CLASSIFICATION	3.2405271780277644E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999397114828223	WITHOUT_CLASSIFICATION	6.0288517177660394E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.999986070617738	WITHOUT_CLASSIFICATION	1.3929382261992029E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9999368020729443	WITHOUT_CLASSIFICATION	6.319792705576975E-5	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9999137559228057	WITHOUT_CLASSIFICATION	8.624407719429707E-5	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9997741525690244	WITHOUT_CLASSIFICATION	2.2584743097562256E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9996347822847614	WITHOUT_CLASSIFICATION	3.6521771523856833E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9996176903451793	WITHOUT_CLASSIFICATION	3.8230965482065544E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999313032359748	WITHOUT_CLASSIFICATION	6.869676402513018E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999313032359748	WITHOUT_CLASSIFICATION	6.869676402513018E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9965807790469543	WITHOUT_CLASSIFICATION	0.0034192209530456673	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9322147733274212	WITHOUT_CLASSIFICATION	0.06778522667257884	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9999531872671531	WITHOUT_CLASSIFICATION	4.68127328468483E-5	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9627007942635551	WITHOUT_CLASSIFICATION	0.037299205736444865	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9998928539848914	WITHOUT_CLASSIFICATION	1.0714601510860114E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999773770265111	WITHOUT_CLASSIFICATION	2.2622973488807436E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9998651922371377	WITHOUT_CLASSIFICATION	1.3480776286225497E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9895008714816975	WITHOUT_CLASSIFICATION	0.010499128518302465	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999991936364304	WITHOUT_CLASSIFICATION	8.063635695253376E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9935032674940347	WITHOUT_CLASSIFICATION	0.006496732505965189	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9987269513449726	WITHOUT_CLASSIFICATION	0.0012730486550274563	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999831470813538	WITHOUT_CLASSIFICATION	1.685291864617909E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9998389906421464	WITHOUT_CLASSIFICATION	1.610093578534579E-4	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999833889086951	WITHOUT_CLASSIFICATION	1.6611091304838233E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999723217951934	WITHOUT_CLASSIFICATION	2.7678204806580385E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9643769012188242	WITHOUT_CLASSIFICATION	0.035623098781175755	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9983105558987512	WITHOUT_CLASSIFICATION	0.001689444101248765	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9998410386250374	WITHOUT_CLASSIFICATION	1.5896137496267595E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999693114248974	WITHOUT_CLASSIFICATION	3.068857510255417E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9762719502870042	WITHOUT_CLASSIFICATION	0.02372804971299575	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999792507609835	WITHOUT_CLASSIFICATION	2.0749239016485393E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.99935315248947	WITHOUT_CLASSIFICATION	6.46847510530095E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998972089537435	WITHOUT_CLASSIFICATION	1.0279104625655928E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9994788601727503	WITHOUT_CLASSIFICATION	5.211398272496427E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.999858561412145	WITHOUT_CLASSIFICATION	1.41438587854996E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9995972871549367	WITHOUT_CLASSIFICATION	4.027128450633987E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9999168767705257	WITHOUT_CLASSIFICATION	8.312322947441168E-5	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999672052610076	WITHOUT_CLASSIFICATION	3.2794738992379685E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9997299376633791	WITHOUT_CLASSIFICATION	2.7006233662088856E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999747676353572	WITHOUT_CLASSIFICATION	2.5232364642759355E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999679090802419	WITHOUT_CLASSIFICATION	3.2090919758118706E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999950447150734	WITHOUT_CLASSIFICATION	4.955284926667232E-6	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999954242704702	WITHOUT_CLASSIFICATION	4.575729529842938E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9996806002133946	WITHOUT_CLASSIFICATION	3.1939978660550024E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998704349090658	WITHOUT_CLASSIFICATION	1.2956509093429666E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999916870474101	WITHOUT_CLASSIFICATION	8.31295258978908E-6	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999723314141526	WITHOUT_CLASSIFICATION	2.766858584731829E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999723314141526	WITHOUT_CLASSIFICATION	2.766858584731829E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9999721997095093	WITHOUT_CLASSIFICATION	2.7800290490629393E-5	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.999894477905454	WITHOUT_CLASSIFICATION	1.0552209454587186E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9983478408614251	WITHOUT_CLASSIFICATION	0.0016521591385748914	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999905576966642	WITHOUT_CLASSIFICATION	9.44230333575651E-6	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9997335666022338	WITHOUT_CLASSIFICATION	2.664333977662172E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999968298402389	WITHOUT_CLASSIFICATION	3.1701597611007196E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9998991063573494	WITHOUT_CLASSIFICATION	1.00893642650563E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999800256677361	WITHOUT_CLASSIFICATION	1.9974332263879315E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999557681230908	WITHOUT_CLASSIFICATION	4.423187690924045E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999905158063017	WITHOUT_CLASSIFICATION	9.484193698346809E-6	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999833750295185	WITHOUT_CLASSIFICATION	1.6624970481486194E-5	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9999749949820579	WITHOUT_CLASSIFICATION	2.5005017942142393E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999564292964795	WITHOUT_CLASSIFICATION	4.357070352040388E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.999891548459201	WITHOUT_CLASSIFICATION	1.0845154079895824E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999996785105113	WITHOUT_CLASSIFICATION	3.2148948864670695E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999592191989193	WITHOUT_CLASSIFICATION	4.078080108076419E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999502866527566	WITHOUT_CLASSIFICATION	4.971334724342708E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9997591710562874	WITHOUT_CLASSIFICATION	2.4082894371261948E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9997479424229189	WITHOUT_CLASSIFICATION	2.520575770812078E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.999913774456822	WITHOUT_CLASSIFICATION	8.622554317798295E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9973432174728755	WITHOUT_CLASSIFICATION	0.002656782527124606	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.8461125835681388	WITHOUT_CLASSIFICATION	0.1538874164318612	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9999858769021686	WITHOUT_CLASSIFICATION	1.4123097831496993E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999687755495932	WITHOUT_CLASSIFICATION	3.122445040678884E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9996261686250391	WITHOUT_CLASSIFICATION	3.7383137496094E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999802935987443	WITHOUT_CLASSIFICATION	1.9706401255805205E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995892888212548	WITHOUT_CLASSIFICATION	4.107111787452878E-4	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9996595959191424	WITHOUT_CLASSIFICATION	3.404040808575735E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9997566688438128	WITHOUT_CLASSIFICATION	2.4333115618724717E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.999836831353834	WITHOUT_CLASSIFICATION	1.6316864616594887E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999983759863481	WITHOUT_CLASSIFICATION	1.6240136519990204E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9998334561516597	WITHOUT_CLASSIFICATION	1.665438483401785E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.999995685346181	WITHOUT_CLASSIFICATION	4.3146538190547775E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999956218671758	WITHOUT_CLASSIFICATION	4.378132824186614E-6	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.999955670029854	WITHOUT_CLASSIFICATION	4.432997014606855E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.99998546999305	WITHOUT_CLASSIFICATION	1.4530006949938802E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998615390246662	WITHOUT_CLASSIFICATION	1.384609753338417E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998604809833302	WITHOUT_CLASSIFICATION	1.3951901666976212E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9988606831367162	WITHOUT_CLASSIFICATION	0.0011393168632838004	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999216433870268	WITHOUT_CLASSIFICATION	7.835661297318189E-5	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999732266279163	WITHOUT_CLASSIFICATION	2.6773372083636118E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9993065660649543	WITHOUT_CLASSIFICATION	6.934339350457375E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9970141560149426	WITHOUT_CLASSIFICATION	0.0029858439850575552	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999274834633859	WITHOUT_CLASSIFICATION	7.251653661410711E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9994196511142849	WITHOUT_CLASSIFICATION	5.803488857150644E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9997174641686865	WITHOUT_CLASSIFICATION	2.825358313134733E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9997053162043454	WITHOUT_CLASSIFICATION	2.9468379565448155E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9987278614260281	WITHOUT_CLASSIFICATION	0.0012721385739719166	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999672052610076	WITHOUT_CLASSIFICATION	3.2794738992379685E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9997318670772803	WITHOUT_CLASSIFICATION	2.6813292271970015E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9998179658744876	WITHOUT_CLASSIFICATION	1.8203412551235805E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999721449859235	WITHOUT_CLASSIFICATION	2.7855014076576768E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999861973364385	WITHOUT_CLASSIFICATION	1.3802663561591121E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999235091441302	WITHOUT_CLASSIFICATION	7.649085586975027E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9999596763093408	WITHOUT_CLASSIFICATION	4.03236906593008E-5	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999555048202542	WITHOUT_CLASSIFICATION	4.449517974585384E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999804815244744	WITHOUT_CLASSIFICATION	1.951847552559273E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999003572028177	WITHOUT_CLASSIFICATION	9.96427971822623E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995582858726639	WITHOUT_CLASSIFICATION	4.41714127336128E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999871328804314	WITHOUT_CLASSIFICATION	1.2867119568601979E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999892750578765	WITHOUT_CLASSIFICATION	1.0724942123406627E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9997585852521627	WITHOUT_CLASSIFICATION	2.414147478373847E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9997956243754121	WITHOUT_CLASSIFICATION	2.0437562458780614E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999901752128678	WITHOUT_CLASSIFICATION	9.824787132189463E-6	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998805096930371	WITHOUT_CLASSIFICATION	1.1949030696278745E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999210445933453	WITHOUT_CLASSIFICATION	7.895540665470139E-5	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998491356678962	WITHOUT_CLASSIFICATION	1.5086433210382075E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9998013070631445	WITHOUT_CLASSIFICATION	1.9869293685546694E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9907034818645767	WITHOUT_CLASSIFICATION	0.009296518135423225	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999448837737016	WITHOUT_CLASSIFICATION	5.511622629833567E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9999532449216488	WITHOUT_CLASSIFICATION	4.675507835124617E-5	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.997503250824223	WITHOUT_CLASSIFICATION	0.0024967491757770352	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9994984864530516	WITHOUT_CLASSIFICATION	5.01513546948294E-4	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999853965582378	WITHOUT_CLASSIFICATION	1.4603441762266667E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999909294068032	WITHOUT_CLASSIFICATION	9.070593196732975E-6	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999629586840139	WITHOUT_CLASSIFICATION	3.704131598615556E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999093698993302	WITHOUT_CLASSIFICATION	9.063010066979144E-5	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.998872245442042	WITHOUT_CLASSIFICATION	0.001127754557958072	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999359612581679	WITHOUT_CLASSIFICATION	6.403874183212821E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999752363406413	WITHOUT_CLASSIFICATION	2.476365935870217E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9996936553493103	WITHOUT_CLASSIFICATION	3.063446506896255E-4	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9997962515732649	WITHOUT_CLASSIFICATION	2.0374842673498734E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9997740565894161	WITHOUT_CLASSIFICATION	2.259434105839612E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.8026907617700663	WITHOUT_CLASSIFICATION	0.1973092382299338	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999574575662539	WITHOUT_CLASSIFICATION	4.2542433746020126E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9998109837753432	WITHOUT_CLASSIFICATION	1.890162246567242E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999367010753616	WITHOUT_CLASSIFICATION	6.329892463837898E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999367010753616	WITHOUT_CLASSIFICATION	6.329892463837898E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999359612581679	WITHOUT_CLASSIFICATION	6.403874183212821E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.999455863031027	WITHOUT_CLASSIFICATION	5.441369689731304E-4	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9999971787722155	WITHOUT_CLASSIFICATION	2.8212277844917346E-6	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999295819426304	WITHOUT_CLASSIFICATION	7.041805736960019E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9999594851067901	WITHOUT_CLASSIFICATION	4.051489320989741E-5	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999842657066257	WITHOUT_CLASSIFICATION	1.5734293374253153E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.999799784866442	WITHOUT_CLASSIFICATION	2.002151335579709E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998942455951372	WITHOUT_CLASSIFICATION	1.0575440486283316E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999542466220356	WITHOUT_CLASSIFICATION	4.575337796444663E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9998450066020734	WITHOUT_CLASSIFICATION	1.5499339792660296E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9994906080620276	WITHOUT_CLASSIFICATION	5.093919379723412E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9998253826307625	WITHOUT_CLASSIFICATION	1.746173692375965E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9997040999201693	WITHOUT_CLASSIFICATION	2.9590007983068995E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9997543536547806	WITHOUT_CLASSIFICATION	2.4564634521939845E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999635574377457	WITHOUT_CLASSIFICATION	3.6442562254450214E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9998987642299229	WITHOUT_CLASSIFICATION	1.0123577007708633E-4	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9998919398442832	WITHOUT_CLASSIFICATION	1.0806015571680395E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.999861827258455	WITHOUT_CLASSIFICATION	1.3817274154508471E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999823263242428	WITHOUT_CLASSIFICATION	1.7673675757284746E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999810842165378	WITHOUT_CLASSIFICATION	1.8915783462342722E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.999977308113954	WITHOUT_CLASSIFICATION	2.269188604602387E-5	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999574074080948	WITHOUT_CLASSIFICATION	4.2592591905223296E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9998953470164722	WITHOUT_CLASSIFICATION	1.0465298352781067E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9998230947957902	WITHOUT_CLASSIFICATION	1.7690520420968184E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998680163008727	WITHOUT_CLASSIFICATION	1.3198369912722436E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999715933817166	WITHOUT_CLASSIFICATION	2.8406618283403173E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9999728144355476	WITHOUT_CLASSIFICATION	2.7185564452330787E-5	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.998766347399791	WITHOUT_CLASSIFICATION	0.0012336526002090472	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9992536865882996	WITHOUT_CLASSIFICATION	7.46313411700438E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998945240614069	WITHOUT_CLASSIFICATION	1.0547593859310123E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9998085293858525	WITHOUT_CLASSIFICATION	1.9147061414748472E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9997204972044107	WITHOUT_CLASSIFICATION	2.7950279558930065E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999363149785011	WITHOUT_CLASSIFICATION	6.368502149890823E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999234481966373	WITHOUT_CLASSIFICATION	7.655180336276977E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999313032359748	WITHOUT_CLASSIFICATION	6.869676402513018E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9986564845609727	WITHOUT_CLASSIFICATION	0.0013435154390273637	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999914956702792	WITHOUT_CLASSIFICATION	8.504329720809372E-6	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9995487640670137	WITHOUT_CLASSIFICATION	4.512359329863544E-4	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9999235723486832	WITHOUT_CLASSIFICATION	7.64276513167452E-5	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999583813144576	WITHOUT_CLASSIFICATION	4.1618685542481025E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999881147016928	WITHOUT_CLASSIFICATION	1.1885298307185988E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999881147016928	WITHOUT_CLASSIFICATION	1.1885298307185988E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9995001831891128	WITHOUT_CLASSIFICATION	4.998168108871607E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.999931222539876	WITHOUT_CLASSIFICATION	6.877746012407065E-5	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9998863931410168	WITHOUT_CLASSIFICATION	1.1360685898326998E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999380762374153	WITHOUT_CLASSIFICATION	6.192376258469209E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9995217776670456	WITHOUT_CLASSIFICATION	4.782223329542792E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999938002048508	WITHOUT_CLASSIFICATION	6.199795149213155E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.9998978279216875	WITHOUT_CLASSIFICATION	1.0217207831253668E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9999461469699398	WITHOUT_CLASSIFICATION	5.385303006024548E-5	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9998826905163585	WITHOUT_CLASSIFICATION	1.1730948364160024E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9998826905163585	WITHOUT_CLASSIFICATION	1.1730948364160024E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9998826905163585	WITHOUT_CLASSIFICATION	1.1730948364160024E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9997286991826455	WITHOUT_CLASSIFICATION	2.7130081735450367E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9938911728362161	WITHOUT_CLASSIFICATION	0.006108827163783912	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9998090780772814	WITHOUT_CLASSIFICATION	1.909219227185627E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9643769012188242	WITHOUT_CLASSIFICATION	0.035623098781175755	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9996618262340707	WITHOUT_CLASSIFICATION	3.3817376592927773E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9968782881932029	WITHOUT_CLASSIFICATION	0.003121711806797052	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9998968781461871	WITHOUT_CLASSIFICATION	1.0312185381295773E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999952240409616	WITHOUT_CLASSIFICATION	4.775959038394826E-6	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9938911728362161	WITHOUT_CLASSIFICATION	0.006108827163783912	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999713440037867	WITHOUT_CLASSIFICATION	2.8655996213366966E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999713440037867	WITHOUT_CLASSIFICATION	2.8655996213366966E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999640918920085	WITHOUT_CLASSIFICATION	3.590810799151028E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999924061334999	WITHOUT_CLASSIFICATION	7.593866500102254E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996211403794648	WITHOUT_CLASSIFICATION	3.788596205352069E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999472190514683	WITHOUT_CLASSIFICATION	5.278094853175482E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999852595191033	WITHOUT_CLASSIFICATION	1.474048089671096E-5	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999493469671669	WITHOUT_CLASSIFICATION	5.065303283309247E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.999614671543838	WITHOUT_CLASSIFICATION	3.8532845616196486E-4	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9998008269696037	WITHOUT_CLASSIFICATION	1.9917303039643344E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9998484190071179	WITHOUT_CLASSIFICATION	1.515809928822167E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999835772501918	WITHOUT_CLASSIFICATION	1.642274980820635E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999767660638139	WITHOUT_CLASSIFICATION	2.323393618610709E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999688112807753	WITHOUT_CLASSIFICATION	3.1188719224633484E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9999266221452331	WITHOUT_CLASSIFICATION	7.337785476684738E-5	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9994043351792221	WITHOUT_CLASSIFICATION	5.95664820777872E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999930083696398	WITHOUT_CLASSIFICATION	6.99163036023088E-6	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999892821244908	WITHOUT_CLASSIFICATION	1.0717875509315708E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999163168233164	WITHOUT_CLASSIFICATION	8.368317668365994E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9997861430825774	WITHOUT_CLASSIFICATION	2.1385691742254246E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9995961748944419	WITHOUT_CLASSIFICATION	4.038251055581051E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9993856124140847	WITHOUT_CLASSIFICATION	6.143875859153112E-4	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999031432928546	WITHOUT_CLASSIFICATION	9.68567071454407E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998972089537435	WITHOUT_CLASSIFICATION	1.0279104625655928E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999968298402389	WITHOUT_CLASSIFICATION	3.1701597611007196E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999935286022754	WITHOUT_CLASSIFICATION	6.471397724563648E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9984114841385623	WITHOUT_CLASSIFICATION	0.0015885158614376504	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999671789836418	WITHOUT_CLASSIFICATION	3.282101635811863E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9623945618138178	WITHOUT_CLASSIFICATION	0.037605438186182165	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999161596910429	WITHOUT_CLASSIFICATION	8.384030895706566E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999161596910429	WITHOUT_CLASSIFICATION	8.384030895706566E-5	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9997597219704859	WITHOUT_CLASSIFICATION	2.4027802951414576E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9997497321203149	WITHOUT_CLASSIFICATION	2.502678796850968E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999453004831368	WITHOUT_CLASSIFICATION	5.4699516863194015E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.999971023367556	WITHOUT_CLASSIFICATION	2.8976632443969162E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9998285193347773	WITHOUT_CLASSIFICATION	1.7148066522274189E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.999965999339967	WITHOUT_CLASSIFICATION	3.400066003293393E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999162111427438	WITHOUT_CLASSIFICATION	8.378885725632142E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999882113940988	WITHOUT_CLASSIFICATION	1.1788605901229713E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.999976469875694	WITHOUT_CLASSIFICATION	2.3530124306043337E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999465377636492	WITHOUT_CLASSIFICATION	5.346223635074508E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999528073126305	WITHOUT_CLASSIFICATION	4.719268736958987E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999867428194897	WITHOUT_CLASSIFICATION	1.325718051026054E-5	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999664941501704	WITHOUT_CLASSIFICATION	3.3505849829632804E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999747833072868	WITHOUT_CLASSIFICATION	2.5216692713125712E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9998849053514293	WITHOUT_CLASSIFICATION	1.1509464857073143E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999235196109383	WITHOUT_CLASSIFICATION	7.648038906173374E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998202128363027	WITHOUT_CLASSIFICATION	1.7978716369725995E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999931293434974	WITHOUT_CLASSIFICATION	6.870656502660175E-6	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999659361718868	WITHOUT_CLASSIFICATION	3.4063828113191744E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9977042013494045	WITHOUT_CLASSIFICATION	0.0022957986505955674	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999635447957704	WITHOUT_CLASSIFICATION	3.645520422952872E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998307147100444	WITHOUT_CLASSIFICATION	1.692852899557004E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999548321976243	WITHOUT_CLASSIFICATION	4.516780237576216E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9997359472772056	WITHOUT_CLASSIFICATION	2.6405272279439576E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9999153271515774	WITHOUT_CLASSIFICATION	8.467284842265087E-5	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999664941501704	WITHOUT_CLASSIFICATION	3.3505849829632804E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9998784442425706	WITHOUT_CLASSIFICATION	1.2155575742944508E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9998849053514293	WITHOUT_CLASSIFICATION	1.1509464857073143E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9998194244691812	WITHOUT_CLASSIFICATION	1.8057553081880277E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9993427754753738	WITHOUT_CLASSIFICATION	6.572245246261865E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999573799049357	WITHOUT_CLASSIFICATION	4.2620095064261817E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9993627086105946	WITHOUT_CLASSIFICATION	6.372913894054601E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.991617783037065	WITHOUT_CLASSIFICATION	0.008382216962934948	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9999133084747123	WITHOUT_CLASSIFICATION	8.669152528769567E-5	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9995665575083437	WITHOUT_CLASSIFICATION	4.33442491656347E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.999900691595527	WITHOUT_CLASSIFICATION	9.930840447308142E-5	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997126619709308	WITHOUT_CLASSIFICATION	2.873380290692504E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.999867985695971	WITHOUT_CLASSIFICATION	1.320143040289579E-4	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999981450632696	WITHOUT_CLASSIFICATION	1.8549367304946266E-6	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9993080638889914	WITHOUT_CLASSIFICATION	6.919361110086089E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9999462407136984	WITHOUT_CLASSIFICATION	5.3759286301452006E-5	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.9999609365981779	WITHOUT_CLASSIFICATION	3.9063401822235765E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956967512049	WITHOUT_CLASSIFICATION	4.303248795093784E-6	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999640266547729	WITHOUT_CLASSIFICATION	3.597334522713003E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999723647775862	WITHOUT_CLASSIFICATION	2.7635222413796967E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999328907960965	WITHOUT_CLASSIFICATION	6.710920390344613E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9967580739208184	WITHOUT_CLASSIFICATION	0.0032419260791815936	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9999478409359811	WITHOUT_CLASSIFICATION	5.2159064018816324E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997966079492402	WITHOUT_CLASSIFICATION	2.0339205075968998E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.999970583981797	WITHOUT_CLASSIFICATION	2.9416018203048956E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.999959692896682	WITHOUT_CLASSIFICATION	4.0307103317995386E-5	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9988463219834001	WITHOUT_CLASSIFICATION	0.0011536780165999248	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9998216237054923	WITHOUT_CLASSIFICATION	1.783762945077274E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999454373890212	WITHOUT_CLASSIFICATION	5.456261097878442E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9990521202239436	WITHOUT_CLASSIFICATION	9.47879776056343E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999622717325275	WITHOUT_CLASSIFICATION	3.7728267472414804E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999622717325275	WITHOUT_CLASSIFICATION	3.7728267472414804E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9986190849887885	WITHOUT_CLASSIFICATION	0.0013809150112114217	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999797219256421	WITHOUT_CLASSIFICATION	2.0278074357887606E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999854184530156	WITHOUT_CLASSIFICATION	1.4581546984399912E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9994659080086421	WITHOUT_CLASSIFICATION	5.340919913579676E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999892244160384	WITHOUT_CLASSIFICATION	1.0775583961519165E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999962363850805	WITHOUT_CLASSIFICATION	3.7636149195566513E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9999517794029831	WITHOUT_CLASSIFICATION	4.822059701682834E-5	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999821801993317	WITHOUT_CLASSIFICATION	1.7819800668247167E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9998411695397817	WITHOUT_CLASSIFICATION	1.5883046021829356E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9999222404124226	WITHOUT_CLASSIFICATION	7.775958757738872E-5	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9997869425317794	WITHOUT_CLASSIFICATION	2.1305746822072397E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999040671916392	WITHOUT_CLASSIFICATION	9.593280836085245E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9998467944374737	WITHOUT_CLASSIFICATION	1.532055625262916E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.980421443959223	WITHOUT_CLASSIFICATION	0.019578556040776872	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998830898581795	WITHOUT_CLASSIFICATION	1.1691014182046545E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.99997009065505	WITHOUT_CLASSIFICATION	2.9909344949988656E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999887417712676	WITHOUT_CLASSIFICATION	1.1258228732319672E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9993962370812879	WITHOUT_CLASSIFICATION	6.037629187120969E-4	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999853979680757	WITHOUT_CLASSIFICATION	1.4602031924388246E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999880550668869	WITHOUT_CLASSIFICATION	1.1944933113100574E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9998162928099125	WITHOUT_CLASSIFICATION	1.837071900875495E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999853979680757	WITHOUT_CLASSIFICATION	1.4602031924388246E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9992157998068945	WITHOUT_CLASSIFICATION	7.842001931055253E-4	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9999517676142919	WITHOUT_CLASSIFICATION	4.8232385708112315E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999595877107896	WITHOUT_CLASSIFICATION	4.0412289210371416E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9999595877107896	WITHOUT_CLASSIFICATION	4.0412289210371416E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999871718111311	WITHOUT_CLASSIFICATION	1.2828188868852874E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999596710263831	WITHOUT_CLASSIFICATION	4.0328973616910303E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999829418475893	WITHOUT_CLASSIFICATION	1.7058152410688625E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9992203943566969	WITHOUT_CLASSIFICATION	7.796056433032346E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999819929021649	WITHOUT_CLASSIFICATION	1.8007097835090305E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9991142201841194	WITHOUT_CLASSIFICATION	8.857798158805768E-4	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9998993254596472	WITHOUT_CLASSIFICATION	1.0067454035282724E-4	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9986962243127944	WITHOUT_CLASSIFICATION	0.0013037756872057021	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.99999679497408	WITHOUT_CLASSIFICATION	3.205025919934556E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.999981047874814	WITHOUT_CLASSIFICATION	1.8952125185901526E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9997318670772803	WITHOUT_CLASSIFICATION	2.6813292271970015E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.999974134117051	WITHOUT_CLASSIFICATION	2.586588294892993E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999778201012256	WITHOUT_CLASSIFICATION	2.2179898774354236E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.99997009065505	WITHOUT_CLASSIFICATION	2.9909344949988656E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999819929021649	WITHOUT_CLASSIFICATION	1.8007097835090305E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9933709885924565	WITHOUT_CLASSIFICATION	0.006629011407543396	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9933709885924565	WITHOUT_CLASSIFICATION	0.006629011407543396	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9459097186401764	WITHOUT_CLASSIFICATION	0.054090281359823716	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999937786986164	WITHOUT_CLASSIFICATION	6.221301383579264E-6	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999795755319155	WITHOUT_CLASSIFICATION	2.0424468084474945E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9998722189091898	WITHOUT_CLASSIFICATION	1.2778109081022543E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999048630836495	WITHOUT_CLASSIFICATION	9.513691635056976E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999783112112491	WITHOUT_CLASSIFICATION	2.1688788750867632E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9991730490314805	WITHOUT_CLASSIFICATION	8.269509685194445E-4	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996598182747225	WITHOUT_CLASSIFICATION	3.40181725277542E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999809509320887	WITHOUT_CLASSIFICATION	1.9049067911261284E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999981379656009	WITHOUT_CLASSIFICATION	1.8620343990705327E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9998511216990417	WITHOUT_CLASSIFICATION	1.488783009582488E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999998898437606	WITHOUT_CLASSIFICATION	1.101562394068663E-7	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999264231915403	WITHOUT_CLASSIFICATION	7.357680845963721E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999887417712676	WITHOUT_CLASSIFICATION	1.1258228732319672E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999596710263831	WITHOUT_CLASSIFICATION	4.0328973616910303E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999829418475893	WITHOUT_CLASSIFICATION	1.7058152410688625E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999829418475893	WITHOUT_CLASSIFICATION	1.7058152410688625E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999819929021649	WITHOUT_CLASSIFICATION	1.8007097835090305E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999819929021649	WITHOUT_CLASSIFICATION	1.8007097835090305E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9933709885924565	WITHOUT_CLASSIFICATION	0.006629011407543396	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999705353928056	WITHOUT_CLASSIFICATION	2.94646071944455E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9988657639315174	WITHOUT_CLASSIFICATION	0.0011342360684825782	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.999998452255345	WITHOUT_CLASSIFICATION	1.5477446549117166E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997986102776305	WITHOUT_CLASSIFICATION	2.0138972236946815E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9999760342479833	WITHOUT_CLASSIFICATION	2.396575201658723E-5	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9729084231848314	WITHOUT_CLASSIFICATION	0.02709157681516871	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9998616093090946	WITHOUT_CLASSIFICATION	1.383906909053632E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9998664807996845	WITHOUT_CLASSIFICATION	1.335192003154827E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999781507445097	WITHOUT_CLASSIFICATION	2.1849255490341825E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999596710263831	WITHOUT_CLASSIFICATION	4.0328973616910303E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999829418475893	WITHOUT_CLASSIFICATION	1.7058152410688625E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.999829418475893	WITHOUT_CLASSIFICATION	1.7058152410688625E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9996598182747225	WITHOUT_CLASSIFICATION	3.40181725277542E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999981379656009	WITHOUT_CLASSIFICATION	1.8620343990705327E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9993664071392476	WITHOUT_CLASSIFICATION	6.335928607524159E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999971190456511	WITHOUT_CLASSIFICATION	2.880954348788054E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999864061139303	WITHOUT_CLASSIFICATION	1.359388606974527E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999864061139303	WITHOUT_CLASSIFICATION	1.359388606974527E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998192446097147	WITHOUT_CLASSIFICATION	1.8075539028522748E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9998008953307916	WITHOUT_CLASSIFICATION	1.9910466920826405E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999812385366779	WITHOUT_CLASSIFICATION	1.8761463322111006E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999936713310223	WITHOUT_CLASSIFICATION	6.328668977597556E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999936713310223	WITHOUT_CLASSIFICATION	6.328668977597556E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999567430259749	WITHOUT_CLASSIFICATION	4.325697402500536E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999567430259749	WITHOUT_CLASSIFICATION	4.325697402500536E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999874330334508	WITHOUT_CLASSIFICATION	1.2566966549146702E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999874330334508	WITHOUT_CLASSIFICATION	1.2566966549146702E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999893455428988	WITHOUT_CLASSIFICATION	1.0654457101196576E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999713980378102	WITHOUT_CLASSIFICATION	2.860196218972202E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9997323120946626	WITHOUT_CLASSIFICATION	2.676879053374077E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999611671499693	WITHOUT_CLASSIFICATION	3.883285003068195E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9999748812234912	WITHOUT_CLASSIFICATION	2.5118776508765747E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999007495324498	WITHOUT_CLASSIFICATION	9.925046755014872E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.999955869906045	WITHOUT_CLASSIFICATION	4.413009395501826E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9997269908931388	WITHOUT_CLASSIFICATION	2.730091068612589E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9993667799597948	WITHOUT_CLASSIFICATION	6.332200402050619E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999588816931805	WITHOUT_CLASSIFICATION	4.111830681956513E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999772967660856	WITHOUT_CLASSIFICATION	2.2703233914395712E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9989312728501364	WITHOUT_CLASSIFICATION	0.0010687271498636566	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999144043436551	WITHOUT_CLASSIFICATION	8.559565634489525E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999144043436551	WITHOUT_CLASSIFICATION	8.559565634489525E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9996533631618088	WITHOUT_CLASSIFICATION	3.4663683819120204E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999493469671669	WITHOUT_CLASSIFICATION	5.065303283309247E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9981603502366515	WITHOUT_CLASSIFICATION	0.0018396497633485344	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9999556690852496	WITHOUT_CLASSIFICATION	4.433091475042189E-5	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999927545585033	WITHOUT_CLASSIFICATION	7.245441496625232E-6	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9998831866470338	WITHOUT_CLASSIFICATION	1.1681335296616423E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998385601216778	WITHOUT_CLASSIFICATION	1.6143987832228015E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998353878561016	WITHOUT_CLASSIFICATION	1.6461214389846884E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999708809939777	WITHOUT_CLASSIFICATION	2.911900602237427E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9999286921014684	WITHOUT_CLASSIFICATION	7.130789853160927E-5	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999975433211261	WITHOUT_CLASSIFICATION	2.4566788739068953E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9992446322604541	WITHOUT_CLASSIFICATION	7.553677395459116E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998933379080701	WITHOUT_CLASSIFICATION	1.0666209192989936E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999563567694715	WITHOUT_CLASSIFICATION	4.364323052848803E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9978813269225554	WITHOUT_CLASSIFICATION	0.0021186730774445783	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999861025602894	WITHOUT_CLASSIFICATION	1.3897439710560825E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9998517067194396	WITHOUT_CLASSIFICATION	1.4829328056034722E-4	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9999150872104926	WITHOUT_CLASSIFICATION	8.49127895074288E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999093969157253	WITHOUT_CLASSIFICATION	9.060308427467388E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999093969157253	WITHOUT_CLASSIFICATION	9.060308427467388E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999849331524753	WITHOUT_CLASSIFICATION	1.5066847524815234E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9997318670772803	WITHOUT_CLASSIFICATION	2.6813292271970015E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999684497652144	WITHOUT_CLASSIFICATION	3.1550234785627674E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999444990381308	WITHOUT_CLASSIFICATION	5.550096186923985E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999444990381308	WITHOUT_CLASSIFICATION	5.550096186923985E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999743743031955	WITHOUT_CLASSIFICATION	2.562569680449992E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999700703959926	WITHOUT_CLASSIFICATION	2.9929604007465152E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9999304502465435	WITHOUT_CLASSIFICATION	6.954975345659628E-5	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997782301866641	WITHOUT_CLASSIFICATION	2.2176981333593796E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997576049467184	WITHOUT_CLASSIFICATION	2.423950532817212E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997576049467184	WITHOUT_CLASSIFICATION	2.423950532817212E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9997576049467184	WITHOUT_CLASSIFICATION	2.423950532817212E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997782301866641	WITHOUT_CLASSIFICATION	2.2176981333593796E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999851691993985	WITHOUT_CLASSIFICATION	1.4830800601512174E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9999008574561892	WITHOUT_CLASSIFICATION	9.914254381083609E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.999242334828811	WITHOUT_CLASSIFICATION	7.576651711890292E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9998610880685395	WITHOUT_CLASSIFICATION	1.3891193146047304E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9998207024121969	WITHOUT_CLASSIFICATION	1.7929758780304962E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998103115941643	WITHOUT_CLASSIFICATION	1.8968840583574514E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999922432932019	WITHOUT_CLASSIFICATION	7.756706798188871E-6	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9994330004147635	WITHOUT_CLASSIFICATION	5.669995852364658E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.999975433211261	WITHOUT_CLASSIFICATION	2.4566788739068953E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9984418728771346	WITHOUT_CLASSIFICATION	0.0015581271228653226	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999365652988781	WITHOUT_CLASSIFICATION	6.343470112191767E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999891007120902	WITHOUT_CLASSIFICATION	1.0899287909810366E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998419895149054	WITHOUT_CLASSIFICATION	1.58010485094531E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999507557983482	WITHOUT_CLASSIFICATION	4.924420165173616E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996164200511873	WITHOUT_CLASSIFICATION	3.835799488127535E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999799917970624	WITHOUT_CLASSIFICATION	2.0008202937510433E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.999960530533699	WITHOUT_CLASSIFICATION	3.9469466300883713E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9996667685744727	WITHOUT_CLASSIFICATION	3.332314255273961E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.99995312682624	WITHOUT_CLASSIFICATION	4.687317375994039E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997828200142249	WITHOUT_CLASSIFICATION	2.1717998577507495E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999611897997224	WITHOUT_CLASSIFICATION	3.881020027767897E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999808352231117	WITHOUT_CLASSIFICATION	1.9164776888448157E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999338938752738	WITHOUT_CLASSIFICATION	6.610612472618636E-5	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999988980867278	WITHOUT_CLASSIFICATION	1.1019132721633533E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.999895077857908	WITHOUT_CLASSIFICATION	1.0492214209201289E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9999326059498501	WITHOUT_CLASSIFICATION	6.739405014989738E-5	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999817755358912	WITHOUT_CLASSIFICATION	1.8224464108812207E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9944086486316387	WITHOUT_CLASSIFICATION	0.00559135136836127	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9999872897955724	WITHOUT_CLASSIFICATION	1.2710204427463501E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9999829222302125	WITHOUT_CLASSIFICATION	1.70777697875145E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9999924095259666	WITHOUT_CLASSIFICATION	7.590474033330586E-6	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999257540571953	WITHOUT_CLASSIFICATION	7.42459428046578E-5	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999815967572974	WITHOUT_CLASSIFICATION	1.840324270267556E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999159470841326	WITHOUT_CLASSIFICATION	8.405291586742606E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999002830642217	WITHOUT_CLASSIFICATION	9.971693577824044E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.999675847888487	WITHOUT_CLASSIFICATION	3.2415211151297347E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999743743031955	WITHOUT_CLASSIFICATION	2.562569680449992E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999015218364558	WITHOUT_CLASSIFICATION	9.847816354428762E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9997782301866641	WITHOUT_CLASSIFICATION	2.2176981333593796E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9998103115941643	WITHOUT_CLASSIFICATION	1.8968840583574514E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999365652988781	WITHOUT_CLASSIFICATION	6.343470112191767E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9998419895149054	WITHOUT_CLASSIFICATION	1.58010485094531E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9996164200511873	WITHOUT_CLASSIFICATION	3.835799488127535E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999891007120902	WITHOUT_CLASSIFICATION	1.0899287909810366E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9999799917970624	WITHOUT_CLASSIFICATION	2.0008202937510433E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.99995312682624	WITHOUT_CLASSIFICATION	4.687317375994039E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9996667685744727	WITHOUT_CLASSIFICATION	3.332314255273961E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999611897997224	WITHOUT_CLASSIFICATION	3.881020027767897E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999959126703907	WITHOUT_CLASSIFICATION	4.087329609356531E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9990382165208596	WITHOUT_CLASSIFICATION	9.617834791403992E-4	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9998793853648188	WITHOUT_CLASSIFICATION	1.2061463518127625E-4	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999696990395814	WITHOUT_CLASSIFICATION	3.03009604184872E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999430465146677	WITHOUT_CLASSIFICATION	5.695348533222489E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999563037158096	WITHOUT_CLASSIFICATION	4.3696284190424757E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998825518274107	WITHOUT_CLASSIFICATION	1.1744817258930131E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9995804574244596	WITHOUT_CLASSIFICATION	4.195425755404321E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.99964519959756	WITHOUT_CLASSIFICATION	3.548004024400155E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9999301861963984	WITHOUT_CLASSIFICATION	6.981380360162778E-5	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999622206871219	WITHOUT_CLASSIFICATION	3.777931287813258E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996027302606085	WITHOUT_CLASSIFICATION	3.9726973939149297E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999333896190186	WITHOUT_CLASSIFICATION	6.661038098137389E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999480075604891	WITHOUT_CLASSIFICATION	5.199243951093769E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998803823284413	WITHOUT_CLASSIFICATION	1.1961767155867728E-4	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999407457176301	WITHOUT_CLASSIFICATION	5.9254282369702956E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997861919819125	WITHOUT_CLASSIFICATION	2.1380801808744767E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999749163257177	WITHOUT_CLASSIFICATION	2.5083674282325687E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999864710774352	WITHOUT_CLASSIFICATION	1.3528922564792027E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9998850600694653	WITHOUT_CLASSIFICATION	1.1493993053460815E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9997811425550087	WITHOUT_CLASSIFICATION	2.1885744499117922E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9997811425550087	WITHOUT_CLASSIFICATION	2.1885744499117922E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9988807474751213	WITHOUT_CLASSIFICATION	0.0011192525248786029	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997052031481931	WITHOUT_CLASSIFICATION	2.9479685180696806E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9997052031481931	WITHOUT_CLASSIFICATION	2.9479685180696806E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999311865156996	WITHOUT_CLASSIFICATION	6.881348430047865E-5	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9999311865156996	WITHOUT_CLASSIFICATION	6.881348430047865E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998468131491811	WITHOUT_CLASSIFICATION	1.5318685081891853E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9998468131491811	WITHOUT_CLASSIFICATION	1.5318685081891853E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999933757063343	WITHOUT_CLASSIFICATION	6.624293665622061E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9986859729447511	WITHOUT_CLASSIFICATION	0.0013140270552488562	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9986859729447511	WITHOUT_CLASSIFICATION	0.0013140270552488562	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999760250980894	WITHOUT_CLASSIFICATION	2.397490191066195E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999760250980894	WITHOUT_CLASSIFICATION	2.397490191066195E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998422530222398	WITHOUT_CLASSIFICATION	1.5774697776027317E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9998046473560428	WITHOUT_CLASSIFICATION	1.953526439571984E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9998046473560428	WITHOUT_CLASSIFICATION	1.953526439571984E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998745459723607	WITHOUT_CLASSIFICATION	1.2545402763926628E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9998424123692841	WITHOUT_CLASSIFICATION	1.575876307159317E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9999036096050331	WITHOUT_CLASSIFICATION	9.639039496690324E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998745459723607	WITHOUT_CLASSIFICATION	1.2545402763926628E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9997411468060805	WITHOUT_CLASSIFICATION	2.588531939194351E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999989636264333	WITHOUT_CLASSIFICATION	1.036373566738923E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998239048826609	WITHOUT_CLASSIFICATION	1.7609511733910046E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999985985782488	WITHOUT_CLASSIFICATION	1.4014217511630084E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999975975077173	WITHOUT_CLASSIFICATION	2.402492282596099E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999975975077173	WITHOUT_CLASSIFICATION	2.402492282596099E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999873510915177	WITHOUT_CLASSIFICATION	1.2648908482268224E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998801846065641	WITHOUT_CLASSIFICATION	1.1981539343584691E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998801846065641	WITHOUT_CLASSIFICATION	1.1981539343584691E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998589268575474	WITHOUT_CLASSIFICATION	1.4107314245251343E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9998239048826609	WITHOUT_CLASSIFICATION	1.7609511733910046E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999985985782488	WITHOUT_CLASSIFICATION	1.4014217511630084E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999975975077173	WITHOUT_CLASSIFICATION	2.402492282596099E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999975975077173	WITHOUT_CLASSIFICATION	2.402492282596099E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999873510915177	WITHOUT_CLASSIFICATION	1.2648908482268224E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9998429795985363	WITHOUT_CLASSIFICATION	1.5702040146364747E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998986303077677	WITHOUT_CLASSIFICATION	1.0136969223227222E-4	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9992656440806416	WITHOUT_CLASSIFICATION	7.34355919358411E-4	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9997646504950731	WITHOUT_CLASSIFICATION	2.3534950492680264E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9998950922707139	WITHOUT_CLASSIFICATION	1.0490772928610406E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999862206485556	WITHOUT_CLASSIFICATION	1.3779351444408619E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999836688118314	WITHOUT_CLASSIFICATION	1.6331188168664258E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999836688118314	WITHOUT_CLASSIFICATION	1.6331188168664258E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9982917163085666	WITHOUT_CLASSIFICATION	0.0017082836914333213	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9996322448999918	WITHOUT_CLASSIFICATION	3.677551000081482E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9996322448999918	WITHOUT_CLASSIFICATION	3.677551000081482E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9998707178037518	WITHOUT_CLASSIFICATION	1.2928219624823556E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9996327919349431	WITHOUT_CLASSIFICATION	3.6720806505681903E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9996327919349431	WITHOUT_CLASSIFICATION	3.6720806505681903E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9996833262767911	WITHOUT_CLASSIFICATION	3.16673723208919E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9996810185769786	WITHOUT_CLASSIFICATION	3.189814230213676E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999356820245183	WITHOUT_CLASSIFICATION	6.431797548161705E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9999356820245183	WITHOUT_CLASSIFICATION	6.431797548161705E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9996322448999918	WITHOUT_CLASSIFICATION	3.677551000081482E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999247519267248	WITHOUT_CLASSIFICATION	7.52480732752295E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999451509698273	WITHOUT_CLASSIFICATION	5.484903017269074E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999972876483227	WITHOUT_CLASSIFICATION	2.712351677298466E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997058448185447	WITHOUT_CLASSIFICATION	2.941551814553052E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999290431219705	WITHOUT_CLASSIFICATION	7.09568780294781E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9998063041632086	WITHOUT_CLASSIFICATION	1.936958367913861E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999182493895858	WITHOUT_CLASSIFICATION	8.175061041413086E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9995688858880486	WITHOUT_CLASSIFICATION	4.3111411195148657E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999987391526234	WITHOUT_CLASSIFICATION	1.2608473766882577E-6	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998916059135119	WITHOUT_CLASSIFICATION	1.0839408648821112E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9998916059135119	WITHOUT_CLASSIFICATION	1.0839408648821112E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9998100546973858	WITHOUT_CLASSIFICATION	1.8994530261413504E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9998100546973858	WITHOUT_CLASSIFICATION	1.8994530261413504E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9999035258767508	WITHOUT_CLASSIFICATION	9.647412324924393E-5	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999502582585385	WITHOUT_CLASSIFICATION	4.974174146148786E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999502582585385	WITHOUT_CLASSIFICATION	4.974174146148786E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.999502582585385	WITHOUT_CLASSIFICATION	4.974174146148786E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999945663394748	WITHOUT_CLASSIFICATION	5.433660525150794E-6	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999945663394748	WITHOUT_CLASSIFICATION	5.433660525150794E-6	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.999898964969801	WITHOUT_CLASSIFICATION	1.0103503019894244E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9995326379896118	WITHOUT_CLASSIFICATION	4.673620103882154E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999654571337584	WITHOUT_CLASSIFICATION	3.454286624156836E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999976702524569	WITHOUT_CLASSIFICATION	2.3297475432128637E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9999494977863115	WITHOUT_CLASSIFICATION	5.050221368841446E-5	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9998183062030871	WITHOUT_CLASSIFICATION	1.816937969129109E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9981662757651293	WITHOUT_CLASSIFICATION	0.0018337242348706706	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.999898964969801	WITHOUT_CLASSIFICATION	1.0103503019894244E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999784851178949	WITHOUT_CLASSIFICATION	2.1514882105143664E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9995326379896118	WITHOUT_CLASSIFICATION	4.673620103882154E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999654571337584	WITHOUT_CLASSIFICATION	3.454286624156836E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998674117040495	WITHOUT_CLASSIFICATION	1.325882959504769E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999610918639366	WITHOUT_CLASSIFICATION	3.8908136063386246E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998615005398912	WITHOUT_CLASSIFICATION	1.3849946010877464E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999417669315319	WITHOUT_CLASSIFICATION	5.823306846812453E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999703479653176	WITHOUT_CLASSIFICATION	2.965203468248163E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9998458650616381	WITHOUT_CLASSIFICATION	1.5413493836200856E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9998674117040495	WITHOUT_CLASSIFICATION	1.325882959504769E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999537964002823	WITHOUT_CLASSIFICATION	4.620359971777004E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999537964002823	WITHOUT_CLASSIFICATION	4.620359971777004E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9995249969459112	WITHOUT_CLASSIFICATION	4.7500305408874313E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999748572823389	WITHOUT_CLASSIFICATION	2.514271766109519E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9999205836382352	WITHOUT_CLASSIFICATION	7.941636176485963E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9995736888522682	WITHOUT_CLASSIFICATION	4.263111477319021E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992354175225918	WITHOUT_CLASSIFICATION	7.645824774081232E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999951568813289	WITHOUT_CLASSIFICATION	4.8431186710864684E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9998629569287523	WITHOUT_CLASSIFICATION	1.3704307124773576E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9999172598412505	WITHOUT_CLASSIFICATION	8.274015874951765E-5	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9999592924485109	WITHOUT_CLASSIFICATION	4.0707551489139764E-5	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999621473398593	WITHOUT_CLASSIFICATION	3.785266014066413E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999308736767614	WITHOUT_CLASSIFICATION	6.91263232386521E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9995736888522682	WITHOUT_CLASSIFICATION	4.263111477319021E-4	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992354175225918	WITHOUT_CLASSIFICATION	7.645824774081232E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.999878899674013	WITHOUT_CLASSIFICATION	1.2110032598703888E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999429506571514	WITHOUT_CLASSIFICATION	5.7049342848554704E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9998364540376833	WITHOUT_CLASSIFICATION	1.6354596231679992E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999612781193952	WITHOUT_CLASSIFICATION	3.872188060484707E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999634657534527	WITHOUT_CLASSIFICATION	3.653424654716303E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999460531301954	WITHOUT_CLASSIFICATION	5.394686980466848E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.999943173934607	WITHOUT_CLASSIFICATION	5.682606539302803E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9985458628850667	WITHOUT_CLASSIFICATION	0.0014541371149331978	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999708127564283	WITHOUT_CLASSIFICATION	2.918724357175665E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999575736916378	WITHOUT_CLASSIFICATION	4.2426308362151335E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999697566886715	WITHOUT_CLASSIFICATION	3.0243311328579234E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9998886355366027	WITHOUT_CLASSIFICATION	1.113644633973691E-4	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999955965189056	WITHOUT_CLASSIFICATION	4.403481094521952E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999575736916378	WITHOUT_CLASSIFICATION	4.2426308362151335E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999697566886715	WITHOUT_CLASSIFICATION	3.0243311328579234E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9998886355366027	WITHOUT_CLASSIFICATION	1.113644633973691E-4	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998130865285342	WITHOUT_CLASSIFICATION	1.8691347146587595E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9992185221246167	WITHOUT_CLASSIFICATION	7.814778753832653E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9997742303577993	WITHOUT_CLASSIFICATION	2.2576964220074998E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9979106263941913	WITHOUT_CLASSIFICATION	0.0020893736058087507	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9998582980654098	WITHOUT_CLASSIFICATION	1.4170193459014588E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9999102878661481	WITHOUT_CLASSIFICATION	8.971213385182344E-5	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9998683544231645	WITHOUT_CLASSIFICATION	1.3164557683543337E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999629787979577	WITHOUT_CLASSIFICATION	3.702120204231845E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999839345928856	WITHOUT_CLASSIFICATION	1.6065407114485515E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9767571970777692	WITHOUT_CLASSIFICATION	0.02324280292223082	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9998266781936007	WITHOUT_CLASSIFICATION	1.733218063992481E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9998151085029653	WITHOUT_CLASSIFICATION	1.8489149703464715E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999947012216205	WITHOUT_CLASSIFICATION	5.2987783795267075E-6	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9996780199665884	WITHOUT_CLASSIFICATION	3.21980033411435E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999595054625885	WITHOUT_CLASSIFICATION	4.0494537411575116E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999174549754864	WITHOUT_CLASSIFICATION	8.254502451360534E-4	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.99975872004324	WITHOUT_CLASSIFICATION	2.4127995676010602E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999928554919466	WITHOUT_CLASSIFICATION	7.144508053382902E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999328025231827	WITHOUT_CLASSIFICATION	6.719747681730213E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999622650031444	WITHOUT_CLASSIFICATION	3.7734996855594315E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999791980877077	WITHOUT_CLASSIFICATION	2.080191229221958E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999791980877077	WITHOUT_CLASSIFICATION	2.080191229221958E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9998841103541274	WITHOUT_CLASSIFICATION	1.1588964587273422E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9998841103541274	WITHOUT_CLASSIFICATION	1.1588964587273422E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999894723675257	WITHOUT_CLASSIFICATION	1.0527632474239151E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9999894723675257	WITHOUT_CLASSIFICATION	1.0527632474239151E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999876162440902	WITHOUT_CLASSIFICATION	1.2383755909873968E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999684615236	WITHOUT_CLASSIFICATION	3.1538476404905446E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999495663077135	WITHOUT_CLASSIFICATION	5.0433692286545245E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999918242930377	WITHOUT_CLASSIFICATION	8.175706962302473E-6	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999982552208674	WITHOUT_CLASSIFICATION	1.7447791326055234E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999947477378653	WITHOUT_CLASSIFICATION	5.252262134693043E-6	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999475207311265	WITHOUT_CLASSIFICATION	5.2479268873436336E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999774926136059	WITHOUT_CLASSIFICATION	2.2507386394046323E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999876162440902	WITHOUT_CLASSIFICATION	1.2383755909873968E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.999999684615236	WITHOUT_CLASSIFICATION	3.1538476404905446E-7	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9999495663077135	WITHOUT_CLASSIFICATION	5.0433692286545245E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999982552208674	WITHOUT_CLASSIFICATION	1.7447791326055234E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999947477378653	WITHOUT_CLASSIFICATION	5.252262134693043E-6	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9999128331388546	WITHOUT_CLASSIFICATION	8.716686114551577E-5	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999046472637888	WITHOUT_CLASSIFICATION	9.53527362112148E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9997884388505628	WITHOUT_CLASSIFICATION	2.1156114943723865E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9997884388505628	WITHOUT_CLASSIFICATION	2.1156114943723865E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9998766127441056	WITHOUT_CLASSIFICATION	1.2338725589436587E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998994794347782	WITHOUT_CLASSIFICATION	1.0052056522189016E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9980358402515153	WITHOUT_CLASSIFICATION	0.001964159748484824	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999615566581821	WITHOUT_CLASSIFICATION	3.844334181797126E-5	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999615566581821	WITHOUT_CLASSIFICATION	3.844334181797126E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996975079699937	WITHOUT_CLASSIFICATION	3.0249203000628903E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999919430743054	WITHOUT_CLASSIFICATION	8.05692569455347E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998452309777898	WITHOUT_CLASSIFICATION	1.5476902221011734E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999558621531406	WITHOUT_CLASSIFICATION	4.413784685932672E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9997875229866942	WITHOUT_CLASSIFICATION	2.1247701330572458E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996027302606085	WITHOUT_CLASSIFICATION	3.9726973939149297E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999333896190186	WITHOUT_CLASSIFICATION	6.661038098137389E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999480075604891	WITHOUT_CLASSIFICATION	5.199243951093769E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998803823284413	WITHOUT_CLASSIFICATION	1.1961767155867728E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999749163257177	WITHOUT_CLASSIFICATION	2.5083674282325687E-5	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999864710774352	WITHOUT_CLASSIFICATION	1.3528922564792027E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9996975079699937	WITHOUT_CLASSIFICATION	3.0249203000628903E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999919430743054	WITHOUT_CLASSIFICATION	8.05692569455347E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999558621531406	WITHOUT_CLASSIFICATION	4.413784685932672E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999082593464457	WITHOUT_CLASSIFICATION	9.174065355438185E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9980358402515153	WITHOUT_CLASSIFICATION	0.001964159748484824	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9980358402515153	WITHOUT_CLASSIFICATION	0.001964159748484824	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999308736767614	WITHOUT_CLASSIFICATION	6.91263232386521E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999308736767614	WITHOUT_CLASSIFICATION	6.91263232386521E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995131703932915	WITHOUT_CLASSIFICATION	4.8682960670854894E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995131703932915	WITHOUT_CLASSIFICATION	4.8682960670854894E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999686021454953	WITHOUT_CLASSIFICATION	3.1397854504688936E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9997452529839833	WITHOUT_CLASSIFICATION	2.5474701601672835E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9999111304105681	WITHOUT_CLASSIFICATION	8.886958943182623E-5	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999570210144574	WITHOUT_CLASSIFICATION	4.297898554256523E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9998184372402846	WITHOUT_CLASSIFICATION	1.8156275971536301E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999369479636546	WITHOUT_CLASSIFICATION	6.305203634539306E-5	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9988489634269392	WITHOUT_CLASSIFICATION	0.0011510365730608323	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999935517463421	WITHOUT_CLASSIFICATION	6.4482536578773056E-6	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999791539707401	WITHOUT_CLASSIFICATION	2.0846029259904568E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999759104194755	WITHOUT_CLASSIFICATION	2.4089580524370792E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999553747365103	WITHOUT_CLASSIFICATION	4.4625263489662605E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999848952044679	WITHOUT_CLASSIFICATION	1.5104795532112482E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999520628905205	WITHOUT_CLASSIFICATION	4.7937109479487743E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9999112276311144	WITHOUT_CLASSIFICATION	8.877236888554239E-5	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.999960113360688	WITHOUT_CLASSIFICATION	3.988663931207985E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9998965736632819	WITHOUT_CLASSIFICATION	1.0342633671809406E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999830627313295	WITHOUT_CLASSIFICATION	1.6937268670453714E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.999957256958498	WITHOUT_CLASSIFICATION	4.2743041501996894E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999333896190186	WITHOUT_CLASSIFICATION	6.661038098137389E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9998803823284413	WITHOUT_CLASSIFICATION	1.1961767155867728E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9999082593464457	WITHOUT_CLASSIFICATION	9.174065355438185E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.9980358402515153	WITHOUT_CLASSIFICATION	0.001964159748484824	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999308736767614	WITHOUT_CLASSIFICATION	6.91263232386521E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995131703932915	WITHOUT_CLASSIFICATION	4.8682960670854894E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9999092069125249	WITHOUT_CLASSIFICATION	9.07930874750448E-5	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999468997131445	WITHOUT_CLASSIFICATION	5.310028685537423E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999859691932016	WITHOUT_CLASSIFICATION	1.4030806798380502E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9989325278906455	WITHOUT_CLASSIFICATION	0.0010674721093545888	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9993062560332162	WITHOUT_CLASSIFICATION	6.93743966783773E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9993062560332162	WITHOUT_CLASSIFICATION	6.93743966783773E-4	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999406708081715	WITHOUT_CLASSIFICATION	5.932919182845535E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999690783422228	WITHOUT_CLASSIFICATION	3.0921657777215594E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999637489685237	WITHOUT_CLASSIFICATION	3.625103147631064E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999696447616581	WITHOUT_CLASSIFICATION	3.035523834185517E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999867792959308	WITHOUT_CLASSIFICATION	1.322070406924562E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999867792959308	WITHOUT_CLASSIFICATION	1.322070406924562E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999785616090937	WITHOUT_CLASSIFICATION	2.143839090619448E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999710004543743	WITHOUT_CLASSIFICATION	2.8999545625776028E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9999105822119555	WITHOUT_CLASSIFICATION	8.941778804450879E-5	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9997173280175136	WITHOUT_CLASSIFICATION	2.826719824864399E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999962053459786	WITHOUT_CLASSIFICATION	3.79465402138191E-6	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999643085230827	WITHOUT_CLASSIFICATION	3.569147691718873E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999557391802604	WITHOUT_CLASSIFICATION	4.4260819739621025E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9997801913531729	WITHOUT_CLASSIFICATION	2.1980864682715105E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9897670529491253	WITHOUT_CLASSIFICATION	0.010232947050874755	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9996910010676359	WITHOUT_CLASSIFICATION	3.089989323641335E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9987864203779074	WITHOUT_CLASSIFICATION	0.0012135796220925556	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999583407961851	WITHOUT_CLASSIFICATION	4.165920381492014E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999961746740677	WITHOUT_CLASSIFICATION	3.825325932431914E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9999656478975878	WITHOUT_CLASSIFICATION	3.43521024122184E-5	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9995396468910236	WITHOUT_CLASSIFICATION	4.603531089764682E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9994349340617418	WITHOUT_CLASSIFICATION	5.650659382581543E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9998637865524762	WITHOUT_CLASSIFICATION	1.3621344752375193E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9999087123201751	WITHOUT_CLASSIFICATION	9.128767982485069E-5	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9998020230640637	WITHOUT_CLASSIFICATION	1.9797693593626557E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999771249941224	WITHOUT_CLASSIFICATION	2.287500587756077E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9996699670523864	WITHOUT_CLASSIFICATION	3.3003294761358636E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999966208301766	WITHOUT_CLASSIFICATION	3.3791698234039525E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.999966208301766	WITHOUT_CLASSIFICATION	3.3791698234039525E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9996866671123653	WITHOUT_CLASSIFICATION	3.1333288763470645E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.999893915134043	WITHOUT_CLASSIFICATION	1.0608486595694628E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998353878561016	WITHOUT_CLASSIFICATION	1.6461214389846884E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9998353878561016	WITHOUT_CLASSIFICATION	1.6461214389846884E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.8958816405023233	DEFECT	0.10411835949767667	WITHOUT_CLASSIFICATION
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9990532238696759	WITHOUT_CLASSIFICATION	9.467761303240893E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9999197207868104	WITHOUT_CLASSIFICATION	8.027921318967823E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999106786194703	WITHOUT_CLASSIFICATION	8.932138052969835E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999106786194703	WITHOUT_CLASSIFICATION	8.932138052969835E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9997465915192618	WITHOUT_CLASSIFICATION	2.534084807381615E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999933209476066	WITHOUT_CLASSIFICATION	6.6790523933235544E-6	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999775545685027	WITHOUT_CLASSIFICATION	2.244543149736908E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999663358135535	WITHOUT_CLASSIFICATION	3.366418644644924E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9956467359785295	WITHOUT_CLASSIFICATION	0.004353264021470456	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999820911763427	WITHOUT_CLASSIFICATION	1.7908823657198E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999613970653672	WITHOUT_CLASSIFICATION	3.860293463274434E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.999963205002997	WITHOUT_CLASSIFICATION	3.679499700300521E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999853816066435	WITHOUT_CLASSIFICATION	1.4618393356590525E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9997816712315806	WITHOUT_CLASSIFICATION	2.18328768419443E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999876088254405	WITHOUT_CLASSIFICATION	1.2391174559572806E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999877336319766	WITHOUT_CLASSIFICATION	1.2266368023359452E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999964866488014	WITHOUT_CLASSIFICATION	3.5133511986257463E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9985607241948717	WITHOUT_CLASSIFICATION	0.0014392758051282777	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999262004216949	WITHOUT_CLASSIFICATION	7.379957830508027E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9999000927816983	WITHOUT_CLASSIFICATION	9.990721830158107E-5	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999915246807365	WITHOUT_CLASSIFICATION	8.475319263478538E-6	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999692540623518	WITHOUT_CLASSIFICATION	3.0745937648245707E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999616592694326	WITHOUT_CLASSIFICATION	3.8340730567376637E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999804798666208	WITHOUT_CLASSIFICATION	1.952013337924705E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999750550074683	WITHOUT_CLASSIFICATION	2.4944992531604956E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.999980696913614	WITHOUT_CLASSIFICATION	1.9303086385996133E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999550679446473	WITHOUT_CLASSIFICATION	4.4932055352677834E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998676944137455	WITHOUT_CLASSIFICATION	1.3230558625446675E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999855531272293	WITHOUT_CLASSIFICATION	1.4446872770796598E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9994854890911887	WITHOUT_CLASSIFICATION	5.145109088112056E-4	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9367012793522412	WITHOUT_CLASSIFICATION	0.06329872064775881	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998884614822194	WITHOUT_CLASSIFICATION	1.1153851778063272E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999631479013198	WITHOUT_CLASSIFICATION	3.68520986801579E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999609333265143	WITHOUT_CLASSIFICATION	3.906667348572881E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999888097933533	WITHOUT_CLASSIFICATION	1.1190206646740607E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9985607241948717	WITHOUT_CLASSIFICATION	0.0014392758051282777	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998884614822194	WITHOUT_CLASSIFICATION	1.1153851778063272E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999631479013198	WITHOUT_CLASSIFICATION	3.68520986801579E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.9999888097933533	WITHOUT_CLASSIFICATION	1.1190206646740607E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999589494374825	WITHOUT_CLASSIFICATION	4.1050562517462164E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999845286527862	WITHOUT_CLASSIFICATION	1.5471347213815877E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999583986982958	WITHOUT_CLASSIFICATION	4.1601301704188214E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999910564625973	WITHOUT_CLASSIFICATION	8.943537402630306E-6	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999915187876994	WITHOUT_CLASSIFICATION	8.481212300515462E-6	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9996098046037757	WITHOUT_CLASSIFICATION	3.901953962243149E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999771249941224	WITHOUT_CLASSIFICATION	2.287500587756077E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9998285450299333	WITHOUT_CLASSIFICATION	1.7145497006656018E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.999984250997617	WITHOUT_CLASSIFICATION	1.5749002383044226E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9947323173870039	WITHOUT_CLASSIFICATION	0.00526768261299614	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9992262929914367	WITHOUT_CLASSIFICATION	7.737070085632406E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9992262929914367	WITHOUT_CLASSIFICATION	7.737070085632406E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.999961182312679	WITHOUT_CLASSIFICATION	3.8817687320885656E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999847654747126	WITHOUT_CLASSIFICATION	1.5234525287290465E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999583027246084	WITHOUT_CLASSIFICATION	4.169727539152164E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9996998842667321	WITHOUT_CLASSIFICATION	3.001157332680106E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998877613022947	WITHOUT_CLASSIFICATION	1.1223869770518069E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998867963434586	WITHOUT_CLASSIFICATION	1.1320365654141374E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9745238420931235	WITHOUT_CLASSIFICATION	0.025476157906876608	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999857958412318	WITHOUT_CLASSIFICATION	1.4204158768215561E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999761747474301	WITHOUT_CLASSIFICATION	2.382525256987407E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9998642198008773	WITHOUT_CLASSIFICATION	1.357801991227047E-4	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999689703792333	WITHOUT_CLASSIFICATION	3.1029620766609723E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9999106275833397	WITHOUT_CLASSIFICATION	8.937241666037516E-5	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999647695511604	WITHOUT_CLASSIFICATION	3.523044883950117E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999703143972644	WITHOUT_CLASSIFICATION	2.968560273563636E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9996909828643664	WITHOUT_CLASSIFICATION	3.0901713563352104E-4	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999374351894328	WITHOUT_CLASSIFICATION	6.256481056725055E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.999874275467651	WITHOUT_CLASSIFICATION	1.2572453234898135E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999582602176622	WITHOUT_CLASSIFICATION	4.173978233778675E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9998268215823685	WITHOUT_CLASSIFICATION	1.731784176316632E-4	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9998001511376378	WITHOUT_CLASSIFICATION	1.9984886236218055E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999691187438856	WITHOUT_CLASSIFICATION	3.0881256114427326E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9998723207713572	WITHOUT_CLASSIFICATION	1.2767922864271499E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999344226646094	WITHOUT_CLASSIFICATION	6.55773353905654E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999362997457454	WITHOUT_CLASSIFICATION	6.370025425465501E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.7455750867178467	WITHOUT_CLASSIFICATION	0.25442491328215333	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9997323142740534	WITHOUT_CLASSIFICATION	2.676857259465254E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9998047203903068	WITHOUT_CLASSIFICATION	1.9527960969311262E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999715621330446	WITHOUT_CLASSIFICATION	2.8437866955369387E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9999369789774106	WITHOUT_CLASSIFICATION	6.302102258935693E-5	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999558222146545	WITHOUT_CLASSIFICATION	4.4177785345534936E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999928664573109	WITHOUT_CLASSIFICATION	7.133542689104215E-6	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999806943552951	WITHOUT_CLASSIFICATION	1.9305644704931116E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999732931795308	WITHOUT_CLASSIFICATION	2.6706820469179845E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9997077640777321	WITHOUT_CLASSIFICATION	2.922359222678441E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999234092795071	WITHOUT_CLASSIFICATION	7.659072049282458E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9993541235774828	WITHOUT_CLASSIFICATION	6.458764225172375E-4	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999862018450261	WITHOUT_CLASSIFICATION	1.3798154973980698E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999665399451855	WITHOUT_CLASSIFICATION	3.346005481458356E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9967347341670788	WITHOUT_CLASSIFICATION	0.003265265832921121	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995218859033275	WITHOUT_CLASSIFICATION	4.781140966724819E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9998857839062695	WITHOUT_CLASSIFICATION	1.1421609373063283E-4	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9986060627535549	WITHOUT_CLASSIFICATION	0.0013939372464450929	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.9955829413513496	WITHOUT_CLASSIFICATION	0.0044170586486504595	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9997650654768265	WITHOUT_CLASSIFICATION	2.3493452317355405E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9993721447621925	WITHOUT_CLASSIFICATION	6.278552378074578E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.999877468202735	WITHOUT_CLASSIFICATION	1.225317972650291E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.999860315029918	WITHOUT_CLASSIFICATION	1.3968497008199753E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998191981443159	WITHOUT_CLASSIFICATION	1.8080185568414625E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999314436916822	WITHOUT_CLASSIFICATION	6.855630831777464E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9863542231482493	WITHOUT_CLASSIFICATION	0.013645776851750717	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.999694639598354	WITHOUT_CLASSIFICATION	3.0536040164601773E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9974258115641309	WITHOUT_CLASSIFICATION	0.0025741884358689913	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995398751671968	WITHOUT_CLASSIFICATION	4.6012483280321963E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9997533604603057	WITHOUT_CLASSIFICATION	2.4663953969434764E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9994781268635997	WITHOUT_CLASSIFICATION	5.218731364003342E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9994179572242355	WITHOUT_CLASSIFICATION	5.820427757644388E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9985598811858156	WITHOUT_CLASSIFICATION	0.0014401188141843384	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9985598811858156	WITHOUT_CLASSIFICATION	0.0014401188141843384	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.99951640498238	WITHOUT_CLASSIFICATION	4.835950176199808E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9999231787197587	WITHOUT_CLASSIFICATION	7.682128024129446E-5	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995263764251981	WITHOUT_CLASSIFICATION	4.736235748017997E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.999696657553192	WITHOUT_CLASSIFICATION	3.0334244680796347E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9998571537365092	WITHOUT_CLASSIFICATION	1.4284626349083166E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9998630967275848	WITHOUT_CLASSIFICATION	1.3690327241516477E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9998262542060259	WITHOUT_CLASSIFICATION	1.7374579397403699E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9996296658901704	WITHOUT_CLASSIFICATION	3.7033410982956503E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999844083490234	WITHOUT_CLASSIFICATION	1.559165097664921E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999961439029181	WITHOUT_CLASSIFICATION	3.856097081940982E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998297339671147	WITHOUT_CLASSIFICATION	1.702660328852698E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999363131673187	WITHOUT_CLASSIFICATION	6.368683268131089E-5	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999479593333849	WITHOUT_CLASSIFICATION	5.204066661517101E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998811807409336	WITHOUT_CLASSIFICATION	1.1881925906647201E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999578422714375	WITHOUT_CLASSIFICATION	4.215772856245824E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.999910614582362	WITHOUT_CLASSIFICATION	8.938541763805818E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999594255423735	WITHOUT_CLASSIFICATION	4.057445762658005E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999264370615039	WITHOUT_CLASSIFICATION	7.356293849616729E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9977335092950887	WITHOUT_CLASSIFICATION	0.0022664907049112226	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9986225392125251	WITHOUT_CLASSIFICATION	0.0013774607874749646	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999046135777861	WITHOUT_CLASSIFICATION	9.538642221389751E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999536663002283	WITHOUT_CLASSIFICATION	4.6333699771650434E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9999405280373046	WITHOUT_CLASSIFICATION	5.947196269531904E-5	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9999743218511438	WITHOUT_CLASSIFICATION	2.5678148856197585E-5	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998446714258731	WITHOUT_CLASSIFICATION	1.553285741270178E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9997379827218401	WITHOUT_CLASSIFICATION	2.620172781598587E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999802151313804	WITHOUT_CLASSIFICATION	1.97848686196619E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9998460575202501	WITHOUT_CLASSIFICATION	1.5394247974998947E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.999975194161336	WITHOUT_CLASSIFICATION	2.480583866405669E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9988979898082493	WITHOUT_CLASSIFICATION	0.0011020101917507818	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.9996233425373034	WITHOUT_CLASSIFICATION	3.766574626965306E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.999901953928571	WITHOUT_CLASSIFICATION	9.804607142903093E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999508378763119	WITHOUT_CLASSIFICATION	4.9162123688150435E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999531560317994	WITHOUT_CLASSIFICATION	4.684396820054467E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999508378763119	WITHOUT_CLASSIFICATION	4.9162123688150435E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9998271527150838	WITHOUT_CLASSIFICATION	1.7284728491610891E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990339865515813	WITHOUT_CLASSIFICATION	9.660134484188335E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990339865515813	WITHOUT_CLASSIFICATION	9.660134484188335E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9990339865515813	WITHOUT_CLASSIFICATION	9.660134484188335E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999959186241071	WITHOUT_CLASSIFICATION	4.081375892879261E-6	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999959186241071	WITHOUT_CLASSIFICATION	4.081375892879261E-6	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9993124973661687	WITHOUT_CLASSIFICATION	6.875026338313431E-4	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9998680384223743	WITHOUT_CLASSIFICATION	1.3196157762571125E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9998927398055393	WITHOUT_CLASSIFICATION	1.0726019446081366E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.999978946644327	WITHOUT_CLASSIFICATION	2.105335567306454E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999937958488345	WITHOUT_CLASSIFICATION	6.204151165480407E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999922295340526	WITHOUT_CLASSIFICATION	7.770465947450554E-6	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9996694755812364	WITHOUT_CLASSIFICATION	3.3052441876358876E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999160804833848	WITHOUT_CLASSIFICATION	8.391951661527074E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999339901438177	WITHOUT_CLASSIFICATION	6.600985618234781E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999640537743248	WITHOUT_CLASSIFICATION	3.5946225675064584E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999811942184099	WITHOUT_CLASSIFICATION	1.880578159003324E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9996677451627609	WITHOUT_CLASSIFICATION	3.322548372390757E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999826106358849	WITHOUT_CLASSIFICATION	1.7389364115132555E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.999971382848562	WITHOUT_CLASSIFICATION	2.8617151437896552E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999498705247062	WITHOUT_CLASSIFICATION	5.0129475293875574E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999631800404677	WITHOUT_CLASSIFICATION	3.681995953237077E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998418347608076	WITHOUT_CLASSIFICATION	1.5816523919237404E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999537060133071	WITHOUT_CLASSIFICATION	4.629398669280233E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999537060133071	WITHOUT_CLASSIFICATION	4.629398669280233E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.999957275234331	WITHOUT_CLASSIFICATION	4.272476566894097E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999664452479422	WITHOUT_CLASSIFICATION	3.355475205781005E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999664452479422	WITHOUT_CLASSIFICATION	3.355475205781005E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9997856772456849	WITHOUT_CLASSIFICATION	2.1432275431511384E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999627341198217	WITHOUT_CLASSIFICATION	3.72658801783276E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999864736596665	WITHOUT_CLASSIFICATION	1.352634033350474E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.999953510965908	WITHOUT_CLASSIFICATION	4.648903409200613E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999791654761626	WITHOUT_CLASSIFICATION	2.0834523837366273E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9998188533254555	WITHOUT_CLASSIFICATION	1.8114667454438742E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999616959744999	WITHOUT_CLASSIFICATION	3.830402550005782E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999872286970181	WITHOUT_CLASSIFICATION	1.2771302981923638E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999696916068476	WITHOUT_CLASSIFICATION	3.03083931523714E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.999991875288101	WITHOUT_CLASSIFICATION	8.124711898960787E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999875593848481	WITHOUT_CLASSIFICATION	1.2440615152018314E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999468841185246	WITHOUT_CLASSIFICATION	5.311588147540463E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999935286022754	WITHOUT_CLASSIFICATION	6.471397724563648E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999762271345943	WITHOUT_CLASSIFICATION	2.3772865405667218E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999160804833848	WITHOUT_CLASSIFICATION	8.391951661527074E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999590194097924	WITHOUT_CLASSIFICATION	4.0980590207644684E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.999996573595119	WITHOUT_CLASSIFICATION	3.4264048810917376E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.999996573595119	WITHOUT_CLASSIFICATION	3.4264048810917376E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9998927214253721	WITHOUT_CLASSIFICATION	1.0727857462786512E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9991474179724543	WITHOUT_CLASSIFICATION	8.525820275456986E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9999374876146793	WITHOUT_CLASSIFICATION	6.251238532068587E-5	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9998590560829852	WITHOUT_CLASSIFICATION	1.409439170148055E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999905303686877	WITHOUT_CLASSIFICATION	9.469631312299348E-6	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9999690711278252	WITHOUT_CLASSIFICATION	3.092887217482482E-5	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9995729063145923	WITHOUT_CLASSIFICATION	4.270936854077911E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9890949023313049	WITHOUT_CLASSIFICATION	0.010905097668695117	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9992776068665487	WITHOUT_CLASSIFICATION	7.223931334512479E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9991138110596764	WITHOUT_CLASSIFICATION	8.86188940323693E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.99989933851778	WITHOUT_CLASSIFICATION	1.006614822199422E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9990802821673663	WITHOUT_CLASSIFICATION	9.197178326336823E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9923276857476503	WITHOUT_CLASSIFICATION	0.007672314252349775	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999602914137178	WITHOUT_CLASSIFICATION	3.9708586282215E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.999991751003981	WITHOUT_CLASSIFICATION	8.248996019144695E-6	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9998147035394698	WITHOUT_CLASSIFICATION	1.8529646053025675E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999576994076583	WITHOUT_CLASSIFICATION	4.230059234179284E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999588761160496	WITHOUT_CLASSIFICATION	4.112388395043177E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999920808076391	WITHOUT_CLASSIFICATION	7.919192360872306E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.999828526053142	WITHOUT_CLASSIFICATION	1.7147394685799091E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.9999295436386969	WITHOUT_CLASSIFICATION	7.045636130315588E-5	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9998132130097979	WITHOUT_CLASSIFICATION	1.8678699020217049E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999397409226916	WITHOUT_CLASSIFICATION	6.025907730857315E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999987234796774	WITHOUT_CLASSIFICATION	1.2765203225931384E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9998441621489913	WITHOUT_CLASSIFICATION	1.5583785100877086E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9990664490239063	WITHOUT_CLASSIFICATION	9.335509760938674E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9987317173327477	WITHOUT_CLASSIFICATION	0.0012682826672522347	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999914104221567	WITHOUT_CLASSIFICATION	8.589577843406788E-6	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998274282656093	WITHOUT_CLASSIFICATION	1.7257173439060074E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9996067410421272	WITHOUT_CLASSIFICATION	3.932589578727912E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9996841792214621	WITHOUT_CLASSIFICATION	3.158207785378186E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9997561154367268	WITHOUT_CLASSIFICATION	2.438845632731294E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.94314696718073	WITHOUT_CLASSIFICATION	0.056853032819270066	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999431084955164	WITHOUT_CLASSIFICATION	5.689150448359553E-5	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9987317173327477	WITHOUT_CLASSIFICATION	0.0012682826672522347	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998324803883447	WITHOUT_CLASSIFICATION	1.6751961165522173E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9999431084955164	WITHOUT_CLASSIFICATION	5.689150448359553E-5	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9992565152569608	WITHOUT_CLASSIFICATION	7.434847430392473E-4	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999835813900132	WITHOUT_CLASSIFICATION	1.6418609986825463E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999604956103505	WITHOUT_CLASSIFICATION	3.950438964945293E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9998161078310146	WITHOUT_CLASSIFICATION	1.8389216898527093E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999049173111351	WITHOUT_CLASSIFICATION	9.508268886500537E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998664495352285	WITHOUT_CLASSIFICATION	1.335504647714385E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998664495352285	WITHOUT_CLASSIFICATION	1.335504647714385E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999704986399983	WITHOUT_CLASSIFICATION	2.9501360001704622E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998670715604695	WITHOUT_CLASSIFICATION	1.3292843953060358E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999601188381915	WITHOUT_CLASSIFICATION	3.988116180844581E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999601188381915	WITHOUT_CLASSIFICATION	3.988116180844581E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999862887316705	WITHOUT_CLASSIFICATION	1.3711268329471542E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9998368323416273	WITHOUT_CLASSIFICATION	1.631676583725913E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9998994100994458	WITHOUT_CLASSIFICATION	1.0058990055421099E-4	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9952254053546807	WITHOUT_CLASSIFICATION	0.0047745946453193345	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999590211712927	WITHOUT_CLASSIFICATION	4.0978828707299485E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9997409874385405	WITHOUT_CLASSIFICATION	2.590125614595524E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998675753781844	WITHOUT_CLASSIFICATION	1.3242462181552463E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999705936198702	WITHOUT_CLASSIFICATION	2.940638012987887E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999832132804675	WITHOUT_CLASSIFICATION	1.6786719532566926E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999370948629939	WITHOUT_CLASSIFICATION	6.290513700604873E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9999341739508697	WITHOUT_CLASSIFICATION	6.582604913028292E-5	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999234070704004	WITHOUT_CLASSIFICATION	7.659292959966827E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.9998561902476389	WITHOUT_CLASSIFICATION	1.4380975236104218E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997414544732878	WITHOUT_CLASSIFICATION	2.585455267122986E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.999950364035371	WITHOUT_CLASSIFICATION	4.963596462891327E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9997712300090413	WITHOUT_CLASSIFICATION	2.2876999095879078E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9998973341038305	WITHOUT_CLASSIFICATION	1.0266589616947128E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999786823812141	WITHOUT_CLASSIFICATION	2.1317618785834237E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9988267759709907	WITHOUT_CLASSIFICATION	0.0011732240290092649	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9998227073742273	WITHOUT_CLASSIFICATION	1.7729262577271076E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995582858726639	WITHOUT_CLASSIFICATION	4.41714127336128E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9995582858726639	WITHOUT_CLASSIFICATION	4.41714127336128E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999900192552603	WITHOUT_CLASSIFICATION	9.980744739636472E-6	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.999937287470629	WITHOUT_CLASSIFICATION	6.271252937089986E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997828200142249	WITHOUT_CLASSIFICATION	2.1717998577507495E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.9998257727579533	WITHOUT_CLASSIFICATION	1.7422724204674105E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9999104051014771	WITHOUT_CLASSIFICATION	8.959489852291999E-5	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9999251514473041	WITHOUT_CLASSIFICATION	7.484855269580416E-5	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9997324703777376	WITHOUT_CLASSIFICATION	2.6752962226244233E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9998861707159128	WITHOUT_CLASSIFICATION	1.1382928408719391E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999997762512556	WITHOUT_CLASSIFICATION	2.237487443065471E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999989949513095	WITHOUT_CLASSIFICATION	1.0050486904514011E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999966128008788	WITHOUT_CLASSIFICATION	3.387199121090991E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9997298904422534	WITHOUT_CLASSIFICATION	2.701095577466428E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999857570263159	WITHOUT_CLASSIFICATION	1.424297368413539E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999783969130986	WITHOUT_CLASSIFICATION	2.160308690134432E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999985119158737	WITHOUT_CLASSIFICATION	1.488084126166191E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9996777444510692	WITHOUT_CLASSIFICATION	3.222555489308255E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9993857636418931	WITHOUT_CLASSIFICATION	6.14236358106881E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9977200262779976	WITHOUT_CLASSIFICATION	0.002279973722002278	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999889681661495	WITHOUT_CLASSIFICATION	1.1031833850623618E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9997018918889696	WITHOUT_CLASSIFICATION	2.981081110302958E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9999105270808563	WITHOUT_CLASSIFICATION	8.947291914378535E-5	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999636458634004	WITHOUT_CLASSIFICATION	3.6354136599633146E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999939323583869	WITHOUT_CLASSIFICATION	6.06764161310337E-6	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9992436077327641	WITHOUT_CLASSIFICATION	7.563922672357675E-4	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9924178694138321	WITHOUT_CLASSIFICATION	0.007582130586167912	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999840625153879	WITHOUT_CLASSIFICATION	1.5937484612200365E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999752742026203	WITHOUT_CLASSIFICATION	2.4725797379651102E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999778970014794	WITHOUT_CLASSIFICATION	2.210299852048044E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998113179134288	WITHOUT_CLASSIFICATION	1.8868208657126344E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9997886994316192	WITHOUT_CLASSIFICATION	2.1130056838067923E-4	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999604565956625	WITHOUT_CLASSIFICATION	3.9543404337631055E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999829682598173	WITHOUT_CLASSIFICATION	1.7031740182707478E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.999937208194344	WITHOUT_CLASSIFICATION	6.279180565601776E-5	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999678996117873	WITHOUT_CLASSIFICATION	3.2100388212690184E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999349343245181	WITHOUT_CLASSIFICATION	6.506567548187218E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998502647800628	WITHOUT_CLASSIFICATION	1.4973521993715103E-4	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9996485067402239	WITHOUT_CLASSIFICATION	3.514932597761175E-4	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9983358418075874	WITHOUT_CLASSIFICATION	0.0016641581924125449	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9921119756144066	WITHOUT_CLASSIFICATION	0.007888024385593473	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.999995730875079	WITHOUT_CLASSIFICATION	4.269124921008981E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9987004469140384	WITHOUT_CLASSIFICATION	0.0012995530859616908	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9987004469140384	WITHOUT_CLASSIFICATION	0.0012995530859616908	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999680974320787	WITHOUT_CLASSIFICATION	3.1902567921201325E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.999800260612546	WITHOUT_CLASSIFICATION	1.9973938745394048E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9999489052731806	WITHOUT_CLASSIFICATION	5.109472681933185E-5	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998927332883845	WITHOUT_CLASSIFICATION	1.0726671161555193E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999928554919466	WITHOUT_CLASSIFICATION	7.144508053382902E-6	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9999328025231827	WITHOUT_CLASSIFICATION	6.719747681730213E-5	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999519511756694	WITHOUT_CLASSIFICATION	4.804882433064278E-5	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9984493691851724	WITHOUT_CLASSIFICATION	0.0015506308148277013	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9997656728137964	WITHOUT_CLASSIFICATION	2.343271862036659E-4	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.999956081408471	WITHOUT_CLASSIFICATION	4.3918591528959064E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999665486406222	WITHOUT_CLASSIFICATION	3.345135937781395E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999901963356214	WITHOUT_CLASSIFICATION	9.80366437860222E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999894823698908	WITHOUT_CLASSIFICATION	1.0517630109272134E-5	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999809896239343	WITHOUT_CLASSIFICATION	1.9010376065692925E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999959522290728	WITHOUT_CLASSIFICATION	4.047770927254049E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999990168186396	WITHOUT_CLASSIFICATION	9.83181360404796E-6	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999756266826836	WITHOUT_CLASSIFICATION	2.4373317316393605E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999354790150476	WITHOUT_CLASSIFICATION	6.452098495234763E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999737594817617	WITHOUT_CLASSIFICATION	2.624051823828578E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999305363790643	WITHOUT_CLASSIFICATION	6.946362093576043E-5	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999865182713257	WITHOUT_CLASSIFICATION	1.3481728674338096E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999861411908586	WITHOUT_CLASSIFICATION	1.3858809141331557E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999752886828486	WITHOUT_CLASSIFICATION	2.471131715146902E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999977686954381	WITHOUT_CLASSIFICATION	2.231304561928216E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999853565109433	WITHOUT_CLASSIFICATION	1.4643489056652719E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999984234684877	WITHOUT_CLASSIFICATION	1.5765315123059834E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999866897660898	WITHOUT_CLASSIFICATION	1.331023391017183E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.999958990301541	WITHOUT_CLASSIFICATION	4.100969845895759E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.999969699371792	WITHOUT_CLASSIFICATION	3.0300628207901E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999430945002807	WITHOUT_CLASSIFICATION	5.690549971926458E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999939367307038	WITHOUT_CLASSIFICATION	6.063269296312488E-6	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.999972179339015	WITHOUT_CLASSIFICATION	2.7820660984942356E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999739957491528	WITHOUT_CLASSIFICATION	2.6004250847132607E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9998502647800628	WITHOUT_CLASSIFICATION	1.4973521993715103E-4	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.9998679866231786	WITHOUT_CLASSIFICATION	1.3201337682145416E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999723004958354	WITHOUT_CLASSIFICATION	2.7699504164582932E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999723004958354	WITHOUT_CLASSIFICATION	2.7699504164582932E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999435984672567	WITHOUT_CLASSIFICATION	5.640153274341146E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.999866406052873	WITHOUT_CLASSIFICATION	1.3359394712700472E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999698867441695	WITHOUT_CLASSIFICATION	3.0113255830513208E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.999984226772551	WITHOUT_CLASSIFICATION	1.5773227448898043E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999899702529114	WITHOUT_CLASSIFICATION	1.0029747088614422E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999948955437113	WITHOUT_CLASSIFICATION	5.10445628869268E-6	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999659584285828	WITHOUT_CLASSIFICATION	3.4041571417195E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999766955015452	WITHOUT_CLASSIFICATION	2.330449845477712E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999881395245453	WITHOUT_CLASSIFICATION	1.1860475454746613E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999209056290435	WITHOUT_CLASSIFICATION	7.909437095659286E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999633505852976	WITHOUT_CLASSIFICATION	3.6649414702349054E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999643551124086	WITHOUT_CLASSIFICATION	3.564488759136112E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999961297102874	WITHOUT_CLASSIFICATION	3.870289712604405E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999101314448512	WITHOUT_CLASSIFICATION	8.986855514872513E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9998265984383031	WITHOUT_CLASSIFICATION	1.7340156169690947E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9998133165529203	WITHOUT_CLASSIFICATION	1.8668344707976821E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9998812859131203	WITHOUT_CLASSIFICATION	1.1871408687960945E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9999395794125656	WITHOUT_CLASSIFICATION	6.0420587434489846E-5	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9995971819844919	WITHOUT_CLASSIFICATION	4.028180155081814E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999171805571273	WITHOUT_CLASSIFICATION	8.281944287270922E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999619933470201	WITHOUT_CLASSIFICATION	3.800665297994765E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9999125169117203	WITHOUT_CLASSIFICATION	8.748308827975514E-5	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999875954338819	WITHOUT_CLASSIFICATION	1.2404566117945601E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999233461757017	WITHOUT_CLASSIFICATION	7.66538242982379E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999095784617726	WITHOUT_CLASSIFICATION	9.042153822740132E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.999986213425153	WITHOUT_CLASSIFICATION	1.3786574846899495E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.999928333806354	WITHOUT_CLASSIFICATION	7.166619364586145E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999711145095823	WITHOUT_CLASSIFICATION	2.8885490417654344E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999691673032548	WITHOUT_CLASSIFICATION	3.083269674520761E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.999984250997617	WITHOUT_CLASSIFICATION	1.5749002383044226E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.999984250997617	WITHOUT_CLASSIFICATION	1.5749002383044226E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9999548656610371	WITHOUT_CLASSIFICATION	4.513433896283498E-5	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999405812592672	WITHOUT_CLASSIFICATION	5.941874073285986E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999668132826903	WITHOUT_CLASSIFICATION	3.318671730975129E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999481244090932	WITHOUT_CLASSIFICATION	5.187559090684128E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999233461757017	WITHOUT_CLASSIFICATION	7.66538242982379E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9999095784617726	WITHOUT_CLASSIFICATION	9.042153822740132E-5	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.999986213425153	WITHOUT_CLASSIFICATION	1.3786574846899495E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999711145095823	WITHOUT_CLASSIFICATION	2.8885490417654344E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999296232558801	WITHOUT_CLASSIFICATION	7.037674411995575E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9998715258667026	WITHOUT_CLASSIFICATION	1.2847413329730123E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999721507672668	WITHOUT_CLASSIFICATION	2.784923273328602E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999785730266735	WITHOUT_CLASSIFICATION	2.1426973326546234E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999769844619817	WITHOUT_CLASSIFICATION	2.3015538018419725E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999620667285455	WITHOUT_CLASSIFICATION	3.7933271454471454E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999486787133056	WITHOUT_CLASSIFICATION	5.132128669431209E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998143034108351	WITHOUT_CLASSIFICATION	1.856965891648275E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999708935814939	WITHOUT_CLASSIFICATION	2.9106418506104997E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999882652683587	WITHOUT_CLASSIFICATION	1.173473164115823E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999420198536646	WITHOUT_CLASSIFICATION	5.79801463355406E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999983335301109	WITHOUT_CLASSIFICATION	1.6664698890354845E-6	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9998566028903931	WITHOUT_CLASSIFICATION	1.4339710960690393E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999903548147204	WITHOUT_CLASSIFICATION	9.64518527965186E-6	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999764724059163	WITHOUT_CLASSIFICATION	2.352759408378197E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999954080380649	WITHOUT_CLASSIFICATION	4.591961935116906E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999889747655046	WITHOUT_CLASSIFICATION	1.1025234495367518E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9998414377456581	WITHOUT_CLASSIFICATION	1.5856225434177822E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9997068646678287	WITHOUT_CLASSIFICATION	2.9313533217140955E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999481244090932	WITHOUT_CLASSIFICATION	5.187559090684128E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9998715258667026	WITHOUT_CLASSIFICATION	1.2847413329730123E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999721507672668	WITHOUT_CLASSIFICATION	2.784923273328602E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999769844619817	WITHOUT_CLASSIFICATION	2.3015538018419725E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999620667285455	WITHOUT_CLASSIFICATION	3.7933271454471454E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999486787133056	WITHOUT_CLASSIFICATION	5.132128669431209E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998143034108351	WITHOUT_CLASSIFICATION	1.856965891648275E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999594002822976	WITHOUT_CLASSIFICATION	4.0599717702415234E-5	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.992585496020466	WITHOUT_CLASSIFICATION	0.007414503979533916	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999599470855272	WITHOUT_CLASSIFICATION	4.005291447288304E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999861025433003	WITHOUT_CLASSIFICATION	1.3897456699781584E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9997314944649366	WITHOUT_CLASSIFICATION	2.6850553506343815E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9997314944649366	WITHOUT_CLASSIFICATION	2.6850553506343815E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999341633694602	WITHOUT_CLASSIFICATION	6.583663053987125E-5	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999151119040725	WITHOUT_CLASSIFICATION	8.488809592747192E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999711948779405	WITHOUT_CLASSIFICATION	2.8805122059475174E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999732666759422	WITHOUT_CLASSIFICATION	2.673332405782496E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.999997620160811	WITHOUT_CLASSIFICATION	2.3798391890270176E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9998579487623793	WITHOUT_CLASSIFICATION	1.420512376206535E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999901908353235	WITHOUT_CLASSIFICATION	9.809164676618296E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999647610876896	WITHOUT_CLASSIFICATION	3.5238912310332006E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9999283086856102	WITHOUT_CLASSIFICATION	7.169131438976054E-5	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9997089349175335	WITHOUT_CLASSIFICATION	2.910650824664261E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9996899389805486	WITHOUT_CLASSIFICATION	3.1006101945139084E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999550779902592	WITHOUT_CLASSIFICATION	4.4922009740866636E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997543954431886	WITHOUT_CLASSIFICATION	2.456045568113518E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998557329446085	WITHOUT_CLASSIFICATION	1.4426705539151264E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999802571532723	WITHOUT_CLASSIFICATION	1.974284672758926E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9998882143936899	WITHOUT_CLASSIFICATION	1.1178560631010029E-4	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999527541829105	WITHOUT_CLASSIFICATION	4.724581708945677E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999667909187774	WITHOUT_CLASSIFICATION	3.320908122262941E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9997629056714925	WITHOUT_CLASSIFICATION	2.3709432850746876E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999996732444886	WITHOUT_CLASSIFICATION	3.2675551147853853E-7	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9982519763988116	WITHOUT_CLASSIFICATION	0.0017480236011884667	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.999970536847277	WITHOUT_CLASSIFICATION	2.946315272305032E-5	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9999643742259972	WITHOUT_CLASSIFICATION	3.562577400289823E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999925724380477	WITHOUT_CLASSIFICATION	7.4275619522714485E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999628090450706	WITHOUT_CLASSIFICATION	3.7190954929311245E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9996182558145145	WITHOUT_CLASSIFICATION	3.8174418548546493E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999925724380477	WITHOUT_CLASSIFICATION	7.4275619522714485E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9998557329446085	WITHOUT_CLASSIFICATION	1.4426705539151264E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999446528008167	WITHOUT_CLASSIFICATION	5.5347199183451156E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998669343682053	WITHOUT_CLASSIFICATION	1.33065631794777E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999830396390794	WITHOUT_CLASSIFICATION	1.6960360920530553E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9989046044812083	WITHOUT_CLASSIFICATION	0.0010953955187916202	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999972015546513	WITHOUT_CLASSIFICATION	2.7984453486037146E-6	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999708620352233	WITHOUT_CLASSIFICATION	2.9137964776737777E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9998799799396446	WITHOUT_CLASSIFICATION	1.2002006035537394E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999939605930992	WITHOUT_CLASSIFICATION	6.039406900817546E-6	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9293837451361728	WITHOUT_CLASSIFICATION	0.07061625486382714	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9987774920339372	WITHOUT_CLASSIFICATION	0.0012225079660628582	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9989873956538765	WITHOUT_CLASSIFICATION	0.001012604346123468	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999647680239764	WITHOUT_CLASSIFICATION	3.523197602371977E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9996116204486192	WITHOUT_CLASSIFICATION	3.8837955138084685E-4	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999494255677619	WITHOUT_CLASSIFICATION	5.0574432238162486E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9998969447616297	WITHOUT_CLASSIFICATION	1.0305523837023018E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9996483411975533	WITHOUT_CLASSIFICATION	3.5165880244669755E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9998446004056116	WITHOUT_CLASSIFICATION	1.5539959438830794E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9987432000803658	WITHOUT_CLASSIFICATION	0.0012567999196343067	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999147640141	WITHOUT_CLASSIFICATION	8.523598602844405E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.999895913028479	WITHOUT_CLASSIFICATION	1.040869715210258E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999977484053122	WITHOUT_CLASSIFICATION	2.251594687801959E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9995937994906513	WITHOUT_CLASSIFICATION	4.062005093486596E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9998702188334967	WITHOUT_CLASSIFICATION	1.2978116650340252E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999862660685191	WITHOUT_CLASSIFICATION	1.3733931480853527E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999982402345247	WITHOUT_CLASSIFICATION	1.759765475390704E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9997670691772185	WITHOUT_CLASSIFICATION	2.3293082278154462E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9986055397657089	WITHOUT_CLASSIFICATION	0.0013944602342911242	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999529346197281	WITHOUT_CLASSIFICATION	4.706538027197505E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999303216614186	WITHOUT_CLASSIFICATION	6.96783385814076E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9999058889324963	WITHOUT_CLASSIFICATION	9.411106750363047E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9997543954431886	WITHOUT_CLASSIFICATION	2.456045568113518E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999193714980438	WITHOUT_CLASSIFICATION	8.062850195620584E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993267694735002	WITHOUT_CLASSIFICATION	6.732305264998256E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999602235990087	WITHOUT_CLASSIFICATION	3.977640099130245E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999066387051663	WITHOUT_CLASSIFICATION	9.336129483372134E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999066387051663	WITHOUT_CLASSIFICATION	9.336129483372134E-5	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9999327236826407	WITHOUT_CLASSIFICATION	6.727631735925624E-5	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999929033796289	WITHOUT_CLASSIFICATION	7.096620371178248E-6	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999762161666508	WITHOUT_CLASSIFICATION	2.3783833349198827E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999645501006779	WITHOUT_CLASSIFICATION	3.5449899322148346E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9994405749818627	WITHOUT_CLASSIFICATION	5.594250181373517E-4	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9999406545822341	WITHOUT_CLASSIFICATION	5.934541776584411E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9997900433097987	WITHOUT_CLASSIFICATION	2.0995669020123454E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999798074906913	WITHOUT_CLASSIFICATION	2.0192509308753045E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9994657244425029	WITHOUT_CLASSIFICATION	5.342755574970207E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999564784488649	WITHOUT_CLASSIFICATION	4.3521551135017905E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997880444166385	WITHOUT_CLASSIFICATION	2.1195558336156855E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999438483492534	WITHOUT_CLASSIFICATION	5.615165074661052E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998751086565203	WITHOUT_CLASSIFICATION	1.2489134347975448E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9999319097942814	WITHOUT_CLASSIFICATION	6.809020571860492E-5	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999884421197084	WITHOUT_CLASSIFICATION	1.1557880291683582E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999884421197084	WITHOUT_CLASSIFICATION	1.1557880291683582E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998069284769316	WITHOUT_CLASSIFICATION	1.9307152306834873E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9998069284769316	WITHOUT_CLASSIFICATION	1.9307152306834873E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999955654084832	WITHOUT_CLASSIFICATION	4.434591516756262E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9980840219111342	WITHOUT_CLASSIFICATION	0.0019159780888658635	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999095239534698	WITHOUT_CLASSIFICATION	9.047604653021813E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999974932031499	WITHOUT_CLASSIFICATION	2.50679685011752E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9996374627412203	WITHOUT_CLASSIFICATION	3.6253725877960735E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999349405315894	WITHOUT_CLASSIFICATION	6.505946841059655E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999899403853324	WITHOUT_CLASSIFICATION	1.0059614667644643E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999438483492534	WITHOUT_CLASSIFICATION	5.615165074661052E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998751086565203	WITHOUT_CLASSIFICATION	1.2489134347975448E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9996424156796924	WITHOUT_CLASSIFICATION	3.575843203076834E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999709789568836	WITHOUT_CLASSIFICATION	2.9021043116420728E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.995814932168297	WITHOUT_CLASSIFICATION	0.004185067831702948	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9990731559725808	WITHOUT_CLASSIFICATION	9.268440274190542E-4	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999885019032132	WITHOUT_CLASSIFICATION	1.1498096786913286E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9975798251085211	WITHOUT_CLASSIFICATION	0.0024201748914788592	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999191010938149	WITHOUT_CLASSIFICATION	8.089890618517728E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999191010938149	WITHOUT_CLASSIFICATION	8.089890618517728E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999846777394453	WITHOUT_CLASSIFICATION	1.5322260554660977E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999908378343477	WITHOUT_CLASSIFICATION	9.162165652341224E-6	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999270857337345	WITHOUT_CLASSIFICATION	7.291426626553645E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9986727747524725	WITHOUT_CLASSIFICATION	0.0013272252475274528	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998734242349553	WITHOUT_CLASSIFICATION	1.265757650446552E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9973251811427374	WITHOUT_CLASSIFICATION	0.002674818857262687	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9999766982327838	WITHOUT_CLASSIFICATION	2.3301767216278276E-5	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.999977486585298	WITHOUT_CLASSIFICATION	2.2513414702068183E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9996366255123176	WITHOUT_CLASSIFICATION	3.6337448768244165E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999970436787612	WITHOUT_CLASSIFICATION	2.9563212387862682E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999970194342951	WITHOUT_CLASSIFICATION	2.980565704921278E-6	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9998759060773689	WITHOUT_CLASSIFICATION	1.2409392263116253E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999835776263692	WITHOUT_CLASSIFICATION	1.6422373630784003E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9998708340039598	WITHOUT_CLASSIFICATION	1.2916599604029884E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999747241623657	WITHOUT_CLASSIFICATION	2.5275837634411517E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.999977817007621	WITHOUT_CLASSIFICATION	2.2182992378931044E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999641408026987	WITHOUT_CLASSIFICATION	3.585919730128422E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9997612879110833	WITHOUT_CLASSIFICATION	2.3871208891668128E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9989079394996911	WITHOUT_CLASSIFICATION	0.001092060500308858	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.999963017271087	WITHOUT_CLASSIFICATION	3.6982728912985817E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9875440067642579	WITHOUT_CLASSIFICATION	0.01245599323574211	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998829770275296	WITHOUT_CLASSIFICATION	1.1702297247041894E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9996463943461338	WITHOUT_CLASSIFICATION	3.536056538662356E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.999907901574601	WITHOUT_CLASSIFICATION	9.20984253991133E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9999527832663889	WITHOUT_CLASSIFICATION	4.721673361109877E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9997720785362519	WITHOUT_CLASSIFICATION	2.279214637479746E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9996643998052022	WITHOUT_CLASSIFICATION	3.3560019479775407E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998773897623164	WITHOUT_CLASSIFICATION	1.226102376834526E-4	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9997754597238897	WITHOUT_CLASSIFICATION	2.2454027611016415E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999692282554562	WITHOUT_CLASSIFICATION	3.077174454380526E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999600863467434	WITHOUT_CLASSIFICATION	3.991365325659624E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9998754437646735	WITHOUT_CLASSIFICATION	1.245562353265645E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993267694735002	WITHOUT_CLASSIFICATION	6.732305264998256E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9998773897623164	WITHOUT_CLASSIFICATION	1.226102376834526E-4	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999872962517948	WITHOUT_CLASSIFICATION	1.2703748205088245E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997538598616525	WITHOUT_CLASSIFICATION	2.4614013834742265E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9992100984272472	WITHOUT_CLASSIFICATION	7.899015727528452E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9989896788851192	WITHOUT_CLASSIFICATION	0.0010103211148807347	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9989896788851192	WITHOUT_CLASSIFICATION	0.0010103211148807347	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999970366985722	WITHOUT_CLASSIFICATION	2.9633014277368046E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999950963613404	WITHOUT_CLASSIFICATION	4.903638659469265E-6	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9999622198089319	WITHOUT_CLASSIFICATION	3.7780191068138817E-5	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.999998590284027	WITHOUT_CLASSIFICATION	1.4097159730070931E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.999880103237454	WITHOUT_CLASSIFICATION	1.1989676254600516E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9998381380298338	WITHOUT_CLASSIFICATION	1.618619701662309E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999961449408014	WITHOUT_CLASSIFICATION	3.855059198578907E-6	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9981791502527463	WITHOUT_CLASSIFICATION	0.0018208497472537396	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999388669976303	WITHOUT_CLASSIFICATION	6.113300236963357E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999388669976303	WITHOUT_CLASSIFICATION	6.113300236963357E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999732030171722	WITHOUT_CLASSIFICATION	2.6796982827764305E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9998977633471179	WITHOUT_CLASSIFICATION	1.0223665288205204E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999927439654206	WITHOUT_CLASSIFICATION	7.256034579409168E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999464164516014	WITHOUT_CLASSIFICATION	5.3583548398698114E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9998199152169238	WITHOUT_CLASSIFICATION	1.8008478307610679E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999755173597173	WITHOUT_CLASSIFICATION	2.448264028272417E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.999999088101455	WITHOUT_CLASSIFICATION	9.118985450490186E-7	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999930279156504	WITHOUT_CLASSIFICATION	6.972084349583364E-6	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999810014700173	WITHOUT_CLASSIFICATION	1.8998529982613215E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9890325163885682	WITHOUT_CLASSIFICATION	0.010967483611431891	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999800813870355	WITHOUT_CLASSIFICATION	1.9918612964480217E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999773928841803	WITHOUT_CLASSIFICATION	2.2607115819686272E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999607451430376	WITHOUT_CLASSIFICATION	3.925485696234831E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998793437998507	WITHOUT_CLASSIFICATION	1.2065620014930982E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998793437998507	WITHOUT_CLASSIFICATION	1.2065620014930982E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998192446097147	WITHOUT_CLASSIFICATION	1.8075539028522748E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9998143034108351	WITHOUT_CLASSIFICATION	1.856965891648275E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9890325163885682	WITHOUT_CLASSIFICATION	0.010967483611431891	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999846431436047	WITHOUT_CLASSIFICATION	1.5356856395296814E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9997207494480738	WITHOUT_CLASSIFICATION	2.7925055192620405E-4	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999778561768858	WITHOUT_CLASSIFICATION	2.214382311420597E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999242962083932	WITHOUT_CLASSIFICATION	7.570379160684913E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9996737083441133	WITHOUT_CLASSIFICATION	3.2629165588669016E-4	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999304458485816	WITHOUT_CLASSIFICATION	6.955415141839284E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999668298323638	WITHOUT_CLASSIFICATION	3.317016763611029E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9993267694735002	WITHOUT_CLASSIFICATION	6.732305264998256E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999498705247062	WITHOUT_CLASSIFICATION	5.0129475293875574E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9995403152984775	WITHOUT_CLASSIFICATION	4.596847015224727E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9998074603619832	WITHOUT_CLASSIFICATION	1.9253963801683487E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999796990278046	WITHOUT_CLASSIFICATION	2.0300972195517177E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999724871794003	WITHOUT_CLASSIFICATION	2.7512820599629975E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999906056510778	WITHOUT_CLASSIFICATION	9.394348922181821E-6	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9998013022660377	WITHOUT_CLASSIFICATION	1.986977339622369E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9998593860994178	WITHOUT_CLASSIFICATION	1.40613900582172E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9993076057238962	WITHOUT_CLASSIFICATION	6.923942761038369E-4	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9994487090280673	WITHOUT_CLASSIFICATION	5.512909719326999E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999270103217656	WITHOUT_CLASSIFICATION	7.298967823438504E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998369558910682	WITHOUT_CLASSIFICATION	1.630441089317145E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9995607483452521	WITHOUT_CLASSIFICATION	4.3925165474797094E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.6916369626582254	WITHOUT_CLASSIFICATION	0.3083630373417746	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9956813792755287	WITHOUT_CLASSIFICATION	0.0043186207244713315	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9999698916786691	WITHOUT_CLASSIFICATION	3.0108321330900487E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999838850159761	WITHOUT_CLASSIFICATION	1.611498402389084E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999832585599367	WITHOUT_CLASSIFICATION	1.6741440063317432E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9993321165722007	WITHOUT_CLASSIFICATION	6.678834277994222E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999352266370996	WITHOUT_CLASSIFICATION	6.477336290044651E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999889144263631	WITHOUT_CLASSIFICATION	1.108557363691537E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999728584672972	WITHOUT_CLASSIFICATION	2.7141532702826603E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999970366985722	WITHOUT_CLASSIFICATION	2.9633014277368046E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9999192044975055	WITHOUT_CLASSIFICATION	8.079550249447256E-5	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9998819557391908	WITHOUT_CLASSIFICATION	1.1804426080925541E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999848475558224	WITHOUT_CLASSIFICATION	1.515244417766003E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9966369565925413	WITHOUT_CLASSIFICATION	0.003363043407458743	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9984951159266798	WITHOUT_CLASSIFICATION	0.0015048840733201578	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9977657319287703	WITHOUT_CLASSIFICATION	0.0022342680712297805	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999896241404417	WITHOUT_CLASSIFICATION	1.037585955826803E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9991509475058301	WITHOUT_CLASSIFICATION	8.490524941699235E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999966161372454	WITHOUT_CLASSIFICATION	3.3838627546300927E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999318708062299	WITHOUT_CLASSIFICATION	6.812919377008625E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996211403794648	WITHOUT_CLASSIFICATION	3.788596205352069E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999472190514683	WITHOUT_CLASSIFICATION	5.278094853175482E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999809509320887	WITHOUT_CLASSIFICATION	1.9049067911261284E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997986102776305	WITHOUT_CLASSIFICATION	2.0138972236946815E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999989869631427	WITHOUT_CLASSIFICATION	1.013036857194068E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.99876727135996	WITHOUT_CLASSIFICATION	0.0012327286400400357	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9998289283836066	WITHOUT_CLASSIFICATION	1.7107161639351808E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9699648213813002	WITHOUT_CLASSIFICATION	0.03003517861869973	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.999656845270489	WITHOUT_CLASSIFICATION	3.431547295108576E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9984768177699422	WITHOUT_CLASSIFICATION	0.001523182230057844	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9983596492841307	WITHOUT_CLASSIFICATION	0.001640350715869351	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9955994131848082	WITHOUT_CLASSIFICATION	0.00440058681519185	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999976887282095	WITHOUT_CLASSIFICATION	2.3112717904715133E-6	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999925527145839	WITHOUT_CLASSIFICATION	7.447285416149764E-6	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998385756292498	WITHOUT_CLASSIFICATION	1.6142437075018535E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998385756292498	WITHOUT_CLASSIFICATION	1.6142437075018535E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998385756292498	WITHOUT_CLASSIFICATION	1.6142437075018535E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9999309765759676	WITHOUT_CLASSIFICATION	6.902342403231542E-5	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9998922468418484	WITHOUT_CLASSIFICATION	1.0775315815157827E-4	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999517614842537	WITHOUT_CLASSIFICATION	4.823851574630869E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998611596190626	WITHOUT_CLASSIFICATION	1.3884038093737013E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9998611596190626	WITHOUT_CLASSIFICATION	1.3884038093737013E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9995031104268266	WITHOUT_CLASSIFICATION	4.968895731734533E-4	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9997966877777371	WITHOUT_CLASSIFICATION	2.0331222226293398E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.999960743563442	WITHOUT_CLASSIFICATION	3.9256436558072276E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999767326954402	WITHOUT_CLASSIFICATION	2.3267304559822036E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999459663440027	WITHOUT_CLASSIFICATION	5.403365599734146E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9999045034699934	WITHOUT_CLASSIFICATION	9.549653000665698E-5	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9999182608661755	WITHOUT_CLASSIFICATION	8.173913382450389E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.9999198924206507	WITHOUT_CLASSIFICATION	8.010757934929518E-5	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999926176810179	WITHOUT_CLASSIFICATION	7.382318982096575E-6	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999578806377415	WITHOUT_CLASSIFICATION	4.211936225848078E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999578806377415	WITHOUT_CLASSIFICATION	4.211936225848078E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999634940301939	WITHOUT_CLASSIFICATION	3.6505969806031004E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9994523268581909	WITHOUT_CLASSIFICATION	5.476731418090577E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.999960963704014	WITHOUT_CLASSIFICATION	3.9036295986005525E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999178222806188	WITHOUT_CLASSIFICATION	8.217771938122638E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.999840511701173	WITHOUT_CLASSIFICATION	1.5948829882692206E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999963259720942	WITHOUT_CLASSIFICATION	3.674027905879003E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999072314322142	WITHOUT_CLASSIFICATION	9.276856778580049E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999104102662878	WITHOUT_CLASSIFICATION	8.958973371218484E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9997845872481297	WITHOUT_CLASSIFICATION	2.1541275187033967E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998728062136844	WITHOUT_CLASSIFICATION	1.2719378631568636E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9990901529981081	WITHOUT_CLASSIFICATION	9.098470018918487E-4	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9999370449228292	WITHOUT_CLASSIFICATION	6.295507717074814E-5	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9999858094655744	WITHOUT_CLASSIFICATION	1.4190534425506932E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9997093335776109	WITHOUT_CLASSIFICATION	2.906664223889968E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9999327770116639	WITHOUT_CLASSIFICATION	6.722298833600504E-5	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9999390566062188	WITHOUT_CLASSIFICATION	6.094339378117168E-5	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9993455887051303	WITHOUT_CLASSIFICATION	6.544112948695575E-4	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999728109699875	WITHOUT_CLASSIFICATION	2.718903001253554E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9998552302901444	WITHOUT_CLASSIFICATION	1.447697098555383E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.999797194073118	WITHOUT_CLASSIFICATION	2.02805926882019E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9999431512451286	WITHOUT_CLASSIFICATION	5.6848754871503984E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9999028783920267	WITHOUT_CLASSIFICATION	9.712160797328343E-5	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999569155341209	WITHOUT_CLASSIFICATION	4.308446587903916E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9995353417236692	WITHOUT_CLASSIFICATION	4.6465827633078953E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9998369702479567	WITHOUT_CLASSIFICATION	1.6302975204319546E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999572229927405	WITHOUT_CLASSIFICATION	4.2777007259501526E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999451622884992	WITHOUT_CLASSIFICATION	5.4837711500935334E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.999957370394476	WITHOUT_CLASSIFICATION	4.2629605524026755E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9998830516814428	WITHOUT_CLASSIFICATION	1.169483185572164E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999886758393931	WITHOUT_CLASSIFICATION	1.1324160606772014E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9999483840679415	WITHOUT_CLASSIFICATION	5.1615932058446496E-5	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999533206685849	WITHOUT_CLASSIFICATION	4.667933141500599E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999045672467461	WITHOUT_CLASSIFICATION	9.543275325384071E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.99916189768405	WITHOUT_CLASSIFICATION	8.381023159500894E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999447499253307	WITHOUT_CLASSIFICATION	5.5250074669419364E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999200466009385	WITHOUT_CLASSIFICATION	7.995339906146582E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999416367102146	WITHOUT_CLASSIFICATION	5.836328978526995E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.99992756120354	WITHOUT_CLASSIFICATION	7.243879646006058E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999702371048227	WITHOUT_CLASSIFICATION	2.9762895177233556E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999647776333147	WITHOUT_CLASSIFICATION	3.522236668518919E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9999016330673194	WITHOUT_CLASSIFICATION	9.836693268062037E-5	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999741325039998	WITHOUT_CLASSIFICATION	2.5867496000241664E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999762567481298	WITHOUT_CLASSIFICATION	2.3743251870100707E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9998078366568223	WITHOUT_CLASSIFICATION	1.921633431777036E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999604889757957	WITHOUT_CLASSIFICATION	3.951102420425647E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999404209438754	WITHOUT_CLASSIFICATION	5.9579056124677924E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.99999067821769	WITHOUT_CLASSIFICATION	9.321782310002554E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999733225861699	WITHOUT_CLASSIFICATION	2.6677413830098704E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999517948639662	WITHOUT_CLASSIFICATION	4.820513603369786E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999686931852009	WITHOUT_CLASSIFICATION	3.130681479917779E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9999637562118929	WITHOUT_CLASSIFICATION	3.6243788107138196E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9993831521655849	WITHOUT_CLASSIFICATION	6.168478344151283E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999571972613569	WITHOUT_CLASSIFICATION	4.280273864312466E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999925003329403	WITHOUT_CLASSIFICATION	7.4996670596836085E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999925003329403	WITHOUT_CLASSIFICATION	7.4996670596836085E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9998090167519976	WITHOUT_CLASSIFICATION	1.9098324800243506E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9997959249682763	WITHOUT_CLASSIFICATION	2.0407503172366077E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9911694132000992	WITHOUT_CLASSIFICATION	0.008830586799900713	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9890821162267105	WITHOUT_CLASSIFICATION	0.01091788377328952	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.999922175260258	WITHOUT_CLASSIFICATION	7.782473974211685E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9998235138940591	WITHOUT_CLASSIFICATION	1.7648610594094818E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9998202714309009	WITHOUT_CLASSIFICATION	1.797285690991239E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999775475400736	WITHOUT_CLASSIFICATION	2.245245992633483E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999581090492483	WITHOUT_CLASSIFICATION	4.189095075171461E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9996813297865748	WITHOUT_CLASSIFICATION	3.186702134252888E-4	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999739306782951	WITHOUT_CLASSIFICATION	2.606932170490215E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999685108165239	WITHOUT_CLASSIFICATION	3.148918347607033E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999866714996574	WITHOUT_CLASSIFICATION	1.3328500342671449E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9998496897407515	WITHOUT_CLASSIFICATION	1.5031025924855252E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999349708653644	WITHOUT_CLASSIFICATION	6.502913463550244E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.999903649568547	WITHOUT_CLASSIFICATION	9.63504314529517E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999885938610523	WITHOUT_CLASSIFICATION	1.140613894769427E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999312003703139	WITHOUT_CLASSIFICATION	6.879962968605142E-5	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9997299394583297	WITHOUT_CLASSIFICATION	2.7006054167038257E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999715592394132	WITHOUT_CLASSIFICATION	2.8440760586945092E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9998596190140312	WITHOUT_CLASSIFICATION	1.403809859687225E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999885938610523	WITHOUT_CLASSIFICATION	1.140613894769427E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9694222960530505	WITHOUT_CLASSIFICATION	0.03057770394694946	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9694222960530505	WITHOUT_CLASSIFICATION	0.03057770394694946	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9999213275003827	WITHOUT_CLASSIFICATION	7.867249961735081E-5	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998626453327167	WITHOUT_CLASSIFICATION	1.373546672832382E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9998846350064716	WITHOUT_CLASSIFICATION	1.153649935283607E-4	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999634564671959	WITHOUT_CLASSIFICATION	3.6543532804232644E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999884147919688	WITHOUT_CLASSIFICATION	1.1585208031350567E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.8061842341589739	WITHOUT_CLASSIFICATION	0.19381576584102606	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9987598383510037	WITHOUT_CLASSIFICATION	0.0012401616489963034	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9855902102952063	WITHOUT_CLASSIFICATION	0.014409789704793795	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999584919918593	WITHOUT_CLASSIFICATION	4.150800814076068E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9998100272557372	WITHOUT_CLASSIFICATION	1.8997274426282116E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9996884518475737	WITHOUT_CLASSIFICATION	3.1154815242620824E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9998488340483457	WITHOUT_CLASSIFICATION	1.5116595165434745E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9999333420499341	WITHOUT_CLASSIFICATION	6.665795006585132E-5	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.999875078454386	WITHOUT_CLASSIFICATION	1.2492154561407736E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990082038445278	WITHOUT_CLASSIFICATION	9.91796155472209E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999155881294031	WITHOUT_CLASSIFICATION	8.44118705968791E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988784244203702	WITHOUT_CLASSIFICATION	0.0011215755796298423	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999585362765852	WITHOUT_CLASSIFICATION	4.146372341485502E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999707742505958	WITHOUT_CLASSIFICATION	2.922574940426834E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999587044554284	WITHOUT_CLASSIFICATION	4.12955445715725E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999711865749615	WITHOUT_CLASSIFICATION	2.881342503850318E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.9999295087480113	WITHOUT_CLASSIFICATION	7.049125198869572E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.9999288620260492	WITHOUT_CLASSIFICATION	7.113797395071037E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999294291617152	WITHOUT_CLASSIFICATION	7.05708382847401E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999288636620502	WITHOUT_CLASSIFICATION	7.113633794970357E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999587909280508	WITHOUT_CLASSIFICATION	4.120907194918302E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9916745631785193	WITHOUT_CLASSIFICATION	0.008325436821480719	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9974051986707007	WITHOUT_CLASSIFICATION	0.0025948013292992154	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9910452593167176	WITHOUT_CLASSIFICATION	0.008954740683282388	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.998839807134204	WITHOUT_CLASSIFICATION	0.0011601928657960017	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9988505843180533	WITHOUT_CLASSIFICATION	0.0011494156819467452	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9988505843180533	WITHOUT_CLASSIFICATION	0.0011494156819467452	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9998352420300153	WITHOUT_CLASSIFICATION	1.6475796998469038E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9868509827236537	WITHOUT_CLASSIFICATION	0.013149017276346306	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9974262160353611	WITHOUT_CLASSIFICATION	0.002573783964638854	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9921627118144002	WITHOUT_CLASSIFICATION	0.007837288185599797	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998629680439965	WITHOUT_CLASSIFICATION	1.3703195600341643E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9977850873538541	WITHOUT_CLASSIFICATION	0.0022149126461458676	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9974262160353611	WITHOUT_CLASSIFICATION	0.002573783964638854	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9942164978973199	WITHOUT_CLASSIFICATION	0.005783502102680036	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9997537741791963	WITHOUT_CLASSIFICATION	2.4622582080362107E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998886427972973	WITHOUT_CLASSIFICATION	1.1135720270267355E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.99992987894021	WITHOUT_CLASSIFICATION	7.012105978988457E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999888080219747	WITHOUT_CLASSIFICATION	1.1191978025408448E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999629200659822	WITHOUT_CLASSIFICATION	3.7079934017845646E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999629200659822	WITHOUT_CLASSIFICATION	3.7079934017845646E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.999840583786741	WITHOUT_CLASSIFICATION	1.594162132590271E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.996801306521261	WITHOUT_CLASSIFICATION	0.003198693478739087	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9991976186900468	WITHOUT_CLASSIFICATION	8.023813099532494E-4	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9992587402580394	WITHOUT_CLASSIFICATION	7.412597419605275E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9994173419348316	WITHOUT_CLASSIFICATION	5.826580651685041E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9999345477956356	WITHOUT_CLASSIFICATION	6.545220436442848E-5	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9802914442637378	WITHOUT_CLASSIFICATION	0.019708555736262096	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9992417899847227	WITHOUT_CLASSIFICATION	7.582100152772446E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9967974055969212	WITHOUT_CLASSIFICATION	0.0032025944030786677	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9998003842918319	WITHOUT_CLASSIFICATION	1.9961570816801516E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999580661145825	WITHOUT_CLASSIFICATION	4.193388541756556E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9990681511464132	WITHOUT_CLASSIFICATION	9.31848853586747E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.998652931163461	WITHOUT_CLASSIFICATION	0.0013470688365390688	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999845378695111	WITHOUT_CLASSIFICATION	1.5462130488872758E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9995009530919877	WITHOUT_CLASSIFICATION	4.990469080123504E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9999173398706119	WITHOUT_CLASSIFICATION	8.26601293880409E-5	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999415487697703	WITHOUT_CLASSIFICATION	5.8451230229797615E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9998012417910969	WITHOUT_CLASSIFICATION	1.9875820890316242E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9591576829915017	WITHOUT_CLASSIFICATION	0.04084231700849833	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9995036579707753	WITHOUT_CLASSIFICATION	4.963420292247576E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9591576829915017	WITHOUT_CLASSIFICATION	0.04084231700849833	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.999603248034162	WITHOUT_CLASSIFICATION	3.967519658380449E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9995036579707753	WITHOUT_CLASSIFICATION	4.963420292247576E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.7845788966345819	WITHOUT_CLASSIFICATION	0.21542110336541817	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9996792185786735	WITHOUT_CLASSIFICATION	3.207814213265176E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.999240936907993	WITHOUT_CLASSIFICATION	7.590630920069739E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.999856436857867	WITHOUT_CLASSIFICATION	1.4356314213298096E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999522756954066	WITHOUT_CLASSIFICATION	4.772430459348139E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999155881294031	WITHOUT_CLASSIFICATION	8.44118705968791E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999585362765852	WITHOUT_CLASSIFICATION	4.146372341485502E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999707742505958	WITHOUT_CLASSIFICATION	2.922574940426834E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999587044554284	WITHOUT_CLASSIFICATION	4.12955445715725E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.999711865749615	WITHOUT_CLASSIFICATION	2.881342503850318E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999285857432856	WITHOUT_CLASSIFICATION	7.14142567144222E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.9999294855741165	WITHOUT_CLASSIFICATION	7.051442588350484E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9999294291617152	WITHOUT_CLASSIFICATION	7.05708382847401E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9998318913743697	WITHOUT_CLASSIFICATION	1.6810862563043676E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9988505843180533	WITHOUT_CLASSIFICATION	0.0011494156819467452	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9988505843180533	WITHOUT_CLASSIFICATION	0.0011494156819467452	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9974262160353611	WITHOUT_CLASSIFICATION	0.002573783964638854	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998629680439965	WITHOUT_CLASSIFICATION	1.3703195600341643E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9977850873538541	WITHOUT_CLASSIFICATION	0.0022149126461458676	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9974262160353611	WITHOUT_CLASSIFICATION	0.002573783964638854	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9942164978973199	WITHOUT_CLASSIFICATION	0.005783502102680036	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9998621883121728	WITHOUT_CLASSIFICATION	1.3781168782717906E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999756531186323	WITHOUT_CLASSIFICATION	2.4346881367587332E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9976007732254715	WITHOUT_CLASSIFICATION	0.002399226774528461	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9973498008723886	WITHOUT_CLASSIFICATION	0.002650199127611362	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9990277517198785	WITHOUT_CLASSIFICATION	9.72248280121697E-4	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998843047474932	WITHOUT_CLASSIFICATION	1.156952525067635E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9959427073315383	WITHOUT_CLASSIFICATION	0.004057292668461621	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998886427972973	WITHOUT_CLASSIFICATION	1.1135720270267355E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999629200659822	WITHOUT_CLASSIFICATION	3.7079934017845646E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999629200659822	WITHOUT_CLASSIFICATION	3.7079934017845646E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.990927005945059	WITHOUT_CLASSIFICATION	0.009072994054941034	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9991105271776699	WITHOUT_CLASSIFICATION	8.894728223300207E-4	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998907618146776	WITHOUT_CLASSIFICATION	1.092381853222854E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.99992987894021	WITHOUT_CLASSIFICATION	7.012105978988457E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9983461338784471	WITHOUT_CLASSIFICATION	0.0016538661215529655	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9998838876292752	WITHOUT_CLASSIFICATION	1.1611237072488047E-4	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9979778292917286	WITHOUT_CLASSIFICATION	0.0020221707082713437	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.999956109776145	WITHOUT_CLASSIFICATION	4.389022385503808E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999604057818341	WITHOUT_CLASSIFICATION	3.959421816593401E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999837340045327	WITHOUT_CLASSIFICATION	1.6265995467359918E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9984548898889107	WITHOUT_CLASSIFICATION	0.00154511011108919	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9996801157001256	WITHOUT_CLASSIFICATION	3.1988429987433537E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999237069810301	WITHOUT_CLASSIFICATION	7.629301897004751E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999652447900076	WITHOUT_CLASSIFICATION	3.475520999249981E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999736403898294	WITHOUT_CLASSIFICATION	2.6359610170666976E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999736403898294	WITHOUT_CLASSIFICATION	2.6359610170666976E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.999985751662189	WITHOUT_CLASSIFICATION	1.424833781100827E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9997387546948302	WITHOUT_CLASSIFICATION	2.6124530516981505E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9999467042962322	WITHOUT_CLASSIFICATION	5.329570376773632E-5	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9998033996018737	WITHOUT_CLASSIFICATION	1.9660039812635573E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999876611080407	WITHOUT_CLASSIFICATION	1.2338891959254845E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999794711575613	WITHOUT_CLASSIFICATION	2.052884243870659E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999876611080407	WITHOUT_CLASSIFICATION	1.2338891959254845E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.999983123563299	WITHOUT_CLASSIFICATION	1.6876436700974474E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9966637295926929	WITHOUT_CLASSIFICATION	0.0033362704073070554	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9986778796515828	WITHOUT_CLASSIFICATION	0.0013221203484171718	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9996289177148183	WITHOUT_CLASSIFICATION	3.710822851815845E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9996289177148183	WITHOUT_CLASSIFICATION	3.710822851815845E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999846136945757	WITHOUT_CLASSIFICATION	1.538630542435166E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999458600607731	WITHOUT_CLASSIFICATION	5.4139939226986744E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999439282200498	WITHOUT_CLASSIFICATION	5.607177995012584E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.7654993540399488	WITHOUT_CLASSIFICATION	0.23450064596005116	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9999744720939568	WITHOUT_CLASSIFICATION	2.5527906043077263E-5	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997294261823845	WITHOUT_CLASSIFICATION	2.7057381761560204E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9997294261823845	WITHOUT_CLASSIFICATION	2.7057381761560204E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996348631440105	WITHOUT_CLASSIFICATION	3.6513685598949663E-4	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999880635280894	WITHOUT_CLASSIFICATION	1.1936471910566345E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999880635280894	WITHOUT_CLASSIFICATION	1.1936471910566345E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9998878590090867	WITHOUT_CLASSIFICATION	1.1214099091338133E-4	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999858526126806	WITHOUT_CLASSIFICATION	1.4147387319417697E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.9999360594838969	WITHOUT_CLASSIFICATION	6.394051610311915E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9995430448286644	WITHOUT_CLASSIFICATION	4.569551713356249E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9996964388603385	WITHOUT_CLASSIFICATION	3.0356113966145974E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999876611080407	WITHOUT_CLASSIFICATION	1.2338891959254845E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9997083763432457	WITHOUT_CLASSIFICATION	2.916236567542264E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999969697233899	WITHOUT_CLASSIFICATION	3.0302766101333498E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9990639771623914	WITHOUT_CLASSIFICATION	9.360228376086328E-4	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9997084427046098	WITHOUT_CLASSIFICATION	2.915572953902938E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999977495549338	WITHOUT_CLASSIFICATION	2.2504450661309876E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9999984785645226	WITHOUT_CLASSIFICATION	1.5214354773234082E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999764764627085	WITHOUT_CLASSIFICATION	2.3523537291466264E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9998436608683753	WITHOUT_CLASSIFICATION	1.5633913162479968E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9999686463120004	WITHOUT_CLASSIFICATION	3.1353687999468726E-5	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.999939751484142	WITHOUT_CLASSIFICATION	6.0248515857963445E-5	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999778175092736	WITHOUT_CLASSIFICATION	2.2182490726398985E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999973241712059	WITHOUT_CLASSIFICATION	2.675828794086869E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9994153922904524	WITHOUT_CLASSIFICATION	5.846077095476674E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999257972104688	WITHOUT_CLASSIFICATION	7.420278953120985E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.997929508956252	WITHOUT_CLASSIFICATION	0.002070491043747907	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9997950226597304	WITHOUT_CLASSIFICATION	2.0497734026957718E-4	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9994729472366451	WITHOUT_CLASSIFICATION	5.270527633549406E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9989193190882475	WITHOUT_CLASSIFICATION	0.00108068091175255	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999660408524402	WITHOUT_CLASSIFICATION	3.3959147559692544E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999985755437237	WITHOUT_CLASSIFICATION	1.424456276295641E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.9999849227025778	WITHOUT_CLASSIFICATION	1.5077297422155331E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.993204588300272	WITHOUT_CLASSIFICATION	0.006795411699727962	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999780297267761	WITHOUT_CLASSIFICATION	2.197027322390459E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9997616696284252	WITHOUT_CLASSIFICATION	2.3833037157479885E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998565232652109	WITHOUT_CLASSIFICATION	1.434767347890346E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999869699805707	WITHOUT_CLASSIFICATION	1.3030019429446742E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9999024550239078	WITHOUT_CLASSIFICATION	9.754497609215724E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9997089421142074	WITHOUT_CLASSIFICATION	2.910578857926669E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9991214452206406	WITHOUT_CLASSIFICATION	8.785547793593671E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999387265197464	WITHOUT_CLASSIFICATION	6.127348025360653E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999537820283783	WITHOUT_CLASSIFICATION	4.621797162178686E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999891257514101	WITHOUT_CLASSIFICATION	1.0874248589915965E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999597229914802	WITHOUT_CLASSIFICATION	4.02770085198648E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999774121852075	WITHOUT_CLASSIFICATION	2.258781479248496E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998399188904344	WITHOUT_CLASSIFICATION	1.6008110956552418E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998438577838045	WITHOUT_CLASSIFICATION	1.561422161956314E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999828520558277	WITHOUT_CLASSIFICATION	1.7147944172219063E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999960840166761	WITHOUT_CLASSIFICATION	3.915983323951981E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999853841911776	WITHOUT_CLASSIFICATION	1.461580882250187E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9997230937785817	WITHOUT_CLASSIFICATION	2.7690622141827564E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.999924061334999	WITHOUT_CLASSIFICATION	7.593866500102254E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996211403794648	WITHOUT_CLASSIFICATION	3.788596205352069E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999472190514683	WITHOUT_CLASSIFICATION	5.278094853175482E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9999434147368678	WITHOUT_CLASSIFICATION	5.6585263132201244E-5	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9999575880129611	WITHOUT_CLASSIFICATION	4.2411987038799765E-5	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.989429102085909	WITHOUT_CLASSIFICATION	0.010570897914091075	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999815126387472	WITHOUT_CLASSIFICATION	1.8487361252800407E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999815126387472	WITHOUT_CLASSIFICATION	1.8487361252800407E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999803676218711	WITHOUT_CLASSIFICATION	1.963237812879579E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999803676218711	WITHOUT_CLASSIFICATION	1.963237812879579E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999803676218711	WITHOUT_CLASSIFICATION	1.963237812879579E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999820405017359	WITHOUT_CLASSIFICATION	1.7959498264131433E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999820405017359	WITHOUT_CLASSIFICATION	1.7959498264131433E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999054511100367	WITHOUT_CLASSIFICATION	9.454888996326392E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999054511100367	WITHOUT_CLASSIFICATION	9.454888996326392E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9994172115089464	WITHOUT_CLASSIFICATION	5.827884910536922E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9987195137130157	WITHOUT_CLASSIFICATION	0.0012804862869842954	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999723314141526	WITHOUT_CLASSIFICATION	2.766858584731829E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999723314141526	WITHOUT_CLASSIFICATION	2.766858584731829E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9992863864608955	WITHOUT_CLASSIFICATION	7.136135391045249E-4	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999236003018851	WITHOUT_CLASSIFICATION	7.639969811486724E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9992761961871918	WITHOUT_CLASSIFICATION	7.238038128083669E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.999943714071561	WITHOUT_CLASSIFICATION	5.628592843887456E-5	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9991843399151742	WITHOUT_CLASSIFICATION	8.156600848258218E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999606219607383	WITHOUT_CLASSIFICATION	3.937803926162038E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999954466227706	WITHOUT_CLASSIFICATION	4.55337722939453E-6	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999499533880143	WITHOUT_CLASSIFICATION	5.004661198568597E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9998902507759744	WITHOUT_CLASSIFICATION	1.0974922402563774E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999925003329403	WITHOUT_CLASSIFICATION	7.4996670596836085E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9996792735067433	WITHOUT_CLASSIFICATION	3.207264932566474E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.999970010470159	WITHOUT_CLASSIFICATION	2.9989529841075037E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9995353295998587	WITHOUT_CLASSIFICATION	4.6467040014132186E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999675649862233	WITHOUT_CLASSIFICATION	3.243501377659798E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999490616581138	WITHOUT_CLASSIFICATION	5.0938341886078095E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.99997309835103	WITHOUT_CLASSIFICATION	2.6901648969992137E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9999410279078941	WITHOUT_CLASSIFICATION	5.897209210579829E-5	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9997586177158538	WITHOUT_CLASSIFICATION	2.4138228414614723E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999916930399628	WITHOUT_CLASSIFICATION	8.306960037084313E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998915236346101	WITHOUT_CLASSIFICATION	1.0847636538988497E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998915236346101	WITHOUT_CLASSIFICATION	1.0847636538988497E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998915236346101	WITHOUT_CLASSIFICATION	1.0847636538988497E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998535560108337	WITHOUT_CLASSIFICATION	1.464439891663466E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998535560108337	WITHOUT_CLASSIFICATION	1.464439891663466E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998535560108337	WITHOUT_CLASSIFICATION	1.464439891663466E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998535560108337	WITHOUT_CLASSIFICATION	1.464439891663466E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998535560108337	WITHOUT_CLASSIFICATION	1.464439891663466E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9998348012075028	WITHOUT_CLASSIFICATION	1.6519879249716248E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9991932527930494	WITHOUT_CLASSIFICATION	8.067472069505466E-4	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999945196537048	WITHOUT_CLASSIFICATION	5.480346295163977E-6	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999798660253839	WITHOUT_CLASSIFICATION	2.013397461617931E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9998469411200325	WITHOUT_CLASSIFICATION	1.5305887996749947E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999010031440397	WITHOUT_CLASSIFICATION	9.899685596028304E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9988913985507681	WITHOUT_CLASSIFICATION	0.001108601449231832	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9999753280341197	WITHOUT_CLASSIFICATION	2.4671965880400846E-5	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999883681116835	WITHOUT_CLASSIFICATION	1.1631888316667838E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999890817590723	WITHOUT_CLASSIFICATION	1.0918240927664449E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999627786239647	WITHOUT_CLASSIFICATION	3.722137603536847E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999694491954181	WITHOUT_CLASSIFICATION	3.0550804581876374E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9187959826085902	WITHOUT_CLASSIFICATION	0.08120401739140984	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.999872465122971	WITHOUT_CLASSIFICATION	1.2753487702891103E-4	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9998217138184884	WITHOUT_CLASSIFICATION	1.78286181511667E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999500434319766	WITHOUT_CLASSIFICATION	4.995656802345083E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9998972120279824	WITHOUT_CLASSIFICATION	1.0278797201765142E-4	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999398462010889	WITHOUT_CLASSIFICATION	6.015379891104036E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999794711575613	WITHOUT_CLASSIFICATION	2.052884243870659E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9982710327503319	WITHOUT_CLASSIFICATION	0.0017289672496681064	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9989375021825506	WITHOUT_CLASSIFICATION	0.0010624978174494446	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9997919051588151	WITHOUT_CLASSIFICATION	2.0809484118493413E-4	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999664997401645	WITHOUT_CLASSIFICATION	3.350025983542597E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999637547392689	WITHOUT_CLASSIFICATION	3.624526073110737E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999074300089325	WITHOUT_CLASSIFICATION	9.256999106751057E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9999420555278504	WITHOUT_CLASSIFICATION	5.794447214957836E-5	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999671778871937	WITHOUT_CLASSIFICATION	3.282211280625734E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999241351041782	WITHOUT_CLASSIFICATION	7.58648958218273E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9999484857198389	WITHOUT_CLASSIFICATION	5.151428016113672E-5	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999662783474199	WITHOUT_CLASSIFICATION	3.372165258003624E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999181348527377	WITHOUT_CLASSIFICATION	8.18651472623363E-5	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.999976971482801	WITHOUT_CLASSIFICATION	2.3028517199073222E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999874091583292	WITHOUT_CLASSIFICATION	1.2590841670745916E-5	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.999842778442216	WITHOUT_CLASSIFICATION	1.5722155778403427E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999144549418211	WITHOUT_CLASSIFICATION	8.554505817892276E-5	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999514931145158	WITHOUT_CLASSIFICATION	4.850688548406957E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996633862718123	WITHOUT_CLASSIFICATION	3.366137281876603E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9999595038834403	WITHOUT_CLASSIFICATION	4.049611655973124E-5	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.999999301212666	WITHOUT_CLASSIFICATION	6.98787333987598E-7	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996236854885936	WITHOUT_CLASSIFICATION	3.7631451140640436E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9996236854885936	WITHOUT_CLASSIFICATION	3.7631451140640436E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999673901300262	WITHOUT_CLASSIFICATION	3.2609869973869256E-5	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9999673901300262	WITHOUT_CLASSIFICATION	3.2609869973869256E-5	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999883634178624	WITHOUT_CLASSIFICATION	1.1636582137593447E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.999883634178624	WITHOUT_CLASSIFICATION	1.1636582137593447E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999131985771195	WITHOUT_CLASSIFICATION	8.680142288055432E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999656177175882	WITHOUT_CLASSIFICATION	3.438228241178651E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999862140856347	WITHOUT_CLASSIFICATION	1.3785914365152684E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9999842360364742	WITHOUT_CLASSIFICATION	1.5763963525735494E-5	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999667829977583	WITHOUT_CLASSIFICATION	3.32170022417869E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9988442641726988	WITHOUT_CLASSIFICATION	0.0011557358273012578	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999186216164517	WITHOUT_CLASSIFICATION	8.13783835483185E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999853876858261	WITHOUT_CLASSIFICATION	1.4612314173974918E-5	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9998793618638873	WITHOUT_CLASSIFICATION	1.2063813611276305E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.999887001295767	WITHOUT_CLASSIFICATION	1.1299870423306186E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9999827206098377	WITHOUT_CLASSIFICATION	1.727939016222787E-5	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999639167985425	WITHOUT_CLASSIFICATION	3.608320145744663E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.999454781559645	WITHOUT_CLASSIFICATION	5.452184403551178E-4	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9999787403410564	WITHOUT_CLASSIFICATION	2.125965894364029E-5	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9987833906733599	WITHOUT_CLASSIFICATION	0.0012166093266400854	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9998810412697954	WITHOUT_CLASSIFICATION	1.189587302045911E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999264813606331	WITHOUT_CLASSIFICATION	7.351863936688144E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9997684495416548	WITHOUT_CLASSIFICATION	2.3155045834534192E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9998420274866057	WITHOUT_CLASSIFICATION	1.5797251339425616E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9985814337210421	WITHOUT_CLASSIFICATION	0.0014185662789579054	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999572963785094	WITHOUT_CLASSIFICATION	4.2703621490536634E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999645864628485	WITHOUT_CLASSIFICATION	3.541353715154065E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999627951776929	WITHOUT_CLASSIFICATION	3.7204822307052764E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999842253510397	WITHOUT_CLASSIFICATION	1.577464896023881E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999722790427099	WITHOUT_CLASSIFICATION	2.772095729003749E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999722790427099	WITHOUT_CLASSIFICATION	2.772095729003749E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999257972104688	WITHOUT_CLASSIFICATION	7.420278953120985E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999257972104688	WITHOUT_CLASSIFICATION	7.420278953120985E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999965638796557	WITHOUT_CLASSIFICATION	3.436120344328458E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9987168265016606	WITHOUT_CLASSIFICATION	0.0012831734983393872	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999170671107078	WITHOUT_CLASSIFICATION	8.293288929223001E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999145038491377	WITHOUT_CLASSIFICATION	8.549615086232442E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9998831331447466	WITHOUT_CLASSIFICATION	1.1686685525332225E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999722790427099	WITHOUT_CLASSIFICATION	2.772095729003749E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999722790427099	WITHOUT_CLASSIFICATION	2.772095729003749E-5	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9999722790427099	WITHOUT_CLASSIFICATION	2.772095729003749E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999257972104688	WITHOUT_CLASSIFICATION	7.420278953120985E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999257972104688	WITHOUT_CLASSIFICATION	7.420278953120985E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9999370896006529	WITHOUT_CLASSIFICATION	6.29103993472125E-5	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999795565104657	WITHOUT_CLASSIFICATION	2.0443489534383964E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999739158546823	WITHOUT_CLASSIFICATION	2.6084145317762194E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9951160125133658	WITHOUT_CLASSIFICATION	0.004883987486634183	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999972958737331	WITHOUT_CLASSIFICATION	2.7041262669060924E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999654232170809	WITHOUT_CLASSIFICATION	3.457678291903721E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999717339799951	WITHOUT_CLASSIFICATION	2.826602000497494E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9998884997401782	WITHOUT_CLASSIFICATION	1.1150025982166124E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999936450183381	WITHOUT_CLASSIFICATION	6.354981661947126E-6	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.999982442313798	WITHOUT_CLASSIFICATION	1.7557686202055967E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999367481591978	WITHOUT_CLASSIFICATION	6.325184080228807E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999476335251237	WITHOUT_CLASSIFICATION	5.236647487629312E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999852056018749	WITHOUT_CLASSIFICATION	1.4794398125207587E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9998270081340288	WITHOUT_CLASSIFICATION	1.7299186597122872E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9999127169223647	WITHOUT_CLASSIFICATION	8.728307763530306E-5	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9952678082024163	WITHOUT_CLASSIFICATION	0.004732191797583705	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999623670401838	WITHOUT_CLASSIFICATION	3.763295981608194E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999623670401838	WITHOUT_CLASSIFICATION	3.763295981608194E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999623670401838	WITHOUT_CLASSIFICATION	3.763295981608194E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.997147526576054	WITHOUT_CLASSIFICATION	0.0028524734239460136	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.997147526576054	WITHOUT_CLASSIFICATION	0.0028524734239460136	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.999989295856873	WITHOUT_CLASSIFICATION	1.0704143126896666E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9998782281826043	WITHOUT_CLASSIFICATION	1.2177181739572937E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9998860896350923	WITHOUT_CLASSIFICATION	1.1391036490771858E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.999886092456537	WITHOUT_CLASSIFICATION	1.1390754346298163E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999316389278176	WITHOUT_CLASSIFICATION	6.836107218247941E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998459043965571	WITHOUT_CLASSIFICATION	1.540956034430451E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9999198078303709	WITHOUT_CLASSIFICATION	8.019216962898727E-5	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9999198098167171	WITHOUT_CLASSIFICATION	8.019018328292641E-5	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.999951874890577	WITHOUT_CLASSIFICATION	4.812510942293991E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.999939844711023	WITHOUT_CLASSIFICATION	6.015528897691809E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999738690786464	WITHOUT_CLASSIFICATION	2.6130921353632723E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999733698925872	WITHOUT_CLASSIFICATION	2.6630107412791332E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999352319228153	WITHOUT_CLASSIFICATION	6.476807718464365E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999576295121427	WITHOUT_CLASSIFICATION	4.2370487857336156E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999187819640687	WITHOUT_CLASSIFICATION	8.121803593134637E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999437059970021	WITHOUT_CLASSIFICATION	5.629400299795639E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998380698895317	WITHOUT_CLASSIFICATION	1.6193011046836174E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9998146584936801	WITHOUT_CLASSIFICATION	1.853415063198649E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9998842927039167	WITHOUT_CLASSIFICATION	1.1570729608334582E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9903207555400407	WITHOUT_CLASSIFICATION	0.009679244459959328	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999361030183196	WITHOUT_CLASSIFICATION	6.389698168045692E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999552385338619	WITHOUT_CLASSIFICATION	4.4761466137956034E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999714780536378	WITHOUT_CLASSIFICATION	2.852194636223113E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999702270373437	WITHOUT_CLASSIFICATION	2.977296265627627E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999578177650633	WITHOUT_CLASSIFICATION	4.218223493660051E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999905767979971	WITHOUT_CLASSIFICATION	9.423202002941282E-6	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9998301647828252	WITHOUT_CLASSIFICATION	1.6983521717471903E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.997126327432558	WITHOUT_CLASSIFICATION	0.0028736725674419197	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9998762611381761	WITHOUT_CLASSIFICATION	1.2373886182388724E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9996417650784915	WITHOUT_CLASSIFICATION	3.582349215086338E-4	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9997729107853048	WITHOUT_CLASSIFICATION	2.2708921469515958E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9989956682182646	WITHOUT_CLASSIFICATION	0.0010043317817354245	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9997274279274367	WITHOUT_CLASSIFICATION	2.725720725633059E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999509770799668	WITHOUT_CLASSIFICATION	4.902292003315831E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999600889006961	WITHOUT_CLASSIFICATION	3.991109930383555E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9998435081261714	WITHOUT_CLASSIFICATION	1.564918738285775E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.996243445121259	WITHOUT_CLASSIFICATION	0.003756554878741089	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9998948234458773	WITHOUT_CLASSIFICATION	1.0517655412267531E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9965190585699404	WITHOUT_CLASSIFICATION	0.003480941430059672	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9991829271400808	WITHOUT_CLASSIFICATION	8.170728599191232E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9991562090965088	WITHOUT_CLASSIFICATION	8.437909034911698E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999486984600028	WITHOUT_CLASSIFICATION	5.130153999720056E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9993022658035461	WITHOUT_CLASSIFICATION	6.977341964538377E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9995306421055444	WITHOUT_CLASSIFICATION	4.693578944555079E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9995306421055444	WITHOUT_CLASSIFICATION	4.693578944555079E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9991041293117281	WITHOUT_CLASSIFICATION	8.958706882719492E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9999086468130951	WITHOUT_CLASSIFICATION	9.135318690495155E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9992997238507184	WITHOUT_CLASSIFICATION	7.002761492816391E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9991899069947892	WITHOUT_CLASSIFICATION	8.100930052108079E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9997246824925272	WITHOUT_CLASSIFICATION	2.7531750747276457E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9999278636304246	WITHOUT_CLASSIFICATION	7.213636957546562E-5	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.999976068217013	WITHOUT_CLASSIFICATION	2.39317829869817E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999740946584537	WITHOUT_CLASSIFICATION	2.5905341546323494E-5	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999876128172507	WITHOUT_CLASSIFICATION	1.2387182749285079E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999335338304266	WITHOUT_CLASSIFICATION	6.646616957339886E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999616349906556	WITHOUT_CLASSIFICATION	3.836500934445391E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999616349906556	WITHOUT_CLASSIFICATION	3.836500934445391E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999616349906556	WITHOUT_CLASSIFICATION	3.836500934445391E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999616349906556	WITHOUT_CLASSIFICATION	3.836500934445391E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999776145551782	WITHOUT_CLASSIFICATION	2.2385444821839593E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.999993678438051	WITHOUT_CLASSIFICATION	6.321561949029817E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999947482692624	WITHOUT_CLASSIFICATION	5.251730737594982E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9998011967980134	WITHOUT_CLASSIFICATION	1.9880320198666928E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9994217052450793	WITHOUT_CLASSIFICATION	5.782947549207493E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.9989854818869242	WITHOUT_CLASSIFICATION	0.0010145181130758612	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.999906388815876	WITHOUT_CLASSIFICATION	9.361118412392456E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999835428511541	WITHOUT_CLASSIFICATION	1.645714884588559E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999835428511541	WITHOUT_CLASSIFICATION	1.645714884588559E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9999910906007325	WITHOUT_CLASSIFICATION	8.909399267525765E-6	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.999936576398285	WITHOUT_CLASSIFICATION	6.342360171505953E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9997635950461158	WITHOUT_CLASSIFICATION	2.364049538842559E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9956878270779248	WITHOUT_CLASSIFICATION	0.004312172922075222	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9956878270779248	WITHOUT_CLASSIFICATION	0.004312172922075222	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9993987179675651	WITHOUT_CLASSIFICATION	6.012820324349447E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999889658290659	WITHOUT_CLASSIFICATION	1.1034170933962038E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999889658290659	WITHOUT_CLASSIFICATION	1.1034170933962038E-5	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9994949922639856	WITHOUT_CLASSIFICATION	5.050077360143285E-4	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999997781771509	WITHOUT_CLASSIFICATION	2.2182284916336578E-7	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999991327195097	WITHOUT_CLASSIFICATION	8.672804901870891E-7	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9990066998068065	WITHOUT_CLASSIFICATION	9.93300193193438E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9994357985516445	WITHOUT_CLASSIFICATION	5.642014483555186E-4	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999992431764816	WITHOUT_CLASSIFICATION	7.568235185609958E-7	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9914054330915812	WITHOUT_CLASSIFICATION	0.008594566908418672	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999962628743724	WITHOUT_CLASSIFICATION	3.7371256277277666E-6	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999736065114619	WITHOUT_CLASSIFICATION	2.6393488538131925E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999879059995213	WITHOUT_CLASSIFICATION	1.20940004787341E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9926561227706595	WITHOUT_CLASSIFICATION	0.00734387722934041	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.996583798829529	WITHOUT_CLASSIFICATION	0.0034162011704709115	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.9999922399884895	WITHOUT_CLASSIFICATION	7.760011510518638E-6	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9988497231578637	WITHOUT_CLASSIFICATION	0.0011502768421362997	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9998018765085307	WITHOUT_CLASSIFICATION	1.9812349146937572E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999518237380302	WITHOUT_CLASSIFICATION	4.8176261969875095E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.999854356702613	WITHOUT_CLASSIFICATION	1.4564329738705667E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9998164132482699	WITHOUT_CLASSIFICATION	1.835867517301568E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9977949544900212	WITHOUT_CLASSIFICATION	0.0022050455099788136	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9982275248052455	WITHOUT_CLASSIFICATION	0.00177247519475451	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9989629733115069	WITHOUT_CLASSIFICATION	0.001037026688493132	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998854236948184	WITHOUT_CLASSIFICATION	1.1457630518170037E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9537669516682334	WITHOUT_CLASSIFICATION	0.046233048331766585	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999732982735823	WITHOUT_CLASSIFICATION	2.6701726417639054E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999336968390271	WITHOUT_CLASSIFICATION	6.630316097289767E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9999551975337443	WITHOUT_CLASSIFICATION	4.480246625576213E-5	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9998502768465564	WITHOUT_CLASSIFICATION	1.4972315344368475E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9991396676201487	WITHOUT_CLASSIFICATION	8.603323798513283E-4	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9999231623612006	WITHOUT_CLASSIFICATION	7.683763879945307E-5	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.8469984482380368	DEFECT	0.15300155176196317	WITHOUT_CLASSIFICATION
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9994507008413032	WITHOUT_CLASSIFICATION	5.49299158696891E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999041467362909	WITHOUT_CLASSIFICATION	9.585326370910649E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9997831436148069	WITHOUT_CLASSIFICATION	2.1685638519305646E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999550951859426	WITHOUT_CLASSIFICATION	4.490481405742972E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9997032030892364	WITHOUT_CLASSIFICATION	2.9679691076355306E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9997831436148069	WITHOUT_CLASSIFICATION	2.1685638519305646E-4	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999550951859426	WITHOUT_CLASSIFICATION	4.490481405742972E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.999911869811674	WITHOUT_CLASSIFICATION	8.813018832605142E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999487138428237	WITHOUT_CLASSIFICATION	5.128615717642241E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999487138428237	WITHOUT_CLASSIFICATION	5.128615717642241E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998005203817614	WITHOUT_CLASSIFICATION	1.9947961823859703E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9975404849188936	WITHOUT_CLASSIFICATION	0.0024595150811064204	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999836242640001	WITHOUT_CLASSIFICATION	1.6375735999889294E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999830982188262	WITHOUT_CLASSIFICATION	1.6901781173783672E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9958331106451003	WITHOUT_CLASSIFICATION	0.004166889354899654	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9994474750712852	WITHOUT_CLASSIFICATION	5.52524928714801E-4	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9998916953840076	WITHOUT_CLASSIFICATION	1.0830461599238209E-4	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9998937154423326	WITHOUT_CLASSIFICATION	1.0628455766733294E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999664873243597	WITHOUT_CLASSIFICATION	3.351267564037359E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998120420939335	WITHOUT_CLASSIFICATION	1.8795790606637112E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9995609582021585	WITHOUT_CLASSIFICATION	4.3904179784157014E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9999071021885066	WITHOUT_CLASSIFICATION	9.289781149329035E-5	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9998458505896363	WITHOUT_CLASSIFICATION	1.5414941036368698E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999766225156977	WITHOUT_CLASSIFICATION	2.3377484302244765E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999766225156977	WITHOUT_CLASSIFICATION	2.3377484302244765E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999008181680537	WITHOUT_CLASSIFICATION	9.918183194634122E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999008181680537	WITHOUT_CLASSIFICATION	9.918183194634122E-5	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9999247895585939	WITHOUT_CLASSIFICATION	7.52104414062344E-5	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998720611091434	WITHOUT_CLASSIFICATION	1.2793889085657082E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999233015307885	WITHOUT_CLASSIFICATION	7.669846921147266E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999836242640001	WITHOUT_CLASSIFICATION	1.6375735999889294E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999830982188262	WITHOUT_CLASSIFICATION	1.6901781173783672E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999664873243597	WITHOUT_CLASSIFICATION	3.351267564037359E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9998120420939335	WITHOUT_CLASSIFICATION	1.8795790606637112E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.999930169418049	WITHOUT_CLASSIFICATION	6.983058195097623E-5	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.9999217441266021	WITHOUT_CLASSIFICATION	7.825587339795216E-5	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999719665358735	WITHOUT_CLASSIFICATION	2.8033464126493986E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998890121574769	WITHOUT_CLASSIFICATION	1.10987842523009E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.999966830703553	WITHOUT_CLASSIFICATION	3.3169296447009275E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9998098698480721	WITHOUT_CLASSIFICATION	1.9013015192795906E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999575391283929	WITHOUT_CLASSIFICATION	4.246087160711214E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.999938016431361	WITHOUT_CLASSIFICATION	6.198356863896532E-5	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.9999224114100894	WITHOUT_CLASSIFICATION	7.758858991054708E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9973704837888199	WITHOUT_CLASSIFICATION	0.0026295162111801646	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9999199281699102	WITHOUT_CLASSIFICATION	8.007183008983472E-5	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999952572242352	WITHOUT_CLASSIFICATION	4.742775764817425E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9999023425646628	WITHOUT_CLASSIFICATION	9.76574353371488E-5	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999950087321523	WITHOUT_CLASSIFICATION	4.991267847696887E-6	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999925400167352	WITHOUT_CLASSIFICATION	7.459983264825908E-6	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9998955004403215	WITHOUT_CLASSIFICATION	1.0449955967851347E-4	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9995601682389923	WITHOUT_CLASSIFICATION	4.3983176100770814E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998675277758642	WITHOUT_CLASSIFICATION	1.3247222413585038E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999345305959804	WITHOUT_CLASSIFICATION	6.5469404019561E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999345305959804	WITHOUT_CLASSIFICATION	6.5469404019561E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999345305959804	WITHOUT_CLASSIFICATION	6.5469404019561E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9993240174172058	WITHOUT_CLASSIFICATION	6.7598258279411E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999928256032579	WITHOUT_CLASSIFICATION	7.174396742042948E-6	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997180814357003	WITHOUT_CLASSIFICATION	2.819185642997927E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9997180814357003	WITHOUT_CLASSIFICATION	2.819185642997927E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9996935606473488	WITHOUT_CLASSIFICATION	3.064393526512499E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999882213291917	WITHOUT_CLASSIFICATION	1.177867080831447E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999682464547831	WITHOUT_CLASSIFICATION	3.175354521695367E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9996768375602834	WITHOUT_CLASSIFICATION	3.2316243971663674E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998592600038183	WITHOUT_CLASSIFICATION	1.407399961817814E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9987070624271408	WITHOUT_CLASSIFICATION	0.0012929375728591367	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998950546031306	WITHOUT_CLASSIFICATION	1.0494539686941589E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9997777406720131	WITHOUT_CLASSIFICATION	2.2225932798691154E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.999822114945027	WITHOUT_CLASSIFICATION	1.7788505497288903E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998556444940204	WITHOUT_CLASSIFICATION	1.443555059796055E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.999829829058777	WITHOUT_CLASSIFICATION	1.7017094122294315E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9999689420157659	WITHOUT_CLASSIFICATION	3.105798423415041E-5	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9998231030236495	WITHOUT_CLASSIFICATION	1.7689697635040494E-4	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999951364504336	WITHOUT_CLASSIFICATION	4.86354956637237E-6	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999778081229098	WITHOUT_CLASSIFICATION	2.2191877090173973E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9996677805757608	WITHOUT_CLASSIFICATION	3.322194242391339E-4	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999553653699478	WITHOUT_CLASSIFICATION	4.4634630052196274E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999817664713923	WITHOUT_CLASSIFICATION	1.8233528607636626E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999439828477116	WITHOUT_CLASSIFICATION	5.601715228836927E-5	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999994871716228	WITHOUT_CLASSIFICATION	5.128283771936247E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999737472787917	WITHOUT_CLASSIFICATION	2.625272120826082E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999893122676834	WITHOUT_CLASSIFICATION	1.0687732316663444E-5	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9998067301117722	WITHOUT_CLASSIFICATION	1.9326988822777866E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.999996928569312	WITHOUT_CLASSIFICATION	3.071430687971775E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999830236256719	WITHOUT_CLASSIFICATION	1.69763743280833E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999830236256719	WITHOUT_CLASSIFICATION	1.69763743280833E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999660741568737	WITHOUT_CLASSIFICATION	3.392584312638977E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999660741568737	WITHOUT_CLASSIFICATION	3.392584312638977E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999481110875459	WITHOUT_CLASSIFICATION	5.1888912454081586E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999935613538616	WITHOUT_CLASSIFICATION	6.438646138409839E-6	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999779371621705	WITHOUT_CLASSIFICATION	2.2062837829477084E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9998586817068388	WITHOUT_CLASSIFICATION	1.4131829316127843E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999817664713923	WITHOUT_CLASSIFICATION	1.8233528607636626E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999817664713923	WITHOUT_CLASSIFICATION	1.8233528607636626E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999817664713923	WITHOUT_CLASSIFICATION	1.8233528607636626E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999439828477116	WITHOUT_CLASSIFICATION	5.601715228836927E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999779371621705	WITHOUT_CLASSIFICATION	2.2062837829477084E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999779371621705	WITHOUT_CLASSIFICATION	2.2062837829477084E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9999437735988268	WITHOUT_CLASSIFICATION	5.622640117318259E-5	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999933890644006	WITHOUT_CLASSIFICATION	6.6109355994899016E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999967765016934	WITHOUT_CLASSIFICATION	3.2234983066017184E-6	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.6437411326041361	WITHOUT_CLASSIFICATION	0.35625886739586393	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999955453622614	WITHOUT_CLASSIFICATION	4.454637738537383E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999214943803721	WITHOUT_CLASSIFICATION	7.850561962785405E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999214943803721	WITHOUT_CLASSIFICATION	7.850561962785405E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998574136510536	WITHOUT_CLASSIFICATION	1.4258634894637588E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999633930262011	WITHOUT_CLASSIFICATION	3.660697379889722E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999633930262011	WITHOUT_CLASSIFICATION	3.660697379889722E-5	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999633930262011	WITHOUT_CLASSIFICATION	3.660697379889722E-5	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.9999769819522395	WITHOUT_CLASSIFICATION	2.3018047760460126E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999943643476519	WITHOUT_CLASSIFICATION	5.6356523480305445E-6	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9999439828477116	WITHOUT_CLASSIFICATION	5.601715228836927E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999661627215721	WITHOUT_CLASSIFICATION	3.3837278427910896E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9999633930262011	WITHOUT_CLASSIFICATION	3.660697379889722E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998574136510536	WITHOUT_CLASSIFICATION	1.4258634894637588E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999607856800309	WITHOUT_CLASSIFICATION	3.921431996912364E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999597248560402	WITHOUT_CLASSIFICATION	4.02751439598592E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9999517592196837	WITHOUT_CLASSIFICATION	4.824078031621264E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999562083145119	WITHOUT_CLASSIFICATION	4.379168548815089E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999257548126378	WITHOUT_CLASSIFICATION	7.424518736221459E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9994762707073143	WITHOUT_CLASSIFICATION	5.237292926856741E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999946890783545	WITHOUT_CLASSIFICATION	5.310921645472538E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999930296862112	WITHOUT_CLASSIFICATION	6.970313788779379E-6	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999649364244685	WITHOUT_CLASSIFICATION	3.506357553138828E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9994251836734838	WITHOUT_CLASSIFICATION	5.748163265162469E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999177811266958	WITHOUT_CLASSIFICATION	8.221887330428637E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999874960842673	WITHOUT_CLASSIFICATION	1.2503915732685417E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9998945804789485	WITHOUT_CLASSIFICATION	1.0541952105147104E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999841777308495	WITHOUT_CLASSIFICATION	1.5822269150575967E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999652686977438	WITHOUT_CLASSIFICATION	3.473130225624237E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999881186130875	WITHOUT_CLASSIFICATION	1.1881386912528509E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997724108620899	WITHOUT_CLASSIFICATION	2.2758913791005313E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999500481626569	WITHOUT_CLASSIFICATION	4.9951837343058575E-5	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.999987657006808	WITHOUT_CLASSIFICATION	1.2342993191925299E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999960316664859	WITHOUT_CLASSIFICATION	3.968333514111545E-6	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9999128128500907	WITHOUT_CLASSIFICATION	8.718714990929754E-5	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999744337142532	WITHOUT_CLASSIFICATION	2.5566285746765756E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999538216252035	WITHOUT_CLASSIFICATION	4.617837479655501E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999767413969765	WITHOUT_CLASSIFICATION	2.3258603023609976E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998926142440959	WITHOUT_CLASSIFICATION	1.0738575590406322E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999827476121	WITHOUT_CLASSIFICATION	1.725238789998605E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999994392740371	WITHOUT_CLASSIFICATION	5.607259630066434E-7	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.9999851131319587	WITHOUT_CLASSIFICATION	1.4886868041344626E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9999296720774286	WITHOUT_CLASSIFICATION	7.032792257139023E-5	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999428428367259	WITHOUT_CLASSIFICATION	5.715716327423349E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999607856800309	WITHOUT_CLASSIFICATION	3.921431996912364E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9999879284937229	WITHOUT_CLASSIFICATION	1.207150627707708E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9997382183954773	WITHOUT_CLASSIFICATION	2.6178160452280794E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9993296267255052	WITHOUT_CLASSIFICATION	6.703732744948065E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999299437430827	WITHOUT_CLASSIFICATION	7.005625691724808E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999299437430827	WITHOUT_CLASSIFICATION	7.005625691724808E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999662546100155	WITHOUT_CLASSIFICATION	3.374538998449485E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999873989305461	WITHOUT_CLASSIFICATION	1.2601069453796452E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.999967876424538	WITHOUT_CLASSIFICATION	3.212357546200004E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999695970240147	WITHOUT_CLASSIFICATION	3.040297598538798E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999799631713845	WITHOUT_CLASSIFICATION	2.0036828615530797E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9999327891463584	WITHOUT_CLASSIFICATION	6.721085364164447E-5	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9981904089673669	WITHOUT_CLASSIFICATION	0.001809591032633144	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999925536101409	WITHOUT_CLASSIFICATION	7.446389859148057E-6	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998923805640529	WITHOUT_CLASSIFICATION	1.076194359470047E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9989696241375594	WITHOUT_CLASSIFICATION	0.001030375862440667	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9995918140948592	WITHOUT_CLASSIFICATION	4.0818590514086887E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999850701544092	WITHOUT_CLASSIFICATION	1.4929845590806413E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999850701544092	WITHOUT_CLASSIFICATION	1.4929845590806413E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9994943067129229	WITHOUT_CLASSIFICATION	5.056932870770489E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999895918948823	WITHOUT_CLASSIFICATION	1.040810511760212E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999626363293013	WITHOUT_CLASSIFICATION	3.736367069871304E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999626363293013	WITHOUT_CLASSIFICATION	3.736367069871304E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999894864483886	WITHOUT_CLASSIFICATION	1.0513551611407244E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999587047988071	WITHOUT_CLASSIFICATION	4.129520119296173E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9997306699667139	WITHOUT_CLASSIFICATION	2.693300332861228E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.999855945460664	WITHOUT_CLASSIFICATION	1.4405453933592354E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9999404066009527	WITHOUT_CLASSIFICATION	5.9593399047181295E-5	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.999825374960658	WITHOUT_CLASSIFICATION	1.7462503934190815E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999813148578893	WITHOUT_CLASSIFICATION	1.868514211061651E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9999933083927552	WITHOUT_CLASSIFICATION	6.691607244767291E-6	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9983438853690242	WITHOUT_CLASSIFICATION	0.0016561146309758334	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999884073059176	WITHOUT_CLASSIFICATION	1.1592694082335013E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9998075515935181	WITHOUT_CLASSIFICATION	1.9244840648180808E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999620354061433	WITHOUT_CLASSIFICATION	3.796459385670461E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999870451776474	WITHOUT_CLASSIFICATION	1.295482235260966E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9998454881815918	WITHOUT_CLASSIFICATION	1.5451181840829556E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999884072312275	WITHOUT_CLASSIFICATION	1.159276877251584E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9962532199431221	WITHOUT_CLASSIFICATION	0.003746780056877822	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9998440972149428	WITHOUT_CLASSIFICATION	1.5590278505718788E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9999112696578746	WITHOUT_CLASSIFICATION	8.873034212545893E-5	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9995744216630467	WITHOUT_CLASSIFICATION	4.255783369534065E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999814626414779	WITHOUT_CLASSIFICATION	1.85373585220935E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.945681811832675	WITHOUT_CLASSIFICATION	0.05431818816732507	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999296945438092	WITHOUT_CLASSIFICATION	7.030545619074654E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999629615420217	WITHOUT_CLASSIFICATION	3.703845797826157E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999754369144203	WITHOUT_CLASSIFICATION	2.4563085579683936E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999834613036562	WITHOUT_CLASSIFICATION	1.653869634374286E-5	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9996554479873025	WITHOUT_CLASSIFICATION	3.445520126974322E-4	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9996739311041943	WITHOUT_CLASSIFICATION	3.260688958056189E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9997783933199409	WITHOUT_CLASSIFICATION	2.2160668005916705E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.9999363921325044	WITHOUT_CLASSIFICATION	6.360786749560308E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9998298113579894	WITHOUT_CLASSIFICATION	1.701886420105629E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9999555639682837	WITHOUT_CLASSIFICATION	4.443603171633724E-5	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9998427246274816	WITHOUT_CLASSIFICATION	1.5727537251843034E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999070786093037	WITHOUT_CLASSIFICATION	9.292139069625507E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999070786093037	WITHOUT_CLASSIFICATION	9.292139069625507E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999875450747117	WITHOUT_CLASSIFICATION	1.2454925288318462E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999837236995889	WITHOUT_CLASSIFICATION	1.6276300411113257E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9997349738704694	WITHOUT_CLASSIFICATION	2.650261295305758E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9998204051332488	WITHOUT_CLASSIFICATION	1.7959486675119782E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9998037127866698	WITHOUT_CLASSIFICATION	1.9628721333015366E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999855329426739	WITHOUT_CLASSIFICATION	1.4467057326032976E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9898714376878626	WITHOUT_CLASSIFICATION	0.010128562312137407	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9898714376878626	WITHOUT_CLASSIFICATION	0.010128562312137407	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9998343148746175	WITHOUT_CLASSIFICATION	1.6568512538247174E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9998449446002804	WITHOUT_CLASSIFICATION	1.550553997194973E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9998495958853829	WITHOUT_CLASSIFICATION	1.504041146170592E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9239241971774621	WITHOUT_CLASSIFICATION	0.0760758028225378	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999174186752567	WITHOUT_CLASSIFICATION	8.258132474328107E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9999237119148658	WITHOUT_CLASSIFICATION	7.628808513409262E-5	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999883092762166	WITHOUT_CLASSIFICATION	1.1690723783381207E-5	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999908438944953	WITHOUT_CLASSIFICATION	9.156105504722646E-6	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9998724438376964	WITHOUT_CLASSIFICATION	1.2755616230363982E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.999937890439033	WITHOUT_CLASSIFICATION	6.210956096702306E-5	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999619598744656	WITHOUT_CLASSIFICATION	3.80401255345096E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999510928810447	WITHOUT_CLASSIFICATION	4.890711895543879E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999333152735931	WITHOUT_CLASSIFICATION	6.668472640687627E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999984472560108	WITHOUT_CLASSIFICATION	1.552743989087357E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9999084999277833	WITHOUT_CLASSIFICATION	9.150007221664235E-5	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997059670548244	WITHOUT_CLASSIFICATION	2.940329451755852E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9994926998222453	WITHOUT_CLASSIFICATION	5.073001777547012E-4	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999930752256645	WITHOUT_CLASSIFICATION	6.924774335448814E-6	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9997869425317794	WITHOUT_CLASSIFICATION	2.1305746822072397E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9997318670772803	WITHOUT_CLASSIFICATION	2.6813292271970015E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9981293450454896	WITHOUT_CLASSIFICATION	0.00187065495451037	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9991622539130253	WITHOUT_CLASSIFICATION	8.377460869747565E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999931797542598	WITHOUT_CLASSIFICATION	6.820245740203966E-6	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999967341704968	WITHOUT_CLASSIFICATION	3.265829503215022E-6	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999441954812827	WITHOUT_CLASSIFICATION	5.580451871722958E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997205358701777	WITHOUT_CLASSIFICATION	2.794641298223047E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999480973030469	WITHOUT_CLASSIFICATION	5.190269695305795E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998854775714069	WITHOUT_CLASSIFICATION	1.145224285931235E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999574267174561	WITHOUT_CLASSIFICATION	4.2573282543931326E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999648444120518	WITHOUT_CLASSIFICATION	3.5155587948142556E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9998534140754313	WITHOUT_CLASSIFICATION	1.4658592456871314E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999577363041793	WITHOUT_CLASSIFICATION	4.226369582079591E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9999344702114105	WITHOUT_CLASSIFICATION	6.552978858953578E-5	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999572743039972	WITHOUT_CLASSIFICATION	4.272569600285745E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999645243235799	WITHOUT_CLASSIFICATION	3.5475676420133E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998792892895524	WITHOUT_CLASSIFICATION	1.2071071044769059E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9997706479190364	WITHOUT_CLASSIFICATION	2.2935208096353356E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9963509650365395	WITHOUT_CLASSIFICATION	0.0036490349634605273	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999893738526866	WITHOUT_CLASSIFICATION	1.0626147313365694E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999947011164153	WITHOUT_CLASSIFICATION	5.298883584689111E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9997266791783559	WITHOUT_CLASSIFICATION	2.7332082164412645E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9988807474751213	WITHOUT_CLASSIFICATION	0.0011192525248786029	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9987752399002628	WITHOUT_CLASSIFICATION	0.0012247600997372303	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9998212364996004	WITHOUT_CLASSIFICATION	1.7876350039959906E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9998972480631129	WITHOUT_CLASSIFICATION	1.027519368872333E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9991215454551047	WITHOUT_CLASSIFICATION	8.784545448953091E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9997538598616525	WITHOUT_CLASSIFICATION	2.4614013834742265E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998787392781894	WITHOUT_CLASSIFICATION	1.2126072181061044E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999712317075629	WITHOUT_CLASSIFICATION	2.8768292437198385E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.8510014857925717	WITHOUT_CLASSIFICATION	0.14899851420742818	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998641754637733	WITHOUT_CLASSIFICATION	1.3582453622682433E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996463862259427	WITHOUT_CLASSIFICATION	3.536137740572735E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999750275703917	WITHOUT_CLASSIFICATION	2.497242960827644E-5	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999984626175372	WITHOUT_CLASSIFICATION	1.5373824628223364E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9994657244425029	WITHOUT_CLASSIFICATION	5.342755574970207E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999954962914481	WITHOUT_CLASSIFICATION	4.50370855189999E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999835758923322	WITHOUT_CLASSIFICATION	1.642410766780724E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999458623230165	WITHOUT_CLASSIFICATION	5.413767698362889E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999150753834237	WITHOUT_CLASSIFICATION	8.4924616576278E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999505131455922	WITHOUT_CLASSIFICATION	4.9486854407714935E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9999150753834237	WITHOUT_CLASSIFICATION	8.4924616576278E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999433067702601	WITHOUT_CLASSIFICATION	5.6693229739836016E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999505131455922	WITHOUT_CLASSIFICATION	4.9486854407714935E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999921138990592	WITHOUT_CLASSIFICATION	7.886100940747748E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9998854236948184	WITHOUT_CLASSIFICATION	1.1457630518170037E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.999132083300296	WITHOUT_CLASSIFICATION	8.679166997040141E-4	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9559502580393197	WITHOUT_CLASSIFICATION	0.04404974196068025	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999262635419583	WITHOUT_CLASSIFICATION	7.373645804163743E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9974501011631516	WITHOUT_CLASSIFICATION	0.0025498988368483602	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998181019773366	WITHOUT_CLASSIFICATION	1.818980226635618E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9998719676747976	WITHOUT_CLASSIFICATION	1.2803232520247482E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9975404849188936	WITHOUT_CLASSIFICATION	0.0024595150811064204	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999814626414779	WITHOUT_CLASSIFICATION	1.85373585220935E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9999967765016934	WITHOUT_CLASSIFICATION	3.2234983066017184E-6	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9933709885924565	WITHOUT_CLASSIFICATION	0.006629011407543396	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999838675149857	WITHOUT_CLASSIFICATION	1.6132485014224015E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999913098004171	WITHOUT_CLASSIFICATION	8.690199582912639E-6	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9998599578804293	WITHOUT_CLASSIFICATION	1.400421195707585E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9994876650942699	WITHOUT_CLASSIFICATION	5.123349057301427E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9999939449654308	WITHOUT_CLASSIFICATION	6.05503456920055E-6	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9987045834171492	WITHOUT_CLASSIFICATION	0.001295416582850724	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.982417485373873	WITHOUT_CLASSIFICATION	0.017582514626126984	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999776645429427	WITHOUT_CLASSIFICATION	2.233545705729924E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999950915696675	WITHOUT_CLASSIFICATION	4.908430332432722E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999842536888235	WITHOUT_CLASSIFICATION	1.5746311176502268E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9996315188589316	WITHOUT_CLASSIFICATION	3.684811410683192E-4	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999930239317415	WITHOUT_CLASSIFICATION	6.976068258498098E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9989585712341692	WITHOUT_CLASSIFICATION	0.0010414287658307788	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999972099898832	WITHOUT_CLASSIFICATION	2.7900101167960083E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999804815244744	WITHOUT_CLASSIFICATION	1.951847552559273E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999804815244744	WITHOUT_CLASSIFICATION	1.951847552559273E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999093969157253	WITHOUT_CLASSIFICATION	9.060308427467388E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.9999803071204231	WITHOUT_CLASSIFICATION	1.9692879576976365E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998670715604695	WITHOUT_CLASSIFICATION	1.3292843953060358E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9999478452209706	WITHOUT_CLASSIFICATION	5.215477902935818E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9999338938752738	WITHOUT_CLASSIFICATION	6.610612472618636E-5	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999530656030344	WITHOUT_CLASSIFICATION	4.6934396965566804E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9850940889505565	WITHOUT_CLASSIFICATION	0.014905911049443641	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999531419191506	WITHOUT_CLASSIFICATION	4.6858080849333485E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997456551132573	WITHOUT_CLASSIFICATION	2.543448867427067E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9997456551132573	WITHOUT_CLASSIFICATION	2.543448867427067E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9998450157418538	WITHOUT_CLASSIFICATION	1.5498425814622105E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999379532519302	WITHOUT_CLASSIFICATION	6.204674806982296E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9546850873442909	WITHOUT_CLASSIFICATION	0.04531491265570918	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999808352231117	WITHOUT_CLASSIFICATION	1.9164776888448157E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9997666898339976	WITHOUT_CLASSIFICATION	2.3331016600241865E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.999618578358817	WITHOUT_CLASSIFICATION	3.814216411830607E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9998094658408487	WITHOUT_CLASSIFICATION	1.9053415915126017E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999433067702601	WITHOUT_CLASSIFICATION	5.6693229739836016E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999345040701796	WITHOUT_CLASSIFICATION	6.549592982043413E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999964077810628	WITHOUT_CLASSIFICATION	3.592218937118386E-6	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.9999812416050488	WITHOUT_CLASSIFICATION	1.8758394951215157E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999542750340725	WITHOUT_CLASSIFICATION	4.572496592741785E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999622650031444	WITHOUT_CLASSIFICATION	3.7734996855594315E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999622650031444	WITHOUT_CLASSIFICATION	3.7734996855594315E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999379532519302	WITHOUT_CLASSIFICATION	6.204674806982296E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999882930095532	WITHOUT_CLASSIFICATION	1.1706990446763409E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.943586444182659	WITHOUT_CLASSIFICATION	0.05641355581734085	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999791980877077	WITHOUT_CLASSIFICATION	2.080191229221958E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999290153315015	WITHOUT_CLASSIFICATION	7.098466849846487E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9998830898581795	WITHOUT_CLASSIFICATION	1.1691014182046545E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999043541593631	WITHOUT_CLASSIFICATION	9.564584063693282E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999106786194703	WITHOUT_CLASSIFICATION	8.932138052969835E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9997826751157436	WITHOUT_CLASSIFICATION	2.173248842564283E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9997414544732878	WITHOUT_CLASSIFICATION	2.585455267122986E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999741268389108	WITHOUT_CLASSIFICATION	2.5873161089151896E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999853904848375	WITHOUT_CLASSIFICATION	1.4609515162567046E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9997238307350037	WITHOUT_CLASSIFICATION	2.761692649963713E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.99997009065505	WITHOUT_CLASSIFICATION	2.9909344949988656E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.999863324936002	WITHOUT_CLASSIFICATION	1.3667506399788883E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998994794347782	WITHOUT_CLASSIFICATION	1.0052056522189016E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9999315808383011	WITHOUT_CLASSIFICATION	6.841916169876196E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999508378763119	WITHOUT_CLASSIFICATION	4.9162123688150435E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999508378763119	WITHOUT_CLASSIFICATION	4.9162123688150435E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9965230187757109	WITHOUT_CLASSIFICATION	0.0034769812242890037	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999891663045698	WITHOUT_CLASSIFICATION	1.0833695430130907E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999969121143243	WITHOUT_CLASSIFICATION	3.0878856756712807E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999887417712676	WITHOUT_CLASSIFICATION	1.1258228732319672E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996027302606085	WITHOUT_CLASSIFICATION	3.9726973939149297E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996027302606085	WITHOUT_CLASSIFICATION	3.9726973939149297E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9999615566581821	WITHOUT_CLASSIFICATION	3.844334181797126E-5	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999998002228068	WITHOUT_CLASSIFICATION	1.9977719320679358E-7	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9997167341513598	WITHOUT_CLASSIFICATION	2.832658486402555E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9998003158897284	WITHOUT_CLASSIFICATION	1.9968411027158935E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999633505852976	WITHOUT_CLASSIFICATION	3.6649414702349054E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999858871813347	WITHOUT_CLASSIFICATION	1.4112818665169636E-5	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999770843895037	WITHOUT_CLASSIFICATION	2.291561049630104E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9988784244203702	WITHOUT_CLASSIFICATION	0.0011215755796298423	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999925434250257	WITHOUT_CLASSIFICATION	7.456574974338609E-6	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9999096692829911	WITHOUT_CLASSIFICATION	9.033071700890475E-5	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999333896190186	WITHOUT_CLASSIFICATION	6.661038098137389E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9995131703932915	WITHOUT_CLASSIFICATION	4.8682960670854894E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999788400673363	WITHOUT_CLASSIFICATION	2.1159932663742385E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999997762512556	WITHOUT_CLASSIFICATION	2.237487443065471E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999855127048007	WITHOUT_CLASSIFICATION	1.4487295199288298E-5	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999438901756615	WITHOUT_CLASSIFICATION	5.610982433841563E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999624635495827	WITHOUT_CLASSIFICATION	3.7536450417219216E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9997861919819125	WITHOUT_CLASSIFICATION	2.1380801808744767E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9995982437029246	WITHOUT_CLASSIFICATION	4.0175629707535067E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999609333265143	WITHOUT_CLASSIFICATION	3.906667348572881E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999296232558801	WITHOUT_CLASSIFICATION	7.037674411995575E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999739025629502	WITHOUT_CLASSIFICATION	2.609743704976615E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999095239534698	WITHOUT_CLASSIFICATION	9.047604653021813E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999706829929834	WITHOUT_CLASSIFICATION	2.931700701657745E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9991914141228162	WITHOUT_CLASSIFICATION	8.085858771837857E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9965807790469543	WITHOUT_CLASSIFICATION	0.0034192209530456673	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9998041015353787	WITHOUT_CLASSIFICATION	1.9589846462131566E-4	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9998616706620186	WITHOUT_CLASSIFICATION	1.3832933798138867E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999960085098887	WITHOUT_CLASSIFICATION	3.9914901114122705E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9999315706894986	WITHOUT_CLASSIFICATION	6.842931050142598E-5	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9994827088407637	WITHOUT_CLASSIFICATION	5.17291159236295E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999668132826903	WITHOUT_CLASSIFICATION	3.318671730975129E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999326634348353	WITHOUT_CLASSIFICATION	6.733656516467318E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999043287002769	WITHOUT_CLASSIFICATION	9.567129972306876E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9815982833703005	WITHOUT_CLASSIFICATION	0.01840171662969945	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9997740565894161	WITHOUT_CLASSIFICATION	2.259434105839612E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.999465050349027	WITHOUT_CLASSIFICATION	5.349496509729977E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9993062560332162	WITHOUT_CLASSIFICATION	6.93743966783773E-4	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.999468841185246	WITHOUT_CLASSIFICATION	5.311588147540463E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999649968318557	WITHOUT_CLASSIFICATION	3.500316814428227E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999773770265111	WITHOUT_CLASSIFICATION	2.2622973488807436E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999637489685237	WITHOUT_CLASSIFICATION	3.625103147631064E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999915187876994	WITHOUT_CLASSIFICATION	8.481212300515462E-6	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9999368653279649	WITHOUT_CLASSIFICATION	6.313467203520405E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9992436077327641	WITHOUT_CLASSIFICATION	7.563922672357675E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9992436077327641	WITHOUT_CLASSIFICATION	7.563922672357675E-4	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999785730266735	WITHOUT_CLASSIFICATION	2.1426973326546234E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9993267694735002	WITHOUT_CLASSIFICATION	6.732305264998256E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9996029186970004	WITHOUT_CLASSIFICATION	3.970813029996918E-4	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9996064432478852	WITHOUT_CLASSIFICATION	3.935567521147465E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999969026180721	WITHOUT_CLASSIFICATION	3.097381927950938E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999969026180721	WITHOUT_CLASSIFICATION	3.097381927950938E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9977733442806762	WITHOUT_CLASSIFICATION	0.0022266557193236984	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9994896149679737	WITHOUT_CLASSIFICATION	5.103850320263914E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999596710263831	WITHOUT_CLASSIFICATION	4.0328973616910303E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999867792959308	WITHOUT_CLASSIFICATION	1.322070406924562E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999590194097924	WITHOUT_CLASSIFICATION	4.0980590207644684E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999590194097924	WITHOUT_CLASSIFICATION	4.0980590207644684E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999782976161972	WITHOUT_CLASSIFICATION	2.1702383802852706E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999782976161972	WITHOUT_CLASSIFICATION	2.1702383802852706E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999594002822976	WITHOUT_CLASSIFICATION	4.0599717702415234E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9999066387051663	WITHOUT_CLASSIFICATION	9.336129483372134E-5	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999629980414844	WITHOUT_CLASSIFICATION	3.700195851563412E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.999799530969631	WITHOUT_CLASSIFICATION	2.00469030368933E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999097671849676	WITHOUT_CLASSIFICATION	9.023281503234793E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9999031910420787	WITHOUT_CLASSIFICATION	9.680895792127535E-5	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999627269940788	WITHOUT_CLASSIFICATION	3.727300592117459E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999649071926417	WITHOUT_CLASSIFICATION	3.5092807358299446E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999616402697089	WITHOUT_CLASSIFICATION	3.835973029104975E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999087061955972	WITHOUT_CLASSIFICATION	9.129380440286453E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9923276857476503	WITHOUT_CLASSIFICATION	0.007672314252349775	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999840625153879	WITHOUT_CLASSIFICATION	1.5937484612200365E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999578996315628	WITHOUT_CLASSIFICATION	4.2100368437122506E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9997900433097987	WITHOUT_CLASSIFICATION	2.0995669020123454E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999989606636862	WITHOUT_CLASSIFICATION	1.0393363137564246E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998913857396665	WITHOUT_CLASSIFICATION	1.0861426033342166E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9998819953076471	WITHOUT_CLASSIFICATION	1.1800469235291677E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998670173507369	WITHOUT_CLASSIFICATION	1.3298264926314457E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999465598023933	WITHOUT_CLASSIFICATION	5.3440197606705064E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999581742690864	WITHOUT_CLASSIFICATION	4.182573091353953E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9933709885924565	WITHOUT_CLASSIFICATION	0.006629011407543396	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999961027361974	WITHOUT_CLASSIFICATION	3.897263802615738E-6	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999594596605732	WITHOUT_CLASSIFICATION	4.054033942666163E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999690323168725	WITHOUT_CLASSIFICATION	3.0967683127472135E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997726911510724	WITHOUT_CLASSIFICATION	2.273088489276811E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999692282554562	WITHOUT_CLASSIFICATION	3.077174454380526E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999675336077535	WITHOUT_CLASSIFICATION	3.2466392246472306E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9998634845784954	WITHOUT_CLASSIFICATION	1.3651542150452129E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9996615976686425	WITHOUT_CLASSIFICATION	3.3840233135743906E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.999986233005178	WITHOUT_CLASSIFICATION	1.3766994822042501E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9997669569096269	WITHOUT_CLASSIFICATION	2.330430903730822E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9998986303077677	WITHOUT_CLASSIFICATION	1.0136969223227222E-4	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.999601682271018	WITHOUT_CLASSIFICATION	3.983177289820551E-4	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9999209694216127	WITHOUT_CLASSIFICATION	7.903057838727126E-5	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9992860111774434	WITHOUT_CLASSIFICATION	7.139888225566386E-4	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999875992314878	WITHOUT_CLASSIFICATION	1.2400768512232867E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9999055526087888	WITHOUT_CLASSIFICATION	9.444739121126478E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999862206485556	WITHOUT_CLASSIFICATION	1.3779351444408619E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9745238420931235	WITHOUT_CLASSIFICATION	0.025476157906876608	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999963699382789	WITHOUT_CLASSIFICATION	3.6300617210467542E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9998113179134288	WITHOUT_CLASSIFICATION	1.8868208657126344E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9989428412060752	WITHOUT_CLASSIFICATION	0.001057158793924723	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9999223639969246	WITHOUT_CLASSIFICATION	7.763600307547083E-5	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.996066778891289	WITHOUT_CLASSIFICATION	0.003933221108711026	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997986102776305	WITHOUT_CLASSIFICATION	2.0138972236946815E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999696768116002	WITHOUT_CLASSIFICATION	3.032318839973164E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9998572724517631	WITHOUT_CLASSIFICATION	1.4272754823679517E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.999929827044089	WITHOUT_CLASSIFICATION	7.017295591100453E-5	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999246905219743	WITHOUT_CLASSIFICATION	7.530947802562579E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999812385366779	WITHOUT_CLASSIFICATION	1.8761463322111006E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999812385366779	WITHOUT_CLASSIFICATION	1.8761463322111006E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999972876483227	WITHOUT_CLASSIFICATION	2.712351677298466E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.999972876483227	WITHOUT_CLASSIFICATION	2.712351677298466E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995218859033275	WITHOUT_CLASSIFICATION	4.781140966724819E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995218859033275	WITHOUT_CLASSIFICATION	4.781140966724819E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999156621217996	WITHOUT_CLASSIFICATION	8.433787820043376E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999156621217996	WITHOUT_CLASSIFICATION	8.433787820043376E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997058448185447	WITHOUT_CLASSIFICATION	2.941551814553052E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997058448185447	WITHOUT_CLASSIFICATION	2.941551814553052E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9997058448185447	WITHOUT_CLASSIFICATION	2.941551814553052E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999564784488649	WITHOUT_CLASSIFICATION	4.3521551135017905E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999366016603985	WITHOUT_CLASSIFICATION	6.339833960140771E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.99984763327219	WITHOUT_CLASSIFICATION	1.5236672781005712E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.99984763327219	WITHOUT_CLASSIFICATION	1.5236672781005712E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.99984763327219	WITHOUT_CLASSIFICATION	1.5236672781005712E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9998531166559572	WITHOUT_CLASSIFICATION	1.46883344042769E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999574578444563	WITHOUT_CLASSIFICATION	4.2542155543598936E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.99991311542247	WITHOUT_CLASSIFICATION	8.688457753001793E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999787204625604	WITHOUT_CLASSIFICATION	2.1279537439686054E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999787204625604	WITHOUT_CLASSIFICATION	2.1279537439686054E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9997550248158813	WITHOUT_CLASSIFICATION	2.449751841187755E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999981356979616	WITHOUT_CLASSIFICATION	1.8643020383970254E-6	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999981356979616	WITHOUT_CLASSIFICATION	1.8643020383970254E-6	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8958588337576164	DEFECT	0.10414116624238354	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9997230937785817	WITHOUT_CLASSIFICATION	2.7690622141827564E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9999022564413933	WITHOUT_CLASSIFICATION	9.77435586067187E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9991219655604441	WITHOUT_CLASSIFICATION	8.780344395558754E-4	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999829690937183	WITHOUT_CLASSIFICATION	1.7030906281631838E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999976518977086	WITHOUT_CLASSIFICATION	2.3481022912791257E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9934836558705635	WITHOUT_CLASSIFICATION	0.006516344129436457	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.999609022459334	WITHOUT_CLASSIFICATION	3.909775406659418E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999600543344	WITHOUT_CLASSIFICATION	3.9945665599932624E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999920808076391	WITHOUT_CLASSIFICATION	7.919192360872306E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9999349343245181	WITHOUT_CLASSIFICATION	6.506567548187218E-5	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9994698261723066	WITHOUT_CLASSIFICATION	5.301738276933328E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9997880444166385	WITHOUT_CLASSIFICATION	2.1195558336156855E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9998999007004552	WITHOUT_CLASSIFICATION	1.0009929954488415E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997340537297562	WITHOUT_CLASSIFICATION	2.6594627024377064E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.8296070377048183	DEFECT	0.17039296229518172	WITHOUT_CLASSIFICATION
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9623945618138178	WITHOUT_CLASSIFICATION	0.037605438186182165	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999784851178949	WITHOUT_CLASSIFICATION	2.1514882105143664E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999771249941224	WITHOUT_CLASSIFICATION	2.287500587756077E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.999828526053142	WITHOUT_CLASSIFICATION	1.7147394685799091E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996463862259427	WITHOUT_CLASSIFICATION	3.536137740572735E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999531170608658	WITHOUT_CLASSIFICATION	4.688293913423778E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999752708383793	WITHOUT_CLASSIFICATION	2.4729161620735736E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9984469655721675	WITHOUT_CLASSIFICATION	0.0015530344278324997	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.956616164735843	WITHOUT_CLASSIFICATION	0.04338383526415698	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9997285229943571	WITHOUT_CLASSIFICATION	2.714770056428951E-4	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.999999447974576	WITHOUT_CLASSIFICATION	5.520254240410514E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999418877473919	WITHOUT_CLASSIFICATION	5.811225260796747E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999867691066776	WITHOUT_CLASSIFICATION	1.323089332226804E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999711416797582	WITHOUT_CLASSIFICATION	2.885832024179609E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999465377636492	WITHOUT_CLASSIFICATION	5.346223635074508E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999947011164153	WITHOUT_CLASSIFICATION	5.298883584689111E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998615005398912	WITHOUT_CLASSIFICATION	1.3849946010877464E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998615005398912	WITHOUT_CLASSIFICATION	1.3849946010877464E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998615005398912	WITHOUT_CLASSIFICATION	1.3849946010877464E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998615005398912	WITHOUT_CLASSIFICATION	1.3849946010877464E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999960793513981	WITHOUT_CLASSIFICATION	3.920648601857068E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.999897230133855	WITHOUT_CLASSIFICATION	1.0276986614490012E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999645071883291	WITHOUT_CLASSIFICATION	3.549281167095513E-5	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9999645071883291	WITHOUT_CLASSIFICATION	3.549281167095513E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999708127564283	WITHOUT_CLASSIFICATION	2.918724357175665E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998552975974165	WITHOUT_CLASSIFICATION	1.4470240258345642E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9998324803883447	WITHOUT_CLASSIFICATION	1.6751961165522173E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999956856139132	WITHOUT_CLASSIFICATION	4.31438608681077E-6	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9980840219111342	WITHOUT_CLASSIFICATION	0.0019159780888658635	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9995065785888629	WITHOUT_CLASSIFICATION	4.934214111370727E-4	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.999957595120892	WITHOUT_CLASSIFICATION	4.2404879107973194E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999894631685782	WITHOUT_CLASSIFICATION	1.0536831421828991E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999894631685782	WITHOUT_CLASSIFICATION	1.0536831421828991E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999894631685782	WITHOUT_CLASSIFICATION	1.0536831421828991E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999894631685782	WITHOUT_CLASSIFICATION	1.0536831421828991E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999945268850979	WITHOUT_CLASSIFICATION	5.473114902058145E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995892888212548	WITHOUT_CLASSIFICATION	4.107111787452878E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995892888212548	WITHOUT_CLASSIFICATION	4.107111787452878E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9995892888212548	WITHOUT_CLASSIFICATION	4.107111787452878E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9998385601216778	WITHOUT_CLASSIFICATION	1.6143987832228015E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999644932545338	WITHOUT_CLASSIFICATION	3.550674546608087E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9999942862416565	WITHOUT_CLASSIFICATION	5.713758343572866E-6	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9984494413761748	WITHOUT_CLASSIFICATION	0.0015505586238252918	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9963486894027946	WITHOUT_CLASSIFICATION	0.0036513105972053508	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9993867539966587	WITHOUT_CLASSIFICATION	6.132460033412225E-4	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9993867539966587	WITHOUT_CLASSIFICATION	6.132460033412225E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998202128363027	WITHOUT_CLASSIFICATION	1.7978716369725995E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9998202128363027	WITHOUT_CLASSIFICATION	1.7978716369725995E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999981648568275	WITHOUT_CLASSIFICATION	1.8351431725082517E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999997093010926	WITHOUT_CLASSIFICATION	2.9069890738680123E-7	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9998523623054032	WITHOUT_CLASSIFICATION	1.4763769459681214E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.984592342790333	WITHOUT_CLASSIFICATION	0.015407657209667016	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9999210445933453	WITHOUT_CLASSIFICATION	7.895540665470139E-5	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999962007409722	WITHOUT_CLASSIFICATION	3.799259027948758E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998651472801001	WITHOUT_CLASSIFICATION	1.3485271989980814E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9999161082731728	WITHOUT_CLASSIFICATION	8.389172682725564E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9993966328195084	WITHOUT_CLASSIFICATION	6.033671804914528E-4	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956967512049	WITHOUT_CLASSIFICATION	4.303248795093784E-6	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999956967512049	WITHOUT_CLASSIFICATION	4.303248795093784E-6	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828355095298	WITHOUT_CLASSIFICATION	1.7164490470182684E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999828355095298	WITHOUT_CLASSIFICATION	1.7164490470182684E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9990971848620875	WITHOUT_CLASSIFICATION	9.028151379125114E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9997174641686865	WITHOUT_CLASSIFICATION	2.825358313134733E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999409688084785	WITHOUT_CLASSIFICATION	5.903119152145638E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990082038445278	WITHOUT_CLASSIFICATION	9.91796155472209E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990082038445278	WITHOUT_CLASSIFICATION	9.91796155472209E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9990082038445278	WITHOUT_CLASSIFICATION	9.91796155472209E-4	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999539321700234	WITHOUT_CLASSIFICATION	4.606782997671268E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9996396060043641	WITHOUT_CLASSIFICATION	3.603939956360033E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9992185221246167	WITHOUT_CLASSIFICATION	7.814778753832653E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9997345617433581	WITHOUT_CLASSIFICATION	2.6543825664195937E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.997964943179167	WITHOUT_CLASSIFICATION	0.002035056820833017	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999764789054101	WITHOUT_CLASSIFICATION	2.352109458985576E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.976405084886333	WITHOUT_CLASSIFICATION	0.023594915113666973	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.999848578687414	WITHOUT_CLASSIFICATION	1.514213125861388E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9998588706164596	WITHOUT_CLASSIFICATION	1.411293835403568E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999804815244744	WITHOUT_CLASSIFICATION	1.951847552559273E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9999206691966839	WITHOUT_CLASSIFICATION	7.933080331604991E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996340053255061	WITHOUT_CLASSIFICATION	3.659946744939848E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999732648282529	WITHOUT_CLASSIFICATION	2.6735171747197407E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9995647875921875	WITHOUT_CLASSIFICATION	4.352124078125009E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9728725511383673	WITHOUT_CLASSIFICATION	0.027127448861632694	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9977356940325707	WITHOUT_CLASSIFICATION	0.0022643059674292546	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9996707933979768	WITHOUT_CLASSIFICATION	3.292066020231483E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999715592394132	WITHOUT_CLASSIFICATION	2.8440760586945092E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999791588572977	WITHOUT_CLASSIFICATION	2.084114270226756E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.9999310351822133	WITHOUT_CLASSIFICATION	6.896481778673925E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999571522876513	WITHOUT_CLASSIFICATION	4.284771234881371E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999587909280508	WITHOUT_CLASSIFICATION	4.120907194918302E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9910452593167176	WITHOUT_CLASSIFICATION	0.008954740683282388	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.998839807134204	WITHOUT_CLASSIFICATION	0.0011601928657960017	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999675116878031	WITHOUT_CLASSIFICATION	3.24883121969479E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999863148116226	WITHOUT_CLASSIFICATION	1.3685188377382966E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9591576829915017	WITHOUT_CLASSIFICATION	0.04084231700849833	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.887347514648054	WITHOUT_CLASSIFICATION	0.11265248535194602	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9997595475967495	WITHOUT_CLASSIFICATION	2.4045240325045166E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.9999285348393547	WITHOUT_CLASSIFICATION	7.146516064532894E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9999291366347903	WITHOUT_CLASSIFICATION	7.086336520966422E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.999947255749612	WITHOUT_CLASSIFICATION	5.2744250387998924E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9997387546948302	WITHOUT_CLASSIFICATION	2.6124530516981505E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.997713745320323	WITHOUT_CLASSIFICATION	0.0022862546796769767	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9941668279733505	WITHOUT_CLASSIFICATION	0.005833172026649422	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996348631440105	WITHOUT_CLASSIFICATION	3.6513685598949663E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9996348631440105	WITHOUT_CLASSIFICATION	3.6513685598949663E-4	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9954332349630743	WITHOUT_CLASSIFICATION	0.004566765036925689	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999815126387472	WITHOUT_CLASSIFICATION	1.8487361252800407E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999815126387472	WITHOUT_CLASSIFICATION	1.8487361252800407E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9997152540391302	WITHOUT_CLASSIFICATION	2.847459608698421E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.9999813212120383	WITHOUT_CLASSIFICATION	1.8678787961706334E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998713621650989	WITHOUT_CLASSIFICATION	1.2863783490106508E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999637547392689	WITHOUT_CLASSIFICATION	3.624526073110737E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999637547392689	WITHOUT_CLASSIFICATION	3.624526073110737E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999933049779436	WITHOUT_CLASSIFICATION	6.695022056394003E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996633862718123	WITHOUT_CLASSIFICATION	3.366137281876603E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9996633862718123	WITHOUT_CLASSIFICATION	3.366137281876603E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9997236302650625	WITHOUT_CLASSIFICATION	2.763697349375352E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.7086151445329274	DEFECT	0.29138485546707266	WITHOUT_CLASSIFICATION
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9997053836834451	WITHOUT_CLASSIFICATION	2.9461631655481864E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999886812979962	WITHOUT_CLASSIFICATION	1.131870200364117E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998915163884377	WITHOUT_CLASSIFICATION	1.0848361156234967E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998380698895317	WITHOUT_CLASSIFICATION	1.6193011046836174E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999857852629358	WITHOUT_CLASSIFICATION	1.421473706422464E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999708101095559	WITHOUT_CLASSIFICATION	2.918989044412968E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9997635950461158	WITHOUT_CLASSIFICATION	2.364049538842559E-4	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9990440560148871	WITHOUT_CLASSIFICATION	9.559439851128922E-4	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9991899069947892	WITHOUT_CLASSIFICATION	8.100930052108079E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9999473751556585	WITHOUT_CLASSIFICATION	5.262484434156575E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9999740946584537	WITHOUT_CLASSIFICATION	2.5905341546323494E-5	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9999040004254097	WITHOUT_CLASSIFICATION	9.599957459022769E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9998005203817614	WITHOUT_CLASSIFICATION	1.9947961823859703E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999747393402241	WITHOUT_CLASSIFICATION	2.5260659776021918E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9997858597898569	WITHOUT_CLASSIFICATION	2.1414021014295602E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9958331106451003	WITHOUT_CLASSIFICATION	0.004166889354899654	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999664873243597	WITHOUT_CLASSIFICATION	3.351267564037359E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999664873243597	WITHOUT_CLASSIFICATION	3.351267564037359E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.9997877664643998	WITHOUT_CLASSIFICATION	2.1223353560026904E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999636671572641	WITHOUT_CLASSIFICATION	3.6332842735795174E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9994218415992385	WITHOUT_CLASSIFICATION	5.78158400761596E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996288895210397	WITHOUT_CLASSIFICATION	3.711104789603216E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999257548126378	WITHOUT_CLASSIFICATION	7.424518736221459E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999257548126378	WITHOUT_CLASSIFICATION	7.424518736221459E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9999257548126378	WITHOUT_CLASSIFICATION	7.424518736221459E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999930296862112	WITHOUT_CLASSIFICATION	6.970313788779379E-6	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9997724108620899	WITHOUT_CLASSIFICATION	2.2758913791005313E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999673714241506	WITHOUT_CLASSIFICATION	3.26285758494892E-5	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999923625562387	WITHOUT_CLASSIFICATION	7.63744376129856E-6	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999945748850229	WITHOUT_CLASSIFICATION	5.425114977065255E-6	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999523488442184	WITHOUT_CLASSIFICATION	4.765115578168146E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9998284953647691	WITHOUT_CLASSIFICATION	1.715046352308614E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9989696241375594	WITHOUT_CLASSIFICATION	0.001030375862440667	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9998923805640529	WITHOUT_CLASSIFICATION	1.076194359470047E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999929173311387	WITHOUT_CLASSIFICATION	7.0826688612712144E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999554572194821	WITHOUT_CLASSIFICATION	4.454278051782939E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999852980977295	WITHOUT_CLASSIFICATION	1.4701902270590478E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.945681811832675	WITHOUT_CLASSIFICATION	0.05431818816732507	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9999033056377228	WITHOUT_CLASSIFICATION	9.669436227728828E-5	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999910567327545	WITHOUT_CLASSIFICATION	8.94326724549441E-6	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9998860054829107	WITHOUT_CLASSIFICATION	1.1399451708928843E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999883040020268	WITHOUT_CLASSIFICATION	1.1695997973226441E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999931797542598	WITHOUT_CLASSIFICATION	6.820245740203966E-6	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999664984303097	WITHOUT_CLASSIFICATION	3.350156969033671E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.8981725943506382	WITHOUT_CLASSIFICATION	0.10182740564936185	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9964680301495209	DEFECT	0.0035319698504790993	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.9191561264938023	WITHOUT_CLASSIFICATION	0.08084387350619772	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9993529589980598	DEFECT	6.470410019401213E-4	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9872782675000483	DEFECT	0.012721732499951607	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9935212688456329	WITHOUT_CLASSIFICATION	0.006478731154367107	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9087958570969772	WITHOUT_CLASSIFICATION	0.09120414290302274	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9396994862839284	WITHOUT_CLASSIFICATION	0.060300513716071515	DEFECT
// FIXME: not correct exception	DEFECT	0.7941208273468139	DEFECT	0.2058791726531861	WITHOUT_CLASSIFICATION
// XXX actually only on windows...	DEFECT	0.9986248360950438	WITHOUT_CLASSIFICATION	0.0013751639049561246	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9898267146403806	WITHOUT_CLASSIFICATION	0.010173285359619437	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.7102786430964034	DEFECT	0.2897213569035965	WITHOUT_CLASSIFICATION
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9865600511387929	WITHOUT_CLASSIFICATION	0.01343994886120707	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9393140809287726	DEFECT	0.060685919071227515	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.918403983043004	WITHOUT_CLASSIFICATION	0.08159601695699609	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9692099365360156	WITHOUT_CLASSIFICATION	0.030790063463984437	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9692099365360156	WITHOUT_CLASSIFICATION	0.030790063463984437	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.6970785662758713	WITHOUT_CLASSIFICATION	0.30292143372412866	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9955266217381924	WITHOUT_CLASSIFICATION	0.004473378261807597	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9660683015807449	WITHOUT_CLASSIFICATION	0.03393169841925517	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998808681161048	WITHOUT_CLASSIFICATION	1.1913188389527445E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.9998808681161048	WITHOUT_CLASSIFICATION	1.1913188389527445E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.6867232932688779	WITHOUT_CLASSIFICATION	0.313276706731122	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9364915799267488	WITHOUT_CLASSIFICATION	0.0635084200732513	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9461261050834218	WITHOUT_CLASSIFICATION	0.05387389491657822	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.735562728099106	WITHOUT_CLASSIFICATION	0.264437271900894	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.7280881146486703	WITHOUT_CLASSIFICATION	0.2719118853513297	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.6051344896399398	WITHOUT_CLASSIFICATION	0.39486551036006023	DEFECT
// TODO: proper sign	DEFECT	0.9450962604925249	WITHOUT_CLASSIFICATION	0.05490373950747512	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.8957843044259798	DEFECT	0.10421569557402019	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.5049960073564558	DEFECT	0.4950039926435442	WITHOUT_CLASSIFICATION
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.776225753404611	DEFECT	0.223774246595389	WITHOUT_CLASSIFICATION
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.8111950873281308	WITHOUT_CLASSIFICATION	0.18880491267186925	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.5195065271103638	WITHOUT_CLASSIFICATION	0.4804934728896362	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.8175644440794435	DEFECT	0.18243555592055657	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9870512476213744	WITHOUT_CLASSIFICATION	0.012948752378625616	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.8523043098959381	WITHOUT_CLASSIFICATION	0.14769569010406192	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9309664209723454	WITHOUT_CLASSIFICATION	0.06903357902765456	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9883194012779372	WITHOUT_CLASSIFICATION	0.011680598722062924	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.6405772589706235	WITHOUT_CLASSIFICATION	0.3594227410293765	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.9788912903480907	WITHOUT_CLASSIFICATION	0.02110870965190925	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9996965175639049	WITHOUT_CLASSIFICATION	3.0348243609512344E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8795357340895297	WITHOUT_CLASSIFICATION	0.1204642659104703	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.8795357340895297	WITHOUT_CLASSIFICATION	0.1204642659104703	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9668407047978966	WITHOUT_CLASSIFICATION	0.03315929520210341	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9594486319181836	WITHOUT_CLASSIFICATION	0.0405513680818163	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.888054001361708	DEFECT	0.11194599863829197	WITHOUT_CLASSIFICATION
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9943950705808424	WITHOUT_CLASSIFICATION	0.005604929419157497	DEFECT
// FIXME: This is wrong	DEFECT	0.7410688435089463	WITHOUT_CLASSIFICATION	0.25893115649105375	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9707545111611945	WITHOUT_CLASSIFICATION	0.02924548883880555	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.999933885862084	WITHOUT_CLASSIFICATION	6.61141379159172E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5708910525338149	WITHOUT_CLASSIFICATION	0.429108947466185	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9960528683385695	WITHOUT_CLASSIFICATION	0.003947131661430444	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9951579886091305	WITHOUT_CLASSIFICATION	0.004842011390869547	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9820608818490598	DEFECT	0.01793911815094011	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9088507093949618	DEFECT	0.09114929060503824	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9088507093949618	DEFECT	0.09114929060503824	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.6472106999172698	WITHOUT_CLASSIFICATION	0.3527893000827302	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9915068107855898	WITHOUT_CLASSIFICATION	0.008493189214410243	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9983577301868992	WITHOUT_CLASSIFICATION	0.001642269813100793	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.9812395958379138	DEFECT	0.018760404162086283	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9760547567412289	DEFECT	0.023945243258771117	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9514069427209559	WITHOUT_CLASSIFICATION	0.04859305727904403	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.6863756977829529	WITHOUT_CLASSIFICATION	0.3136243022170471	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9668407047978966	WITHOUT_CLASSIFICATION	0.03315929520210341	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.998653835772458	WITHOUT_CLASSIFICATION	0.0013461642275419694	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.8085205708832048	WITHOUT_CLASSIFICATION	0.1914794291167952	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.6254952708519385	WITHOUT_CLASSIFICATION	0.3745047291480616	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.735562728099106	WITHOUT_CLASSIFICATION	0.264437271900894	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9615559630054621	DEFECT	0.03844403699453802	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.879288921477786	DEFECT	0.12071107852221387	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9309664209723454	WITHOUT_CLASSIFICATION	0.06903357902765456	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9992300390204253	WITHOUT_CLASSIFICATION	7.699609795748318E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9820608818490598	DEFECT	0.01793911815094011	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.9039474772608053	DEFECT	0.09605252273919469	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// TODO: don't require pop	DEFECT	0.9330190864085663	WITHOUT_CLASSIFICATION	0.06698091359143367	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5708910525338149	WITHOUT_CLASSIFICATION	0.429108947466185	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9680823094781587	WITHOUT_CLASSIFICATION	0.03191769052184135	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9088507093949618	DEFECT	0.09114929060503824	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9088507093949618	DEFECT	0.09114929060503824	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9992869427335135	WITHOUT_CLASSIFICATION	7.130572664865901E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9810185014333048	WITHOUT_CLASSIFICATION	0.01898149856669515	DEFECT
