// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999922269022179	WITHOUT_CLASSIFICATION	7.773097782081933E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9997803498444898	WITHOUT_CLASSIFICATION	2.1965015551018608E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9993874456018721	WITHOUT_CLASSIFICATION	6.125543981279171E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999468457781188	WITHOUT_CLASSIFICATION	5.3154221881160946E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999468457781188	WITHOUT_CLASSIFICATION	5.3154221881160946E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9995259192288595	WITHOUT_CLASSIFICATION	4.7408077114054935E-4	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.9999683214356188	WITHOUT_CLASSIFICATION	3.167856438128447E-5	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9994437617785307	WITHOUT_CLASSIFICATION	5.562382214692838E-4	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9996757282250753	WITHOUT_CLASSIFICATION	3.2427177492459563E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.9999246636327128	WITHOUT_CLASSIFICATION	7.53363672871726E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9998906128217857	WITHOUT_CLASSIFICATION	1.0938717821418638E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9998906128217857	WITHOUT_CLASSIFICATION	1.0938717821418638E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9998906128217857	WITHOUT_CLASSIFICATION	1.0938717821418638E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9998906128217857	WITHOUT_CLASSIFICATION	1.0938717821418638E-4	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9989886972515889	WITHOUT_CLASSIFICATION	0.0010113027484111115	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.9995521741271309	WITHOUT_CLASSIFICATION	4.4782587286907325E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.9999602538961205	WITHOUT_CLASSIFICATION	3.9746103879467455E-5	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.9997627192728168	WITHOUT_CLASSIFICATION	2.372807271831423E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999271118702349	WITHOUT_CLASSIFICATION	7.288812976506691E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999288109327494	WITHOUT_CLASSIFICATION	7.118906725060364E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999583832385509	WITHOUT_CLASSIFICATION	4.1616761449119153E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.999968113251644	WITHOUT_CLASSIFICATION	3.1886748356027875E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999300925266474	WITHOUT_CLASSIFICATION	6.990747335247219E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9933815364288724	WITHOUT_CLASSIFICATION	0.0066184635711276545	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9997178281284376	WITHOUT_CLASSIFICATION	2.821718715624433E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999753349818572	WITHOUT_CLASSIFICATION	2.466501814278997E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9995286336660069	WITHOUT_CLASSIFICATION	4.713663339931946E-4	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9999872519280062	WITHOUT_CLASSIFICATION	1.2748071993733156E-5	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998141602363523	WITHOUT_CLASSIFICATION	1.858397636476983E-4	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9966969569963722	WITHOUT_CLASSIFICATION	0.003303043003627785	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.999988950253133	WITHOUT_CLASSIFICATION	1.1049746867068517E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.9998906128217857	WITHOUT_CLASSIFICATION	1.0938717821418638E-4	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998332234648298	WITHOUT_CLASSIFICATION	1.667765351700876E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999866326878574	WITHOUT_CLASSIFICATION	1.3367312142614335E-5	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9997901659703486	WITHOUT_CLASSIFICATION	2.0983402965131853E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.999853401382662	WITHOUT_CLASSIFICATION	1.4659861733788443E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.9997382022837739	WITHOUT_CLASSIFICATION	2.617977162261369E-4	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999769851654759	WITHOUT_CLASSIFICATION	2.3014834524093857E-4	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.999932610611766	WITHOUT_CLASSIFICATION	6.738938823404265E-5	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.999988459972072	WITHOUT_CLASSIFICATION	1.1540027928027336E-5	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9998538100034469	WITHOUT_CLASSIFICATION	1.4618999655318637E-4	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.9998161208129644	WITHOUT_CLASSIFICATION	1.838791870355585E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9936834114940968	WITHOUT_CLASSIFICATION	0.006316588505903187	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9997551008266905	WITHOUT_CLASSIFICATION	2.448991733094696E-4	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.999712781845569	WITHOUT_CLASSIFICATION	2.8721815443105285E-4	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999271154844445	WITHOUT_CLASSIFICATION	7.288451555547569E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9996654487151705	WITHOUT_CLASSIFICATION	3.3455128482949884E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9994318410868651	WITHOUT_CLASSIFICATION	5.681589131347764E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9996530022718811	WITHOUT_CLASSIFICATION	3.469977281189192E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.996505907533354	WITHOUT_CLASSIFICATION	0.003494092466645907	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999364190405908	WITHOUT_CLASSIFICATION	6.358095940922246E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9989047196644194	WITHOUT_CLASSIFICATION	0.0010952803355805975	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9999897258455702	WITHOUT_CLASSIFICATION	1.027415442971303E-5	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999266225137825	WITHOUT_CLASSIFICATION	7.337748621749323E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9999318548148755	WITHOUT_CLASSIFICATION	6.814518512446551E-5	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9999477866231632	WITHOUT_CLASSIFICATION	5.22133768367944E-5	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9993492305806876	WITHOUT_CLASSIFICATION	6.507694193124673E-4	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9996293942579108	WITHOUT_CLASSIFICATION	3.706057420891471E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.999829230546621	WITHOUT_CLASSIFICATION	1.7076945337896342E-4	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9987919502521313	WITHOUT_CLASSIFICATION	0.0012080497478686658	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9998025028454885	WITHOUT_CLASSIFICATION	1.974971545114637E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999544039437195	WITHOUT_CLASSIFICATION	4.559605628050835E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.9997658191644468	WITHOUT_CLASSIFICATION	2.3418083555318527E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9998995642101306	WITHOUT_CLASSIFICATION	1.004357898694344E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9995767624682135	WITHOUT_CLASSIFICATION	4.232375317864958E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998920879073027	WITHOUT_CLASSIFICATION	1.0791209269730057E-4	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.999951121443947	WITHOUT_CLASSIFICATION	4.887855605284024E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999888315264877	WITHOUT_CLASSIFICATION	1.1168473512308092E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997772747551995	WITHOUT_CLASSIFICATION	2.2272524480036962E-4	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9997772747551995	WITHOUT_CLASSIFICATION	2.2272524480036962E-4	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999827766849722	WITHOUT_CLASSIFICATION	1.7223315027916596E-5	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9998785252100882	WITHOUT_CLASSIFICATION	1.2147478991169134E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999392351681936	WITHOUT_CLASSIFICATION	6.0764831806301867E-5	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9973990607996113	WITHOUT_CLASSIFICATION	0.0026009392003886636	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9926363748440087	WITHOUT_CLASSIFICATION	0.007363625155991343	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9846618390496967	WITHOUT_CLASSIFICATION	0.015338160950303345	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9995511113616807	WITHOUT_CLASSIFICATION	4.488886383192601E-4	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9995181954193395	WITHOUT_CLASSIFICATION	4.81804580660464E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999476991735174	WITHOUT_CLASSIFICATION	5.2300826482419535E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.9999526385758933	WITHOUT_CLASSIFICATION	4.7361424106638435E-5	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.9999987381598587	WITHOUT_CLASSIFICATION	1.2618401412498783E-6	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999829785745623	WITHOUT_CLASSIFICATION	1.7021425437701176E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998739478872766	WITHOUT_CLASSIFICATION	1.2605211272347357E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998739478872766	WITHOUT_CLASSIFICATION	1.2605211272347357E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998739478872766	WITHOUT_CLASSIFICATION	1.2605211272347357E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999355684076183	WITHOUT_CLASSIFICATION	6.443159238172704E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.999950896240245	WITHOUT_CLASSIFICATION	4.9103759754990746E-5	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999628358372321	WITHOUT_CLASSIFICATION	3.7164162767957836E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.9935222399810124	WITHOUT_CLASSIFICATION	0.006477760018987559	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9993737587598119	WITHOUT_CLASSIFICATION	6.262412401880655E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999928061943887	WITHOUT_CLASSIFICATION	7.193805611359453E-6	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9978746366432081	WITHOUT_CLASSIFICATION	0.00212536335679196	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9994546387662553	WITHOUT_CLASSIFICATION	5.453612337447359E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.9999237473720782	WITHOUT_CLASSIFICATION	7.625262792171217E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999418906511519	WITHOUT_CLASSIFICATION	5.8109348848139105E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999218066298577	WITHOUT_CLASSIFICATION	7.819337014222147E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999218066298577	WITHOUT_CLASSIFICATION	7.819337014222147E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9996354021613474	WITHOUT_CLASSIFICATION	3.645978386527072E-4	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9996594128650218	WITHOUT_CLASSIFICATION	3.4058713497823627E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9998841793638209	WITHOUT_CLASSIFICATION	1.1582063617909238E-4	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998018846729058	WITHOUT_CLASSIFICATION	1.9811532709411564E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.9996002455888716	WITHOUT_CLASSIFICATION	3.9975441112836735E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999424445067701	WITHOUT_CLASSIFICATION	5.755549322995881E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999935051489585	WITHOUT_CLASSIFICATION	6.494851041600222E-6	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9998690173831012	WITHOUT_CLASSIFICATION	1.3098261689889435E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9999666551957049	WITHOUT_CLASSIFICATION	3.334480429502384E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9997853969463467	WITHOUT_CLASSIFICATION	2.1460305365337436E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.9947766423558176	WITHOUT_CLASSIFICATION	0.0052233576441823295	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999684924606762	WITHOUT_CLASSIFICATION	3.150753932377296E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9996770179619046	WITHOUT_CLASSIFICATION	3.229820380954614E-4	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997871876247387	WITHOUT_CLASSIFICATION	2.1281237526131624E-4	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9997896833951228	WITHOUT_CLASSIFICATION	2.1031660487717867E-4	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.9963917119086444	WITHOUT_CLASSIFICATION	0.003608288091355609	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.9996130465968236	WITHOUT_CLASSIFICATION	3.869534031763971E-4	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9998888296167282	WITHOUT_CLASSIFICATION	1.1117038327170465E-4	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.999971826862659	WITHOUT_CLASSIFICATION	2.8173137341072295E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999577506985298	WITHOUT_CLASSIFICATION	4.2249301470275116E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9995273301162527	WITHOUT_CLASSIFICATION	4.7266988374726655E-4	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9983910339951314	WITHOUT_CLASSIFICATION	0.0016089660048685425	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999728695241287	WITHOUT_CLASSIFICATION	2.7130475871356388E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.9999476641822107	WITHOUT_CLASSIFICATION	5.23358177893657E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9982224919722648	WITHOUT_CLASSIFICATION	0.001777508027735218	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999813594432578	WITHOUT_CLASSIFICATION	1.8640556742113357E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999759965938612	WITHOUT_CLASSIFICATION	2.4003406138846906E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999451168311109	WITHOUT_CLASSIFICATION	5.4883168889230044E-5	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9997783236718716	WITHOUT_CLASSIFICATION	2.216763281283841E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9998123700980942	WITHOUT_CLASSIFICATION	1.876299019057987E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999621382954597	WITHOUT_CLASSIFICATION	3.7861704540237364E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9993524314660935	WITHOUT_CLASSIFICATION	6.475685339064742E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.9995818481881268	WITHOUT_CLASSIFICATION	4.1815181187320805E-4	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.999797033498302	WITHOUT_CLASSIFICATION	2.0296650169816997E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9989948208770829	WITHOUT_CLASSIFICATION	0.0010051791229169888	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9999578427690966	WITHOUT_CLASSIFICATION	4.2157230903441085E-5	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9999026861874407	WITHOUT_CLASSIFICATION	9.731381255926035E-5	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999599782892185	WITHOUT_CLASSIFICATION	4.002171078146672E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995139816810135	WITHOUT_CLASSIFICATION	4.860183189864747E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.999960408224648	WITHOUT_CLASSIFICATION	3.959177535199529E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9983266821642985	WITHOUT_CLASSIFICATION	0.0016733178357014732	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9998388939473174	WITHOUT_CLASSIFICATION	1.6110605268255783E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999631970811892	WITHOUT_CLASSIFICATION	3.680291881085625E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9785201580331211	WITHOUT_CLASSIFICATION	0.021479841966878938	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9998616819619307	WITHOUT_CLASSIFICATION	1.383180380692469E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998378407931625	WITHOUT_CLASSIFICATION	1.6215920683741177E-4	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.999981879836883	WITHOUT_CLASSIFICATION	1.8120163117015747E-5	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.9998700113705024	WITHOUT_CLASSIFICATION	1.2998862949766698E-4	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9991716179233099	WITHOUT_CLASSIFICATION	8.283820766900708E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999567696655328	WITHOUT_CLASSIFICATION	4.3230334467245984E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9996525841965055	WITHOUT_CLASSIFICATION	3.4741580349451626E-4	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999249234754323	WITHOUT_CLASSIFICATION	7.507652456780778E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9995172151085411	WITHOUT_CLASSIFICATION	4.8278489145892864E-4	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9989600252620959	WITHOUT_CLASSIFICATION	0.0010399747379041054	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.9998539610059639	WITHOUT_CLASSIFICATION	1.4603899403599894E-4	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9998650377129729	WITHOUT_CLASSIFICATION	1.3496228702710068E-4	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9995214703478174	WITHOUT_CLASSIFICATION	4.785296521826602E-4	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9997540946914435	WITHOUT_CLASSIFICATION	2.4590530855652244E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998334958989119	WITHOUT_CLASSIFICATION	1.665041010880415E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.9963079489018891	WITHOUT_CLASSIFICATION	0.0036920510981109486	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9998093937002049	WITHOUT_CLASSIFICATION	1.9060629979501884E-4	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9983290608894488	WITHOUT_CLASSIFICATION	0.0016709391105510455	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.99966093871167	WITHOUT_CLASSIFICATION	3.390612883299684E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.999988495172041	WITHOUT_CLASSIFICATION	1.1504827958918142E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9995267853628973	WITHOUT_CLASSIFICATION	4.732146371027282E-4	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9995267853628973	WITHOUT_CLASSIFICATION	4.732146371027282E-4	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999769116270277	WITHOUT_CLASSIFICATION	2.3088372972271973E-5	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999530809484227	WITHOUT_CLASSIFICATION	4.691905157716777E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998982273560627	WITHOUT_CLASSIFICATION	1.0177264393725359E-4	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9994142421931346	WITHOUT_CLASSIFICATION	5.857578068654755E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999555817835984	WITHOUT_CLASSIFICATION	4.4418216401540005E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9994593034680985	WITHOUT_CLASSIFICATION	5.406965319013727E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998335888711062	WITHOUT_CLASSIFICATION	1.664111288937881E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999644246747088	WITHOUT_CLASSIFICATION	3.557532529124128E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999483049259671	WITHOUT_CLASSIFICATION	5.169507403298188E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999909113489327	WITHOUT_CLASSIFICATION	9.088651067417766E-6	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9998902441224908	WITHOUT_CLASSIFICATION	1.0975587750925971E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9959664121095732	WITHOUT_CLASSIFICATION	0.004033587890426833	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9475551612976859	WITHOUT_CLASSIFICATION	0.05244483870231413	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9998202939266104	WITHOUT_CLASSIFICATION	1.7970607338971292E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.999926760598294	WITHOUT_CLASSIFICATION	7.32394017059954E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9998952580676632	WITHOUT_CLASSIFICATION	1.0474193233671103E-4	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.9997032996281155	WITHOUT_CLASSIFICATION	2.967003718845097E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999547470513276	WITHOUT_CLASSIFICATION	4.525294867247557E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999919796127608	WITHOUT_CLASSIFICATION	8.020387239312993E-6	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9998975393501974	WITHOUT_CLASSIFICATION	1.0246064980255733E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.999991823050819	WITHOUT_CLASSIFICATION	8.176949180933583E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.999991823050819	WITHOUT_CLASSIFICATION	8.176949180933583E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.999944148728352	WITHOUT_CLASSIFICATION	5.585127164799053E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999863284881056	WITHOUT_CLASSIFICATION	1.3671511894441015E-5	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999647909811398	WITHOUT_CLASSIFICATION	3.520901886016394E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.9939473312663439	WITHOUT_CLASSIFICATION	0.006052668733656058	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.999512425475929	WITHOUT_CLASSIFICATION	4.875745240710324E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9997984224599294	WITHOUT_CLASSIFICATION	2.0157754007062988E-4	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9997984224599294	WITHOUT_CLASSIFICATION	2.0157754007062988E-4	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9607511498511291	WITHOUT_CLASSIFICATION	0.03924885014887095	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999387350392963	WITHOUT_CLASSIFICATION	6.126496070367566E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999387350392963	WITHOUT_CLASSIFICATION	6.126496070367566E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9985833032897715	WITHOUT_CLASSIFICATION	0.00141669671022848	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992053754728616	WITHOUT_CLASSIFICATION	7.946245271384138E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9992053754728616	WITHOUT_CLASSIFICATION	7.946245271384138E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999535878236974	WITHOUT_CLASSIFICATION	4.641217630268407E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.9999535878236974	WITHOUT_CLASSIFICATION	4.641217630268407E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999262959934608	WITHOUT_CLASSIFICATION	7.370400653921542E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999956044877815	WITHOUT_CLASSIFICATION	4.3955122185292064E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999906028021716	WITHOUT_CLASSIFICATION	9.397197828396138E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.9998055836742025	WITHOUT_CLASSIFICATION	1.9441632579740293E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9995916407793933	WITHOUT_CLASSIFICATION	4.0835922060666397E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999464412852914	WITHOUT_CLASSIFICATION	5.355871470863915E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.9998407684444257	WITHOUT_CLASSIFICATION	1.59231555574413E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999464412852914	WITHOUT_CLASSIFICATION	5.355871470863915E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9965211726594161	WITHOUT_CLASSIFICATION	0.003478827340583857	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999016153076512	WITHOUT_CLASSIFICATION	9.838469234876621E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9998821624047212	WITHOUT_CLASSIFICATION	1.1783759527888168E-4	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9999450900210759	WITHOUT_CLASSIFICATION	5.4909978924052854E-5	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.999942895460035	WITHOUT_CLASSIFICATION	5.710453996496189E-5	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9928853659720942	WITHOUT_CLASSIFICATION	0.00711463402790589	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9999111489895334	WITHOUT_CLASSIFICATION	8.885101046660903E-5	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999278590430717	WITHOUT_CLASSIFICATION	7.21409569283271E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9996910180443668	WITHOUT_CLASSIFICATION	3.089819556332909E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9995092525557613	WITHOUT_CLASSIFICATION	4.907474442387488E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9996949327217397	WITHOUT_CLASSIFICATION	3.0506727826036935E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9998657538077717	WITHOUT_CLASSIFICATION	1.3424619222835414E-4	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999326494311249	WITHOUT_CLASSIFICATION	6.735056887512287E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9997198849452962	WITHOUT_CLASSIFICATION	2.801150547037591E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.999906811225298	WITHOUT_CLASSIFICATION	9.318877470193356E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.999186395634281	WITHOUT_CLASSIFICATION	8.136043657189231E-4	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.999801594052766	WITHOUT_CLASSIFICATION	1.9840594723394438E-4	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9998306403519037	WITHOUT_CLASSIFICATION	1.6935964809629178E-4	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9995020516357781	WITHOUT_CLASSIFICATION	4.979483642218617E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9529970975001466	WITHOUT_CLASSIFICATION	0.04700290249985343	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9994839029437654	WITHOUT_CLASSIFICATION	5.160970562345594E-4	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9999823347160677	WITHOUT_CLASSIFICATION	1.7665283932350983E-5	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.999983691086904	WITHOUT_CLASSIFICATION	1.6308913096002932E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9998688929019175	WITHOUT_CLASSIFICATION	1.3110709808248882E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999248819330839	WITHOUT_CLASSIFICATION	7.511806691601244E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.999824118147339	WITHOUT_CLASSIFICATION	1.7588185266104503E-4	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9999726547907511	WITHOUT_CLASSIFICATION	2.7345209248836103E-5	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999629732956259	WITHOUT_CLASSIFICATION	3.702670437410017E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.9998916058282065	WITHOUT_CLASSIFICATION	1.0839417179351108E-4	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.999858795339534	WITHOUT_CLASSIFICATION	1.412046604658681E-4	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999599800672389	WITHOUT_CLASSIFICATION	4.001993276122094E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.9999734587201706	WITHOUT_CLASSIFICATION	2.6541279829308097E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9998125443330563	WITHOUT_CLASSIFICATION	1.8745566694363655E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9998372836944066	WITHOUT_CLASSIFICATION	1.6271630559337152E-4	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.999849483389402	WITHOUT_CLASSIFICATION	1.5051661059793146E-4	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9997583422360935	WITHOUT_CLASSIFICATION	2.4165776390663022E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9999167731114473	WITHOUT_CLASSIFICATION	8.322688855259944E-5	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999351939640091	WITHOUT_CLASSIFICATION	6.48060359909141E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9997583422360935	WITHOUT_CLASSIFICATION	2.4165776390663022E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999616120474466	WITHOUT_CLASSIFICATION	3.8387952553484526E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.9998241296098176	WITHOUT_CLASSIFICATION	1.7587039018233114E-4	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9998373153750668	WITHOUT_CLASSIFICATION	1.6268462493322424E-4	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.9998970011200036	WITHOUT_CLASSIFICATION	1.029988799964853E-4	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999391877775387	WITHOUT_CLASSIFICATION	6.081222246130995E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.9999281058168821	WITHOUT_CLASSIFICATION	7.189418311787469E-5	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.999877503097968	WITHOUT_CLASSIFICATION	1.2249690203194928E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999546204024226	WITHOUT_CLASSIFICATION	4.537959757743757E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998726883858259	WITHOUT_CLASSIFICATION	1.2731161417414276E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9998574700445555	WITHOUT_CLASSIFICATION	1.4252995544456466E-4	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999385301155298	WITHOUT_CLASSIFICATION	6.146988447027252E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999968112639092	WITHOUT_CLASSIFICATION	3.1887360908885442E-6	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.998744582273639	WITHOUT_CLASSIFICATION	0.001255417726360897	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9999904261802203	WITHOUT_CLASSIFICATION	9.57381977964707E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999983032666743	WITHOUT_CLASSIFICATION	1.6967333256673079E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999983032666743	WITHOUT_CLASSIFICATION	1.6967333256673079E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9982293757774439	WITHOUT_CLASSIFICATION	0.0017706242225562364	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9993532426880145	WITHOUT_CLASSIFICATION	6.467573119855364E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9919507356368534	WITHOUT_CLASSIFICATION	0.008049264363146628	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999422116498936	WITHOUT_CLASSIFICATION	5.7788350106304926E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9997214928853863	WITHOUT_CLASSIFICATION	2.785071146137787E-4	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999519736742755	WITHOUT_CLASSIFICATION	4.8026325724481476E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9610926390681654	WITHOUT_CLASSIFICATION	0.03890736093183453	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999680377644341	WITHOUT_CLASSIFICATION	3.196223556580723E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9998521423889798	WITHOUT_CLASSIFICATION	1.478576110202087E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9998382383291301	WITHOUT_CLASSIFICATION	1.617616708698024E-4	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999915571702059	WITHOUT_CLASSIFICATION	8.442829794118819E-6	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999915571702059	WITHOUT_CLASSIFICATION	8.442829794118819E-6	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9998757018596487	WITHOUT_CLASSIFICATION	1.2429814035119433E-4	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9996961890181078	WITHOUT_CLASSIFICATION	3.0381098189230255E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9987478507301154	WITHOUT_CLASSIFICATION	0.0012521492698845615	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.9998425756745335	WITHOUT_CLASSIFICATION	1.574243254664566E-4	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.9999746553324291	WITHOUT_CLASSIFICATION	2.534466757078982E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.9999924285222503	WITHOUT_CLASSIFICATION	7.571477749596146E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999813514057854	WITHOUT_CLASSIFICATION	1.8648594214670583E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9993620378386776	WITHOUT_CLASSIFICATION	6.379621613224643E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999976724050685	WITHOUT_CLASSIFICATION	2.327594931548161E-6	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9997775499035664	WITHOUT_CLASSIFICATION	2.2245009643350063E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9997819397770724	WITHOUT_CLASSIFICATION	2.1806022292759065E-4	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9993849691437517	WITHOUT_CLASSIFICATION	6.150308562481937E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998296676084264	WITHOUT_CLASSIFICATION	1.7033239157360498E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9998296676084264	WITHOUT_CLASSIFICATION	1.7033239157360498E-4	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9987081898921576	WITHOUT_CLASSIFICATION	0.0012918101078424487	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.999993176321995	WITHOUT_CLASSIFICATION	6.823678004948947E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9997976051023599	WITHOUT_CLASSIFICATION	2.0239489764006826E-4	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9993195792685483	WITHOUT_CLASSIFICATION	6.804207314517544E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9997631591171167	WITHOUT_CLASSIFICATION	2.368408828832979E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9998445204656544	WITHOUT_CLASSIFICATION	1.554795343456469E-4	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9996126787937929	WITHOUT_CLASSIFICATION	3.873212062071032E-4	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999327462333195	WITHOUT_CLASSIFICATION	6.72537666804984E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9977263410380132	WITHOUT_CLASSIFICATION	0.0022736589619867685	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999438581313747	WITHOUT_CLASSIFICATION	5.6141868625331226E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9987478507301154	WITHOUT_CLASSIFICATION	0.0012521492698845615	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9988398640969162	WITHOUT_CLASSIFICATION	0.001160135903083828	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9981291486994002	WITHOUT_CLASSIFICATION	0.0018708513005998807	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.999986738747078	WITHOUT_CLASSIFICATION	1.326125292194599E-5	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9998525399125339	WITHOUT_CLASSIFICATION	1.474600874661086E-4	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999408850110685	WITHOUT_CLASSIFICATION	5.9114988931471405E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9998972702837943	WITHOUT_CLASSIFICATION	1.0272971620577966E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999839941939203	WITHOUT_CLASSIFICATION	1.6005806079678592E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9981083202907144	WITHOUT_CLASSIFICATION	0.001891679709285533	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9997236154112307	WITHOUT_CLASSIFICATION	2.763845887693339E-4	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9994444008475275	WITHOUT_CLASSIFICATION	5.555991524724563E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998239216052128	WITHOUT_CLASSIFICATION	1.7607839478715783E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.999987606573134	WITHOUT_CLASSIFICATION	1.2393426866025444E-5	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999318356823048	WITHOUT_CLASSIFICATION	6.816431769523017E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.999817228694627	WITHOUT_CLASSIFICATION	1.8277130537307077E-4	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9998218346119963	WITHOUT_CLASSIFICATION	1.7816538800377121E-4	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.999886439156641	WITHOUT_CLASSIFICATION	1.1356084335904143E-4	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9958984863462642	WITHOUT_CLASSIFICATION	0.004101513653735786	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.999903781494864	WITHOUT_CLASSIFICATION	9.621850513601912E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.999826635710371	WITHOUT_CLASSIFICATION	1.7336428962905136E-4	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9982933851014602	WITHOUT_CLASSIFICATION	0.0017066148985399065	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999983286306416	WITHOUT_CLASSIFICATION	1.6713693583499072E-6	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999296903353353	WITHOUT_CLASSIFICATION	7.030966466472497E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9974590393583713	WITHOUT_CLASSIFICATION	0.0025409606416287142	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9998725643199182	WITHOUT_CLASSIFICATION	1.2743568008179593E-4	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.9994597308865218	WITHOUT_CLASSIFICATION	5.402691134781476E-4	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9997295740730239	WITHOUT_CLASSIFICATION	2.7042592697613856E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999213558188518	WITHOUT_CLASSIFICATION	7.86441811481605E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9920835451831316	WITHOUT_CLASSIFICATION	0.007916454816868469	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9997702630363878	WITHOUT_CLASSIFICATION	2.297369636122508E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.9997702630363878	WITHOUT_CLASSIFICATION	2.297369636122508E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9998314657171565	WITHOUT_CLASSIFICATION	1.6853428284359763E-4	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9998079172774377	WITHOUT_CLASSIFICATION	1.9208272256236614E-4	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9999167663497626	WITHOUT_CLASSIFICATION	8.3233650237361E-5	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.99986624660659	WITHOUT_CLASSIFICATION	1.3375339340995857E-4	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999724996050329	WITHOUT_CLASSIFICATION	2.7500394967140693E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9999503067354986	WITHOUT_CLASSIFICATION	4.9693264501457114E-5	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.9999551795034173	WITHOUT_CLASSIFICATION	4.482049658273774E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.998538609301379	WITHOUT_CLASSIFICATION	0.0014613906986209783	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998155300327259	WITHOUT_CLASSIFICATION	1.8446996727414057E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9996354021613474	WITHOUT_CLASSIFICATION	3.645978386527072E-4	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999856044536429	WITHOUT_CLASSIFICATION	1.4395546357156311E-5	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.9948180123236011	WITHOUT_CLASSIFICATION	0.0051819876763988405	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.9998378407931625	WITHOUT_CLASSIFICATION	1.6215920683741177E-4	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9998407080736573	WITHOUT_CLASSIFICATION	1.5929192634270254E-4	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9994174989825414	WITHOUT_CLASSIFICATION	5.825010174585092E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9998410061671292	WITHOUT_CLASSIFICATION	1.5899383287078705E-4	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999995101268562	WITHOUT_CLASSIFICATION	4.898731438302321E-7	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.999885500918783	WITHOUT_CLASSIFICATION	1.1449908121700261E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9995726073752844	WITHOUT_CLASSIFICATION	4.273926247155749E-4	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9997553030740948	WITHOUT_CLASSIFICATION	2.4469692590517163E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9996676377843063	WITHOUT_CLASSIFICATION	3.323622156936537E-4	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999336765259399	WITHOUT_CLASSIFICATION	6.632347406006313E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9989436294045798	WITHOUT_CLASSIFICATION	0.00105637059542024	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9998602294443304	WITHOUT_CLASSIFICATION	1.3977055566968903E-4	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9999094019198461	WITHOUT_CLASSIFICATION	9.059808015390622E-5	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999966016967448	WITHOUT_CLASSIFICATION	3.3983032552738116E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999516918895062	WITHOUT_CLASSIFICATION	4.830811049369072E-5	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.999937553690687	WITHOUT_CLASSIFICATION	6.244630931299246E-5	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.999592976455219	WITHOUT_CLASSIFICATION	4.0702354478098796E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999933381470402	WITHOUT_CLASSIFICATION	6.661852959880368E-6	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.9999558847495608	WITHOUT_CLASSIFICATION	4.4115250439167905E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999702001344359	WITHOUT_CLASSIFICATION	2.979986556411864E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9998245409856309	WITHOUT_CLASSIFICATION	1.7545901436916378E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9998461867387175	WITHOUT_CLASSIFICATION	1.5381326128241016E-4	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9998935030313504	WITHOUT_CLASSIFICATION	1.0649696864958978E-4	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.999997701174312	WITHOUT_CLASSIFICATION	2.298825688035169E-6	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9999775904475531	WITHOUT_CLASSIFICATION	2.2409552446920473E-5	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999770560612498	WITHOUT_CLASSIFICATION	2.2943938750202915E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.999960495487696	WITHOUT_CLASSIFICATION	3.9504512304001E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.8529886438384144	WITHOUT_CLASSIFICATION	0.1470113561615856	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.997549619719712	WITHOUT_CLASSIFICATION	0.0024503802802880253	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9985466105835509	WITHOUT_CLASSIFICATION	0.001453389416449064	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999246230182602	WITHOUT_CLASSIFICATION	7.537698173972615E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9998681328949266	WITHOUT_CLASSIFICATION	1.318671050733664E-4	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9997751500242048	WITHOUT_CLASSIFICATION	2.2484997579520362E-4	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.9971115519429065	WITHOUT_CLASSIFICATION	0.002888448057093519	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.9987840977376027	WITHOUT_CLASSIFICATION	0.0012159022623973506	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999826066741765	WITHOUT_CLASSIFICATION	1.73933258235491E-5	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9998518595529584	WITHOUT_CLASSIFICATION	1.4814044704170568E-4	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9993007160322368	WITHOUT_CLASSIFICATION	6.99283967763218E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9993732146655013	WITHOUT_CLASSIFICATION	6.267853344986668E-4	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9998824591954671	WITHOUT_CLASSIFICATION	1.1754080453293368E-4	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999714222990338	WITHOUT_CLASSIFICATION	2.8577700966258075E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9998666882569278	WITHOUT_CLASSIFICATION	1.3331174307214477E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9998541380861121	WITHOUT_CLASSIFICATION	1.4586191388795504E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.999789578319881	WITHOUT_CLASSIFICATION	2.10421680118961E-4	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9995878007533583	WITHOUT_CLASSIFICATION	4.121992466417619E-4	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.999573260829484	WITHOUT_CLASSIFICATION	4.2673917051606495E-4	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999263058906416	WITHOUT_CLASSIFICATION	7.369410935851335E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999263058906416	WITHOUT_CLASSIFICATION	7.369410935851335E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9914435478211142	WITHOUT_CLASSIFICATION	0.00855645217888575	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.9443936228628119	WITHOUT_CLASSIFICATION	0.05560637713718813	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9998953545579982	WITHOUT_CLASSIFICATION	1.0464544200185088E-4	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9807210265566707	WITHOUT_CLASSIFICATION	0.019278973443329392	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9998920210150046	WITHOUT_CLASSIFICATION	1.079789849953088E-4	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999817480177183	WITHOUT_CLASSIFICATION	1.825198228171004E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9996983969107738	WITHOUT_CLASSIFICATION	3.0160308922617235E-4	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9897012367275504	WITHOUT_CLASSIFICATION	0.010298763272449501	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999994482110386	WITHOUT_CLASSIFICATION	5.517889614338007E-7	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.9985848576068272	WITHOUT_CLASSIFICATION	0.0014151423931727826	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9993241341862326	WITHOUT_CLASSIFICATION	6.758658137673368E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999595061823391	WITHOUT_CLASSIFICATION	4.04938176609146E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9983050417916285	WITHOUT_CLASSIFICATION	0.0016949582083715029	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999831499349805	WITHOUT_CLASSIFICATION	1.685006501958185E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999557156613383	WITHOUT_CLASSIFICATION	4.428433866159477E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.980774492408831	WITHOUT_CLASSIFICATION	0.01922550759116898	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9991898994444796	WITHOUT_CLASSIFICATION	8.101005555204876E-4	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9996581379668196	WITHOUT_CLASSIFICATION	3.418620331804513E-4	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999180849970825	WITHOUT_CLASSIFICATION	8.191500291751666E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9288914808914001	WITHOUT_CLASSIFICATION	0.07110851910859996	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999715265781922	WITHOUT_CLASSIFICATION	2.8473421807729187E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9982358242663733	WITHOUT_CLASSIFICATION	0.0017641757336267334	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9997181550131121	WITHOUT_CLASSIFICATION	2.81844986887907E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.999606208127267	WITHOUT_CLASSIFICATION	3.9379187273311434E-4	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9997178281284376	WITHOUT_CLASSIFICATION	2.821718715624433E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9998284109429922	WITHOUT_CLASSIFICATION	1.715890570077716E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9997978313803566	WITHOUT_CLASSIFICATION	2.0216861964335683E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999539689291078	WITHOUT_CLASSIFICATION	4.603107089220726E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.999314882376812	WITHOUT_CLASSIFICATION	6.851176231879884E-4	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999681945308005	WITHOUT_CLASSIFICATION	3.18054691994553E-5	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999352962017038	WITHOUT_CLASSIFICATION	6.47037982961092E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999716713836798	WITHOUT_CLASSIFICATION	2.832861632016855E-5	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999842872763548	WITHOUT_CLASSIFICATION	1.571272364519994E-5	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9995424501031063	WITHOUT_CLASSIFICATION	4.5754989689362043E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.999799486658551	WITHOUT_CLASSIFICATION	2.0051334144905635E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9999751718926875	WITHOUT_CLASSIFICATION	2.48281073126269E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999072077977803	WITHOUT_CLASSIFICATION	9.279220221975146E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999072077977803	WITHOUT_CLASSIFICATION	9.279220221975146E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9998345560377891	WITHOUT_CLASSIFICATION	1.6544396221080773E-4	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9998400804981806	WITHOUT_CLASSIFICATION	1.5991950181939253E-4	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9885146831498399	WITHOUT_CLASSIFICATION	0.01148531685016011	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.9999638043406429	WITHOUT_CLASSIFICATION	3.619565935716056E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9995511615687879	WITHOUT_CLASSIFICATION	4.488384312121017E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999965152677308	WITHOUT_CLASSIFICATION	3.484732269193119E-5	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9997530508843853	WITHOUT_CLASSIFICATION	2.469491156147341E-4	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999717337382804	WITHOUT_CLASSIFICATION	2.8266261719532514E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999487433620411	WITHOUT_CLASSIFICATION	5.125663795901538E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999891918110257	WITHOUT_CLASSIFICATION	1.0808188974194429E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9999499172807729	WITHOUT_CLASSIFICATION	5.0082719227081015E-5	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.999964558037132	WITHOUT_CLASSIFICATION	3.54419628680045E-5	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999758529036279	WITHOUT_CLASSIFICATION	2.4147096372170722E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9998652955119779	WITHOUT_CLASSIFICATION	1.3470448802219089E-4	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9999996322481891	WITHOUT_CLASSIFICATION	3.6775181089656293E-7	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9999066425709628	WITHOUT_CLASSIFICATION	9.335742903723386E-5	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999521444628194	WITHOUT_CLASSIFICATION	4.785553718060708E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9996567391298824	WITHOUT_CLASSIFICATION	3.4326087011756813E-4	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9997870829010372	WITHOUT_CLASSIFICATION	2.1291709896285844E-4	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999097583673977	WITHOUT_CLASSIFICATION	9.024163260235016E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.999383188546969	WITHOUT_CLASSIFICATION	6.168114530310569E-4	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9995813679198868	WITHOUT_CLASSIFICATION	4.186320801131755E-4	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.999963610693068	WITHOUT_CLASSIFICATION	3.638930693191701E-5	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9999542028124999	WITHOUT_CLASSIFICATION	4.579718750006905E-5	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9987143401807533	WITHOUT_CLASSIFICATION	0.0012856598192466605	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999765509511843	WITHOUT_CLASSIFICATION	2.344904881568554E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9996209084706535	WITHOUT_CLASSIFICATION	3.790915293464513E-4	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9994364387947741	WITHOUT_CLASSIFICATION	5.635612052258876E-4	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9995190059388969	WITHOUT_CLASSIFICATION	4.8099406110317774E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9998277281528682	WITHOUT_CLASSIFICATION	1.7227184713170175E-4	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999987648548667	WITHOUT_CLASSIFICATION	1.2351451333271603E-6	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9996496194374281	WITHOUT_CLASSIFICATION	3.503805625719063E-4	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999860157239062	WITHOUT_CLASSIFICATION	1.3984276093686904E-5	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9999862781163272	WITHOUT_CLASSIFICATION	1.3721883672776156E-5	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9998972656784166	WITHOUT_CLASSIFICATION	1.0273432158329532E-4	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9998942042823893	WITHOUT_CLASSIFICATION	1.0579571761066501E-4	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997829426009928	WITHOUT_CLASSIFICATION	2.170573990072718E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9997808556743323	WITHOUT_CLASSIFICATION	2.1914432566767244E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9997574923736698	WITHOUT_CLASSIFICATION	2.4250762633010238E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.999810794896946	WITHOUT_CLASSIFICATION	1.8920510305404798E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999076659077515	WITHOUT_CLASSIFICATION	9.233409224850063E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.9986836639435114	WITHOUT_CLASSIFICATION	0.0013163360564886959	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9911383619702889	WITHOUT_CLASSIFICATION	0.00886163802971107	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9998283420190478	WITHOUT_CLASSIFICATION	1.716579809522193E-4	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9991413495590525	WITHOUT_CLASSIFICATION	8.5865044094745E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9990535485022293	WITHOUT_CLASSIFICATION	9.464514977706566E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9993404888038276	WITHOUT_CLASSIFICATION	6.595111961723134E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9993917018880087	WITHOUT_CLASSIFICATION	6.082981119912604E-4	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999539689291078	WITHOUT_CLASSIFICATION	4.603107089220726E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.9996243054971441	WITHOUT_CLASSIFICATION	3.7569450285588403E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9995466158783277	WITHOUT_CLASSIFICATION	4.5338412167228274E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999140644778112	WITHOUT_CLASSIFICATION	8.593552218888821E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9999654263938254	WITHOUT_CLASSIFICATION	3.457360617475148E-5	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9998965469281265	WITHOUT_CLASSIFICATION	1.0345307187357855E-4	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9996222552786223	WITHOUT_CLASSIFICATION	3.7774472137783345E-4	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.99989650215712	WITHOUT_CLASSIFICATION	1.0349784287999391E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999006649719127	WITHOUT_CLASSIFICATION	9.933502808729635E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9997618497631194	WITHOUT_CLASSIFICATION	2.3815023688061787E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9997398567616147	WITHOUT_CLASSIFICATION	2.601432383852658E-4	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.9999722368403499	WITHOUT_CLASSIFICATION	2.7763159650187024E-5	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999614805414685	WITHOUT_CLASSIFICATION	3.8519458531506664E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9995852321070169	WITHOUT_CLASSIFICATION	4.147678929830268E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9996155498348311	WITHOUT_CLASSIFICATION	3.8445016516886485E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999631455215839	WITHOUT_CLASSIFICATION	3.6854478416040396E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998227570690362	WITHOUT_CLASSIFICATION	1.7724293096385308E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998089757086507	WITHOUT_CLASSIFICATION	1.9102429134933038E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9997483274211755	WITHOUT_CLASSIFICATION	2.516725788244995E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9995189574843368	WITHOUT_CLASSIFICATION	4.810425156632131E-4	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9969920679386065	WITHOUT_CLASSIFICATION	0.0030079320613935487	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9997998289459217	WITHOUT_CLASSIFICATION	2.0017105407828503E-4	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9998312085054842	WITHOUT_CLASSIFICATION	1.687914945156685E-4	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9989993110092549	WITHOUT_CLASSIFICATION	0.0010006889907450472	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9989980159133234	WITHOUT_CLASSIFICATION	0.0010019840866766158	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999722968692906	WITHOUT_CLASSIFICATION	2.7703130709438707E-5	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9999513813537757	WITHOUT_CLASSIFICATION	4.861864622422026E-5	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999350312394237	WITHOUT_CLASSIFICATION	6.496876057626196E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9998574034152267	WITHOUT_CLASSIFICATION	1.425965847732935E-4	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.9985849891007154	WITHOUT_CLASSIFICATION	0.0014150108992847061	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9998528185443702	WITHOUT_CLASSIFICATION	1.47181455629741E-4	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999446930850635	WITHOUT_CLASSIFICATION	5.530691493651467E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9983222718486712	WITHOUT_CLASSIFICATION	0.0016777281513288172	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9996552468116144	WITHOUT_CLASSIFICATION	3.447531883856631E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9995604821781003	WITHOUT_CLASSIFICATION	4.39517821899684E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9111174787753475	WITHOUT_CLASSIFICATION	0.08888252122465254	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999253285154414	WITHOUT_CLASSIFICATION	7.467148455867728E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9997709976626841	WITHOUT_CLASSIFICATION	2.2900233731598443E-4	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9998528185443702	WITHOUT_CLASSIFICATION	1.47181455629741E-4	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9983433711715652	WITHOUT_CLASSIFICATION	0.0016566288284347657	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.999961452539907	WITHOUT_CLASSIFICATION	3.854746009309993E-5	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999259064605115	WITHOUT_CLASSIFICATION	7.409353948845982E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.999876665582839	WITHOUT_CLASSIFICATION	1.2333441716100483E-4	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999525908403981	WITHOUT_CLASSIFICATION	4.7409159601944094E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9998178602530511	WITHOUT_CLASSIFICATION	1.8213974694883793E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999403998920684	WITHOUT_CLASSIFICATION	5.960010793158408E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9996414561163216	WITHOUT_CLASSIFICATION	3.58543883678419E-4	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9995599026573606	WITHOUT_CLASSIFICATION	4.4009734263942375E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.999765114730587	WITHOUT_CLASSIFICATION	2.3488526941298235E-4	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.999669855239905	WITHOUT_CLASSIFICATION	3.3014476009497615E-4	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9996514297624499	WITHOUT_CLASSIFICATION	3.48570237550149E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.9999582254273766	WITHOUT_CLASSIFICATION	4.177457262356192E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.999769851654759	WITHOUT_CLASSIFICATION	2.3014834524093857E-4	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.9998548131478913	WITHOUT_CLASSIFICATION	1.451868521087406E-4	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9997725101188801	WITHOUT_CLASSIFICATION	2.274898811199259E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.9999368992852236	WITHOUT_CLASSIFICATION	6.31007147764219E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999296599727187	WITHOUT_CLASSIFICATION	7.034002728136031E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9997372776667238	WITHOUT_CLASSIFICATION	2.627223332761394E-4	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999243989120429	WITHOUT_CLASSIFICATION	7.560108795705574E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9996656234070855	WITHOUT_CLASSIFICATION	3.3437659291446915E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.999647807284508	WITHOUT_CLASSIFICATION	3.5219271549206423E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9997814186424854	WITHOUT_CLASSIFICATION	2.1858135751472545E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999686167654095	WITHOUT_CLASSIFICATION	3.1383234590468315E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.999882483246039	WITHOUT_CLASSIFICATION	1.1751675396097586E-4	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9965041420079335	WITHOUT_CLASSIFICATION	0.0034958579920666014	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.9985165239102568	WITHOUT_CLASSIFICATION	0.0014834760897431897	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9998683159118875	WITHOUT_CLASSIFICATION	1.3168408811251625E-4	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9995997594152352	WITHOUT_CLASSIFICATION	4.002405847647809E-4	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9995159691811212	WITHOUT_CLASSIFICATION	4.840308188789344E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.9999263021026513	WITHOUT_CLASSIFICATION	7.369789734876116E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998981963636667	WITHOUT_CLASSIFICATION	1.018036363332992E-4	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999263058906416	WITHOUT_CLASSIFICATION	7.369410935851335E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9994567813305419	WITHOUT_CLASSIFICATION	5.432186694580669E-4	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999888014268062	WITHOUT_CLASSIFICATION	1.1198573193654826E-5	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9982926866906239	WITHOUT_CLASSIFICATION	0.0017073133093760842	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9998199490954703	WITHOUT_CLASSIFICATION	1.800509045297008E-4	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999760653745089	WITHOUT_CLASSIFICATION	2.39346254911641E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999504356857614	WITHOUT_CLASSIFICATION	4.9564314238640834E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999504356857614	WITHOUT_CLASSIFICATION	4.9564314238640834E-5	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9996000474026718	WITHOUT_CLASSIFICATION	3.9995259732818954E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.9994915109733865	WITHOUT_CLASSIFICATION	5.084890266135376E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9996347203061658	WITHOUT_CLASSIFICATION	3.652796938341929E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999363277092588	WITHOUT_CLASSIFICATION	6.367229074117342E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.9998056559507594	WITHOUT_CLASSIFICATION	1.9434404924057052E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999953719550595	WITHOUT_CLASSIFICATION	4.628044940487899E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.999836734158186	WITHOUT_CLASSIFICATION	1.6326584181395633E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9983497405474547	WITHOUT_CLASSIFICATION	0.0016502594525452795	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.99984362508667	WITHOUT_CLASSIFICATION	1.5637491332994708E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.99984362508667	WITHOUT_CLASSIFICATION	1.5637491332994708E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.99984362508667	WITHOUT_CLASSIFICATION	1.5637491332994708E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9997179801982283	WITHOUT_CLASSIFICATION	2.8201980177169477E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9785201580331211	WITHOUT_CLASSIFICATION	0.021479841966878938	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.999693531596843	WITHOUT_CLASSIFICATION	3.0646840315698073E-4	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.980774492408831	WITHOUT_CLASSIFICATION	0.01922550759116898	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9993366992625248	WITHOUT_CLASSIFICATION	6.633007374751105E-4	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9999450939379311	WITHOUT_CLASSIFICATION	5.490606206892857E-5	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.9998518597832978	WITHOUT_CLASSIFICATION	1.4814021670211234E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9999828469590131	WITHOUT_CLASSIFICATION	1.7153040986934675E-5	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9785201580331211	WITHOUT_CLASSIFICATION	0.021479841966878938	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999839112727354	WITHOUT_CLASSIFICATION	1.6088727264503393E-5	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999839112727354	WITHOUT_CLASSIFICATION	1.6088727264503393E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.999970848021613	WITHOUT_CLASSIFICATION	2.9151978387115644E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998560557935309	WITHOUT_CLASSIFICATION	1.4394420646899185E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996743036442716	WITHOUT_CLASSIFICATION	3.2569635572845043E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999116379284595	WITHOUT_CLASSIFICATION	8.836207154057994E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999956044877815	WITHOUT_CLASSIFICATION	4.3955122185292064E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999519713360733	WITHOUT_CLASSIFICATION	4.802866392674239E-5	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9988064146170395	WITHOUT_CLASSIFICATION	0.0011935853829605576	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.999520340116701	WITHOUT_CLASSIFICATION	4.796598832990219E-4	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.9996698727946987	WITHOUT_CLASSIFICATION	3.301272053013899E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9999599436006219	WITHOUT_CLASSIFICATION	4.005639937799777E-5	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.999982599581849	WITHOUT_CLASSIFICATION	1.7400418151033706E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9999242297521159	WITHOUT_CLASSIFICATION	7.577024788406512E-5	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9998390984210648	WITHOUT_CLASSIFICATION	1.6090157893522612E-4	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9993978755721425	WITHOUT_CLASSIFICATION	6.021244278574655E-4	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999787889298508	WITHOUT_CLASSIFICATION	2.1211070149228136E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999844521915998	WITHOUT_CLASSIFICATION	1.554780840023563E-5	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9997764773020177	WITHOUT_CLASSIFICATION	2.235226979823878E-4	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9996843520581606	WITHOUT_CLASSIFICATION	3.156479418392483E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9993026040544292	WITHOUT_CLASSIFICATION	6.973959455708966E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9989171824167083	WITHOUT_CLASSIFICATION	0.001082817583291634	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9998483734184904	WITHOUT_CLASSIFICATION	1.5162658150945325E-4	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9997181550131121	WITHOUT_CLASSIFICATION	2.81844986887907E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.999965152677308	WITHOUT_CLASSIFICATION	3.484732269193119E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999945413035305	WITHOUT_CLASSIFICATION	5.458696469575757E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9966010093507254	WITHOUT_CLASSIFICATION	0.0033989906492746793	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999679351217391	WITHOUT_CLASSIFICATION	3.2064878260897964E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9701850723256874	WITHOUT_CLASSIFICATION	0.02981492767431249	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998621502912534	WITHOUT_CLASSIFICATION	1.3784970874672329E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9998621502912534	WITHOUT_CLASSIFICATION	1.3784970874672329E-4	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9994974992564786	WITHOUT_CLASSIFICATION	5.0250074352153E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9998463160435141	WITHOUT_CLASSIFICATION	1.5368395648589198E-4	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9999528934180726	WITHOUT_CLASSIFICATION	4.710658192741435E-5	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.999961470045432	WITHOUT_CLASSIFICATION	3.852995456803552E-5	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9995551820323663	WITHOUT_CLASSIFICATION	4.4481796763368175E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999915382773057	WITHOUT_CLASSIFICATION	8.461722694283046E-6	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9999142685144489	WITHOUT_CLASSIFICATION	8.573148555112612E-5	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9999607378494471	WITHOUT_CLASSIFICATION	3.9262150552945346E-5	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999546268204027	WITHOUT_CLASSIFICATION	4.537317959729913E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999093405557283	WITHOUT_CLASSIFICATION	9.065944427172366E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.9999873686680822	WITHOUT_CLASSIFICATION	1.2631331917682053E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999917379210066	WITHOUT_CLASSIFICATION	8.262078993374055E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999561772654282	WITHOUT_CLASSIFICATION	4.3822734571772037E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999703896257514	WITHOUT_CLASSIFICATION	2.961037424859478E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9997392685088724	WITHOUT_CLASSIFICATION	2.607314911276147E-4	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998982273560627	WITHOUT_CLASSIFICATION	1.0177264393725359E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9990634263286957	WITHOUT_CLASSIFICATION	9.365736713042554E-4	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999840657349006	WITHOUT_CLASSIFICATION	1.5934265099404E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9999571288375061	WITHOUT_CLASSIFICATION	4.287116249386349E-5	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9828806005605045	WITHOUT_CLASSIFICATION	0.01711939943949549	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9999112278884859	WITHOUT_CLASSIFICATION	8.877211151416919E-5	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9996837482774786	WITHOUT_CLASSIFICATION	3.162517225213672E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999240847476761	WITHOUT_CLASSIFICATION	7.591525232391874E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9993654557313325	WITHOUT_CLASSIFICATION	6.345442686674227E-4	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9998325628277834	WITHOUT_CLASSIFICATION	1.6743717221667578E-4	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999561772654282	WITHOUT_CLASSIFICATION	4.3822734571772037E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9997907338643562	WITHOUT_CLASSIFICATION	2.0926613564380074E-4	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9997392685088724	WITHOUT_CLASSIFICATION	2.607314911276147E-4	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9995994482645798	WITHOUT_CLASSIFICATION	4.0055173542027374E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9977251045228028	WITHOUT_CLASSIFICATION	0.0022748954771971493	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999244872816717	WITHOUT_CLASSIFICATION	7.551271832828507E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9988861190642379	WITHOUT_CLASSIFICATION	0.0011138809357620668	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.9824480818251546	WITHOUT_CLASSIFICATION	0.01755191817484532	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9997126172728169	WITHOUT_CLASSIFICATION	2.87382727183056E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9998745952844152	WITHOUT_CLASSIFICATION	1.2540471558471984E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9998026702172313	WITHOUT_CLASSIFICATION	1.973297827686143E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9997516152293086	WITHOUT_CLASSIFICATION	2.4838477069152724E-4	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9997468742469123	WITHOUT_CLASSIFICATION	2.5312575308766E-4	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.9999876200386103	WITHOUT_CLASSIFICATION	1.2379961389630772E-5	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9990358844454639	WITHOUT_CLASSIFICATION	9.641155545360163E-4	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9998908832997054	WITHOUT_CLASSIFICATION	1.091167002945895E-4	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.999976200330706	WITHOUT_CLASSIFICATION	2.379966929394324E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999759893172805	WITHOUT_CLASSIFICATION	2.4010682719457454E-5	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999175794931772	WITHOUT_CLASSIFICATION	8.242050682286541E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999072077977803	WITHOUT_CLASSIFICATION	9.279220221975146E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999236790444672	WITHOUT_CLASSIFICATION	7.632095553277771E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9975856357355076	WITHOUT_CLASSIFICATION	0.002414364264492352	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.9996476422871362	WITHOUT_CLASSIFICATION	3.523577128638659E-4	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.9997032996281155	WITHOUT_CLASSIFICATION	2.967003718845097E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999385854026168	WITHOUT_CLASSIFICATION	6.141459738323829E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9998685202908384	WITHOUT_CLASSIFICATION	1.314797091615614E-4	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.9977739154680146	WITHOUT_CLASSIFICATION	0.002226084531985353	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9995727203940805	WITHOUT_CLASSIFICATION	4.2727960591943325E-4	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999000241209965	WITHOUT_CLASSIFICATION	9.997587900352724E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.998789211383357	WITHOUT_CLASSIFICATION	0.0012107886166430114	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999944419018527	WITHOUT_CLASSIFICATION	5.558098147291401E-5	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.999944419018527	WITHOUT_CLASSIFICATION	5.558098147291401E-5	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9975692358541105	WITHOUT_CLASSIFICATION	0.0024307641458893897	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.999972022422744	WITHOUT_CLASSIFICATION	2.7977577256000555E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999797745401375	WITHOUT_CLASSIFICATION	2.0225459862474604E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9992225819575714	WITHOUT_CLASSIFICATION	7.774180424286345E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999803436497475	WITHOUT_CLASSIFICATION	1.9656350252489338E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.9999939928455925	WITHOUT_CLASSIFICATION	6.0071544075069765E-6	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9998521375169555	WITHOUT_CLASSIFICATION	1.4786248304448529E-4	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999754273622735	WITHOUT_CLASSIFICATION	2.457263772652781E-5	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9995714929060763	WITHOUT_CLASSIFICATION	4.2850709392383584E-4	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9997683321155028	WITHOUT_CLASSIFICATION	2.316678844972402E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9997466810953951	WITHOUT_CLASSIFICATION	2.5331890460491825E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9998802533579612	WITHOUT_CLASSIFICATION	1.1974664203880092E-4	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9996348635490545	WITHOUT_CLASSIFICATION	3.651364509454759E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.936749942808041	WITHOUT_CLASSIFICATION	0.06325005719195885	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9997838126160796	WITHOUT_CLASSIFICATION	2.1618738392049515E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999189685025871	WITHOUT_CLASSIFICATION	8.103149741283557E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999799474718427	WITHOUT_CLASSIFICATION	2.0052528157301474E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.9986252420708474	WITHOUT_CLASSIFICATION	0.0013747579291526048	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.9999654376047409	WITHOUT_CLASSIFICATION	3.4562395259092124E-5	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999584926970841	WITHOUT_CLASSIFICATION	4.150730291597066E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9997912619020775	WITHOUT_CLASSIFICATION	2.087380979225138E-4	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.9999654376047409	WITHOUT_CLASSIFICATION	3.4562395259092124E-5	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9993564744663143	WITHOUT_CLASSIFICATION	6.435255336857447E-4	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9995584651532698	WITHOUT_CLASSIFICATION	4.4153484673008843E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999948209617509	WITHOUT_CLASSIFICATION	5.179038249111736E-5	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.999948209617509	WITHOUT_CLASSIFICATION	5.179038249111736E-5	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9999658964377636	WITHOUT_CLASSIFICATION	3.410356223640273E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999445420606057	WITHOUT_CLASSIFICATION	5.545793939437499E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997459567416882	WITHOUT_CLASSIFICATION	2.5404325831181E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9938855241950021	WITHOUT_CLASSIFICATION	0.006114475804997874	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999674739572451	WITHOUT_CLASSIFICATION	3.252604275489435E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9989010656037643	WITHOUT_CLASSIFICATION	0.0010989343962355856	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999330200907429	WITHOUT_CLASSIFICATION	6.697990925709983E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.996468971054834	WITHOUT_CLASSIFICATION	0.003531028945166069	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.9999917272834465	WITHOUT_CLASSIFICATION	8.272716553358994E-6	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999432509610486	WITHOUT_CLASSIFICATION	5.6749038951460806E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.9996243054971441	WITHOUT_CLASSIFICATION	3.7569450285588403E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9999570683266423	WITHOUT_CLASSIFICATION	4.2931673357529545E-5	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999718627365743	WITHOUT_CLASSIFICATION	2.813726342576576E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999189685025871	WITHOUT_CLASSIFICATION	8.103149741283557E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999674739572451	WITHOUT_CLASSIFICATION	3.252604275489435E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9875927345943983	WITHOUT_CLASSIFICATION	0.01240726540560175	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9875927345943983	WITHOUT_CLASSIFICATION	0.01240726540560175	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.929016531819514	WITHOUT_CLASSIFICATION	0.07098346818048588	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9999758717483622	WITHOUT_CLASSIFICATION	2.4128251637769358E-5	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9999479857189891	WITHOUT_CLASSIFICATION	5.201428101084434E-5	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9999333269216963	WITHOUT_CLASSIFICATION	6.667307830361861E-5	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999107583619308	WITHOUT_CLASSIFICATION	8.924163806928622E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999415036556257	WITHOUT_CLASSIFICATION	5.849634437424653E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9981087642524781	WITHOUT_CLASSIFICATION	0.0018912357475218801	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9984122353905884	WITHOUT_CLASSIFICATION	0.001587764609411504	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999480513167263	WITHOUT_CLASSIFICATION	5.194868327365523E-5	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999969359757093	WITHOUT_CLASSIFICATION	3.0640242907088565E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9992800361762789	WITHOUT_CLASSIFICATION	7.199638237210364E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999979492215139	WITHOUT_CLASSIFICATION	2.050778486249454E-6	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999267673915248	WITHOUT_CLASSIFICATION	7.323260847531138E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999799474718427	WITHOUT_CLASSIFICATION	2.0052528157301474E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999445420606057	WITHOUT_CLASSIFICATION	5.545793939437499E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997459567416882	WITHOUT_CLASSIFICATION	2.5404325831181E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997459567416882	WITHOUT_CLASSIFICATION	2.5404325831181E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999674739572451	WITHOUT_CLASSIFICATION	3.252604275489435E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.9999674739572451	WITHOUT_CLASSIFICATION	3.252604275489435E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9875927345943983	WITHOUT_CLASSIFICATION	0.01240726540560175	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999770226852146	WITHOUT_CLASSIFICATION	2.2977314785502366E-5	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9980968523880276	WITHOUT_CLASSIFICATION	0.0019031476119724699	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999976812082101	WITHOUT_CLASSIFICATION	2.3187917897913044E-6	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996879589803921	WITHOUT_CLASSIFICATION	3.120410196080056E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9998460757509321	WITHOUT_CLASSIFICATION	1.539242490678545E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.9712888698048932	WITHOUT_CLASSIFICATION	0.02871113019510685	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.999885630671916	WITHOUT_CLASSIFICATION	1.1436932808393299E-4	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9998184770765398	WITHOUT_CLASSIFICATION	1.815229234601503E-4	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999577329433639	WITHOUT_CLASSIFICATION	4.226705663614644E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999445420606057	WITHOUT_CLASSIFICATION	5.545793939437499E-5	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997459567416882	WITHOUT_CLASSIFICATION	2.5404325831181E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9997459567416882	WITHOUT_CLASSIFICATION	2.5404325831181E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9984122353905884	WITHOUT_CLASSIFICATION	0.001587764609411504	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999969359757093	WITHOUT_CLASSIFICATION	3.0640242907088565E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9999401071334216	WITHOUT_CLASSIFICATION	5.989286657820575E-5	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999959775235607	WITHOUT_CLASSIFICATION	4.0224764393079835E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999675662573041	WITHOUT_CLASSIFICATION	3.243374269583754E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.9999675662573041	WITHOUT_CLASSIFICATION	3.243374269583754E-5	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998861240599505	WITHOUT_CLASSIFICATION	1.1387594004959711E-4	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9996758934671804	WITHOUT_CLASSIFICATION	3.24106532819536E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999758562645182	WITHOUT_CLASSIFICATION	2.4143735481760227E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999865070909978	WITHOUT_CLASSIFICATION	1.3492909002317254E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999865070909978	WITHOUT_CLASSIFICATION	1.3492909002317254E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999463395976897	WITHOUT_CLASSIFICATION	5.3660402310316765E-5	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9999463395976897	WITHOUT_CLASSIFICATION	5.3660402310316765E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999770792262099	WITHOUT_CLASSIFICATION	2.2920773790069252E-5	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999770792262099	WITHOUT_CLASSIFICATION	2.2920773790069252E-5	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999851527529493	WITHOUT_CLASSIFICATION	1.4847247050616059E-5	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9999378124126455	WITHOUT_CLASSIFICATION	6.218758735457502E-5	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9994548358910184	WITHOUT_CLASSIFICATION	5.451641089817277E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999501222155918	WITHOUT_CLASSIFICATION	4.987778440820251E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.999919906900455	WITHOUT_CLASSIFICATION	8.009309954502617E-5	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9999784838355987	WITHOUT_CLASSIFICATION	2.1516164401355094E-5	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999896107123415	WITHOUT_CLASSIFICATION	1.038928765844728E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.9998522209578292	WITHOUT_CLASSIFICATION	1.4777904217077648E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9997596201795921	WITHOUT_CLASSIFICATION	2.4037982040796572E-4	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9999202268671191	WITHOUT_CLASSIFICATION	7.977313288092966E-5	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999952897487288	WITHOUT_CLASSIFICATION	4.710251271142153E-6	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9980387073847353	WITHOUT_CLASSIFICATION	0.0019612926152647253	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999029564996077	WITHOUT_CLASSIFICATION	9.70435003922844E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999029564996077	WITHOUT_CLASSIFICATION	9.70435003922844E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.999128342787213	WITHOUT_CLASSIFICATION	8.716572127870056E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9999519713360733	WITHOUT_CLASSIFICATION	4.802866392674239E-5	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9978704674201602	WITHOUT_CLASSIFICATION	0.0021295325798398814	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.9998924462430352	WITHOUT_CLASSIFICATION	1.0755375696489253E-4	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999869109887625	WITHOUT_CLASSIFICATION	1.3089011237432925E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9996954457335864	WITHOUT_CLASSIFICATION	3.045542664135964E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9993479915301265	WITHOUT_CLASSIFICATION	6.520084698733781E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9997263171994009	WITHOUT_CLASSIFICATION	2.736828005991768E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999457401071209	WITHOUT_CLASSIFICATION	5.4259892879151905E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9997923738265564	WITHOUT_CLASSIFICATION	2.0762617344357223E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999600793817631	WITHOUT_CLASSIFICATION	3.9920618236930804E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.998914605665116	WITHOUT_CLASSIFICATION	0.0010853943348840213	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9997161479482115	WITHOUT_CLASSIFICATION	2.838520517884164E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999241923869574	WITHOUT_CLASSIFICATION	7.580761304265032E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9960853271751413	WITHOUT_CLASSIFICATION	0.003914672824858614	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.999974401818655	WITHOUT_CLASSIFICATION	2.559818134491658E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9998543546477766	WITHOUT_CLASSIFICATION	1.4564535222327316E-4	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9997715466047096	WITHOUT_CLASSIFICATION	2.284533952904798E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999067642466676	WITHOUT_CLASSIFICATION	9.323575333246058E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999067642466676	WITHOUT_CLASSIFICATION	9.323575333246058E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999461838993163	WITHOUT_CLASSIFICATION	5.381610068368417E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.9996243054971441	WITHOUT_CLASSIFICATION	3.7569450285588403E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9999792699094815	WITHOUT_CLASSIFICATION	2.0730090518458546E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999550619134633	WITHOUT_CLASSIFICATION	4.493808653677057E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999550619134633	WITHOUT_CLASSIFICATION	4.493808653677057E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999989921584619	WITHOUT_CLASSIFICATION	1.0078415381058355E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9999792366540414	WITHOUT_CLASSIFICATION	2.076334595863436E-5	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.9998226488210052	WITHOUT_CLASSIFICATION	1.7735117899482367E-4	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9988545834543096	WITHOUT_CLASSIFICATION	0.001145416545690454	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994743366101447	WITHOUT_CLASSIFICATION	5.256633898552403E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994743366101447	WITHOUT_CLASSIFICATION	5.256633898552403E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994743366101447	WITHOUT_CLASSIFICATION	5.256633898552403E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9988545834543096	WITHOUT_CLASSIFICATION	0.001145416545690454	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999563999370437	WITHOUT_CLASSIFICATION	4.3600062956350544E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.9998638969702047	WITHOUT_CLASSIFICATION	1.361030297952518E-4	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9991628661010691	WITHOUT_CLASSIFICATION	8.371338989308363E-4	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9996690163627271	WITHOUT_CLASSIFICATION	3.309836372729882E-4	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9997462738195673	WITHOUT_CLASSIFICATION	2.537261804327011E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9995922551671316	WITHOUT_CLASSIFICATION	4.077448328685017E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999888695380975	WITHOUT_CLASSIFICATION	1.1130461902388537E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9991394990519956	WITHOUT_CLASSIFICATION	8.605009480045272E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999600793817631	WITHOUT_CLASSIFICATION	3.9920618236930804E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9985554101115715	WITHOUT_CLASSIFICATION	0.0014445898884285716	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999488654735939	WITHOUT_CLASSIFICATION	5.113452640610489E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999806874920198	WITHOUT_CLASSIFICATION	1.9312507980124E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9993749812140974	WITHOUT_CLASSIFICATION	6.25018785902547E-4	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9999192077384033	WITHOUT_CLASSIFICATION	8.079226159678077E-5	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9993843156928714	WITHOUT_CLASSIFICATION	6.156843071286237E-4	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999971730352619	WITHOUT_CLASSIFICATION	2.8269647381065357E-5	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9997397573639247	WITHOUT_CLASSIFICATION	2.602426360752451E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9990449423398146	WITHOUT_CLASSIFICATION	9.550576601853942E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9996198801862834	WITHOUT_CLASSIFICATION	3.8011981371654884E-4	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9997376651128353	WITHOUT_CLASSIFICATION	2.6233488716467465E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999561197932622	WITHOUT_CLASSIFICATION	4.3880206737919664E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999602807864009	WITHOUT_CLASSIFICATION	3.9719213599158005E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9998751397290386	WITHOUT_CLASSIFICATION	1.2486027096143506E-4	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999957171463967	WITHOUT_CLASSIFICATION	4.2828536033501436E-6	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9998431317463157	WITHOUT_CLASSIFICATION	1.5686825368427677E-4	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.9998713353813473	WITHOUT_CLASSIFICATION	1.2866461865268587E-4	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.9999476734137684	WITHOUT_CLASSIFICATION	5.23265862316783E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.9890422988223834	WITHOUT_CLASSIFICATION	0.010957701177616689	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.99996438347195	WITHOUT_CLASSIFICATION	3.561652804991268E-5	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.999989325578339	WITHOUT_CLASSIFICATION	1.0674421660961965E-5	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.999981675472637	WITHOUT_CLASSIFICATION	1.832452736294315E-5	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9998151205868441	WITHOUT_CLASSIFICATION	1.8487941315588734E-4	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9999595975674972	WITHOUT_CLASSIFICATION	4.0402432502772505E-5	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999082162995455	WITHOUT_CLASSIFICATION	9.178370045446289E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9999786101012964	WITHOUT_CLASSIFICATION	2.138989870356348E-5	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9998650694764017	WITHOUT_CLASSIFICATION	1.3493052359819416E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.999989921584619	WITHOUT_CLASSIFICATION	1.0078415381058355E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9997219060312391	WITHOUT_CLASSIFICATION	2.780939687608843E-4	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9988545834543096	WITHOUT_CLASSIFICATION	0.001145416545690454	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.9995922551671316	WITHOUT_CLASSIFICATION	4.077448328685017E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999488654735939	WITHOUT_CLASSIFICATION	5.113452640610489E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.9993749812140974	WITHOUT_CLASSIFICATION	6.25018785902547E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9993843156928714	WITHOUT_CLASSIFICATION	6.156843071286237E-4	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.9999806874920198	WITHOUT_CLASSIFICATION	1.9312507980124E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.999971730352619	WITHOUT_CLASSIFICATION	2.8269647381065357E-5	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9996198801862834	WITHOUT_CLASSIFICATION	3.8011981371654884E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9990449423398146	WITHOUT_CLASSIFICATION	9.550576601853942E-4	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.9999561197932622	WITHOUT_CLASSIFICATION	4.3880206737919664E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999974295772766	WITHOUT_CLASSIFICATION	2.570422723415071E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.9940362274616094	WITHOUT_CLASSIFICATION	0.005963772538390651	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9999460649836274	WITHOUT_CLASSIFICATION	5.393501637273839E-5	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999633462400432	WITHOUT_CLASSIFICATION	3.665375995668965E-5	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9998913872276656	WITHOUT_CLASSIFICATION	1.086127723344019E-4	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.999950914322744	WITHOUT_CLASSIFICATION	4.908567725616528E-5	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9999679776060503	WITHOUT_CLASSIFICATION	3.2022393949716686E-5	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9997374948399015	WITHOUT_CLASSIFICATION	2.6250516009853107E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9993318614357297	WITHOUT_CLASSIFICATION	6.681385642703534E-4	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.999334672751851	WITHOUT_CLASSIFICATION	6.653272481489724E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9999197965499182	WITHOUT_CLASSIFICATION	8.020345008172103E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996965300654265	WITHOUT_CLASSIFICATION	3.034699345734659E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999120304340771	WITHOUT_CLASSIFICATION	8.796956592294139E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999530115754985	WITHOUT_CLASSIFICATION	4.6988424501372874E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999628591937284	WITHOUT_CLASSIFICATION	3.714080627154373E-5	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9999788505308906	WITHOUT_CLASSIFICATION	2.114946910944035E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998722418294083	WITHOUT_CLASSIFICATION	1.2775817059170751E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999920424729435	WITHOUT_CLASSIFICATION	7.957527056458134E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999972182758238	WITHOUT_CLASSIFICATION	2.7817241761673856E-6	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9998375733825464	WITHOUT_CLASSIFICATION	1.6242661745363444E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9988643424708047	WITHOUT_CLASSIFICATION	0.0011356575291952954	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9988643424708047	WITHOUT_CLASSIFICATION	0.0011356575291952954	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9986520873352578	WITHOUT_CLASSIFICATION	0.0013479126647422785	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9991963963948133	WITHOUT_CLASSIFICATION	8.036036051866824E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9991963963948133	WITHOUT_CLASSIFICATION	8.036036051866824E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998983609671492	WITHOUT_CLASSIFICATION	1.0163903285074877E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.9998983609671492	WITHOUT_CLASSIFICATION	1.0163903285074877E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9995483359839683	WITHOUT_CLASSIFICATION	4.5166401603159316E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9995483359839683	WITHOUT_CLASSIFICATION	4.5166401603159316E-4	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.999989672503647	WITHOUT_CLASSIFICATION	1.0327496352925554E-5	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9977581847078502	WITHOUT_CLASSIFICATION	0.0022418152921498103	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9977581847078502	WITHOUT_CLASSIFICATION	0.0022418152921498103	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999384314920411	WITHOUT_CLASSIFICATION	6.156850795891776E-5	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9999384314920411	WITHOUT_CLASSIFICATION	6.156850795891776E-5	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9997855038180532	WITHOUT_CLASSIFICATION	2.1449618194681122E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9996493729230239	WITHOUT_CLASSIFICATION	3.5062707697619175E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9996493729230239	WITHOUT_CLASSIFICATION	3.5062707697619175E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999451726800743	WITHOUT_CLASSIFICATION	5.4827319925601794E-5	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9997426866215317	WITHOUT_CLASSIFICATION	2.573133784684237E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998812043547959	WITHOUT_CLASSIFICATION	1.187956452041287E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9999451726800743	WITHOUT_CLASSIFICATION	5.4827319925601794E-5	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9995586146019836	WITHOUT_CLASSIFICATION	4.413853980163548E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.999995845578494	WITHOUT_CLASSIFICATION	4.154421506097776E-6	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9995516790762741	WITHOUT_CLASSIFICATION	4.483209237259873E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999961639340234	WITHOUT_CLASSIFICATION	3.836065976617103E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.99999583841376	WITHOUT_CLASSIFICATION	4.161586239936572E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.99999583841376	WITHOUT_CLASSIFICATION	4.161586239936572E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999821392562516	WITHOUT_CLASSIFICATION	1.7860743748421132E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998341436119228	WITHOUT_CLASSIFICATION	1.6585638807713348E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9998341436119228	WITHOUT_CLASSIFICATION	1.6585638807713348E-4	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9998562972287497	WITHOUT_CLASSIFICATION	1.4370277125039154E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9995516790762741	WITHOUT_CLASSIFICATION	4.483209237259873E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999961639340234	WITHOUT_CLASSIFICATION	3.836065976617103E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.99999583841376	WITHOUT_CLASSIFICATION	4.161586239936572E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.99999583841376	WITHOUT_CLASSIFICATION	4.161586239936572E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999821392562516	WITHOUT_CLASSIFICATION	1.7860743748421132E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9996886052997676	WITHOUT_CLASSIFICATION	3.1139470023236883E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.999959592421272	WITHOUT_CLASSIFICATION	4.040757872808165E-5	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.9984999262700569	WITHOUT_CLASSIFICATION	0.00150007372994313	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9995897185239848	WITHOUT_CLASSIFICATION	4.1028147601514134E-4	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.999837047341124	WITHOUT_CLASSIFICATION	1.6295265887604897E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999886383913332	WITHOUT_CLASSIFICATION	1.1361608666745715E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.999980793058159	WITHOUT_CLASSIFICATION	1.920694184095846E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.999980793058159	WITHOUT_CLASSIFICATION	1.920694184095846E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.9964510030746954	WITHOUT_CLASSIFICATION	0.00354899692530459	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9992285927156116	WITHOUT_CLASSIFICATION	7.71407284388405E-4	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9992285927156116	WITHOUT_CLASSIFICATION	7.71407284388405E-4	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9997107515723505	WITHOUT_CLASSIFICATION	2.8924842764959546E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992305805985919	WITHOUT_CLASSIFICATION	7.694194014080957E-4	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9992305805985919	WITHOUT_CLASSIFICATION	7.694194014080957E-4	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.999352573038284	WITHOUT_CLASSIFICATION	6.474269617160728E-4	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.999352573038284	WITHOUT_CLASSIFICATION	6.474269617160728E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998322080949338	WITHOUT_CLASSIFICATION	1.6779190506621854E-4	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.9998322080949338	WITHOUT_CLASSIFICATION	1.6779190506621854E-4	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9992285927156116	WITHOUT_CLASSIFICATION	7.71407284388405E-4	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999612146380242	WITHOUT_CLASSIFICATION	3.878536197578252E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9998573647306775	WITHOUT_CLASSIFICATION	1.4263526932248378E-4	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999173768682683	WITHOUT_CLASSIFICATION	8.26231317316126E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9993498754734692	WITHOUT_CLASSIFICATION	6.501245265308746E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9999232105982099	WITHOUT_CLASSIFICATION	7.678940179009028E-5	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9997853681517002	WITHOUT_CLASSIFICATION	2.1463184829987505E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9999056917807687	WITHOUT_CLASSIFICATION	9.430821923129469E-5	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9989324437308695	WITHOUT_CLASSIFICATION	0.0010675562691304233	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9999830018590509	WITHOUT_CLASSIFICATION	1.699814094908442E-5	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9995822257768076	WITHOUT_CLASSIFICATION	4.177742231923344E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9995822257768076	WITHOUT_CLASSIFICATION	4.177742231923344E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997458337908219	WITHOUT_CLASSIFICATION	2.5416620917816075E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9997458337908219	WITHOUT_CLASSIFICATION	2.5416620917816075E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9995364695846489	WITHOUT_CLASSIFICATION	4.635304153510556E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995428678324179	WITHOUT_CLASSIFICATION	4.571321675821726E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995428678324179	WITHOUT_CLASSIFICATION	4.571321675821726E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9995428678324179	WITHOUT_CLASSIFICATION	4.571321675821726E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999835637494147	WITHOUT_CLASSIFICATION	1.6436250585332832E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999835637494147	WITHOUT_CLASSIFICATION	1.6436250585332832E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9997337579976585	WITHOUT_CLASSIFICATION	2.662420023414064E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9997149973195215	WITHOUT_CLASSIFICATION	2.850026804785177E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999320354809399	WITHOUT_CLASSIFICATION	6.796451906003866E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.9999933754824906	WITHOUT_CLASSIFICATION	6.624517509403393E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.9998831535184425	WITHOUT_CLASSIFICATION	1.1684648155753441E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9996434767082067	WITHOUT_CLASSIFICATION	3.5652329179323695E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.9967925371490635	WITHOUT_CLASSIFICATION	0.0032074628509364935	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9997337579976585	WITHOUT_CLASSIFICATION	2.662420023414064E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999934962279206	WITHOUT_CLASSIFICATION	6.50377207940417E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9997149973195215	WITHOUT_CLASSIFICATION	2.850026804785177E-4	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999320354809399	WITHOUT_CLASSIFICATION	6.796451906003866E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9997577003899514	WITHOUT_CLASSIFICATION	2.422996100486222E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999369602920152	WITHOUT_CLASSIFICATION	6.303970798489981E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997770286184983	WITHOUT_CLASSIFICATION	2.2297138150176727E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.9999095432558691	WITHOUT_CLASSIFICATION	9.045674413083012E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999738387945789	WITHOUT_CLASSIFICATION	2.616120542114388E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9996999107303286	WITHOUT_CLASSIFICATION	3.0008926967145907E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9997577003899514	WITHOUT_CLASSIFICATION	2.422996100486222E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999537355418691	WITHOUT_CLASSIFICATION	4.626445813091554E-5	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9999537355418691	WITHOUT_CLASSIFICATION	4.626445813091554E-5	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9985431012942185	WITHOUT_CLASSIFICATION	0.0014568987057814562	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999612674341928	WITHOUT_CLASSIFICATION	3.873256580725968E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9998657571778069	WITHOUT_CLASSIFICATION	1.3424282219301074E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.99868173638136	WITHOUT_CLASSIFICATION	0.0013182636186400238	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992510501289376	WITHOUT_CLASSIFICATION	7.489498710624365E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999925585010938	WITHOUT_CLASSIFICATION	7.441498906242459E-6	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9996995467784677	WITHOUT_CLASSIFICATION	3.00453221532297E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9998738112598011	WITHOUT_CLASSIFICATION	1.2618874019883715E-4	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9998548336838171	WITHOUT_CLASSIFICATION	1.451663161829082E-4	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999262228874165	WITHOUT_CLASSIFICATION	7.377711258350116E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999158726709105	WITHOUT_CLASSIFICATION	8.412732908951634E-5	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.99868173638136	WITHOUT_CLASSIFICATION	0.0013182636186400238	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9992510501289376	WITHOUT_CLASSIFICATION	7.489498710624365E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9998292123002462	WITHOUT_CLASSIFICATION	1.7078769975378106E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999266197485871	WITHOUT_CLASSIFICATION	7.338025141300561E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9995970827886733	WITHOUT_CLASSIFICATION	4.0291721132657763E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999643100036852	WITHOUT_CLASSIFICATION	3.568999631477623E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.999933647713065	WITHOUT_CLASSIFICATION	6.635228693497175E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9998567148331231	WITHOUT_CLASSIFICATION	1.4328516687686153E-4	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9998605204078316	WITHOUT_CLASSIFICATION	1.3947959216840413E-4	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.999264804356784	WITHOUT_CLASSIFICATION	7.351956432160374E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999459600069828	WITHOUT_CLASSIFICATION	5.40399930173622E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999246871789057	WITHOUT_CLASSIFICATION	7.53128210942817E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999431850422434	WITHOUT_CLASSIFICATION	5.681495775648024E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9994087650359138	WITHOUT_CLASSIFICATION	5.912349640861322E-4	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999853870294176	WITHOUT_CLASSIFICATION	1.4612970582366038E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999246871789057	WITHOUT_CLASSIFICATION	7.53128210942817E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999431850422434	WITHOUT_CLASSIFICATION	5.681495775648024E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9994087650359138	WITHOUT_CLASSIFICATION	5.912349640861322E-4	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9998930073009805	WITHOUT_CLASSIFICATION	1.0699269901953692E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9995968878703303	WITHOUT_CLASSIFICATION	4.031121296696517E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9995642533143472	WITHOUT_CLASSIFICATION	4.357466856528493E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9973835317147447	WITHOUT_CLASSIFICATION	0.002616468285255299	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.9996282543651127	WITHOUT_CLASSIFICATION	3.7174563488737996E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9997479128655645	WITHOUT_CLASSIFICATION	2.5208713443547535E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9999745320686069	WITHOUT_CLASSIFICATION	2.546793139313769E-5	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999779595125261	WITHOUT_CLASSIFICATION	2.204048747391339E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999664194442156	WITHOUT_CLASSIFICATION	3.3580555784420264E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9947628802055708	WITHOUT_CLASSIFICATION	0.00523711979442928	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9997013549615295	WITHOUT_CLASSIFICATION	2.9864503847052575E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9997383651468182	WITHOUT_CLASSIFICATION	2.616348531817939E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.9999573107686026	WITHOUT_CLASSIFICATION	4.2689231397275795E-5	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9992833041738021	WITHOUT_CLASSIFICATION	7.16695826198021E-4	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.9999285725015691	WITHOUT_CLASSIFICATION	7.142749843090457E-5	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.9982356920197517	WITHOUT_CLASSIFICATION	0.0017643079802483223	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9998565325310091	WITHOUT_CLASSIFICATION	1.434674689908512E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999798320636816	WITHOUT_CLASSIFICATION	2.0167936318479596E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9998755253189178	WITHOUT_CLASSIFICATION	1.2447468108219223E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999003864007925	WITHOUT_CLASSIFICATION	9.961359920756479E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999636522041819	WITHOUT_CLASSIFICATION	3.6347795818086326E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999636522041819	WITHOUT_CLASSIFICATION	3.6347795818086326E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.999627650570706	WITHOUT_CLASSIFICATION	3.7234942929390935E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.999627650570706	WITHOUT_CLASSIFICATION	3.7234942929390935E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999984703750372	WITHOUT_CLASSIFICATION	1.5296249627999577E-5	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.999984703750372	WITHOUT_CLASSIFICATION	1.5296249627999577E-5	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999735807912038	WITHOUT_CLASSIFICATION	2.641920879626379E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999969648350922	WITHOUT_CLASSIFICATION	3.0351649079513112E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999947929509003	WITHOUT_CLASSIFICATION	5.207049099701219E-5	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9999786887800833	WITHOUT_CLASSIFICATION	2.1311219916685573E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999935023440776	WITHOUT_CLASSIFICATION	6.4976559223720216E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999829908049919	WITHOUT_CLASSIFICATION	1.700919500814792E-5	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9999105670817362	WITHOUT_CLASSIFICATION	8.9432918263783E-5	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.9999746368015365	WITHOUT_CLASSIFICATION	2.5363198463405287E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.9999735807912038	WITHOUT_CLASSIFICATION	2.641920879626379E-5	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999969648350922	WITHOUT_CLASSIFICATION	3.0351649079513112E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.999947929509003	WITHOUT_CLASSIFICATION	5.207049099701219E-5	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999935023440776	WITHOUT_CLASSIFICATION	6.4976559223720216E-6	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999829908049919	WITHOUT_CLASSIFICATION	1.700919500814792E-5	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9998633617235195	WITHOUT_CLASSIFICATION	1.3663827648045004E-4	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999334205488994	WITHOUT_CLASSIFICATION	6.657945110050396E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9994785524119435	WITHOUT_CLASSIFICATION	5.214475880565565E-4	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9994785524119435	WITHOUT_CLASSIFICATION	5.214475880565565E-4	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9997771770461935	WITHOUT_CLASSIFICATION	2.2282295380658356E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998357836607279	WITHOUT_CLASSIFICATION	1.6421633927208998E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999187160661433	WITHOUT_CLASSIFICATION	8.128393385669908E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999869583830551	WITHOUT_CLASSIFICATION	1.3041616944902892E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999869583830551	WITHOUT_CLASSIFICATION	1.3041616944902892E-4	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9993936280055548	WITHOUT_CLASSIFICATION	6.063719944451575E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999825226767323	WITHOUT_CLASSIFICATION	1.7477323267734554E-5	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9997201729732719	WITHOUT_CLASSIFICATION	2.798270267280774E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999371254831665	WITHOUT_CLASSIFICATION	6.287451683351738E-5	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9997822362401443	WITHOUT_CLASSIFICATION	2.1776375985570776E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996965300654265	WITHOUT_CLASSIFICATION	3.034699345734659E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999120304340771	WITHOUT_CLASSIFICATION	8.796956592294139E-5	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999530115754985	WITHOUT_CLASSIFICATION	4.6988424501372874E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999628591937284	WITHOUT_CLASSIFICATION	3.714080627154373E-5	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9999920424729435	WITHOUT_CLASSIFICATION	7.957527056458134E-6	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.9999972182758238	WITHOUT_CLASSIFICATION	2.7817241761673856E-6	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.9993936280055548	WITHOUT_CLASSIFICATION	6.063719944451575E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999825226767323	WITHOUT_CLASSIFICATION	1.7477323267734554E-5	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.9999371254831665	WITHOUT_CLASSIFICATION	6.287451683351738E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9997030632774804	WITHOUT_CLASSIFICATION	2.969367225195973E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999187160661433	WITHOUT_CLASSIFICATION	8.128393385669908E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999187160661433	WITHOUT_CLASSIFICATION	8.128393385669908E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999158726709105	WITHOUT_CLASSIFICATION	8.412732908951634E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999158726709105	WITHOUT_CLASSIFICATION	8.412732908951634E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998397108891246	WITHOUT_CLASSIFICATION	1.602891108754682E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998397108891246	WITHOUT_CLASSIFICATION	1.602891108754682E-4	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9998710457609906	WITHOUT_CLASSIFICATION	1.2895423900933365E-4	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9994172043085615	WITHOUT_CLASSIFICATION	5.82795691438414E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9998062832862251	WITHOUT_CLASSIFICATION	1.9371671377491767E-4	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999663313984277	WITHOUT_CLASSIFICATION	3.36686015721934E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9997069707014791	WITHOUT_CLASSIFICATION	2.930292985209844E-4	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998935907666684	WITHOUT_CLASSIFICATION	1.0640923333159224E-4	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9983338472460548	WITHOUT_CLASSIFICATION	0.001666152753945245	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999848527565519	WITHOUT_CLASSIFICATION	1.514724344817714E-5	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.9993703715677164	WITHOUT_CLASSIFICATION	6.29628432283723E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999048587631844	WITHOUT_CLASSIFICATION	9.514123681565331E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999144291262223	WITHOUT_CLASSIFICATION	8.557087377771495E-5	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.9999519850313179	WITHOUT_CLASSIFICATION	4.801496868216908E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999197412337267	WITHOUT_CLASSIFICATION	8.025876627333041E-5	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9998819241741869	WITHOUT_CLASSIFICATION	1.1807582581310212E-4	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999186833430137	WITHOUT_CLASSIFICATION	8.131665698636075E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9997999744755702	WITHOUT_CLASSIFICATION	2.000255244296832E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999557422536727	WITHOUT_CLASSIFICATION	4.425774632734707E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9997749093597177	WITHOUT_CLASSIFICATION	2.250906402823344E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999120304340771	WITHOUT_CLASSIFICATION	8.796956592294139E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9999628591937284	WITHOUT_CLASSIFICATION	3.714080627154373E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9997030632774804	WITHOUT_CLASSIFICATION	2.969367225195973E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.999187160661433	WITHOUT_CLASSIFICATION	8.128393385669908E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9999158726709105	WITHOUT_CLASSIFICATION	8.412732908951634E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998397108891246	WITHOUT_CLASSIFICATION	1.602891108754682E-4	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9997433103157372	WITHOUT_CLASSIFICATION	2.5668968426287487E-4	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9999181590366912	WITHOUT_CLASSIFICATION	8.184096330878134E-5	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9999669177322756	WITHOUT_CLASSIFICATION	3.308226772437234E-5	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9994135420761925	WITHOUT_CLASSIFICATION	5.864579238075289E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9982101843875436	WITHOUT_CLASSIFICATION	0.001789815612456386	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9982101843875436	WITHOUT_CLASSIFICATION	0.001789815612456386	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9996417993424956	WITHOUT_CLASSIFICATION	3.582006575042633E-4	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.999958393846443	WITHOUT_CLASSIFICATION	4.1606153556979165E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999463871223	WITHOUT_CLASSIFICATION	5.361287770003455E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999595204914968	WITHOUT_CLASSIFICATION	4.047950850319302E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999701406294277	WITHOUT_CLASSIFICATION	2.9859370572368015E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999701406294277	WITHOUT_CLASSIFICATION	2.9859370572368015E-5	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9999163031355287	WITHOUT_CLASSIFICATION	8.36968644713212E-5	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999505073490264	WITHOUT_CLASSIFICATION	4.9492650973657845E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9998296402708322	WITHOUT_CLASSIFICATION	1.703597291678055E-4	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9997341533435947	WITHOUT_CLASSIFICATION	2.6584665640523803E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999883432149995	WITHOUT_CLASSIFICATION	1.1656785000523162E-5	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9999471169033268	WITHOUT_CLASSIFICATION	5.2883096673180666E-5	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.999912549832398	WITHOUT_CLASSIFICATION	8.74501676019401E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9996750194213032	WITHOUT_CLASSIFICATION	3.249805786968664E-4	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9925860298879692	WITHOUT_CLASSIFICATION	0.007413970112030845	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9993453901307527	WITHOUT_CLASSIFICATION	6.546098692473197E-4	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9997820245205271	WITHOUT_CLASSIFICATION	2.179754794727382E-4	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9999334200650224	WITHOUT_CLASSIFICATION	6.657993497754047E-5	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9999930107209346	WITHOUT_CLASSIFICATION	6.989279065321673E-6	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9998634895284052	WITHOUT_CLASSIFICATION	1.3651047159483364E-4	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9992651035879678	WITHOUT_CLASSIFICATION	7.348964120320883E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9986472435816443	WITHOUT_CLASSIFICATION	0.0013527564183556482	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9998021527133375	WITHOUT_CLASSIFICATION	1.9784728666241016E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9997959760511018	WITHOUT_CLASSIFICATION	2.0402394889821205E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9996602323798663	WITHOUT_CLASSIFICATION	3.3976762013365383E-4	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999407798025155	WITHOUT_CLASSIFICATION	5.9220197484477656E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9992606606220512	WITHOUT_CLASSIFICATION	7.393393779488052E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999314111079015	WITHOUT_CLASSIFICATION	6.858889209840184E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.9999314111079015	WITHOUT_CLASSIFICATION	6.858889209840184E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9998478469986147	WITHOUT_CLASSIFICATION	1.5215300138537302E-4	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9998541928653716	WITHOUT_CLASSIFICATION	1.458071346283712E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9997263171994009	WITHOUT_CLASSIFICATION	2.736828005991768E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9997263171994009	WITHOUT_CLASSIFICATION	2.736828005991768E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9205551716521361	WITHOUT_CLASSIFICATION	0.07944482834786394	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9976069793286348	WITHOUT_CLASSIFICATION	0.0023930206713652013	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9998905150876041	WITHOUT_CLASSIFICATION	1.0948491239599767E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9997161421017999	WITHOUT_CLASSIFICATION	2.838578982000788E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9997161421017999	WITHOUT_CLASSIFICATION	2.838578982000788E-4	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9998183083233094	WITHOUT_CLASSIFICATION	1.8169167669061003E-4	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999711848470899	WITHOUT_CLASSIFICATION	2.88151529102145E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9999669560921394	WITHOUT_CLASSIFICATION	3.3043907860623526E-5	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9999851643984955	WITHOUT_CLASSIFICATION	1.4835601504557996E-5	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9913921269624407	WITHOUT_CLASSIFICATION	0.0086078730375593	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999655094400346	WITHOUT_CLASSIFICATION	3.4490559965523816E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999615207999343	WITHOUT_CLASSIFICATION	3.84792000656649E-5	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.999914282007715	WITHOUT_CLASSIFICATION	8.571799228502068E-5	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999647452782807	WITHOUT_CLASSIFICATION	3.525472171934049E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9997044651936287	WITHOUT_CLASSIFICATION	2.955348063713431E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999632932310735	WITHOUT_CLASSIFICATION	3.670676892658198E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999843587789224	WITHOUT_CLASSIFICATION	1.5641221077566733E-5	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.9999906568619353	WITHOUT_CLASSIFICATION	9.343138064761469E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9973198629108944	WITHOUT_CLASSIFICATION	0.0026801370891055467	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9999051749765359	WITHOUT_CLASSIFICATION	9.482502346424292E-5	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9997592991261579	WITHOUT_CLASSIFICATION	2.40700873842024E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9999885832942037	WITHOUT_CLASSIFICATION	1.1416705796419256E-5	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999365682229696	WITHOUT_CLASSIFICATION	6.343177703029632E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999499077533381	WITHOUT_CLASSIFICATION	5.009224666184715E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9999846858462316	WITHOUT_CLASSIFICATION	1.5314153768428284E-5	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999916418468227	WITHOUT_CLASSIFICATION	8.358153177370902E-6	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999906474589054	WITHOUT_CLASSIFICATION	9.352541094625879E-6	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999526098797683	WITHOUT_CLASSIFICATION	4.7390120231695136E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9998325471515115	WITHOUT_CLASSIFICATION	1.6745284848844707E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999699427625522	WITHOUT_CLASSIFICATION	3.0057237447777983E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9979067447347467	WITHOUT_CLASSIFICATION	0.0020932552652532517	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9816133597912081	WITHOUT_CLASSIFICATION	0.018386640208791855	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998414188252814	WITHOUT_CLASSIFICATION	1.5858117471854693E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999317376376047	WITHOUT_CLASSIFICATION	6.826236239540567E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999762641707659	WITHOUT_CLASSIFICATION	2.373582923401972E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999979250870769	WITHOUT_CLASSIFICATION	2.0749129231000295E-5	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9973198629108944	WITHOUT_CLASSIFICATION	0.0026801370891055467	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998414188252814	WITHOUT_CLASSIFICATION	1.5858117471854693E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999317376376047	WITHOUT_CLASSIFICATION	6.826236239540567E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999979250870769	WITHOUT_CLASSIFICATION	2.0749129231000295E-5	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999310877617762	WITHOUT_CLASSIFICATION	6.891223822379682E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999854278766809	WITHOUT_CLASSIFICATION	1.457212331922752E-5	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999719468106161	WITHOUT_CLASSIFICATION	2.8053189383926016E-5	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999524083280178	WITHOUT_CLASSIFICATION	4.75916719823257E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999889948403022	WITHOUT_CLASSIFICATION	1.1005159697746908E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9995087382365657	WITHOUT_CLASSIFICATION	4.912617634342135E-4	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999407798025155	WITHOUT_CLASSIFICATION	5.9220197484477656E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.9997025679762875	WITHOUT_CLASSIFICATION	2.974320237124225E-4	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999686778106747	WITHOUT_CLASSIFICATION	3.132218932532539E-5	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9789747920826637	WITHOUT_CLASSIFICATION	0.021025207917336263	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9988262613822059	WITHOUT_CLASSIFICATION	0.0011737386177941636	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9988262613822059	WITHOUT_CLASSIFICATION	0.0011737386177941636	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.999927477974647	WITHOUT_CLASSIFICATION	7.252202535306997E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999839287479622	WITHOUT_CLASSIFICATION	1.6071252037882934E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9999049475776062	WITHOUT_CLASSIFICATION	9.50524223939116E-5	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9985841288558782	WITHOUT_CLASSIFICATION	0.0014158711441218156	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998602085438303	WITHOUT_CLASSIFICATION	1.3979145616971176E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9998726868181287	WITHOUT_CLASSIFICATION	1.2731318187134648E-4	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9302445522875731	WITHOUT_CLASSIFICATION	0.0697554477124269	DEFECT
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9999646250696317	WITHOUT_CLASSIFICATION	3.53749303682744E-5	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999685539059999	WITHOUT_CLASSIFICATION	3.144609400008932E-5	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999339377924307	WITHOUT_CLASSIFICATION	6.606220756932328E-5	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9999685443216473	WITHOUT_CLASSIFICATION	3.145567835276882E-5	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9997855988856987	WITHOUT_CLASSIFICATION	2.1440111430139682E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.9999345129380163	WITHOUT_CLASSIFICATION	6.548706198369089E-5	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999478292047368	WITHOUT_CLASSIFICATION	5.217079526324879E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999287589385287	WITHOUT_CLASSIFICATION	7.124106147116006E-5	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999333221247613	WITHOUT_CLASSIFICATION	6.667787523876323E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9997984686473521	WITHOUT_CLASSIFICATION	2.015313526478213E-4	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999276647795585	WITHOUT_CLASSIFICATION	7.233522044143235E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.999902744768234	WITHOUT_CLASSIFICATION	9.725523176605264E-5	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9995186868974975	WITHOUT_CLASSIFICATION	4.8131310250251963E-4	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999673714592142	WITHOUT_CLASSIFICATION	3.26285407857976E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9995534369320751	WITHOUT_CLASSIFICATION	4.465630679248589E-4	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999312700669202	WITHOUT_CLASSIFICATION	6.872993307979203E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999272794621511	WITHOUT_CLASSIFICATION	7.272053784897114E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.650694778267933	DEFECT	0.3493052217320671	WITHOUT_CLASSIFICATION
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9995978024212637	WITHOUT_CLASSIFICATION	4.02197578736292E-4	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9995282040675022	WITHOUT_CLASSIFICATION	4.717959324978591E-4	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999605167807978	WITHOUT_CLASSIFICATION	3.948321920221935E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.999876718499403	WITHOUT_CLASSIFICATION	1.232815005971064E-4	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999598549095614	WITHOUT_CLASSIFICATION	4.0145090438632E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999800458770347	WITHOUT_CLASSIFICATION	1.995412296538428E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.999967414430537	WITHOUT_CLASSIFICATION	3.258556946292106E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999564449313507	WITHOUT_CLASSIFICATION	4.3555068649209634E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9991955243352305	WITHOUT_CLASSIFICATION	8.044756647693721E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9998544737301224	WITHOUT_CLASSIFICATION	1.4552626987771616E-4	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9989470389690557	WITHOUT_CLASSIFICATION	0.0010529610309443185	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.9999743837383094	WITHOUT_CLASSIFICATION	2.5616261690518064E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999593774557387	WITHOUT_CLASSIFICATION	4.0622544261388845E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9906904086426593	WITHOUT_CLASSIFICATION	0.009309591357340646	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995580939764251	WITHOUT_CLASSIFICATION	4.4190602357487046E-4	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9999495665834709	WITHOUT_CLASSIFICATION	5.043341652900237E-5	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.999249260911676	WITHOUT_CLASSIFICATION	7.507390883239246E-4	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.990174650078253	WITHOUT_CLASSIFICATION	0.009825349921746893	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9998943900186623	WITHOUT_CLASSIFICATION	1.0560998133757241E-4	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9991873601240854	WITHOUT_CLASSIFICATION	8.126398759145489E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998852331260655	WITHOUT_CLASSIFICATION	1.1476687393447815E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9998472641405061	WITHOUT_CLASSIFICATION	1.5273585949394036E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9998988798977316	WITHOUT_CLASSIFICATION	1.0112010226838405E-4	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9999021433665973	WITHOUT_CLASSIFICATION	9.785663340261641E-5	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9960971813293259	WITHOUT_CLASSIFICATION	0.0039028186706741583	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9993471127566483	WITHOUT_CLASSIFICATION	6.528872433517464E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9944508711832072	WITHOUT_CLASSIFICATION	0.0055491288167928724	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9991292352809957	WITHOUT_CLASSIFICATION	8.707647190042413E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.9997780083290239	WITHOUT_CLASSIFICATION	2.2199167097619547E-4	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9990901662855016	WITHOUT_CLASSIFICATION	9.098337144983669E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9992736714648225	WITHOUT_CLASSIFICATION	7.263285351774014E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9972123734989548	WITHOUT_CLASSIFICATION	0.0027876265010452587	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9972123734989548	WITHOUT_CLASSIFICATION	0.0027876265010452587	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9990514272524613	WITHOUT_CLASSIFICATION	9.48572747538751E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.9998304454889491	WITHOUT_CLASSIFICATION	1.69554511050964E-4	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9990675487502926	WITHOUT_CLASSIFICATION	9.324512497073114E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9994231840991311	WITHOUT_CLASSIFICATION	5.768159008688106E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9997735780071411	WITHOUT_CLASSIFICATION	2.2642199285886387E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9994107967546586	WITHOUT_CLASSIFICATION	5.892032453413391E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.9997032996281155	WITHOUT_CLASSIFICATION	2.967003718845097E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9993701971355783	WITHOUT_CLASSIFICATION	6.298028644217103E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999797760631629	WITHOUT_CLASSIFICATION	2.022393683711033E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999937463445306	WITHOUT_CLASSIFICATION	6.253655469249195E-6	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9997889229491244	WITHOUT_CLASSIFICATION	2.1107705087554108E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.999851332510105	WITHOUT_CLASSIFICATION	1.4866748989490563E-4	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.9999504557687146	WITHOUT_CLASSIFICATION	4.95442312854941E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9998368950513015	WITHOUT_CLASSIFICATION	1.6310494869850318E-4	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9999634839039351	WITHOUT_CLASSIFICATION	3.651609606500184E-5	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9998743627776918	WITHOUT_CLASSIFICATION	1.256372223080821E-4	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999254598190738	WITHOUT_CLASSIFICATION	7.454018092620856E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999113041498834	WITHOUT_CLASSIFICATION	8.869585011662623E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.9987207236428708	WITHOUT_CLASSIFICATION	0.0012792763571292385	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9988600462040673	WITHOUT_CLASSIFICATION	0.0011399537959327283	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998925852606602	WITHOUT_CLASSIFICATION	1.0741473933976511E-4	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999197224903744	WITHOUT_CLASSIFICATION	8.027750962557236E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9998346946155884	WITHOUT_CLASSIFICATION	1.6530538441157926E-4	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.999725366369464	WITHOUT_CLASSIFICATION	2.746336305360497E-4	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998207656535931	WITHOUT_CLASSIFICATION	1.7923434640691613E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9996135821780212	WITHOUT_CLASSIFICATION	3.864178219788027E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9999183748634651	WITHOUT_CLASSIFICATION	8.16251365347827E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9994155919367228	WITHOUT_CLASSIFICATION	5.844080632772839E-4	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999532363739361	WITHOUT_CLASSIFICATION	4.6763626063877294E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9997698173126858	WITHOUT_CLASSIFICATION	2.3018268731426843E-4	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.999537711893103	WITHOUT_CLASSIFICATION	4.622881068968852E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.9998013978330124	WITHOUT_CLASSIFICATION	1.986021669875839E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9998491326986075	WITHOUT_CLASSIFICATION	1.508673013924136E-4	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9999042135720959	WITHOUT_CLASSIFICATION	9.57864279041101E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9998491326986075	WITHOUT_CLASSIFICATION	1.508673013924136E-4	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9998295692141302	WITHOUT_CLASSIFICATION	1.7043078586985742E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.997942723464135	WITHOUT_CLASSIFICATION	0.002057276535864898	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.997942723464135	WITHOUT_CLASSIFICATION	0.002057276535864898	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.997942723464135	WITHOUT_CLASSIFICATION	0.002057276535864898	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999823879535568	WITHOUT_CLASSIFICATION	1.7612046443198808E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999823879535568	WITHOUT_CLASSIFICATION	1.7612046443198808E-5	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9982154609598284	WITHOUT_CLASSIFICATION	0.0017845390401716441	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9997262630699512	WITHOUT_CLASSIFICATION	2.7373693004889473E-4	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9994061842093322	WITHOUT_CLASSIFICATION	5.938157906678025E-4	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9997872969842864	WITHOUT_CLASSIFICATION	2.1270301571369273E-4	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.999991774121023	WITHOUT_CLASSIFICATION	8.225878976989907E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.9999817182612424	WITHOUT_CLASSIFICATION	1.8281738757565145E-5	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9996393397862834	WITHOUT_CLASSIFICATION	3.6066021371666275E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997056188609392	WITHOUT_CLASSIFICATION	2.9438113906079513E-4	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9999595398525328	WITHOUT_CLASSIFICATION	4.0460147467077214E-5	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.999953806632961	WITHOUT_CLASSIFICATION	4.6193367039057726E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999728393008798	WITHOUT_CLASSIFICATION	2.7160699120207934E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9995837509430715	WITHOUT_CLASSIFICATION	4.1624905692843765E-4	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999543669199795	WITHOUT_CLASSIFICATION	4.563308002037677E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999331283203347	WITHOUT_CLASSIFICATION	6.687167966544731E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999555134632785	WITHOUT_CLASSIFICATION	4.448653672151203E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999797041476172	WITHOUT_CLASSIFICATION	2.0295852382797596E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9998194289514402	WITHOUT_CLASSIFICATION	1.805710485599352E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.99993889840403	WITHOUT_CLASSIFICATION	6.110159596985536E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.99993889840403	WITHOUT_CLASSIFICATION	6.110159596985536E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999241821692861	WITHOUT_CLASSIFICATION	7.581783071388712E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.999941245623851	WITHOUT_CLASSIFICATION	5.875437614900975E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.999941245623851	WITHOUT_CLASSIFICATION	5.875437614900975E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9997080344308047	WITHOUT_CLASSIFICATION	2.919655691953597E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999302347434563	WITHOUT_CLASSIFICATION	6.976525654365934E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999806112008056	WITHOUT_CLASSIFICATION	1.9388799194390067E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9998940184784547	WITHOUT_CLASSIFICATION	1.0598152154530465E-4	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999612826308408	WITHOUT_CLASSIFICATION	3.8717369159233126E-5	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9996550726673836	WITHOUT_CLASSIFICATION	3.4492733261641594E-4	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999234130022544	WITHOUT_CLASSIFICATION	7.658699774555844E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.99995624698241	WITHOUT_CLASSIFICATION	4.375301758989852E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999799503551217	WITHOUT_CLASSIFICATION	2.0049644878361354E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999823080762131	WITHOUT_CLASSIFICATION	1.7691923786862887E-5	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.9999828769554004	WITHOUT_CLASSIFICATION	1.7123044599519866E-5	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9991017779522586	WITHOUT_CLASSIFICATION	8.982220477413361E-4	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999945413035305	WITHOUT_CLASSIFICATION	5.458696469575757E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9999622240782484	WITHOUT_CLASSIFICATION	3.777592175163839E-5	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9997056188609392	WITHOUT_CLASSIFICATION	2.9438113906079513E-4	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999503550357414	WITHOUT_CLASSIFICATION	4.9644964258645486E-5	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999956005330888	WITHOUT_CLASSIFICATION	4.399466911212394E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999956005330888	WITHOUT_CLASSIFICATION	4.399466911212394E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9996154617527351	WITHOUT_CLASSIFICATION	3.845382472649074E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9983159266377437	WITHOUT_CLASSIFICATION	0.0016840733622562527	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.9998742005608922	WITHOUT_CLASSIFICATION	1.2579943910777163E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9997377539302419	WITHOUT_CLASSIFICATION	2.622460697582153E-4	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9999791967032012	WITHOUT_CLASSIFICATION	2.0803296798725673E-5	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.9998804099558377	WITHOUT_CLASSIFICATION	1.1959004416217607E-4	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9995028465266349	WITHOUT_CLASSIFICATION	4.971534733650425E-4	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9861678406970065	WITHOUT_CLASSIFICATION	0.013832159302993507	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9989344243916055	WITHOUT_CLASSIFICATION	0.0010655756083944746	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.9989340889015792	WITHOUT_CLASSIFICATION	0.0010659110984208456	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9997893324032697	WITHOUT_CLASSIFICATION	2.1066759673031706E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9973801297184396	WITHOUT_CLASSIFICATION	0.0026198702815603847	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9977243321186424	WITHOUT_CLASSIFICATION	0.002275667881357688	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.9999085676057604	WITHOUT_CLASSIFICATION	9.143239423963845E-5	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.999972808207709	WITHOUT_CLASSIFICATION	2.7191792291048745E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9992943756405689	WITHOUT_CLASSIFICATION	7.056243594311665E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999646039390075	WITHOUT_CLASSIFICATION	3.539606099249409E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999246665559384	WITHOUT_CLASSIFICATION	7.533344406160962E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999944017666035	WITHOUT_CLASSIFICATION	5.59823339656878E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998842666559363	WITHOUT_CLASSIFICATION	1.157333440636745E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.999863365426566	WITHOUT_CLASSIFICATION	1.3663457343411582E-4	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9998292509156657	WITHOUT_CLASSIFICATION	1.707490843343494E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999356278154569	WITHOUT_CLASSIFICATION	6.43721845431847E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.9999947186697791	WITHOUT_CLASSIFICATION	5.281330221008973E-6	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9996943184646386	WITHOUT_CLASSIFICATION	3.0568153536141875E-4	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9993864297261311	WITHOUT_CLASSIFICATION	6.135702738689355E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9988527043657893	WITHOUT_CLASSIFICATION	0.0011472956342106736	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999699540589542	WITHOUT_CLASSIFICATION	3.0045941045804596E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9999166000572066	WITHOUT_CLASSIFICATION	8.339994279331971E-5	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9994412026902584	WITHOUT_CLASSIFICATION	5.587973097417172E-4	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.9991777440126213	WITHOUT_CLASSIFICATION	8.222559873787189E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9996419685657802	WITHOUT_CLASSIFICATION	3.5803143421974385E-4	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.8840234972842257	WITHOUT_CLASSIFICATION	0.11597650271577432	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9998234910448328	WITHOUT_CLASSIFICATION	1.765089551671811E-4	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.9988527043657893	WITHOUT_CLASSIFICATION	0.0011472956342106736	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9990203595648228	WITHOUT_CLASSIFICATION	9.79640435177218E-4	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9998234910448328	WITHOUT_CLASSIFICATION	1.765089551671811E-4	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9971167301310591	WITHOUT_CLASSIFICATION	0.0028832698689409313	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999707578505783	WITHOUT_CLASSIFICATION	2.9242149421725693E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9999225361742261	WITHOUT_CLASSIFICATION	7.746382577391683E-5	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9997007383068206	WITHOUT_CLASSIFICATION	2.992616931794146E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.9999074880385395	WITHOUT_CLASSIFICATION	9.251196146052123E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998158200754945	WITHOUT_CLASSIFICATION	1.8417992450560377E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9998158200754945	WITHOUT_CLASSIFICATION	1.8417992450560377E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999847092309416	WITHOUT_CLASSIFICATION	1.5290769058393047E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9997000454798872	WITHOUT_CLASSIFICATION	2.9995452011272574E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999926850735874	WITHOUT_CLASSIFICATION	7.314926412602013E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.999926850735874	WITHOUT_CLASSIFICATION	7.314926412602013E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999840652391233	WITHOUT_CLASSIFICATION	1.5934760876738924E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9997191107235142	WITHOUT_CLASSIFICATION	2.8088927648580754E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.99926789435941	WITHOUT_CLASSIFICATION	7.321056405900051E-4	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9983810251279936	WITHOUT_CLASSIFICATION	0.00161897487200632	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999416293575351	WITHOUT_CLASSIFICATION	5.8370642465025365E-5	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9997341104653495	WITHOUT_CLASSIFICATION	2.658895346504004E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998716213650307	WITHOUT_CLASSIFICATION	1.2837863496926557E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9999349827618549	WITHOUT_CLASSIFICATION	6.501723814505946E-5	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999759783028143	WITHOUT_CLASSIFICATION	2.4021697185847058E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999057716880919	WITHOUT_CLASSIFICATION	9.422831190815991E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9998957726519185	WITHOUT_CLASSIFICATION	1.0422734808144143E-4	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9998853570636128	WITHOUT_CLASSIFICATION	1.1464293638716963E-4	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.999774685658345	WITHOUT_CLASSIFICATION	2.2531434165504584E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999511054400138	WITHOUT_CLASSIFICATION	4.889455998621069E-4	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.9999350666450345	WITHOUT_CLASSIFICATION	6.49333549655445E-5	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9996778376932044	WITHOUT_CLASSIFICATION	3.221623067956678E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9997510916724437	WITHOUT_CLASSIFICATION	2.4890832755626634E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9999489687344876	WITHOUT_CLASSIFICATION	5.1031265512383665E-5	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.9977508143460939	WITHOUT_CLASSIFICATION	0.002249185653906057	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9997532109652364	WITHOUT_CLASSIFICATION	2.467890347636448E-4	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9997398567616147	WITHOUT_CLASSIFICATION	2.601432383852658E-4	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9997398567616147	WITHOUT_CLASSIFICATION	2.601432383852658E-4	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9999721098664744	WITHOUT_CLASSIFICATION	2.789013352561467E-5	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999307166727602	WITHOUT_CLASSIFICATION	6.92833272396999E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9997376651128353	WITHOUT_CLASSIFICATION	2.6233488716467465E-4	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.99980250070232	WITHOUT_CLASSIFICATION	1.9749929768003252E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9997466478922835	WITHOUT_CLASSIFICATION	2.533521077164966E-4	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.9997911158300374	WITHOUT_CLASSIFICATION	2.0888416996252035E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9996243054971441	WITHOUT_CLASSIFICATION	3.7569450285588403E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9994149087067946	WITHOUT_CLASSIFICATION	5.850912932054511E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998016574903	WITHOUT_CLASSIFICATION	1.9834250976539124E-7	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999983360586521	WITHOUT_CLASSIFICATION	1.6639413478938118E-6	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.999994010553786	WITHOUT_CLASSIFICATION	5.989446213918875E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9992864151938521	WITHOUT_CLASSIFICATION	7.135848061478884E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9999370032042875	WITHOUT_CLASSIFICATION	6.299679571246474E-5	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999562499342014	WITHOUT_CLASSIFICATION	4.375006579861609E-5	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999965884540181	WITHOUT_CLASSIFICATION	3.4115459818936288E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9992766644457006	WITHOUT_CLASSIFICATION	7.233355542993547E-4	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9983633752000961	WITHOUT_CLASSIFICATION	0.0016366247999039221	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9979103691127053	WITHOUT_CLASSIFICATION	0.0020896308872947124	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9999658762965994	WITHOUT_CLASSIFICATION	3.412370340069366E-5	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9991162620319787	WITHOUT_CLASSIFICATION	8.83737968021347E-4	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9998277163028356	WITHOUT_CLASSIFICATION	1.7228369716436318E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999458353795582	WITHOUT_CLASSIFICATION	5.416462044189407E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.999986443817322	WITHOUT_CLASSIFICATION	1.3556182677905413E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9981201505718679	WITHOUT_CLASSIFICATION	0.001879849428132178	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9968589497278375	WITHOUT_CLASSIFICATION	0.0031410502721624755	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999953633748265	WITHOUT_CLASSIFICATION	4.6366251734787154E-6	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999725654212448	WITHOUT_CLASSIFICATION	2.743457875523719E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999831142209186	WITHOUT_CLASSIFICATION	1.688577908140728E-5	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.999547858040714	WITHOUT_CLASSIFICATION	4.5214195928604554E-4	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9997594881110379	WITHOUT_CLASSIFICATION	2.4051188896216468E-4	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999549000424399	WITHOUT_CLASSIFICATION	4.5099957560019215E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999601727141374	WITHOUT_CLASSIFICATION	3.9827285862670805E-5	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9997326047298015	WITHOUT_CLASSIFICATION	2.6739527019840106E-4	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.9986348908434572	WITHOUT_CLASSIFICATION	0.001365109156542772	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9998563937990635	WITHOUT_CLASSIFICATION	1.4360620093640213E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999736806344391	WITHOUT_CLASSIFICATION	2.6319365560772496E-5	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9999220280322032	WITHOUT_CLASSIFICATION	7.797196779684495E-5	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9978222582727224	WITHOUT_CLASSIFICATION	0.0021777417272775576	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9880710724811163	WITHOUT_CLASSIFICATION	0.011928927518883813	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.9999904150272775	WITHOUT_CLASSIFICATION	9.58497272263735E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9962387465289494	WITHOUT_CLASSIFICATION	0.003761253471050734	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9962387465289494	WITHOUT_CLASSIFICATION	0.003761253471050734	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999924539988169	WITHOUT_CLASSIFICATION	7.546001183082121E-6	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9998122847867595	WITHOUT_CLASSIFICATION	1.877152132404752E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.9998764969916836	WITHOUT_CLASSIFICATION	1.235030083164565E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9998188592978767	WITHOUT_CLASSIFICATION	1.8114070212330233E-4	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999798320636816	WITHOUT_CLASSIFICATION	2.0167936318479596E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.9998755253189178	WITHOUT_CLASSIFICATION	1.2447468108219223E-4	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9998863504878985	WITHOUT_CLASSIFICATION	1.1364951210152444E-4	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9967769300520222	WITHOUT_CLASSIFICATION	0.0032230699479778575	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9985605127282667	WITHOUT_CLASSIFICATION	0.0014394872717331914	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.9999129150477568	WITHOUT_CLASSIFICATION	8.708495224320913E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.999895505897168	WITHOUT_CLASSIFICATION	1.0449410283198027E-4	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999860223288684	WITHOUT_CLASSIFICATION	1.3977671131635724E-5	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999919078597341	WITHOUT_CLASSIFICATION	8.092140265851493E-6	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999600187410678	WITHOUT_CLASSIFICATION	3.9981258932312714E-5	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999935563644128	WITHOUT_CLASSIFICATION	6.4436355872092926E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999840881035701	WITHOUT_CLASSIFICATION	1.5911896429979584E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999631566175299	WITHOUT_CLASSIFICATION	3.684338247013634E-5	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999904242869438	WITHOUT_CLASSIFICATION	9.575713056190428E-5	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999547235212826	WITHOUT_CLASSIFICATION	4.5276478717459586E-5	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998823265691702	WITHOUT_CLASSIFICATION	1.1767343082988259E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9999645492263867	WITHOUT_CLASSIFICATION	3.545077361335512E-5	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999732900725938	WITHOUT_CLASSIFICATION	2.6709927406134433E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.9999307788387505	WITHOUT_CLASSIFICATION	6.922116124945211E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.99999496411799	WITHOUT_CLASSIFICATION	5.0358820100432284E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999696926175621	WITHOUT_CLASSIFICATION	3.0307382437962856E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999627554932018	WITHOUT_CLASSIFICATION	3.724450679824717E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.9999871215413353	WITHOUT_CLASSIFICATION	1.2878458664750487E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9999443744149749	WITHOUT_CLASSIFICATION	5.56255850251614E-5	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999418643284068	WITHOUT_CLASSIFICATION	5.813567159313406E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999317053448468	WITHOUT_CLASSIFICATION	6.829465515325907E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9999870782716239	WITHOUT_CLASSIFICATION	1.2921728376226286E-5	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999621153038919	WITHOUT_CLASSIFICATION	3.788469610812889E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9999511453052553	WITHOUT_CLASSIFICATION	4.885469474459389E-5	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.9999736806344391	WITHOUT_CLASSIFICATION	2.6319365560772496E-5	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.999735620858353	WITHOUT_CLASSIFICATION	2.6437914164698177E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999696067491023	WITHOUT_CLASSIFICATION	3.0393250897721563E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999696067491023	WITHOUT_CLASSIFICATION	3.0393250897721563E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999433074827904	WITHOUT_CLASSIFICATION	5.669251720958126E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9995787544086908	WITHOUT_CLASSIFICATION	4.21245591309067E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9998229660253404	WITHOUT_CLASSIFICATION	1.7703397465966656E-4	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999672961376085	WITHOUT_CLASSIFICATION	3.270386239153539E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999697970738827	WITHOUT_CLASSIFICATION	3.020292611734911E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.999988053153202	WITHOUT_CLASSIFICATION	1.1946846798004693E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999276614826182	WITHOUT_CLASSIFICATION	7.233851738167305E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999179022862056	WITHOUT_CLASSIFICATION	8.20977137943761E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999675250148632	WITHOUT_CLASSIFICATION	3.247498513675283E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.999803383389579	WITHOUT_CLASSIFICATION	1.9661661042107416E-4	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999111046132924	WITHOUT_CLASSIFICATION	8.889538670767835E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.999957631459886	WITHOUT_CLASSIFICATION	4.236854011406504E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9999970977423879	WITHOUT_CLASSIFICATION	2.902257612183219E-6	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9999000582911527	WITHOUT_CLASSIFICATION	9.994170884734719E-5	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9997042385320392	WITHOUT_CLASSIFICATION	2.957614679607923E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9996365631132376	WITHOUT_CLASSIFICATION	3.6343688676251424E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.9996643474416181	WITHOUT_CLASSIFICATION	3.356525583819188E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9998672072304141	WITHOUT_CLASSIFICATION	1.3279276958594067E-4	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9991964266709943	WITHOUT_CLASSIFICATION	8.035733290057693E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9998848360732404	WITHOUT_CLASSIFICATION	1.1516392675969823E-4	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.999889993732865	WITHOUT_CLASSIFICATION	1.100062671350037E-4	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.9998976538668868	WITHOUT_CLASSIFICATION	1.0234613311318994E-4	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.9999115891697191	WITHOUT_CLASSIFICATION	8.841083028095085E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999894703460787	WITHOUT_CLASSIFICATION	1.0529653921294097E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9998265620355626	WITHOUT_CLASSIFICATION	1.734379644372593E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999810191317875	WITHOUT_CLASSIFICATION	1.898086821249286E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9998407494130209	WITHOUT_CLASSIFICATION	1.5925058697900083E-4	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999640552524862	WITHOUT_CLASSIFICATION	3.5944747513821614E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999892205145111	WITHOUT_CLASSIFICATION	1.0779485488861867E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999686778106747	WITHOUT_CLASSIFICATION	3.132218932532539E-5	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999686778106747	WITHOUT_CLASSIFICATION	3.132218932532539E-5	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9998822255888618	WITHOUT_CLASSIFICATION	1.1777441113826539E-4	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9998540152049912	WITHOUT_CLASSIFICATION	1.459847950088321E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999614461409134	WITHOUT_CLASSIFICATION	3.855385908655021E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999524234617903	WITHOUT_CLASSIFICATION	4.7576538209713606E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.999894703460787	WITHOUT_CLASSIFICATION	1.0529653921294097E-4	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9998265620355626	WITHOUT_CLASSIFICATION	1.734379644372593E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999810191317875	WITHOUT_CLASSIFICATION	1.898086821249286E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999640552524862	WITHOUT_CLASSIFICATION	3.5944747513821614E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999493181624818	WITHOUT_CLASSIFICATION	5.068183751813065E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9997716117706397	WITHOUT_CLASSIFICATION	2.2838822936037411E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999662841281174	WITHOUT_CLASSIFICATION	3.371587188255739E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999851068201274	WITHOUT_CLASSIFICATION	1.4893179872612039E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999893438562758	WITHOUT_CLASSIFICATION	1.0656143724308545E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999315421774385	WITHOUT_CLASSIFICATION	6.845782256157763E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999851417222655	WITHOUT_CLASSIFICATION	1.485827773452741E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996925373273037	WITHOUT_CLASSIFICATION	3.074626726963239E-4	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9999328255716745	WITHOUT_CLASSIFICATION	6.717442832549548E-5	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999769142970684	WITHOUT_CLASSIFICATION	2.3085702931643343E-5	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.999935252510048	WITHOUT_CLASSIFICATION	6.474748995198966E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999738849650331	WITHOUT_CLASSIFICATION	2.6115034966900177E-5	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9997218517348146	WITHOUT_CLASSIFICATION	2.781482651853451E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9999725601011543	WITHOUT_CLASSIFICATION	2.7439898845725873E-5	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999447460839943	WITHOUT_CLASSIFICATION	5.525391600565609E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999958514629191	WITHOUT_CLASSIFICATION	4.148537080830998E-6	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9999628942303285	WITHOUT_CLASSIFICATION	3.71057696714653E-5	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9997847809855197	WITHOUT_CLASSIFICATION	2.152190144804378E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9994424184269292	WITHOUT_CLASSIFICATION	5.575815730707803E-4	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999524234617903	WITHOUT_CLASSIFICATION	4.7576538209713606E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9997716117706397	WITHOUT_CLASSIFICATION	2.2838822936037411E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999662841281174	WITHOUT_CLASSIFICATION	3.371587188255739E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999893438562758	WITHOUT_CLASSIFICATION	1.0656143724308545E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.9999315421774385	WITHOUT_CLASSIFICATION	6.845782256157763E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999851417222655	WITHOUT_CLASSIFICATION	1.485827773452741E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996925373273037	WITHOUT_CLASSIFICATION	3.074626726963239E-4	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9998862898132164	WITHOUT_CLASSIFICATION	1.1371018678354984E-4	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9970789489599948	WITHOUT_CLASSIFICATION	0.002921051040005151	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.999952623658739	WITHOUT_CLASSIFICATION	4.737634126096203E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999640743685085	WITHOUT_CLASSIFICATION	3.5925631491329286E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.99936211802836	WITHOUT_CLASSIFICATION	6.378819716400033E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.99936211802836	WITHOUT_CLASSIFICATION	6.378819716400033E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9998482005964392	WITHOUT_CLASSIFICATION	1.517994035607839E-4	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.999937331410307	WITHOUT_CLASSIFICATION	6.266858969292423E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.99998494946205	WITHOUT_CLASSIFICATION	1.5050537949965284E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999641353327994	WITHOUT_CLASSIFICATION	3.586466720059148E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.9999950690697791	WITHOUT_CLASSIFICATION	4.930930220965042E-6	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9997926431663963	WITHOUT_CLASSIFICATION	2.0735683360365267E-4	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.9999799014754767	WITHOUT_CLASSIFICATION	2.0098524523375295E-5	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999634926525736	WITHOUT_CLASSIFICATION	3.650734742647627E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9998712015875847	WITHOUT_CLASSIFICATION	1.2879841241530398E-4	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9995737335244466	WITHOUT_CLASSIFICATION	4.2626647555350035E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9995307013566066	WITHOUT_CLASSIFICATION	4.6929864339346973E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9999360698466281	WITHOUT_CLASSIFICATION	6.393015337199007E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998192063362278	WITHOUT_CLASSIFICATION	1.807936637723206E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999867315626732	WITHOUT_CLASSIFICATION	1.326843732679461E-4	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999013493769071	WITHOUT_CLASSIFICATION	9.865062309287128E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9998676174348657	WITHOUT_CLASSIFICATION	1.3238256513414297E-4	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999483553963316	WITHOUT_CLASSIFICATION	5.1644603668328516E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999514270384894	WITHOUT_CLASSIFICATION	4.857296151073163E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9992844595752066	WITHOUT_CLASSIFICATION	7.155404247934637E-4	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9999984376324867	WITHOUT_CLASSIFICATION	1.5623675132523822E-6	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.9951080375138052	WITHOUT_CLASSIFICATION	0.004891962486194926	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9998931027790448	WITHOUT_CLASSIFICATION	1.0689722095524678E-4	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9998646078387123	WITHOUT_CLASSIFICATION	1.353921612877766E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999953934114493	WITHOUT_CLASSIFICATION	4.6065885507724325E-6	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999402928352049	WITHOUT_CLASSIFICATION	5.9707164795171205E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9993959077257264	WITHOUT_CLASSIFICATION	6.040922742735199E-4	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9999953934114493	WITHOUT_CLASSIFICATION	4.6065885507724325E-6	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.999867315626732	WITHOUT_CLASSIFICATION	1.326843732679461E-4	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9998944885968291	WITHOUT_CLASSIFICATION	1.0551140317083897E-4	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.9998215923248684	WITHOUT_CLASSIFICATION	1.784076751316367E-4	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9999477640059947	WITHOUT_CLASSIFICATION	5.223599400534639E-5	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.997857366847075	WITHOUT_CLASSIFICATION	0.0021426331529250395	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9999717130027207	WITHOUT_CLASSIFICATION	2.8286997279259472E-5	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999715124650543	WITHOUT_CLASSIFICATION	2.8487534945710454E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.9997679830831393	WITHOUT_CLASSIFICATION	2.320169168606014E-4	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999797843623648	WITHOUT_CLASSIFICATION	2.0215637635209754E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9336926649651852	WITHOUT_CLASSIFICATION	0.06630733503481474	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9976489031873867	WITHOUT_CLASSIFICATION	0.002351096812613145	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9988356061558874	WITHOUT_CLASSIFICATION	0.0011643938441125606	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9999404150212197	WITHOUT_CLASSIFICATION	5.958497878022254E-5	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9984269101610584	WITHOUT_CLASSIFICATION	0.0015730898389415633	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999381046961267	WITHOUT_CLASSIFICATION	6.189530387327629E-5	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9998036765593561	WITHOUT_CLASSIFICATION	1.9632344064383548E-4	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9994532230442372	WITHOUT_CLASSIFICATION	5.467769557627764E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9996984415211551	WITHOUT_CLASSIFICATION	3.0155847884492167E-4	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9975790031783716	WITHOUT_CLASSIFICATION	0.002420996821628463	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999999882603455	WITHOUT_CLASSIFICATION	1.1739654466401052E-8	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998647974059713	WITHOUT_CLASSIFICATION	1.3520259402872477E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999941745366397	WITHOUT_CLASSIFICATION	5.825463360292446E-6	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9997853245696922	WITHOUT_CLASSIFICATION	2.1467543030777224E-4	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9994718227586286	WITHOUT_CLASSIFICATION	5.28177241371392E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999173219855654	WITHOUT_CLASSIFICATION	8.267801443469175E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.999994357462599	WITHOUT_CLASSIFICATION	5.642537401028144E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9994579397734054	WITHOUT_CLASSIFICATION	5.420602265945488E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9945012664639679	WITHOUT_CLASSIFICATION	0.005498733536032152	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9997648436670051	WITHOUT_CLASSIFICATION	2.3515633299492822E-4	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9999032227738023	WITHOUT_CLASSIFICATION	9.677722619774406E-5	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9998729905977057	WITHOUT_CLASSIFICATION	1.2700940229422758E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998192063362278	WITHOUT_CLASSIFICATION	1.807936637723206E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.9999051948798829	WITHOUT_CLASSIFICATION	9.48051201170486E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9981727925835966	WITHOUT_CLASSIFICATION	0.0018272074164033762	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999559129133752	WITHOUT_CLASSIFICATION	4.408708662490642E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999665080948854	WITHOUT_CLASSIFICATION	3.349190511459349E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999665080948854	WITHOUT_CLASSIFICATION	3.349190511459349E-4	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9997139213634288	WITHOUT_CLASSIFICATION	2.8607863657110984E-4	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999815788428821	WITHOUT_CLASSIFICATION	1.8421157117926097E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999417389001607	WITHOUT_CLASSIFICATION	5.8261099839259896E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999596415661182	WITHOUT_CLASSIFICATION	4.0358433881751744E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9994119450419706	WITHOUT_CLASSIFICATION	5.880549580293005E-4	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.9998073665943872	WITHOUT_CLASSIFICATION	1.9263340561275966E-4	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9996701782287046	WITHOUT_CLASSIFICATION	3.298217712953957E-4	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999694315000082	WITHOUT_CLASSIFICATION	3.0568499991725685E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9997043877852104	WITHOUT_CLASSIFICATION	2.956122147896114E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999391808379584	WITHOUT_CLASSIFICATION	6.081916204147417E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9996936582869408	WITHOUT_CLASSIFICATION	3.063417130592256E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999351385525184	WITHOUT_CLASSIFICATION	6.486144748162637E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9997952865961154	WITHOUT_CLASSIFICATION	2.047134038844956E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9998879043665857	WITHOUT_CLASSIFICATION	1.1209563341435117E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999892887014731	WITHOUT_CLASSIFICATION	1.071129852700752E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999892887014731	WITHOUT_CLASSIFICATION	1.071129852700752E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9996780478409044	WITHOUT_CLASSIFICATION	3.219521590955656E-4	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9996780478409044	WITHOUT_CLASSIFICATION	3.219521590955656E-4	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999724240062986	WITHOUT_CLASSIFICATION	2.757599370142595E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9971294533272654	WITHOUT_CLASSIFICATION	0.002870546672734466	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998953279693013	WITHOUT_CLASSIFICATION	1.0467203069876607E-4	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999985740469457	WITHOUT_CLASSIFICATION	1.4259530543442475E-6	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9995688924274257	WITHOUT_CLASSIFICATION	4.3110757257422064E-4	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9999010045674386	WITHOUT_CLASSIFICATION	9.899543256139742E-5	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999893605755421	WITHOUT_CLASSIFICATION	1.0639424457895712E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999351385525184	WITHOUT_CLASSIFICATION	6.486144748162637E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9997952865961154	WITHOUT_CLASSIFICATION	2.047134038844956E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9993984927782273	WITHOUT_CLASSIFICATION	6.015072217726519E-4	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9997683100577422	WITHOUT_CLASSIFICATION	2.3168994225769972E-4	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.998786925380349	WITHOUT_CLASSIFICATION	0.0012130746196510659	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999689604426956	WITHOUT_CLASSIFICATION	3.103955730449849E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.999992677496039	WITHOUT_CLASSIFICATION	7.322503960995457E-6	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9935156235954303	WITHOUT_CLASSIFICATION	0.006484376404569675	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9998894946552449	WITHOUT_CLASSIFICATION	1.105053447550533E-4	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9998894946552449	WITHOUT_CLASSIFICATION	1.105053447550533E-4	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999242919421513	WITHOUT_CLASSIFICATION	7.570805784866973E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999845100819506	WITHOUT_CLASSIFICATION	1.5489918049435724E-5	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9998193200748327	WITHOUT_CLASSIFICATION	1.8067992516741977E-4	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9992586891276468	WITHOUT_CLASSIFICATION	7.413108723531166E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9997952865961154	WITHOUT_CLASSIFICATION	2.047134038844956E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9958892442195013	WITHOUT_CLASSIFICATION	0.004110755780498663	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9998334546834758	WITHOUT_CLASSIFICATION	1.6654531652417822E-4	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999806333477292	WITHOUT_CLASSIFICATION	1.9366652270728322E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9992583107572817	WITHOUT_CLASSIFICATION	7.416892427183794E-4	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999946434449462	WITHOUT_CLASSIFICATION	5.356555053847521E-6	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999278651230753	WITHOUT_CLASSIFICATION	7.213487692467751E-5	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9997062140525237	WITHOUT_CLASSIFICATION	2.937859474762551E-4	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9999687910308298	WITHOUT_CLASSIFICATION	3.1208969170254626E-5	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.99986089974281	WITHOUT_CLASSIFICATION	1.3910025719002895E-4	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999863405305867	WITHOUT_CLASSIFICATION	1.3659469413338037E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9999271403270209	WITHOUT_CLASSIFICATION	7.285967297910509E-5	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9999608401469761	WITHOUT_CLASSIFICATION	3.915985302398991E-5	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9996581353221391	WITHOUT_CLASSIFICATION	3.4186467786095014E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9995191253583969	WITHOUT_CLASSIFICATION	4.808746416031502E-4	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9999582369132305	WITHOUT_CLASSIFICATION	4.176308676959379E-5	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9529253205389675	WITHOUT_CLASSIFICATION	0.047074679461032554	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998484594689795	WITHOUT_CLASSIFICATION	1.5154053102050234E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9997304329005452	WITHOUT_CLASSIFICATION	2.6956709945483685E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999188541379301	WITHOUT_CLASSIFICATION	8.114586206983275E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.9998542179254994	WITHOUT_CLASSIFICATION	1.4578207450058065E-4	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.999757724738885	WITHOUT_CLASSIFICATION	2.422752611150599E-4	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9991571844016152	WITHOUT_CLASSIFICATION	8.428155983847977E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.999785133212178	WITHOUT_CLASSIFICATION	2.148667878220634E-4	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9995104888509403	WITHOUT_CLASSIFICATION	4.89511149059606E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999450059379592	WITHOUT_CLASSIFICATION	5.49940620408135E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9999169093721604	WITHOUT_CLASSIFICATION	8.309062783959846E-5	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.999690790091425	WITHOUT_CLASSIFICATION	3.0920990857498165E-4	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9981727925835966	WITHOUT_CLASSIFICATION	0.0018272074164033762	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.999785133212178	WITHOUT_CLASSIFICATION	2.148667878220634E-4	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.9999811727367933	WITHOUT_CLASSIFICATION	1.882726320664298E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998881754646828	WITHOUT_CLASSIFICATION	1.1182453531720601E-4	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9984832077409992	WITHOUT_CLASSIFICATION	0.0015167922590007211	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9973066455906883	WITHOUT_CLASSIFICATION	0.0026933544093116863	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9973066455906883	WITHOUT_CLASSIFICATION	0.0026933544093116863	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999899414710971	WITHOUT_CLASSIFICATION	1.0058528902863418E-5	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9999863927852377	WITHOUT_CLASSIFICATION	1.3607214762330375E-5	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9998822614483411	WITHOUT_CLASSIFICATION	1.177385516589282E-4	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999910584540503	WITHOUT_CLASSIFICATION	8.941545949537904E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9997910795044919	WITHOUT_CLASSIFICATION	2.0892049550815062E-4	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9998484852247621	WITHOUT_CLASSIFICATION	1.515147752378622E-4	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9999546974699826	WITHOUT_CLASSIFICATION	4.5302530017409005E-5	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9956622391953963	WITHOUT_CLASSIFICATION	0.004337760804603693	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999423801750804	WITHOUT_CLASSIFICATION	5.7619824919649054E-5	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9999423801750804	WITHOUT_CLASSIFICATION	5.7619824919649054E-5	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999668217089491	WITHOUT_CLASSIFICATION	3.317829105099818E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9997200631743869	WITHOUT_CLASSIFICATION	2.799368256131024E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999941767162186	WITHOUT_CLASSIFICATION	5.823283781395686E-6	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999898764943648	WITHOUT_CLASSIFICATION	1.012350563522488E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9997958264625711	WITHOUT_CLASSIFICATION	2.0417353742895291E-4	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9999878177982894	WITHOUT_CLASSIFICATION	1.2182201710641667E-5	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999978951373009	WITHOUT_CLASSIFICATION	2.104862699067671E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9999838843029712	WITHOUT_CLASSIFICATION	1.611569702869194E-5	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999949917378941	WITHOUT_CLASSIFICATION	5.008262106007469E-6	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9806157924841259	WITHOUT_CLASSIFICATION	0.0193842075158742	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999706369496428	WITHOUT_CLASSIFICATION	2.9363050357148264E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999676153932945	WITHOUT_CLASSIFICATION	3.238460670557334E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999181177621541	WITHOUT_CLASSIFICATION	8.188223784580624E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998773981623372	WITHOUT_CLASSIFICATION	1.2260183766281163E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998773981623372	WITHOUT_CLASSIFICATION	1.2260183766281163E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9998861240599505	WITHOUT_CLASSIFICATION	1.1387594004959711E-4	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9996925373273037	WITHOUT_CLASSIFICATION	3.074626726963239E-4	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9806157924841259	WITHOUT_CLASSIFICATION	0.0193842075158742	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999911587516479	WITHOUT_CLASSIFICATION	8.84124835206333E-6	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9989427613793975	WITHOUT_CLASSIFICATION	0.0010572386206024397	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999655903874989	WITHOUT_CLASSIFICATION	3.440961250119631E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999084416510624	WITHOUT_CLASSIFICATION	9.155834893760382E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999732528514877	WITHOUT_CLASSIFICATION	2.6747148512374788E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9998867246585529	WITHOUT_CLASSIFICATION	1.1327534144706632E-4	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.999941262828008	WITHOUT_CLASSIFICATION	5.8737171991865937E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9981727925835966	WITHOUT_CLASSIFICATION	0.0018272074164033762	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999555134632785	WITHOUT_CLASSIFICATION	4.448653672151203E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9998639771584632	WITHOUT_CLASSIFICATION	1.3602284153678803E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.9997456341232273	WITHOUT_CLASSIFICATION	2.543658767727902E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999265401665894	WITHOUT_CLASSIFICATION	7.34598334106321E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999603133376711	WITHOUT_CLASSIFICATION	3.9686662328907186E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999876888827407	WITHOUT_CLASSIFICATION	1.2311117259314103E-5	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.9995223674012436	WITHOUT_CLASSIFICATION	4.776325987563642E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9998042557755485	WITHOUT_CLASSIFICATION	1.9574422445149138E-4	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.9989310258962515	WITHOUT_CLASSIFICATION	0.001068974103748498	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9988817357769033	WITHOUT_CLASSIFICATION	0.0011182642230966073	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9997691783013026	WITHOUT_CLASSIFICATION	2.3082169869724145E-4	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9997999154595797	WITHOUT_CLASSIFICATION	2.0008454042036623E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9993808546061953	WITHOUT_CLASSIFICATION	6.191453938047268E-4	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.9853063349625282	WITHOUT_CLASSIFICATION	0.014693665037471835	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9982082574910792	WITHOUT_CLASSIFICATION	0.0017917425089207244	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.999974107141181	WITHOUT_CLASSIFICATION	2.5892858819091593E-5	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.999980480741661	WITHOUT_CLASSIFICATION	1.9519258338944045E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999572460572704	WITHOUT_CLASSIFICATION	4.2753942729467396E-5	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.9982507294398579	WITHOUT_CLASSIFICATION	0.001749270560142047	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999782401276516	WITHOUT_CLASSIFICATION	2.1759872348366604E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999838023455421	WITHOUT_CLASSIFICATION	1.6197654457819133E-5	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.9999746805699524	WITHOUT_CLASSIFICATION	2.531943004756598E-5	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999899414710971	WITHOUT_CLASSIFICATION	1.0058528902863418E-5	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.9997777052809226	WITHOUT_CLASSIFICATION	2.2229471907743212E-4	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9996771713468218	WITHOUT_CLASSIFICATION	3.228286531782692E-4	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999672219281669	WITHOUT_CLASSIFICATION	3.277807183307355E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.9943996685436151	WITHOUT_CLASSIFICATION	0.005600331456384949	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9984833403893147	WITHOUT_CLASSIFICATION	0.0015166596106853311	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9965360583159607	WITHOUT_CLASSIFICATION	0.0034639416840394144	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999932160219692	WITHOUT_CLASSIFICATION	6.7839780308214685E-6	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9994240742228663	WITHOUT_CLASSIFICATION	5.759257771336777E-4	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.9999969071998214	WITHOUT_CLASSIFICATION	3.092800178558509E-6	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999779925274845	WITHOUT_CLASSIFICATION	2.2007472515394977E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996743036442716	WITHOUT_CLASSIFICATION	3.2569635572845043E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999116379284595	WITHOUT_CLASSIFICATION	8.836207154057994E-5	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9999480513167263	WITHOUT_CLASSIFICATION	5.194868327365523E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996879589803921	WITHOUT_CLASSIFICATION	3.120410196080056E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999988078346723	WITHOUT_CLASSIFICATION	1.1921653276153424E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9965576656746601	WITHOUT_CLASSIFICATION	0.0034423343253398805	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9995705192026569	WITHOUT_CLASSIFICATION	4.294807973430335E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9684853610639607	WITHOUT_CLASSIFICATION	0.031514638936039334	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9997363812846952	WITHOUT_CLASSIFICATION	2.636187153048062E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9993122812107591	WITHOUT_CLASSIFICATION	6.877187892408202E-4	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.998943360570899	WITHOUT_CLASSIFICATION	0.0010566394291009233	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9969123432632644	WITHOUT_CLASSIFICATION	0.003087656736735519	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9999885520977623	WITHOUT_CLASSIFICATION	1.1447902237709996E-5	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999750795311303	WITHOUT_CLASSIFICATION	2.4920468869636427E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998354076142013	WITHOUT_CLASSIFICATION	1.6459238579869467E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998354076142013	WITHOUT_CLASSIFICATION	1.6459238579869467E-4	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9998354076142013	WITHOUT_CLASSIFICATION	1.6459238579869467E-4	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9996847114935712	WITHOUT_CLASSIFICATION	3.1528850642876166E-4	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9999586670539274	WITHOUT_CLASSIFICATION	4.133294607252587E-5	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999293990832182	WITHOUT_CLASSIFICATION	7.060091678172933E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9989161909874216	WITHOUT_CLASSIFICATION	0.0010838090125784418	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.9996418938441813	WITHOUT_CLASSIFICATION	3.5810615581858624E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9999570952231339	WITHOUT_CLASSIFICATION	4.290477686613333E-5	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9999619817227174	WITHOUT_CLASSIFICATION	3.801827728258549E-5	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.9999279770321458	WITHOUT_CLASSIFICATION	7.202296785425088E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9992667747940062	WITHOUT_CLASSIFICATION	7.33225205993876E-4	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.9998996305902343	WITHOUT_CLASSIFICATION	1.0036940976555378E-4	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.999893783095835	WITHOUT_CLASSIFICATION	1.0621690416501963E-4	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999851513846381	WITHOUT_CLASSIFICATION	1.4848615361933732E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999079978147623	WITHOUT_CLASSIFICATION	9.200218523771315E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9999079978147623	WITHOUT_CLASSIFICATION	9.200218523771315E-5	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9999615185927312	WITHOUT_CLASSIFICATION	3.848140726881735E-5	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9996592903225767	WITHOUT_CLASSIFICATION	3.4070967742326805E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999454051218509	WITHOUT_CLASSIFICATION	5.4594878148997935E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999332890287123	WITHOUT_CLASSIFICATION	6.671097128775977E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9997465568110184	WITHOUT_CLASSIFICATION	2.534431889816349E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999894955264063	WITHOUT_CLASSIFICATION	1.050447359373639E-5	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9998681590905938	WITHOUT_CLASSIFICATION	1.3184090940620636E-4	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9998683248644733	WITHOUT_CLASSIFICATION	1.3167513552664382E-4	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9993466845069142	WITHOUT_CLASSIFICATION	6.533154930857206E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9997892527663939	WITHOUT_CLASSIFICATION	2.107472336060779E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9989148122451401	WITHOUT_CLASSIFICATION	0.0010851877548599177	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9998389878597164	WITHOUT_CLASSIFICATION	1.6101214028358047E-4	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.999925352087759	WITHOUT_CLASSIFICATION	7.46479122409793E-5	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9993133519757642	WITHOUT_CLASSIFICATION	6.866480242358538E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9998959614459966	WITHOUT_CLASSIFICATION	1.0403855400336331E-4	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9998604912678434	WITHOUT_CLASSIFICATION	1.3950873215653312E-4	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9952287511511042	WITHOUT_CLASSIFICATION	0.004771248848895748	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999694097221671	WITHOUT_CLASSIFICATION	3.059027783287074E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9997945268014266	WITHOUT_CLASSIFICATION	2.0547319857348149E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9995850369183742	WITHOUT_CLASSIFICATION	4.1496308162578346E-4	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.9998890210664306	WITHOUT_CLASSIFICATION	1.1097893356935674E-4	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9998014136253969	WITHOUT_CLASSIFICATION	1.98586374603073E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999370801054702	WITHOUT_CLASSIFICATION	6.291989452971793E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9995175386253673	WITHOUT_CLASSIFICATION	4.8246137463268826E-4	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.9998440197290828	WITHOUT_CLASSIFICATION	1.559802709172066E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999233575497105	WITHOUT_CLASSIFICATION	7.664245028945583E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.9999270540009788	WITHOUT_CLASSIFICATION	7.29459990212268E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9998288513669984	WITHOUT_CLASSIFICATION	1.7114863300163525E-4	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999889143629055	WITHOUT_CLASSIFICATION	1.1085637094444073E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9998755933566573	WITHOUT_CLASSIFICATION	1.2440664334267314E-4	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999372812046166	WITHOUT_CLASSIFICATION	6.271879538349196E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9998759184989499	WITHOUT_CLASSIFICATION	1.2408150105013674E-4	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.99862992694912	WITHOUT_CLASSIFICATION	0.0013700730508799924	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999513495122409	WITHOUT_CLASSIFICATION	4.865048775924167E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9999115451016592	WITHOUT_CLASSIFICATION	8.845489834081675E-5	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999037927959463	WITHOUT_CLASSIFICATION	9.620720405368921E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999261062245549	WITHOUT_CLASSIFICATION	7.389377544511284E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999727259604101	WITHOUT_CLASSIFICATION	2.727403959001401E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999415610195919	WITHOUT_CLASSIFICATION	5.8438980408095574E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9998129712224137	WITHOUT_CLASSIFICATION	1.8702877758621831E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999624450808529	WITHOUT_CLASSIFICATION	3.7554919147050375E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9999246072315767	WITHOUT_CLASSIFICATION	7.539276842330189E-5	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.999692272744048	WITHOUT_CLASSIFICATION	3.0772725595202595E-4	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999386684838774	WITHOUT_CLASSIFICATION	6.133151612263329E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999374846416033	WITHOUT_CLASSIFICATION	6.251535839675876E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.999994864866801	WITHOUT_CLASSIFICATION	5.135133198969805E-6	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999488602686261	WITHOUT_CLASSIFICATION	5.113973137389415E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9999600290656474	WITHOUT_CLASSIFICATION	3.997093435265537E-5	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999503429261368	WITHOUT_CLASSIFICATION	4.965707386328324E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.9998811136448931	WITHOUT_CLASSIFICATION	1.1888635510697585E-4	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9989023408053925	WITHOUT_CLASSIFICATION	0.0010976591946074313	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999834352147708	WITHOUT_CLASSIFICATION	1.6564785229189402E-5	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999834352147708	WITHOUT_CLASSIFICATION	1.6564785229189402E-5	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.99954629441983	WITHOUT_CLASSIFICATION	4.537055801699979E-4	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9997468820959142	WITHOUT_CLASSIFICATION	2.531179040857245E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9970949398186535	WITHOUT_CLASSIFICATION	0.0029050601813465395	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9929209660482353	WITHOUT_CLASSIFICATION	0.007079033951764729	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9998768179870873	WITHOUT_CLASSIFICATION	1.2318201291276314E-4	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9995953950458675	WITHOUT_CLASSIFICATION	4.046049541325686E-4	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9995703876478559	WITHOUT_CLASSIFICATION	4.296123521441254E-4	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.9999802986943289	WITHOUT_CLASSIFICATION	1.9701305671112225E-5	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.99992443706676	WITHOUT_CLASSIFICATION	7.556293323994843E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9987173170391557	WITHOUT_CLASSIFICATION	0.0012826829608443922	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999511737276449	WITHOUT_CLASSIFICATION	4.882627235507022E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999308438839071	WITHOUT_CLASSIFICATION	6.915611609294397E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.999950976940407	WITHOUT_CLASSIFICATION	4.902305959299107E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9996836209138736	WITHOUT_CLASSIFICATION	3.1637908612638417E-4	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9998970740938954	WITHOUT_CLASSIFICATION	1.0292590610467428E-4	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.9999168784742297	WITHOUT_CLASSIFICATION	8.312152577024332E-5	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999677293823264	WITHOUT_CLASSIFICATION	3.2270617673608125E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9998106259162498	WITHOUT_CLASSIFICATION	1.8937408375010624E-4	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9994312900455165	WITHOUT_CLASSIFICATION	5.687099544836054E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999884604835515	WITHOUT_CLASSIFICATION	1.1539516448540064E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9984906552693051	WITHOUT_CLASSIFICATION	0.001509344730694857	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.999677293823264	WITHOUT_CLASSIFICATION	3.2270617673608125E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9893101014621802	WITHOUT_CLASSIFICATION	0.010689898537819684	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9893101014621802	WITHOUT_CLASSIFICATION	0.010689898537819684	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9998604067064781	WITHOUT_CLASSIFICATION	1.395932935218692E-4	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9997823683821383	WITHOUT_CLASSIFICATION	2.1763161786167724E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9998229251101907	WITHOUT_CLASSIFICATION	1.7707488980938518E-4	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.9999712723425704	WITHOUT_CLASSIFICATION	2.872765742950897E-5	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9999759664161665	WITHOUT_CLASSIFICATION	2.4033583833599042E-5	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.64669710331598	WITHOUT_CLASSIFICATION	0.35330289668401993	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9989055436238897	WITHOUT_CLASSIFICATION	0.0010944563761102245	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.9818686788403078	WITHOUT_CLASSIFICATION	0.018131321159692213	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999757039066114	WITHOUT_CLASSIFICATION	2.4296093388521216E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9992415994065569	WITHOUT_CLASSIFICATION	7.584005934430519E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.9995790244915087	WITHOUT_CLASSIFICATION	4.209755084912811E-4	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9993076832007151	WITHOUT_CLASSIFICATION	6.923167992848475E-4	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9996583590913806	WITHOUT_CLASSIFICATION	3.4164090861940047E-4	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.9997933300761309	WITHOUT_CLASSIFICATION	2.0666992386905955E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9987485375586116	WITHOUT_CLASSIFICATION	0.0012514624413884044	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998811108129159	WITHOUT_CLASSIFICATION	1.1888918708409424E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9959157352047554	WITHOUT_CLASSIFICATION	0.004084264795244561	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999347544369841	WITHOUT_CLASSIFICATION	6.524556301581832E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999381673604184	WITHOUT_CLASSIFICATION	6.183263958162139E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999258349575088	WITHOUT_CLASSIFICATION	7.416504249123993E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9995008293037754	WITHOUT_CLASSIFICATION	4.991706962246802E-4	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9998432871013104	WITHOUT_CLASSIFICATION	1.5671289868947233E-4	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9998433544170486	WITHOUT_CLASSIFICATION	1.5664558295142887E-4	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999269999807883	WITHOUT_CLASSIFICATION	7.300001921176114E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.9924453144621976	WITHOUT_CLASSIFICATION	0.007554685537802366	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9977773333559605	WITHOUT_CLASSIFICATION	0.0022226666440394826	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9927503829428099	WITHOUT_CLASSIFICATION	0.007249617057190013	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9982035947736629	WITHOUT_CLASSIFICATION	0.0017964052263370295	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9975181462208701	WITHOUT_CLASSIFICATION	0.0024818537791298197	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9975181462208701	WITHOUT_CLASSIFICATION	0.0024818537791298197	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9997409896872255	WITHOUT_CLASSIFICATION	2.5901031277449776E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9838882424878803	WITHOUT_CLASSIFICATION	0.016111757512119653	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9977970258791509	WITHOUT_CLASSIFICATION	0.0022029741208491284	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9856706657401364	WITHOUT_CLASSIFICATION	0.01432933425986358	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998861087155461	WITHOUT_CLASSIFICATION	1.138912844540548E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9970192339449891	WITHOUT_CLASSIFICATION	0.0029807660550108376	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9977970258791509	WITHOUT_CLASSIFICATION	0.0022029741208491284	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9930789599983769	WITHOUT_CLASSIFICATION	0.006921040001623159	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9995186525863151	WITHOUT_CLASSIFICATION	4.813474136849249E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998520413148259	WITHOUT_CLASSIFICATION	1.479586851740927E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.9998444958566656	WITHOUT_CLASSIFICATION	1.5550414333443064E-4	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999835092808537	WITHOUT_CLASSIFICATION	1.6490719146358044E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999942856863896	WITHOUT_CLASSIFICATION	5.714313610402482E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999942856863896	WITHOUT_CLASSIFICATION	5.714313610402482E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9983213826666789	WITHOUT_CLASSIFICATION	0.0016786173333210835	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9929982280994603	WITHOUT_CLASSIFICATION	0.007001771900539807	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9987461362532057	WITHOUT_CLASSIFICATION	0.0012538637467941934	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9991700083401797	WITHOUT_CLASSIFICATION	8.299916598203234E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9994584077959453	WITHOUT_CLASSIFICATION	5.415922040546609E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9998665922263551	WITHOUT_CLASSIFICATION	1.3340777364488656E-4	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9880510276395368	WITHOUT_CLASSIFICATION	0.011948972360463161	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.9993251019640416	WITHOUT_CLASSIFICATION	6.748980359583761E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9996125728377379	WITHOUT_CLASSIFICATION	3.8742716226204254E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9997062272890654	WITHOUT_CLASSIFICATION	2.9377271093455453E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.999827537605383	WITHOUT_CLASSIFICATION	1.724623946169701E-4	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999399476171159	WITHOUT_CLASSIFICATION	6.005238288400347E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9999572984062643	WITHOUT_CLASSIFICATION	4.270159373553532E-5	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9991279642608931	WITHOUT_CLASSIFICATION	8.720357391068582E-4	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9993634263928302	WITHOUT_CLASSIFICATION	6.365736071697465E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999465039343631	WITHOUT_CLASSIFICATION	5.3496065636948964E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9995216712882701	WITHOUT_CLASSIFICATION	4.7832871173001876E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9866692985198837	WITHOUT_CLASSIFICATION	0.013330701480116367	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9993698277684571	WITHOUT_CLASSIFICATION	6.301722315428334E-4	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9866692985198837	WITHOUT_CLASSIFICATION	0.013330701480116367	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9995102429444048	WITHOUT_CLASSIFICATION	4.897570555951255E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9993698277684571	WITHOUT_CLASSIFICATION	6.301722315428334E-4	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9908373184506021	WITHOUT_CLASSIFICATION	0.00916268154939783	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9989053031618735	WITHOUT_CLASSIFICATION	0.0010946968381264418	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9989246923459929	WITHOUT_CLASSIFICATION	0.0010753076540070627	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9997062609062981	WITHOUT_CLASSIFICATION	2.937390937019514E-4	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999445910139809	WITHOUT_CLASSIFICATION	5.540898601899514E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9998811108129159	WITHOUT_CLASSIFICATION	1.1888918708409424E-4	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999347544369841	WITHOUT_CLASSIFICATION	6.524556301581832E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999381673604184	WITHOUT_CLASSIFICATION	6.183263958162139E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999258349575088	WITHOUT_CLASSIFICATION	7.416504249123993E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9995008293037754	WITHOUT_CLASSIFICATION	4.991706962246802E-4	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9998422996061811	WITHOUT_CLASSIFICATION	1.5770039381887398E-4	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.9998432871013104	WITHOUT_CLASSIFICATION	1.5671289868947233E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9995574240070274	WITHOUT_CLASSIFICATION	4.425759929726333E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9975181462208701	WITHOUT_CLASSIFICATION	0.0024818537791298197	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9975181462208701	WITHOUT_CLASSIFICATION	0.0024818537791298197	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9977970258791509	WITHOUT_CLASSIFICATION	0.0022029741208491284	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9998861087155461	WITHOUT_CLASSIFICATION	1.138912844540548E-4	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9970192339449891	WITHOUT_CLASSIFICATION	0.0029807660550108376	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9977970258791509	WITHOUT_CLASSIFICATION	0.0022029741208491284	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.9930789599983769	WITHOUT_CLASSIFICATION	0.006921040001623159	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.9996887418117926	WITHOUT_CLASSIFICATION	3.112581882074566E-4	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.9999662712130498	WITHOUT_CLASSIFICATION	3.372878695010062E-5	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9997067020588046	WITHOUT_CLASSIFICATION	2.932979411954192E-4	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9964140801379341	WITHOUT_CLASSIFICATION	0.00358591986206587	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9991668574479374	WITHOUT_CLASSIFICATION	8.331425520625603E-4	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998780602281252	WITHOUT_CLASSIFICATION	1.2193977187490916E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9926841952175512	WITHOUT_CLASSIFICATION	0.007315804782448748	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9998520413148259	WITHOUT_CLASSIFICATION	1.479586851740927E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999942856863896	WITHOUT_CLASSIFICATION	5.714313610402482E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.999942856863896	WITHOUT_CLASSIFICATION	5.714313610402482E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9867530379318732	WITHOUT_CLASSIFICATION	0.013246962068126717	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9990672364802098	WITHOUT_CLASSIFICATION	9.327635197901089E-4	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9998474609282482	WITHOUT_CLASSIFICATION	1.5253907175196362E-4	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.9998444958566656	WITHOUT_CLASSIFICATION	1.5550414333443064E-4	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9988937193305711	WITHOUT_CLASSIFICATION	0.0011062806694288145	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9996213875756205	WITHOUT_CLASSIFICATION	3.7861242437946366E-4	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.9969174087081776	WITHOUT_CLASSIFICATION	0.0030825912918223987	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999617371307373	WITHOUT_CLASSIFICATION	3.8262869262697705E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999442719014734	WITHOUT_CLASSIFICATION	5.5728098526526705E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999752691318178	WITHOUT_CLASSIFICATION	2.4730868182249533E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9967230104599217	WITHOUT_CLASSIFICATION	0.003276989540078311	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.999507625018357	WITHOUT_CLASSIFICATION	4.923749816429777E-4	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9999039425318105	WITHOUT_CLASSIFICATION	9.605746818948742E-5	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999773892105542	WITHOUT_CLASSIFICATION	2.2610789445709703E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999653449492767	WITHOUT_CLASSIFICATION	3.465505072335107E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999653449492767	WITHOUT_CLASSIFICATION	3.465505072335107E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.999965570158665	WITHOUT_CLASSIFICATION	3.4429841334833804E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9995311806024835	WITHOUT_CLASSIFICATION	4.688193975165551E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9998617824706648	WITHOUT_CLASSIFICATION	1.3821752933514833E-4	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9993135995278257	WITHOUT_CLASSIFICATION	6.864004721743041E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999656422581865	WITHOUT_CLASSIFICATION	3.435774181346991E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999729752891493	WITHOUT_CLASSIFICATION	2.7024710850690276E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999656422581865	WITHOUT_CLASSIFICATION	3.435774181346991E-5	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9994757978235905	WITHOUT_CLASSIFICATION	5.242021764094848E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9971769046392167	WITHOUT_CLASSIFICATION	0.0028230953607832035	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.9981458636736085	WITHOUT_CLASSIFICATION	0.001854136326391553	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.999645594886626	WITHOUT_CLASSIFICATION	3.544051133739369E-4	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.999645594886626	WITHOUT_CLASSIFICATION	3.544051133739369E-4	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9999769652660814	WITHOUT_CLASSIFICATION	2.3034733918720698E-5	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.999942400689774	WITHOUT_CLASSIFICATION	5.7599310225979544E-5	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9999525272107146	WITHOUT_CLASSIFICATION	4.7472789285396605E-5	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.578615201688585	DEFECT	0.4213847983114149	WITHOUT_CLASSIFICATION
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.999636463554523	WITHOUT_CLASSIFICATION	3.63536445477058E-4	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996165107061454	WITHOUT_CLASSIFICATION	3.8348929385458014E-4	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9996165107061454	WITHOUT_CLASSIFICATION	3.8348929385458014E-4	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9985348042755819	WITHOUT_CLASSIFICATION	0.0014651957244180528	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999764638340674	WITHOUT_CLASSIFICATION	2.3536165932656402E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.9999764638340674	WITHOUT_CLASSIFICATION	2.3536165932656402E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9999691827979075	WITHOUT_CLASSIFICATION	3.0817202092437464E-5	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9999072597968559	WITHOUT_CLASSIFICATION	9.274020314405354E-5	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.999977823486168	WITHOUT_CLASSIFICATION	2.2176513831930996E-5	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9992965766140226	WITHOUT_CLASSIFICATION	7.034233859773039E-4	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9994965212672433	WITHOUT_CLASSIFICATION	5.034787327566303E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9999656422581865	WITHOUT_CLASSIFICATION	3.435774181346991E-5	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9996235094297594	WITHOUT_CLASSIFICATION	3.7649057024054385E-4	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999914289875463	WITHOUT_CLASSIFICATION	8.571012453685533E-6	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9984410879802713	WITHOUT_CLASSIFICATION	0.001558912019728729	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9996235094297594	WITHOUT_CLASSIFICATION	3.7649057024054385E-4	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.9999950328397955	WITHOUT_CLASSIFICATION	4.967160204374774E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.999997589999643	WITHOUT_CLASSIFICATION	2.4100003569639877E-6	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.9999452740714442	WITHOUT_CLASSIFICATION	5.472592855592262E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9994180481302194	WITHOUT_CLASSIFICATION	5.81951869780595E-4	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9996328240176374	WITHOUT_CLASSIFICATION	3.6717598236260063E-4	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.999770027164618	WITHOUT_CLASSIFICATION	2.2997283538203885E-4	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999845677074324	WITHOUT_CLASSIFICATION	1.5432292567602188E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999854096820417	WITHOUT_CLASSIFICATION	1.4590317958312209E-5	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.998547405834596	WITHOUT_CLASSIFICATION	0.0014525941654039746	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999191555135482	WITHOUT_CLASSIFICATION	8.084448645188255E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9863360675108613	WITHOUT_CLASSIFICATION	0.013663932489138591	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999011950441301	WITHOUT_CLASSIFICATION	9.88049558698442E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9993393808360851	WITHOUT_CLASSIFICATION	6.606191639149272E-4	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9993948500836972	WITHOUT_CLASSIFICATION	6.051499163028364E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9998700885403935	WITHOUT_CLASSIFICATION	1.2991145960657494E-4	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999961403783222	WITHOUT_CLASSIFICATION	3.859621677861075E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.999978691164891	WITHOUT_CLASSIFICATION	2.1308835108982174E-5	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9903100946922437	WITHOUT_CLASSIFICATION	0.009689905307756284	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999711060539577	WITHOUT_CLASSIFICATION	2.88939460424195E-5	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9997055636344164	WITHOUT_CLASSIFICATION	2.944363655835991E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998593079222552	WITHOUT_CLASSIFICATION	1.4069207774487023E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9999884217995005	WITHOUT_CLASSIFICATION	1.157820049945153E-5	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.9998832357621779	WITHOUT_CLASSIFICATION	1.1676423782213646E-4	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9994503674534242	WITHOUT_CLASSIFICATION	5.496325465758101E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9978078643860382	WITHOUT_CLASSIFICATION	0.0021921356139617933	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999276956628751	WITHOUT_CLASSIFICATION	7.23043371249082E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.9999400009603325	WITHOUT_CLASSIFICATION	5.9999039667373064E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999801878484013	WITHOUT_CLASSIFICATION	1.981215159871361E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9999384231061292	WITHOUT_CLASSIFICATION	6.157689387077793E-5	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9999577815841665	WITHOUT_CLASSIFICATION	4.221841583356489E-5	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9998211760788863	WITHOUT_CLASSIFICATION	1.7882392111371134E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9998898224303848	WITHOUT_CLASSIFICATION	1.1017756961514933E-4	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999543881578934	WITHOUT_CLASSIFICATION	4.561184210649195E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999754860666498	WITHOUT_CLASSIFICATION	2.4513933350241635E-5	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.9999559127787383	WITHOUT_CLASSIFICATION	4.408722126176598E-5	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998733025728586	WITHOUT_CLASSIFICATION	1.266974271414371E-4	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9998560557935309	WITHOUT_CLASSIFICATION	1.4394420646899185E-4	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9996743036442716	WITHOUT_CLASSIFICATION	3.2569635572845043E-4	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9999116379284595	WITHOUT_CLASSIFICATION	8.836207154057994E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9998627384235096	WITHOUT_CLASSIFICATION	1.3726157649041423E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9997574974848169	WITHOUT_CLASSIFICATION	2.425025151830898E-4	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.986155288754139	WITHOUT_CLASSIFICATION	0.013844711245861015	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999341829535587	WITHOUT_CLASSIFICATION	6.5817046441276E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999341829535587	WITHOUT_CLASSIFICATION	6.5817046441276E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999234539792022	WITHOUT_CLASSIFICATION	7.65460207977535E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999234539792022	WITHOUT_CLASSIFICATION	7.65460207977535E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999234539792022	WITHOUT_CLASSIFICATION	7.65460207977535E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999726335402473	WITHOUT_CLASSIFICATION	2.7366459752637137E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.9999726335402473	WITHOUT_CLASSIFICATION	2.7366459752637137E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998825572839126	WITHOUT_CLASSIFICATION	1.1744271608731967E-4	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9998825572839126	WITHOUT_CLASSIFICATION	1.1744271608731967E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9994188661773579	WITHOUT_CLASSIFICATION	5.811338226421405E-4	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9986074273895308	WITHOUT_CLASSIFICATION	0.001392572610469274	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999072077977803	WITHOUT_CLASSIFICATION	9.279220221975146E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999072077977803	WITHOUT_CLASSIFICATION	9.279220221975146E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9976372942355459	WITHOUT_CLASSIFICATION	0.002362705764454099	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999703417332858	WITHOUT_CLASSIFICATION	2.9658266714148566E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9992656030434172	WITHOUT_CLASSIFICATION	7.343969565827467E-4	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9998325219572014	WITHOUT_CLASSIFICATION	1.6747804279860836E-4	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9993228294705456	WITHOUT_CLASSIFICATION	6.771705294542464E-4	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9999862397640823	WITHOUT_CLASSIFICATION	1.3760235917819907E-5	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.9999718246391184	WITHOUT_CLASSIFICATION	2.8175360881739613E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999313793389891	WITHOUT_CLASSIFICATION	6.86206610109413E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.9997289157356861	WITHOUT_CLASSIFICATION	2.710842643138679E-4	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999834352147708	WITHOUT_CLASSIFICATION	1.6564785229189402E-5	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.999729605816553	WITHOUT_CLASSIFICATION	2.7039418344700284E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999852895338371	WITHOUT_CLASSIFICATION	1.4710466162897412E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9985638285708693	WITHOUT_CLASSIFICATION	0.001436171429130663	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.999956168481274	WITHOUT_CLASSIFICATION	4.383151872603594E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999444433199804	WITHOUT_CLASSIFICATION	5.555668001948365E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999794120284385	WITHOUT_CLASSIFICATION	2.058797156149758E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.999715028927672	WITHOUT_CLASSIFICATION	2.849710723280555E-4	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9995237789795997	WITHOUT_CLASSIFICATION	4.762210204003521E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999765820578056	WITHOUT_CLASSIFICATION	2.341794219442312E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998261036278713	WITHOUT_CLASSIFICATION	1.7389637212879982E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998261036278713	WITHOUT_CLASSIFICATION	1.7389637212879982E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.9998261036278713	WITHOUT_CLASSIFICATION	1.7389637212879982E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997692560693402	WITHOUT_CLASSIFICATION	2.3074393065981389E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997692560693402	WITHOUT_CLASSIFICATION	2.3074393065981389E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997692560693402	WITHOUT_CLASSIFICATION	2.3074393065981389E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997692560693402	WITHOUT_CLASSIFICATION	2.3074393065981389E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9997692560693402	WITHOUT_CLASSIFICATION	2.3074393065981389E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9996576931048808	WITHOUT_CLASSIFICATION	3.4230689511916625E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9979434580808962	WITHOUT_CLASSIFICATION	0.00205654191910374	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9999889357800634	WITHOUT_CLASSIFICATION	1.1064219936563044E-5	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9999080016882282	WITHOUT_CLASSIFICATION	9.199831177180737E-5	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9997075646899711	WITHOUT_CLASSIFICATION	2.9243531002884137E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9998544376952936	WITHOUT_CLASSIFICATION	1.4556230470647513E-4	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9985192373336592	WITHOUT_CLASSIFICATION	0.0014807626663407875	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9998714057085283	WITHOUT_CLASSIFICATION	1.2859429147162613E-4	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.999974605533631	WITHOUT_CLASSIFICATION	2.5394466368908703E-5	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999805943588446	WITHOUT_CLASSIFICATION	1.9405641155327165E-5	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999898803700991	WITHOUT_CLASSIFICATION	1.0119629901038097E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9998179396685126	WITHOUT_CLASSIFICATION	1.8206033148735937E-4	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.7603198183307733	WITHOUT_CLASSIFICATION	0.23968018166922664	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9998946582584936	WITHOUT_CLASSIFICATION	1.0534174150644513E-4	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9996810304228326	WITHOUT_CLASSIFICATION	3.189695771673882E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999757839427936	WITHOUT_CLASSIFICATION	2.421605720645531E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999121934666648	WITHOUT_CLASSIFICATION	8.780653333519329E-5	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999315994377583	WITHOUT_CLASSIFICATION	6.84005622417019E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999729752891493	WITHOUT_CLASSIFICATION	2.7024710850690276E-5	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9974924053474611	WITHOUT_CLASSIFICATION	0.0025075946525390173	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9945798772994479	WITHOUT_CLASSIFICATION	0.005420122700552229	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9989894747891462	WITHOUT_CLASSIFICATION	0.0010105252108538092	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999326713427611	WITHOUT_CLASSIFICATION	6.732865723895863E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999611327542413	WITHOUT_CLASSIFICATION	3.8867245758684554E-5	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9998970553690123	WITHOUT_CLASSIFICATION	1.0294463098771148E-4	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9996312290743582	WITHOUT_CLASSIFICATION	3.6877092564176553E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.9999839748959479	WITHOUT_CLASSIFICATION	1.6025104052029783E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999443897122325	WITHOUT_CLASSIFICATION	5.5610287767468625E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9996744040604835	WITHOUT_CLASSIFICATION	3.2559593951651014E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999674565109742	WITHOUT_CLASSIFICATION	3.2543489025890335E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9999139033309519	WITHOUT_CLASSIFICATION	8.609666904815008E-5	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999603333072951	WITHOUT_CLASSIFICATION	3.966669270485679E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9999646540849327	WITHOUT_CLASSIFICATION	3.5345915067318266E-5	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9997118855702487	WITHOUT_CLASSIFICATION	2.8811442975130546E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999632673311866	WITHOUT_CLASSIFICATION	3.673266881342192E-5	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9998861203222286	WITHOUT_CLASSIFICATION	1.1387967777147664E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997384382913701	WITHOUT_CLASSIFICATION	2.615617086299674E-4	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9997166470487237	WITHOUT_CLASSIFICATION	2.8335295127638243E-4	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999981823650415	WITHOUT_CLASSIFICATION	1.817634958514768E-6	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9995136414020154	WITHOUT_CLASSIFICATION	4.863585979846172E-4	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.9995136414020154	WITHOUT_CLASSIFICATION	4.863585979846172E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998739322390582	WITHOUT_CLASSIFICATION	1.2606776094188155E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998739322390582	WITHOUT_CLASSIFICATION	1.2606776094188155E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9995633831405829	WITHOUT_CLASSIFICATION	4.366168594171246E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9995633831405829	WITHOUT_CLASSIFICATION	4.366168594171246E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9999036725372697	WITHOUT_CLASSIFICATION	9.632746273015049E-5	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999429681557981	WITHOUT_CLASSIFICATION	5.7031844201796145E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999421238321842	WITHOUT_CLASSIFICATION	5.7876167815718894E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9993511131619234	WITHOUT_CLASSIFICATION	6.488868380765764E-4	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9999301184140015	WITHOUT_CLASSIFICATION	6.988158599854815E-5	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9986281651396257	WITHOUT_CLASSIFICATION	0.0013718348603743186	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999401224866536	WITHOUT_CLASSIFICATION	5.98775133464356E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.9999955323345094	WITHOUT_CLASSIFICATION	4.467665490646339E-6	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9995447677654025	WITHOUT_CLASSIFICATION	4.5523223459757034E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9995811458656676	WITHOUT_CLASSIFICATION	4.1885413433229173E-4	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9997281486182398	WITHOUT_CLASSIFICATION	2.7185138176019305E-4	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9999127784571913	WITHOUT_CLASSIFICATION	8.722154280869991E-5	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.9977850667888337	WITHOUT_CLASSIFICATION	0.0022149332111663	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9998037146505735	WITHOUT_CLASSIFICATION	1.9628534942643154E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9974054895131249	WITHOUT_CLASSIFICATION	0.002594510486875205	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.999880950948534	WITHOUT_CLASSIFICATION	1.1904905146599427E-4	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9999014218407098	WITHOUT_CLASSIFICATION	9.857815929012695E-5	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.999636007259372	WITHOUT_CLASSIFICATION	3.6399274062803323E-4	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9995751397603694	WITHOUT_CLASSIFICATION	4.248602396305611E-4	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9977933864493359	WITHOUT_CLASSIFICATION	0.0022066135506640886	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999244310476695	WITHOUT_CLASSIFICATION	7.556895233043929E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999522621968597	WITHOUT_CLASSIFICATION	4.773780314032689E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999715732168803	WITHOUT_CLASSIFICATION	2.8426783119627375E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.9999786288012279	WITHOUT_CLASSIFICATION	2.137119877211314E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9998488083184065	WITHOUT_CLASSIFICATION	1.5119168159356602E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9998488083184065	WITHOUT_CLASSIFICATION	1.5119168159356602E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999191555135482	WITHOUT_CLASSIFICATION	8.084448645188255E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999191555135482	WITHOUT_CLASSIFICATION	8.084448645188255E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999942956138567	WITHOUT_CLASSIFICATION	5.704386143351333E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.9988276466936039	WITHOUT_CLASSIFICATION	0.0011723533063959833	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.999942841382174	WITHOUT_CLASSIFICATION	5.715861782592532E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.9999381239689946	WITHOUT_CLASSIFICATION	6.187603100530686E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.999770687181982	WITHOUT_CLASSIFICATION	2.2931281801804912E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9998488083184065	WITHOUT_CLASSIFICATION	1.5119168159356602E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9998488083184065	WITHOUT_CLASSIFICATION	1.5119168159356602E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9998488083184065	WITHOUT_CLASSIFICATION	1.5119168159356602E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999191555135482	WITHOUT_CLASSIFICATION	8.084448645188255E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999191555135482	WITHOUT_CLASSIFICATION	8.084448645188255E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9998939409096714	WITHOUT_CLASSIFICATION	1.0605909032857808E-4	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999538339481597	WITHOUT_CLASSIFICATION	4.616605184018556E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.9999726697740886	WITHOUT_CLASSIFICATION	2.733022591137478E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9963668734824029	WITHOUT_CLASSIFICATION	0.003633126517597053	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.999930797793623	WITHOUT_CLASSIFICATION	6.920220637702355E-5	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999469978439633	WITHOUT_CLASSIFICATION	5.3002156036734625E-5	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.9999461589784814	WITHOUT_CLASSIFICATION	5.384102151870079E-5	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9997330910636439	WITHOUT_CLASSIFICATION	2.669089363559986E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999887897416958	WITHOUT_CLASSIFICATION	1.1210258304136765E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999559936654071	WITHOUT_CLASSIFICATION	4.400633459297217E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999088993883769	WITHOUT_CLASSIFICATION	9.110061162306534E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.9998029374173734	WITHOUT_CLASSIFICATION	1.9706258262659778E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999377450518296	WITHOUT_CLASSIFICATION	6.22549481704267E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9997146698466834	WITHOUT_CLASSIFICATION	2.853301533165728E-4	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.9998298025447478	WITHOUT_CLASSIFICATION	1.7019745525218024E-4	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.9893430920287509	WITHOUT_CLASSIFICATION	0.01065690797124901	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999318835279707	WITHOUT_CLASSIFICATION	6.811647202937596E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999318835279707	WITHOUT_CLASSIFICATION	6.811647202937596E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999318835279707	WITHOUT_CLASSIFICATION	6.811647202937596E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.991960231584463	WITHOUT_CLASSIFICATION	0.008039768415537012	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.991960231584463	WITHOUT_CLASSIFICATION	0.008039768415537012	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999840503147501	WITHOUT_CLASSIFICATION	1.594968524996612E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.999787246111817	WITHOUT_CLASSIFICATION	2.1275388818298483E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9998512813864497	WITHOUT_CLASSIFICATION	1.4871861355018876E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9998512878619236	WITHOUT_CLASSIFICATION	1.4871213807635805E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999587548308561	WITHOUT_CLASSIFICATION	4.124516914385167E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9998698168281513	WITHOUT_CLASSIFICATION	1.3018317184862666E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9998441457793212	WITHOUT_CLASSIFICATION	1.5585422067879612E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998441525654437	WITHOUT_CLASSIFICATION	1.5584743455632568E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999567756402954	WITHOUT_CLASSIFICATION	4.3224359704617246E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999315964591068	WITHOUT_CLASSIFICATION	6.840354089317891E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999430778377191	WITHOUT_CLASSIFICATION	5.692216228096557E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999456625450663	WITHOUT_CLASSIFICATION	5.433745493362738E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999272321057139	WITHOUT_CLASSIFICATION	7.276789428606976E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999247090198328	WITHOUT_CLASSIFICATION	7.529098016724123E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.9999435853672428	WITHOUT_CLASSIFICATION	5.641463275719914E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999357591524827	WITHOUT_CLASSIFICATION	6.42408475172768E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998467137408288	WITHOUT_CLASSIFICATION	1.5328625917122523E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.99967520161688	WITHOUT_CLASSIFICATION	3.2479838311999965E-4	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.999804486585695	WITHOUT_CLASSIFICATION	1.9551341430496227E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.9767933553559338	WITHOUT_CLASSIFICATION	0.023206644644066212	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999297796893595	WITHOUT_CLASSIFICATION	7.022031064056239E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999252987765453	WITHOUT_CLASSIFICATION	7.470122345461641E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999472635422819	WITHOUT_CLASSIFICATION	5.273645771812498E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.999946910603797	WITHOUT_CLASSIFICATION	5.308939620302561E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999257369549737	WITHOUT_CLASSIFICATION	7.426304502644524E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999824095922307	WITHOUT_CLASSIFICATION	1.7590407769254495E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.9996443124310728	WITHOUT_CLASSIFICATION	3.556875689271393E-4	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.990048567815189	WITHOUT_CLASSIFICATION	0.009951432184811015	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9997434786573991	WITHOUT_CLASSIFICATION	2.5652134260095423E-4	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9988275164172516	WITHOUT_CLASSIFICATION	0.001172483582748385	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9995127923662718	WITHOUT_CLASSIFICATION	4.8720763372824726E-4	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9978148925629511	WITHOUT_CLASSIFICATION	0.002185107437048927	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9993818755750941	WITHOUT_CLASSIFICATION	6.181244249058627E-4	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9999594993890375	WITHOUT_CLASSIFICATION	4.050061096247851E-5	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.9999638316744531	WITHOUT_CLASSIFICATION	3.616832554695062E-5	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.9996705056013194	WITHOUT_CLASSIFICATION	3.29494398680607E-4	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9940631252942062	WITHOUT_CLASSIFICATION	0.005936874705793797	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9998072402946788	WITHOUT_CLASSIFICATION	1.9275970532116123E-4	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9965609747742237	WITHOUT_CLASSIFICATION	0.003439025225776253	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.999298352009832	WITHOUT_CLASSIFICATION	7.016479901681264E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9994059580437902	WITHOUT_CLASSIFICATION	5.940419562097758E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.9999247536974113	WITHOUT_CLASSIFICATION	7.524630258875196E-5	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.9984841236973119	WITHOUT_CLASSIFICATION	0.0015158763026882312	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9994663614132392	WITHOUT_CLASSIFICATION	5.33638586760674E-4	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9994663614132392	WITHOUT_CLASSIFICATION	5.33638586760674E-4	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9990302558362232	WITHOUT_CLASSIFICATION	9.697441637767993E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9998711288778137	WITHOUT_CLASSIFICATION	1.288711221863473E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.9984742869246356	WITHOUT_CLASSIFICATION	0.0015257130753644286	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995620649066129	WITHOUT_CLASSIFICATION	4.379350933870614E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9989791640685084	WITHOUT_CLASSIFICATION	0.0010208359314915504	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.9998834562256984	WITHOUT_CLASSIFICATION	1.1654377430161852E-4	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999618841019958	WITHOUT_CLASSIFICATION	3.811589800410615E-5	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9998610723476942	WITHOUT_CLASSIFICATION	1.3892765230586764E-4	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999873676483448	WITHOUT_CLASSIFICATION	1.2632351655209484E-5	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.9999243620405325	WITHOUT_CLASSIFICATION	7.563795946759962E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999265815516175	WITHOUT_CLASSIFICATION	7.341844838244801E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999265815516175	WITHOUT_CLASSIFICATION	7.341844838244801E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999265815516175	WITHOUT_CLASSIFICATION	7.341844838244801E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999265815516175	WITHOUT_CLASSIFICATION	7.341844838244801E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999827827370343	WITHOUT_CLASSIFICATION	1.721726296565992E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999865070909978	WITHOUT_CLASSIFICATION	1.3492909002317254E-5	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999880857296825	WITHOUT_CLASSIFICATION	1.1914270317534127E-5	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9995256507937386	WITHOUT_CLASSIFICATION	4.743492062613678E-4	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9986941855024211	WITHOUT_CLASSIFICATION	0.0013058144975789548	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.997329648268407	WITHOUT_CLASSIFICATION	0.0026703517315929616	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.999697611675386	WITHOUT_CLASSIFICATION	3.0238832461399433E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999814612873978	WITHOUT_CLASSIFICATION	1.8538712602145102E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999814612873978	WITHOUT_CLASSIFICATION	1.8538712602145102E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9998852064105841	WITHOUT_CLASSIFICATION	1.1479358941590425E-4	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.9998577118336365	WITHOUT_CLASSIFICATION	1.422881663635272E-4	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999424465466445	WITHOUT_CLASSIFICATION	5.755345335551676E-5	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9958526554381516	WITHOUT_CLASSIFICATION	0.004147344561848322	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9958526554381516	WITHOUT_CLASSIFICATION	0.004147344561848322	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9991930997165233	WITHOUT_CLASSIFICATION	8.069002834767202E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999464134203213	WITHOUT_CLASSIFICATION	5.358657967869755E-5	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9999464134203213	WITHOUT_CLASSIFICATION	5.358657967869755E-5	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9962505821903385	WITHOUT_CLASSIFICATION	0.0037494178096616256	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999967802351863	WITHOUT_CLASSIFICATION	3.2197648136209935E-6	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9999876217404708	WITHOUT_CLASSIFICATION	1.2378259529108815E-5	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9962021323339598	WITHOUT_CLASSIFICATION	0.003797867666040177	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9989909957778402	WITHOUT_CLASSIFICATION	0.0010090042221598257	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9999932422267255	WITHOUT_CLASSIFICATION	6.757773274556892E-6	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9923168003248076	WITHOUT_CLASSIFICATION	0.007683199675192405	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.9999754392792466	WITHOUT_CLASSIFICATION	2.456072075334637E-5	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999056958201645	WITHOUT_CLASSIFICATION	9.430417983552521E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9999427208075496	WITHOUT_CLASSIFICATION	5.727919245024463E-5	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9892632115862993	WITHOUT_CLASSIFICATION	0.010736788413700734	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9951174230649986	WITHOUT_CLASSIFICATION	0.004882576935001379	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.999964705850427	WITHOUT_CLASSIFICATION	3.529414957308781E-5	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9972896445210209	WITHOUT_CLASSIFICATION	0.002710355478979163	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.9999492700809175	WITHOUT_CLASSIFICATION	5.072991908245503E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9998413065836577	WITHOUT_CLASSIFICATION	1.5869341634235185E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9994653931911486	WITHOUT_CLASSIFICATION	5.346068088513068E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.995438778228549	WITHOUT_CLASSIFICATION	0.0045612217714510305	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9957945421016984	WITHOUT_CLASSIFICATION	0.004205457898301717	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.99527636744153	WITHOUT_CLASSIFICATION	0.004723632558470028	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997533289785365	WITHOUT_CLASSIFICATION	2.46671021463449E-4	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9290083087512927	WITHOUT_CLASSIFICATION	0.07099169124870736	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999655569433543	WITHOUT_CLASSIFICATION	3.444305664572985E-5	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9998524204790895	WITHOUT_CLASSIFICATION	1.4757952091047044E-4	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9995462578142976	WITHOUT_CLASSIFICATION	4.537421857024471E-4	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9997877015616167	WITHOUT_CLASSIFICATION	2.1229843838333571E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9981730052160418	WITHOUT_CLASSIFICATION	0.0018269947839581811	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9998596485993431	WITHOUT_CLASSIFICATION	1.4035140065684357E-4	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.6508295420221409	WITHOUT_CLASSIFICATION	0.34917045797785895	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9995094778755671	WITHOUT_CLASSIFICATION	4.905221244329951E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9999187503201199	WITHOUT_CLASSIFICATION	8.124967988010826E-5	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9983403121546675	WITHOUT_CLASSIFICATION	0.001659687845332598	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999357243827061	WITHOUT_CLASSIFICATION	6.427561729399967E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9995496139460331	WITHOUT_CLASSIFICATION	4.503860539669078E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9983403121546675	WITHOUT_CLASSIFICATION	0.001659687845332598	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999357243827061	WITHOUT_CLASSIFICATION	6.427561729399967E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9998485236717104	WITHOUT_CLASSIFICATION	1.5147632828962207E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9998903537101665	WITHOUT_CLASSIFICATION	1.0964628983350123E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9998903537101665	WITHOUT_CLASSIFICATION	1.0964628983350123E-4	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9996050184810091	WITHOUT_CLASSIFICATION	3.9498151899091516E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994303564346189	WITHOUT_CLASSIFICATION	5.696435653812271E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999647517989921	WITHOUT_CLASSIFICATION	3.5248201007972974E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999121730466973	WITHOUT_CLASSIFICATION	8.782695330266445E-5	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9928956146628409	WITHOUT_CLASSIFICATION	0.007104385337159053	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9970295828322688	WITHOUT_CLASSIFICATION	0.0029704171677311974	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9998146856072924	WITHOUT_CLASSIFICATION	1.8531439270762513E-4	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9998478587435429	WITHOUT_CLASSIFICATION	1.5214125645704604E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999733076147388	WITHOUT_CLASSIFICATION	2.6692385261209573E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9995236352235441	WITHOUT_CLASSIFICATION	4.763647764558199E-4	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9990596625412969	WITHOUT_CLASSIFICATION	9.403374587030867E-4	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9998304862516876	WITHOUT_CLASSIFICATION	1.695137483123345E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9997042450140227	WITHOUT_CLASSIFICATION	2.957549859773932E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999638074464767	WITHOUT_CLASSIFICATION	3.619255352327757E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999638074464767	WITHOUT_CLASSIFICATION	3.619255352327757E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9998633217642924	WITHOUT_CLASSIFICATION	1.366782357075554E-4	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9998633217642924	WITHOUT_CLASSIFICATION	1.366782357075554E-4	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.9998872716037438	WITHOUT_CLASSIFICATION	1.1272839625620506E-4	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998929278560538	WITHOUT_CLASSIFICATION	1.0707214394624516E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9998580394535546	WITHOUT_CLASSIFICATION	1.4196054644541523E-4	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999647517989921	WITHOUT_CLASSIFICATION	3.5248201007972974E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.9999121730466973	WITHOUT_CLASSIFICATION	8.782695330266445E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999733076147388	WITHOUT_CLASSIFICATION	2.6692385261209573E-5	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9995236352235441	WITHOUT_CLASSIFICATION	4.763647764558199E-4	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9998745560938916	WITHOUT_CLASSIFICATION	1.254439061084626E-4	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.999881939291599	WITHOUT_CLASSIFICATION	1.180607084010964E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999407135851902	WITHOUT_CLASSIFICATION	5.928641480989215E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998916436599911	WITHOUT_CLASSIFICATION	1.0835634000884338E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.9999584635177168	WITHOUT_CLASSIFICATION	4.153648228318628E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9992321513509169	WITHOUT_CLASSIFICATION	7.678486490831725E-4	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999254666463426	WITHOUT_CLASSIFICATION	7.453335365730525E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9998907707339277	WITHOUT_CLASSIFICATION	1.0922926607224747E-4	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.99981498551032	WITHOUT_CLASSIFICATION	1.850144896800563E-4	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.993124205647032	WITHOUT_CLASSIFICATION	0.006875794352968063	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9997825025108151	WITHOUT_CLASSIFICATION	2.1749748918495297E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999892756155231	WITHOUT_CLASSIFICATION	1.0724384476885441E-5	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9998711773810087	WITHOUT_CLASSIFICATION	1.288226189912819E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9999843166131257	WITHOUT_CLASSIFICATION	1.5683386874351394E-5	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9999780888742431	WITHOUT_CLASSIFICATION	2.1911125756824293E-5	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999035217221383	WITHOUT_CLASSIFICATION	9.6478277861778E-5	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9993921866725888	WITHOUT_CLASSIFICATION	6.078133274111962E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9998831382822162	WITHOUT_CLASSIFICATION	1.1686171778388949E-4	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999265539927228	WITHOUT_CLASSIFICATION	7.344600727719816E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999265539927228	WITHOUT_CLASSIFICATION	7.344600727719816E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999265539927228	WITHOUT_CLASSIFICATION	7.344600727719816E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9988591421060924	WITHOUT_CLASSIFICATION	0.0011408578939076555	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9999631301772626	WITHOUT_CLASSIFICATION	3.6869822737496894E-5	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9995848932104038	WITHOUT_CLASSIFICATION	4.1510678959628196E-4	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9995848932104038	WITHOUT_CLASSIFICATION	4.1510678959628196E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9995344271653795	WITHOUT_CLASSIFICATION	4.655728346204637E-4	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.999977545488178	WITHOUT_CLASSIFICATION	2.2454511822020074E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999479883187813	WITHOUT_CLASSIFICATION	5.2011681218646516E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.999497976107615	WITHOUT_CLASSIFICATION	5.0202389238486E-4	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9997815831560307	WITHOUT_CLASSIFICATION	2.1841684396930428E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.9991541487609638	WITHOUT_CLASSIFICATION	8.458512390361865E-4	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9998662179655821	WITHOUT_CLASSIFICATION	1.3378203441797367E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9995353321238712	WITHOUT_CLASSIFICATION	4.6466787612876073E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9998765825661482	WITHOUT_CLASSIFICATION	1.2341743385187718E-4	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9997933497915346	WITHOUT_CLASSIFICATION	2.0665020846540567E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9995817521529624	WITHOUT_CLASSIFICATION	4.18247847037693E-4	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9998181104832886	WITHOUT_CLASSIFICATION	1.8188951671129028E-4	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9979785257714172	WITHOUT_CLASSIFICATION	0.002021474228582883	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.9999621342247161	WITHOUT_CLASSIFICATION	3.786577528378694E-5	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.999975825915921	WITHOUT_CLASSIFICATION	2.4174084078890605E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9985244383200294	WITHOUT_CLASSIFICATION	0.001475561679970579	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9999333793232816	WITHOUT_CLASSIFICATION	6.662067671840967E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999664087998802	WITHOUT_CLASSIFICATION	3.359120011992387E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998672557504373	WITHOUT_CLASSIFICATION	1.3274424956268935E-4	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.999990625722214	WITHOUT_CLASSIFICATION	9.374277786067044E-6	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999570920196349	WITHOUT_CLASSIFICATION	4.290798036515908E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9999649384621178	WITHOUT_CLASSIFICATION	3.5061537882138307E-5	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.999815153102202	WITHOUT_CLASSIFICATION	1.8484689779793933E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.9999923684020257	WITHOUT_CLASSIFICATION	7.631597974284816E-6	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999546465231871	WITHOUT_CLASSIFICATION	4.5353476812860446E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999546465231871	WITHOUT_CLASSIFICATION	4.5353476812860446E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999287719396761	WITHOUT_CLASSIFICATION	7.122806032381966E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999287719396761	WITHOUT_CLASSIFICATION	7.122806032381966E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9999110863142936	WITHOUT_CLASSIFICATION	8.891368570643381E-5	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9999834410678033	WITHOUT_CLASSIFICATION	1.65589321966641E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999343512599675	WITHOUT_CLASSIFICATION	6.564874003246157E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9997751096275933	WITHOUT_CLASSIFICATION	2.248903724067612E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999664087998802	WITHOUT_CLASSIFICATION	3.359120011992387E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999664087998802	WITHOUT_CLASSIFICATION	3.359120011992387E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9999664087998802	WITHOUT_CLASSIFICATION	3.359120011992387E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998672557504373	WITHOUT_CLASSIFICATION	1.3274424956268935E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999343512599675	WITHOUT_CLASSIFICATION	6.564874003246157E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999343512599675	WITHOUT_CLASSIFICATION	6.564874003246157E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9998895323406349	WITHOUT_CLASSIFICATION	1.1046765936508891E-4	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.9999906992332264	WITHOUT_CLASSIFICATION	9.300766773602346E-6	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999989341956516	WITHOUT_CLASSIFICATION	1.065804348405239E-5	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.8984300947308873	WITHOUT_CLASSIFICATION	0.10156990526911278	DEFECT
// no digits, error	WITHOUT_CLASSIFICATION	0.9999859206765959	WITHOUT_CLASSIFICATION	1.4079323404143286E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999180251258133	WITHOUT_CLASSIFICATION	8.197487418681582E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999180251258133	WITHOUT_CLASSIFICATION	8.197487418681582E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998051009249052	WITHOUT_CLASSIFICATION	1.9489907509481145E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998457203464107	WITHOUT_CLASSIFICATION	1.542796535892417E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998457203464107	WITHOUT_CLASSIFICATION	1.542796535892417E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998457203464107	WITHOUT_CLASSIFICATION	1.542796535892417E-4	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999971830793891	WITHOUT_CLASSIFICATION	2.8169206108990864E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999731769796872	WITHOUT_CLASSIFICATION	2.6823020312818004E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9998672557504373	WITHOUT_CLASSIFICATION	1.3274424956268935E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999307455269547	WITHOUT_CLASSIFICATION	6.925447304525566E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9998457203464107	WITHOUT_CLASSIFICATION	1.542796535892417E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998051009249052	WITHOUT_CLASSIFICATION	1.9489907509481145E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999455647726955	WITHOUT_CLASSIFICATION	5.443522730453552E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999264756668962	WITHOUT_CLASSIFICATION	7.352433310382887E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.999985109458265	WITHOUT_CLASSIFICATION	1.4890541734946625E-5	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999055177788829	WITHOUT_CLASSIFICATION	9.448222111704699E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998844736071371	WITHOUT_CLASSIFICATION	1.1552639286294517E-4	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9993309246544855	WITHOUT_CLASSIFICATION	6.690753455145587E-4	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999931245590822	WITHOUT_CLASSIFICATION	6.875440917838668E-6	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999304710882932	WITHOUT_CLASSIFICATION	6.95289117066768E-5	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9999456484260136	WITHOUT_CLASSIFICATION	5.435157398642898E-5	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9998804799603782	WITHOUT_CLASSIFICATION	1.1952003962178018E-4	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9998468478035204	WITHOUT_CLASSIFICATION	1.5315219647955755E-4	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999811609319229	WITHOUT_CLASSIFICATION	1.8839068077008837E-5	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9998721155970879	WITHOUT_CLASSIFICATION	1.2788440291214195E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999783319003606	WITHOUT_CLASSIFICATION	2.166809963940543E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999804309263596	WITHOUT_CLASSIFICATION	1.9569073640496718E-5	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.999981950355538	WITHOUT_CLASSIFICATION	1.8049644462036728E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9993988740345942	WITHOUT_CLASSIFICATION	6.011259654057808E-4	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9997622181752223	WITHOUT_CLASSIFICATION	2.3778182477770957E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9999716669378232	WITHOUT_CLASSIFICATION	2.833306217683127E-5	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999821378466268	WITHOUT_CLASSIFICATION	1.786215337314079E-5	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9998781403153862	WITHOUT_CLASSIFICATION	1.2185968461379991E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9998083679529041	WITHOUT_CLASSIFICATION	1.9163204709587476E-4	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9998990312847666	WITHOUT_CLASSIFICATION	1.0096871523340611E-4	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9999578713352895	WITHOUT_CLASSIFICATION	4.2128664710504684E-5	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998495994818665	WITHOUT_CLASSIFICATION	1.5040051813352501E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9999683357095951	WITHOUT_CLASSIFICATION	3.1664290404921146E-5	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999984097830015	WITHOUT_CLASSIFICATION	1.590216998493361E-6	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.999963692388176	WITHOUT_CLASSIFICATION	3.630761182401027E-5	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9998898990904759	WITHOUT_CLASSIFICATION	1.1010090952414588E-4	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999345495302466	WITHOUT_CLASSIFICATION	6.545046975345009E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999455647726955	WITHOUT_CLASSIFICATION	5.443522730453552E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.999981888539491	WITHOUT_CLASSIFICATION	1.8111460509038807E-5	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9996368102476153	WITHOUT_CLASSIFICATION	3.6318975238463147E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9968787435770753	WITHOUT_CLASSIFICATION	0.0031212564229246517	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999110529063142	WITHOUT_CLASSIFICATION	8.894709368572893E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999110529063142	WITHOUT_CLASSIFICATION	8.894709368572893E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.9999170593364245	WITHOUT_CLASSIFICATION	8.294066357549811E-5	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999784130920888	WITHOUT_CLASSIFICATION	2.158690791119315E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999569324790353	WITHOUT_CLASSIFICATION	4.3067520964603914E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999332448095295	WITHOUT_CLASSIFICATION	6.675519047047406E-5	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.999974765811091	WITHOUT_CLASSIFICATION	2.5234188908928108E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.999848810265663	WITHOUT_CLASSIFICATION	1.5118973433694258E-4	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.997173947480877	WITHOUT_CLASSIFICATION	0.0028260525191230955	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9999653370540894	WITHOUT_CLASSIFICATION	3.466294591058336E-5	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999087697558928	WITHOUT_CLASSIFICATION	9.123024410710351E-5	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9983403027873177	WITHOUT_CLASSIFICATION	0.0016596972126822814	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9996797219890746	WITHOUT_CLASSIFICATION	3.202780109253731E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999661502483371	WITHOUT_CLASSIFICATION	3.3849751662980035E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9999661502483371	WITHOUT_CLASSIFICATION	3.3849751662980035E-5	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9990785895544808	WITHOUT_CLASSIFICATION	9.21410445519146E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9999797081533046	WITHOUT_CLASSIFICATION	2.0291846695475385E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999349293505247	WITHOUT_CLASSIFICATION	6.507064947519991E-5	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9999349293505247	WITHOUT_CLASSIFICATION	6.507064947519991E-5	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9999823640571617	WITHOUT_CLASSIFICATION	1.7635942838351788E-5	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9999357414458375	WITHOUT_CLASSIFICATION	6.425855416243101E-5	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9998593348914094	WITHOUT_CLASSIFICATION	1.4066510859067006E-4	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9995203770678104	WITHOUT_CLASSIFICATION	4.7962293218958087E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9998400603174177	WITHOUT_CLASSIFICATION	1.5993968258232026E-4	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9996239989505652	WITHOUT_CLASSIFICATION	3.7600104943477143E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999724798208518	WITHOUT_CLASSIFICATION	2.75201791482009E-5	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.999989820472085	WITHOUT_CLASSIFICATION	1.0179527915045846E-5	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9981304971358212	WITHOUT_CLASSIFICATION	0.0018695028641788254	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999816859796632	WITHOUT_CLASSIFICATION	1.831402033673916E-5	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.9997114242999882	WITHOUT_CLASSIFICATION	2.8857570001188684E-4	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999481600559118	WITHOUT_CLASSIFICATION	5.183994408819841E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.999954578559355	WITHOUT_CLASSIFICATION	4.542144064498751E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.9997195696610401	WITHOUT_CLASSIFICATION	2.8043033895994206E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.9999893532453825	WITHOUT_CLASSIFICATION	1.0646754617412031E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.985628326546812	WITHOUT_CLASSIFICATION	0.014371673453188082	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9997889337946385	WITHOUT_CLASSIFICATION	2.1106620536151373E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9998607726413151	WITHOUT_CLASSIFICATION	1.392273586848855E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9996465667574397	WITHOUT_CLASSIFICATION	3.5343324256036584E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999347015166502	WITHOUT_CLASSIFICATION	6.529848334986793E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9396755598972399	WITHOUT_CLASSIFICATION	0.060324440102760085	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9999461529956937	WITHOUT_CLASSIFICATION	5.384700430629684E-5	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9999734572533433	WITHOUT_CLASSIFICATION	2.6542746656737328E-5	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999860256976599	WITHOUT_CLASSIFICATION	1.3974302339992064E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.999990906013272	WITHOUT_CLASSIFICATION	9.093986727943521E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9981826512558213	WITHOUT_CLASSIFICATION	0.0018173487441786442	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.999794019166273	WITHOUT_CLASSIFICATION	2.0598083372700904E-4	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9997294759006248	WITHOUT_CLASSIFICATION	2.7052409937516577E-4	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.999900592503405	WITHOUT_CLASSIFICATION	9.940749659487753E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9998480290399401	WITHOUT_CLASSIFICATION	1.5197096005995883E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9996945449557656	WITHOUT_CLASSIFICATION	3.054550442345086E-4	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.9979442646765891	WITHOUT_CLASSIFICATION	0.0020557353234107833	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999212609104454	WITHOUT_CLASSIFICATION	7.873908955457692E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999212609104454	WITHOUT_CLASSIFICATION	7.873908955457692E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999643498556559	WITHOUT_CLASSIFICATION	3.565014434423661E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9999672506465881	WITHOUT_CLASSIFICATION	3.274935341186065E-5	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9996186461773131	WITHOUT_CLASSIFICATION	3.813538226869696E-4	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9995168356962459	WITHOUT_CLASSIFICATION	4.831643037540093E-4	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9995176600483937	WITHOUT_CLASSIFICATION	4.8233995160620934E-4	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999750067333791	WITHOUT_CLASSIFICATION	2.4993266620881503E-5	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9938921318299495	WITHOUT_CLASSIFICATION	0.0061078681700505125	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9938921318299495	WITHOUT_CLASSIFICATION	0.0061078681700505125	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9994334378477296	WITHOUT_CLASSIFICATION	5.665621522704125E-4	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9996995088754359	WITHOUT_CLASSIFICATION	3.004911245641087E-4	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9994513193882678	WITHOUT_CLASSIFICATION	5.48680611732212E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.903520842281182	WITHOUT_CLASSIFICATION	0.09647915771881804	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999187730132725	WITHOUT_CLASSIFICATION	8.122698672756977E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9996323163597931	WITHOUT_CLASSIFICATION	3.676836402068374E-4	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999904859514289	WITHOUT_CLASSIFICATION	9.514048571036162E-6	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.9999828467930617	WITHOUT_CLASSIFICATION	1.7153206938266283E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.9995642635379195	WITHOUT_CLASSIFICATION	4.357364620804121E-4	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.9998896331171458	WITHOUT_CLASSIFICATION	1.1036688285423287E-4	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999293328388598	WITHOUT_CLASSIFICATION	7.066716114026467E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9999184860205855	WITHOUT_CLASSIFICATION	8.151397941453898E-5	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.9999347896169407	WITHOUT_CLASSIFICATION	6.521038305932392E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9999919796127608	WITHOUT_CLASSIFICATION	8.020387239312993E-6	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9998612581657238	WITHOUT_CLASSIFICATION	1.3874183427623423E-4	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.9997460102284308	WITHOUT_CLASSIFICATION	2.539897715691984E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9977855130901252	WITHOUT_CLASSIFICATION	0.002214486909874804	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999855800924383	WITHOUT_CLASSIFICATION	1.441990756158538E-5	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9997466810953951	WITHOUT_CLASSIFICATION	2.5331890460491825E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.9996243054971441	WITHOUT_CLASSIFICATION	3.7569450285588403E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.997426156430226	WITHOUT_CLASSIFICATION	0.0025738435697738728	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9951285368050036	WITHOUT_CLASSIFICATION	0.004871463194996485	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999726773747039	WITHOUT_CLASSIFICATION	2.7322625296192826E-5	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9999880771666095	WITHOUT_CLASSIFICATION	1.1922833390579503E-5	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9999153099256256	WITHOUT_CLASSIFICATION	8.469007437443467E-5	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9997993201368007	WITHOUT_CLASSIFICATION	2.0067986319929383E-4	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9999676741726903	WITHOUT_CLASSIFICATION	3.232582730971272E-5	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998859872911694	WITHOUT_CLASSIFICATION	1.1401270883057874E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999086179148606	WITHOUT_CLASSIFICATION	9.138208513932719E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999344006915878	WITHOUT_CLASSIFICATION	6.559930841218139E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.9997722357676231	WITHOUT_CLASSIFICATION	2.277642323769712E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999240956714873	WITHOUT_CLASSIFICATION	7.590432851269563E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9998812129185358	WITHOUT_CLASSIFICATION	1.1878708146423416E-4	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999242772923075	WITHOUT_CLASSIFICATION	7.572270769250564E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999026033904878	WITHOUT_CLASSIFICATION	9.739660951225532E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9997845853801025	WITHOUT_CLASSIFICATION	2.154146198975513E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9998370318831928	WITHOUT_CLASSIFICATION	1.629681168071639E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9994216043869599	WITHOUT_CLASSIFICATION	5.783956130401463E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999730254289558	WITHOUT_CLASSIFICATION	2.6974571044262623E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999937671782984	WITHOUT_CLASSIFICATION	6.232821701703208E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9996109356868124	WITHOUT_CLASSIFICATION	3.8906431318762227E-4	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9986520873352578	WITHOUT_CLASSIFICATION	0.0013479126647422785	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9965291011450861	WITHOUT_CLASSIFICATION	0.0034708988549138823	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9996494311348936	WITHOUT_CLASSIFICATION	3.505688651064502E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.999861563424899	WITHOUT_CLASSIFICATION	1.3843657510113655E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9974049141193811	WITHOUT_CLASSIFICATION	0.002595085880618901	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9998881754646828	WITHOUT_CLASSIFICATION	1.1182453531720601E-4	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998767132329988	WITHOUT_CLASSIFICATION	1.2328676700127715E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9999421127431821	WITHOUT_CLASSIFICATION	5.788725681781457E-5	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.965090713215265	WITHOUT_CLASSIFICATION	0.034909286784735115	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998995490748582	WITHOUT_CLASSIFICATION	1.0045092514180139E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996819809570571	WITHOUT_CLASSIFICATION	3.1801904294288363E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999993285274098	WITHOUT_CLASSIFICATION	6.714725902006282E-7	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9999908578936981	WITHOUT_CLASSIFICATION	9.142106301976451E-6	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9997043877852104	WITHOUT_CLASSIFICATION	2.956122147896114E-4	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9999914569370438	WITHOUT_CLASSIFICATION	8.543062956147671E-6	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999795086624137	WITHOUT_CLASSIFICATION	2.049133758630758E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999812565415256	WITHOUT_CLASSIFICATION	1.8743458474416106E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998222100195769	WITHOUT_CLASSIFICATION	1.777899804230504E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999328385791445	WITHOUT_CLASSIFICATION	6.716142085544255E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9998222100195769	WITHOUT_CLASSIFICATION	1.777899804230504E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999218643839723	WITHOUT_CLASSIFICATION	7.813561602757938E-5	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999328385791445	WITHOUT_CLASSIFICATION	6.716142085544255E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9999906138403035	WITHOUT_CLASSIFICATION	9.386159696396414E-6	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9997533289785365	WITHOUT_CLASSIFICATION	2.46671021463449E-4	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.9959119590627233	WITHOUT_CLASSIFICATION	0.004088040937276609	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.9503673180654864	WITHOUT_CLASSIFICATION	0.04963268193451362	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999878856796488	WITHOUT_CLASSIFICATION	1.2114320351063223E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9957960656539206	WITHOUT_CLASSIFICATION	0.004203934346079343	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998225430997036	WITHOUT_CLASSIFICATION	1.7745690029631345E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9998523315995937	WITHOUT_CLASSIFICATION	1.4766840040623236E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9994303564346189	WITHOUT_CLASSIFICATION	5.696435653812271E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9999347015166502	WITHOUT_CLASSIFICATION	6.529848334986793E-5	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.999989341956516	WITHOUT_CLASSIFICATION	1.065804348405239E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9875927345943983	WITHOUT_CLASSIFICATION	0.01240726540560175	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999642576432272	WITHOUT_CLASSIFICATION	3.5742356772846696E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999876424754113	WITHOUT_CLASSIFICATION	1.2357524588850944E-5	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9998513804688453	WITHOUT_CLASSIFICATION	1.4861953115485546E-4	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.9806317248576476	WITHOUT_CLASSIFICATION	0.019368275142352384	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.999968353843911	WITHOUT_CLASSIFICATION	3.164615608897314E-5	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9992774519906895	WITHOUT_CLASSIFICATION	7.225480093105654E-4	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9954294809165307	WITHOUT_CLASSIFICATION	0.004570519083469187	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999570137606715	WITHOUT_CLASSIFICATION	4.2986239328394564E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999912993560398	WITHOUT_CLASSIFICATION	8.700643960223946E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999730957285526	WITHOUT_CLASSIFICATION	2.690427144740466E-5	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.998603682905462	WITHOUT_CLASSIFICATION	0.0013963170945379608	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999900789087122	WITHOUT_CLASSIFICATION	9.92109128790533E-6	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.997327447812734	WITHOUT_CLASSIFICATION	0.0026725521872660468	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999966016967448	WITHOUT_CLASSIFICATION	3.3983032552738116E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999006649719127	WITHOUT_CLASSIFICATION	9.933502808729635E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999006649719127	WITHOUT_CLASSIFICATION	9.933502808729635E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.9999067642466676	WITHOUT_CLASSIFICATION	9.323575333246058E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.999861299989346	WITHOUT_CLASSIFICATION	1.38700010653966E-4	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9997000454798872	WITHOUT_CLASSIFICATION	2.9995452011272574E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9998284454362998	WITHOUT_CLASSIFICATION	1.7155456370028288E-4	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.9998751397290386	WITHOUT_CLASSIFICATION	1.2486027096143506E-4	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999443437959089	WITHOUT_CLASSIFICATION	5.565620409106795E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9937111523344566	WITHOUT_CLASSIFICATION	0.006288847665543379	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999574358722336	WITHOUT_CLASSIFICATION	4.2564127766485056E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995139816810135	WITHOUT_CLASSIFICATION	4.860183189864747E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.9995139816810135	WITHOUT_CLASSIFICATION	4.860183189864747E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9995890195765497	WITHOUT_CLASSIFICATION	4.109804234504193E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999487309066009	WITHOUT_CLASSIFICATION	5.126909339906396E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9593283409265355	WITHOUT_CLASSIFICATION	0.04067165907346451	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999602807864009	WITHOUT_CLASSIFICATION	3.9719213599158005E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.9994727144985402	WITHOUT_CLASSIFICATION	5.272855014598067E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9993617356869006	WITHOUT_CLASSIFICATION	6.382643130994083E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9997702422928063	WITHOUT_CLASSIFICATION	2.297577071937372E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9999218643839723	WITHOUT_CLASSIFICATION	7.813561602757938E-5	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999265142554085	WITHOUT_CLASSIFICATION	7.34857445915852E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999882215164316	WITHOUT_CLASSIFICATION	1.177848356840283E-5	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.999975652714391	WITHOUT_CLASSIFICATION	2.434728560889708E-5	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999285506605133	WITHOUT_CLASSIFICATION	7.144933948657346E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999003864007925	WITHOUT_CLASSIFICATION	9.961359920756479E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999003864007925	WITHOUT_CLASSIFICATION	9.961359920756479E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999487309066009	WITHOUT_CLASSIFICATION	5.126909339906397E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9999687866047317	WITHOUT_CLASSIFICATION	3.121339526834406E-5	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9630712068351743	WITHOUT_CLASSIFICATION	0.03692879316482559	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999636522041819	WITHOUT_CLASSIFICATION	3.6347795818086326E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9999729577355355	WITHOUT_CLASSIFICATION	2.7042264464455387E-5	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9997838126160796	WITHOUT_CLASSIFICATION	2.1618738392049515E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9997808188142591	WITHOUT_CLASSIFICATION	2.1918118574087674E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9997161421017999	WITHOUT_CLASSIFICATION	2.838578982000788E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9992431201116273	WITHOUT_CLASSIFICATION	7.568798883726735E-4	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.999511054400138	WITHOUT_CLASSIFICATION	4.889455998621069E-4	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9999438141538722	WITHOUT_CLASSIFICATION	5.618584612765445E-5	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.999969990149232	WITHOUT_CLASSIFICATION	3.000985076788385E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.999381293349616	WITHOUT_CLASSIFICATION	6.187066503838914E-4	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999189685025871	WITHOUT_CLASSIFICATION	8.103149741283557E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997486005639671	WITHOUT_CLASSIFICATION	2.513994360329388E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9998357836607279	WITHOUT_CLASSIFICATION	1.6421633927208998E-4	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9998784224513597	WITHOUT_CLASSIFICATION	1.2157754864021326E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9998491326986075	WITHOUT_CLASSIFICATION	1.508673013924136E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9998491326986075	WITHOUT_CLASSIFICATION	1.508673013924136E-4	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995106502386775	WITHOUT_CLASSIFICATION	4.893497613225013E-4	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999666870157681	WITHOUT_CLASSIFICATION	3.331298423189501E-5	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9999961554422305	WITHOUT_CLASSIFICATION	3.8445577694436056E-6	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999799474718427	WITHOUT_CLASSIFICATION	2.0052528157301474E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996965300654265	WITHOUT_CLASSIFICATION	3.034699345734659E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9996965300654265	WITHOUT_CLASSIFICATION	3.034699345734659E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.999869583830551	WITHOUT_CLASSIFICATION	1.3041616944902892E-4	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999900034465798	WITHOUT_CLASSIFICATION	9.996553420083752E-6	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9992042145055162	WITHOUT_CLASSIFICATION	7.957854944837705E-4	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9997392107113869	WITHOUT_CLASSIFICATION	2.6078928861311695E-4	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999111046132924	WITHOUT_CLASSIFICATION	8.889538670767835E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9999499483160478	WITHOUT_CLASSIFICATION	5.005168395222748E-5	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.9999715586798139	WITHOUT_CLASSIFICATION	2.8441320186063526E-5	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9959157352047554	WITHOUT_CLASSIFICATION	0.004084264795244561	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999644246747088	WITHOUT_CLASSIFICATION	3.557532529124128E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9998764625173153	WITHOUT_CLASSIFICATION	1.235374826847991E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9999120304340771	WITHOUT_CLASSIFICATION	8.796956592294139E-5	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9998397108891246	WITHOUT_CLASSIFICATION	1.602891108754682E-4	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.9999825460624775	WITHOUT_CLASSIFICATION	1.7453937522541456E-5	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999998016574903	WITHOUT_CLASSIFICATION	1.9834250976539124E-7	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9999939423282288	WITHOUT_CLASSIFICATION	6.057671771175575E-6	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9998063309200088	WITHOUT_CLASSIFICATION	1.9366907999126192E-4	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999452040665174	WITHOUT_CLASSIFICATION	5.4795933482615865E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9998722418294083	WITHOUT_CLASSIFICATION	1.2775817059170751E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9995185425265202	WITHOUT_CLASSIFICATION	4.814574734797993E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999762641707659	WITHOUT_CLASSIFICATION	2.373582923401972E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9999493181624818	WITHOUT_CLASSIFICATION	5.068183751813065E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999642420444076	WITHOUT_CLASSIFICATION	3.575795559238415E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9998953279693013	WITHOUT_CLASSIFICATION	1.0467203069876607E-4	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999460590848034	WITHOUT_CLASSIFICATION	5.394091519654189E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9985787392220216	WITHOUT_CLASSIFICATION	0.0014212607779784732	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9914435478211142	WITHOUT_CLASSIFICATION	0.00855645217888575	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9999020338766762	WITHOUT_CLASSIFICATION	9.796612332381097E-5	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.999591918375728	WITHOUT_CLASSIFICATION	4.0808162427202163E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999963321269143	WITHOUT_CLASSIFICATION	3.6678730856246167E-6	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9996299079712264	WITHOUT_CLASSIFICATION	3.7009202877368426E-4	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9994193773419668	WITHOUT_CLASSIFICATION	5.806226580332062E-4	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999614461409134	WITHOUT_CLASSIFICATION	3.855385908655021E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9998969445104481	WITHOUT_CLASSIFICATION	1.030554895519067E-4	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9997735099201063	WITHOUT_CLASSIFICATION	2.264900798937245E-4	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9475551612976859	WITHOUT_CLASSIFICATION	0.05244483870231413	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9995604821781003	WITHOUT_CLASSIFICATION	4.39517821899684E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9989229749415849	WITHOUT_CLASSIFICATION	0.0010770250584150303	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9982101843875436	WITHOUT_CLASSIFICATION	0.001789815612456386	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9991017779522586	WITHOUT_CLASSIFICATION	8.982220477413361E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.9999547470513276	WITHOUT_CLASSIFICATION	4.525294867247557E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999817480177183	WITHOUT_CLASSIFICATION	1.825198228171004E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999463871223	WITHOUT_CLASSIFICATION	5.361287770003455E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999889948403022	WITHOUT_CLASSIFICATION	1.1005159697746908E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9998450770959342	WITHOUT_CLASSIFICATION	1.549229040657947E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9981201505718679	WITHOUT_CLASSIFICATION	0.001879849428132178	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9981201505718679	WITHOUT_CLASSIFICATION	0.001879849428132178	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999851068201274	WITHOUT_CLASSIFICATION	1.4893179872612039E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9981727925835966	WITHOUT_CLASSIFICATION	0.0018272074164033762	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9976631939635967	WITHOUT_CLASSIFICATION	0.002336806036403201	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9992098644745433	WITHOUT_CLASSIFICATION	7.901355254567753E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.999991823050819	WITHOUT_CLASSIFICATION	8.176949180933583E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.999991823050819	WITHOUT_CLASSIFICATION	8.176949180933583E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9996441661992845	WITHOUT_CLASSIFICATION	3.5583380071552785E-4	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9994309304137696	WITHOUT_CLASSIFICATION	5.690695862303265E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9999445420606057	WITHOUT_CLASSIFICATION	5.545793939437499E-5	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999701406294277	WITHOUT_CLASSIFICATION	2.9859370572368015E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999503550357414	WITHOUT_CLASSIFICATION	4.9644964258645486E-5	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999503550357414	WITHOUT_CLASSIFICATION	4.9644964258645486E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999796741425923	WITHOUT_CLASSIFICATION	2.032585740782478E-5	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999796741425923	WITHOUT_CLASSIFICATION	2.032585740782478E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9998862898132164	WITHOUT_CLASSIFICATION	1.1371018678354984E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.999665080948854	WITHOUT_CLASSIFICATION	3.349190511459349E-4	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999645320398594	WITHOUT_CLASSIFICATION	3.546796014062988E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9995163269395924	WITHOUT_CLASSIFICATION	4.836730604076079E-4	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999059874688183	WITHOUT_CLASSIFICATION	9.40125311817367E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9997698968996185	WITHOUT_CLASSIFICATION	2.3010310038140287E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999423129201251	WITHOUT_CLASSIFICATION	5.768707987488488E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9998945974629491	WITHOUT_CLASSIFICATION	1.0540253705091853E-4	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9999840735160294	WITHOUT_CLASSIFICATION	1.5926483970633903E-5	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9996862235004405	WITHOUT_CLASSIFICATION	3.1377649955948973E-4	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9977243321186424	WITHOUT_CLASSIFICATION	0.002275667881357688	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999953633748265	WITHOUT_CLASSIFICATION	4.6366251734787154E-6	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999287502573199	WITHOUT_CLASSIFICATION	7.124974268018568E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.9996701782287046	WITHOUT_CLASSIFICATION	3.298217712953957E-4	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9999978420125242	WITHOUT_CLASSIFICATION	2.15798747573389E-6	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998238226522334	WITHOUT_CLASSIFICATION	1.7617734776662384E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9997993288117568	WITHOUT_CLASSIFICATION	2.0067118824312555E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9996910180443668	WITHOUT_CLASSIFICATION	3.089819556332909E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9997160861302754	WITHOUT_CLASSIFICATION	2.83913869724656E-4	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999460354170976	WITHOUT_CLASSIFICATION	5.39645829023662E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.9875927345943983	WITHOUT_CLASSIFICATION	0.01240726540560175	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.9999845203693581	WITHOUT_CLASSIFICATION	1.5479630641831852E-5	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999505720911698	WITHOUT_CLASSIFICATION	4.9427908830190094E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999270946725315	WITHOUT_CLASSIFICATION	7.290532746853975E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997722330787256	WITHOUT_CLASSIFICATION	2.2776692127437692E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999450059379592	WITHOUT_CLASSIFICATION	5.49940620408135E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.999976362153167	WITHOUT_CLASSIFICATION	2.3637846833040293E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9997741232584466	WITHOUT_CLASSIFICATION	2.2587674155352105E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9954312401979145	WITHOUT_CLASSIFICATION	0.004568759802085464	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9999530424793484	WITHOUT_CLASSIFICATION	4.695752065167522E-5	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9997292705198992	WITHOUT_CLASSIFICATION	2.7072948010082784E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.999959592421272	WITHOUT_CLASSIFICATION	4.040757872808165E-5	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9973525926701389	WITHOUT_CLASSIFICATION	0.0026474073298611307	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9994839029437654	WITHOUT_CLASSIFICATION	5.160970562345594E-4	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9975878071486882	WITHOUT_CLASSIFICATION	0.0024121928513117573	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999671932024442	WITHOUT_CLASSIFICATION	3.2806797555729376E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9997236359686864	WITHOUT_CLASSIFICATION	2.76364031313511E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999886383913332	WITHOUT_CLASSIFICATION	1.1361608666745715E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.9302445522875731	WITHOUT_CLASSIFICATION	0.0697554477124269	DEFECT
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9999906705221515	WITHOUT_CLASSIFICATION	9.329477848484001E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.999547858040714	WITHOUT_CLASSIFICATION	4.5214195928604554E-4	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9996614078593002	WITHOUT_CLASSIFICATION	3.385921406996953E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9997954875594613	WITHOUT_CLASSIFICATION	2.0451244053866404E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9972597807218877	WITHOUT_CLASSIFICATION	0.002740219278112272	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9996879589803921	WITHOUT_CLASSIFICATION	3.120410196080056E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.999943385222862	WITHOUT_CLASSIFICATION	5.6614777138052434E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.999801678290309	WITHOUT_CLASSIFICATION	1.9832170969089473E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9997392469034438	WITHOUT_CLASSIFICATION	2.607530965561878E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.999964659646927	WITHOUT_CLASSIFICATION	3.5340353072877315E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999758562645182	WITHOUT_CLASSIFICATION	2.4143735481760227E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.9999758562645182	WITHOUT_CLASSIFICATION	2.4143735481760227E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999173768682683	WITHOUT_CLASSIFICATION	8.26231317316126E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999173768682683	WITHOUT_CLASSIFICATION	8.26231317316126E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995580939764251	WITHOUT_CLASSIFICATION	4.4190602357487046E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9995580939764251	WITHOUT_CLASSIFICATION	4.4190602357487046E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998920879073027	WITHOUT_CLASSIFICATION	1.0791209269730057E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9998920879073027	WITHOUT_CLASSIFICATION	1.0791209269730057E-4	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9993498754734692	WITHOUT_CLASSIFICATION	6.501245265308746E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9993498754734692	WITHOUT_CLASSIFICATION	6.501245265308746E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.9993498754734692	WITHOUT_CLASSIFICATION	6.501245265308746E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999391808379584	WITHOUT_CLASSIFICATION	6.081916204147417E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999254351642689	WITHOUT_CLASSIFICATION	7.456483573105887E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998726883858259	WITHOUT_CLASSIFICATION	1.2731161417414276E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998726883858259	WITHOUT_CLASSIFICATION	1.2731161417414276E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9998726883858259	WITHOUT_CLASSIFICATION	1.2731161417414276E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999247007467489	WITHOUT_CLASSIFICATION	7.52992532511811E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999109069170966	WITHOUT_CLASSIFICATION	8.909308290341297E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999578369651021	WITHOUT_CLASSIFICATION	4.2163034897972725E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999578369651021	WITHOUT_CLASSIFICATION	4.2163034897972725E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.999888315264877	WITHOUT_CLASSIFICATION	1.1168473512308092E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999708930070836	WITHOUT_CLASSIFICATION	2.910699291644612E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9999708930070836	WITHOUT_CLASSIFICATION	2.910699291644612E-5	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.5664299152967998	DEFECT	0.43357008470320013	WITHOUT_CLASSIFICATION
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.9998733025728586	WITHOUT_CLASSIFICATION	1.266974271414371E-4	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9997681522220625	WITHOUT_CLASSIFICATION	2.31847777937624E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9926363748440087	WITHOUT_CLASSIFICATION	0.007363625155991343	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9999009583285244	WITHOUT_CLASSIFICATION	9.904167147562562E-5	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.9999808022541332	WITHOUT_CLASSIFICATION	1.919774586679087E-5	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9951186673146902	WITHOUT_CLASSIFICATION	0.004881332685309749	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9976432737439025	WITHOUT_CLASSIFICATION	0.0023567262560975685	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999211877744144	WITHOUT_CLASSIFICATION	7.881222558549469E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999944017666035	WITHOUT_CLASSIFICATION	5.59823339656878E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9998563937990635	WITHOUT_CLASSIFICATION	1.4360620093640213E-4	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9973815830437853	WITHOUT_CLASSIFICATION	0.002618416956214699	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9996936582869408	WITHOUT_CLASSIFICATION	3.063417130592256E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9996553241658247	WITHOUT_CLASSIFICATION	3.446758341753885E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9994210001536534	WITHOUT_CLASSIFICATION	5.789998463465574E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.7913693607414841	DEFECT	0.20863063925851583	WITHOUT_CLASSIFICATION
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9701850723256874	WITHOUT_CLASSIFICATION	0.02981492767431249	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.999934962279206	WITHOUT_CLASSIFICATION	6.50377207940417E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999407798025155	WITHOUT_CLASSIFICATION	5.9220197484477656E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9998842666559363	WITHOUT_CLASSIFICATION	1.157333440636745E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9996819809570571	WITHOUT_CLASSIFICATION	3.1801904294288363E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999611827232984	WITHOUT_CLASSIFICATION	3.88172767015328E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999418906511519	WITHOUT_CLASSIFICATION	5.8109348848139105E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.9983156459286715	WITHOUT_CLASSIFICATION	0.0016843540713283847	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.9978611108290295	WITHOUT_CLASSIFICATION	0.0021388891709704983	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999169984033425	WITHOUT_CLASSIFICATION	8.300159665758101E-5	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999992798772488	WITHOUT_CLASSIFICATION	7.20122751269035E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9999038217927666	WITHOUT_CLASSIFICATION	9.617820723335363E-5	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999813514057854	WITHOUT_CLASSIFICATION	1.8648594214670583E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999284915161935	WITHOUT_CLASSIFICATION	7.150848380649848E-4	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999093405557283	WITHOUT_CLASSIFICATION	9.065944427172366E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999937671782984	WITHOUT_CLASSIFICATION	6.232821701703208E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997770286184983	WITHOUT_CLASSIFICATION	2.2297138150176727E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997770286184983	WITHOUT_CLASSIFICATION	2.2297138150176727E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997770286184983	WITHOUT_CLASSIFICATION	2.2297138150176727E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9997770286184983	WITHOUT_CLASSIFICATION	2.2297138150176727E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999965497597179	WITHOUT_CLASSIFICATION	3.45024028202583E-6	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9962649572139837	WITHOUT_CLASSIFICATION	0.0037350427860163835	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9998507891114101	WITHOUT_CLASSIFICATION	1.4921088858983845E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9998507891114101	WITHOUT_CLASSIFICATION	1.4921088858983845E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999459600069828	WITHOUT_CLASSIFICATION	5.40399930173622E-5	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.999837807249357	WITHOUT_CLASSIFICATION	1.6219275064299968E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9990203595648228	WITHOUT_CLASSIFICATION	9.79640435177218E-4	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999873463093476	WITHOUT_CLASSIFICATION	1.2653690652271009E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9971294533272654	WITHOUT_CLASSIFICATION	0.002870546672734466	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9962718980203408	WITHOUT_CLASSIFICATION	0.0037281019796592393	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9998048423153103	WITHOUT_CLASSIFICATION	1.9515768468974354E-4	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999806057302619	WITHOUT_CLASSIFICATION	1.9394269738096802E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999806057302619	WITHOUT_CLASSIFICATION	1.9394269738096802E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999806057302619	WITHOUT_CLASSIFICATION	1.9394269738096802E-5	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999806057302619	WITHOUT_CLASSIFICATION	1.9394269738096802E-5	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999963257116025	WITHOUT_CLASSIFICATION	3.6742883974928697E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9996209084706535	WITHOUT_CLASSIFICATION	3.790915293464513E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9996209084706535	WITHOUT_CLASSIFICATION	3.790915293464513E-4	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9996209084706535	WITHOUT_CLASSIFICATION	3.790915293464513E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.9993479915301265	WITHOUT_CLASSIFICATION	6.520084698733781E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999750687993378	WITHOUT_CLASSIFICATION	2.493120066221104E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.999987980954776	WITHOUT_CLASSIFICATION	1.2019045223972526E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9962716032578394	WITHOUT_CLASSIFICATION	0.003728396742160713	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9989305802691966	WITHOUT_CLASSIFICATION	0.0010694197308034467	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9984173883305048	WITHOUT_CLASSIFICATION	0.001582611669495323	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9984173883305048	WITHOUT_CLASSIFICATION	0.001582611669495323	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9990634263286957	WITHOUT_CLASSIFICATION	9.365736713042554E-4	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9990634263286957	WITHOUT_CLASSIFICATION	9.365736713042554E-4	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999939405126403	WITHOUT_CLASSIFICATION	6.0594873596432645E-6	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999906788339253	WITHOUT_CLASSIFICATION	9.321166074686E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.9997680712080412	WITHOUT_CLASSIFICATION	2.319287919587823E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9868759116372057	WITHOUT_CLASSIFICATION	0.013124088362794448	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998089757086507	WITHOUT_CLASSIFICATION	1.9102429134933038E-4	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999926594756485	WITHOUT_CLASSIFICATION	7.340524351458598E-6	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9997853969463467	WITHOUT_CLASSIFICATION	2.1460305365337436E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.9998409875833943	WITHOUT_CLASSIFICATION	1.5901241660569302E-4	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9987724210111902	WITHOUT_CLASSIFICATION	0.0012275789888097875	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999759893172805	WITHOUT_CLASSIFICATION	2.4010682719457454E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999759893172805	WITHOUT_CLASSIFICATION	2.4010682719457454E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999577506985298	WITHOUT_CLASSIFICATION	4.2249301470275116E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999577506985298	WITHOUT_CLASSIFICATION	4.2249301470275116E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.9987359801262213	WITHOUT_CLASSIFICATION	0.001264019873778686	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9990535485022293	WITHOUT_CLASSIFICATION	9.464514977706566E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999027236021266	WITHOUT_CLASSIFICATION	9.727639787343705E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9987485375586116	WITHOUT_CLASSIFICATION	0.0012514624413884044	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9987485375586116	WITHOUT_CLASSIFICATION	0.0012514624413884044	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9987485375586116	WITHOUT_CLASSIFICATION	0.0012514624413884044	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999294966243701	WITHOUT_CLASSIFICATION	7.050337562983976E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.9996319508476316	WITHOUT_CLASSIFICATION	3.680491523683845E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9995968878703303	WITHOUT_CLASSIFICATION	4.031121296696517E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9995526604361542	WITHOUT_CLASSIFICATION	4.4733956384579703E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9795481236564006	WITHOUT_CLASSIFICATION	0.020451876343599316	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9999735720720477	WITHOUT_CLASSIFICATION	2.6427927952191897E-5	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9801202388597037	WITHOUT_CLASSIFICATION	0.01987976114029626	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998056933384043	WITHOUT_CLASSIFICATION	1.9430666159579463E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.9995726073752844	WITHOUT_CLASSIFICATION	4.273926247155749E-4	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999006649719127	WITHOUT_CLASSIFICATION	9.933502808729635E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998724331718464	WITHOUT_CLASSIFICATION	1.2756682815360805E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9992102384556417	WITHOUT_CLASSIFICATION	7.897615443581413E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999767050989101	WITHOUT_CLASSIFICATION	2.329490108987388E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9992235073482546	WITHOUT_CLASSIFICATION	7.764926517453689E-4	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.9442058450397125	WITHOUT_CLASSIFICATION	0.055794154960287494	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9986323150613727	WITHOUT_CLASSIFICATION	0.0013676849386272982	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9992854224613912	WITHOUT_CLASSIFICATION	7.145775386088994E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999884604835515	WITHOUT_CLASSIFICATION	1.1539516448540064E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9999323215201789	WITHOUT_CLASSIFICATION	6.767847982114438E-5	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999239629703214	WITHOUT_CLASSIFICATION	7.603702967859409E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999269999807883	WITHOUT_CLASSIFICATION	7.300001921176114E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.9927503829428099	WITHOUT_CLASSIFICATION	0.007249617057190013	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9982035947736629	WITHOUT_CLASSIFICATION	0.0017964052263370295	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9999232318214332	WITHOUT_CLASSIFICATION	7.676817856675445E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999861827881891	WITHOUT_CLASSIFICATION	1.38172118109552E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9866692985198837	WITHOUT_CLASSIFICATION	0.013330701480116367	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.9543247520161284	WITHOUT_CLASSIFICATION	0.045675247983871695	DEFECT
// line 313	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.9995618818994116	WITHOUT_CLASSIFICATION	4.3811810058844587E-4	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.999842165495433	WITHOUT_CLASSIFICATION	1.5783450456701933E-4	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.9998438188114284	WITHOUT_CLASSIFICATION	1.561811885716069E-4	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9997836917181123	WITHOUT_CLASSIFICATION	2.1630828188763472E-4	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9995311806024835	WITHOUT_CLASSIFICATION	4.688193975165551E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9972126752547271	WITHOUT_CLASSIFICATION	0.0027873247452728863	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.9938441586204904	WITHOUT_CLASSIFICATION	0.006155841379509751	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9985348042755819	WITHOUT_CLASSIFICATION	0.0014651957244180528	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9985348042755819	WITHOUT_CLASSIFICATION	0.0014651957244180528	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.9880872667372	WITHOUT_CLASSIFICATION	0.011912733262800011	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999341829535587	WITHOUT_CLASSIFICATION	6.5817046441276E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9999341829535587	WITHOUT_CLASSIFICATION	6.5817046441276E-5	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9998909695016989	WITHOUT_CLASSIFICATION	1.0903049830107634E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.99995965324528	WITHOUT_CLASSIFICATION	4.034675472001955E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.999786125324519	WITHOUT_CLASSIFICATION	2.138746754809056E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999611327542413	WITHOUT_CLASSIFICATION	3.8867245758684554E-5	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9999611327542413	WITHOUT_CLASSIFICATION	3.8867245758684554E-5	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999910273506086	WITHOUT_CLASSIFICATION	8.972649391454913E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997384382913701	WITHOUT_CLASSIFICATION	2.615617086299674E-4	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9997384382913701	WITHOUT_CLASSIFICATION	2.615617086299674E-4	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.9993033715489249	WITHOUT_CLASSIFICATION	6.966284510750979E-4	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.8859830878788507	WITHOUT_CLASSIFICATION	0.1140169121211493	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9998148099023072	WITHOUT_CLASSIFICATION	1.851900976928797E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999477025001197	WITHOUT_CLASSIFICATION	5.229749988041236E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998635704411392	WITHOUT_CLASSIFICATION	1.3642955886079472E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998467137408288	WITHOUT_CLASSIFICATION	1.5328625917122523E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9999217647166672	WITHOUT_CLASSIFICATION	7.823528333285785E-5	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.999922130745344	WITHOUT_CLASSIFICATION	7.786925465603993E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999424465466445	WITHOUT_CLASSIFICATION	5.755345335551676E-5	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9977945210552153	WITHOUT_CLASSIFICATION	0.002205478944784758	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995620649066129	WITHOUT_CLASSIFICATION	4.379350933870614E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9996220408434422	WITHOUT_CLASSIFICATION	3.779591565578223E-4	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9998610723476942	WITHOUT_CLASSIFICATION	1.3892765230586764E-4	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9977944611673614	WITHOUT_CLASSIFICATION	0.0022055388326386203	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9996050184810091	WITHOUT_CLASSIFICATION	3.9498151899091516E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.9999391595626461	WITHOUT_CLASSIFICATION	6.0840437353870364E-5	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9992409021945332	WITHOUT_CLASSIFICATION	7.590978054668318E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9928956146628409	WITHOUT_CLASSIFICATION	0.007104385337159053	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999733076147388	WITHOUT_CLASSIFICATION	2.6692385261209573E-5	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999733076147388	WITHOUT_CLASSIFICATION	2.6692385261209573E-5	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.999564705759294	WITHOUT_CLASSIFICATION	4.352942407060007E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999145537381166	WITHOUT_CLASSIFICATION	8.544626188353207E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9990905339523539	WITHOUT_CLASSIFICATION	9.094660476459801E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9991887689864988	WITHOUT_CLASSIFICATION	8.11231013501227E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998844736071371	WITHOUT_CLASSIFICATION	1.1552639286294517E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998844736071371	WITHOUT_CLASSIFICATION	1.1552639286294517E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.9998844736071371	WITHOUT_CLASSIFICATION	1.1552639286294517E-4	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9999304710882932	WITHOUT_CLASSIFICATION	6.95289117066768E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9993988740345942	WITHOUT_CLASSIFICATION	6.011259654057808E-4	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9998764595232935	WITHOUT_CLASSIFICATION	1.235404767064928E-4	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999836980758818	WITHOUT_CLASSIFICATION	1.6301924118163583E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9999888401687496	WITHOUT_CLASSIFICATION	1.1159831250439026E-5	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9999589649664634	WITHOUT_CLASSIFICATION	4.103503353657037E-5	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.999807384385331	WITHOUT_CLASSIFICATION	1.9261561466908916E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9983403027873177	WITHOUT_CLASSIFICATION	0.0016596972126822814	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9999087697558928	WITHOUT_CLASSIFICATION	9.123024410710351E-5	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999958361157864	WITHOUT_CLASSIFICATION	4.16388421360972E-6	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.9999316817227217	WITHOUT_CLASSIFICATION	6.831827727824516E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9999545372007196	WITHOUT_CLASSIFICATION	4.546279928043062E-5	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9396755598972399	WITHOUT_CLASSIFICATION	0.060324440102760085	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.9997009000763053	WITHOUT_CLASSIFICATION	2.990999236946784E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9999762067596792	WITHOUT_CLASSIFICATION	2.3793240320750314E-5	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.9998185228704003	WITHOUT_CLASSIFICATION	1.8147712959961504E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9999850237124798	WITHOUT_CLASSIFICATION	1.4976287520085164E-5	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9999726773747039	WITHOUT_CLASSIFICATION	2.7322625296192826E-5	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9998523346213211	WITHOUT_CLASSIFICATION	1.4766537867893557E-4	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9216853122792438	WITHOUT_CLASSIFICATION	0.07831468772075628	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.9603694683548768	DEFECT	0.039630531645123195	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.877057969667223	WITHOUT_CLASSIFICATION	0.12294203033277691	DEFECT
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.9987888053818729	DEFECT	0.0012111946181271528	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.9732325808526813	DEFECT	0.02676741914731878	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9845024400316246	WITHOUT_CLASSIFICATION	0.01549755996837533	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9633834838519946	WITHOUT_CLASSIFICATION	0.036616516148005464	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.9127110310731648	WITHOUT_CLASSIFICATION	0.08728896892683531	DEFECT
// FIXME: not correct exception	DEFECT	0.800707646186533	WITHOUT_CLASSIFICATION	0.19929235381346694	DEFECT
// XXX actually only on windows...	DEFECT	0.9977057764791842	WITHOUT_CLASSIFICATION	0.0022942235208156447	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9939172833204397	WITHOUT_CLASSIFICATION	0.006082716679560241	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9688142760023385	WITHOUT_CLASSIFICATION	0.031185723997661598	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9859273274396189	WITHOUT_CLASSIFICATION	0.014072672560381153	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.9191106298671791	DEFECT	0.0808893701328209	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.9724149383680475	WITHOUT_CLASSIFICATION	0.02758506163195245	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9759335976588888	WITHOUT_CLASSIFICATION	0.024066402341111206	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9759335976588888	WITHOUT_CLASSIFICATION	0.024066402341111206	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.9697903134589714	WITHOUT_CLASSIFICATION	0.030209686541028617	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9979173966215227	WITHOUT_CLASSIFICATION	0.002082603378477386	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.9791329463186818	WITHOUT_CLASSIFICATION	0.020867053681318255	DEFECT
// ENEBO: Very wrong	DEFECT	0.999726083121402	WITHOUT_CLASSIFICATION	2.739168785979607E-4	DEFECT
// ENEBO: Very wrong	DEFECT	0.999726083121402	WITHOUT_CLASSIFICATION	2.739168785979607E-4	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9650795021711076	WITHOUT_CLASSIFICATION	0.034920497828892345	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9768946592501592	WITHOUT_CLASSIFICATION	0.02310534074984081	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9790775894053233	WITHOUT_CLASSIFICATION	0.020922410594676758	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8135375489948704	WITHOUT_CLASSIFICATION	0.18646245100512965	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9315419180183542	WITHOUT_CLASSIFICATION	0.06845808198164582	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7093493336563946	WITHOUT_CLASSIFICATION	0.2906506663436054	DEFECT
// TODO: proper sign	DEFECT	0.9667402949813225	WITHOUT_CLASSIFICATION	0.03325970501867745	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.7236305031053243	DEFECT	0.2763694968946756	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.7357724556972209	WITHOUT_CLASSIFICATION	0.264227544302779	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.6289079024061683	WITHOUT_CLASSIFICATION	0.37109209759383166	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9432471646669983	WITHOUT_CLASSIFICATION	0.056752835333001725	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.8801213165675292	WITHOUT_CLASSIFICATION	0.11987868343247085	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.771316119354327	DEFECT	0.22868388064567308	WITHOUT_CLASSIFICATION
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.9166457316176145	WITHOUT_CLASSIFICATION	0.08335426838238548	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9539803277664215	WITHOUT_CLASSIFICATION	0.04601967223357854	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9936058176164612	WITHOUT_CLASSIFICATION	0.006394182383538896	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9978005256971773	WITHOUT_CLASSIFICATION	0.002199474302822763	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9810153268387917	WITHOUT_CLASSIFICATION	0.018984673161208287	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.992366502337562	WITHOUT_CLASSIFICATION	0.007633497662437921	DEFECT
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9994066573116215	WITHOUT_CLASSIFICATION	5.933426883784767E-4	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9403711351897763	WITHOUT_CLASSIFICATION	0.05962886481022358	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.9403711351897763	WITHOUT_CLASSIFICATION	0.05962886481022358	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9931899764980395	WITHOUT_CLASSIFICATION	0.006810023501960431	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9894567561440059	WITHOUT_CLASSIFICATION	0.01054324385599413	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.6042212639543002	WITHOUT_CLASSIFICATION	0.3957787360456999	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9872477786367821	WITHOUT_CLASSIFICATION	0.012752221363217815	DEFECT
// FIXME: This is wrong	DEFECT	0.9098525478344718	WITHOUT_CLASSIFICATION	0.09014745216552819	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9903062897614529	WITHOUT_CLASSIFICATION	0.009693710238547109	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9999389670285747	WITHOUT_CLASSIFICATION	6.103297142537887E-5	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5147596078858827	WITHOUT_CLASSIFICATION	0.4852403921141173	DEFECT
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9983802376676231	WITHOUT_CLASSIFICATION	0.0016197623323768921	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.9963954575254891	WITHOUT_CLASSIFICATION	0.0036045424745109497	DEFECT
// FIXME: Broken but behaving	DEFECT	0.7733325253340074	DEFECT	0.22666747466599263	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9366114426881381	DEFECT	0.06338855731186202	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9366114426881381	DEFECT	0.06338855731186202	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.721953601711279	WITHOUT_CLASSIFICATION	0.27804639828872096	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9984752317722603	WITHOUT_CLASSIFICATION	0.001524768227739776	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.995588798272777	WITHOUT_CLASSIFICATION	0.004411201727222963	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.816073070095992	DEFECT	0.18392692990400814	WITHOUT_CLASSIFICATION
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9755091852874909	DEFECT	0.024490814712509173	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9710653498754815	WITHOUT_CLASSIFICATION	0.028934650124518353	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.8389954236728255	WITHOUT_CLASSIFICATION	0.1610045763271744	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9931899764980395	WITHOUT_CLASSIFICATION	0.006810023501960431	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9930171328685327	WITHOUT_CLASSIFICATION	0.00698286713146736	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9824048206449357	WITHOUT_CLASSIFICATION	0.017595179355064303	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.5149491720037002	DEFECT	0.48505082799629984	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8135375489948704	WITHOUT_CLASSIFICATION	0.18646245100512965	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.9724282368631794	DEFECT	0.027571763136820557	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.5124753690424005	WITHOUT_CLASSIFICATION	0.4875246309575995	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9936058176164612	WITHOUT_CLASSIFICATION	0.006394182383538896	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.9995655625277184	WITHOUT_CLASSIFICATION	4.344374722816066E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// FIXME: Broken but behaving	DEFECT	0.7733325253340074	DEFECT	0.22666747466599263	WITHOUT_CLASSIFICATION
// TODO: we loose encoding information here, fix it	DEFECT	0.7491569475305996	DEFECT	0.2508430524694005	WITHOUT_CLASSIFICATION
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// TODO: don't require pop	DEFECT	0.9508824246178014	WITHOUT_CLASSIFICATION	0.04911757538219877	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.5147596078858827	WITHOUT_CLASSIFICATION	0.4852403921141173	DEFECT
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.9684981480744705	WITHOUT_CLASSIFICATION	0.031501851925529394	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9366114426881381	DEFECT	0.06338855731186202	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.9366114426881381	DEFECT	0.06338855731186202	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9998305976988947	WITHOUT_CLASSIFICATION	1.694023011052739E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.9379132230347307	WITHOUT_CLASSIFICATION	0.062086776965269264	DEFECT
