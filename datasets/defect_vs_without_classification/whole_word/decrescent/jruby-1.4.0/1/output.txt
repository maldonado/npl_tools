// set constants now that they're initialized	WITHOUT_CLASSIFICATION	0.9999923276497696	WITHOUT_CLASSIFICATION	7.672350230443698E-6	DEFECT
// line 335	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// Figure end-char.  '\0' is special to indicate begin=end and that no nesting?	WITHOUT_CLASSIFICATION	0.9997991324656019	WITHOUT_CLASSIFICATION	2.0086753439805768E-4	DEFECT
// line 362	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// line 391	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/* ^D */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* ^Z */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999343268907117	WITHOUT_CLASSIFICATION	6.56731092883381E-5	DEFECT
//Do nothing	WITHOUT_CLASSIFICATION	0.9999343268907117	WITHOUT_CLASSIFICATION	6.56731092883381E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// switch	WITHOUT_CLASSIFICATION	0.9999158683549044	WITHOUT_CLASSIFICATION	8.413164509557925E-5	DEFECT
// return result	WITHOUT_CLASSIFICATION	0.999996185062863	WITHOUT_CLASSIFICATION	3.814937136953042E-6	DEFECT
// name	WITHOUT_CLASSIFICATION	0.9999683421468606	WITHOUT_CLASSIFICATION	3.165785313937152E-5	DEFECT
// Define System.getProperties() in ENV_JAVA	WITHOUT_CLASSIFICATION	0.9996127103301518	WITHOUT_CLASSIFICATION	3.87289669848177E-4	DEFECT
// Accessor methods.	WITHOUT_CLASSIFICATION	0.99998414730748	WITHOUT_CLASSIFICATION	1.5852692520038137E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999959563954619	WITHOUT_CLASSIFICATION	4.0436045380850374E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999959563954619	WITHOUT_CLASSIFICATION	4.0436045380850374E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999959563954619	WITHOUT_CLASSIFICATION	4.0436045380850374E-5	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999959563954619	WITHOUT_CLASSIFICATION	4.0436045380850374E-5	DEFECT
// call getpwent to fail early if unsupported	WITHOUT_CLASSIFICATION	0.9996019993274076	WITHOUT_CLASSIFICATION	3.980006725924044E-4	DEFECT
// fall back on env entry for USER	WITHOUT_CLASSIFICATION	0.999498396898456	WITHOUT_CLASSIFICATION	5.016031015440675E-4	DEFECT
// try to read grent to fail fast	WITHOUT_CLASSIFICATION	0.999430621051203	WITHOUT_CLASSIFICATION	5.693789487970584E-4	DEFECT
// define ARGV and $* for this runtime	WITHOUT_CLASSIFICATION	0.999781153418863	WITHOUT_CLASSIFICATION	2.1884658113715158E-4	DEFECT
// Version information:	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// after defn of $stderr as the call may produce warnings	WITHOUT_CLASSIFICATION	0.9999787152879082	WITHOUT_CLASSIFICATION	2.1284712091837944E-5	DEFECT
// ARGF, $< object	WITHOUT_CLASSIFICATION	0.9999781935581372	WITHOUT_CLASSIFICATION	2.180644186276815E-5	DEFECT
// if the environment variables can't be obtained, define an empty ENV	WITHOUT_CLASSIFICATION	0.999975595736779	WITHOUT_CLASSIFICATION	2.440426322098943E-5	DEFECT
// On platforms without a c-library accessable through JNA, getpid will return hashCode  // as $$ used to. Using $$ to kill processes could take down many runtimes, but by basing // $$ on getpid() where available, we have the same semantics as MRI.	WITHOUT_CLASSIFICATION	0.9999746097844034	WITHOUT_CLASSIFICATION	2.539021559665803E-5	DEFECT
//$@ returns nil if $!.backtrace is not an array	WITHOUT_CLASSIFICATION	0.9832296544040159	WITHOUT_CLASSIFICATION	0.016770345595984174	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996859105454139	WITHOUT_CLASSIFICATION	3.1408945458609726E-4	DEFECT
// MRI behavior: just plain '//' or '\\\\' are considered illegal on Windows.	WITHOUT_CLASSIFICATION	0.9999757485959021	WITHOUT_CLASSIFICATION	2.4251404097860234E-5	DEFECT
// this _is_ legal (when removing an undef)	WITHOUT_CLASSIFICATION	0.9999424378180926	WITHOUT_CLASSIFICATION	5.7562181907522515E-5	DEFECT
// What we passed to the constructor for method 'path'	WITHOUT_CLASSIFICATION	0.9995959844277137	WITHOUT_CLASSIFICATION	4.0401557228630523E-4	DEFECT
// ----- Ruby Class Methods ----------------------------------------------------	WITHOUT_CLASSIFICATION	0.999822205085065	WITHOUT_CLASSIFICATION	1.7779491493483102E-4	DEFECT
// // CONSTANT TABLE METHODS - pass to delegate //	WITHOUT_CLASSIFICATION	0.9982599822641743	WITHOUT_CLASSIFICATION	0.0017400177358257104	DEFECT
// We get canonical path to try and flatten the path out. // a dir '/subdir/..' should return as '/' // cnutter: Do we want to flatten path out?	WITHOUT_CLASSIFICATION	0.9998512798892499	WITHOUT_CLASSIFICATION	1.4872011075004547E-4	DEFECT
// MRI behavior	WITHOUT_CLASSIFICATION	0.999959563954619	WITHOUT_CLASSIFICATION	4.0436045380850374E-5	DEFECT
// ----- Ruby Instance Methods -------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998325993696974	WITHOUT_CLASSIFICATION	1.6740063030260156E-4	DEFECT
// Make sure any read()s after close fail.	WITHOUT_CLASSIFICATION	0.9999442271829909	WITHOUT_CLASSIFICATION	5.577281700903544E-5	DEFECT
// ----- Helper Methods --------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9998244294731704	WITHOUT_CLASSIFICATION	1.75570526829703E-4	DEFECT
// try to use POSIX for this first	WITHOUT_CLASSIFICATION	0.9997595530150759	WITHOUT_CLASSIFICATION	2.4044698492415293E-4	DEFECT
// otherwise fall back on the old way	WITHOUT_CLASSIFICATION	0.999931059482324	WITHOUT_CLASSIFICATION	6.894051767609397E-5	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999937483842465	WITHOUT_CLASSIFICATION	6.2516157535260035E-6	DEFECT
// No passed in block, lets check next outer frame for one ('Proc.new')	WITHOUT_CLASSIFICATION	0.9994945485719653	WITHOUT_CLASSIFICATION	5.054514280346607E-4	DEFECT
// modify the block with a new backref/lastline-grabbing scope	WITHOUT_CLASSIFICATION	0.9999942477381911	WITHOUT_CLASSIFICATION	5.752261808842232E-6	DEFECT
// for future compatibility as constructors move toward not accepting metaclass?	WITHOUT_CLASSIFICATION	0.9994104319845449	WITHOUT_CLASSIFICATION	5.895680154549402E-4	DEFECT
//        case RUBY_HYBRID: //            backtrace = ThreadContext.createRubyHybridBacktrace(getRuntime(), backtraceFrames, javaStackTrace, getRuntime().getDebug().isTrue()); //            break;	WITHOUT_CLASSIFICATION	0.999787429886361	WITHOUT_CLASSIFICATION	2.1257011363894331E-4	DEFECT
// This looks wrong, but it's the way MRI does it.	WITHOUT_CLASSIFICATION	0.9995494142780109	WITHOUT_CLASSIFICATION	4.50585721989136E-4	DEFECT
// rb_exc_new3	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// NOTE: The indicies here match exactly the signal values; do not reorder	WITHOUT_CLASSIFICATION	0.9998482548394744	WITHOUT_CLASSIFICATION	1.5174516052560554E-4	DEFECT
//registerThreadDumpSignalHandler(runtime);	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// IOT is also 6	WITHOUT_CLASSIFICATION	0.9999861978495675	WITHOUT_CLASSIFICATION	1.3802150432551465E-5	DEFECT
// CLD is also 20	WITHOUT_CLASSIFICATION	0.9999813599288382	WITHOUT_CLASSIFICATION	1.8640071161832972E-5	DEFECT
// RubySignal	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// ZStream actually *isn't* allocatable	WITHOUT_CLASSIFICATION	0.9997886375863264	WITHOUT_CLASSIFICATION	2.1136241367346317E-4	DEFECT
// MRI behavior, enforced by tests	WITHOUT_CLASSIFICATION	0.9992543578818633	WITHOUT_CLASSIFICATION	7.456421181366021E-4	DEFECT
// it's safe since adler.update doesn't modify the array	WITHOUT_CLASSIFICATION	0.9998966297891775	WITHOUT_CLASSIFICATION	1.0337021082248232E-4	DEFECT
// MRI behavior: in finished mode, we work as pass-through	WITHOUT_CLASSIFICATION	0.9975400536840614	WITHOUT_CLASSIFICATION	0.0024599463159385754	DEFECT
// SYNC_FLUSH	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// By default, NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999783591794812	WITHOUT_CLASSIFICATION	2.1640820518813632E-5	DEFECT
//io.finish();	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// should invoke seek on realIo	WITHOUT_CLASSIFICATION	0.9996162882380042	WITHOUT_CLASSIFICATION	3.8371176199574803E-4	DEFECT
// hmm...	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Called before any write to make sure the // header is always written before the first bytes	WITHOUT_CLASSIFICATION	0.9995569965241012	WITHOUT_CLASSIFICATION	4.4300347589875863E-4	DEFECT
// For JDK 1.4 we can use "cal.getTimeInMillis()"	WITHOUT_CLASSIFICATION	0.9999462822696857	WITHOUT_CLASSIFICATION	5.371773031412173E-5	DEFECT
// We can just use dt, since it is immutable	WITHOUT_CLASSIFICATION	0.9993196249182209	WITHOUT_CLASSIFICATION	6.803750817790019E-4	DEFECT
// float number of seconds	WITHOUT_CLASSIFICATION	0.9998327703444728	WITHOUT_CLASSIFICATION	1.6722965552728157E-4	DEFECT
// modified to match how hash is calculated in 1.8.2	WITHOUT_CLASSIFICATION	0.9981725485678516	WITHOUT_CLASSIFICATION	0.0018274514321483296	DEFECT
// dump usec, not msec	WITHOUT_CLASSIFICATION	0.9997157552799266	WITHOUT_CLASSIFICATION	2.8424472007335236E-4	DEFECT
/* Time class methods */	WITHOUT_CLASSIFICATION	0.9999946067395127	WITHOUT_CLASSIFICATION	5.393260487348337E-6	DEFECT
// marsaling dumps usec, not msec	WITHOUT_CLASSIFICATION	0.9977412151250507	WITHOUT_CLASSIFICATION	0.0022587848749493645	DEFECT
// MRI accepts additional wday argument which appears to be ignored.	WITHOUT_CLASSIFICATION	0.9994321202954997	WITHOUT_CLASSIFICATION	5.678797045004391E-4	DEFECT
// set up with min values and then add to allow rolling over	WITHOUT_CLASSIFICATION	0.9999560233815107	WITHOUT_CLASSIFICATION	4.3976618489247956E-5	DEFECT
// the instant at which we will ask dtz what the difference between DST and // standard time is	WITHOUT_CLASSIFICATION	0.999536480069125	WITHOUT_CLASSIFICATION	4.6351993087504E-4	DEFECT
// if we might be moving this time from !DST -> DST, the offset is assumed // to be the same as it was just before we last moved from DST -> !DST	WITHOUT_CLASSIFICATION	0.9998658438180862	WITHOUT_CLASSIFICATION	1.3415618191382514E-4	DEFECT
// Ignores usec if 8 args (for compatibility with parsedate) or if not supplied.	WITHOUT_CLASSIFICATION	0.9993497782727506	WITHOUT_CLASSIFICATION	6.502217272494074E-4	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999014244893492	WITHOUT_CLASSIFICATION	9.857551065084699E-5	DEFECT
/* If the value will fit in a Fixnum, return one of those. */	WITHOUT_CLASSIFICATION	0.9994361199584472	WITHOUT_CLASSIFICATION	5.63880041552925E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999814486314468	WITHOUT_CLASSIFICATION	1.8551368553189556E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999032052341994	WITHOUT_CLASSIFICATION	9.679476580057207E-5	DEFECT
// num2int is also implemented	WITHOUT_CLASSIFICATION	0.9999032052341994	WITHOUT_CLASSIFICATION	9.679476580057207E-5	DEFECT
// no bignorm here needed	WITHOUT_CLASSIFICATION	0.9999941047193944	WITHOUT_CLASSIFICATION	5.895280605602294E-6	DEFECT
// wow, the only time we can use the java protocol ;)	WITHOUT_CLASSIFICATION	0.9997786370271291	WITHOUT_CLASSIFICATION	2.213629728709504E-4	DEFECT
// Pad with a 0	WITHOUT_CLASSIFICATION	0.9999911806743937	WITHOUT_CLASSIFICATION	8.819325606312203E-6	DEFECT
// BigInteger required a sign byte in incoming array	WITHOUT_CLASSIFICATION	0.9990736525080766	WITHOUT_CLASSIFICATION	9.263474919234155E-4	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9894416594766484	WITHOUT_CLASSIFICATION	0.010558340523351594	DEFECT
// We do this b/c make_tmpname might be overridden	WITHOUT_CLASSIFICATION	0.9991911442262637	WITHOUT_CLASSIFICATION	8.088557737362438E-4	DEFECT
// ???	WITHOUT_CLASSIFICATION	0.9999509918811661	WITHOUT_CLASSIFICATION	4.90081188338392E-5	DEFECT
// PID	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
// elements and trailing nils	WITHOUT_CLASSIFICATION	0.9999820881732201	WITHOUT_CLASSIFICATION	1.791182677994474E-5	DEFECT
// Dir::tmpdir	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// volatile to ensure that initial nil-fill is visible to other threads	WITHOUT_CLASSIFICATION	0.999778982997257	WITHOUT_CLASSIFICATION	2.2101700274290825E-4	DEFECT
/* Ruby arrays default to holding 16 elements, so we create an         * ArrayList of the same size if we're not told otherwise         */	WITHOUT_CLASSIFICATION	0.999987901636201	WITHOUT_CLASSIFICATION	1.2098363799008139E-5	DEFECT
/* rb_ary_new2     * just allocates the internal array     */	WITHOUT_CLASSIFICATION	0.9999768345794549	WITHOUT_CLASSIFICATION	2.3165420545093526E-5	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998889462525427	WITHOUT_CLASSIFICATION	1.1105374745730225E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998889462525427	WITHOUT_CLASSIFICATION	1.1105374745730225E-4	DEFECT
/*      * plain internal array assignment     */	WITHOUT_CLASSIFICATION	0.9998889462525427	WITHOUT_CLASSIFICATION	1.1105374745730225E-4	DEFECT
/* Array constructors taking the MetaClass to fulfil MRI Array subclass behaviour     *      */	WITHOUT_CLASSIFICATION	0.9999079799921459	WITHOUT_CLASSIFICATION	9.202000785409777E-5	DEFECT
/* NEWOBJ and OBJSETUP equivalent     * fastest one, for shared arrays, optional objectspace     */	WITHOUT_CLASSIFICATION	0.9998883275796192	WITHOUT_CLASSIFICATION	1.1167242038082544E-4	DEFECT
// Create global constants and variables	WITHOUT_CLASSIFICATION	0.9999363227011213	WITHOUT_CLASSIFICATION	6.367729887870749E-5	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// Windows does not support these functions, so we won't even try // This also matches Ruby behavior for JRUBY-2353.	WITHOUT_CLASSIFICATION	0.7762260254749239	WITHOUT_CLASSIFICATION	0.22377397452507608	DEFECT
// There are two different popular TZ formats: legacy (AST+3:00:00, GMT-3), and // newer one (US/Pacific, America/Los_Angeles). This pattern is to detect // the legacy TZ format in order to convert it to the newer format // understood by Java API.	WITHOUT_CLASSIFICATION	0.9995209565387423	WITHOUT_CLASSIFICATION	4.7904346125775455E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// 1.9 seems to just do inspect for to_s now	WITHOUT_CLASSIFICATION	0.9999447309795456	WITHOUT_CLASSIFICATION	5.526902045435217E-5	DEFECT
// possibly should not in object space	WITHOUT_CLASSIFICATION	0.9921500123980747	WITHOUT_CLASSIFICATION	0.007849987601925398	DEFECT
// only fill if there actually will remain trailing storage	WITHOUT_CLASSIFICATION	0.9998233896393326	WITHOUT_CLASSIFICATION	1.7661036066755377E-4	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// rb_ary_new4	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// from DUP_SETUP	WITHOUT_CLASSIFICATION	0.999975275573197	WITHOUT_CLASSIFICATION	2.47244268029433E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999531244978058	WITHOUT_CLASSIFICATION	4.687550219429348E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999795481996558	WITHOUT_CLASSIFICATION	2.0451800344104194E-5	DEFECT
// See [ruby-core:17483]	WITHOUT_CLASSIFICATION	0.9999795481996558	WITHOUT_CLASSIFICATION	2.0451800344104194E-5	DEFECT
// Satisfy java.util.List interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999433704805959	WITHOUT_CLASSIFICATION	5.6629519404087146E-5	DEFECT
// pre-set for the sake of terminating recursive calls	WITHOUT_CLASSIFICATION	0.9997370457076372	WITHOUT_CLASSIFICATION	2.629542923628324E-4	DEFECT
/* root fiber */	WITHOUT_CLASSIFICATION	0.9999805226602633	WITHOUT_CLASSIFICATION	1.9477339736733646E-5	DEFECT
// GMT+00:00 --> Etc/GMT, see "MRI behavior" // comment below.	WITHOUT_CLASSIFICATION	0.9998633749727369	WITHOUT_CLASSIFICATION	1.3662502726318523E-4	DEFECT
//  See http://www.gzip.org/zlib/rfc-gzip.html	WITHOUT_CLASSIFICATION	0.999698370092526	WITHOUT_CLASSIFICATION	3.0162990747397165E-4	DEFECT
// extras flag	WITHOUT_CLASSIFICATION	0.9999856885355872	WITHOUT_CLASSIFICATION	1.4311464412679709E-5	DEFECT
// Zlib::NO_FLUSH	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// ...nothing	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// utility method	WITHOUT_CLASSIFICATION	0.9999898402728752	WITHOUT_CLASSIFICATION	1.0159727124905729E-5	DEFECT
// Prepare LoadService and load path	WITHOUT_CLASSIFICATION	0.9997148273095358	WITHOUT_CLASSIFICATION	2.85172690464288E-4	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
// flags // 4 bytes of modified time	WITHOUT_CLASSIFICATION	0.9997993788995518	WITHOUT_CLASSIFICATION	2.0062110044825212E-4	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998280839815998	WITHOUT_CLASSIFICATION	1.7191601840015628E-4	DEFECT
// 1.8 "include?"	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// any BigInteger is bigger than Fixnum and we don't have FIXABLE	WITHOUT_CLASSIFICATION	0.997006426491251	WITHOUT_CLASSIFICATION	0.0029935735087488536	DEFECT
// beneath are rewritten coercions that reflect MRI logic, the aboves are used only by RubyBigDecimal	WITHOUT_CLASSIFICATION	0.9999804690073983	WITHOUT_CLASSIFICATION	1.953099260171297E-5	DEFECT
// MRI does it!	WITHOUT_CLASSIFICATION	0.9999503100747554	WITHOUT_CLASSIFICATION	4.968992524469059E-5	DEFECT
// won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999634471242445	WITHOUT_CLASSIFICATION	3.655287575554056E-5	DEFECT
// it won't hurt fixnums	WITHOUT_CLASSIFICATION	0.9999432435935305	WITHOUT_CLASSIFICATION	5.675640646943216E-5	DEFECT
// RubyClassPathVariable	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// not to be confused with RubyObject's flags	WITHOUT_CLASSIFICATION	0.990579692097704	WITHOUT_CLASSIFICATION	0.009420307902295878	DEFECT
// second argument is allowed, but ignored (MRI)	WITHOUT_CLASSIFICATION	0.999955176318746	WITHOUT_CLASSIFICATION	4.482368125406798E-5	DEFECT
// we are presumably running a precompiled class; load directly	WITHOUT_CLASSIFICATION	0.9999493966015249	WITHOUT_CLASSIFICATION	5.060339847500705E-5	DEFECT
// terminate; tryCompile will have printed out an error and we're done	WITHOUT_CLASSIFICATION	0.9998704647700429	WITHOUT_CLASSIFICATION	1.2953522995711171E-4	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999724690410678	WITHOUT_CLASSIFICATION	2.7530958932107076E-5	DEFECT
// do nothing, this iteration restarts	WITHOUT_CLASSIFICATION	0.9999574007443359	WITHOUT_CLASSIFICATION	4.259925566409286E-5	DEFECT
// recheck condition	WITHOUT_CLASSIFICATION	0.9999635987723802	WITHOUT_CLASSIFICATION	3.640122761979396E-5	DEFECT
// Get the main threadcontext (gets constructed for us)	WITHOUT_CLASSIFICATION	0.9999616801284595	WITHOUT_CLASSIFICATION	3.831987154039477E-5	DEFECT
// Construct key services	WITHOUT_CLASSIFICATION	0.999978188562686	WITHOUT_CLASSIFICATION	2.181143731392898E-5	DEFECT
// initialize the root of the class hierarchy completely	WITHOUT_CLASSIFICATION	0.9998846421900772	WITHOUT_CLASSIFICATION	1.1535780992272172E-4	DEFECT
// Construct the top-level execution frame and scope for the main thread	WITHOUT_CLASSIFICATION	0.9999310626943607	WITHOUT_CLASSIFICATION	6.893730563928624E-5	DEFECT
// Initialize all the core classes	WITHOUT_CLASSIFICATION	0.9999497691031234	WITHOUT_CLASSIFICATION	5.023089687660022E-5	DEFECT
// Initialize the "dummy" class used as a marker	WITHOUT_CLASSIFICATION	0.9999918103304873	WITHOUT_CLASSIFICATION	8.189669512565878E-6	DEFECT
// Initialize Kernel and include into Object	WITHOUT_CLASSIFICATION	0.9997494602205907	WITHOUT_CLASSIFICATION	2.5053977940924356E-4	DEFECT
// Object is ready, create top self	WITHOUT_CLASSIFICATION	0.9997149421690809	WITHOUT_CLASSIFICATION	2.850578309191884E-4	DEFECT
// Pre-create all the core classes potentially referenced during startup	WITHOUT_CLASSIFICATION	0.9999253025126876	WITHOUT_CLASSIFICATION	7.469748731237247E-5	DEFECT
// Math depends on all numeric types	WITHOUT_CLASSIFICATION	0.9995669045909201	WITHOUT_CLASSIFICATION	4.3309540907983824E-4	DEFECT
// depends on IO, FileTest	WITHOUT_CLASSIFICATION	0.999938501182054	WITHOUT_CLASSIFICATION	6.149881794603137E-5	DEFECT
// initialize builtin libraries	WITHOUT_CLASSIFICATION	0.9998278186742783	WITHOUT_CLASSIFICATION	1.72181325721755E-4	DEFECT
// Require in all libraries specified on command line	WITHOUT_CLASSIFICATION	0.9967881122426613	WITHOUT_CLASSIFICATION	0.003211887757338704	DEFECT
// Bootstrap the top of the hierarchy	WITHOUT_CLASSIFICATION	0.9998695284950161	WITHOUT_CLASSIFICATION	1.3047150498402232E-4	DEFECT
// we try to get the classloader that loaded JRuby, falling back on System	WITHOUT_CLASSIFICATION	0.9998262591261925	WITHOUT_CLASSIFICATION	1.737408738075209E-4	DEFECT
// determine spacing	WITHOUT_CLASSIFICATION	0.9999864929386698	WITHOUT_CLASSIFICATION	1.350706133023099E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999761907990279	WITHOUT_CLASSIFICATION	2.3809200972096234E-4	DEFECT
// For JSR 223 support: see http://scripting.java.net/	WITHOUT_CLASSIFICATION	0.999921004374843	WITHOUT_CLASSIFICATION	7.899562515705024E-5	DEFECT
// use this for JRuby-internal finalizers	WITHOUT_CLASSIFICATION	0.9997316635958948	WITHOUT_CLASSIFICATION	2.6833640410513855E-4	DEFECT
// this method is for finalizers registered via ObjectSpace	WITHOUT_CLASSIFICATION	0.9996811693527069	WITHOUT_CLASSIFICATION	3.1883064729310343E-4	DEFECT
// new factory methods ------------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999646437499763	WITHOUT_CLASSIFICATION	3.535625002373636E-5	DEFECT
//        assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9875199841159543	WITHOUT_CLASSIFICATION	0.012480015884045589	DEFECT
// Equivalent of Data_Wrap_Struct	WITHOUT_CLASSIFICATION	0.9995706658094206	WITHOUT_CLASSIFICATION	4.2933419057950456E-4	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.999962898998871	WITHOUT_CLASSIFICATION	3.710100112895556E-5	DEFECT
// ChannelDescriptors opened by sysopen are cached to avoid collection	WITHOUT_CLASSIFICATION	0.9998908310365879	WITHOUT_CLASSIFICATION	1.0916896341206847E-4	DEFECT
// Default objects	WITHOUT_CLASSIFICATION	0.999975863132754	WITHOUT_CLASSIFICATION	2.4136867245968592E-5	DEFECT
// record separator var, to speed up io ops that use it	WITHOUT_CLASSIFICATION	0.9996252967270912	WITHOUT_CLASSIFICATION	3.7470327290875727E-4	DEFECT
// former java.lang.System concepts now internalized for MVM	WITHOUT_CLASSIFICATION	0.9999280576930968	WITHOUT_CLASSIFICATION	7.194230690317437E-5	DEFECT
// Java support	WITHOUT_CLASSIFICATION	0.9999796115670162	WITHOUT_CLASSIFICATION	2.0388432983768355E-5	DEFECT
// Parser stats	WITHOUT_CLASSIFICATION	0.9999840154789573	WITHOUT_CLASSIFICATION	1.598452104270189E-5	DEFECT
// Compilation	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// can't read non-standard properties	WITHOUT_CLASSIFICATION	0.9989521375053775	WITHOUT_CLASSIFICATION	0.0010478624946224627	DEFECT
// can't create custom classloaders	WITHOUT_CLASSIFICATION	0.9995056984879955	WITHOUT_CLASSIFICATION	4.943015120045438E-4	DEFECT
// mutex that controls modifications of user-defined finalizers	WITHOUT_CLASSIFICATION	0.999663196481223	WITHOUT_CLASSIFICATION	3.3680351877692284E-4	DEFECT
// mutex that controls modifications of internal finalizers	WITHOUT_CLASSIFICATION	0.9996741941071426	WITHOUT_CLASSIFICATION	3.258058928574338E-4	DEFECT
// A thread pool to use for executing this runtime's Ruby threads	WITHOUT_CLASSIFICATION	0.9993460477496386	WITHOUT_CLASSIFICATION	6.539522503613975E-4	DEFECT
// A global object lock for class hierarchy mutations	WITHOUT_CLASSIFICATION	0.9997744746633334	WITHOUT_CLASSIFICATION	2.255253366666346E-4	DEFECT
// initial spaces // spaces before "at"	WITHOUT_CLASSIFICATION	0.9998046484130041	WITHOUT_CLASSIFICATION	1.9535158699587554E-4	DEFECT
// event name // filename // line numbers should be 1-based	WITHOUT_CLASSIFICATION	0.997299964558868	WITHOUT_CLASSIFICATION	0.0027000354411319803	DEFECT
// The method is intentionally not public, since it typically should // not be used outside of the core.	WITHOUT_CLASSIFICATION	0.9934012560700194	WITHOUT_CLASSIFICATION	0.006598743929980687	DEFECT
// Note: this field and the following static initializer // must be located be in this order!	WITHOUT_CLASSIFICATION	0.9996210423191166	WITHOUT_CLASSIFICATION	3.7895768088333335E-4	DEFECT
// Contains a list of all blocks (as Procs) that should be called when // the runtime environment exits.	WITHOUT_CLASSIFICATION	0.9993033099983974	WITHOUT_CLASSIFICATION	6.966900016025715E-4	DEFECT
// quoted-printable	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// default options	WITHOUT_CLASSIFICATION	0.9999963260554398	WITHOUT_CLASSIFICATION	3.673944560187871E-6	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// iso-2022-jp	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Shift_JIS	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// EUC-JP	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// UTF-8	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// long name option	WITHOUT_CLASSIFICATION	0.9999943620765481	WITHOUT_CLASSIFICATION	5.637923451901593E-6	DEFECT
// conversion	WITHOUT_CLASSIFICATION	0.9999840323544971	WITHOUT_CLASSIFICATION	1.5967645502922362E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999222758653632	WITHOUT_CLASSIFICATION	7.772413463671732E-5	DEFECT
// string doesn't share any resources	WITHOUT_CLASSIFICATION	0.9997838245656238	WITHOUT_CLASSIFICATION	2.1617543437632588E-4	DEFECT
// string has it's own ByteList, but it's pointing to a shared buffer (byte[])	WITHOUT_CLASSIFICATION	0.9999136080523133	WITHOUT_CLASSIFICATION	8.639194768666495E-5	DEFECT
// string doesn't have it's own ByteList (values)	WITHOUT_CLASSIFICATION	0.9995950852700503	WITHOUT_CLASSIFICATION	4.049147299497159E-4	DEFECT
// ENC_CODERANGE_ASCIIONLY	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rb_enc_str_asciionly_p	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rb_enc_str_coderange	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rb_str_hash_cmp	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Deprecated String construction routines	WITHOUT_CLASSIFICATION	0.9998816788415456	WITHOUT_CLASSIFICATION	1.18321158454483E-4	DEFECT
// String construction routines by NOT byte[] buffer and NOT making the target String shared 	WITHOUT_CLASSIFICATION	0.9999391482601105	WITHOUT_CLASSIFICATION	6.085173988957626E-5	DEFECT
/* rb_str_subseq */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// no need to assign encoding, same bytelist shared	WITHOUT_CLASSIFICATION	0.9999623714764757	WITHOUT_CLASSIFICATION	3.7628523524364674E-5	DEFECT
// if len == 0 then shared empty	WITHOUT_CLASSIFICATION	0.9999769044826207	WITHOUT_CLASSIFICATION	2.3095517379259188E-5	DEFECT
/* rb_str_cmp_m */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// we limit to int because ByteBuffer can only allocate int sizes	WITHOUT_CLASSIFICATION	0.9991276671304081	WITHOUT_CLASSIFICATION	8.723328695919583E-4	DEFECT
// // rb_str_buf_append	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// encoding doesn't have to be copied.	WITHOUT_CLASSIFICATION	0.9953956638747639	WITHOUT_CLASSIFICATION	0.004604336125236077	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9979022833992801	WITHOUT_CLASSIFICATION	0.0020977166007198986	DEFECT
// must not reallocate	WITHOUT_CLASSIFICATION	0.9996867765072318	WITHOUT_CLASSIFICATION	3.132234927681941E-4	DEFECT
// Illegal combination	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// use 1.8 impl	WITHOUT_CLASSIFICATION	0.9999836684533984	WITHOUT_CLASSIFICATION	1.6331546601604104E-5	DEFECT
/* RubyString aka rb_string_value */	WITHOUT_CLASSIFICATION	0.999829132796428	WITHOUT_CLASSIFICATION	1.7086720357198165E-4	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999933859051632	WITHOUT_CLASSIFICATION	6.614094836793125E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9997994097895458	WITHOUT_CLASSIFICATION	2.0059021045413567E-4	DEFECT
/* len + margin */	WITHOUT_CLASSIFICATION	0.9999696238360423	WITHOUT_CLASSIFICATION	3.037616395773835E-5	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999943356347879	WITHOUT_CLASSIFICATION	5.664365212122701E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999943356347879	WITHOUT_CLASSIFICATION	5.664365212122701E-6	DEFECT
/* copy pre-match substr */	WITHOUT_CLASSIFICATION	0.9999825741901442	WITHOUT_CLASSIFICATION	1.7425809855726507E-5	DEFECT
// string given	WITHOUT_CLASSIFICATION	0.9999934917962309	WITHOUT_CLASSIFICATION	6.508203769185688E-6	DEFECT
// hash given	WITHOUT_CLASSIFICATION	0.9999873325361366	WITHOUT_CLASSIFICATION	1.2667463863336423E-5	DEFECT
// This represents left most digit in a set of incremented // values?  Therefore leftmost numeric must be '1' and not '0' // 999 -> 1000, not 999 -> 0000.  whereas chars should be // zzz -> aaaa and non-alnum byte values should be "\377" -> "\001\000"	WITHOUT_CLASSIFICATION	0.8915967111409304	WITHOUT_CLASSIFICATION	0.10840328885906961	DEFECT
/* substring longer than string */	WITHOUT_CLASSIFICATION	0.9992802438927574	WITHOUT_CLASSIFICATION	7.197561072426569E-4	DEFECT
/* rb_str_substr */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999683532796143	WITHOUT_CLASSIFICATION	3.1646720385713947E-5	DEFECT
// nothing	WITHOUT_CLASSIFICATION	0.9999683532796143	WITHOUT_CLASSIFICATION	3.1646720385713947E-5	DEFECT
/* rb_str_splice */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// TODO: keep cr // TODO: rb_str_splice_0	WITHOUT_CLASSIFICATION	0.9435685989414302	WITHOUT_CLASSIFICATION	0.05643140105856983	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999886061204588	WITHOUT_CLASSIFICATION	1.139387954110555E-5	DEFECT
// keep cr ?	WITHOUT_CLASSIFICATION	0.9999886061204588	WITHOUT_CLASSIFICATION	1.139387954110555E-5	DEFECT
/* wrapped to \0...\0.  search next valid char. */	WITHOUT_CLASSIFICATION	0.9951880225469261	WITHOUT_CLASSIFICATION	0.004811977453073831	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9998849783684164	WITHOUT_CLASSIFICATION	1.150216315835418E-4	DEFECT
// only this case affects backrefs 	WITHOUT_CLASSIFICATION	0.9998849783684164	WITHOUT_CLASSIFICATION	1.150216315835418E-4	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999987567752516	WITHOUT_CLASSIFICATION	1.2432247483916428E-5	DEFECT
// modified	WITHOUT_CLASSIFICATION	0.999987567752516	WITHOUT_CLASSIFICATION	1.2432247483916428E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// QTRUE	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
/* retrieve last replacer */	WITHOUT_CLASSIFICATION	0.9999743237969674	WITHOUT_CLASSIFICATION	2.5676203032569096E-5	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999931833819405	WITHOUT_CLASSIFICATION	6.8166180594094604E-6	DEFECT
// long size * bits in byte	WITHOUT_CLASSIFICATION	0.9999933232188333	WITHOUT_CLASSIFICATION	6.676781166722896E-6	DEFECT
// from encoding, special-casing ASCII* to ASCII	WITHOUT_CLASSIFICATION	0.999293756071553	WITHOUT_CLASSIFICATION	7.062439284470408E-4	DEFECT
// to encoding, same special-casing	WITHOUT_CLASSIFICATION	0.9996724918929395	WITHOUT_CLASSIFICATION	3.2750810706050197E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999714797154874	WITHOUT_CLASSIFICATION	2.852028451253859E-5	DEFECT
// decode from "from" and encode to "to"	WITHOUT_CLASSIFICATION	0.999225686529571	WITHOUT_CLASSIFICATION	7.74313470429042E-4	DEFECT
// create a lightweight thunk	WITHOUT_CLASSIFICATION	0.9999714797154874	WITHOUT_CLASSIFICATION	2.852028451253859E-5	DEFECT
//Kernel is the only Module that doesn't need an implementor	WITHOUT_CLASSIFICATION	0.9995430708107172	WITHOUT_CLASSIFICATION	4.569291892827585E-4	DEFECT
// no binding given, use (eval)	WITHOUT_CLASSIFICATION	0.9999211049524722	WITHOUT_CLASSIFICATION	7.88950475277424E-5	DEFECT
// interned, OK for "fast" methods	WITHOUT_CLASSIFICATION	0.9998142551713349	WITHOUT_CLASSIFICATION	1.8574482866498632E-4	DEFECT
// File to be loaded by autoload has already been or is being loaded.	WITHOUT_CLASSIFICATION	0.9982419204093156	WITHOUT_CLASSIFICATION	0.0017580795906844485	DEFECT
// rb_cstr_to_dbl case	WITHOUT_CLASSIFICATION	0.9999901286348192	WITHOUT_CLASSIFICATION	9.871365180841659E-6	DEFECT
// We break if we know this sleep was explicitly woken up/interrupted	WITHOUT_CLASSIFICATION	0.9996729488631881	WITHOUT_CLASSIFICATION	3.2705113681189495E-4	DEFECT
// exec process, create IO with process	WITHOUT_CLASSIFICATION	0.9998854738405096	WITHOUT_CLASSIFICATION	1.1452615949034807E-4	DEFECT
// Zero sleeps forever	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998526645417225	WITHOUT_CLASSIFICATION	1.4733545827746688E-4	DEFECT
// Explicit zero in MRI returns immediately	WITHOUT_CLASSIFICATION	0.9994203686563452	WITHOUT_CLASSIFICATION	5.79631343654681E-4	DEFECT
// Spurious wakeup-loop	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// adjusts paths started with '/' or '\\', on windows.	WITHOUT_CLASSIFICATION	0.9998956415650282	WITHOUT_CLASSIFICATION	1.0435843497186885E-4	DEFECT
// file not given	WITHOUT_CLASSIFICATION	0.9999010392527329	WITHOUT_CLASSIFICATION	9.896074726721274E-5	DEFECT
// string to eval	WITHOUT_CLASSIFICATION	0.9999789562704795	WITHOUT_CLASSIFICATION	2.1043729520404177E-5	DEFECT
// binding given, use binding's file	WITHOUT_CLASSIFICATION	0.9998972233198634	WITHOUT_CLASSIFICATION	1.027766801365763E-4	DEFECT
// ?g  | boolean | True if file1 has the \CF{setgid} bit	WITHOUT_CLASSIFICATION	0.9999678813719737	WITHOUT_CLASSIFICATION	3.211862802631814E-5	DEFECT
// bomb out, it's not a binding or a proc	WITHOUT_CLASSIFICATION	0.9972145537343787	WITHOUT_CLASSIFICATION	0.0027854462656212763	DEFECT
// Ordering of array traversal not important, just intuitive	WITHOUT_CLASSIFICATION	0.9960308722350224	WITHOUT_CLASSIFICATION	0.003969127764977633	DEFECT
//Catch active, throw for catch to handle	WITHOUT_CLASSIFICATION	0.9910513217821473	WITHOUT_CLASSIFICATION	0.008948678217852727	DEFECT
// No catch active for this throw	WITHOUT_CLASSIFICATION	0.9992475024097598	WITHOUT_CLASSIFICATION	7.524975902401226E-4	DEFECT
// without full tracing, many events will not fire	WITHOUT_CLASSIFICATION	0.9353509051917842	WITHOUT_CLASSIFICATION	0.06464909480821569	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9987371350880024	WITHOUT_CLASSIFICATION	0.0012628649119976374	DEFECT
// MRI behavior: use first byte of string value if len > 0	WITHOUT_CLASSIFICATION	0.9997857513825521	WITHOUT_CLASSIFICATION	2.142486174479263E-4	DEFECT
// MRI behavior: now check arg count	WITHOUT_CLASSIFICATION	0.9999787562865163	WITHOUT_CLASSIFICATION	2.1243713483737328E-5	DEFECT
// ?A  | Time    | Last access time for file1	WITHOUT_CLASSIFICATION	0.9996886282704663	WITHOUT_CLASSIFICATION	3.113717295335751E-4	DEFECT
// ?b  | boolean | True if file1 is a block device	WITHOUT_CLASSIFICATION	0.9999061867177085	WITHOUT_CLASSIFICATION	9.381328229152176E-5	DEFECT
// ?c  | boolean | True if file1 is a character device	WITHOUT_CLASSIFICATION	0.9998685634880929	WITHOUT_CLASSIFICATION	1.3143651190698104E-4	DEFECT
// ?C  | Time    | Last change time for file1	WITHOUT_CLASSIFICATION	0.9998994371478109	WITHOUT_CLASSIFICATION	1.0056285218908806E-4	DEFECT
// ?d  | boolean | True if file1 exists and is a directory	WITHOUT_CLASSIFICATION	0.9999370776453538	WITHOUT_CLASSIFICATION	6.292235464625758E-5	DEFECT
// ?e  | boolean | True if file1 exists	WITHOUT_CLASSIFICATION	0.999914796764163	WITHOUT_CLASSIFICATION	8.52032358370402E-5	DEFECT
// ?f  | boolean | True if file1 exists and is a regular file	WITHOUT_CLASSIFICATION	0.9998814276078599	WITHOUT_CLASSIFICATION	1.1857239214006412E-4	DEFECT
// ?G  | boolean | True if file1 exists and has a group ownership equal to the caller's group	WITHOUT_CLASSIFICATION	0.9999420996793332	WITHOUT_CLASSIFICATION	5.790032066672775E-5	DEFECT
// ?k  | boolean | True if file1 exists and has the sticky bit set	WITHOUT_CLASSIFICATION	0.999987171123894	WITHOUT_CLASSIFICATION	1.2828876105956355E-5	DEFECT
// ?M  | Time    | Last modification time for file1	WITHOUT_CLASSIFICATION	0.9991270405504029	WITHOUT_CLASSIFICATION	8.729594495970991E-4	DEFECT
// ?o  | boolean | True if file1 exists and is owned by the caller's effective uid	WITHOUT_CLASSIFICATION	0.9998949295812045	WITHOUT_CLASSIFICATION	1.0507041879537947E-4	DEFECT
// ?O  | boolean | True if file1 exists and is owned by the caller's real uid 	WITHOUT_CLASSIFICATION	0.9998996988833082	WITHOUT_CLASSIFICATION	1.0030111669170041E-4	DEFECT
// ?p  | boolean | True if file1 exists and is a fifo	WITHOUT_CLASSIFICATION	0.9997926567382219	WITHOUT_CLASSIFICATION	2.0734326177804612E-4	DEFECT
// ?r  | boolean | True if file1 is readable by the effective uid/gid of the caller	WITHOUT_CLASSIFICATION	0.9997322579591068	WITHOUT_CLASSIFICATION	2.6774204089322653E-4	DEFECT
// ?s  | int/nil | If file1 has nonzero size, return the size, otherwise nil	WITHOUT_CLASSIFICATION	0.9999682016980127	WITHOUT_CLASSIFICATION	3.1798301987352655E-5	DEFECT
// ?S  | boolean | True if file1 exists and is a socket	WITHOUT_CLASSIFICATION	0.9997926567382219	WITHOUT_CLASSIFICATION	2.0734326177804612E-4	DEFECT
// ?u  | boolean | True if file1 has the setuid bit set	WITHOUT_CLASSIFICATION	0.9999869347302098	WITHOUT_CLASSIFICATION	1.3065269790055647E-5	DEFECT
// ?x  | boolean | True if file1 exists and is executable by the effective uid/gid	WITHOUT_CLASSIFICATION	0.999890195474773	WITHOUT_CLASSIFICATION	1.0980452522702391E-4	DEFECT
// ?X  | boolean | True if file1 exists and is executable by the real uid/gid	WITHOUT_CLASSIFICATION	0.9998951796424601	WITHOUT_CLASSIFICATION	1.04820357539869E-4	DEFECT
// ?z  | boolean | True if file1 exists and has a zero length	WITHOUT_CLASSIFICATION	0.999913136910145	WITHOUT_CLASSIFICATION	8.686308985493268E-5	DEFECT
// ?=  | boolean | True if the modification times of file1 and file2 are equal	WITHOUT_CLASSIFICATION	0.9999392115081428	WITHOUT_CLASSIFICATION	6.078849185718344E-5	DEFECT
// ?<  | boolean | True if the modification time of file1 is prior to that of file2	WITHOUT_CLASSIFICATION	0.999151860094883	WITHOUT_CLASSIFICATION	8.481399051169524E-4	DEFECT
// ?>  | boolean | True if the modification time of file1 is after that of file2	WITHOUT_CLASSIFICATION	0.999778568242429	WITHOUT_CLASSIFICATION	2.2143175757086977E-4	DEFECT
// ?-  | boolean | True if file1 and file2 are identical	WITHOUT_CLASSIFICATION	0.9999668674361261	WITHOUT_CLASSIFICATION	3.313256387395108E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9997346233771646	WITHOUT_CLASSIFICATION	2.6537662283548523E-4	DEFECT
// Error info is per-thread	WITHOUT_CLASSIFICATION	0.9999595217651407	WITHOUT_CLASSIFICATION	4.047823485925487E-5	DEFECT
// init errorInfo to nil	WITHOUT_CLASSIFICATION	0.9999426898278148	WITHOUT_CLASSIFICATION	5.7310172185257194E-5	DEFECT
// if we're already aborting, we can receive no further mail	WITHOUT_CLASSIFICATION	0.9999668667833751	WITHOUT_CLASSIFICATION	3.313321662484414E-5	DEFECT
// If this thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9996378628377738	WITHOUT_CLASSIFICATION	3.621371622262226E-4	DEFECT
// new interrupt, to hopefully wake it out of any blocking IO	WITHOUT_CLASSIFICATION	0.9997821603555247	WITHOUT_CLASSIFICATION	2.1783964447540674E-4	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999967182577997	WITHOUT_CLASSIFICATION	3.281742200238233E-6	DEFECT
// set to default thread group	WITHOUT_CLASSIFICATION	0.9999967182577997	WITHOUT_CLASSIFICATION	3.281742200238233E-6	DEFECT
// JRUBY-2380, associate future early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.99988156717096	WITHOUT_CLASSIFICATION	1.1843282903993548E-4	DEFECT
// JRUBY-2380, associate thread early so it shows up in Thread.list right away, in case it doesn't run immediately	WITHOUT_CLASSIFICATION	0.9998860055203727	WITHOUT_CLASSIFICATION	1.1399447962725998E-4	DEFECT
// for Thread::start, which does not call the subclass's initialize	WITHOUT_CLASSIFICATION	0.9972778231480602	WITHOUT_CLASSIFICATION	0.0027221768519396427	DEFECT
// JRUBY-3568, inherit threadgroup or use default	WITHOUT_CLASSIFICATION	0.9999559384797103	WITHOUT_CLASSIFICATION	4.406152028958277E-5	DEFECT
// MRI behavior: value given in seconds; converted to Float; less // than or equal to zero returns immediately; returns nil	WITHOUT_CLASSIFICATION	0.9939965034432233	WITHOUT_CLASSIFICATION	0.006003496556776715	DEFECT
// If the target thread is sleeping or stopped, wake it	WITHOUT_CLASSIFICATION	0.9999317088512235	WITHOUT_CLASSIFICATION	6.829114877649465E-5	DEFECT
// We need this loop in order to be able to "unblock" the // join call without actually calling interrupt.	WITHOUT_CLASSIFICATION	0.9994991876705898	WITHOUT_CLASSIFICATION	5.008123294102444E-4	DEFECT
// attempt to decriticalize all if we're the critical thread	WITHOUT_CLASSIFICATION	0.9999175105886408	WITHOUT_CLASSIFICATION	8.24894113593117E-5	DEFECT
// not valid for "dead" state	WITHOUT_CLASSIFICATION	0.9997285934693783	WITHOUT_CLASSIFICATION	2.714065306217824E-4	DEFECT
// If the killee thread is the same as the killer thread, just die	WITHOUT_CLASSIFICATION	0.9999773589083453	WITHOUT_CLASSIFICATION	2.2641091654759265E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999631372887714	WITHOUT_CLASSIFICATION	3.686271122856838E-5	DEFECT
// check for thread events, in case we've been woken up to die	WITHOUT_CLASSIFICATION	0.9999631372887714	WITHOUT_CLASSIFICATION	3.686271122856838E-5	DEFECT
// ignore; I don't like doing it, but it seems like we // really just need to make all channels non-blocking by // default and use select when implementing blocking ops, // so if this remains set non-blocking, perhaps it's not // such a big deal...	WITHOUT_CLASSIFICATION	0.9999476626494551	WITHOUT_CLASSIFICATION	5.233735054492841E-5	DEFECT
// can't select, just have to do a blocking call	WITHOUT_CLASSIFICATION	0.9997421239352865	WITHOUT_CLASSIFICATION	2.5787606471354776E-4	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998409076974507	WITHOUT_CLASSIFICATION	1.5909230254929774E-4	DEFECT
// Create Constants class	WITHOUT_CLASSIFICATION	0.999994194760032	WITHOUT_CLASSIFICATION	5.805239968046076E-6	DEFECT
// Create constants for open flags	WITHOUT_CLASSIFICATION	0.999917148097096	WITHOUT_CLASSIFICATION	8.285190290398522E-5	DEFECT
// Strip off the O_ prefix, so they become File::RDONLY, and so on	WITHOUT_CLASSIFICATION	0.999992400572145	WITHOUT_CLASSIFICATION	7.599427854997831E-6	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999852822397638	WITHOUT_CLASSIFICATION	1.4717760236204454E-5	DEFECT
// File::Constants module is included in IO.	WITHOUT_CLASSIFICATION	0.9995049730337164	WITHOUT_CLASSIFICATION	4.950269662835495E-4	DEFECT
// Make sure any existing lock is released before we try and close the file	WITHOUT_CLASSIFICATION	0.9999735214758565	WITHOUT_CLASSIFICATION	2.6478524143563546E-5	DEFECT
// null channel always succeeds for all locking operations	WITHOUT_CLASSIFICATION	0.9992319865082473	WITHOUT_CLASSIFICATION	7.680134917526897E-4	DEFECT
// Paths which end in "/" or "\\" must be stripped off.	WITHOUT_CLASSIFICATION	0.9986565886519977	WITHOUT_CLASSIFICATION	0.0013434113480022777	DEFECT
// Special case for handling ACCMODE, since constantine will generate // an invalid value if it is not defined by the platform.	WITHOUT_CLASSIFICATION	0.9993102671317825	WITHOUT_CLASSIFICATION	6.897328682175326E-4	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999922119963599	WITHOUT_CLASSIFICATION	7.788003640019781E-6	DEFECT
// Return false here	WITHOUT_CLASSIFICATION	0.9999922119963599	WITHOUT_CLASSIFICATION	7.788003640019781E-6	DEFECT
// We're not actually a real file, so we can't flock	WITHOUT_CLASSIFICATION	0.9973735921167541	WITHOUT_CLASSIFICATION	0.002626407883245905	DEFECT
// Should we do anything?	WITHOUT_CLASSIFICATION	0.9999983866389776	WITHOUT_CLASSIFICATION	1.6133610224929937E-6	DEFECT
/* File class methods */	WITHOUT_CLASSIFICATION	0.9999946392585751	WITHOUT_CLASSIFICATION	5.360741424863776E-6	DEFECT
// MRI-compatible basename handling for windows drive letter paths	WITHOUT_CLASSIFICATION	0.9997307982740096	WITHOUT_CLASSIFICATION	2.692017259904295E-4	DEFECT
// strip c: away from relative-pathed name	WITHOUT_CLASSIFICATION	0.9998325192946104	WITHOUT_CLASSIFICATION	1.6748070538962422E-4	DEFECT
// C:\ is returned unchanged	WITHOUT_CLASSIFICATION	0.9999652328238731	WITHOUT_CLASSIFICATION	3.4767176126957495E-5	DEFECT
// -1 no match; 0 it is dot file not extension	WITHOUT_CLASSIFICATION	0.9986002006463219	WITHOUT_CLASSIFICATION	0.001399799353678149	DEFECT
// trim trailing slashes	WITHOUT_CLASSIFICATION	0.9999779521388361	WITHOUT_CLASSIFICATION	2.2047861163903107E-5	DEFECT
// Dot is not at beginning and not at end of filename. 	WITHOUT_CLASSIFICATION	0.9795592510049952	WITHOUT_CLASSIFICATION	0.0204407489950048	DEFECT
// Handle ~user paths 	WITHOUT_CLASSIFICATION	0.9999784039514444	WITHOUT_CLASSIFICATION	2.159604855560325E-5	DEFECT
// compensate for missing slash after drive letter on windows	WITHOUT_CLASSIFICATION	0.9998409076974507	WITHOUT_CLASSIFICATION	1.5909230254929774E-4	DEFECT
// Include additional path separator // (so that dirname of "C:\file.txt" is  "C:\", not "C:")	WITHOUT_CLASSIFICATION	0.9924477913952594	WITHOUT_CLASSIFICATION	0.007552208604740578	DEFECT
// FNFException can be thrown in both cases, when the file // is not found, or when permission is denied.	WITHOUT_CLASSIFICATION	0.9892358283417607	WITHOUT_CLASSIFICATION	0.010764171658239195	DEFECT
// No directory delimeter.  Rest of string is username	WITHOUT_CLASSIFICATION	0.9997918415404199	WITHOUT_CLASSIFICATION	2.0815845958001658E-4	DEFECT
// If there's a second argument, it's the path to which the first  // argument is relative.	WITHOUT_CLASSIFICATION	0.9998317615023024	WITHOUT_CLASSIFICATION	1.6823849769769875E-4	DEFECT
// Handle ~user paths.	WITHOUT_CLASSIFICATION	0.9999783727229064	WITHOUT_CLASSIFICATION	2.1627277093642165E-5	DEFECT
// If there's no second argument, simply use the working directory  // of the runtime.	WITHOUT_CLASSIFICATION	0.9998702131630064	WITHOUT_CLASSIFICATION	1.2978683699366075E-4	DEFECT
// Find out which string to check.	WITHOUT_CLASSIFICATION	0.9999263838376273	WITHOUT_CLASSIFICATION	7.361616237266145E-5	DEFECT
// Single '~' as whole path to expand	WITHOUT_CLASSIFICATION	0.9990624767974458	WITHOUT_CLASSIFICATION	9.375232025542797E-4	DEFECT
// Count number of extra slashes in the beginning of the string.	WITHOUT_CLASSIFICATION	0.9987291594608501	WITHOUT_CLASSIFICATION	0.001270840539149932	DEFECT
// '~user/...' as path to expand	WITHOUT_CLASSIFICATION	0.9991828951985006	WITHOUT_CLASSIFICATION	8.171048014993856E-4	DEFECT
// '~/...' as path to expand	WITHOUT_CLASSIFICATION	0.9998973055245036	WITHOUT_CLASSIFICATION	1.0269447549637032E-4	DEFECT
// Prepare a string with the same number of redundant slashes so that  // we easily can prepend it to the result.	WITHOUT_CLASSIFICATION	0.9997175677487368	WITHOUT_CLASSIFICATION	2.8243225126323455E-4	DEFECT
// If there are N slashes, then we want N-1.	WITHOUT_CLASSIFICATION	0.9999823544394114	WITHOUT_CLASSIFICATION	1.7645560588586095E-5	DEFECT
// no canonical path yet or length is zero, and we have a / followed by a dot...	WITHOUT_CLASSIFICATION	0.9984321130456687	WITHOUT_CLASSIFICATION	0.0015678869543313556	DEFECT
// we don't have another slash after this, so replace /. with /	WITHOUT_CLASSIFICATION	0.9999433269062401	WITHOUT_CLASSIFICATION	5.667309375982464E-5	DEFECT
// we do have another slash; omit both / and . (JRUBY-1606)	WITHOUT_CLASSIFICATION	0.9998646161513652	WITHOUT_CLASSIFICATION	1.3538384863467817E-4	DEFECT
// do nothing, we should not delete the drive letter	WITHOUT_CLASSIFICATION	0.9993822903645818	WITHOUT_CLASSIFICATION	6.177096354182582E-4	DEFECT
/* rb: check_modifiable */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
/* rb: readable */	WITHOUT_CLASSIFICATION	0.9999846126434407	WITHOUT_CLASSIFICATION	1.5387356559313545E-5	DEFECT
// rename is successful	WITHOUT_CLASSIFICATION	0.9999584960979268	WITHOUT_CLASSIFICATION	4.150390207330193E-5	DEFECT
// rename via Java API call wasn't successful, let's try some tricks, similar to MRI 	WITHOUT_CLASSIFICATION	0.9999535671096389	WITHOUT_CLASSIFICATION	4.643289036118114E-5	DEFECT
// try to rename one more time	WITHOUT_CLASSIFICATION	0.9999838666334856	WITHOUT_CLASSIFICATION	1.6133366514412823E-5	DEFECT
// Can we produce IOError which bypasses a close?	WITHOUT_CLASSIFICATION	0.9999061528559346	WITHOUT_CLASSIFICATION	9.384714406532896E-5	DEFECT
// Fast path since JNA stat is about 10x slower than this	WITHOUT_CLASSIFICATION	0.9997668707240822	WITHOUT_CLASSIFICATION	2.331292759178019E-4	DEFECT
// RubyContinuation	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/*     *  Constructor for internal usage (mainly for Array#|, Array#&, Array#- and Array#uniq)     *  it doesn't initialize ifNone field     */	WITHOUT_CLASSIFICATION	0.9998168262381373	WITHOUT_CLASSIFICATION	1.8317376186277327E-4	DEFECT
// 16 ?	WITHOUT_CLASSIFICATION	0.99995516509781	WITHOUT_CLASSIFICATION	4.4834902189848454E-5	DEFECT
// generation count for O(1) clears	WITHOUT_CLASSIFICATION	0.9995509773633995	WITHOUT_CLASSIFICATION	4.490226366005135E-4	DEFECT
// size + 1;	WITHOUT_CLASSIFICATION	0.9999803187679561	WITHOUT_CLASSIFICATION	1.968123204394924E-5	DEFECT
// suboptimal for large hashes (> 1073741824 + 85 entries) not very likely to happen	WITHOUT_CLASSIFICATION	0.9774495364677359	WITHOUT_CLASSIFICATION	0.022550463532264028	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// ------------------------------	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// put implementation	WITHOUT_CLASSIFICATION	0.9999835983375852	WITHOUT_CLASSIFICATION	1.6401662414819412E-5	DEFECT
// get implementation	WITHOUT_CLASSIFICATION	0.9999803176934573	WITHOUT_CLASSIFICATION	1.9682306542748754E-5	DEFECT
// specialized for value	WITHOUT_CLASSIFICATION	0.9998820362212315	WITHOUT_CLASSIFICATION	1.1796377876843354E-4	DEFECT
// delete implementation	WITHOUT_CLASSIFICATION	0.9999845603627849	WITHOUT_CLASSIFICATION	1.5439637215108474E-5	DEFECT
// n.b. we need to recompute the hash in case the key object was modified	WITHOUT_CLASSIFICATION	0.9999506751095134	WITHOUT_CLASSIFICATION	4.9324890486695786E-5	DEFECT
/* ============================     * End of hash internals     * ============================     */	WITHOUT_CLASSIFICATION	0.9998274531891868	WITHOUT_CLASSIFICATION	1.725468108132697E-4	DEFECT
/*  ================     *  Instance Methods     *  ================     */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
// update the hash value	WITHOUT_CLASSIFICATION	0.999989059360669	WITHOUT_CLASSIFICATION	1.0940639331054608E-5	DEFECT
// other hash does not contain key	WITHOUT_CLASSIFICATION	0.9966572646199883	WITHOUT_CLASSIFICATION	0.003342735380011781	DEFECT
// rb_yield_values(2,...) equivalent	WITHOUT_CLASSIFICATION	0.9998421323621361	WITHOUT_CLASSIFICATION	1.5786763786378597E-4	DEFECT
// Satisfy java.util.Set interface (for Java integration)	WITHOUT_CLASSIFICATION	0.9999433704805959	WITHOUT_CLASSIFICATION	5.6629519404087146E-5	DEFECT
// remain where we are	WITHOUT_CLASSIFICATION	0.9999962778624752	WITHOUT_CLASSIFICATION	3.7221375248456536E-6	DEFECT
// We use file test since it is faster than a stat; also euid == uid in Java always	WITHOUT_CLASSIFICATION	0.997779850608319	WITHOUT_CLASSIFICATION	0.0022201493916810173	DEFECT
// default: don't retain	WITHOUT_CLASSIFICATION	0.999962898998871	WITHOUT_CLASSIFICATION	3.710100112895556E-5	DEFECT
// once hasNext has been called, we commit to next() returning // the entry it found, even if it were subsequently deleted	WITHOUT_CLASSIFICATION	0.9997964013892522	WITHOUT_CLASSIFICATION	2.0359861074785717E-4	DEFECT
// Not exposed by filetest, but so similiar in nature that it is stored here	WITHOUT_CLASSIFICATION	0.9997938986975596	WITHOUT_CLASSIFICATION	2.0610130244028648E-4	DEFECT
// We do both writable and writable_real through the same method because // in our java process effective and real userid will always be the same.	WITHOUT_CLASSIFICATION	0.9979937106633762	WITHOUT_CLASSIFICATION	0.00200628933662386	DEFECT
// first try as directory	WITHOUT_CLASSIFICATION	0.9999985102437909	WITHOUT_CLASSIFICATION	1.489756209040316E-6	DEFECT
// next as regular file	WITHOUT_CLASSIFICATION	0.9999423647979464	WITHOUT_CLASSIFICATION	5.76352020535381E-5	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.995109806114806	WITHOUT_CLASSIFICATION	0.004890193885193999	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// NIO-based	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Stream-based	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// special constructor that accepts stream, not channel	WITHOUT_CLASSIFICATION	0.9994788896793805	WITHOUT_CLASSIFICATION	5.211103206195398E-4	DEFECT
/*     * We use FILE versus IO to match T_FILE in MRI.     */	WITHOUT_CLASSIFICATION	0.9976091767038744	WITHOUT_CLASSIFICATION	0.00239082329612561	DEFECT
// Constants for seek	WITHOUT_CLASSIFICATION	0.9999633634568311	WITHOUT_CLASSIFICATION	3.6636543168896166E-5	DEFECT
// confirm we're not reopening self's channel	WITHOUT_CLASSIFICATION	0.9979284785570719	WITHOUT_CLASSIFICATION	0.00207152144292815	DEFECT
// check if we're a stdio IO, and ensure we're not badly mutilated	WITHOUT_CLASSIFICATION	0.9995147657782207	WITHOUT_CLASSIFICATION	4.852342217792911E-4	DEFECT
// dup2 new fd into self to preserve fileno and references to it	WITHOUT_CLASSIFICATION	0.9997908464254487	WITHOUT_CLASSIFICATION	2.0915357455119938E-4	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999971817484963	WITHOUT_CLASSIFICATION	2.8182515038308916E-6	DEFECT
// re-register the descriptor	WITHOUT_CLASSIFICATION	0.9999901174031284	WITHOUT_CLASSIFICATION	9.882596871694618E-6	DEFECT
// since we're not actually duping the incoming channel into our handler, we need to // copy the original sync behavior from the other handler	WITHOUT_CLASSIFICATION	0.9997258559186244	WITHOUT_CLASSIFICATION	2.7414408137566015E-4	DEFECT
// re-register	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// A potentially previously close IO is being 'reopened'.	WITHOUT_CLASSIFICATION	0.9990452462311811	WITHOUT_CLASSIFICATION	9.547537688190474E-4	DEFECT
/*     * Ensure that separator is valid otherwise give it the default paragraph separator.     */	WITHOUT_CLASSIFICATION	0.9999871877107086	WITHOUT_CLASSIFICATION	1.2812289291463169E-5	DEFECT
// loop until we see the nth separator char	WITHOUT_CLASSIFICATION	0.999922763963899	WITHOUT_CLASSIFICATION	7.723603610091588E-5	DEFECT
// if we hit EOF or reached limit then we're done	WITHOUT_CLASSIFICATION	0.9999523489275398	WITHOUT_CLASSIFICATION	4.76510724600857E-5	DEFECT
// this is for a range check, near as I can tell	WITHOUT_CLASSIFICATION	0.9997897762029769	WITHOUT_CLASSIFICATION	2.102237970231427E-4	DEFECT
// IO class methods.	WITHOUT_CLASSIFICATION	0.9999938049164466	WITHOUT_CLASSIFICATION	6.195083553382035E-6	DEFECT
// use original modes	WITHOUT_CLASSIFICATION	0.9999808422333172	WITHOUT_CLASSIFICATION	1.9157766682862267E-5	DEFECT
// See if we already have this descriptor open. // If so then we can mostly share the handler (keep open // file, but possibly change the mode).	WITHOUT_CLASSIFICATION	0.9999990771373586	WITHOUT_CLASSIFICATION	9.228626414319378E-7	DEFECT
// redundant, done above as well	WITHOUT_CLASSIFICATION	0.9998869874800285	WITHOUT_CLASSIFICATION	1.1301251997154615E-4	DEFECT
// MRI behavior: swallow StandardErorrs	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// -1 == don't set permissions	WITHOUT_CLASSIFICATION	0.9999870501109783	WITHOUT_CLASSIFICATION	1.2949889021645928E-5	DEFECT
// isRetained=true	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// This appears to be some windows-only mode.  On a java platform this is a no-op	WITHOUT_CLASSIFICATION	0.9657683914552675	WITHOUT_CLASSIFICATION	0.03423160854473264	DEFECT
// if not sync, we switch to write buffered mode	WITHOUT_CLASSIFICATION	0.9945126775739814	WITHOUT_CLASSIFICATION	0.005487322426018522	DEFECT
/*     * Throw bad file descriptor is we can not read on supplied descriptor.     */	WITHOUT_CLASSIFICATION	0.9990356486736235	WITHOUT_CLASSIFICATION	9.643513263766206E-4	DEFECT
//Everything written	WITHOUT_CLASSIFICATION	0.9999112519855025	WITHOUT_CLASSIFICATION	8.874801449754059E-5	DEFECT
//            return len - n;	WITHOUT_CLASSIFICATION	0.9999811670440538	WITHOUT_CLASSIFICATION	1.8832955946266317E-5	DEFECT
// Claims conversion is done via 'to_s' in docs.	WITHOUT_CLASSIFICATION	0.9995037095635176	WITHOUT_CLASSIFICATION	4.962904364824229E-4	DEFECT
// Of course this isn't particularly useful.	WITHOUT_CLASSIFICATION	0.999726762048861	WITHOUT_CLASSIFICATION	2.732379511389635E-4	DEFECT
// Must be back on first line on rewind.	WITHOUT_CLASSIFICATION	0.998053966647221	WITHOUT_CLASSIFICATION	0.001946033352779009	DEFECT
// Register the new descriptor	WITHOUT_CLASSIFICATION	0.9999969499411365	WITHOUT_CLASSIFICATION	3.05005886353746E-6	DEFECT
// cleanup, raising errors if any	WITHOUT_CLASSIFICATION	0.9999103002306987	WITHOUT_CLASSIFICATION	8.969976930123728E-5	DEFECT
// hmmmm	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// I believe Ruby bails out with a "bug" if closing fails	WITHOUT_CLASSIFICATION	0.9999628729702716	WITHOUT_CLASSIFICATION	3.712702972841812E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec. // And why the hell does webrick pass this in as a first argument!!!!!	WITHOUT_CLASSIFICATION	0.9999065963074222	WITHOUT_CLASSIFICATION	9.340369257792344E-5	DEFECT
// Do nothing.  FD_CLOEXEC has no meaning in JVM since we cannot really exec.	WITHOUT_CLASSIFICATION	0.9999403390778333	WITHOUT_CLASSIFICATION	5.9660922166675386E-5	DEFECT
// Length to read	WITHOUT_CLASSIFICATION	0.9999610941408087	WITHOUT_CLASSIFICATION	3.890585919127142E-5	DEFECT
// String/Buffer to read it into	WITHOUT_CLASSIFICATION	0.9993057928245415	WITHOUT_CLASSIFICATION	6.942071754585197E-4	DEFECT
// cryptic for the uninitiated...	WITHOUT_CLASSIFICATION	0.9998699887424989	WITHOUT_CLASSIFICATION	1.3001125750107013E-4	DEFECT
// select until read is ready	WITHOUT_CLASSIFICATION	0.9999423358184536	WITHOUT_CLASSIFICATION	5.766418154650868E-5	DEFECT
//        ByteList buffer = null;	WITHOUT_CLASSIFICATION	0.9989693058337824	WITHOUT_CLASSIFICATION	0.001030694166217611	DEFECT
//            buffer = str.getByteList();	WITHOUT_CLASSIFICATION	0.9989423173509137	WITHOUT_CLASSIFICATION	0.0010576826490864288	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999655395339688	WITHOUT_CLASSIFICATION	3.4460466031225666E-5	DEFECT
/* rb: writable */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// READ_CHECK from MRI io.c	WITHOUT_CLASSIFICATION	0.9999655395339688	WITHOUT_CLASSIFICATION	3.4460466031225666E-5	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997944073779381	WITHOUT_CLASSIFICATION	2.0559262206187325E-4	DEFECT
// TODO: read into buffer using all the fread logic //        int read = openFile.getMainStream().fread(buffer);	WITHOUT_CLASSIFICATION	0.7745178953727848	WITHOUT_CLASSIFICATION	0.22548210462721513	DEFECT
// truncate buffer string to zero, if provided	WITHOUT_CLASSIFICATION	0.9997127246928267	WITHOUT_CLASSIFICATION	2.87275307173366E-4	DEFECT
// TODO: READ_CHECK from MRI	WITHOUT_CLASSIFICATION	0.9854237805412394	WITHOUT_CLASSIFICATION	0.01457621945876069	DEFECT
/* class methods for IO */	WITHOUT_CLASSIFICATION	0.9999911381153321	WITHOUT_CLASSIFICATION	8.861884667872769E-6	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999786727986413	WITHOUT_CLASSIFICATION	2.1327201358641398E-5	DEFECT
// write	WITHOUT_CLASSIFICATION	0.9999588256665605	WITHOUT_CLASSIFICATION	4.117433343953248E-5	DEFECT
// Java's select doesn't do anything about this, so we leave it be.	WITHOUT_CLASSIFICATION	0.9999292266966548	WITHOUT_CLASSIFICATION	7.077330334511619E-5	DEFECT
// make all sockets blocking as configured again // close unregisters all channels, so we can safely reset blocking modes	WITHOUT_CLASSIFICATION	0.9999440394793615	WITHOUT_CLASSIFICATION	5.5960520638374745E-5	DEFECT
// FIXME: process options	WITHOUT_CLASSIFICATION	0.999523514218415	WITHOUT_CLASSIFICATION	4.764857815849704E-4	DEFECT
// Enebo: annotation processing forced me to do pangea method here...	WITHOUT_CLASSIFICATION	0.9998698948513172	WITHOUT_CLASSIFICATION	1.3010514868280735E-4	DEFECT
// NIO based pipe	WITHOUT_CLASSIFICATION	0.9999890244867159	WITHOUT_CLASSIFICATION	1.0975513283974927E-5	DEFECT
// not using remove(Object) here to avoid the equals() call	WITHOUT_CLASSIFICATION	0.9989460388120172	WITHOUT_CLASSIFICATION	0.0010539611879828424	DEFECT
// raise will also wake the thread from selection	WITHOUT_CLASSIFICATION	0.9999016942252607	WITHOUT_CLASSIFICATION	9.83057747393104E-5	DEFECT
/* may need to handle ENC_CODERANGE_BROKEN */	WITHOUT_CLASSIFICATION	0.9999646378170791	WITHOUT_CLASSIFICATION	3.536218292083999E-5	DEFECT
// TODO: rb_usascii_str_new2	WITHOUT_CLASSIFICATION	0.9905201112226323	WITHOUT_CLASSIFICATION	0.009479888777367789	DEFECT
// If we know what method was being called, strip everything // before the call. This hides the JRuby and reflection internals.	WITHOUT_CLASSIFICATION	0.9978543735862282	WITHOUT_CLASSIFICATION	0.0021456264137718717	DEFECT
// The class of this object	WITHOUT_CLASSIFICATION	0.9999664236675023	WITHOUT_CLASSIFICATION	3.35763324976721E-5	DEFECT
// zeroed by jvm	WITHOUT_CLASSIFICATION	0.9999787015137366	WITHOUT_CLASSIFICATION	2.129848626344706E-5	DEFECT
//objectClass.defineAnnotatedMethods(BasicObjectMethods.class);	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// JRUBY-4113: callers should not call setTaint on immediate objects	WITHOUT_CLASSIFICATION	0.9937554699802936	WITHOUT_CLASSIFICATION	0.006244530019706352	DEFECT
// rb_class_boot	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
// 1.9 rb_check_to_integer	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// for interface impls	WITHOUT_CLASSIFICATION	0.9999731495821018	WITHOUT_CLASSIFICATION	2.6850417898218822E-5	DEFECT
// We're cloning ourselves, so we know the result should be a RubyObject	WITHOUT_CLASSIFICATION	0.9999039057372798	WITHOUT_CLASSIFICATION	9.609426272019536E-5	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998924869640635	WITHOUT_CLASSIFICATION	1.0751303593643692E-4	DEFECT
// can't use -v and stdin	WITHOUT_CLASSIFICATION	0.9999241740169234	WITHOUT_CLASSIFICATION	7.582598307660551E-5	DEFECT
// include its parent (and in turn that module's parents)	WITHOUT_CLASSIFICATION	0.9996859105454139	WITHOUT_CLASSIFICATION	3.1408945458609726E-4	DEFECT
// Equivalent of Data_Get_Struct // This will first check that the object in question is actually a T_DATA equivalent.	WITHOUT_CLASSIFICATION	0.9960603818591169	WITHOUT_CLASSIFICATION	0.003939618140883158	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// // INSTANCE VARIABLE API METHODS //	WITHOUT_CLASSIFICATION	0.9998448967174275	WITHOUT_CLASSIFICATION	1.5510328257242457E-4	DEFECT
// Struct methods	WITHOUT_CLASSIFICATION	0.9999897133834337	WITHOUT_CLASSIFICATION	1.0286616566297492E-5	DEFECT
//runtime.getWarnings().warn(ID.STRUCT_CONSTANT_REDEFINED, frame.getFile(), frame.getLine(), "redefining constant Struct::" + name, name);	WITHOUT_CLASSIFICATION	0.9975067611597819	WITHOUT_CLASSIFICATION	0.002493238840218236	DEFECT
// define access methods.	WITHOUT_CLASSIFICATION	0.9999929117249218	WITHOUT_CLASSIFICATION	7.088275078260459E-6	DEFECT
// if we are storing a name as well, index is one too high for values	WITHOUT_CLASSIFICATION	0.9999826663952305	WITHOUT_CLASSIFICATION	1.7333604769442822E-5	DEFECT
// Struct bodies should be public by default, so set block visibility to public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9998334027867675	WITHOUT_CLASSIFICATION	1.6659721323261553E-4	DEFECT
// For binding purposes on the newly created struct types	WITHOUT_CLASSIFICATION	0.9999901394587035	WITHOUT_CLASSIFICATION	9.860541296460414E-6	DEFECT
// OBJ_INFECT        	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// These call* assume ThreadContext = receiver.getRuntime().getCurrentContext()	WITHOUT_CLASSIFICATION	0.9996882775377424	WITHOUT_CLASSIFICATION	3.117224622575966E-4	DEFECT
// Execute iterateMethod again.	WITHOUT_CLASSIFICATION	0.9998299567205781	WITHOUT_CLASSIFICATION	1.700432794219784E-4	DEFECT
/*     * @param nv number of times to cycle or -1 to cycle indefinitely     */	WITHOUT_CLASSIFICATION	0.9992260976930282	WITHOUT_CLASSIFICATION	7.739023069717134E-4	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999854820951258	WITHOUT_CLASSIFICATION	1.4517904874290704E-5	DEFECT
// Atomic ?	WITHOUT_CLASSIFICATION	0.9999854820951258	WITHOUT_CLASSIFICATION	1.4517904874290704E-5	DEFECT
// MUST NOT be used across threads	WITHOUT_CLASSIFICATION	0.9998293847472502	WITHOUT_CLASSIFICATION	1.7061525274975165E-4	DEFECT
// superClass may be null.	WITHOUT_CLASSIFICATION	0.9999696985738024	WITHOUT_CLASSIFICATION	3.0301426197715808E-5	DEFECT
// Containing class...The parent of Object is null. Object should always be last in chain.	WITHOUT_CLASSIFICATION	0.9413731041268639	WITHOUT_CLASSIFICATION	0.058626895873136124	DEFECT
// ClassId is the name of the class/module sans where it is located. // If it is null, then it an anonymous class.	WITHOUT_CLASSIFICATION	0.999929023933635	WITHOUT_CLASSIFICATION	7.097606636488778E-5	DEFECT
// ClassProviders return Java class/module (in #defineOrGetClassUnder and // #defineOrGetModuleUnder) when class/module is opened using colon syntax. 	WITHOUT_CLASSIFICATION	0.9999224072607247	WITHOUT_CLASSIFICATION	7.759273927522932E-5	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999949438617023	WITHOUT_CLASSIFICATION	5.056138297742042E-6	DEFECT
// Make sure the module we include does not already exist	WITHOUT_CLASSIFICATION	0.9975090090508553	WITHOUT_CLASSIFICATION	0.0024909909491447834	DEFECT
// MRI checks all types first:	WITHOUT_CLASSIFICATION	0.9999807820872416	WITHOUT_CLASSIFICATION	1.9217912758372427E-5	DEFECT
// we need full traces, use default (slow) populator	WITHOUT_CLASSIFICATION	0.9999878412985924	WITHOUT_CLASSIFICATION	1.2158701407510672E-5	DEFECT
// module/singleton methods are all defined public	WITHOUT_CLASSIFICATION	0.9999885181781587	WITHOUT_CLASSIFICATION	1.1481821841199673E-5	DEFECT
// See if module is in chain...Cannot match against itself so start at superClass.	WITHOUT_CLASSIFICATION	0.9998942658225938	WITHOUT_CLASSIFICATION	1.0573417740613735E-4	DEFECT
// We can safely reference methods here instead of doing getMethods() since if we // are adding we are not using a IncludedModuleWrapper.	WITHOUT_CLASSIFICATION	0.9996611127875074	WITHOUT_CLASSIFICATION	3.3888721249267673E-4	DEFECT
// we grab serial number first; the worst that will happen is we cache a later // update with an earlier serial number, which would just flush anyway	WITHOUT_CLASSIFICATION	0.9999245857979967	WITHOUT_CLASSIFICATION	7.541420200325434E-5	DEFECT
// update all hierarchies into which this module has been included	WITHOUT_CLASSIFICATION	0.9999887914255899	WITHOUT_CLASSIFICATION	1.1208574410124336E-5	DEFECT
// This method is intended only for defining new classes in Ruby code, // so it uses the allocator of the specified superclass or default to // the Object allocator. It should NOT be used to define classes that require a native allocator.	WITHOUT_CLASSIFICATION	0.9993447561516808	WITHOUT_CLASSIFICATION	6.552438483190341E-4	DEFECT
// need to skip IncludedModuleWrappers	WITHOUT_CLASSIFICATION	0.9998840509782249	WITHOUT_CLASSIFICATION	1.159490217751989E-4	DEFECT
// superClazz = null;	WITHOUT_CLASSIFICATION	0.9999682450359837	WITHOUT_CLASSIFICATION	3.175496401635656E-5	DEFECT
// reopen a java class	WITHOUT_CLASSIFICATION	0.9999831093687828	WITHOUT_CLASSIFICATION	1.6890631217230922E-5	DEFECT
// This method is intended only for defining new modules in Ruby code	WITHOUT_CLASSIFICATION	0.9969891358293982	WITHOUT_CLASSIFICATION	0.0030108641706017695	DEFECT
// reopen a java module	WITHOUT_CLASSIFICATION	0.9999591398421064	WITHOUT_CLASSIFICATION	4.086015789367595E-5	DEFECT
//FIXME warning	WITHOUT_CLASSIFICATION	0.9999111110717747	WITHOUT_CLASSIFICATION	8.8888928225404E-5	DEFECT
// FIXME warning	WITHOUT_CLASSIFICATION	0.9999688970801595	WITHOUT_CLASSIFICATION	3.110291984057433E-5	DEFECT
// a normal block passed to define_method changes to do arity checking; make it a lambda	WITHOUT_CLASSIFICATION	0.9998114960746852	WITHOUT_CLASSIFICATION	1.885039253147521E-4	DEFECT
// for zsupers in define_method (blech!) we tell the proc scope to act as the "argument" scope	WITHOUT_CLASSIFICATION	0.9995694886852929	WITHOUT_CLASSIFICATION	4.3051131470715125E-4	DEFECT
// just using required is broken...but no more broken than before zsuper refactoring	WITHOUT_CLASSIFICATION	0.9996710326537057	WITHOUT_CLASSIFICATION	3.289673462942077E-4	DEFECT
// class and module bodies default to public, so make the block's visibility public. JRUBY-1185.	WITHOUT_CLASSIFICATION	0.9999874405535973	WITHOUT_CLASSIFICATION	1.2559446402520934E-5	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9988598175091176	WITHOUT_CLASSIFICATION	0.001140182490882353	DEFECT
// MRI error message says Class, even though Module is ok 	WITHOUT_CLASSIFICATION	0.9989790730169408	WITHOUT_CLASSIFICATION	0.0010209269830592181	DEFECT
// scan class hierarchy for module	WITHOUT_CLASSIFICATION	0.9998621523638651	WITHOUT_CLASSIFICATION	1.3784763613481865E-4	DEFECT
/* Module class methods */	WITHOUT_CLASSIFICATION	0.9999946067395127	WITHOUT_CLASSIFICATION	5.393260487348337E-6	DEFECT
// Note: we change current frames visibility here because the methods which call // this method are all "fast" (e.g. they do not created their own frame).	WITHOUT_CLASSIFICATION	0.9999997161816644	WITHOUT_CLASSIFICATION	2.838183356375674E-7	DEFECT
// next in hierarchy is an included version of the module we're attempting, // so we skip including it	WITHOUT_CLASSIFICATION	0.9935986515720925	WITHOUT_CLASSIFICATION	0.006401348427907477	DEFECT
// if we haven't encountered a real superclass, use the found module as the new inclusion point	WITHOUT_CLASSIFICATION	0.9999953468403503	WITHOUT_CLASSIFICATION	4.653159649751463E-6	DEFECT
// build a list of all modules to consider for inclusion	WITHOUT_CLASSIFICATION	0.9991146018789113	WITHOUT_CLASSIFICATION	8.853981210886269E-4	DEFECT
// if the insertion point is a class, update subclass lists	WITHOUT_CLASSIFICATION	0.9999797135942252	WITHOUT_CLASSIFICATION	2.02864057747283E-5	DEFECT
// if there's a non-null superclass, we're including into a normal class hierarchy; // update subclass relationships to avoid stale parent/child relationships	WITHOUT_CLASSIFICATION	0.9999724904615443	WITHOUT_CLASSIFICATION	2.75095384555793E-5	DEFECT
// ////////////////// CLASS VARIABLE RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998309025195258	WITHOUT_CLASSIFICATION	1.6909748047412896E-4	DEFECT
// ////////////////// CONSTANT RUBY METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998309025195258	WITHOUT_CLASSIFICATION	1.6909748047412896E-4	DEFECT
// Note: includes part of fix for JRUBY-1339	WITHOUT_CLASSIFICATION	0.9992405425510535	WITHOUT_CLASSIFICATION	7.594574489465289E-4	DEFECT
// ////////////////// CLASS VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998522459218239	WITHOUT_CLASSIFICATION	1.4775407817602584E-4	DEFECT
// Wrong Parameter ?	WITHOUT_CLASSIFICATION	0.9999854893358199	WITHOUT_CLASSIFICATION	1.4510664179980662E-5	DEFECT
// not actually called anywhere (all known uses call the fast version)	WITHOUT_CLASSIFICATION	0.999677922647857	WITHOUT_CLASSIFICATION	3.220773521429002E-4	DEFECT
// Not that is loaded loop around to resolve it next pass	WITHOUT_CLASSIFICATION	0.9500167163580991	WITHOUT_CLASSIFICATION	0.04998328364190086	DEFECT
// if adding a module under a constant name, set that module's basename to the constant name	WITHOUT_CLASSIFICATION	0.9999714798133489	WITHOUT_CLASSIFICATION	2.8520186651154142E-5	DEFECT
// Fix for JRUBY-1339 - search hierarchy for constant	WITHOUT_CLASSIFICATION	0.9994729994880551	WITHOUT_CLASSIFICATION	5.270005119449625E-4	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9995574705459829	WITHOUT_CLASSIFICATION	4.425294540171622E-4	DEFECT
// removes and returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9995705314095484	WITHOUT_CLASSIFICATION	4.294685904515746E-4	DEFECT
// we can't rename a file while it's open in windows	WITHOUT_CLASSIFICATION	0.9993947391711463	WITHOUT_CLASSIFICATION	6.052608288537846E-4	DEFECT
//reopen	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// ARGF methods	WITHOUT_CLASSIFICATION	0.9999897133834337	WITHOUT_CLASSIFICATION	1.0286616566297492E-5	DEFECT
//         data.currentFile.callMethod(context, "lineno=", line);	WITHOUT_CLASSIFICATION	0.999671166274184	WITHOUT_CLASSIFICATION	3.288337258161179E-4	DEFECT
// one optional, one required args	WITHOUT_CLASSIFICATION	0.9998705958859673	WITHOUT_CLASSIFICATION	1.2940411403276672E-4	DEFECT
// one optional and no required args	WITHOUT_CLASSIFICATION	0.9999364784572434	WITHOUT_CLASSIFICATION	6.352154275663273E-5	DEFECT
// try to get errno value out of the class	WITHOUT_CLASSIFICATION	0.9998161102398502	WITHOUT_CLASSIFICATION	1.8388976014984337E-4	DEFECT
// we got a valid errno value	WITHOUT_CLASSIFICATION	0.9999060908210213	WITHOUT_CLASSIFICATION	9.390917897874896E-5	DEFECT
// Ensure we're not running on GCJ, since it's not supported and leads to weird errors	WITHOUT_CLASSIFICATION	0.9978015178620561	WITHOUT_CLASSIFICATION	0.0021984821379439144	DEFECT
// print out as a nice Ruby backtrace	WITHOUT_CLASSIFICATION	0.9999525574383522	WITHOUT_CLASSIFICATION	4.744256164783972E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999421617426439	WITHOUT_CLASSIFICATION	5.783825735599654E-5	DEFECT
// set thread context JRuby classloader here, for the main thread	WITHOUT_CLASSIFICATION	0.9999628889513222	WITHOUT_CLASSIFICATION	3.71110486777942E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999740738213246	WITHOUT_CLASSIFICATION	2.5926178675385592E-5	DEFECT
// no script to run, return success below	WITHOUT_CLASSIFICATION	0.999775747553395	WITHOUT_CLASSIFICATION	2.242524466048409E-4	DEFECT
// Skip /usr/bin/env if it's first	WITHOUT_CLASSIFICATION	0.9999403793768175	WITHOUT_CLASSIFICATION	5.962062318257112E-5	DEFECT
// Skip any assignments if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9996536528152258	WITHOUT_CLASSIFICATION	3.4634718477424186E-4	DEFECT
// Skip any commandline args if /usr/bin/env is in play	WITHOUT_CLASSIFICATION	0.9996584601235433	WITHOUT_CLASSIFICATION	3.4153987645668454E-4	DEFECT
// ignore error	WITHOUT_CLASSIFICATION	0.9999818989542264	WITHOUT_CLASSIFICATION	1.810104577364419E-5	DEFECT
// ////////////////// COMMON CONSTANT / CVAR METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998303480045639	WITHOUT_CLASSIFICATION	1.696519954360649E-4	DEFECT
// ////////////////// INTERNAL MODULE VARIABLE API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998522459218239	WITHOUT_CLASSIFICATION	1.4775407817602584E-4	DEFECT
// ////////////////// LOW-LEVEL CONSTANT INTERFACE //////////////// // // fetch/store/list constants for this module //	WITHOUT_CLASSIFICATION	0.9998572540639167	WITHOUT_CLASSIFICATION	1.4274593608338296E-4	DEFECT
// odd	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// JRubyClient	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/*     * x = mantissa * 2 ** exponent     *     * Where mantissa is in the range of [.5, 1)     *     */	WITHOUT_CLASSIFICATION	0.9918746733156086	WITHOUT_CLASSIFICATION	0.008125326684391415	DEFECT
// Make mantissa same sign so we only have one code path.	WITHOUT_CLASSIFICATION	0.9999207966890036	WITHOUT_CLASSIFICATION	7.920331099635612E-5	DEFECT
// Increase value to hit lower range.	WITHOUT_CLASSIFICATION	0.9985834975552833	WITHOUT_CLASSIFICATION	0.0014165024447167127	DEFECT
/*     * r = x * 2 ** y     */	WITHOUT_CLASSIFICATION	0.9996010270462978	WITHOUT_CLASSIFICATION	3.989729537021796E-4	DEFECT
/*  0! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  1! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  2! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  3! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  4! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  5! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  6! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  7! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  8! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/*  9! */	WITHOUT_CLASSIFICATION	0.9999118943465486	WITHOUT_CLASSIFICATION	8.810565345144359E-5	DEFECT
/* 11! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 12! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 13! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 15! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 16! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 17! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 19! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 20! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* 21! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// Static constants	WITHOUT_CLASSIFICATION	0.9999903657306662	WITHOUT_CLASSIFICATION	9.634269333663854E-6	DEFECT
// Clean-up string representation so that it could be understood // by Java's BigDecimal. Not terribly efficient for now. // 1. MRI allows d and D as exponent separators	WITHOUT_CLASSIFICATION	0.9998959600367008	WITHOUT_CLASSIFICATION	1.0403996329913635E-4	DEFECT
// 2. MRI allows underscores anywhere	WITHOUT_CLASSIFICATION	0.9999397780367076	WITHOUT_CLASSIFICATION	6.022196329237167E-5	DEFECT
// 3. MRI ignores the trailing junk	WITHOUT_CLASSIFICATION	0.9999258680737058	WITHOUT_CLASSIFICATION	7.413192629428329E-5	DEFECT
// MRI behavior: -0 and +0 are two different things	WITHOUT_CLASSIFICATION	0.99989573411567	WITHOUT_CLASSIFICATION	1.0426588432994455E-4	DEFECT
// Java and MRI definitions of modulo are different.	WITHOUT_CLASSIFICATION	0.9999385085623412	WITHOUT_CLASSIFICATION	6.149143765876413E-5	DEFECT
// Java and MRI definitions of remainder are the same.	WITHOUT_CLASSIFICATION	0.9999836255191166	WITHOUT_CLASSIFICATION	1.6374480883403762E-5	DEFECT
// Note: MRI has a very non-trivial way of calculating the precision, // so we use very simple approximation here:	WITHOUT_CLASSIFICATION	0.9999627609497536	WITHOUT_CLASSIFICATION	3.7239050246470376E-5	DEFECT
// Iteration variables, for the square root x and the reciprocal v // initial x:  x0 ~ sqrt() // initial v:  v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9995132562738216	WITHOUT_CLASSIFICATION	4.86743726178351E-4	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998484791943337	WITHOUT_CLASSIFICATION	1.515208056662281E-4	DEFECT
// TODO: why this: .setResult();	WITHOUT_CLASSIFICATION	0.9218132184685814	WITHOUT_CLASSIFICATION	0.07818678153141857	DEFECT
// integer division	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// MRI behavior: "If digits is 0, the result is the same as the / operator."	WITHOUT_CLASSIFICATION	0.9999571092502869	WITHOUT_CLASSIFICATION	4.289074971306774E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rounding neccessary	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// Java and MRI definitions of divmod are different.        	WITHOUT_CLASSIFICATION	0.9999385085623412	WITHOUT_CLASSIFICATION	6.149143765876413E-5	DEFECT
// JRUBY-914: Java 1.4 BigDecimal does not allow a negative scale, so we have to simulate it	WITHOUT_CLASSIFICATION	0.9919597735874117	WITHOUT_CLASSIFICATION	0.008040226412588317	DEFECT
// shift the decimal point just to the right of the digit to be rounded to (divide by 10**(abs(scale))) // -1 -> 10's digit, -2 -> 100's digit, etc.	WITHOUT_CLASSIFICATION	0.9994757246095309	WITHOUT_CLASSIFICATION	5.242753904689997E-4	DEFECT
// ...round to that digit	WITHOUT_CLASSIFICATION	0.9999513454952973	WITHOUT_CLASSIFICATION	4.865450470282472E-5	DEFECT
// ...and shift the result back to the left (multiply by 10**(abs(scale)))	WITHOUT_CLASSIFICATION	0.9997432744389078	WITHOUT_CLASSIFICATION	2.5672556109231087E-4	DEFECT
//this relies on the Ruby rounding enumerations == Java ones, which they (currently) all are	WITHOUT_CLASSIFICATION	0.9999785695944675	WITHOUT_CLASSIFICATION	2.1430405532458312E-5	DEFECT
// sign	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// significant digits and exponent	WITHOUT_CLASSIFICATION	0.9997935030688014	WITHOUT_CLASSIFICATION	2.064969311985592E-4	DEFECT
// normalize the value	WITHOUT_CLASSIFICATION	0.9999681840664376	WITHOUT_CLASSIFICATION	3.1815933562338335E-5	DEFECT
// base	WITHOUT_CLASSIFICATION	0.9999563091171876	WITHOUT_CLASSIFICATION	4.36908828124631E-5	DEFECT
// NOTE: MRI's sqrt precision is limited by 100, // but we allow values more than 100.	WITHOUT_CLASSIFICATION	0.9997879836920054	WITHOUT_CLASSIFICATION	2.1201630799463266E-4	DEFECT
// just in case, add a bit of extra precision	WITHOUT_CLASSIFICATION	0.9984398380001488	WITHOUT_CLASSIFICATION	0.0015601619998510971	DEFECT
// eh?!	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Note: #fix has only no-arg form, but truncate allows optional parameter.	WITHOUT_CLASSIFICATION	0.9999564510309523	WITHOUT_CLASSIFICATION	4.35489690476804E-5	DEFECT
// General number and precision checking	WITHOUT_CLASSIFICATION	0.9991929565245166	WITHOUT_CLASSIFICATION	8.070434754834463E-4	DEFECT
// the requested precision	WITHOUT_CLASSIFICATION	0.999990651863948	WITHOUT_CLASSIFICATION	9.34813605200451E-6	DEFECT
// Proc class	WITHOUT_CLASSIFICATION	0.9999937483842465	WITHOUT_CLASSIFICATION	6.2516157535260035E-6	DEFECT
//.append("  -x[directory]   strip off text before #!ruby line and perhaps cd to directory\n")	WITHOUT_CLASSIFICATION	0.990928879672424	WITHOUT_CLASSIFICATION	0.009071120327575911	DEFECT
// even shift.. // ..floors to 62 or 63 bit BigInteger	WITHOUT_CLASSIFICATION	0.9992375922773629	WITHOUT_CLASSIFICATION	7.624077226371079E-4	DEFECT
// 5 -> 2, -5 -> -3 need half a scale more..	WITHOUT_CLASSIFICATION	0.999975146084096	WITHOUT_CLASSIFICATION	2.485391590391491E-5	DEFECT
// ..where 100 -> 10 shifts the scale	WITHOUT_CLASSIFICATION	0.9999687256858425	WITHOUT_CLASSIFICATION	3.127431415749915E-5	DEFECT
// Initial x - use double root - multiply by halfBack to unshift - set new scale	WITHOUT_CLASSIFICATION	0.9998898395578927	WITHOUT_CLASSIFICATION	1.1016044210726901E-4	DEFECT
// x0 ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// for prec 15 root x0 must surely be OK // return small prec roots without iterations	WITHOUT_CLASSIFICATION	0.9997039683714466	WITHOUT_CLASSIFICATION	2.9603162855332363E-4	DEFECT
// Initial v - the reciprocal // v0 = 1/(2*x)	WITHOUT_CLASSIFICATION	0.9998455547553967	WITHOUT_CLASSIFICATION	1.5444524460321316E-4	DEFECT
// Collect iteration precisions beforehand	WITHOUT_CLASSIFICATION	0.9998290138197493	WITHOUT_CLASSIFICATION	1.7098618025068166E-4	DEFECT
// assume nInit = 16 <= prec	WITHOUT_CLASSIFICATION	0.9999693148761931	WITHOUT_CLASSIFICATION	3.0685123806814507E-5	DEFECT
// The loop of "Square Root by Coupled Newton Iteration"	WITHOUT_CLASSIFICATION	0.9992940427395085	WITHOUT_CLASSIFICATION	7.059572604914192E-4	DEFECT
// Increase precision - next iteration supplies n exact digits	WITHOUT_CLASSIFICATION	0.9983111187234183	WITHOUT_CLASSIFICATION	0.0016888812765817835	DEFECT
// Next x                                        // e = d - x^2	WITHOUT_CLASSIFICATION	0.999338642288296	WITHOUT_CLASSIFICATION	6.613577117039819E-4	DEFECT
// x += e*v     ~ sqrt()	WITHOUT_CLASSIFICATION	0.9999666368140312	WITHOUT_CLASSIFICATION	3.336318596876953E-5	DEFECT
// root x is ready!	WITHOUT_CLASSIFICATION	0.9999599897321797	WITHOUT_CLASSIFICATION	4.001026782020465E-5	DEFECT
// Next v                                        // g = 1 - 2*x*v	WITHOUT_CLASSIFICATION	0.9994289734451643	WITHOUT_CLASSIFICATION	5.710265548356395E-4	DEFECT
// v += g*v     ~ 1/2/sqrt()	WITHOUT_CLASSIFICATION	0.999968502367634	WITHOUT_CLASSIFICATION	3.1497632366006496E-5	DEFECT
// RubyBigdecimal	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// c: bind_eval	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/*  ================     *  Module Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999222187679204	WITHOUT_CLASSIFICATION	7.778123207954912E-5	DEFECT
// from CommandlineParser	WITHOUT_CLASSIFICATION	0.9999655395339688	WITHOUT_CLASSIFICATION	3.4460466031225666E-5	DEFECT
// This property is a Boolean, to allow three values, so it can match MRI's nil, false and true	WITHOUT_CLASSIFICATION	0.9933139552686489	WITHOUT_CLASSIFICATION	0.006686044731351135	DEFECT
// default ClassCache using jitMax as a soft upper bound	WITHOUT_CLASSIFICATION	0.9999641503345021	WITHOUT_CLASSIFICATION	3.584966549786159E-5	DEFECT
// Until we get a little more solid on 1.9 support we will only run interpreted mode	WITHOUT_CLASSIFICATION	0.9966057051905961	WITHOUT_CLASSIFICATION	0.0033942948094038057	DEFECT
// Setting the loader needs to reset the class cache	WITHOUT_CLASSIFICATION	0.9998584134210069	WITHOUT_CLASSIFICATION	1.415865789929715E-4	DEFECT
// try the normal property first	WITHOUT_CLASSIFICATION	0.9999547737450417	WITHOUT_CLASSIFICATION	4.5226254958398025E-5	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999923889933776	WITHOUT_CLASSIFICATION	7.611006622447565E-6	DEFECT
// verify it if it's there	WITHOUT_CLASSIFICATION	0.9999923889933776	WITHOUT_CLASSIFICATION	7.611006622447565E-6	DEFECT
// try loading from classloader resources	WITHOUT_CLASSIFICATION	0.9997973343128642	WITHOUT_CLASSIFICATION	2.026656871358417E-4	DEFECT
// otherwise fall back on system temp location	WITHOUT_CLASSIFICATION	0.999439333095862	WITHOUT_CLASSIFICATION	5.60666904137975E-4	DEFECT
// We require the home directory to be absolute	WITHOUT_CLASSIFICATION	0.9991163459050763	WITHOUT_CLASSIFICATION	8.836540949237256E-4	DEFECT
//consume the file name	WITHOUT_CLASSIFICATION	0.9999765217759398	WITHOUT_CLASSIFICATION	2.3478224060182952E-5	DEFECT
// Specify something that can't separate	WITHOUT_CLASSIFICATION	0.999851087170248	WITHOUT_CLASSIFICATION	1.4891282975196873E-4	DEFECT
// try cwd first	WITHOUT_CLASSIFICATION	0.9999944346060735	WITHOUT_CLASSIFICATION	5.565393926493766E-6	DEFECT
// ruby interpreter compatibilty // Usage: ruby [switches] [--] [programfile] [arguments])	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// KCode.NONE is used because KCODE does not affect parse in Ruby 1.8 // if Ruby 2.0 encoding pragmas are implemented, this will need to change	WITHOUT_CLASSIFICATION	0.9987637351927225	WITHOUT_CLASSIFICATION	0.001236264807277424	DEFECT
// @JRubyMethod(name = "complex?")	WITHOUT_CLASSIFICATION	0.9997405873656807	WITHOUT_CLASSIFICATION	2.594126343191907E-4	DEFECT
// @JRubyMethod(name = "exact?")	WITHOUT_CLASSIFICATION	0.9997405873656807	WITHOUT_CLASSIFICATION	2.594126343191907E-4	DEFECT
// @JRubyMethod(name = "inexact?")	WITHOUT_CLASSIFICATION	0.9997405873656807	WITHOUT_CLASSIFICATION	2.594126343191907E-4	DEFECT
// symbol string *must* be interned	WITHOUT_CLASSIFICATION	0.9997535534922594	WITHOUT_CLASSIFICATION	2.4644650774071237E-4	DEFECT
//        assert internedSymbol == internedSymbol.intern() : internedSymbol + " is not interned";	WITHOUT_CLASSIFICATION	0.9875199841159543	WITHOUT_CLASSIFICATION	0.012480015884045589	DEFECT
/* Symbol class methods.     *      */	WITHOUT_CLASSIFICATION	0.9999698177275307	WITHOUT_CLASSIFICATION	3.0182272469250616E-5	DEFECT
// TODO: 1.9 rb_enc_symname_p	WITHOUT_CLASSIFICATION	0.9905201112226323	WITHOUT_CLASSIFICATION	0.009479888777367789	DEFECT
// This is needed to unpack stuff	WITHOUT_CLASSIFICATION	0.9923876022248503	WITHOUT_CLASSIFICATION	0.007612397775149638	DEFECT
// we already confirmed above that length > 0	WITHOUT_CLASSIFICATION	0.9998226324321594	WITHOUT_CLASSIFICATION	1.7736756784064917E-4	DEFECT
// *must* be power of 2!	WITHOUT_CLASSIFICATION	0.999853371233265	WITHOUT_CLASSIFICATION	1.4662876673499423E-4	DEFECT
// note all fields are final -- rehash creates new entries when necessary. // as documented in java.util.concurrent.ConcurrentHashMap.java, that will // statistically affect only a small percentage (< 20%) of entries for a given rehash.	WITHOUT_CLASSIFICATION	0.9998044198785188	WITHOUT_CLASSIFICATION	1.9558012148123422E-4	DEFECT
//            assert internedName == internedName.intern() : internedName + " is not interned";	WITHOUT_CLASSIFICATION	0.9875199841159543	WITHOUT_CLASSIFICATION	0.012480015884045589	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999928994239453	WITHOUT_CLASSIFICATION	7.1005760547311275E-6	DEFECT
// try lookup again under lock	WITHOUT_CLASSIFICATION	0.9999928994239453	WITHOUT_CLASSIFICATION	7.1005760547311275E-6	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// backwards-compatibility, but threadsafe now	WITHOUT_CLASSIFICATION	0.9999887284527978	WITHOUT_CLASSIFICATION	1.1271547202124571E-5	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999571636289473	WITHOUT_CLASSIFICATION	4.283637105273263E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999135658831382	WITHOUT_CLASSIFICATION	8.643411686186156E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998969173326118	WITHOUT_CLASSIFICATION	1.0308266738823874E-4	DEFECT
// Check the length every iteration, since // the block can modify this string.	WITHOUT_CLASSIFICATION	0.9999931833819405	WITHOUT_CLASSIFICATION	6.8166180594094604E-6	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9998775473576442	WITHOUT_CLASSIFICATION	1.2245264235586232E-4	DEFECT
// not so backwards-compatible here, but no one should have been // calling this anyway.	WITHOUT_CLASSIFICATION	0.9999869494276468	WITHOUT_CLASSIFICATION	1.3050572353316904E-5	DEFECT
// Profile	WITHOUT_CLASSIFICATION	0.9999511415101334	WITHOUT_CLASSIFICATION	4.885848986666748E-5	DEFECT
//static private final String TRANSLIT = "//translit";	WITHOUT_CLASSIFICATION	0.999076908358185	WITHOUT_CLASSIFICATION	9.230916418149862E-4	DEFECT
// treat start and end as start...end for end >= 0, start..end for end < 0	WITHOUT_CLASSIFICATION	0.9994279516490564	WITHOUT_CLASSIFICATION	5.720483509436122E-4	DEFECT
// invalid ranges result in an empty string	WITHOUT_CLASSIFICATION	0.9999657780503022	WITHOUT_CLASSIFICATION	3.422194969791181E-5	DEFECT
// Methods of the Nil Class (nil_*):	WITHOUT_CLASSIFICATION	0.9998077641262536	WITHOUT_CLASSIFICATION	1.922358737464131E-4	DEFECT
// Has read/write been closed or is it still open for business	WITHOUT_CLASSIFICATION	0.9998142587990335	WITHOUT_CLASSIFICATION	1.8574120096634305E-4	DEFECT
// Support IO modes that this object was opened with	WITHOUT_CLASSIFICATION	0.9999033261241654	WITHOUT_CLASSIFICATION	9.66738758345965E-5	DEFECT
// must let original string know we're modifying, so shared buffers aren't damaged	WITHOUT_CLASSIFICATION	0.9999877218454151	WITHOUT_CLASSIFICATION	1.2278154584929318E-5	DEFECT
// reset the state	WITHOUT_CLASSIFICATION	0.9999953921097549	WITHOUT_CLASSIFICATION	4.607890245165617E-6	DEFECT
// Tainting here if we ever want it. (secure 4)	WITHOUT_CLASSIFICATION	0.9999225703914769	WITHOUT_CLASSIFICATION	7.742960852314358E-5	DEFECT
// rb_match_busy	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
//str is frozen	WITHOUT_CLASSIFICATION	0.9998086321450457	WITHOUT_CLASSIFICATION	1.9136785495425863E-4	DEFECT
// MRI also does a pointer comparison here	WITHOUT_CLASSIFICATION	0.9997631415856452	WITHOUT_CLASSIFICATION	2.3685841435486192E-4	DEFECT
// JRubyServer	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Class.allocate object is not allocatable before it is initialized	WITHOUT_CLASSIFICATION	0.9899221839137377	WITHOUT_CLASSIFICATION	0.01007781608626223	DEFECT
// boot the Object class 	WITHOUT_CLASSIFICATION	0.9999944070716558	WITHOUT_CLASSIFICATION	5.592928344193147E-6	DEFECT
// Methods of the Object class (rb_obj_*):	WITHOUT_CLASSIFICATION	0.9998924869640635	WITHOUT_CLASSIFICATION	1.0751303593643692E-4	DEFECT
// update superclass reference	WITHOUT_CLASSIFICATION	0.9999949438617023	WITHOUT_CLASSIFICATION	5.056138297742042E-6	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999987296902362	WITHOUT_CLASSIFICATION	1.2703097638657264E-6	DEFECT
// This is a non-standard method; have we decided to start extending Ruby? //classClass.defineFastMethod("subclasses", callbackFactory.getFastOptMethod("subclasses"));	WITHOUT_CLASSIFICATION	0.9714471261918914	WITHOUT_CLASSIFICATION	0.028552873808108486	DEFECT
// boot the Module and Class classes	WITHOUT_CLASSIFICATION	0.9999488530495075	WITHOUT_CLASSIFICATION	5.1146950492378355E-5	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9997360775494699	WITHOUT_CLASSIFICATION	2.639224505300325E-4	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999772373057846	WITHOUT_CLASSIFICATION	2.276269421535523E-5	DEFECT
// use parent's marshal	WITHOUT_CLASSIFICATION	0.9999772373057846	WITHOUT_CLASSIFICATION	2.276269421535523E-5	DEFECT
// could be pulled down to RubyClass in future // rb_class_boot	WITHOUT_CLASSIFICATION	0.9994927115384366	WITHOUT_CLASSIFICATION	5.072884615634226E-4	DEFECT
// remove us from old superclass's child classes	WITHOUT_CLASSIFICATION	0.9999042104028738	WITHOUT_CLASSIFICATION	9.578959712621055E-5	DEFECT
// add us to new superclass's child classes	WITHOUT_CLASSIFICATION	0.9998444528154933	WITHOUT_CLASSIFICATION	1.5554718450676704E-4	DEFECT
// update all subclasses	WITHOUT_CLASSIFICATION	0.9999908130366016	WITHOUT_CLASSIFICATION	9.186963398392198E-6	DEFECT
// fields to hold Ruby and RubyClass references	WITHOUT_CLASSIFICATION	0.9996136881422296	WITHOUT_CLASSIFICATION	3.863118577702645E-4	DEFECT
// static initializing method	WITHOUT_CLASSIFICATION	0.9999796113318247	WITHOUT_CLASSIFICATION	2.038866817533379E-5	DEFECT
// standard constructor that accepts Ruby, RubyClass	WITHOUT_CLASSIFICATION	0.9998729461667696	WITHOUT_CLASSIFICATION	1.270538332304817E-4	DEFECT
// no-arg constructor using static references to Ruby and RubyClass	WITHOUT_CLASSIFICATION	0.9997068345034427	WITHOUT_CLASSIFICATION	2.9316549655729004E-4	DEFECT
// non-signature signature with just IRubyObject	WITHOUT_CLASSIFICATION	0.9999525341870286	WITHOUT_CLASSIFICATION	4.746581297145003E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999794073338499	WITHOUT_CLASSIFICATION	2.0592666150070773E-5	DEFECT
// self // method name	WITHOUT_CLASSIFICATION	0.999986445932411	WITHOUT_CLASSIFICATION	1.3554067588976162E-5	DEFECT
// the default allocator	WITHOUT_CLASSIFICATION	0.9999977128747998	WITHOUT_CLASSIFICATION	2.2871252002304853E-6	DEFECT
// Equivalent of T_DATA	WITHOUT_CLASSIFICATION	0.9999460591907732	WITHOUT_CLASSIFICATION	5.3940809226694336E-5	DEFECT
// do nothing, leave empty	WITHOUT_CLASSIFICATION	0.9999965465927786	WITHOUT_CLASSIFICATION	3.4534072214120236E-6	DEFECT
// Double.MAX_EXPONENT since Java 1.6	WITHOUT_CLASSIFICATION	0.9999660143372296	WITHOUT_CLASSIFICATION	3.3985662770355844E-5	DEFECT
/*  ================     *  Singleton Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999222758653632	WITHOUT_CLASSIFICATION	7.772413463671732E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999940793991757	WITHOUT_CLASSIFICATION	5.920600824223225E-6	DEFECT
// Make sure all arguments are modules before calling the callbacks	WITHOUT_CLASSIFICATION	0.9999869121259352	WITHOUT_CLASSIFICATION	1.308787406491232E-5	DEFECT
// MRI extends in order from last to first	WITHOUT_CLASSIFICATION	0.9988806286708853	WITHOUT_CLASSIFICATION	0.001119371329114728	DEFECT
// NOTE: Serialization is primarily supported for testing purposes, and there is no general // guarantee that serialization will work correctly. Specifically, instance variables pointing // at symbols, threads, modules, classes, and other unserializable types are not detected.	WITHOUT_CLASSIFICATION	0.9979523626766446	WITHOUT_CLASSIFICATION	0.002047637323355452	DEFECT
// write out ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9998542815753684	WITHOUT_CLASSIFICATION	1.4571842463157838E-4	DEFECT
// rest in ivar count followed by name/value pairs	WITHOUT_CLASSIFICATION	0.9991889343498662	WITHOUT_CLASSIFICATION	8.110656501336873E-4	DEFECT
// 0x3fff_ffff // -0x4000_0000	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// a gotcha	WITHOUT_CLASSIFICATION	0.9999820721506686	WITHOUT_CLASSIFICATION	1.79278493312976E-5	DEFECT
// Java / and % are not the same as ruby	WITHOUT_CLASSIFICATION	0.9999306530721007	WITHOUT_CLASSIFICATION	6.934692789926678E-5	DEFECT
// A gotcha for Long.MIN_VALUE: value = -value	WITHOUT_CLASSIFICATION	0.9980332680128707	WITHOUT_CLASSIFICATION	0.0019667319871293143	DEFECT
// Piece of mri rb_to_id	WITHOUT_CLASSIFICATION	0.9999460591907732	WITHOUT_CLASSIFICATION	5.3940809226694336E-5	DEFECT
// Java Doubles are 64 bit long:            	WITHOUT_CLASSIFICATION	0.9999806737395084	WITHOUT_CLASSIFICATION	1.9326260491568197E-5	DEFECT
// Double.MAX_EXPONENT since Java 1.6            	WITHOUT_CLASSIFICATION	0.9999660143372296	WITHOUT_CLASSIFICATION	3.3985662770355844E-5	DEFECT
// don't override Numeric#div !	WITHOUT_CLASSIFICATION	0.9997174833721049	WITHOUT_CLASSIFICATION	2.8251662789516323E-4	DEFECT
// Modelled after c ruby implementation (java /,% not same as ruby)	WITHOUT_CLASSIFICATION	0.9995152532291701	WITHOUT_CLASSIFICATION	4.8474677083000777E-4	DEFECT
// MRI behavior:	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Numeric.equal            	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// provider is not available	WITHOUT_CLASSIFICATION	0.9994782521499073	WITHOUT_CLASSIFICATION	5.217478500927552E-4	DEFECT
// bouncy castle doesn't support algorithm	WITHOUT_CLASSIFICATION	0.991768757594258	WITHOUT_CLASSIFICATION	0.008231242405742054	DEFECT
// fall back to system JCA providers	WITHOUT_CLASSIFICATION	0.9992563753537663	WITHOUT_CLASSIFICATION	7.436246462337055E-4	DEFECT
// RubyDigest	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// ENEBO: Can these be fast?	WITHOUT_CLASSIFICATION	0.9998811833960647	WITHOUT_CLASSIFICATION	1.1881660393531865E-4	DEFECT
// synchronize on the RubyThread for threadgroup updates	WITHOUT_CLASSIFICATION	0.9998764331058727	WITHOUT_CLASSIFICATION	1.2356689412737249E-4	DEFECT
// we only add live threads	WITHOUT_CLASSIFICATION	0.9999342327042956	WITHOUT_CLASSIFICATION	6.576729570441845E-5	DEFECT
// use same ClassIndex as metaclass, since we're technically still of that type	WITHOUT_CLASSIFICATION	0.9999805506192996	WITHOUT_CLASSIFICATION	1.9449380700366783E-5	DEFECT
// handle everything after -- as arguments to the jruby process	WITHOUT_CLASSIFICATION	0.999954943960848	WITHOUT_CLASSIFICATION	4.505603915181359E-5	DEFECT
// JRubyService	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// while	WITHOUT_CLASSIFICATION	0.9999425450633016	WITHOUT_CLASSIFICATION	5.7454936698333924E-5	DEFECT
/* \OOO */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// CRuby uses sprintf(buf, "%.*g", FLOAT_DIG, d); // This pattern adjusts the output of String.pattern("%g") to mimic // the C version.	WITHOUT_CLASSIFICATION	0.9976292405696102	WITHOUT_CLASSIFICATION	0.002370759430389751	DEFECT
// mask off "once" flag	WITHOUT_CLASSIFICATION	0.999989897930513	WITHOUT_CLASSIFICATION	1.0102069487051818E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999788903717914	WITHOUT_CLASSIFICATION	2.1109628208463674E-5	DEFECT
// internal usage (Complex/Rational)	WITHOUT_CLASSIFICATION	0.9999348361669185	WITHOUT_CLASSIFICATION	6.516383308150505E-5	DEFECT
// silent ?	WITHOUT_CLASSIFICATION	0.9999854820951258	WITHOUT_CLASSIFICATION	1.4517904874290704E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* \O, \OO, \OOO or backref */	WITHOUT_CLASSIFICATION	0.9999771310836467	WITHOUT_CLASSIFICATION	2.2868916353279723E-5	DEFECT
// MBCLEN_NEEDMORE_P	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// MBCLEN_INVALID_P	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Unicode is can be only 21 bits long, int is enough	WITHOUT_CLASSIFICATION	0.9980474258206615	WITHOUT_CLASSIFICATION	0.0019525741793384574	DEFECT
/* Surrogates */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// do not load the class if not used	WITHOUT_CLASSIFICATION	0.999942898000012	WITHOUT_CLASSIFICATION	5.7101999988119126E-5	DEFECT
/* \0, \0O, \0OO */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* \xHH */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* \C-X, \C-\M-X */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* \M-X, \M-\C-X, \M-\cX */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
/* \\u{H HH HHH HHHH HHHHH HHHHHH ...} */	WITHOUT_CLASSIFICATION	0.999829132796428	WITHOUT_CLASSIFICATION	1.7086720357198165E-4	DEFECT
/* \\uHHHH */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* \p{Hiragana} */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// inner switch	WITHOUT_CLASSIFICATION	0.9999728796649752	WITHOUT_CLASSIFICATION	2.7120335024742694E-5	DEFECT
// newInstance here	WITHOUT_CLASSIFICATION	0.9999914431195901	WITHOUT_CLASSIFICATION	8.556880409932918E-6	DEFECT
// rb_reg_raise	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// rb_reg_desc	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// rb_enc_reg_raise	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// rb_enc_reg_error_desc	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rb_reg_initialize_str	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// rb_reg_initialize	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// JRUBY-3625: delay setting backref until the MatchData is completely initialized	WITHOUT_CLASSIFICATION	0.999869787059658	WITHOUT_CLASSIFICATION	1.3021294034193926E-4	DEFECT
// rb_reg_expr_str	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// option_to_str	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Don't initialize with class // Don't put in object space and don't taint	WITHOUT_CLASSIFICATION	0.9999439748515283	WITHOUT_CLASSIFICATION	5.602514847173576E-5	DEFECT
// args should be before block	WITHOUT_CLASSIFICATION	0.9999301026459504	WITHOUT_CLASSIFICATION	6.989735404952941E-5	DEFECT
// args should be at end	WITHOUT_CLASSIFICATION	0.9997793874433878	WITHOUT_CLASSIFICATION	2.20612556612122E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997886790715581	WITHOUT_CLASSIFICATION	2.1132092844198302E-4	DEFECT
// minus one more for IRubyObject[]	WITHOUT_CLASSIFICATION	0.9997886790715581	WITHOUT_CLASSIFICATION	2.1132092844198302E-4	DEFECT
// skip anything not related to jruby	WITHOUT_CLASSIFICATION	0.9946283647125598	WITHOUT_CLASSIFICATION	0.0053716352874402075	DEFECT
// start a new populator	WITHOUT_CLASSIFICATION	0.9999861016292829	WITHOUT_CLASSIFICATION	1.3898370717098037E-5	DEFECT
// check for frame field reads or writes	WITHOUT_CLASSIFICATION	0.9999150950210487	WITHOUT_CLASSIFICATION	8.490497895122431E-5	DEFECT
// add all names for this annotation	WITHOUT_CLASSIFICATION	0.9995176338342614	WITHOUT_CLASSIFICATION	4.8236616573861643E-4	DEFECT
// no annotated methods found, skip	WITHOUT_CLASSIFICATION	0.9999610543435286	WITHOUT_CLASSIFICATION	3.894565647148812E-5	DEFECT
// write out a static initializer for frame names, so it only fires once	WITHOUT_CLASSIFICATION	0.999921834823177	WITHOUT_CLASSIFICATION	7.816517682307702E-5	DEFECT
// single method, use normal logic	WITHOUT_CLASSIFICATION	0.9997955440391534	WITHOUT_CLASSIFICATION	2.0445596084659072E-4	DEFECT
// multimethod, new logic	WITHOUT_CLASSIFICATION	0.9999930504459781	WITHOUT_CLASSIFICATION	6.949554022004126E-6	DEFECT
// declared type returns the qualified name without $ for inner classes!!!	WITHOUT_CLASSIFICATION	0.9999398088439592	WITHOUT_CLASSIFICATION	6.019115604076369E-5	DEFECT
// inner class, use $ to delimit	WITHOUT_CLASSIFICATION	0.9996011817785939	WITHOUT_CLASSIFICATION	3.9881822140610054E-4	DEFECT
//                        RubyModule singletonClass = module.getSingletonClass();	WITHOUT_CLASSIFICATION	0.9995194717101148	WITHOUT_CLASSIFICATION	4.8052828988524415E-4	DEFECT
//                }	WITHOUT_CLASSIFICATION	0.9999704490095428	WITHOUT_CLASSIFICATION	2.9550990457319436E-5	DEFECT
// fallback on non-pregenerated logic	WITHOUT_CLASSIFICATION	0.9998279722043297	WITHOUT_CLASSIFICATION	1.7202779567028012E-4	DEFECT
// refresh call adapter, since it matters if this is iter-based or not	WITHOUT_CLASSIFICATION	0.9953046786180622	WITHOUT_CLASSIFICATION	0.004695321381937804	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9915012356801851	WITHOUT_CLASSIFICATION	0.008498764319814922	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999831613199134	WITHOUT_CLASSIFICATION	1.683868008660487E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999946503541347	WITHOUT_CLASSIFICATION	5.349645865319187E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// colon3	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Colon3	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// array created for rescue args doesn't need to be in ObjectSpace.	WITHOUT_CLASSIFICATION	0.998041696850285	WITHOUT_CLASSIFICATION	0.0019583031497150205	DEFECT
// For b.foo	WITHOUT_CLASSIFICATION	0.999992113011503	WITHOUT_CLASSIFICATION	7.88698849686662E-6	DEFECT
// instance config for the script run	WITHOUT_CLASSIFICATION	0.9999184354708501	WITHOUT_CLASSIFICATION	8.156452914986843E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
//RubyModule module = context.getRubyClass();	WITHOUT_CLASSIFICATION	0.9984302693384184	WITHOUT_CLASSIFICATION	0.0015697306615815377	DEFECT
// For 'b.foo'	WITHOUT_CLASSIFICATION	0.999992113011503	WITHOUT_CLASSIFICATION	7.88698849686662E-6	DEFECT
// We define an actual list to get around bug in java integration (1387115)	WITHOUT_CLASSIFICATION	0.9977910276005317	WITHOUT_CLASSIFICATION	0.0022089723994683196	DEFECT
// something in here is used to build up ruby stack trace...	WITHOUT_CLASSIFICATION	0.9998244102506592	WITHOUT_CLASSIFICATION	1.755897493408617E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9998566509336247	WITHOUT_CLASSIFICATION	1.4334906637521956E-4	DEFECT
// Ruby Grammar productions return plenty of nulls.	WITHOUT_CLASSIFICATION	0.9998566509336247	WITHOUT_CLASSIFICATION	1.4334906637521956E-4	DEFECT
// do nothing, allow loop to retry	WITHOUT_CLASSIFICATION	0.9998612165106474	WITHOUT_CLASSIFICATION	1.387834893526453E-4	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9992030238950285	WITHOUT_CLASSIFICATION	7.969761049714787E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9995442590508925	WITHOUT_CLASSIFICATION	4.5574094910758424E-4	DEFECT
// never visited, should be fine	WITHOUT_CLASSIFICATION	0.9974161399448668	WITHOUT_CLASSIFICATION	0.002583860055133186	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999980600326405	WITHOUT_CLASSIFICATION	1.9399673594954583E-5	DEFECT
// If we have more than one argument, then make sure the array is not ObjectSpaced.	WITHOUT_CLASSIFICATION	0.9904195552862625	WITHOUT_CLASSIFICATION	0.009580444713737542	DEFECT
// Only in ruby 1.9 methods	WITHOUT_CLASSIFICATION	0.9999688127150379	WITHOUT_CLASSIFICATION	3.118728496208003E-5	DEFECT
// Bind 'normal' parameter values to the local scope for this method.	WITHOUT_CLASSIFICATION	0.9998566866968023	WITHOUT_CLASSIFICATION	1.4331330319760683E-4	DEFECT
// no arg grouping, just use bulk assignment methods	WITHOUT_CLASSIFICATION	0.999975926290583	WITHOUT_CLASSIFICATION	2.40737094170374E-5	DEFECT
// optArgs and restArgs require more work, so isolate them and ArrayList creation here	WITHOUT_CLASSIFICATION	0.9999645877519753	WITHOUT_CLASSIFICATION	3.541224802469456E-5	DEFECT
//        arity.checkArity(runtime, argsLength);	WITHOUT_CLASSIFICATION	0.999671166274184	WITHOUT_CLASSIFICATION	3.288337258161179E-4	DEFECT
// no more values to stick in rest arg	WITHOUT_CLASSIFICATION	0.9996614305555043	WITHOUT_CLASSIFICATION	3.385694444957338E-4	DEFECT
// set argv from main's args	WITHOUT_CLASSIFICATION	0.9999861767266158	WITHOUT_CLASSIFICATION	1.382327338418265E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999831613199134	WITHOUT_CLASSIFICATION	1.683868008660487E-5	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999980600326405	WITHOUT_CLASSIFICATION	1.9399673594954583E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.928022972443506	WITHOUT_CLASSIFICATION	0.07197702755649395	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.928022972443506	WITHOUT_CLASSIFICATION	0.07197702755649395	DEFECT
// block.yield depends on null to represent empty and nil to represent nil - [nil] vs [] //assert argsNode != null : "argsNode is not null";	WITHOUT_CLASSIFICATION	0.9849835526760057	WITHOUT_CLASSIFICATION	0.01501644732399421	DEFECT
// assign given optional arguments to their variables	WITHOUT_CLASSIFICATION	0.9998489896282353	WITHOUT_CLASSIFICATION	1.5101037176456163E-4	DEFECT
// in-frame EvalState should already have receiver set as self, continue to use it	WITHOUT_CLASSIFICATION	0.9993532266268342	WITHOUT_CLASSIFICATION	6.467733731657679E-4	DEFECT
// assign the default values, adding to the end of allArgs	WITHOUT_CLASSIFICATION	0.9996843051775454	WITHOUT_CLASSIFICATION	3.156948224546731E-4	DEFECT
// Make sure the appropriate scope has proper size. See JRUBY-2046.	WITHOUT_CLASSIFICATION	0.9999183227923699	WITHOUT_CLASSIFICATION	8.167720763009358E-5	DEFECT
// Experimental class reification support, to create real Java classes // for Ruby classes after the first opening	WITHOUT_CLASSIFICATION	0.9999852652576886	WITHOUT_CLASSIFICATION	1.473474231142539E-5	DEFECT
// This should never happen past parse, but just bulletproof this just in case	WITHOUT_CLASSIFICATION	0.9987520333564508	WITHOUT_CLASSIFICATION	0.0012479666435492298	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9941063443780008	WITHOUT_CLASSIFICATION	0.005893655621999145	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9997227390302055	WITHOUT_CLASSIFICATION	2.772609697946191E-4	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999930891708532	WITHOUT_CLASSIFICATION	6.910829146849324E-6	DEFECT
// never visited, should be ok	WITHOUT_CLASSIFICATION	0.9997055612726173	WITHOUT_CLASSIFICATION	2.944387273826009E-4	DEFECT
// If no explicit block passed to super, then use the one passed in, unless it's explicitly cleared with nil	WITHOUT_CLASSIFICATION	0.9999936812661836	WITHOUT_CLASSIFICATION	6.318733816455401E-6	DEFECT
// JRUBY-530 until case	WITHOUT_CLASSIFICATION	0.9999873378794099	WITHOUT_CLASSIFICATION	1.266212059013095E-5	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999946503541347	WITHOUT_CLASSIFICATION	5.349645865319187E-6	DEFECT
// For 'b.foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9992030238950285	WITHOUT_CLASSIFICATION	7.969761049714787E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9995442590508925	WITHOUT_CLASSIFICATION	4.5574094910758424E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9995442590508925	WITHOUT_CLASSIFICATION	4.5574094910758424E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999980600326405	WITHOUT_CLASSIFICATION	1.9399673594954583E-5	DEFECT
// The name of the variable	WITHOUT_CLASSIFICATION	0.999980600326405	WITHOUT_CLASSIFICATION	1.9399673594954583E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.928022972443506	WITHOUT_CLASSIFICATION	0.07197702755649395	DEFECT
// Empirical Observations: // null -> Some arity // argsNode == this.argsNode then check for arity changes // newline(splatnode) -> argspushnode	WITHOUT_CLASSIFICATION	0.9999905196122928	WITHOUT_CLASSIFICATION	9.480387707235454E-6	DEFECT
//assert !(value instanceof RubyArray)  : "Not an array";	WITHOUT_CLASSIFICATION	0.9993425320866068	WITHOUT_CLASSIFICATION	6.574679133931404E-4	DEFECT
// Serialization killed our dynamic scope.  We can just create an empty one // since serialization cannot serialize an eval (which is the only thing // which is capable of having a non-empty dynamic scope).	WITHOUT_CLASSIFICATION	0.9999610784491504	WITHOUT_CLASSIFICATION	3.892155084956404E-5	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997839153440662	WITHOUT_CLASSIFICATION	2.160846559337965E-4	DEFECT
// We could probably also detect if LHS value came out of cache and avoid some of this	WITHOUT_CLASSIFICATION	0.9995244235560398	WITHOUT_CLASSIFICATION	4.755764439602604E-4	DEFECT
//        assert thenBody != null : "thenBody is not null"; //        assert elseBody != null : "elseBody is not null";	WITHOUT_CLASSIFICATION	0.995578569487333	WITHOUT_CLASSIFICATION	0.0044214305126669675	DEFECT
// add in reverse order	WITHOUT_CLASSIFICATION	0.9999380416675553	WITHOUT_CLASSIFICATION	6.19583324446044E-5	DEFECT
// in order to make pragma's noops we set location to a special value	WITHOUT_CLASSIFICATION	0.9951980530086585	WITHOUT_CLASSIFICATION	0.0048019469913414955	DEFECT
// ignore compiler pragmas	WITHOUT_CLASSIFICATION	0.9999805201340286	WITHOUT_CLASSIFICATION	1.9479865971400593E-5	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9992030238950285	WITHOUT_CLASSIFICATION	7.969761049714787E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9995442590508925	WITHOUT_CLASSIFICATION	4.5574094910758424E-4	DEFECT
// Store to temp so it does null out on us mid-stream	WITHOUT_CLASSIFICATION	0.9995442590508925	WITHOUT_CLASSIFICATION	4.5574094910758424E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// Make a nil node if no body.  Notice this is not part of AST.	WITHOUT_CLASSIFICATION	0.9941063443780008	WITHOUT_CLASSIFICATION	0.005893655621999145	DEFECT
// now used as an interpreter event	WITHOUT_CLASSIFICATION	0.9999930891708532	WITHOUT_CLASSIFICATION	6.910829146849324E-6	DEFECT
// No actual test, so do 'when' if when expression is not nil	WITHOUT_CLASSIFICATION	0.9998355452645188	WITHOUT_CLASSIFICATION	1.64454735481312E-4	DEFECT
// save entering the try if there's nothing to ensure	WITHOUT_CLASSIFICATION	0.9999416837013754	WITHOUT_CLASSIFICATION	5.8316298624654487E-5	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999992113011503	WITHOUT_CLASSIFICATION	7.88698849686662E-6	DEFECT
// For 'foo'	WITHOUT_CLASSIFICATION	0.999992113011503	WITHOUT_CLASSIFICATION	7.88698849686662E-6	DEFECT
// admittedly inefficient	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999885198299255	WITHOUT_CLASSIFICATION	1.1480170074323697E-5	DEFECT
// What static scoping relationship exists when it comes into being.	WITHOUT_CLASSIFICATION	0.9995256471612147	WITHOUT_CLASSIFICATION	4.7435283878522323E-4	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999981400426085	WITHOUT_CLASSIFICATION	1.8599573915121836E-5	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999925139165321	WITHOUT_CLASSIFICATION	7.486083467861705E-6	DEFECT
// just rethrow	WITHOUT_CLASSIFICATION	0.9999925139165321	WITHOUT_CLASSIFICATION	7.486083467861705E-6	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9996054501412381	WITHOUT_CLASSIFICATION	3.945498587618436E-4	DEFECT
// clear exception when handled or retried	WITHOUT_CLASSIFICATION	0.9996054501412381	WITHOUT_CLASSIFICATION	3.945498587618436E-4	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999929334663603	WITHOUT_CLASSIFICATION	7.066533639580383E-6	DEFECT
// no takers; bubble up	WITHOUT_CLASSIFICATION	0.9999929334663603	WITHOUT_CLASSIFICATION	7.066533639580383E-6	DEFECT
// Execute rescue block	WITHOUT_CLASSIFICATION	0.9999900886668356	WITHOUT_CLASSIFICATION	9.911333164441106E-6	DEFECT
// If no exception is thrown execute else block	WITHOUT_CLASSIFICATION	0.9996504294074025	WITHOUT_CLASSIFICATION	3.495705925975746E-4	DEFECT
// index of variable for this arg	WITHOUT_CLASSIFICATION	0.9991100285770017	WITHOUT_CLASSIFICATION	8.899714229983578E-4	DEFECT
// only a marker interface	WITHOUT_CLASSIFICATION	0.9999667393708004	WITHOUT_CLASSIFICATION	3.326062919960322E-5	DEFECT
// don't attempt to coerce to array, just wrap and return	WITHOUT_CLASSIFICATION	0.9998651020044568	WITHOUT_CLASSIFICATION	1.3489799554320325E-4	DEFECT
// pragmas	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// The method also needs a scope, do both	WITHOUT_CLASSIFICATION	0.9998957089768017	WITHOUT_CLASSIFICATION	1.0429102319822697E-4	DEFECT
// We're doing normal framed compilation or the method needs a frame	WITHOUT_CLASSIFICATION	0.9999284138917932	WITHOUT_CLASSIFICATION	7.15861082066935E-5	DEFECT
// The method doesn't need a scope or static scope; frame only	WITHOUT_CLASSIFICATION	0.999662403147293	WITHOUT_CLASSIFICATION	3.3759685270699915E-4	DEFECT
// The method doesn't need a scope, but has static scope needs; use a dummy scope	WITHOUT_CLASSIFICATION	0.9999630202308596	WITHOUT_CLASSIFICATION	3.697976914047709E-5	DEFECT
// Proc.new needs the caller's block to instantiate a proc	WITHOUT_CLASSIFICATION	0.9998078934009508	WITHOUT_CLASSIFICATION	1.9210659904925805E-4	DEFECT
// check for Proc.new, an especially magic method	WITHOUT_CLASSIFICATION	0.9999650439806503	WITHOUT_CLASSIFICATION	3.495601934966656E-5	DEFECT
// long, slow way causes disabling	WITHOUT_CLASSIFICATION	0.9997101568118951	WITHOUT_CLASSIFICATION	2.898431881048431E-4	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999524728176766	WITHOUT_CLASSIFICATION	4.7527182323347826E-5	DEFECT
// ok, we have fast paths	WITHOUT_CLASSIFICATION	0.9999524728176766	WITHOUT_CLASSIFICATION	4.7527182323347826E-5	DEFECT
// long, slow way causes disabling for defined	WITHOUT_CLASSIFICATION	0.9998211212214099	WITHOUT_CLASSIFICATION	1.7887877859003627E-4	DEFECT
// we set scope-aware to true to force heap-based locals	WITHOUT_CLASSIFICATION	0.9998775473576442	WITHOUT_CLASSIFICATION	1.2245264235586232E-4	DEFECT
// Because Regexp#=== sets backref, we have to make this backref-aware	WITHOUT_CLASSIFICATION	0.9979975974523214	WITHOUT_CLASSIFICATION	0.0020024025476786094	DEFECT
// encountered a node we don't recognize, set everything to true to disable optz	WITHOUT_CLASSIFICATION	0.999568200590515	WITHOUT_CLASSIFICATION	4.317994094851367E-4	DEFECT
// only arrays that are "lightweight" are being used as args arrays	WITHOUT_CLASSIFICATION	0.9999588341996858	WITHOUT_CLASSIFICATION	4.1165800314256106E-5	DEFECT
// otherwise, it's a literal array	WITHOUT_CLASSIFICATION	0.9996622523516321	WITHOUT_CLASSIFICATION	3.3774764836786336E-4	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999655198915971	WITHOUT_CLASSIFICATION	3.4480108402900163E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996364919520865	WITHOUT_CLASSIFICATION	3.635080479135214E-4	DEFECT
// compile first node as non-expr and then second node	WITHOUT_CLASSIFICATION	0.9999148386184166	WITHOUT_CLASSIFICATION	8.51613815834098E-5	DEFECT
// last node, either !instanceof WhenNode or null, is the else	WITHOUT_CLASSIFICATION	0.9995012009136885	WITHOUT_CLASSIFICATION	4.987990863114518E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999590132766245	WITHOUT_CLASSIFICATION	4.098672337556983E-5	DEFECT
// splatted when, can't do it yet	WITHOUT_CLASSIFICATION	0.9990684203162045	WITHOUT_CLASSIFICATION	9.315796837954691E-4	DEFECT
// if __send__ with a literal symbol, compile it as a direct fcall	WITHOUT_CLASSIFICATION	0.9998628358158301	WITHOUT_CLASSIFICATION	1.3716418416996384E-4	DEFECT
// NOTE: Currently this optimization is limited to the following situations: // * All expressions must be int-ranged literal fixnums // It also still emits the code for the "safe" when logic, which is rather // wasteful (since it essentially doubles each code body). As such it is // normally disabled, but it serves as an example of how this optimization // could be done. Ideally, it should be combined with the when processing // to improve code reuse before it's generally available.	WITHOUT_CLASSIFICATION	0.9999856695477962	WITHOUT_CLASSIFICATION	1.4330452203838389E-5	DEFECT
// aggregate when nodes into a list, unfortunately, this is no	WITHOUT_CLASSIFICATION	0.9984252099433512	WITHOUT_CLASSIFICATION	0.0015747900566488529	DEFECT
// one arg but it's an array, treat it as a proper array	WITHOUT_CLASSIFICATION	0.9999735055969714	WITHOUT_CLASSIFICATION	2.6494403028546755E-5	DEFECT
// can't do it	WITHOUT_CLASSIFICATION	0.9999780782314025	WITHOUT_CLASSIFICATION	2.192176859743507E-5	DEFECT
// otherwise, use normal args compiler	WITHOUT_CLASSIFICATION	0.9998436539252128	WITHOUT_CLASSIFICATION	1.5634607478728265E-4	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999930815387749	WITHOUT_CLASSIFICATION	6.918461225104964E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999930815387749	WITHOUT_CLASSIFICATION	6.918461225104964E-5	DEFECT
// these are all simple cases that don't require the heavier defined logic	WITHOUT_CLASSIFICATION	0.9999777919431634	WITHOUT_CLASSIFICATION	2.220805683659486E-5	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//[]	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//          context.swapValues(); //context.consumeCurrentValue();	WITHOUT_CLASSIFICATION	0.999671166274184	WITHOUT_CLASSIFICATION	3.288337258161179E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[] //[self] //[RubyClass] //[RubyClass, RubyClass]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[RubyClass]	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//[RubyClass] //[RubyClass, RubyClass] //[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// if root of method is rescue, compile as a light rescue	WITHOUT_CLASSIFICATION	0.9995858497537132	WITHOUT_CLASSIFICATION	4.1415024628678243E-4	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999753183084531	WITHOUT_CLASSIFICATION	2.468169154688335E-5	DEFECT
// inspect body and args	WITHOUT_CLASSIFICATION	0.9999753183084531	WITHOUT_CLASSIFICATION	2.468169154688335E-5	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999758239178242	WITHOUT_CLASSIFICATION	2.417608217575963E-5	DEFECT
// if root of method is rescue, compile as light rescue	WITHOUT_CLASSIFICATION	0.9996304302916889	WITHOUT_CLASSIFICATION	3.695697083110695E-4	DEFECT
// invoke run with threadcontext and topself	WITHOUT_CLASSIFICATION	0.999884084362315	WITHOUT_CLASSIFICATION	1.1591563768489697E-4	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass] //[IRubyObject]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[RubyClass] //[]	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[String] //[String, String] //[String] //[String, RubyClass] //[String, RubyClass, RubyClass] //[String, RubyClass]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990979455861502	WITHOUT_CLASSIFICATION	9.020544138498525E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994542093377808	WITHOUT_CLASSIFICATION	5.457906622191133E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994542093377808	WITHOUT_CLASSIFICATION	5.457906622191133E-4	DEFECT
// not an expression, only compile the elements	WITHOUT_CLASSIFICATION	0.9994542093377808	WITHOUT_CLASSIFICATION	5.457906622191133E-4	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990979455861502	WITHOUT_CLASSIFICATION	9.020544138498525E-4	DEFECT
// force heap-scope behavior, since it uses parent's scope	WITHOUT_CLASSIFICATION	0.9999269818801936	WITHOUT_CLASSIFICATION	7.301811980638965E-5	DEFECT
// always false or nil	WITHOUT_CLASSIFICATION	0.99995547331926	WITHOUT_CLASSIFICATION	4.452668073995696E-5	DEFECT
// optimizations if we know ahead of time it will always be true or false	WITHOUT_CLASSIFICATION	0.9977658308341565	WITHOUT_CLASSIFICATION	0.002234169165843544	DEFECT
// normal	WITHOUT_CLASSIFICATION	0.9999567770592056	WITHOUT_CLASSIFICATION	4.3222940794402676E-5	DEFECT
// compile condition as non-expr and just compile "then" body	WITHOUT_CLASSIFICATION	0.9998653971577246	WITHOUT_CLASSIFICATION	1.3460284227543998E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999835343800537	WITHOUT_CLASSIFICATION	1.6465619946298788E-4	DEFECT
// just push nil for pragmas	WITHOUT_CLASSIFICATION	0.9999828554608081	WITHOUT_CLASSIFICATION	1.714453919185115E-5	DEFECT
// "assignment" means the value is already on the stack	WITHOUT_CLASSIFICATION	0.9996920841299344	WITHOUT_CLASSIFICATION	3.0791587006570505E-4	DEFECT
// compile first node only	WITHOUT_CLASSIFICATION	0.9999590132766245	WITHOUT_CLASSIFICATION	4.098672337556983E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// eval new value, call operator on old value, and assign	WITHOUT_CLASSIFICATION	0.9999755532764865	WITHOUT_CLASSIFICATION	2.444672351355326E-5	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999341140369082	WITHOUT_CLASSIFICATION	6.588596309178382E-5	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.999983806706256	WITHOUT_CLASSIFICATION	1.6193293744108412E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.969641189232686	WITHOUT_CLASSIFICATION	0.030358810767313848	DEFECT
// normal items at the "head" of the masgn	WITHOUT_CLASSIFICATION	0.9998796159358979	WITHOUT_CLASSIFICATION	1.2038406410209754E-4	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9988861603932994	WITHOUT_CLASSIFICATION	0.0011138396067006725	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9998409019681007	WITHOUT_CLASSIFICATION	1.5909803189931594E-4	DEFECT
// only supports simple parallel assignment of up to 10 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9994753937735248	WITHOUT_CLASSIFICATION	5.246062264752332E-4	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9983816732736296	WITHOUT_CLASSIFICATION	0.0016183267263704152	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999748857897566	WITHOUT_CLASSIFICATION	2.5114210243471623E-5	DEFECT
//RedoNode redoNode = (RedoNode)node;	WITHOUT_CLASSIFICATION	0.9983397203516692	WITHOUT_CLASSIFICATION	0.0016602796483307623	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999984998921528	WITHOUT_CLASSIFICATION	1.500107847195949E-5	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999193072544216	WITHOUT_CLASSIFICATION	8.06927455783629E-5	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999582012828306	WITHOUT_CLASSIFICATION	4.179871716939402E-4	DEFECT
// if arity 1, just compile the one element to save us the array cost	WITHOUT_CLASSIFICATION	0.9999041294882322	WITHOUT_CLASSIFICATION	9.587051176796564E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// [recv]	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// compile into array	WITHOUT_CLASSIFICATION	0.9999659678387014	WITHOUT_CLASSIFICATION	3.4032161298589864E-5	DEFECT
// compile first node as non-expr and compile second node	WITHOUT_CLASSIFICATION	0.999836910059372	WITHOUT_CLASSIFICATION	1.6308994062807274E-4	DEFECT
// check if it's an immediate, and don't outline	WITHOUT_CLASSIFICATION	0.999974546159604	WITHOUT_CLASSIFICATION	2.5453840395965422E-5	DEFECT
// condition is always true, just compile it and not body	WITHOUT_CLASSIFICATION	0.984737149377429	WITHOUT_CLASSIFICATION	0.015262850622571102	DEFECT
// force static scope to claim restarg at 0, so it only implements the [] version of __file__	WITHOUT_CLASSIFICATION	0.9984998832039043	WITHOUT_CLASSIFICATION	0.0015001167960957027	DEFECT
// create method for toplevel of script	WITHOUT_CLASSIFICATION	0.9992816273077781	WITHOUT_CLASSIFICATION	7.183726922217717E-4	DEFECT
// it's a multiple-statement body, iterate over all elements in turn and chain if it get too long	WITHOUT_CLASSIFICATION	0.9997078239025623	WITHOUT_CLASSIFICATION	2.9217609743774917E-4	DEFECT
// send it along as arity-specific, we don't need the array	WITHOUT_CLASSIFICATION	0.9999187425622296	WITHOUT_CLASSIFICATION	8.125743777043482E-5	DEFECT
// single-statement body, just compile it	WITHOUT_CLASSIFICATION	0.9998747696523091	WITHOUT_CLASSIFICATION	1.2523034769084385E-4	DEFECT
// leave as a normal array	WITHOUT_CLASSIFICATION	0.9999806092377849	WITHOUT_CLASSIFICATION	1.9390762215150956E-5	DEFECT
// This method has JITed already or has been abandoned. Bail out.	WITHOUT_CLASSIFICATION	0.9995445379564807	WITHOUT_CLASSIFICATION	4.5546204351933425E-4	DEFECT
// The cache is full. Abandon JIT for this method and bail out.	WITHOUT_CLASSIFICATION	0.9991944520095719	WITHOUT_CLASSIFICATION	8.055479904281432E-4	DEFECT
// check args first, since body inspection can depend on args	WITHOUT_CLASSIFICATION	0.9999758239178242	WITHOUT_CLASSIFICATION	2.417608217575963E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// create the closure class and instantiate it	WITHOUT_CLASSIFICATION	0.9999363274752934	WITHOUT_CLASSIFICATION	6.367252470660816E-5	DEFECT
// no args, do not pass args processor	WITHOUT_CLASSIFICATION	0.9990979455861502	WITHOUT_CLASSIFICATION	9.020544138498525E-4	DEFECT
// need the array, use unoptz version	WITHOUT_CLASSIFICATION	0.999835343800537	WITHOUT_CLASSIFICATION	1.6465619946298788E-4	DEFECT
// try optz version	WITHOUT_CLASSIFICATION	0.9999341140369082	WITHOUT_CLASSIFICATION	6.588596309178382E-5	DEFECT
// expect value to be an array of nodes	WITHOUT_CLASSIFICATION	0.969641189232686	WITHOUT_CLASSIFICATION	0.030358810767313848	DEFECT
// head must not be null and there must be no "args" (like *arg)	WITHOUT_CLASSIFICATION	0.9988861603932994	WITHOUT_CLASSIFICATION	0.0011138396067006725	DEFECT
// sizes must match	WITHOUT_CLASSIFICATION	0.999983806706256	WITHOUT_CLASSIFICATION	1.6193293744108412E-5	DEFECT
// "head" must have no non-trivial assigns (array groupings, basically)	WITHOUT_CLASSIFICATION	0.9998409019681007	WITHOUT_CLASSIFICATION	1.5909803189931594E-4	DEFECT
// if we get here, no optz cases work; fall back on unoptz.	WITHOUT_CLASSIFICATION	0.9999748857897566	WITHOUT_CLASSIFICATION	2.5114210243471623E-5	DEFECT
// perform assignment for the next node	WITHOUT_CLASSIFICATION	0.9983816732736296	WITHOUT_CLASSIFICATION	0.0016183267263704152	DEFECT
// done processing args	WITHOUT_CLASSIFICATION	0.999984998921528	WITHOUT_CLASSIFICATION	1.500107847195949E-5	DEFECT
// Check if the method has been explicitly excluded	WITHOUT_CLASSIFICATION	0.9999924789038104	WITHOUT_CLASSIFICATION	7.521096189607108E-6	DEFECT
// class could not be found nor generated; give up on JIT and bail out	WITHOUT_CLASSIFICATION	0.999815217108016	WITHOUT_CLASSIFICATION	1.8478289198394383E-4	DEFECT
// successfully got back a jitted method	WITHOUT_CLASSIFICATION	0.9995448796933573	WITHOUT_CLASSIFICATION	4.551203066427627E-4	DEFECT
// finally, grab the script	WITHOUT_CLASSIFICATION	0.9999901007676313	WITHOUT_CLASSIFICATION	9.89923236864528E-6	DEFECT
// logEvery n methods based on configuration	WITHOUT_CLASSIFICATION	0.9999289308145949	WITHOUT_CLASSIFICATION	7.106918540516042E-5	DEFECT
// Time the compilation	WITHOUT_CLASSIFICATION	0.9999900616149825	WITHOUT_CLASSIFICATION	9.938385017491593E-6	DEFECT
// we have a body, do a full-on method	WITHOUT_CLASSIFICATION	0.9998766307777679	WITHOUT_CLASSIFICATION	1.2336922223219062E-4	DEFECT
// If we don't have a body, check for required or opt args // if opt args, they could have side effects // if required args, need to raise errors if too few args passed // otherwise, method does nothing, make it a nop	WITHOUT_CLASSIFICATION	0.9990951566757781	WITHOUT_CLASSIFICATION	9.048433242219147E-4	DEFECT
// if we haven't already decided on a do-nothing call	WITHOUT_CLASSIFICATION	0.9999351138224402	WITHOUT_CLASSIFICATION	6.488617755973723E-5	DEFECT
// only supports simple parallel assignment of up to 4 values to the same number of assignees	WITHOUT_CLASSIFICATION	0.9993034592377129	WITHOUT_CLASSIFICATION	6.965407622871041E-4	DEFECT
// normal items at the front or back of the masgn	WITHOUT_CLASSIFICATION	0.9997729083050377	WITHOUT_CLASSIFICATION	2.2709169496216424E-4	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9972492547451464	WITHOUT_CLASSIFICATION	0.002750745254853675	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9995969216769682	WITHOUT_CLASSIFICATION	4.0307832303177263E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999026144535547	WITHOUT_CLASSIFICATION	9.73855464453503E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996742486478113	WITHOUT_CLASSIFICATION	3.257513521887055E-4	DEFECT
// Define the annotation for the method	WITHOUT_CLASSIFICATION	0.9998747884697868	WITHOUT_CLASSIFICATION	1.2521153021319753E-4	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9996152287596584	WITHOUT_CLASSIFICATION	3.847712403415892E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9959060820247223	WITHOUT_CLASSIFICATION	0.004093917975277726	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.999923743454399	WITHOUT_CLASSIFICATION	7.625654560093745E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// value is already on stack, save it for later	WITHOUT_CLASSIFICATION	0.9967759763949687	WITHOUT_CLASSIFICATION	0.0032240236050312693	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999504693608208	WITHOUT_CLASSIFICATION	4.953063917917707E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg2*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// receiver first, so we know which call site to use	WITHOUT_CLASSIFICATION	0.9999504693608208	WITHOUT_CLASSIFICATION	4.953063917917707E-5	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9997654484416477	WITHOUT_CLASSIFICATION	2.345515583523018E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg0*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg1*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*args*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9995518701425987	WITHOUT_CLASSIFICATION	4.4812985740125326E-4	DEFECT
// get call site and thread context	WITHOUT_CLASSIFICATION	0.9995518701425987	WITHOUT_CLASSIFICATION	4.4812985740125326E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.999719317873734	WITHOUT_CLASSIFICATION	2.8068212626597866E-4	DEFECT
// evaluate and save receiver and args	WITHOUT_CLASSIFICATION	0.999719317873734	WITHOUT_CLASSIFICATION	2.8068212626597866E-4	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999506425822026	WITHOUT_CLASSIFICATION	4.935741779732854E-5	DEFECT
// invoke	WITHOUT_CLASSIFICATION	0.9999506425822026	WITHOUT_CLASSIFICATION	4.935741779732854E-5	DEFECT
// check if it's true, ending if so	WITHOUT_CLASSIFICATION	0.9999921190503279	WITHOUT_CLASSIFICATION	7.880949672088255E-6	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9922815459974765	WITHOUT_CLASSIFICATION	0.0077184540025234975	DEFECT
// not true, eval value and assign	WITHOUT_CLASSIFICATION	0.9922815459974765	WITHOUT_CLASSIFICATION	0.0077184540025234975	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9998870079060114	WITHOUT_CLASSIFICATION	1.1299209398863252E-4	DEFECT
// thread context, receiver and original args	WITHOUT_CLASSIFICATION	0.9998870079060114	WITHOUT_CLASSIFICATION	1.1299209398863252E-4	DEFECT
// eval value for assignment	WITHOUT_CLASSIFICATION	0.9998820362212315	WITHOUT_CLASSIFICATION	1.1796377876843354E-4	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999900029164623	WITHOUT_CLASSIFICATION	9.997083537731258E-6	DEFECT
// call site	WITHOUT_CLASSIFICATION	0.9999900029164623	WITHOUT_CLASSIFICATION	9.997083537731258E-6	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998977483807983	WITHOUT_CLASSIFICATION	1.0225161920173956E-4	DEFECT
// check if it's true, ending if not	WITHOUT_CLASSIFICATION	0.9996173227369362	WITHOUT_CLASSIFICATION	3.8267726306382056E-4	DEFECT
// eval value and save it	WITHOUT_CLASSIFICATION	0.9998196985243637	WITHOUT_CLASSIFICATION	1.803014756363323E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// depending on size of original args, call appropriate utility method	WITHOUT_CLASSIFICATION	0.9998977483807983	WITHOUT_CLASSIFICATION	1.0225161920173956E-4	DEFECT
// receiver, args, result, value	WITHOUT_CLASSIFICATION	0.9994286311207584	WITHOUT_CLASSIFICATION	5.713688792416102E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// super uses current block if none given	WITHOUT_CLASSIFICATION	0.9999836307153313	WITHOUT_CLASSIFICATION	1.6369284668784488E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999512822738817	WITHOUT_CLASSIFICATION	4.8717726118254386E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999968600541286	WITHOUT_CLASSIFICATION	3.1399458713214967E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999974987378721	WITHOUT_CLASSIFICATION	2.5012621278520597E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999974987378721	WITHOUT_CLASSIFICATION	2.5012621278520597E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999943353700398	WITHOUT_CLASSIFICATION	5.664629960203278E-6	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999435513456474	WITHOUT_CLASSIFICATION	5.6448654352525905E-5	DEFECT
// pop extra attr value	WITHOUT_CLASSIFICATION	0.9999435513456474	WITHOUT_CLASSIFICATION	5.6448654352525905E-5	DEFECT
// arg and receiver already present on the stack	WITHOUT_CLASSIFICATION	0.9999373170921722	WITHOUT_CLASSIFICATION	6.268290782785524E-5	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// [adapter, tc]	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// args	WITHOUT_CLASSIFICATION	0.9999512822738817	WITHOUT_CLASSIFICATION	4.8717726118254386E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// no args, no block	WITHOUT_CLASSIFICATION	0.9999968600541286	WITHOUT_CLASSIFICATION	3.1399458713214967E-6	DEFECT
// no args, with block	WITHOUT_CLASSIFICATION	0.9999974987378721	WITHOUT_CLASSIFICATION	2.5012621278520597E-6	DEFECT
// with args, no block	WITHOUT_CLASSIFICATION	0.9999974987378721	WITHOUT_CLASSIFICATION	2.5012621278520597E-6	DEFECT
// with args, with block	WITHOUT_CLASSIFICATION	0.9999943353700398	WITHOUT_CLASSIFICATION	5.664629960203278E-6	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// retrieve scope from scopes array	WITHOUT_CLASSIFICATION	0.9996624793159516	WITHOUT_CLASSIFICATION	3.3752068404834787E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999780777407818	WITHOUT_CLASSIFICATION	2.192225921822381E-5	DEFECT
// retrieve call site from sites array	WITHOUT_CLASSIFICATION	0.99977902407775	WITHOUT_CLASSIFICATION	2.2097592225003997E-4	DEFECT
// add name to call site list	WITHOUT_CLASSIFICATION	0.9999776034120551	WITHOUT_CLASSIFICATION	2.2396587944899967E-5	DEFECT
// module is on top of stack	WITHOUT_CLASSIFICATION	0.9999509611197371	WITHOUT_CLASSIFICATION	4.903888026292371E-5	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999896933610727	WITHOUT_CLASSIFICATION	1.0306638927393312E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999893472067883	WITHOUT_CLASSIFICATION	1.065279321173005E-5	DEFECT
// build descriptor string	WITHOUT_CLASSIFICATION	0.9999893472067883	WITHOUT_CLASSIFICATION	1.065279321173005E-5	DEFECT
// generate call sites initialization code	WITHOUT_CLASSIFICATION	0.999938462031544	WITHOUT_CLASSIFICATION	6.153796845596771E-5	DEFECT
// generate symbols initialization code	WITHOUT_CLASSIFICATION	0.9999015298713138	WITHOUT_CLASSIFICATION	9.847012868621972E-5	DEFECT
// generate fixnums initialization code	WITHOUT_CLASSIFICATION	0.9999015298713138	WITHOUT_CLASSIFICATION	9.847012868621972E-5	DEFECT
// generate constants initialization code	WITHOUT_CLASSIFICATION	0.9999406240409886	WITHOUT_CLASSIFICATION	5.937595901142153E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999015298713138	WITHOUT_CLASSIFICATION	9.847012868621972E-5	DEFECT
// generate regexps initialization code	WITHOUT_CLASSIFICATION	0.9999015298713138	WITHOUT_CLASSIFICATION	9.847012868621972E-5	DEFECT
// generate variable readers initialization code	WITHOUT_CLASSIFICATION	0.9999043677066595	WITHOUT_CLASSIFICATION	9.563229334055635E-5	DEFECT
// generate variable writers initialization code	WITHOUT_CLASSIFICATION	0.9999043677066595	WITHOUT_CLASSIFICATION	9.563229334055635E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999956460473647	WITHOUT_CLASSIFICATION	4.353952635304439E-5	DEFECT
// generate block bodies initialization code	WITHOUT_CLASSIFICATION	0.999956460473647	WITHOUT_CLASSIFICATION	4.353952635304439E-5	DEFECT
// generate bytelists initialization code	WITHOUT_CLASSIFICATION	0.9999015298713138	WITHOUT_CLASSIFICATION	9.847012868621972E-5	DEFECT
// generate method cache initialization code	WITHOUT_CLASSIFICATION	0.9999051652805203	WITHOUT_CLASSIFICATION	9.483471947964041E-5	DEFECT
// adapter, tc, recv, args{0,1}, block{0,1}]	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// use IRubyObject[]	WITHOUT_CLASSIFICATION	0.9999836684533984	WITHOUT_CLASSIFICATION	1.6331546601604104E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999348634897856	WITHOUT_CLASSIFICATION	6.51365102143918E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999750925371244	WITHOUT_CLASSIFICATION	2.490746287559911E-4	DEFECT
// No point in updating number if last number was same value.	WITHOUT_CLASSIFICATION	0.9997449525242669	WITHOUT_CLASSIFICATION	2.5504747573319025E-4	DEFECT
// load Object under value	WITHOUT_CLASSIFICATION	0.9997992736020258	WITHOUT_CLASSIFICATION	2.007263979741157E-4	DEFECT
// put under object array already present	WITHOUT_CLASSIFICATION	0.9997690663065009	WITHOUT_CLASSIFICATION	2.3093369349924523E-4	DEFECT
// if element count is less than 6, use helper methods	WITHOUT_CLASSIFICATION	0.9996209589374581	WITHOUT_CLASSIFICATION	3.790410625418904E-4	DEFECT
// This is pretty inefficient for building an array, so just raise an error if someone's using it for a lot of elements	WITHOUT_CLASSIFICATION	0.9990483259476489	WITHOUT_CLASSIFICATION	9.516740523511381E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9994548866237959	WITHOUT_CLASSIFICATION	5.451133762041231E-4	DEFECT
// if we have a specific-arity helper to construct an array for us, use that	WITHOUT_CLASSIFICATION	0.9994548866237959	WITHOUT_CLASSIFICATION	5.451133762041231E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9998149891100848	WITHOUT_CLASSIFICATION	1.8501088991520627E-4	DEFECT
// brute force construction inline	WITHOUT_CLASSIFICATION	0.9998149891100848	WITHOUT_CLASSIFICATION	1.8501088991520627E-4	DEFECT
// use specific-arity for as much as possible	WITHOUT_CLASSIFICATION	0.9996733104546685	WITHOUT_CLASSIFICATION	3.266895453315533E-4	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999956901130745	WITHOUT_CLASSIFICATION	4.309886925495243E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999956901130745	WITHOUT_CLASSIFICATION	4.309886925495243E-6	DEFECT
// call isTrue on the result	WITHOUT_CLASSIFICATION	0.9999956901130745	WITHOUT_CLASSIFICATION	4.309886925495243E-6	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999830912611325	WITHOUT_CLASSIFICATION	1.6908738867532327E-5	DEFECT
// dup it since we need to return appropriately if it's false	WITHOUT_CLASSIFICATION	0.9999830912611325	WITHOUT_CLASSIFICATION	1.6908738867532327E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9996187997050825	WITHOUT_CLASSIFICATION	3.8120029491750155E-4	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999930348067176	WITHOUT_CLASSIFICATION	6.965193282397543E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999809958328616	WITHOUT_CLASSIFICATION	1.9004167138498472E-5	DEFECT
// skip catch block	WITHOUT_CLASSIFICATION	0.999996526939357	WITHOUT_CLASSIFICATION	3.4730606430581902E-6	DEFECT
// catch logic for flow-control: next, break	WITHOUT_CLASSIFICATION	0.999772205077382	WITHOUT_CLASSIFICATION	2.2779492261807663E-4	DEFECT
// next jump	WITHOUT_CLASSIFICATION	0.9998870747595172	WITHOUT_CLASSIFICATION	1.1292524048290242E-4	DEFECT
// exceptionNext target is for a next that doesn't push a new value, like this one	WITHOUT_CLASSIFICATION	0.999675552986842	WITHOUT_CLASSIFICATION	3.244470131579434E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// clear body or next result after each successful loop	WITHOUT_CLASSIFICATION	0.9996187997050825	WITHOUT_CLASSIFICATION	3.8120029491750155E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999811756852487	WITHOUT_CLASSIFICATION	1.8824314751331154E-5	DEFECT
// check the condition	WITHOUT_CLASSIFICATION	0.9999930348067176	WITHOUT_CLASSIFICATION	6.965193282397543E-6	DEFECT
// NE == nonzero (i.e. true)	WITHOUT_CLASSIFICATION	0.9999809958328616	WITHOUT_CLASSIFICATION	1.9004167138498472E-5	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9995964545501057	WITHOUT_CLASSIFICATION	4.035454498942335E-4	DEFECT
// break jump	WITHOUT_CLASSIFICATION	0.9999771317623122	WITHOUT_CLASSIFICATION	2.2868237687854803E-5	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998985414044422	WITHOUT_CLASSIFICATION	1.0145859555781287E-4	DEFECT
//[reg]	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// for regular expressions with the /o flag	WITHOUT_CLASSIFICATION	0.999933916173992	WITHOUT_CLASSIFICATION	6.608382600799338E-5	DEFECT
// inside a loop, jump to body	WITHOUT_CLASSIFICATION	0.9999490030493832	WITHOUT_CLASSIFICATION	5.0996950616751235E-5	DEFECT
// inside a loop, jump to conditional	WITHOUT_CLASSIFICATION	0.9995793421992571	WITHOUT_CLASSIFICATION	4.206578007428906E-4	DEFECT
// synthetic methods always have zero arg parameters	WITHOUT_CLASSIFICATION	0.9995964545501057	WITHOUT_CLASSIFICATION	4.035454498942335E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9997360860621468	WITHOUT_CLASSIFICATION	2.63913937853185E-4	DEFECT
// store previous exception for restoration if we rescue something	WITHOUT_CLASSIFICATION	0.9997360860621468	WITHOUT_CLASSIFICATION	2.63913937853185E-4	DEFECT
// if more than 4 vars, get values array too	WITHOUT_CLASSIFICATION	0.9996842129350137	WITHOUT_CLASSIFICATION	3.157870649862799E-4	DEFECT
// retry handling in the rescue block	WITHOUT_CLASSIFICATION	0.9999246657411515	WITHOUT_CLASSIFICATION	7.533425884849824E-5	DEFECT
// any exceptions raised must continue to be raised, skipping $! restoration	WITHOUT_CLASSIFICATION	0.9989174486194197	WITHOUT_CLASSIFICATION	0.001082551380580353	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9987931101285398	WITHOUT_CLASSIFICATION	0.0012068898714601612	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994295403225657	WITHOUT_CLASSIFICATION	5.704596774343116E-4	DEFECT
// Handle Flow exceptions, just propagating them	WITHOUT_CLASSIFICATION	0.9999754743958974	WITHOUT_CLASSIFICATION	2.452560410258876E-5	DEFECT
// rethrow to outer flow catcher	WITHOUT_CLASSIFICATION	0.9996061682330182	WITHOUT_CLASSIFICATION	3.938317669817195E-4	DEFECT
// Handle Ruby exceptions (RaiseException)	WITHOUT_CLASSIFICATION	0.9998294189372864	WITHOUT_CLASSIFICATION	1.705810627136113E-4	DEFECT
// inside a loop, break out of it // go to end of loop, leaving break value on stack	WITHOUT_CLASSIFICATION	0.9951238055890803	WITHOUT_CLASSIFICATION	0.004876194410919701	DEFECT
// false // zero	WITHOUT_CLASSIFICATION	0.9999862500767709	WITHOUT_CLASSIFICATION	1.3749923229068144E-5	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9996361762421221	WITHOUT_CLASSIFICATION	3.6382375787786457E-4	DEFECT
// and remaining jump exceptions should restore $!	WITHOUT_CLASSIFICATION	0.9987931101285398	WITHOUT_CLASSIFICATION	0.0012068898714601612	DEFECT
// restore the original exception	WITHOUT_CLASSIFICATION	0.9994295403225657	WITHOUT_CLASSIFICATION	5.704596774343116E-4	DEFECT
// retry handling in the rescue blocks	WITHOUT_CLASSIFICATION	0.9998305391213167	WITHOUT_CLASSIFICATION	1.694608786833528E-4	DEFECT
// push false	WITHOUT_CLASSIFICATION	0.9999858736560611	WITHOUT_CLASSIFICATION	1.4126343938996112E-5	DEFECT
//method.invokeinterface(p(IRubyObject.class), "getInstanceVariable", sig(IRubyObject.class, params(String.class)));	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//method.ifnonnull(trueLabel);	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// EQ == 0 (i.e. false)   //[C]	WITHOUT_CLASSIFICATION	0.9997587413480564	WITHOUT_CLASSIFICATION	2.412586519435345E-4	DEFECT
//[C, C] //[C, C, String] //[C, null|C]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[C]	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// push true	WITHOUT_CLASSIFICATION	0.9999875376162737	WITHOUT_CLASSIFICATION	1.2462383726312161E-5	DEFECT
// EQ != 0 (i.e. true)	WITHOUT_CLASSIFICATION	0.9999814811038072	WITHOUT_CLASSIFICATION	1.8518896192750156E-5	DEFECT
//[?, ?] //[?, boolean]	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
//[RubyModule] //[RubyModule, String]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//[boolean]	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// no receiver for singleton class	WITHOUT_CLASSIFICATION	0.9999521232248795	WITHOUT_CLASSIFICATION	4.787677512048002E-5	DEFECT
// but there's a superclass passed in, use it	WITHOUT_CLASSIFICATION	0.9999285432133059	WITHOUT_CLASSIFICATION	7.145678669404253E-5	DEFECT
// we re-set self to the class, but store the old self in a temporary local variable // this is to prevent it GCing in case the singleton is short-lived	WITHOUT_CLASSIFICATION	0.9999402524196077	WITHOUT_CLASSIFICATION	5.9747580392301055E-5	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999959918759588	WITHOUT_CLASSIFICATION	4.008124041167951E-6	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999855002782548	WITHOUT_CLASSIFICATION	1.4499721745153016E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999640244877491	WITHOUT_CLASSIFICATION	3.597551225088287E-5	DEFECT
// new instance to invoke run against	WITHOUT_CLASSIFICATION	0.9999285759525652	WITHOUT_CLASSIFICATION	7.142404743472208E-5	DEFECT
// CLASS BODY	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// static scope	WITHOUT_CLASSIFICATION	0.9999855002782548	WITHOUT_CLASSIFICATION	1.4499721745153016E-5	DEFECT
// Here starts the logic for the class definition	WITHOUT_CLASSIFICATION	0.9999640244877491	WITHOUT_CLASSIFICATION	3.597551225088287E-5	DEFECT
// finally with exception	WITHOUT_CLASSIFICATION	0.9999602299600074	WITHOUT_CLASSIFICATION	3.977003999253166E-5	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9998936958768209	WITHOUT_CLASSIFICATION	1.0630412317910086E-4	DEFECT
// otherwise, there's a receiver, so we pass that in directly for the sclass logic	WITHOUT_CLASSIFICATION	0.9998395902764695	WITHOUT_CLASSIFICATION	1.6040972353044788E-4	DEFECT
// original exception is on stack	WITHOUT_CLASSIFICATION	0.9991490851199757	WITHOUT_CLASSIFICATION	8.509148800242362E-4	DEFECT
// RaiseException is on stack, get RubyException out	WITHOUT_CLASSIFICATION	0.99983198657542	WITHOUT_CLASSIFICATION	1.680134245798615E-4	DEFECT
// updating position for same line; skip	WITHOUT_CLASSIFICATION	0.9998447420665791	WITHOUT_CLASSIFICATION	1.5525793342084583E-4	DEFECT
// callbacks to fill in method body	WITHOUT_CLASSIFICATION	0.9992313904938276	WITHOUT_CLASSIFICATION	7.686095061724652E-4	DEFECT
// prepare to call "def" utility method to handle def logic	WITHOUT_CLASSIFICATION	0.9999054211959724	WITHOUT_CLASSIFICATION	9.457880402769361E-5	DEFECT
// script object	WITHOUT_CLASSIFICATION	0.9999782026793504	WITHOUT_CLASSIFICATION	2.1797320649511623E-5	DEFECT
// arities	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// TODO assuming case is a fixnum	WITHOUT_CLASSIFICATION	0.9994010026914453	WITHOUT_CLASSIFICATION	5.98997308554689E-4	DEFECT
// we have an input case, prepare branching logic	WITHOUT_CLASSIFICATION	0.9995191931079588	WITHOUT_CLASSIFICATION	4.8080689204122996E-4	DEFECT
// we have optimized switch cases, build a lookupswitch	WITHOUT_CLASSIFICATION	0.9993402497710275	WITHOUT_CLASSIFICATION	6.597502289724574E-4	DEFECT
// checkcast the value; if match, fast path; otherwise proceed to slow logic	WITHOUT_CLASSIFICATION	0.999896623526474	WITHOUT_CLASSIFICATION	1.0337647352607409E-4	DEFECT
// expression-based tests + bodies	WITHOUT_CLASSIFICATION	0.9988974501929272	WITHOUT_CLASSIFICATION	0.0011025498070727651	DEFECT
// normal case, create a new label	WITHOUT_CLASSIFICATION	0.999853315786006	WITHOUT_CLASSIFICATION	1.4668421399394066E-4	DEFECT
// last conditional case, use defaultCase	WITHOUT_CLASSIFICATION	0.999399433997069	WITHOUT_CLASSIFICATION	6.005660029311277E-4	DEFECT
// do nothing; arity check is done before call	WITHOUT_CLASSIFICATION	0.9999838930554852	WITHOUT_CLASSIFICATION	1.610694451486342E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999446870517567	WITHOUT_CLASSIFICATION	5.5312948243387275E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999894539128462	WITHOUT_CLASSIFICATION	1.054608715378996E-4	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999353335530308	WITHOUT_CLASSIFICATION	6.466644696919405E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999699190794676	WITHOUT_CLASSIFICATION	3.0080920532451595E-5	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999699190794676	WITHOUT_CLASSIFICATION	3.0080920532451595E-5	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9993481234085024	WITHOUT_CLASSIFICATION	6.518765914975777E-4	DEFECT
// prepare labels for opt logic	WITHOUT_CLASSIFICATION	0.9993481234085024	WITHOUT_CLASSIFICATION	6.518765914975777E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9998521572229826	WITHOUT_CLASSIFICATION	1.4784277701745266E-4	DEFECT
// next, iterate over all optional args, until no more arguments	WITHOUT_CLASSIFICATION	0.9998521572229826	WITHOUT_CLASSIFICATION	1.4784277701745266E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.999832294367456	WITHOUT_CLASSIFICATION	1.6770563254398272E-4	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999946827928111	WITHOUT_CLASSIFICATION	5.317207188927436E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9997022315872305	WITHOUT_CLASSIFICATION	2.977684127694102E-4	DEFECT
// if there's args left and we want them, assign to rest arg	WITHOUT_CLASSIFICATION	0.9997338423673218	WITHOUT_CLASSIFICATION	2.661576326781749E-4	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999751970887333	WITHOUT_CLASSIFICATION	2.4802911266761588E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999730272123826	WITHOUT_CLASSIFICATION	2.6972787617425244E-5	DEFECT
// first, iterate over all pre args	WITHOUT_CLASSIFICATION	0.9998282258907916	WITHOUT_CLASSIFICATION	1.7177410920839173E-4	DEFECT
// then optional args	WITHOUT_CLASSIFICATION	0.999989029944644	WITHOUT_CLASSIFICATION	1.0970055356036386E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// now logic for each optional value	WITHOUT_CLASSIFICATION	0.999832294367456	WITHOUT_CLASSIFICATION	1.6770563254398272E-4	DEFECT
// otherwise no items left available, use the code for default	WITHOUT_CLASSIFICATION	0.9999946827928111	WITHOUT_CLASSIFICATION	5.317207188927436E-6	DEFECT
// pop extra failed value from first cycle and we're done	WITHOUT_CLASSIFICATION	0.9997022315872305	WITHOUT_CLASSIFICATION	2.977684127694102E-4	DEFECT
// assign remaining elements as an array for rest args (or empty array)	WITHOUT_CLASSIFICATION	0.9999751970887333	WITHOUT_CLASSIFICATION	2.4802911266761588E-5	DEFECT
// block argument assignment, if there's a block arg	WITHOUT_CLASSIFICATION	0.9999730272123826	WITHOUT_CLASSIFICATION	2.6972787617425244E-5	DEFECT
// if rest args, excluding post args	WITHOUT_CLASSIFICATION	0.9998955857359593	WITHOUT_CLASSIFICATION	1.044142640407829E-4	DEFECT
// finally, post args	WITHOUT_CLASSIFICATION	0.9999780901334949	WITHOUT_CLASSIFICATION	2.1909866505116313E-5	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9978387673113435	WITHOUT_CLASSIFICATION	0.002161232688656572	DEFECT
// not an expression, don't want result; pop it	WITHOUT_CLASSIFICATION	0.9978387673113435	WITHOUT_CLASSIFICATION	0.002161232688656572	DEFECT
// unwrap scopes to appropriate depth	WITHOUT_CLASSIFICATION	0.9993690017846101	WITHOUT_CLASSIFICATION	6.309982153899525E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999245496994549	WITHOUT_CLASSIFICATION	7.545030054511752E-5	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.994230838178588	WITHOUT_CLASSIFICATION	0.00576916182141198	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9996999436394829	WITHOUT_CLASSIFICATION	3.0005636051709604E-4	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9996999436394829	WITHOUT_CLASSIFICATION	3.0005636051709604E-4	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999882123595774	WITHOUT_CLASSIFICATION	1.178764042260444E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999970910084588	WITHOUT_CLASSIFICATION	2.9089915412002065E-6	DEFECT
// store the local vars in a local variable	WITHOUT_CLASSIFICATION	0.9998168780001891	WITHOUT_CLASSIFICATION	1.8312199981093555E-4	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999716394371064	WITHOUT_CLASSIFICATION	2.8360562893609557E-4	DEFECT
// return in a class body raises error	WITHOUT_CLASSIFICATION	0.9999292247453311	WITHOUT_CLASSIFICATION	7.077525466893176E-5	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9972492547451464	WITHOUT_CLASSIFICATION	0.002750745254853675	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9995969216769682	WITHOUT_CLASSIFICATION	4.0307832303177263E-4	DEFECT
// end of variable scope	WITHOUT_CLASSIFICATION	0.9999026144535547	WITHOUT_CLASSIFICATION	9.73855464453503E-5	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996742486478113	WITHOUT_CLASSIFICATION	3.257513521887055E-4	DEFECT
// load block from [] version of method	WITHOUT_CLASSIFICATION	0.9959060820247223	WITHOUT_CLASSIFICATION	0.004093917975277726	DEFECT
// normal return for method body. return jump for within a begin/rescue/ensure	WITHOUT_CLASSIFICATION	0.999923743454399	WITHOUT_CLASSIFICATION	7.625654560093745E-5	DEFECT
// declare locals for Java debugging purposes	WITHOUT_CLASSIFICATION	0.999882123595774	WITHOUT_CLASSIFICATION	1.178764042260444E-4	DEFECT
// class bodies prepare their own dynamic scope, so let it do that	WITHOUT_CLASSIFICATION	0.9999970910084588	WITHOUT_CLASSIFICATION	2.9089915412002065E-6	DEFECT
// load args[0] which will be the IRubyObject representing block args	WITHOUT_CLASSIFICATION	0.999716394371064	WITHOUT_CLASSIFICATION	2.8360562893609557E-4	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9995332437565988	WITHOUT_CLASSIFICATION	4.667562434012989E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.994230838178588	WITHOUT_CLASSIFICATION	0.00576916182141198	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.994230838178588	WITHOUT_CLASSIFICATION	0.00576916182141198	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9996361762421221	WITHOUT_CLASSIFICATION	3.6382375787786457E-4	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9996361762421221	WITHOUT_CLASSIFICATION	3.6382375787786457E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9939689578882236	WITHOUT_CLASSIFICATION	0.006031042111776421	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9939689578882236	WITHOUT_CLASSIFICATION	0.006031042111776421	DEFECT
// store the local vars in a local variable if there are any	WITHOUT_CLASSIFICATION	0.9999863872644896	WITHOUT_CLASSIFICATION	1.3612735510448263E-5	DEFECT
// if more than 4 locals, get and populate the locals array too	WITHOUT_CLASSIFICATION	0.9997102524124095	WITHOUT_CLASSIFICATION	2.897475875904601E-4	DEFECT
// fill local vars with nil, to avoid checking every access.	WITHOUT_CLASSIFICATION	0.9997490816900616	WITHOUT_CLASSIFICATION	2.509183099383445E-4	DEFECT
// default for starting tempVariableIndex is ok	WITHOUT_CLASSIFICATION	0.9999118403011094	WITHOUT_CLASSIFICATION	8.815969889066467E-5	DEFECT
// store the local vars in a local variable for preparing the class (using previous scope)	WITHOUT_CLASSIFICATION	0.9999239638171782	WITHOUT_CLASSIFICATION	7.60361828218136E-5	DEFECT
// store the new local vars in a local variable	WITHOUT_CLASSIFICATION	0.9999427877425381	WITHOUT_CLASSIFICATION	5.721225746198855E-5	DEFECT
// in 1.8 mode, this will be a RubyArray containing the arguments // in 1.9 mode, this will be an IRubyObject[]	WITHOUT_CLASSIFICATION	0.9996404861625494	WITHOUT_CLASSIFICATION	3.59513837450512E-4	DEFECT
// no variable initialization, because we're reusing parent's scope (flat)	WITHOUT_CLASSIFICATION	0.9999402618458308	WITHOUT_CLASSIFICATION	5.973815416923246E-5	DEFECT
// for specific-index cases, clean up non-expression values	WITHOUT_CLASSIFICATION	0.999846835127129	WITHOUT_CLASSIFICATION	1.5316487287102173E-4	DEFECT
// set up a local Ruby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// if that succeeds, the others should as well	WITHOUT_CLASSIFICATION	0.9999508850059083	WITHOUT_CLASSIFICATION	4.9114994091555165E-5	DEFECT
// verify the class	WITHOUT_CLASSIFICATION	0.9999979635799425	WITHOUT_CLASSIFICATION	2.036420057492706E-6	DEFECT
// create dir if necessary	WITHOUT_CLASSIFICATION	0.999985896922096	WITHOUT_CLASSIFICATION	1.4103077903888947E-5	DEFECT
// Create the class with the appropriate class name and source file	WITHOUT_CLASSIFICATION	0.9999971394116944	WITHOUT_CLASSIFICATION	2.8605883056881783E-6	DEFECT
// add setPosition impl, which stores filename as constant to speed updates	WITHOUT_CLASSIFICATION	0.9997207815551794	WITHOUT_CLASSIFICATION	2.7921844482056674E-4	DEFECT
// thread context	WITHOUT_CLASSIFICATION	0.9999500838868975	WITHOUT_CLASSIFICATION	4.991611310247667E-5	DEFECT
// line number	WITHOUT_CLASSIFICATION	0.9998116703037817	WITHOUT_CLASSIFICATION	1.8832969621822364E-4	DEFECT
// invoke __file__ with threadcontext, self, args (null), and block (null)	WITHOUT_CLASSIFICATION	0.9999483081968346	WITHOUT_CLASSIFICATION	5.169180316541446E-5	DEFECT
// load always uses IRubyObject[], so simple closure offset calculation here	WITHOUT_CLASSIFICATION	0.9997328890480311	WITHOUT_CLASSIFICATION	2.6711095196885627E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9995969216769682	WITHOUT_CLASSIFICATION	4.0307832303177263E-4	DEFECT
// method is done, declare all variables	WITHOUT_CLASSIFICATION	0.9996742486478113	WITHOUT_CLASSIFICATION	3.257513521887055E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// we force argParamCount to 1 since we always know we'll have [] args	WITHOUT_CLASSIFICATION	0.9995332437565988	WITHOUT_CLASSIFICATION	4.667562434012989E-4	DEFECT
// chain to the next segment of this giant method	WITHOUT_CLASSIFICATION	0.994230838178588	WITHOUT_CLASSIFICATION	0.00576916182141198	DEFECT
// load all arguments straight through	WITHOUT_CLASSIFICATION	0.9996361762421221	WITHOUT_CLASSIFICATION	3.6382375787786457E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9939689578882236	WITHOUT_CLASSIFICATION	0.006031042111776421	DEFECT
// add Script#run impl, used for running this script with a specified threadcontext and self // root method of a script is always in __file__ method	WITHOUT_CLASSIFICATION	0.9983851906996551	WITHOUT_CLASSIFICATION	0.001614809300344943	DEFECT
// add main impl, used for detached or command-line execution of this script with a new runtime // root method of a script is always in stub0, method0	WITHOUT_CLASSIFICATION	0.9986810918865708	WITHOUT_CLASSIFICATION	0.0013189081134291844	DEFECT
// construct static scope list of names	WITHOUT_CLASSIFICATION	0.9997523518368465	WITHOUT_CLASSIFICATION	2.4764816315351066E-4	DEFECT
// JRUBY-3014: make __FILE__ dynamically determined at load time, but // we provide a reasonable default here	WITHOUT_CLASSIFICATION	0.9999771324402039	WITHOUT_CLASSIFICATION	2.2867559796055603E-5	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9996722466623235	WITHOUT_CLASSIFICATION	3.277533376765415E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9996722466623235	WITHOUT_CLASSIFICATION	3.277533376765415E-4	DEFECT
// lazily create class init only if necessary	WITHOUT_CLASSIFICATION	0.9999240828191317	WITHOUT_CLASSIFICATION	7.591718086835951E-5	DEFECT
// boxed arg list __file__	WITHOUT_CLASSIFICATION	0.9999855862540554	WITHOUT_CLASSIFICATION	1.441374594457254E-5	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999788495012343	WITHOUT_CLASSIFICATION	2.1150498765752294E-5	DEFECT
// exact arg list __file__	WITHOUT_CLASSIFICATION	0.9999855862540554	WITHOUT_CLASSIFICATION	1.441374594457254E-5	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999936567221671	WITHOUT_CLASSIFICATION	6.343277832966636E-6	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999936567221671	WITHOUT_CLASSIFICATION	6.343277832966636E-6	DEFECT
// not using a new scope, use saved one for a flat closure	WITHOUT_CLASSIFICATION	0.9993223862311941	WITHOUT_CLASSIFICATION	6.776137688058433E-4	DEFECT
// normal closure	WITHOUT_CLASSIFICATION	0.9999860040765524	WITHOUT_CLASSIFICATION	1.399592344763183E-5	DEFECT
// end of scoping for closure's vars	WITHOUT_CLASSIFICATION	0.9986274439668915	WITHOUT_CLASSIFICATION	0.0013725560331084583	DEFECT
// we only need full-on redo exception handling if there's logic that might produce it	WITHOUT_CLASSIFICATION	0.9998095829269888	WITHOUT_CLASSIFICATION	1.9041707301122892E-4	DEFECT
// handle redos by restarting the block	WITHOUT_CLASSIFICATION	0.9999755296754843	WITHOUT_CLASSIFICATION	2.4470324515628505E-5	DEFECT
// jump back to the top of the main body of this closure	WITHOUT_CLASSIFICATION	0.9997062168682237	WITHOUT_CLASSIFICATION	2.937831317763082E-4	DEFECT
// Ruby name 	WITHOUT_CLASSIFICATION	0.9999897490217973	WITHOUT_CLASSIFICATION	1.025097820272668E-5	DEFECT
// Accumulate call arguments	WITHOUT_CLASSIFICATION	0.9999861575863004	WITHOUT_CLASSIFICATION	1.3842413699692873E-5	DEFECT
// Fix FileNameCompletor to work mid-line	WITHOUT_CLASSIFICATION	0.9955823864994625	WITHOUT_CLASSIFICATION	0.00441761350053742	DEFECT
// We need to ensure that the variable names generated here cannot conflict with ruby variable names! // Hence the "%" tthat is appended to the beginning!	WITHOUT_CLASSIFICATION	0.9999120225188912	WITHOUT_CLASSIFICATION	8.797748110881617E-5	DEFECT
// Does this method define code?  // Default is yes -- which basically leads to pessimistic but safe optimizations // But, for library and internal methods, this might be false.	WITHOUT_CLASSIFICATION	0.9987386748612377	WITHOUT_CLASSIFICATION	0.001261325138762272	DEFECT
// Map of constants defined in this scope (not valid for methods!)	WITHOUT_CLASSIFICATION	0.9997822893152296	WITHOUT_CLASSIFICATION	2.1771068477038585E-4	DEFECT
// NOTE: Since we are processing ASTs, loop bodies are processed in depth-first manner // with outer loops encountered before inner loops, and inner loops finished before outer ones. // // So, we can keep track of loops in a loop stack which  keeps track of loops as they are encountered. // This lets us implement next/redo/break/retry easily for the non-closure cases	WITHOUT_CLASSIFICATION	0.9997800124377736	WITHOUT_CLASSIFICATION	2.199875622263353E-4	DEFECT
// Map keep track of the next available variable index for a particular prefix	WITHOUT_CLASSIFICATION	0.9976782119646541	WITHOUT_CLASSIFICATION	0.0023217880353458105	DEFECT
// Control flow graph for this scope	WITHOUT_CLASSIFICATION	0.9997746165955079	WITHOUT_CLASSIFICATION	2.253834044921257E-4	DEFECT
//        _lexicalNestingLevel = lexicalParent == null ? 0 : ((IR_ScopeImpl)lexicalParent)._lexicalNestingLevel + 1;	WITHOUT_CLASSIFICATION	0.9996359265991411	WITHOUT_CLASSIFICATION	3.640734008587703E-4	DEFECT
// List of modules, classes, and methods defined in this scope!	WITHOUT_CLASSIFICATION	0.9997922514163871	WITHOUT_CLASSIFICATION	2.0774858361291386E-4	DEFECT
// Returns the containing parent scope!	WITHOUT_CLASSIFICATION	0.9998953092992356	WITHOUT_CLASSIFICATION	1.0469070076432487E-4	DEFECT
// Insert nesting level to ensure variable names don't conflict across nested scopes! // i.e. definition of %v_1 in a closure shouldn't override the use of %v_1 from the parent scope! //        return new Variable(prefix + _lexicalNestingLevel + "_" + idx);	WITHOUT_CLASSIFICATION	0.9978498716635207	WITHOUT_CLASSIFICATION	0.0021501283364793056	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999821921052684	WITHOUT_CLASSIFICATION	1.7807894731619585E-5	DEFECT
// variable is never read, variable is never live	WITHOUT_CLASSIFICATION	0.9992459936464223	WITHOUT_CLASSIFICATION	7.540063535776953E-4	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.99997969680203	WITHOUT_CLASSIFICATION	2.030319797007521E-5	DEFECT
// inline script	WITHOUT_CLASSIFICATION	0.99997969680203	WITHOUT_CLASSIFICATION	2.030319797007521E-5	DEFECT
// This method is called to build assignments for a multiple-assignment instruction	WITHOUT_CLASSIFICATION	0.9957649489052056	WITHOUT_CLASSIFICATION	0.00423505109479437	DEFECT
// Build the class body!	WITHOUT_CLASSIFICATION	0.9999961460751913	WITHOUT_CLASSIFICATION	3.853924808654031E-6	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996364919520865	WITHOUT_CLASSIFICATION	3.635080479135214E-4	DEFECT
// unwrap newline nodes to get their actual type	WITHOUT_CLASSIFICATION	0.9996364919520865	WITHOUT_CLASSIFICATION	3.635080479135214E-4	DEFECT
// SSS FIXME: Can this ever be null?	WITHOUT_CLASSIFICATION	0.9921550839709248	WITHOUT_CLASSIFICATION	0.007844916029075303	DEFECT
// Run the pass on the passed in scope!	WITHOUT_CLASSIFICATION	0.9995547339766967	WITHOUT_CLASSIFICATION	4.45266023303402E-4	DEFECT
// done // done // done // done	WITHOUT_CLASSIFICATION	0.9998764703119035	WITHOUT_CLASSIFICATION	1.2352968809641306E-4	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999426652109014	WITHOUT_CLASSIFICATION	5.7334789098586465E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999426652109014	WITHOUT_CLASSIFICATION	5.7334789098586465E-5	DEFECT
// This method is called to build arguments for a block!	WITHOUT_CLASSIFICATION	0.9957560302392195	WITHOUT_CLASSIFICATION	0.004243969760780384	DEFECT
// build first node (and ignore its result) and then second node	WITHOUT_CLASSIFICATION	0.9999150740233274	WITHOUT_CLASSIFICATION	8.492597667265954E-5	DEFECT
// build first node only and return false	WITHOUT_CLASSIFICATION	0.9998947343603916	WITHOUT_CLASSIFICATION	1.052656396085167E-4	DEFECT
// Value of the last expression in the block 	WITHOUT_CLASSIFICATION	0.9997574239196546	WITHOUT_CLASSIFICATION	2.4257608034531744E-4	DEFECT
// If this is not a closure, the break is equivalent to jumping to the loop end label	WITHOUT_CLASSIFICATION	0.9867605168497533	WITHOUT_CLASSIFICATION	0.013239483150246745	DEFECT
// get the incoming case value	WITHOUT_CLASSIFICATION	0.9999849839559352	WITHOUT_CLASSIFICATION	1.5016044064935342E-5	DEFECT
// the CASE instruction	WITHOUT_CLASSIFICATION	0.9999901476604897	WITHOUT_CLASSIFICATION	9.85233951035529E-6	DEFECT
// lists to aggregate variables and bodies for whens	WITHOUT_CLASSIFICATION	0.9993693342039129	WITHOUT_CLASSIFICATION	6.306657960871139E-4	DEFECT
// build each "when"	WITHOUT_CLASSIFICATION	0.9999885714855447	WITHOUT_CLASSIFICATION	1.1428514455361977E-5	DEFECT
// multiple conditions for when	WITHOUT_CLASSIFICATION	0.9996975288324832	WITHOUT_CLASSIFICATION	3.0247116751685543E-4	DEFECT
// build "else" if it exists	WITHOUT_CLASSIFICATION	0.9999835498937616	WITHOUT_CLASSIFICATION	1.6450106238464362E-5	DEFECT
// now emit bodies	WITHOUT_CLASSIFICATION	0.9999960756239149	WITHOUT_CLASSIFICATION	3.924376085087959E-6	DEFECT
// close it out	WITHOUT_CLASSIFICATION	0.999992892358015	WITHOUT_CLASSIFICATION	7.107641984970508E-6	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999314123795031	WITHOUT_CLASSIFICATION	6.858762049694641E-5	DEFECT
// Do we have a dynamic container?	WITHOUT_CLASSIFICATION	0.9998445365548115	WITHOUT_CLASSIFICATION	1.5546344518846012E-4	DEFECT
// Return a meta object corresponding to the class	WITHOUT_CLASSIFICATION	0.9998764153954051	WITHOUT_CLASSIFICATION	1.2358460459493723E-4	DEFECT
// 1. Load the module first (lhs of node) // 2. Then load the constant from the module	WITHOUT_CLASSIFICATION	0.9997850889594437	WITHOUT_CLASSIFICATION	2.149110405563083E-4	DEFECT
// Build IR for args	WITHOUT_CLASSIFICATION	0.9999742787190609	WITHOUT_CLASSIFICATION	2.5721280939090313E-5	DEFECT
// Build IR for body	WITHOUT_CLASSIFICATION	0.9999748312911683	WITHOUT_CLASSIFICATION	2.516870883182552E-5	DEFECT
// if root of method is rescue, build as a light rescue	WITHOUT_CLASSIFICATION	0.9996103857543156	WITHOUT_CLASSIFICATION	3.8961424568442657E-4	DEFECT
// Instance method	WITHOUT_CLASSIFICATION	0.9999854026206844	WITHOUT_CLASSIFICATION	1.4597379315658616E-5	DEFECT
// Class method	WITHOUT_CLASSIFICATION	0.9999844960891863	WITHOUT_CLASSIFICATION	1.5503910813772318E-5	DEFECT
// Other args begin at index 1	WITHOUT_CLASSIFICATION	0.9999790198159485	WITHOUT_CLASSIFICATION	2.0980184051534466E-5	DEFECT
// Both for fixed arity and variable arity methods	WITHOUT_CLASSIFICATION	0.9993818573150961	WITHOUT_CLASSIFICATION	6.181426849039553E-4	DEFECT
// Now for the rest	WITHOUT_CLASSIFICATION	0.9999893700687925	WITHOUT_CLASSIFICATION	1.0629931207508968E-5	DEFECT
// Jump to 'l' if this arg is not null.  If null, fall through and build the default value!	WITHOUT_CLASSIFICATION	0.9976994310977818	WITHOUT_CLASSIFICATION	0.002300568902218206	DEFECT
// This is not an expression that computes anything	WITHOUT_CLASSIFICATION	0.9886268793158681	WITHOUT_CLASSIFICATION	0.011373120684131802	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998041110407236	WITHOUT_CLASSIFICATION	1.9588895927641884E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999843461646367	WITHOUT_CLASSIFICATION	1.5653835363377153E-5	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999491479543265	WITHOUT_CLASSIFICATION	5.085204567333084E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999829899292817	WITHOUT_CLASSIFICATION	1.7010070718298997E-4	DEFECT
// By default, the container for this class is 's'	WITHOUT_CLASSIFICATION	0.9999314123795031	WITHOUT_CLASSIFICATION	6.858762049694641E-5	DEFECT
// Create a new closure context	WITHOUT_CLASSIFICATION	0.9998041110407236	WITHOUT_CLASSIFICATION	1.9588895927641884E-4	DEFECT
// Build args	WITHOUT_CLASSIFICATION	0.9999843461646367	WITHOUT_CLASSIFICATION	1.5653835363377153E-5	DEFECT
// Assign the closure to the block variable in the parent scope and return it	WITHOUT_CLASSIFICATION	0.999829899292817	WITHOUT_CLASSIFICATION	1.7010070718298997E-4	DEFECT
// Get the container for this new module	WITHOUT_CLASSIFICATION	0.9999884196755094	WITHOUT_CLASSIFICATION	1.1580324490592427E-5	DEFECT
// Build the new module	WITHOUT_CLASSIFICATION	0.9999970875257773	WITHOUT_CLASSIFICATION	2.9124742227521385E-6	DEFECT
// Build the module body	WITHOUT_CLASSIFICATION	0.9999910037535379	WITHOUT_CLASSIFICATION	8.996246462144547E-6	DEFECT
// First, build an assignment for a splat, if any, with the rest of the args!	WITHOUT_CLASSIFICATION	0.9999543232259247	WITHOUT_CLASSIFICATION	4.567677407533487E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999874953810028	WITHOUT_CLASSIFICATION	1.2504618997127248E-5	DEFECT
// If a closure, the next is simply a return from the closure! // If a regular loop, the next is simply a jump to the end of the iteration	WITHOUT_CLASSIFICATION	0.9921089356656028	WITHOUT_CLASSIFICATION	0.00789106433439727	DEFECT
// get attr	WITHOUT_CLASSIFICATION	0.9999821921052684	WITHOUT_CLASSIFICATION	1.7807894731619585E-5	DEFECT
// call operator	WITHOUT_CLASSIFICATION	0.999990015712579	WITHOUT_CLASSIFICATION	9.98428742103273E-6	DEFECT
// set attr	WITHOUT_CLASSIFICATION	0.9999934926322677	WITHOUT_CLASSIFICATION	6.507367732320251E-6	DEFECT
// Translate "x &&= y" --> "x = (is_true(x) ? y : false)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, false, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9995126564263302	WITHOUT_CLASSIFICATION	4.8734357366986053E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9997099895651821	WITHOUT_CLASSIFICATION	2.9001043481791886E-4	DEFECT
// This does the assignment!	WITHOUT_CLASSIFICATION	0.9997099895651821	WITHOUT_CLASSIFICATION	2.9001043481791886E-4	DEFECT
// if v1 is defined and true, we are done! 	WITHOUT_CLASSIFICATION	0.9999763002152234	WITHOUT_CLASSIFICATION	2.3699784776556925E-5	DEFECT
// build first node only and return true	WITHOUT_CLASSIFICATION	0.9999071327384225	WITHOUT_CLASSIFICATION	9.286726157753303E-5	DEFECT
// build first node as non-expr and build second node	WITHOUT_CLASSIFICATION	0.9998465744756377	WITHOUT_CLASSIFICATION	1.5342552436221847E-4	DEFECT
// Top-level script!	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// we won't enter the loop -- just build the condition node	WITHOUT_CLASSIFICATION	0.9997746011993512	WITHOUT_CLASSIFICATION	2.253988006487708E-4	DEFECT
/* ----------- Private Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998629245042162	WITHOUT_CLASSIFICATION	1.370754957837633E-4	DEFECT
// What handles warnings	WITHOUT_CLASSIFICATION	0.9999744415207673	WITHOUT_CLASSIFICATION	2.5558479232651113E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.5944493465043805	DEFECT	0.4055506534956196	WITHOUT_CLASSIFICATION
// For closures, a redo is a jump to the beginning of the closure // For non-closures, a redo is a jump to the beginning of the loop	WITHOUT_CLASSIFICATION	0.9995212288276356	WITHOUT_CLASSIFICATION	4.787711723643757E-4	DEFECT
// The "root" method of a class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.9993755296870384	WITHOUT_CLASSIFICATION	6.244703129616116E-4	DEFECT
// Dummy top-level method for the class	WITHOUT_CLASSIFICATION	0.9999511865386153	WITHOUT_CLASSIFICATION	4.881346138471487E-5	DEFECT
// Build a dummy static method for the class -- the scope in which all definitions, and class code executes, equivalent to java clinit	WITHOUT_CLASSIFICATION	0.999691693079007	WITHOUT_CLASSIFICATION	3.0830692099296364E-4	DEFECT
// ------ Define the operations below ----	WITHOUT_CLASSIFICATION	0.9996300728370368	WITHOUT_CLASSIFICATION	3.6992716296326873E-4	DEFECT
// value copy and type conversion operations	WITHOUT_CLASSIFICATION	0.999661416887876	WITHOUT_CLASSIFICATION	3.385831121239575E-4	DEFECT
// alu operations	WITHOUT_CLASSIFICATION	0.9999752677334801	WITHOUT_CLASSIFICATION	2.4732266519866838E-5	DEFECT
// method handle, arg receive, return value, and  call instructions	WITHOUT_CLASSIFICATION	0.9999232406931301	WITHOUT_CLASSIFICATION	7.675930686999116E-5	DEFECT
// closure instructions	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// eval instructions	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// def instructions	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// exception instructions	WITHOUT_CLASSIFICATION	0.9999300884730066	WITHOUT_CLASSIFICATION	6.99115269933636E-5	DEFECT
// Loads	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Stores	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// jump and branch operations	WITHOUT_CLASSIFICATION	0.9999603619645462	WITHOUT_CLASSIFICATION	3.9638035453726796E-5	DEFECT
// others	WITHOUT_CLASSIFICATION	0.9999512423394984	WITHOUT_CLASSIFICATION	4.875766050157666E-5	DEFECT
// a case/when branch	WITHOUT_CLASSIFICATION	0.9999750124158051	WITHOUT_CLASSIFICATION	2.4987584194813177E-5	DEFECT
// optimization guards	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// By default, call instructions cannot be deleted even if their results aren't used by anyone // unless we know more about what the call is, what it does, etc. // Similarly for evals, stores, returns.	WITHOUT_CLASSIFICATION	0.9997470011931899	WITHOUT_CLASSIFICATION	2.5299880681005994E-4	DEFECT
// Returns the containing parent scope -- can be a dynamic value (hence Operand)!	WITHOUT_CLASSIFICATION	0.9988710760238613	WITHOUT_CLASSIFICATION	0.001128923976138746	DEFECT
// scripts	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// scripts and modules	WITHOUT_CLASSIFICATION	0.9999821632134352	WITHOUT_CLASSIFICATION	1.7836786564680244E-5	DEFECT
// scripts, classes, and modules	WITHOUT_CLASSIFICATION	0.9998676059131839	WITHOUT_CLASSIFICATION	1.323940868161676E-4	DEFECT
// methods and closures	WITHOUT_CLASSIFICATION	0.9999833207344071	WITHOUT_CLASSIFICATION	1.6679265592878095E-5	DEFECT
// create a new variable using the prefix	WITHOUT_CLASSIFICATION	0.9999622336521181	WITHOUT_CLASSIFICATION	3.7766347881944176E-5	DEFECT
// create a new temporary variable	WITHOUT_CLASSIFICATION	0.9999462650908157	WITHOUT_CLASSIFICATION	5.3734909184301106E-5	DEFECT
// Get a new label using a generic prefix	WITHOUT_CLASSIFICATION	0.9999318349314299	WITHOUT_CLASSIFICATION	6.816506857014106E-5	DEFECT
// Build the CFG for this scope -- supported only by methods & closures	WITHOUT_CLASSIFICATION	0.9998275881417308	WITHOUT_CLASSIFICATION	1.7241185826922335E-4	DEFECT
// Get the control flow graph for this scope -- only valid for methods & closures	WITHOUT_CLASSIFICATION	0.9999770769186064	WITHOUT_CLASSIFICATION	2.292308139366218E-5	DEFECT
// While processing loops, this returns the loop that we are processing.	WITHOUT_CLASSIFICATION	0.9999582723305711	WITHOUT_CLASSIFICATION	4.172766942896345E-5	DEFECT
// Record the loop we are beginning to process	WITHOUT_CLASSIFICATION	0.999941070744512	WITHOUT_CLASSIFICATION	5.892925548795497E-5	DEFECT
// Indicate that we are done processing the loop	WITHOUT_CLASSIFICATION	0.9999864111255183	WITHOUT_CLASSIFICATION	1.358887448157138E-5	DEFECT
// Run the passed in compiler pass on this scope!	WITHOUT_CLASSIFICATION	0.9995986863245074	WITHOUT_CLASSIFICATION	4.0131367549253055E-4	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999210914849765	WITHOUT_CLASSIFICATION	7.89085150235459E-5	DEFECT
// Readline	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// If the cfg of the method is around, print the CFG!	WITHOUT_CLASSIFICATION	0.9996538932014775	WITHOUT_CLASSIFICATION	3.4610679852255114E-4	DEFECT
// Optimize some core class method calls for constant values	WITHOUT_CLASSIFICATION	0.9999756270781106	WITHOUT_CLASSIFICATION	2.4372921889394592E-5	DEFECT
// If 'r' is not a constant, it could actually be a compound value! // Look in our value map to see if we have a simplified value for the receiver.	WITHOUT_CLASSIFICATION	0.8817685920416076	WITHOUT_CLASSIFICATION	0.11823140795839239	DEFECT
// Check if we can optimize this call based on the receiving method and receiver type // Use the simplified receiver!	WITHOUT_CLASSIFICATION	0.9999972211804847	WITHOUT_CLASSIFICATION	2.7788195152533816E-6	DEFECT
// If we got a simplified value, mark the call dead and insert a copy in its place!	WITHOUT_CLASSIFICATION	0.9998942421205018	WITHOUT_CLASSIFICATION	1.0575787949811545E-4	DEFECT
// If the call has been optimized away in the previous step, it is no longer a hard boundary for opts!	WITHOUT_CLASSIFICATION	0.9998198567111716	WITHOUT_CLASSIFICATION	1.801432888283764E-4	DEFECT
/* ----------- Public abstract methods ---------- */	WITHOUT_CLASSIFICATION	0.9998962043456232	WITHOUT_CLASSIFICATION	1.0379565437677376E-4	DEFECT
/* ----------- Public methods with a default implementation ---------- */	WITHOUT_CLASSIFICATION	0.9999872211721278	WITHOUT_CLASSIFICATION	1.2778827872144199E-5	DEFECT
// Compute meet over all "sources" and compute "destination" basic blocks that should then be processed.  // sources & targets depends on direction of the data flow problem	WITHOUT_CLASSIFICATION	0.9987471088029487	WITHOUT_CLASSIFICATION	0.00125289119705126	DEFECT
// If the solution has changed, add "dsts" to the work list. // No duplicates please which is why we have bbset.	WITHOUT_CLASSIFICATION	0.9943867141508657	WITHOUT_CLASSIFICATION	0.005613285849134415	DEFECT
/* --------- Protected fields/methods below --------- */	WITHOUT_CLASSIFICATION	0.9994202464288756	WITHOUT_CLASSIFICATION	5.797535711244652E-4	DEFECT
// Dataflow problem with which this node is associated // CFG node for which this node contains info.	WITHOUT_CLASSIFICATION	0.9997168104441414	WITHOUT_CLASSIFICATION	2.8318955585864605E-4	DEFECT
/* -------------- Public fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995723541409232	WITHOUT_CLASSIFICATION	4.276458590767932E-4	DEFECT
// ------- Abstract methods without a default implementation -------	WITHOUT_CLASSIFICATION	0.999974972592189	WITHOUT_CLASSIFICATION	2.5027407810972477E-5	DEFECT
// ------- Default implementation methods below -------	WITHOUT_CLASSIFICATION	0.9997268144233563	WITHOUT_CLASSIFICATION	2.7318557664371233E-4	DEFECT
/* Compute Meet Over All Paths solution for this dataflow problem on the input CFG.     * This implements a standard worklist algorithm. */	WITHOUT_CLASSIFICATION	0.9995643562539631	WITHOUT_CLASSIFICATION	4.356437460368713E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9996647942830429	WITHOUT_CLASSIFICATION	3.352057169571525E-4	DEFECT
/* Individual analyses should override this */	WITHOUT_CLASSIFICATION	0.9996647942830429	WITHOUT_CLASSIFICATION	3.352057169571525E-4	DEFECT
/* -------------- Packaged/protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995723541409232	WITHOUT_CLASSIFICATION	4.276458590767932E-4	DEFECT
// We want unique ids for dataflow variables	WITHOUT_CLASSIFICATION	0.998606272998526	WITHOUT_CLASSIFICATION	0.0013937270014740225	DEFECT
/* -------------- Protected fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9995723541409232	WITHOUT_CLASSIFICATION	4.276458590767932E-4	DEFECT
/* -------------- Private fields and methods below ---------------- */	WITHOUT_CLASSIFICATION	0.9996275722666724	WITHOUT_CLASSIFICATION	3.724277333275815E-4	DEFECT
// Initialize all flow graph nodes 	WITHOUT_CLASSIFICATION	0.9992595039560256	WITHOUT_CLASSIFICATION	7.404960439744181E-4	DEFECT
/* Lattice TOP, BOTTOM, ANY values -- these will be used during dataflow analyses */	WITHOUT_CLASSIFICATION	0.9993592664816131	WITHOUT_CLASSIFICATION	6.407335183868845E-4	DEFECT
/* ******************** PUBLIC INTERFACE ******************* */	WITHOUT_CLASSIFICATION	0.999829132796428	WITHOUT_CLASSIFICATION	1.7086720357198165E-4	DEFECT
// Unique ID assigned to this variable	WITHOUT_CLASSIFICATION	0.9996076084207085	WITHOUT_CLASSIFICATION	3.923915792914986E-4	DEFECT
// start out with a default RubyObject allocator	WITHOUT_CLASSIFICATION	0.9999781521674097	WITHOUT_CLASSIFICATION	2.1847832590203053E-5	DEFECT
// switch to an allocator based on a default constructor	WITHOUT_CLASSIFICATION	0.9999702069821816	WITHOUT_CLASSIFICATION	2.9793017818400944E-5	DEFECT
/* ----------- Public Interface ------------ */	WITHOUT_CLASSIFICATION	0.9998425954641595	WITHOUT_CLASSIFICATION	1.5740453584049143E-4	DEFECT
// class or module	WITHOUT_CLASSIFICATION	0.9999937026120715	WITHOUT_CLASSIFICATION	6.297387928488498E-6	DEFECT
// OUT = UNION(IN(succs))	WITHOUT_CLASSIFICATION	0.999967412686499	WITHOUT_CLASSIFICATION	3.258731350093049E-5	DEFECT
// Traverse the instructions in this basic block in reverse order!	WITHOUT_CLASSIFICATION	0.9999339336501072	WITHOUT_CLASSIFICATION	6.606634989285124E-5	DEFECT
// v is defined => It is no longer live before 'i'	WITHOUT_CLASSIFICATION	0.9997826609013947	WITHOUT_CLASSIFICATION	2.1733909860538554E-4	DEFECT
// IN is the same!	WITHOUT_CLASSIFICATION	0.9999867443037338	WITHOUT_CLASSIFICATION	1.32556962661678E-5	DEFECT
// IN changed!	WITHOUT_CLASSIFICATION	0.9999841851685197	WITHOUT_CLASSIFICATION	1.581483148033347E-5	DEFECT
/* ---------- Protected / package fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999089310545427	WITHOUT_CLASSIFICATION	9.10689454573303E-5	DEFECT
// If 'v' is not live at the instruction site, and it has no side effects, mark it dead!	WITHOUT_CLASSIFICATION	0.99844115504688	WITHOUT_CLASSIFICATION	0.0015588449531200163	DEFECT
// Do not mark this instruction's operands live if the instruction itself is dead!	WITHOUT_CLASSIFICATION	0.9997008077254903	WITHOUT_CLASSIFICATION	2.991922745096385E-4	DEFECT
/* ---------- Private fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9999045338764653	WITHOUT_CLASSIFICATION	9.546612353479368E-5	DEFECT
// Variables live at entry of this node // Variables live at exit of node // Temporary set of live variables // Size of the "_in" and "_out" bit sets 	WITHOUT_CLASSIFICATION	0.9999403830573479	WITHOUT_CLASSIFICATION	5.96169426520787E-5	DEFECT
// Used during optimization passes to propagate type and other information	WITHOUT_CLASSIFICATION	0.9996184202516927	WITHOUT_CLASSIFICATION	3.8157974830736437E-4	DEFECT
// Does this instruction have side effects as a result of its operation // This information is used in optimization phases to impact dead code elimination // and other optimization passes	WITHOUT_CLASSIFICATION	0.9842587981900286	WITHOUT_CLASSIFICATION	0.015741201809971343	DEFECT
/* --------- "Abstract"/"please-override" methods --------- */	WITHOUT_CLASSIFICATION	0.9998903120452268	WITHOUT_CLASSIFICATION	1.0968795477316501E-4	DEFECT
/* Array of all operands for this instruction */	WITHOUT_CLASSIFICATION	0.9992665321676142	WITHOUT_CLASSIFICATION	7.334678323858074E-4	DEFECT
/* List of all variables used by all operands of this instruction */	WITHOUT_CLASSIFICATION	0.9998217464282347	WITHOUT_CLASSIFICATION	1.7825357176521437E-4	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     *     * If the value map provides a value for any of the instruction's operands     * this method is expected to replace the original operands with the simplified values.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify     */	WITHOUT_CLASSIFICATION	0.9819421540760843	WITHOUT_CLASSIFICATION	0.01805784592391575	DEFECT
// By default, no simplifications!	WITHOUT_CLASSIFICATION	0.9999239187821145	WITHOUT_CLASSIFICATION	7.608121788552702E-5	DEFECT
// Can this call lead to ruby code getting modified?   // If we don't know what method we are calling, we assume it can (pessimistic, but safe!) // If we do know the target method, we ask the method itself whether it modifies ruby code	WITHOUT_CLASSIFICATION	0.9999878076870259	WITHOUT_CLASSIFICATION	1.2192312974161698E-5	DEFECT
// By default, return instructions cannot be deleted	WITHOUT_CLASSIFICATION	0.999849145902918	WITHOUT_CLASSIFICATION	1.5085409708203183E-4	DEFECT
// If true, returns the rest of the array starting at the index	WITHOUT_CLASSIFICATION	0.999564029275237	WITHOUT_CLASSIFICATION	4.3597072476291054E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999193817189015	WITHOUT_CLASSIFICATION	8.061828109851925E-5	DEFECT
// Map of label & basic blocks with that label	WITHOUT_CLASSIFICATION	0.9998611095545198	WITHOUT_CLASSIFICATION	1.3889044548020583E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999193817189015	WITHOUT_CLASSIFICATION	8.061828109851925E-5	DEFECT
// You can only value-replace atomic values	WITHOUT_CLASSIFICATION	0.9997892940360888	WITHOUT_CLASSIFICATION	2.1070596391118305E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993842518956625	WITHOUT_CLASSIFICATION	6.157481043375224E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993842518956625	WITHOUT_CLASSIFICATION	6.157481043375224E-4	DEFECT
// If divisor is zero, don't simplify!	WITHOUT_CLASSIFICATION	0.9993842518956625	WITHOUT_CLASSIFICATION	6.157481043375224E-4	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999824934007909	WITHOUT_CLASSIFICATION	1.7506599209089978E-5	DEFECT
// For simplification, get the target value, even if compound	WITHOUT_CLASSIFICATION	0.9999824934007909	WITHOUT_CLASSIFICATION	1.7506599209089978E-5	DEFECT
// The operand that this attribute targets //    DEFERRED //    AttributeValue _val;       // Attribute value	WITHOUT_CLASSIFICATION	0.9993975849973442	WITHOUT_CLASSIFICATION	6.024150026558255E-4	DEFECT
// Arrays, Ranges, etc. are compound values // Variables, fixnums, floats, etc. are "atomic" values	WITHOUT_CLASSIFICATION	0.9999748764908131	WITHOUT_CLASSIFICATION	2.512350918688267E-5	DEFECT
// Get the target class of this operand, if we know it!	WITHOUT_CLASSIFICATION	0.9999951084107677	WITHOUT_CLASSIFICATION	4.8915892323362134E-6	DEFECT
// The following constants capture pre-known static call sites -- used to implement ruby internals	WITHOUT_CLASSIFICATION	0.9999445782816586	WITHOUT_CLASSIFICATION	5.542171834132662E-5	DEFECT
/* Nothing to do by default */	WITHOUT_CLASSIFICATION	0.9999951300110578	WITHOUT_CLASSIFICATION	4.8699889421866165E-6	DEFECT
// Map of label & basic blocks which are waiting for a bb with that label	WITHOUT_CLASSIFICATION	0.999948533663265	WITHOUT_CLASSIFICATION	5.146633673514269E-5	DEFECT
// Init before building basic blocks below!	WITHOUT_CLASSIFICATION	0.9996129463379047	WITHOUT_CLASSIFICATION	3.8705366209543815E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999568379579699	WITHOUT_CLASSIFICATION	4.3162042030044536E-5	DEFECT
// Scope (method/closure) to which this cfg belongs // Entry BB -- dummy // Exit BB -- dummy // The actual graph // Next available basic block id	WITHOUT_CLASSIFICATION	0.9998768462388598	WITHOUT_CLASSIFICATION	1.231537611402176E-4	DEFECT
// Jump instruction bbs dont add an edge to the succeeding bb by default	WITHOUT_CLASSIFICATION	0.9999461843119885	WITHOUT_CLASSIFICATION	5.3815688011428115E-5	DEFECT
// Add forward ref. edges	WITHOUT_CLASSIFICATION	0.9999880937667653	WITHOUT_CLASSIFICATION	1.1906233234595793E-5	DEFECT
// currBB cannot be null!	WITHOUT_CLASSIFICATION	0.9999546711910381	WITHOUT_CLASSIFICATION	4.532880896191602E-5	DEFECT
// Add a forward reference from tgt -> currBB	WITHOUT_CLASSIFICATION	0.9999445461278723	WITHOUT_CLASSIFICATION	5.545387212771014E-5	DEFECT
// root-level logic	WITHOUT_CLASSIFICATION	0.9999840390033924	WITHOUT_CLASSIFICATION	1.5960996607636755E-5	DEFECT
// root-level methods	WITHOUT_CLASSIFICATION	0.9999856626153966	WITHOUT_CLASSIFICATION	1.4337384603438212E-5	DEFECT
// root-level classes	WITHOUT_CLASSIFICATION	0.9999876890967083	WITHOUT_CLASSIFICATION	1.2310903291715561E-5	DEFECT
//        case 4: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class); //            break; //        case 5: //            signature = sig(Object.class, Object.class, Object.class, Object.class, Object.class, Object.class); //            break;	WITHOUT_CLASSIFICATION	0.9997874955650999	WITHOUT_CLASSIFICATION	2.1250443490014923E-4	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999687528421126	WITHOUT_CLASSIFICATION	3.124715788731609E-5	DEFECT
// load receiver	WITHOUT_CLASSIFICATION	0.9999687528421126	WITHOUT_CLASSIFICATION	3.124715788731609E-5	DEFECT
// receiver	WITHOUT_CLASSIFICATION	0.9999840786928997	WITHOUT_CLASSIFICATION	1.5921307100367203E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999688095961995	WITHOUT_CLASSIFICATION	3.119040380048161E-5	DEFECT
// load arguments	WITHOUT_CLASSIFICATION	0.9999688095961995	WITHOUT_CLASSIFICATION	3.119040380048161E-5	DEFECT
//        case 4: //        case 5:	WITHOUT_CLASSIFICATION	0.9998543926644703	WITHOUT_CLASSIFICATION	1.4560733552966993E-4	DEFECT
// Object[] args	WITHOUT_CLASSIFICATION	0.9999843110733402	WITHOUT_CLASSIFICATION	1.5688926659865042E-5	DEFECT
// load handle	WITHOUT_CLASSIFICATION	0.9999835944646985	WITHOUT_CLASSIFICATION	1.640553530153581E-5	DEFECT
// args array	WITHOUT_CLASSIFICATION	0.9999767615957171	WITHOUT_CLASSIFICATION	2.3238404282830798E-5	DEFECT
// i'th argument	WITHOUT_CLASSIFICATION	0.9999916585320004	WITHOUT_CLASSIFICATION	8.341467999554351E-6	DEFECT
// invoke specific arity version	WITHOUT_CLASSIFICATION	0.9989907601473101	WITHOUT_CLASSIFICATION	0.0010092398526897965	DEFECT
// Object arg0	WITHOUT_CLASSIFICATION	0.9999769629607598	WITHOUT_CLASSIFICATION	2.3037039240280533E-5	DEFECT
// useful for code completion inside the IRB	WITHOUT_CLASSIFICATION	0.9999376566551195	WITHOUT_CLASSIFICATION	6.234334488049386E-5	DEFECT
// No editing before startPos	WITHOUT_CLASSIFICATION	0.9999891570838408	WITHOUT_CLASSIFICATION	1.0842916159196435E-5	DEFECT
// no silly ticks!	WITHOUT_CLASSIFICATION	0.9999929362019419	WITHOUT_CLASSIFICATION	7.063798058187798E-6	DEFECT
// no candidates? Fail.	WITHOUT_CLASSIFICATION	0.999990154535517	WITHOUT_CLASSIFICATION	9.845464483030832E-6	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999181478311309	WITHOUT_CLASSIFICATION	8.185216886909407E-5	DEFECT
// undo check	WITHOUT_CLASSIFICATION	0.9999987296902362	WITHOUT_CLASSIFICATION	1.2703097638657264E-6	DEFECT
// Explicit reference to these vars as symbols...	WITHOUT_CLASSIFICATION	0.9996037981444169	WITHOUT_CLASSIFICATION	3.962018555829959E-4	DEFECT
// ignore	WITHOUT_CLASSIFICATION	0.9999568379579699	WITHOUT_CLASSIFICATION	4.3162042030044536E-5	DEFECT
//\t\n\"\\'`@$><=;|&{(	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999900616149825	WITHOUT_CLASSIFICATION	9.938385017491593E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999964331293172	WITHOUT_CLASSIFICATION	3.5668706828001326E-6	DEFECT
// no check for '*'	WITHOUT_CLASSIFICATION	0.9999964331293172	WITHOUT_CLASSIFICATION	3.5668706828001326E-6	DEFECT
// Binding provided for scope, use it	WITHOUT_CLASSIFICATION	0.9995686761635996	WITHOUT_CLASSIFICATION	4.313238364003799E-4	DEFECT
// this is ensured by the callers	WITHOUT_CLASSIFICATION	0.9998312772052419	WITHOUT_CLASSIFICATION	1.6872279475811376E-4	DEFECT
// no binding, just eval in "current" frame (caller's frame)	WITHOUT_CLASSIFICATION	0.999737986120683	WITHOUT_CLASSIFICATION	2.620138793169998E-4	DEFECT
// restore position	WITHOUT_CLASSIFICATION	0.9999647989505106	WITHOUT_CLASSIFICATION	3.5201049489481E-5	DEFECT
/* Something like cvar_cbase() from eval.c, factored out for the benefit     * of all the classvar-related node evaluations */	WITHOUT_CLASSIFICATION	0.9998291691874707	WITHOUT_CLASSIFICATION	1.7083081252941296E-4	DEFECT
// Used by the compiler to simplify arg processing	WITHOUT_CLASSIFICATION	0.999763171256695	WITHOUT_CLASSIFICATION	2.3682874330506693E-4	DEFECT
// JRUBY-2673: if wrapping a NativeException, use the actual Java exception's trace as our Java trace	WITHOUT_CLASSIFICATION	0.9999937985682726	WITHOUT_CLASSIFICATION	6.201431727401593E-6	DEFECT
// MRI does similar thing on MacOS X with 'EditLine wrapper'.	WITHOUT_CLASSIFICATION	0.9997980660066241	WITHOUT_CLASSIFICATION	2.0193399337584546E-4	DEFECT
// We lazily initialize this in case Readline.readline has been overridden in ruby (s_readline)	WITHOUT_CLASSIFICATION	0.9997840743694604	WITHOUT_CLASSIFICATION	2.1592563053967205E-4	DEFECT
// JRUBY-852, ignore escape key (it causes IRB to quit if we pass it out through readline)	WITHOUT_CLASSIFICATION	0.999179208191364	WITHOUT_CLASSIFICATION	8.207918086359441E-4	DEFECT
// not overridden, let's go	WITHOUT_CLASSIFICATION	0.9997480338524722	WITHOUT_CLASSIFICATION	2.5196614752768127E-4	DEFECT
/* Explicitly use UTF-8 here. c.f. history.addToHistory using line.asUTF8() */	WITHOUT_CLASSIFICATION	0.9986622704111285	WITHOUT_CLASSIFICATION	0.0013377295888714518	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9996535755306196	WITHOUT_CLASSIFICATION	3.464244693803953E-4	DEFECT
// Complete using a Proc object	WITHOUT_CLASSIFICATION	0.999663551899798	WITHOUT_CLASSIFICATION	3.3644810020189777E-4	DEFECT
// clear basename so it's anonymous when raising	WITHOUT_CLASSIFICATION	0.9999607932556636	WITHOUT_CLASSIFICATION	3.92067443365673E-5	DEFECT
// These are not really used by timeout, but exposed for compatibility	WITHOUT_CLASSIFICATION	0.9997423509055786	WITHOUT_CLASSIFICATION	2.5764909442134996E-4	DEFECT
// Timeout module methods	WITHOUT_CLASSIFICATION	0.9999864457720833	WITHOUT_CLASSIFICATION	1.3554227916676876E-5	DEFECT
// Toplevel defines	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999905639800513	WITHOUT_CLASSIFICATION	9.436019948675235E-6	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9996579763615454	WITHOUT_CLASSIFICATION	3.4202363845464804E-4	DEFECT
// if it's the exception we're expecting	WITHOUT_CLASSIFICATION	0.999871961331306	WITHOUT_CLASSIFICATION	1.280386686939823E-4	DEFECT
// and we were given a specific exception	WITHOUT_CLASSIFICATION	0.9992064319838917	WITHOUT_CLASSIFICATION	7.935680161082597E-4	DEFECT
// otherwise, rethrow	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// // Remove the Executor task now, to avoid cancelled tasks accumulating // until an Executor thread can schedule and remove them //	WITHOUT_CLASSIFICATION	0.999967349662946	WITHOUT_CLASSIFICATION	3.265033705402723E-5	DEFECT
// // If the task was scheduled, wait for it to finish before polling // for the exception it would have thrown. //	WITHOUT_CLASSIFICATION	0.9967719611898594	WITHOUT_CLASSIFICATION	0.0032280388101406086	DEFECT
// NetProtocolBufferedIO	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
/* When a length is given, read_string acts like get_bytes */	WITHOUT_CLASSIFICATION	0.9997119143681812	WITHOUT_CLASSIFICATION	2.880856318188719E-4	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999949830283915	WITHOUT_CLASSIFICATION	5.0169716085038326E-5	DEFECT
// ARRAY and STRUCT are only used internally	WITHOUT_CLASSIFICATION	0.9999609790674637	WITHOUT_CLASSIFICATION	3.902093253631157E-5	DEFECT
// If no release method is defined, then memory leaks will result.	WITHOUT_CLASSIFICATION	0.9998462574862051	WITHOUT_CLASSIFICATION	1.5374251379487127E-4	DEFECT
/*     * This variant of newStruct is called from StructLayoutBuilder     */	WITHOUT_CLASSIFICATION	0.9983637800868873	WITHOUT_CLASSIFICATION	0.0016362199131127243	DEFECT
// This also handles unsigned int -> negative signed int conversion	WITHOUT_CLASSIFICATION	0.999676873498197	WITHOUT_CLASSIFICATION	3.231265018030649E-4	DEFECT
// Windows is LLP64	WITHOUT_CLASSIFICATION	0.9999704934040303	WITHOUT_CLASSIFICATION	2.9506595969723148E-5	DEFECT
// Older JDK on linux map 'c' to 'libc.so' which doesn't work	WITHOUT_CLASSIFICATION	0.9820622078866071	WITHOUT_CLASSIFICATION	0.017937792113392914	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9997161306373579	WITHOUT_CLASSIFICATION	2.83869362642101E-4	DEFECT
// $blah	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Replace memory object with one that throws an exception on any access	WITHOUT_CLASSIFICATION	0.999949830283915	WITHOUT_CLASSIFICATION	5.0169716085038326E-5	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9981204229901594	WITHOUT_CLASSIFICATION	0.0018795770098406607	DEFECT
// Ensure room for terminating zero byte	WITHOUT_CLASSIFICATION	0.9997161306373579	WITHOUT_CLASSIFICATION	2.83869362642101E-4	DEFECT
// // Keep a reference to the temporary memory in the cache so it does // not get freed by the GC until the struct is freed //	WITHOUT_CLASSIFICATION	0.9804144948569665	WITHOUT_CLASSIFICATION	0.019585505143033564	DEFECT
// Add Pointer::NULL as a constant	WITHOUT_CLASSIFICATION	0.9999537396278885	WITHOUT_CLASSIFICATION	4.626037211150141E-5	DEFECT
// Create the ordered list of field names from the map	WITHOUT_CLASSIFICATION	0.9992898268557779	WITHOUT_CLASSIFICATION	7.101731442220988E-4	DEFECT
// Assemble a [ :name, offset ] array	WITHOUT_CLASSIFICATION	0.9996787305777796	WITHOUT_CLASSIFICATION	3.2126942222039797E-4	DEFECT
//                case FLOAT:	WITHOUT_CLASSIFICATION	0.999981710683977	WITHOUT_CLASSIFICATION	1.828931602303657E-5	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9997280991014147	WITHOUT_CLASSIFICATION	2.719008985852678E-4	DEFECT
// keep a reference to avoid the memory being freed	WITHOUT_CLASSIFICATION	0.9997280991014147	WITHOUT_CLASSIFICATION	2.719008985852678E-4	DEFECT
// No auto cleanup needed	WITHOUT_CLASSIFICATION	0.9999774273413067	WITHOUT_CLASSIFICATION	2.2572658693348983E-5	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998555123033337	WITHOUT_CLASSIFICATION	1.444876966663804E-4	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999508992046987	WITHOUT_CLASSIFICATION	4.910079530126092E-5	DEFECT
// Get the convention from the options hash	WITHOUT_CLASSIFICATION	0.9999508992046987	WITHOUT_CLASSIFICATION	4.910079530126092E-5	DEFECT
/*         * If there is exactly _one_ callback argument to the function,         * then a block can be given and automatically subsituted for the callback         * parameter.         */	WITHOUT_CLASSIFICATION	0.9999286114730854	WITHOUT_CLASSIFICATION	7.138852691464652E-5	DEFECT
/*------------------------------------------------------------------------*/	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//AF_INET	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// RubyUNIXServer	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// // Set up for potentially fast-int operations //	WITHOUT_CLASSIFICATION	0.9994953469472078	WITHOUT_CLASSIFICATION	5.0465305279225E-4	DEFECT
// // Hook up the MemoryPointer class if its not already there //	WITHOUT_CLASSIFICATION	0.9999542206758535	WITHOUT_CLASSIFICATION	4.577932414649231E-5	DEFECT
// This is a bit convoluted because (1) SocketChannel.bind is only in jdk 7 and // (2) Socket.getChannel() seems to return null in some cases	WITHOUT_CLASSIFICATION	0.9955717909332634	WITHOUT_CLASSIFICATION	0.004428209066736565	DEFECT
// no UNIXSockets on Windows	WITHOUT_CLASSIFICATION	0.9999905510953453	WITHOUT_CLASSIFICATION	9.448904654706049E-6	DEFECT
// Sockaddr_un has different structure on different platforms. // See JRUBY-2213 for more details.	WITHOUT_CLASSIFICATION	0.9998307121256653	WITHOUT_CLASSIFICATION	1.692878743347328E-4	DEFECT
// There is something valid in the sun_path component	WITHOUT_CLASSIFICATION	0.9998331965849084	WITHOUT_CLASSIFICATION	1.6680341509153597E-4	DEFECT
// RubyIPSocket	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// host is nil or the empty string, bind to INADDR_ANY	WITHOUT_CLASSIFICATION	0.9997857993265777	WITHOUT_CLASSIFICATION	2.1420067342226996E-4	DEFECT
// host and port given	WITHOUT_CLASSIFICATION	0.9999844245868551	WITHOUT_CLASSIFICATION	1.557541314487466E-5	DEFECT
// RubyUDPSocket	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// By default we always reverse lookup unless do_not_reverse_lookup set.	WITHOUT_CLASSIFICATION	0.9999071678925052	WITHOUT_CLASSIFICATION	9.283210749477097E-5	DEFECT
// make sure descriptor is registered	WITHOUT_CLASSIFICATION	0.9996725300231468	WITHOUT_CLASSIFICATION	3.2746997685320026E-4	DEFECT
// continue with normal initialization	WITHOUT_CLASSIFICATION	0.9999242146772017	WITHOUT_CLASSIFICATION	7.578532279833906E-5	DEFECT
// recv returns nil on EOF	WITHOUT_CLASSIFICATION	0.999963889327832	WITHOUT_CLASSIFICATION	3.6110672168055785E-5	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999432044065277	WITHOUT_CLASSIFICATION	5.679559347227469E-5	DEFECT
// RubyBasicSocket	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// we don't have to define any that we don't support; see socket.c	WITHOUT_CLASSIFICATION	0.999650513469678	WITHOUT_CLASSIFICATION	3.4948653032190074E-4	DEFECT
// mandatory constants we haven't implemented	WITHOUT_CLASSIFICATION	0.9995641913587388	WITHOUT_CLASSIFICATION	4.3580864126126966E-4	DEFECT
// constants webrick crashes without	WITHOUT_CLASSIFICATION	0.9998854071905354	WITHOUT_CLASSIFICATION	1.1459280946461532E-4	DEFECT
// More constants needed by specs	WITHOUT_CLASSIFICATION	0.9998404780248129	WITHOUT_CLASSIFICATION	1.5952197518714754E-4	DEFECT
// normal file descriptor..try to work with it	WITHOUT_CLASSIFICATION	0.998022190144707	WITHOUT_CLASSIFICATION	0.0019778098552929477	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// 255.255.255.255	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// 0.0.0.0	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
//def self.getaddrinfo(host, port, family = nil, socktype = nil, protocol = nil, flags = nil)	WITHOUT_CLASSIFICATION	0.9983397203516692	WITHOUT_CLASSIFICATION	0.0016602796483307623	DEFECT
// line 323	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999740738213246	WITHOUT_CLASSIFICATION	2.5926178675385592E-5	DEFECT
// can't set TC classloader	WITHOUT_CLASSIFICATION	0.9999740738213246	WITHOUT_CLASSIFICATION	2.5926178675385592E-5	DEFECT
// ok, it's a socket...set values accordingly // just using AF_INET since we can't tell from SocketChannel...	WITHOUT_CLASSIFICATION	0.9998682239931437	WITHOUT_CLASSIFICATION	1.3177600685638103E-4	DEFECT
// datagram, set accordingly // again, AF_INET	WITHOUT_CLASSIFICATION	0.9999357977170182	WITHOUT_CLASSIFICATION	6.420228298171965E-5	DEFECT
//IRubyObject family = args[2];	WITHOUT_CLASSIFICATION	0.9983397203516692	WITHOUT_CLASSIFICATION	0.0016602796483307623	DEFECT
// When Socket::AI_PASSIVE and host is nil, return 'any' address. 	WITHOUT_CLASSIFICATION	0.999829809606573	WITHOUT_CLASSIFICATION	1.701903934270762E-4	DEFECT
// The value of 1 is for Socket::AI_PASSIVE.	WITHOUT_CLASSIFICATION	0.9952261872066194	WITHOUT_CLASSIFICATION	0.004773812793380704	DEFECT
// RubySocket	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// numeric host, use it for port	WITHOUT_CLASSIFICATION	0.999651526901503	WITHOUT_CLASSIFICATION	3.4847309849701715E-4	DEFECT
//            e.printStackTrace();	WITHOUT_CLASSIFICATION	0.999671166274184	WITHOUT_CLASSIFICATION	3.288337258161179E-4	DEFECT
// we were woken up without being selected...poll for thread events and go back to sleep	WITHOUT_CLASSIFICATION	0.9934254125811963	WITHOUT_CLASSIFICATION	0.006574587418803656	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999985806964646	WITHOUT_CLASSIFICATION	1.4193035353772921E-6	DEFECT
// no connection immediately accepted, let them try again	WITHOUT_CLASSIFICATION	0.9999881737438224	WITHOUT_CLASSIFICATION	1.1826256177558977E-5	DEFECT
// do nothing, just exit	WITHOUT_CLASSIFICATION	0.9999972062074933	WITHOUT_CLASSIFICATION	2.7937925065880124E-6	DEFECT
//nativeThread.setPriority(priority);	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// set thread context JRuby classloader here, for Ruby-owned thread	WITHOUT_CLASSIFICATION	0.9998856544792152	WITHOUT_CLASSIFICATION	1.143455207848539E-4	DEFECT
// uber-ThreadKill catcher, since it should always just mean "be dead"	WITHOUT_CLASSIFICATION	0.9997317640493281	WITHOUT_CLASSIFICATION	2.682359506719175E-4	DEFECT
// Call the thread's code	WITHOUT_CLASSIFICATION	0.9999927427396095	WITHOUT_CLASSIFICATION	7.257260390589823E-6	DEFECT
// Someone called exit!, so we need to kill the main thread	WITHOUT_CLASSIFICATION	0.9999968666734013	WITHOUT_CLASSIFICATION	3.1333265986474765E-6	DEFECT
// restore context classloader, in case we're using a thread pool	WITHOUT_CLASSIFICATION	0.9982391087331751	WITHOUT_CLASSIFICATION	0.001760891266824826	DEFECT
// be dead	WITHOUT_CLASSIFICATION	0.9998657036666325	WITHOUT_CLASSIFICATION	1.3429633336742723E-4	DEFECT
// loop until a context is available, to clean up softrefs that might have been collected	WITHOUT_CLASSIFICATION	0.9955828066527795	WITHOUT_CLASSIFICATION	0.004417193347220426	DEFECT
// all threads in ruby thread group plus main thread	WITHOUT_CLASSIFICATION	0.9998077058219595	WITHOUT_CLASSIFICATION	1.922941780403479E-4	DEFECT
// thread is not alive, skip it	WITHOUT_CLASSIFICATION	0.9958822088323974	WITHOUT_CLASSIFICATION	0.004117791167602593	DEFECT
// future is done or cancelled, skip it	WITHOUT_CLASSIFICATION	0.9997641452717175	WITHOUT_CLASSIFICATION	2.358547282825898E-4	DEFECT
// first, check if the sender has unreceived mail	WITHOUT_CLASSIFICATION	0.9999889510390081	WITHOUT_CLASSIFICATION	1.1048960991954827E-5	DEFECT
// then deliver mail to the target	WITHOUT_CLASSIFICATION	0.9999594348876398	WITHOUT_CLASSIFICATION	4.0565112360262745E-5	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9989257942840087	WITHOUT_CLASSIFICATION	0.001074205715991227	DEFECT
// Define a second version that doesn't take a block, so we have unique code paths for both cases.	WITHOUT_CLASSIFICATION	0.9974219077160633	WITHOUT_CLASSIFICATION	0.002578092283936576	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999787349870591	WITHOUT_CLASSIFICATION	2.1265012940932123E-5	DEFECT
// main body	WITHOUT_CLASSIFICATION	0.9999887609259761	WITHOUT_CLASSIFICATION	1.1239074023959609E-5	DEFECT
// return jump handling	WITHOUT_CLASSIFICATION	0.9999927798416552	WITHOUT_CLASSIFICATION	7.220158344872989E-6	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999508282495598	WITHOUT_CLASSIFICATION	4.917175044025551E-5	DEFECT
// return result if we're still good	WITHOUT_CLASSIFICATION	0.9999837449280968	WITHOUT_CLASSIFICATION	1.6255071903156754E-5	DEFECT
// redo jump handling	WITHOUT_CLASSIFICATION	0.9999783695622919	WITHOUT_CLASSIFICATION	2.1630437708142044E-5	DEFECT
// clear the redo	WITHOUT_CLASSIFICATION	0.9999942634813279	WITHOUT_CLASSIFICATION	5.736518672160369E-6	DEFECT
// get runtime, create jump error, and throw it	WITHOUT_CLASSIFICATION	0.9973401470838292	WITHOUT_CLASSIFICATION	0.0026598529161708196	DEFECT
// throw redo error if we're still good	WITHOUT_CLASSIFICATION	0.999415064022663	WITHOUT_CLASSIFICATION	5.849359773369037E-4	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9997175473213712	WITHOUT_CLASSIFICATION	2.824526786288097E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.998914948839271	WITHOUT_CLASSIFICATION	0.001085051160728947	DEFECT
// No required specified, check actual number of required args	WITHOUT_CLASSIFICATION	0.9995209865788978	WITHOUT_CLASSIFICATION	4.79013421102267E-4	DEFECT
// actual required is less than 3, so we use specific arity	WITHOUT_CLASSIFICATION	0.9997596878476319	WITHOUT_CLASSIFICATION	2.4031215236802245E-4	DEFECT
// actual required is greater than 3, raise error (we don't support actual required > 3)	WITHOUT_CLASSIFICATION	0.9940544159389184	WITHOUT_CLASSIFICATION	0.0059455840610816236	DEFECT
// simple path, no multimethod	WITHOUT_CLASSIFICATION	0.999990912988599	WITHOUT_CLASSIFICATION	9.087011400991614E-6	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998208896449425	WITHOUT_CLASSIFICATION	1.7911035505747218E-4	DEFECT
// in debug mode we append _DBG to class name to force it to regenerate (or use pre-generated debug version)	WITHOUT_CLASSIFICATION	0.9998208896449425	WITHOUT_CLASSIFICATION	1.7911035505747218E-4	DEFECT
// normal all-rest method	WITHOUT_CLASSIFICATION	0.9999812128933883	WITHOUT_CLASSIFICATION	1.8787106611783585E-5	DEFECT
// for zero, one, two, three arities, JavaMethod.JavaMethod*.call(...IRubyObject[] args...) will check	WITHOUT_CLASSIFICATION	0.9998179573406345	WITHOUT_CLASSIFICATION	1.820426593654275E-4	DEFECT
// promise to implement zero to N	WITHOUT_CLASSIFICATION	0.999713690900122	WITHOUT_CLASSIFICATION	2.8630909987811706E-4	DEFECT
// return	WITHOUT_CLASSIFICATION	0.9999835089429063	WITHOUT_CLASSIFICATION	1.649105709376057E-5	DEFECT
// just confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9999446870517567	WITHOUT_CLASSIFICATION	5.5312948243387275E-5	DEFECT
// just confirm args length == required	WITHOUT_CLASSIFICATION	0.999894539128462	WITHOUT_CLASSIFICATION	1.054608715378996E-4	DEFECT
// confirm minimum args provided	WITHOUT_CLASSIFICATION	0.9998818056724731	WITHOUT_CLASSIFICATION	1.1819432752684247E-4	DEFECT
// confirm maximum not greater than optional	WITHOUT_CLASSIFICATION	0.9937525442483894	WITHOUT_CLASSIFICATION	0.006247455751610511	DEFECT
// Raise an error if arity does not match requirements	WITHOUT_CLASSIFICATION	0.9973423249221612	WITHOUT_CLASSIFICATION	0.0026576750778388217	DEFECT
// tc	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// self // name	WITHOUT_CLASSIFICATION	0.999989902572912	WITHOUT_CLASSIFICATION	1.0097427088020972E-5	DEFECT
// no args	WITHOUT_CLASSIFICATION	0.9999784877857909	WITHOUT_CLASSIFICATION	2.1512214209156953E-5	DEFECT
// variable args with block	WITHOUT_CLASSIFICATION	0.9999945750199147	WITHOUT_CLASSIFICATION	5.424980085206004E-6	DEFECT
// variable args no block, load null block	WITHOUT_CLASSIFICATION	0.9999545672109291	WITHOUT_CLASSIFICATION	4.5432789070923546E-5	DEFECT
// zero args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998502643085209	WITHOUT_CLASSIFICATION	1.4973569147913875E-4	DEFECT
// one arg with block	WITHOUT_CLASSIFICATION	0.9999972505614073	WITHOUT_CLASSIFICATION	2.7494385925819164E-6	DEFECT
// one arg, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9999253050758717	WITHOUT_CLASSIFICATION	7.469492412824664E-5	DEFECT
// two args with block	WITHOUT_CLASSIFICATION	0.9999957720415367	WITHOUT_CLASSIFICATION	4.227958463421801E-6	DEFECT
// two args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.9998835604985251	WITHOUT_CLASSIFICATION	1.1643950147498879E-4	DEFECT
// three args with block	WITHOUT_CLASSIFICATION	0.9999944140216807	WITHOUT_CLASSIFICATION	5.585978319258654E-6	DEFECT
// three args, no block; load NULL_BLOCK	WITHOUT_CLASSIFICATION	0.999846165686311	WITHOUT_CLASSIFICATION	1.538343136890064E-4	DEFECT
// load block if it accepts block	WITHOUT_CLASSIFICATION	0.9998561996985642	WITHOUT_CLASSIFICATION	1.4380030143574393E-4	DEFECT
// all other arg cases with block	WITHOUT_CLASSIFICATION	0.9999753725515913	WITHOUT_CLASSIFICATION	2.462744840869049E-5	DEFECT
// all other arg cases without block	WITHOUT_CLASSIFICATION	0.999953532857804	WITHOUT_CLASSIFICATION	4.6467142195958446E-5	DEFECT
// one arg, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999924861542151	WITHOUT_CLASSIFICATION	7.513845784851221E-6	DEFECT
// two args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999988286468994	WITHOUT_CLASSIFICATION	1.1713531005957229E-5	DEFECT
// three args, no block; do nothing	WITHOUT_CLASSIFICATION	0.9999845241211601	WITHOUT_CLASSIFICATION	1.547587883980896E-5	DEFECT
// load target for invocations	WITHOUT_CLASSIFICATION	0.999972590569895	WITHOUT_CLASSIFICATION	2.740943010515559E-5	DEFECT
// load receiver as original type for virtual invocation	WITHOUT_CLASSIFICATION	0.9998760929902588	WITHOUT_CLASSIFICATION	1.239070097411984E-4	DEFECT
// static invocation	WITHOUT_CLASSIFICATION	0.9999848109471334	WITHOUT_CLASSIFICATION	1.5189052866482528E-5	DEFECT
// virtual invocation	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// void return type, so we need to load a nil for returning below	WITHOUT_CLASSIFICATION	0.9998688604649436	WITHOUT_CLASSIFICATION	1.3113953505641964E-4	DEFECT
// normal finally and exit	WITHOUT_CLASSIFICATION	0.9999775573374912	WITHOUT_CLASSIFICATION	2.244266250893865E-5	DEFECT
// promise to implement one to N	WITHOUT_CLASSIFICATION	0.9998571663152447	WITHOUT_CLASSIFICATION	1.428336847552591E-4	DEFECT
//call post method stuff (exception raised)	WITHOUT_CLASSIFICATION	0.998914948839271	WITHOUT_CLASSIFICATION	0.001085051160728947	DEFECT
// these are only needed if we have a non-noop call config	WITHOUT_CLASSIFICATION	0.999818754393969	WITHOUT_CLASSIFICATION	1.8124560603096786E-4	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999079362464158	WITHOUT_CLASSIFICATION	9.206375358412505E-5	DEFECT
// method itself // ThreadContext // invoked name	WITHOUT_CLASSIFICATION	0.9999079362464158	WITHOUT_CLASSIFICATION	9.206375358412505E-5	DEFECT
// singleton classes don't get their own visibility domain	WITHOUT_CLASSIFICATION	0.9999099368567612	WITHOUT_CLASSIFICATION	9.006314323876779E-5	DEFECT
// For visibility we need real meta class and not anonymous one from class << self	WITHOUT_CLASSIFICATION	0.9998632657538825	WITHOUT_CLASSIFICATION	1.3673424611745328E-4	DEFECT
// SimpleInvocationMethod	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// never reached	WITHOUT_CLASSIFICATION	0.9999527466072454	WITHOUT_CLASSIFICATION	4.725339275454707E-5	DEFECT
// promise to implement N with block	WITHOUT_CLASSIFICATION	0.9999252559676434	WITHOUT_CLASSIFICATION	7.474403235664276E-5	DEFECT
// promise to implement zero to N with block	WITHOUT_CLASSIFICATION	0.9999272475333147	WITHOUT_CLASSIFICATION	7.275246668524387E-5	DEFECT
// promise to implement one to N with block	WITHOUT_CLASSIFICATION	0.9999637091848548	WITHOUT_CLASSIFICATION	3.629081514519214E-5	DEFECT
// promise to implement two to N with block	WITHOUT_CLASSIFICATION	0.9999434262076472	WITHOUT_CLASSIFICATION	5.6573792352668864E-5	DEFECT
// promise to implement zero to three with block	WITHOUT_CLASSIFICATION	0.9999272475333147	WITHOUT_CLASSIFICATION	7.275246668524387E-5	DEFECT
// promise to implement one to three with block	WITHOUT_CLASSIFICATION	0.9999637091848548	WITHOUT_CLASSIFICATION	3.629081514519214E-5	DEFECT
// promise to implement two to three with block	WITHOUT_CLASSIFICATION	0.9999434262076472	WITHOUT_CLASSIFICATION	5.6573792352668864E-5	DEFECT
// promise to implement three with block	WITHOUT_CLASSIFICATION	0.9999252559676434	WITHOUT_CLASSIFICATION	7.474403235664276E-5	DEFECT
// promise to implement N	WITHOUT_CLASSIFICATION	0.9999630485026825	WITHOUT_CLASSIFICATION	3.695149731746655E-5	DEFECT
// DumpingInvocationMethodFactory	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// We promote our box to being its own box since we're changing // visibilities, and need it to be reflected on this method object // independent of any other sharing the box.	WITHOUT_CLASSIFICATION	0.9997809324018587	WITHOUT_CLASSIFICATION	2.1906759814128906E-4	DEFECT
// Normally we could leave these to fall back on the superclass, but // since it dispatches through the [] version below, which may // dispatch through the []+block version, we can save it a couple hops // by overriding these here.	WITHOUT_CLASSIFICATION	0.9984749822176865	WITHOUT_CLASSIFICATION	0.0015250177823135011	DEFECT
// promise to implement two to N	WITHOUT_CLASSIFICATION	0.9997773496675761	WITHOUT_CLASSIFICATION	2.226503324239107E-4	DEFECT
// promise to implement three to N	WITHOUT_CLASSIFICATION	0.9997058550384913	WITHOUT_CLASSIFICATION	2.941449615086391E-4	DEFECT
// promise to implement zero to three	WITHOUT_CLASSIFICATION	0.999713690900122	WITHOUT_CLASSIFICATION	2.8630909987811706E-4	DEFECT
// promise to implement one to three	WITHOUT_CLASSIFICATION	0.9998571663152447	WITHOUT_CLASSIFICATION	1.428336847552591E-4	DEFECT
// promise to implement two to three	WITHOUT_CLASSIFICATION	0.9997773496675761	WITHOUT_CLASSIFICATION	2.226503324239107E-4	DEFECT
// promise to implement three	WITHOUT_CLASSIFICATION	0.9999630485026825	WITHOUT_CLASSIFICATION	3.695149731746655E-5	DEFECT
// all other arities use "n" dispatch path	WITHOUT_CLASSIFICATION	0.9999139699477336	WITHOUT_CLASSIFICATION	8.603005226638865E-5	DEFECT
// load up object and add a few useful methods	WITHOUT_CLASSIFICATION	0.999663177770874	WITHOUT_CLASSIFICATION	3.368222291260043E-4	DEFECT
// open up the 'to_java' and 'as' coercion methods on Ruby Objects, via Kernel	WITHOUT_CLASSIFICATION	0.999971160346219	WITHOUT_CLASSIFICATION	2.883965378097766E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999057255702052	WITHOUT_CLASSIFICATION	9.427442979485151E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9996752725721193	WITHOUT_CLASSIFICATION	3.2472742788071835E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999860077953003	WITHOUT_CLASSIFICATION	1.3992204699740174E-5	DEFECT
// wrap self and store the wrapper	WITHOUT_CLASSIFICATION	0.9999307996102674	WITHOUT_CLASSIFICATION	6.920038973263234E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999828713578095	WITHOUT_CLASSIFICATION	1.712864219043754E-5	DEFECT
// start setup method	WITHOUT_CLASSIFICATION	0.9999621735986715	WITHOUT_CLASSIFICATION	3.7826401328566096E-5	DEFECT
// set RubyClass	WITHOUT_CLASSIFICATION	0.9999934926322677	WITHOUT_CLASSIFICATION	6.507367732320251E-6	DEFECT
// set Ruby	WITHOUT_CLASSIFICATION	0.9999934926322677	WITHOUT_CLASSIFICATION	6.507367732320251E-6	DEFECT
// all methods dispatch to the simple version by default, which is method_missing normally	WITHOUT_CLASSIFICATION	0.9980289033722161	WITHOUT_CLASSIFICATION	0.0019710966277839796	DEFECT
// try specific name first, falling back on simple name	WITHOUT_CLASSIFICATION	0.9999166479107106	WITHOUT_CLASSIFICATION	8.335208928936937E-5	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999354397306995	WITHOUT_CLASSIFICATION	6.456026930051061E-5	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999718178987492	WITHOUT_CLASSIFICATION	2.818210125082116E-5	DEFECT
// construct the class, implementing all supertypes	WITHOUT_CLASSIFICATION	0.9999057255702052	WITHOUT_CLASSIFICATION	9.427442979485151E-5	DEFECT
// fields needed for dispatch and such	WITHOUT_CLASSIFICATION	0.9996752725721193	WITHOUT_CLASSIFICATION	3.2472742788071835E-4	DEFECT
// create constructor	WITHOUT_CLASSIFICATION	0.9999860077953003	WITHOUT_CLASSIFICATION	1.3992204699740174E-5	DEFECT
// end constructor	WITHOUT_CLASSIFICATION	0.9999828713578095	WITHOUT_CLASSIFICATION	1.712864219043754E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9997764182070183	WITHOUT_CLASSIFICATION	2.2358179298166355E-4	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9994115072761002	WITHOUT_CLASSIFICATION	5.884927238997708E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999495171295699	WITHOUT_CLASSIFICATION	5.0482870430135015E-5	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999903187394943	WITHOUT_CLASSIFICATION	9.681260505748996E-6	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999846077178884	WITHOUT_CLASSIFICATION	1.5392282111544833E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999905278747795	WITHOUT_CLASSIFICATION	9.47212522049192E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999703156941739	WITHOUT_CLASSIFICATION	2.9684305826014882E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999878253043248	WITHOUT_CLASSIFICATION	1.217469567510669E-5	DEFECT
// create static init, for a monitor object	WITHOUT_CLASSIFICATION	0.9995172799930624	WITHOUT_CLASSIFICATION	4.8272000693762497E-4	DEFECT
// store the wrapper	WITHOUT_CLASSIFICATION	0.9999945376788236	WITHOUT_CLASSIFICATION	5.462321176294457E-6	DEFECT
// prepare temp locals	WITHOUT_CLASSIFICATION	0.9999778302256074	WITHOUT_CLASSIFICATION	2.2169774392733827E-5	DEFECT
// Try to look up field for simple name // get field; if nonnull, go straight to dispatch	WITHOUT_CLASSIFICATION	0.9999099845777843	WITHOUT_CLASSIFICATION	9.001542221574942E-5	DEFECT
// field is null, lock class and try to populate	WITHOUT_CLASSIFICATION	0.9996591634978231	WITHOUT_CLASSIFICATION	3.4083650217683924E-4	DEFECT
// try/finally block to ensure unlock	WITHOUT_CLASSIFICATION	0.9998027494495477	WITHOUT_CLASSIFICATION	1.9725055045233646E-4	DEFECT
// store it	WITHOUT_CLASSIFICATION	0.9999757086141756	WITHOUT_CLASSIFICATION	2.4291385824476895E-5	DEFECT
// end of try block	WITHOUT_CLASSIFICATION	0.9999809751063378	WITHOUT_CLASSIFICATION	1.902489366219715E-5	DEFECT
// finally block to release monitor	WITHOUT_CLASSIFICATION	0.9997990372890401	WITHOUT_CLASSIFICATION	2.0096271095988082E-4	DEFECT
// exception handling for monitor release	WITHOUT_CLASSIFICATION	0.9991088175317253	WITHOUT_CLASSIFICATION	8.911824682747649E-4	DEFECT
// re-get, re-check method; if not null now, go to dispatch	WITHOUT_CLASSIFICATION	0.9981448122442002	WITHOUT_CLASSIFICATION	0.0018551877557997916	DEFECT
// load self, class, and name	WITHOUT_CLASSIFICATION	0.9999718178987492	WITHOUT_CLASSIFICATION	2.818210125082116E-5	DEFECT
// load arguments into IRubyObject[] for dispatch	WITHOUT_CLASSIFICATION	0.9994115072761002	WITHOUT_CLASSIFICATION	5.884927238997708E-4	DEFECT
// convert to IRubyObject	WITHOUT_CLASSIFICATION	0.9999495171295699	WITHOUT_CLASSIFICATION	5.0482870430135015E-5	DEFECT
// invoke method	WITHOUT_CLASSIFICATION	0.9999846077178884	WITHOUT_CLASSIFICATION	1.5392282111544833E-5	DEFECT
// if we expect a return value, unwrap it	WITHOUT_CLASSIFICATION	0.999905278747795	WITHOUT_CLASSIFICATION	9.47212522049192E-5	DEFECT
// end setup method	WITHOUT_CLASSIFICATION	0.9999703156941739	WITHOUT_CLASSIFICATION	2.9684305826014882E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999878253043248	WITHOUT_CLASSIFICATION	1.217469567510669E-5	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999968195346773	WITHOUT_CLASSIFICATION	3.1804653225607236E-6	DEFECT
// method still not available, call method_missing	WITHOUT_CLASSIFICATION	0.9989313315495817	WITHOUT_CLASSIFICATION	0.0010686684504183923	DEFECT
// perform the dispatch	WITHOUT_CLASSIFICATION	0.9999895018249741	WITHOUT_CLASSIFICATION	1.0498175025807473E-5	DEFECT
// try to load the specified name; only if that fails, try to define the class	WITHOUT_CLASSIFICATION	0.9999743108879658	WITHOUT_CLASSIFICATION	2.5689112034141517E-5	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998415462365489	WITHOUT_CLASSIFICATION	1.5845376345117234E-4	DEFECT
// up two slots, for long's two halves	WITHOUT_CLASSIFICATION	0.9998415462365489	WITHOUT_CLASSIFICATION	1.5845376345117234E-4	DEFECT
// setup the class	WITHOUT_CLASSIFICATION	0.9999972431395875	WITHOUT_CLASSIFICATION	2.7568604126227786E-6	DEFECT
// now, create a method_added that can replace the DynamicMethod fields as they're redefined	WITHOUT_CLASSIFICATION	0.9999446511476272	WITHOUT_CLASSIFICATION	5.5348852372843E-5	DEFECT
// do nothing, it's a non-impl method	WITHOUT_CLASSIFICATION	0.9999488342071284	WITHOUT_CLASSIFICATION	5.1165792871615235E-5	DEFECT
// probably a primitive	WITHOUT_CLASSIFICATION	0.9999708606682904	WITHOUT_CLASSIFICATION	2.9139331709446437E-5	DEFECT
// interfaces are handled as modules	WITHOUT_CLASSIFICATION	0.999984519035788	WITHOUT_CLASSIFICATION	1.548096421194388E-5	DEFECT
// construct the mirror class and parent classes	WITHOUT_CLASSIFICATION	0.9999701477909255	WITHOUT_CLASSIFICATION	2.9852209074456032E-5	DEFECT
// set the full name	WITHOUT_CLASSIFICATION	0.999998252879973	WITHOUT_CLASSIFICATION	1.7471200270558882E-6	DEFECT
// include all interfaces	WITHOUT_CLASSIFICATION	0.9999810076588779	WITHOUT_CLASSIFICATION	1.8992341122059704E-5	DEFECT
// if it's an array, only add methods for aref, aset, and length	WITHOUT_CLASSIFICATION	0.9998574342012682	WITHOUT_CLASSIFICATION	1.4256579873183627E-4	DEFECT
// add array construction methods	WITHOUT_CLASSIFICATION	0.9997468338417416	WITHOUT_CLASSIFICATION	2.5316615825850855E-4	DEFECT
// add all public constructors (note: getConstructors only returns public ones)	WITHOUT_CLASSIFICATION	0.9992490143844078	WITHOUT_CLASSIFICATION	7.50985615592205E-4	DEFECT
// add all instance and static methods	WITHOUT_CLASSIFICATION	0.9998533537373014	WITHOUT_CLASSIFICATION	1.4664626269861287E-4	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998336188188506	WITHOUT_CLASSIFICATION	1.663811811493373E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999709257047855	WITHOUT_CLASSIFICATION	2.9074295214490897E-5	DEFECT
// only include static methods if specified	WITHOUT_CLASSIFICATION	0.9999044333183844	WITHOUT_CLASSIFICATION	9.556668161556846E-5	DEFECT
// add a few type-specific special methods	WITHOUT_CLASSIFICATION	0.9999093766473787	WITHOUT_CLASSIFICATION	9.062335262125453E-5	DEFECT
// add all static variables	WITHOUT_CLASSIFICATION	0.9999674500740336	WITHOUT_CLASSIFICATION	3.25499259663241E-5	DEFECT
// only public static fields that are valid constants	WITHOUT_CLASSIFICATION	0.9999726606588775	WITHOUT_CLASSIFICATION	2.7339341122640044E-5	DEFECT
// looks like someone's trying to raise a Java exception. Let them.	WITHOUT_CLASSIFICATION	0.9999508323517897	WITHOUT_CLASSIFICATION	4.916764821036772E-5	DEFECT
// NOTE: The five match methods are arity-split to avoid the cost of boxing arguments // when there's already a cached match. Do not condense them into a single // method.	WITHOUT_CLASSIFICATION	0.9996214430252128	WITHOUT_CLASSIFICATION	3.785569747871076E-4	DEFECT
// TODO: This is where we would want to do precision checks to see // if it's non-destructive to coerce a given type into the target // integral primitive	WITHOUT_CLASSIFICATION	0.970196377414466	WITHOUT_CLASSIFICATION	0.029803622585534012	DEFECT
// long first because it's what Fixnum claims to be	WITHOUT_CLASSIFICATION	0.9985356937869038	WITHOUT_CLASSIFICATION	0.0014643062130962126	DEFECT
// double first because it's what float claims to be	WITHOUT_CLASSIFICATION	0.9987498038801964	WITHOUT_CLASSIFICATION	0.0012501961198036447	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9993292109640626	WITHOUT_CLASSIFICATION	6.707890359374086E-4	DEFECT
// we set all Java methods to optional, since many/most have overloads	WITHOUT_CLASSIFICATION	0.9999404173455012	WITHOUT_CLASSIFICATION	5.958265449889995E-5	DEFECT
// If we hold a Java object, we need a java_class accessor	WITHOUT_CLASSIFICATION	0.9999767058768648	WITHOUT_CLASSIFICATION	2.329412313511732E-5	DEFECT
// line 326	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// initialize cache of parameter types to method	WITHOUT_CLASSIFICATION	0.9993292109640626	WITHOUT_CLASSIFICATION	6.707890359374086E-4	DEFECT
// too much array creation!	WITHOUT_CLASSIFICATION	0.9999709257047855	WITHOUT_CLASSIFICATION	2.9074295214490897E-5	DEFECT
// construct new array proxy (ArrayJavaProxy)	WITHOUT_CLASSIFICATION	0.9999227312598638	WITHOUT_CLASSIFICATION	7.726874013628494E-5	DEFECT
// Get map of all fields we want to define.  	WITHOUT_CLASSIFICATION	0.998621156659297	WITHOUT_CLASSIFICATION	0.0013788433407030175	DEFECT
// Look through all mappings to find a match entry for this field	WITHOUT_CLASSIFICATION	0.9995685972404414	WITHOUT_CLASSIFICATION	4.314027595585245E-4	DEFECT
// Hit a non-java proxy class (included Modules can be a cause of this...skip)	WITHOUT_CLASSIFICATION	0.9985973946305062	WITHOUT_CLASSIFICATION	0.0014026053694937111	DEFECT
// We could not find all of them print out first one (we could print them all?)	WITHOUT_CLASSIFICATION	0.9993253264186135	WITHOUT_CLASSIFICATION	6.746735813864757E-4	DEFECT
// dummy bodies for default impls	WITHOUT_CLASSIFICATION	0.9999332292209535	WITHOUT_CLASSIFICATION	6.677077904655029E-5	DEFECT
// initialize this if it hasn't been	WITHOUT_CLASSIFICATION	0.999940653756308	WITHOUT_CLASSIFICATION	5.934624369186864E-5	DEFECT
// initialize these if they haven't been	WITHOUT_CLASSIFICATION	0.9999497602679562	WITHOUT_CLASSIFICATION	5.023973204381227E-5	DEFECT
// not allowed for original (non-generated) Java classes // note: not allowing for any previously created class right now; // this restriction might be loosened later for generated classes	WITHOUT_CLASSIFICATION	0.9996166494712837	WITHOUT_CLASSIFICATION	3.833505287163088E-4	DEFECT
// setup new, etc unless this is a ConcreteJavaProxy subclass	WITHOUT_CLASSIFICATION	0.9997036444563793	WITHOUT_CLASSIFICATION	2.9635554362074645E-4	DEFECT
// First we make modifications to the class, to adapt it to being // both a Ruby class and a proxy for a Java type	WITHOUT_CLASSIFICATION	0.9996408524153981	WITHOUT_CLASSIFICATION	3.5914758460196437E-4	DEFECT
// list of interfaces we implement	WITHOUT_CLASSIFICATION	0.9998312578036516	WITHOUT_CLASSIFICATION	1.6874219634856335E-4	DEFECT
// We capture the original "new" and make it private	WITHOUT_CLASSIFICATION	0.9982312061788448	WITHOUT_CLASSIFICATION	0.0017687938211552307	DEFECT
// The replacement "new" allocates and inits the Ruby object as before, but // also instantiates our proxified Java object by calling __jcreate!	WITHOUT_CLASSIFICATION	0.9999968987840229	WITHOUT_CLASSIFICATION	3.1012159771926774E-6	DEFECT
// Next, we define a few private methods that we'll use to manipulate // the Java object contained within this Ruby object	WITHOUT_CLASSIFICATION	0.9999861406130001	WITHOUT_CLASSIFICATION	1.38593869998552E-5	DEFECT
// jcreate instantiates the proxy object which implements all interfaces // and which is wrapped and implemented by this object	WITHOUT_CLASSIFICATION	0.9992718126472503	WITHOUT_CLASSIFICATION	7.281873527496802E-4	DEFECT
// Now we add an "implement" and "implement_all" methods to the class	WITHOUT_CLASSIFICATION	0.9999635347955115	WITHOUT_CLASSIFICATION	3.646520448855163E-5	DEFECT
// implement all forces implementation of all interfaces we intend // for this class to implement	WITHOUT_CLASSIFICATION	0.9996270764892439	WITHOUT_CLASSIFICATION	3.729235107561637E-4	DEFECT
// we've already done the above priming logic, just add another interface // to the list of intentions unless we're past the point of no return or // already intend to implement the given interface	WITHOUT_CLASSIFICATION	0.9999932358968666	WITHOUT_CLASSIFICATION	6.764103133386388E-6	DEFECT
// walk all superclasses aggregating interfaces	WITHOUT_CLASSIFICATION	0.9998163135189592	WITHOUT_CLASSIFICATION	1.8368648104085072E-4	DEFECT
// construct the new interface impl and set it into the object	WITHOUT_CLASSIFICATION	0.9999816427787258	WITHOUT_CLASSIFICATION	1.8357221274134734E-5	DEFECT
// assuming the user wants a collection of interfaces that can be // included together. make it so.	WITHOUT_CLASSIFICATION	0.9964490905266633	WITHOUT_CLASSIFICATION	0.0035509094733367054	DEFECT
// not allowed for existing Java interface modules	WITHOUT_CLASSIFICATION	0.9993587418017891	WITHOUT_CLASSIFICATION	6.412581982108643E-4	DEFECT
// To turn a module into an "interface collection" we add a class instance // variable to hold the list of interfaces, and modify append_features // for this module to call append_features on each of those interfaces as // well	WITHOUT_CLASSIFICATION	0.9999872089658688	WITHOUT_CLASSIFICATION	1.2791034131209566E-5	DEFECT
// already set up append_features, just add the interface if we haven't already	WITHOUT_CLASSIFICATION	0.9999935881163392	WITHOUT_CLASSIFICATION	6.411883660844543E-6	DEFECT
// array-of-interface-type creation/identity	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// keep this variant for kind_of? testing	WITHOUT_CLASSIFICATION	0.9998121112194087	WITHOUT_CLASSIFICATION	1.8788878059121123E-4	DEFECT
// array creation should use this variant	WITHOUT_CLASSIFICATION	0.9995052142107532	WITHOUT_CLASSIFICATION	4.947857892467796E-4	DEFECT
// parent.setConstant(name, proxyClass); // where the name should come from ?	WITHOUT_CLASSIFICATION	0.9999120450671048	WITHOUT_CLASSIFICATION	8.795493289523925E-5	DEFECT
// including interface module so old-style interface "subclasses" will // respond correctly to #kind_of?, etc.	WITHOUT_CLASSIFICATION	0.9995587452380352	WITHOUT_CLASSIFICATION	4.4125476196478643E-4	DEFECT
// add reference to interface module	WITHOUT_CLASSIFICATION	0.9996683786256965	WITHOUT_CLASSIFICATION	3.3162137430344446E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// proxy is complete, return it	WITHOUT_CLASSIFICATION	0.9998336188188506	WITHOUT_CLASSIFICATION	1.663811811493373E-4	DEFECT
// same as argument_types, but matches name in java.lang.reflect.Constructor/Method	WITHOUT_CLASSIFICATION	0.999984074351259	WITHOUT_CLASSIFICATION	1.5925648741064525E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9991040383688379	WITHOUT_CLASSIFICATION	8.959616311620955E-4	DEFECT
// weakly reserved names	WITHOUT_CLASSIFICATION	0.9999775288956793	WITHOUT_CLASSIFICATION	2.24711043207193E-5	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998925729678274	WITHOUT_CLASSIFICATION	1.0742703217257081E-4	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998925729678274	WITHOUT_CLASSIFICATION	1.0742703217257081E-4	DEFECT
// modified only by addMethod; no synchronization required	WITHOUT_CLASSIFICATION	0.9997755907413961	WITHOUT_CLASSIFICATION	2.2440925860386444E-4	DEFECT
// if there's no constructor, we must prevent construction	WITHOUT_CLASSIFICATION	0.9999494938170042	WITHOUT_CLASSIFICATION	5.0506182995908154E-5	DEFECT
// caching constructors, as they're accessed for each new instance	WITHOUT_CLASSIFICATION	0.9999746093814248	WITHOUT_CLASSIFICATION	2.5390618575193664E-5	DEFECT
// proxy module for interfaces	WITHOUT_CLASSIFICATION	0.9999712828701255	WITHOUT_CLASSIFICATION	2.8717129874439416E-5	DEFECT
// proxy class for concrete classes.  also used for // "concrete" interfaces, which is why we have two fields	WITHOUT_CLASSIFICATION	0.9999058979515125	WITHOUT_CLASSIFICATION	9.410204848749045E-5	DEFECT
// readable only by thread building proxy, so don't need to be // volatile. used to handle recursive calls to getProxyClass/Module // while proxy is being constructed (usually when a constant // defined by a class is of the same type as that class).	WITHOUT_CLASSIFICATION	0.999989395219209	WITHOUT_CLASSIFICATION	1.0604780790900934E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.998041505081407	WITHOUT_CLASSIFICATION	0.0019584949185930353	DEFECT
// Now add all aliases for the static methods (fields) as appropriate	WITHOUT_CLASSIFICATION	0.9999206231525869	WITHOUT_CLASSIFICATION	7.937684741311354E-5	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9986382205213963	WITHOUT_CLASSIFICATION	0.0013617794786036743	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999898582147717	WITHOUT_CLASSIFICATION	1.014178522828357E-5	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9996740528192418	WITHOUT_CLASSIFICATION	3.2594718075824647E-4	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999778988831676	WITHOUT_CLASSIFICATION	2.2101116832432943E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998240503177767	WITHOUT_CLASSIFICATION	1.759496822233037E-4	DEFECT
// Additionally add ?-postfixed aliases to any boolean methods and properties.	WITHOUT_CLASSIFICATION	0.9997689002520777	WITHOUT_CLASSIFICATION	2.3109974792230646E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// something?	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999250897569026	WITHOUT_CLASSIFICATION	7.491024309740374E-5	DEFECT
// setup constants for public inner classes	WITHOUT_CLASSIFICATION	0.9999250897569026	WITHOUT_CLASSIFICATION	7.491024309740374E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999659010432436	WITHOUT_CLASSIFICATION	3.409895675639838E-5	DEFECT
// Ignore bad constant named inner classes pending JRUBY-697	WITHOUT_CLASSIFICATION	0.9999659010432436	WITHOUT_CLASSIFICATION	3.409895675639838E-5	DEFECT
// create constructorInstaller; if there are no constructors, it will disable construction	WITHOUT_CLASSIFICATION	0.9999767695992338	WITHOUT_CLASSIFICATION	2.3230400766277633E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999511559118108	WITHOUT_CLASSIFICATION	4.8844088189208156E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999852896685171	WITHOUT_CLASSIFICATION	1.4710331482932862E-5	DEFECT
// now iterate over all installers and make sure they also have appropriate aliases	WITHOUT_CLASSIFICATION	0.9999459188733609	WITHOUT_CLASSIFICATION	5.408112663912407E-5	DEFECT
// old (quasi-deprecated) interface class	WITHOUT_CLASSIFICATION	0.9999677781996604	WITHOUT_CLASSIFICATION	3.2221800339463535E-5	DEFECT
// 1.9 support for encodings	WITHOUT_CLASSIFICATION	0.9998927291839135	WITHOUT_CLASSIFICATION	1.0727081608655134E-4	DEFECT
// double-check the cache now that we're synchronized	WITHOUT_CLASSIFICATION	0.9999806426859214	WITHOUT_CLASSIFICATION	1.935731407866854E-5	DEFECT
// setFoo(Foo) => foo=(Foo)	WITHOUT_CLASSIFICATION	0.9999778988831676	WITHOUT_CLASSIFICATION	2.2101116832432943E-5	DEFECT
// isFoo() => foo, isFoo(*) => foo(*)	WITHOUT_CLASSIFICATION	0.9998240503177767	WITHOUT_CLASSIFICATION	1.759496822233037E-4	DEFECT
// is_something?, contains_thing?	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// one word type name that starts lower-case...it may be a primitive type	WITHOUT_CLASSIFICATION	0.9999744858081918	WITHOUT_CLASSIFICATION	2.5514191808226017E-5	DEFECT
// Java.getProxyClass deals with sync issues, so we won't duplicate the logic here	WITHOUT_CLASSIFICATION	0.9999881212570674	WITHOUT_CLASSIFICATION	1.1878742932581352E-5	DEFECT
// note: intentionally returning the actual array returned from Java, rather // than wrapping it in a RubyArray. wave of the future, when java_class will // return the actual class, rather than a JavaClass wrapper.	WITHOUT_CLASSIFICATION	0.9958621289733645	WITHOUT_CLASSIFICATION	0.0041378710266354755	DEFECT
// see note above re: return type	WITHOUT_CLASSIFICATION	0.9999646180094619	WITHOUT_CLASSIFICATION	3.538199053809786E-5	DEFECT
// restrictive security policy; no matter, we only want public // classes anyway	WITHOUT_CLASSIFICATION	0.9999265394541281	WITHOUT_CLASSIFICATION	7.346054587190016E-5	DEFECT
// very restrictive policy (disallows Member.PUBLIC) // we'd never actually get this far in that case	WITHOUT_CLASSIFICATION	0.9998598911940219	WITHOUT_CLASSIFICATION	1.4010880597823558E-4	DEFECT
// one-dimensional array	WITHOUT_CLASSIFICATION	0.9999671546717199	WITHOUT_CLASSIFICATION	3.284532828004168E-5	DEFECT
// n-dimensional array	WITHOUT_CLASSIFICATION	0.9999671546717199	WITHOUT_CLASSIFICATION	3.284532828004168E-5	DEFECT
// if it's an array of arrays, recurse with the component type	WITHOUT_CLASSIFICATION	0.9999771608504615	WITHOUT_CLASSIFICATION	2.2839149538440183E-5	DEFECT
// we all all superclasses, but avoid adding superclass methods with same name+signature as subclass methods // see JRUBY-3130	WITHOUT_CLASSIFICATION	0.9999898442375271	WITHOUT_CLASSIFICATION	1.0155762472957703E-5	DEFECT
// Proc implementing an interface, pull in the catch-all code that lets the proc get invoked // no matter what method is called on the interface	WITHOUT_CLASSIFICATION	0.9999693713345891	WITHOUT_CLASSIFICATION	3.062866541095838E-5	DEFECT
// can't be converted any more, return it	WITHOUT_CLASSIFICATION	0.9993800857807422	WITHOUT_CLASSIFICATION	6.19914219257807E-4	DEFECT
// getFooBar() => fooBar?, foo_bar?(*)	WITHOUT_CLASSIFICATION	0.9998240503177767	WITHOUT_CLASSIFICATION	1.759496822233037E-4	DEFECT
// If not a property, but is boolean add ?-postfixed aliases.	WITHOUT_CLASSIFICATION	0.9987001529249975	WITHOUT_CLASSIFICATION	0.0012998470750025047	DEFECT
// many cases are ok to convert to float; if not one of these, error	WITHOUT_CLASSIFICATION	0.9946824023553432	WITHOUT_CLASSIFICATION	0.005317597644656858	DEFECT
// for Object, default to natural wrapper type	WITHOUT_CLASSIFICATION	0.9999452481760625	WITHOUT_CLASSIFICATION	5.47518239375567E-5	DEFECT
// rubyObject is already of the required jruby class (or subclass)	WITHOUT_CLASSIFICATION	0.9999028969397938	WITHOUT_CLASSIFICATION	9.710306020616596E-5	DEFECT
// the converters handle not only primitive types but also their boxed versions, so we should check // if we have a converter before checking for isPrimitive()	WITHOUT_CLASSIFICATION	0.9999686795780158	WITHOUT_CLASSIFICATION	3.1320421984138366E-5	DEFECT
// it's not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9997122979838043	WITHOUT_CLASSIFICATION	2.8770201619562647E-4	DEFECT
// we've found a Java type to which we've coerced the Ruby value, wrap it	WITHOUT_CLASSIFICATION	0.9999793599722353	WITHOUT_CLASSIFICATION	2.0640027764728544E-5	DEFECT
// set of utility methods for Java-based proxy objects	WITHOUT_CLASSIFICATION	0.9997996103831023	WITHOUT_CLASSIFICATION	2.0038961689763268E-4	DEFECT
// the proxy (wrapper) type hierarchy	WITHOUT_CLASSIFICATION	0.9999600343143258	WITHOUT_CLASSIFICATION	3.996568567428821E-5	DEFECT
//InterfaceJavaProxy.createInterfaceJavaProxy(context);	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// also create the JavaProxy* classes	WITHOUT_CLASSIFICATION	0.9999687505710494	WITHOUT_CLASSIFICATION	3.1249428950678944E-5	DEFECT
// The template for interface modules	WITHOUT_CLASSIFICATION	0.9998104239206598	WITHOUT_CLASSIFICATION	1.895760793402168E-4	DEFECT
// Now attach Java-related extras to core classes	WITHOUT_CLASSIFICATION	0.9997791583470179	WITHOUT_CLASSIFICATION	2.2084165298205376E-4	DEFECT
// add all name-to-class mappings	WITHOUT_CLASSIFICATION	0.9996767455743715	WITHOUT_CLASSIFICATION	3.2325442562853473E-4	DEFECT
// add some base Java classes everyone will need	WITHOUT_CLASSIFICATION	0.9999829264885239	WITHOUT_CLASSIFICATION	1.7073511476061853E-5	DEFECT
// finally, set JavaSupport.isEnabled to true	WITHOUT_CLASSIFICATION	0.9998556260247616	WITHOUT_CLASSIFICATION	1.4437397523842324E-4	DEFECT
// shouldn't happen, but if a superclass is specified, it's not ours	WITHOUT_CLASSIFICATION	0.9993568346612398	WITHOUT_CLASSIFICATION	6.431653387602393E-4	DEFECT
// include any interfaces we extend	WITHOUT_CLASSIFICATION	0.9998867521175832	WITHOUT_CLASSIFICATION	1.1324788241684265E-4	DEFECT
// java.lang.Object is added at root of java proxy classes	WITHOUT_CLASSIFICATION	0.9990505642196498	WITHOUT_CLASSIFICATION	9.494357803502258E-4	DEFECT
// other java proxy classes added under their superclass' java proxy	WITHOUT_CLASSIFICATION	0.9999434899674583	WITHOUT_CLASSIFICATION	5.6510032541775704E-5	DEFECT
// include interface modules into the proxy class	WITHOUT_CLASSIFICATION	0.999987126481939	WITHOUT_CLASSIFICATION	1.2873518060936086E-5	DEFECT
// JRUBY-2938 the proxy class might already exist	WITHOUT_CLASSIFICATION	0.9999643053572892	WITHOUT_CLASSIFICATION	3.56946427108766E-5	DEFECT
// add java_method for unbound use	WITHOUT_CLASSIFICATION	0.9995516567912386	WITHOUT_CLASSIFICATION	4.483432087613754E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999384024211759	WITHOUT_CLASSIFICATION	6.159757882404624E-5	DEFECT
// we'll only map conventional class names to modules 	WITHOUT_CLASSIFICATION	0.9995533411856933	WITHOUT_CLASSIFICATION	4.466588143067532E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999868221696506	WITHOUT_CLASSIFICATION	1.317783034930452E-5	DEFECT
// Haven't found a class, continue on as though it were a package	WITHOUT_CLASSIFICATION	0.9997579577623878	WITHOUT_CLASSIFICATION	2.4204223761207881E-4	DEFECT
// upper case name, so most likely a class	WITHOUT_CLASSIFICATION	0.9999897364594631	WITHOUT_CLASSIFICATION	1.0263540536937984E-5	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9991040383688379	WITHOUT_CLASSIFICATION	8.959616311620955E-4	DEFECT
// add alias to meta	WITHOUT_CLASSIFICATION	0.9999384024211759	WITHOUT_CLASSIFICATION	6.159757882404624E-5	DEFECT
// this is where we'll get connected when classes are opened using // package module syntax.	WITHOUT_CLASSIFICATION	0.999978688005927	WITHOUT_CLASSIFICATION	2.1311994073025504E-5	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9809064163887081	WITHOUT_CLASSIFICATION	0.019093583611291896	DEFECT
// this covers primitives and (unlikely) lower-case class names	WITHOUT_CLASSIFICATION	0.9999271833358353	WITHOUT_CLASSIFICATION	7.28166641646956E-5	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9992055236044305	WITHOUT_CLASSIFICATION	7.944763955693988E-4	DEFECT
/* not primitive or lc class */	WITHOUT_CLASSIFICATION	0.9992055236044305	WITHOUT_CLASSIFICATION	7.944763955693988E-4	DEFECT
// Is there a supplied proc argument or do we assume a block was supplied	WITHOUT_CLASSIFICATION	0.9999940065445712	WITHOUT_CLASSIFICATION	5.993455428804068E-6	DEFECT
// Create list of interfaces to proxy (and make sure they really are interfaces)	WITHOUT_CLASSIFICATION	0.9997732448753003	WITHOUT_CLASSIFICATION	2.267551246996949E-4	DEFECT
// hashcode is a combination of the interfaces and the Ruby class we're using // to implement them	WITHOUT_CLASSIFICATION	0.9998204971865104	WITHOUT_CLASSIFICATION	1.7950281348950132E-4	DEFECT
// if it's a singleton class and the real class is proc, we're doing closure conversion // so just use Proc's hashcode	WITHOUT_CLASSIFICATION	0.9999977705976885	WITHOUT_CLASSIFICATION	2.229402311548975E-6	DEFECT
// normal new class implementing interfaces	WITHOUT_CLASSIFICATION	0.9999810440398206	WITHOUT_CLASSIFICATION	1.8955960179372708E-5	DEFECT
/*         * Initialize some components.         */	WITHOUT_CLASSIFICATION	0.9999632368698842	WITHOUT_CLASSIFICATION	3.676313011579735E-5	DEFECT
// not synchronizing these methods, no harm if these values get set more // than once. // (also note that there's no chance of getting a partially initialized // class/module, as happens-before is guaranteed by volatile write/read // of constants table.)	WITHOUT_CLASSIFICATION	0.9949449094655692	WITHOUT_CLASSIFICATION	0.005055090534430753	DEFECT
// Java reflection does not allow retrieving constructors like methods	WITHOUT_CLASSIFICATION	0.9982876474664831	WITHOUT_CLASSIFICATION	0.001712352533516925	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9998436772722996	WITHOUT_CLASSIFICATION	1.5632272770030762E-4	DEFECT
// for zero args case we can stop searching	WITHOUT_CLASSIFICATION	0.9998436772722996	WITHOUT_CLASSIFICATION	1.5632272770030762E-4	DEFECT
// no matching ctor found	WITHOUT_CLASSIFICATION	0.9999882545191626	WITHOUT_CLASSIFICATION	1.174548083734588E-5	DEFECT
// Create Ruby proxies for any input arguments that are not primitives.	WITHOUT_CLASSIFICATION	0.9993052393215119	WITHOUT_CLASSIFICATION	6.947606784880285E-4	DEFECT
// prepare a faster handle if handles are enabled and the method and class are public	WITHOUT_CLASSIFICATION	0.9999990439277419	WITHOUT_CLASSIFICATION	9.560722582140283E-7	DEFECT
// must be a public method	WITHOUT_CLASSIFICATION	0.9999466739863161	WITHOUT_CLASSIFICATION	5.3326013683823006E-5	DEFECT
// must be a public class	WITHOUT_CLASSIFICATION	0.9999783612813492	WITHOUT_CLASSIFICATION	2.1638718650814366E-5	DEFECT
// must have been loaded from our known classloader hierarchy	WITHOUT_CLASSIFICATION	0.9998809414470995	WITHOUT_CLASSIFICATION	1.190585529005776E-4	DEFECT
// Special classes like Collections.EMPTY_LIST are inner classes that are private but  // implement public interfaces.  Their methods are all public methods for the public  // interface.  Let these public methods execute via setAccessible(true). 	WITHOUT_CLASSIFICATION	0.9999967007119099	WITHOUT_CLASSIFICATION	3.2992880899940967E-6	DEFECT
// search through all declared methods to find a closest match	WITHOUT_CLASSIFICATION	0.9997543189543361	WITHOUT_CLASSIFICATION	2.4568104566393887E-4	DEFECT
// no matching method found	WITHOUT_CLASSIFICATION	0.9999886498360715	WITHOUT_CLASSIFICATION	1.1350163928593528E-5	DEFECT
// this test really means, that this is a ruby-defined subclass of a java class	WITHOUT_CLASSIFICATION	0.9992382547190687	WITHOUT_CLASSIFICATION	7.617452809313324E-4	DEFECT
/*         * First we need to register the JRuby engine.         */	WITHOUT_CLASSIFICATION	0.9999764606343361	WITHOUT_CLASSIFICATION	2.3539365663846407E-5	DEFECT
/*         * Now we create a new BSFManager.         */	WITHOUT_CLASSIFICATION	0.9999687425129131	WITHOUT_CLASSIFICATION	3.1257487086858744E-5	DEFECT
/*         * Initialize a simple Frame.          */	WITHOUT_CLASSIFICATION	0.9999138243635248	WITHOUT_CLASSIFICATION	8.617563647525838E-5	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
//e.printStackTrace();	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// JRUBY-530, while case	WITHOUT_CLASSIFICATION	0.9999885198299255	WITHOUT_CLASSIFICATION	1.1480170074323697E-5	DEFECT
// end class	WITHOUT_CLASSIFICATION	0.9999878253043248	WITHOUT_CLASSIFICATION	1.217469567510669E-5	DEFECT
// // this test really means, that this is a ruby-defined subclass of a java class //	WITHOUT_CLASSIFICATION	0.9992382547190687	WITHOUT_CLASSIFICATION	7.617452809313324E-4	DEFECT
// for our purposes, Accessibles are also Members, and vice-versa, // so we'll include Member methods here.	WITHOUT_CLASSIFICATION	0.9999756244712144	WITHOUT_CLASSIFICATION	2.437552878567794E-5	DEFECT
/*             * Declare those components as beans in BSF. Then it will be             * possible to access those components in Ruby as global             * variables ($frame, $menubar, ...)             */	WITHOUT_CLASSIFICATION	0.9953782169741556	WITHOUT_CLASSIFICATION	0.00462178302584444	DEFECT
/*              * Execute a Ruby script (add the menubar to the frame).             */	WITHOUT_CLASSIFICATION	0.9999245481676272	WITHOUT_CLASSIFICATION	7.54518323727328E-5	DEFECT
/*                     * Execute Ruby statements.                     */	WITHOUT_CLASSIFICATION	0.9999220643089126	WITHOUT_CLASSIFICATION	7.793569108739078E-5	DEFECT
/*                     * Evaluates a Ruby expression and display the result.                     */	WITHOUT_CLASSIFICATION	0.9999609401061954	WITHOUT_CLASSIFICATION	3.9059893804535904E-5	DEFECT
// Populate values for the parameter names	WITHOUT_CLASSIFICATION	0.9999354165827555	WITHOUT_CLASSIFICATION	6.45834172444208E-5	DEFECT
/* package scope */	WITHOUT_CLASSIFICATION	0.9999878284225251	WITHOUT_CLASSIFICATION	1.2171577474784958E-5	DEFECT
// This point is only reached if there was an exception handler // installed.	WITHOUT_CLASSIFICATION	0.9991040383688379	WITHOUT_CLASSIFICATION	8.959616311620955E-4	DEFECT
// // Ruby-level methods //	WITHOUT_CLASSIFICATION	0.9999856626153966	WITHOUT_CLASSIFICATION	1.4337384603438212E-5	DEFECT
// need names ordered for key generation later	WITHOUT_CLASSIFICATION	0.9997555774766895	WITHOUT_CLASSIFICATION	2.4442252331046294E-4	DEFECT
// we only collect methods and interfaces for  // user-defined proxy classes.	WITHOUT_CLASSIFICATION	0.999345085570012	WITHOUT_CLASSIFICATION	6.549144299879205E-4	DEFECT
// get JavaClass if this is the new proxy class; verify it // matches if this is a superclass proxy.	WITHOUT_CLASSIFICATION	0.9999822545200484	WITHOUT_CLASSIFICATION	1.7745479951633077E-5	DEFECT
// get any included interfaces	WITHOUT_CLASSIFICATION	0.9999866758184187	WITHOUT_CLASSIFICATION	1.3324181581401E-5	DEFECT
// lock in the overridden methods for the new class, and any as-yet // uninstantiated ancestor class.	WITHOUT_CLASSIFICATION	0.9999726818719713	WITHOUT_CLASSIFICATION	2.7318128028762778E-5	DEFECT
// statically initialized below	WITHOUT_CLASSIFICATION	0.999460423052063	WITHOUT_CLASSIFICATION	5.39576947937135E-4	DEFECT
// finish class initializer	WITHOUT_CLASSIFICATION	0.9999914481081503	WITHOUT_CLASSIFICATION	8.551891849618111E-6	DEFECT
// trigger class initialization for the class	WITHOUT_CLASSIFICATION	0.999913933617789	WITHOUT_CLASSIFICATION	8.606638221091865E-5	DEFECT
// should not happen!	WITHOUT_CLASSIFICATION	0.9993296943649259	WITHOUT_CLASSIFICATION	6.7030563507403E-4	DEFECT
// start class	WITHOUT_CLASSIFICATION	0.9999888690792804	WITHOUT_CLASSIFICATION	1.1130920719621969E-5	DEFECT
// make getter for handler	WITHOUT_CLASSIFICATION	0.9998154086878063	WITHOUT_CLASSIFICATION	1.8459131219380185E-4	DEFECT
// make getter for proxy class	WITHOUT_CLASSIFICATION	0.9999292684699558	WITHOUT_CLASSIFICATION	7.073153004421427E-5	DEFECT
// add (potentially) overridden names to the key. // TODO: see note above re: optimizations	WITHOUT_CLASSIFICATION	0.8605430380552864	WITHOUT_CLASSIFICATION	0.13945696194471355	DEFECT
// We generate all constructors and let some fail during invocation later	WITHOUT_CLASSIFICATION	0.9981403661447973	WITHOUT_CLASSIFICATION	0.0018596338552027934	DEFECT
// create static private method field	WITHOUT_CLASSIFICATION	0.9998570567386825	WITHOUT_CLASSIFICATION	1.4294326131753822E-4	DEFECT
// load static empty array	WITHOUT_CLASSIFICATION	0.9999630217575676	WITHOUT_CLASSIFICATION	3.697824243240763E-5	DEFECT
// box arguments	WITHOUT_CLASSIFICATION	0.9999911802042374	WITHOUT_CLASSIFICATION	8.81979576264066E-6	DEFECT
// this is a simple rethrow handler	WITHOUT_CLASSIFICATION	0.999669827407301	WITHOUT_CLASSIFICATION	3.3017259269901297E-4	DEFECT
// // construct the super-proxy method //	WITHOUT_CLASSIFICATION	0.9999255955705123	WITHOUT_CLASSIFICATION	7.440442948774055E-5	DEFECT
// do a void return	WITHOUT_CLASSIFICATION	0.9999982291527139	WITHOUT_CLASSIFICATION	1.7708472861584312E-6	DEFECT
// // utility methods //	WITHOUT_CLASSIFICATION	0.999990545421364	WITHOUT_CLASSIFICATION	9.454578635912685E-6	DEFECT
// Is there a supplied proc argument or do we assume a block was // supplied	WITHOUT_CLASSIFICATION	0.9999940065445712	WITHOUT_CLASSIFICATION	5.993455428804068E-6	DEFECT
// store call information so method_missing impl can use it	WITHOUT_CLASSIFICATION	0.999871091903715	WITHOUT_CLASSIFICATION	1.2890809628507898E-4	DEFECT
// use the same logic as in EvaluationState	WITHOUT_CLASSIFICATION	0.9999202414183122	WITHOUT_CLASSIFICATION	7.975858168793391E-5	DEFECT
// no opt, no rest, exact match	WITHOUT_CLASSIFICATION	0.9999230277549832	WITHOUT_CLASSIFICATION	7.697224501677866E-5	DEFECT
// only rest, must be at least required	WITHOUT_CLASSIFICATION	0.999208798158374	WITHOUT_CLASSIFICATION	7.912018416259208E-4	DEFECT
// opt but no rest, must be at least required and no more than required + opt	WITHOUT_CLASSIFICATION	0.9995748554588795	WITHOUT_CLASSIFICATION	4.251445411205351E-4	DEFECT
// opt and rest, must be at least required	WITHOUT_CLASSIFICATION	0.9994934257823191	WITHOUT_CLASSIFICATION	5.06574217680827E-4	DEFECT
// No block from a nil proc	WITHOUT_CLASSIFICATION	0.9999844751158786	WITHOUT_CLASSIFICATION	1.552488412132547E-5	DEFECT
// If not already a proc then we should try and make it one.	WITHOUT_CLASSIFICATION	0.9903736468853885	WITHOUT_CLASSIFICATION	0.009626353114611502	DEFECT
// The current block is already associated with proc.  No need to create a new one	WITHOUT_CLASSIFICATION	0.999989636198332	WITHOUT_CLASSIFICATION	1.0363801668038797E-5	DEFECT
// Has the method that is calling super received a block argument	WITHOUT_CLASSIFICATION	0.9999784709753755	WITHOUT_CLASSIFICATION	2.1529024624510564E-5	DEFECT
/* NUL */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999135658831382	WITHOUT_CLASSIFICATION	8.643411686186156E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998969173326118	WITHOUT_CLASSIFICATION	1.0308266738823874E-4	DEFECT
// 'class << state.self' and 'class << obj' uses defn as opposed to defs	WITHOUT_CLASSIFICATION	0.9997227390302055	WITHOUT_CLASSIFICATION	2.772609697946191E-4	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997839153440662	WITHOUT_CLASSIFICATION	2.160846559337965E-4	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// classes are directly in the hierarchy, so no special logic is necessary for implementer	WITHOUT_CLASSIFICATION	0.9999968661560058	WITHOUT_CLASSIFICATION	3.133843994245223E-6	DEFECT
// must be power of 2 // must be power of 2	WITHOUT_CLASSIFICATION	0.9806135488087601	WITHOUT_CLASSIFICATION	0.01938645119123996	DEFECT
// Find power-of-two sizes best matching arguments	WITHOUT_CLASSIFICATION	0.9996719502963654	WITHOUT_CLASSIFICATION	3.2804970363474494E-4	DEFECT
// note segmentShift differs from ConcurrentHashMap's calculation due to // issues with System.identityHashCode (upper n bits always 0, at least  // under Java 1.6 / WinXP)	WITHOUT_CLASSIFICATION	0.9991912881733311	WITHOUT_CLASSIFICATION	8.087118266690001E-4	DEFECT
//      System.err.println("***ObjectProxyCache " + id + " started at "+ new java.util.Date());	WITHOUT_CLASSIFICATION	0.9998063288123686	WITHOUT_CLASSIFICATION	1.9367118763139796E-4	DEFECT
//    protected void finalize() throws Throwable { //        System.err.println("***ObjectProxyCache " + id + " finalized at "+ new java.util.Date()); //    }	WITHOUT_CLASSIFICATION	0.9998850225284361	WITHOUT_CLASSIFICATION	1.1497747156385705E-4	DEFECT
// EntryRefs include hash with key to facilitate lookup by Segment#expunge // after ref is removed from ReferenceQueue	WITHOUT_CLASSIFICATION	0.9982112553515441	WITHOUT_CLASSIFICATION	0.0017887446484559717	DEFECT
// Unlike WeakHashMap, our Entry does not subclass WeakReference, but rather // makes it a final field.  The theory is that doing so should force a happens-before // relationship WRT the WeakReference constructor, guaranteeing that the key will be // visibile to other threads (unless it's been GC'ed).  See JLS 17.5 (final fields) and // 17.4.5 (Happens-before order) to confirm or refute my reasoning here.	WITHOUT_CLASSIFICATION	0.9822214311066448	WITHOUT_CLASSIFICATION	0.01777856889335517	DEFECT
// references to the Java object and its proxy will either both be // weak or both be soft, since the proxy contains a strong reference // to the object, so it wouldn't make sense for the reference types // to differ.	WITHOUT_CLASSIFICATION	0.9998352281555675	WITHOUT_CLASSIFICATION	1.6477184443260102E-4	DEFECT
// ctor used by remove/rehash	WITHOUT_CLASSIFICATION	0.9999888132676541	WITHOUT_CLASSIFICATION	1.1186732345817282E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999798664461839	WITHOUT_CLASSIFICATION	2.0133553816070523E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999798664461839	WITHOUT_CLASSIFICATION	2.0133553816070523E-5	DEFECT
// must be called under lock	WITHOUT_CLASSIFICATION	0.9999798664461839	WITHOUT_CLASSIFICATION	2.0133553816070523E-5	DEFECT
// note that we'll potentially see the refs for both the java object and // proxy -- whichever we see first will cause the entry to be removed; // the other will not match an entry and will be ignored.	WITHOUT_CLASSIFICATION	0.9767835369587079	WITHOUT_CLASSIFICATION	0.023216463041292157	DEFECT
// temp method to verify tableSize value // must be called under lock	WITHOUT_CLASSIFICATION	0.9990701346366864	WITHOUT_CLASSIFICATION	9.298653633134857E-4	DEFECT
// Single node in list	WITHOUT_CLASSIFICATION	0.9999480569436742	WITHOUT_CLASSIFICATION	5.19430563259082E-5	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// indirect read-/write- volatile	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// entry exists, proxy has been gc'ed. replace entry.	WITHOUT_CLASSIFICATION	0.9999438696460619	WITHOUT_CLASSIFICATION	5.6130353938206766E-5	DEFECT
// Where we get new positions from.	WITHOUT_CLASSIFICATION	0.999802601727569	WITHOUT_CLASSIFICATION	1.973982724310507E-4	DEFECT
// Start of string ([, (, {, <, ', ", \n) 	WITHOUT_CLASSIFICATION	0.9998030712491713	WITHOUT_CLASSIFICATION	1.9692875082859404E-4	DEFECT
// Number of newlines read from the reader	WITHOUT_CLASSIFICATION	0.9997262405216184	WITHOUT_CLASSIFICATION	2.737594783815713E-4	DEFECT
// How many bytes into the source are we?	WITHOUT_CLASSIFICATION	0.999945471617304	WITHOUT_CLASSIFICATION	5.4528382696034093E-5	DEFECT
// For 'list' and only populated if list is not null.	WITHOUT_CLASSIFICATION	0.9983552124930422	WITHOUT_CLASSIFICATION	0.001644787506957852	DEFECT
// Last full line read.	WITHOUT_CLASSIFICATION	0.999920620363039	WITHOUT_CLASSIFICATION	7.937963696106733E-5	DEFECT
// Save sourceLine for error reporting to display line where error occurred	WITHOUT_CLASSIFICATION	0.998054819334689	WITHOUT_CLASSIFICATION	0.0019451806653109408	DEFECT
// Get rest of line. lineBuffer filled as side-effect...	WITHOUT_CLASSIFICATION	0.9999068677485633	WITHOUT_CLASSIFICATION	9.313225143666098E-5	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9995990293374027	WITHOUT_CLASSIFICATION	4.009706625971794E-4	DEFECT
// Expand variables, Indentation of final marker	WITHOUT_CLASSIFICATION	0.9995990293374027	WITHOUT_CLASSIFICATION	4.009706625971794E-4	DEFECT
// End of string (], ), }, >, ', ", \0)	WITHOUT_CLASSIFICATION	0.9998150719658513	WITHOUT_CLASSIFICATION	1.8492803414879504E-4	DEFECT
// How many strings are nested in the current string term	WITHOUT_CLASSIFICATION	0.9998336440798056	WITHOUT_CLASSIFICATION	1.6635592019444172E-4	DEFECT
// Single-quote fast path	WITHOUT_CLASSIFICATION	0.9999844126415023	WITHOUT_CLASSIFICATION	1.5587358497681097E-5	DEFECT
// Regexp engine 'java'	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// Was a goto in original ruby lexer	WITHOUT_CLASSIFICATION	0.9996330978147178	WITHOUT_CLASSIFICATION	3.669021852822269E-4	DEFECT
/* just ignore */	WITHOUT_CLASSIFICATION	0.9999937044591163	WITHOUT_CLASSIFICATION	6.295540883671842E-6	DEFECT
/* octal constant */	WITHOUT_CLASSIFICATION	0.9999850350108332	WITHOUT_CLASSIFICATION	1.4964989166833273E-5	DEFECT
/* hex constant */	WITHOUT_CLASSIFICATION	0.9999850350108332	WITHOUT_CLASSIFICATION	1.4964989166833273E-5	DEFECT
// PUSH(1)	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// POP	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// PUSH(0).  If you look at original macro: stack |= (n&1) => stack |= 0 => no-change.	WITHOUT_CLASSIFICATION	0.9997139001915514	WITHOUT_CLASSIFICATION	2.860998084485412E-4	DEFECT
// LEXPOP	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// SET_P	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Marker delimiting heredoc boundary	WITHOUT_CLASSIFICATION	0.9998237160603476	WITHOUT_CLASSIFICATION	1.762839396523945E-4	DEFECT
// Found end marker for this heredoc	WITHOUT_CLASSIFICATION	0.9994887784251666	WITHOUT_CLASSIFICATION	5.112215748334186E-4	DEFECT
// Put back lastLine for any elements past start of heredoc marker	WITHOUT_CLASSIFICATION	0.9986703139018748	WITHOUT_CLASSIFICATION	0.0013296860981251634	DEFECT
// Last token read via yylex().	WITHOUT_CLASSIFICATION	0.9998363014288366	WITHOUT_CLASSIFICATION	1.636985711633161E-4	DEFECT
// Value of last token which had a value associated with it.	WITHOUT_CLASSIFICATION	0.9990480870477575	WITHOUT_CLASSIFICATION	9.519129522424039E-4	DEFECT
// Stream of data that yylex() examines.	WITHOUT_CLASSIFICATION	0.9992397406389686	WITHOUT_CLASSIFICATION	7.602593610314993E-4	DEFECT
// Used for tiny smidgen of grammar in lexer (see setParserSupport())	WITHOUT_CLASSIFICATION	0.9984410028350917	WITHOUT_CLASSIFICATION	0.0015589971649083332	DEFECT
// Give a name to a value.  Enebo: This should be used more.	WITHOUT_CLASSIFICATION	0.9899462371248238	WITHOUT_CLASSIFICATION	0.010053762875176174	DEFECT
// When the heredoc identifier specifies <<-EOF that indents before ident. are ok (the '-').	WITHOUT_CLASSIFICATION	0.9999784003423456	WITHOUT_CLASSIFICATION	2.1599657654277036E-5	DEFECT
// Are we lexing Ruby 1.8 or 1.9+ syntax	WITHOUT_CLASSIFICATION	0.9997942650820504	WITHOUT_CLASSIFICATION	2.0573491794967575E-4	DEFECT
// Count of nested parentheses (1.9 only)	WITHOUT_CLASSIFICATION	0.9986625668061992	WITHOUT_CLASSIFICATION	0.0013374331938006835	DEFECT
// 1.9 only	WITHOUT_CLASSIFICATION	0.999970925093125	WITHOUT_CLASSIFICATION	2.9074906874993154E-5	DEFECT
// Short-hand (e.g. %{,%.,%!,... versus %Q{).	WITHOUT_CLASSIFICATION	0.9998359562637713	WITHOUT_CLASSIFICATION	1.6404373622881584E-4	DEFECT
// Long-hand (e.g. %Q{}).	WITHOUT_CLASSIFICATION	0.9999793946088199	WITHOUT_CLASSIFICATION	2.060539118008528E-5	DEFECT
/* no mb || ismbchar(term)*/	WITHOUT_CLASSIFICATION	0.9999699166538065	WITHOUT_CLASSIFICATION	3.0083346193488718E-5	DEFECT
/*     * Not normally used, but is left in here since it can be useful in debugging     * grammar and lexing problems.     *     */	WITHOUT_CLASSIFICATION	0.999749268915343	WITHOUT_CLASSIFICATION	2.5073108465700327E-4	DEFECT
// DEBUGGING HELP 	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* end of script. */	WITHOUT_CLASSIFICATION	0.9999284369525626	WITHOUT_CLASSIFICATION	7.156304743745498E-5	DEFECT
/* white spaces */	WITHOUT_CLASSIFICATION	0.999986322228888	WITHOUT_CLASSIFICATION	1.3677771112044782E-5	DEFECT
/* '\v' */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
/* it's a comment */	WITHOUT_CLASSIFICATION	0.9999852864676293	WITHOUT_CLASSIFICATION	1.4713532370700195E-5	DEFECT
// Replace a string of newlines with a single one	WITHOUT_CLASSIFICATION	0.9999126197168635	WITHOUT_CLASSIFICATION	8.738028313648555E-5	DEFECT
/* $\: output record separator */	WITHOUT_CLASSIFICATION	0.9998873000021617	WITHOUT_CLASSIFICATION	1.1269999783821932E-4	DEFECT
// EOF (ENEBO: After default?	WITHOUT_CLASSIFICATION	0.9999778759848217	WITHOUT_CLASSIFICATION	2.2124015178309768E-5	DEFECT
// documentation nodes	WITHOUT_CLASSIFICATION	0.9999142488374281	WITHOUT_CLASSIFICATION	8.575116257188122E-5	DEFECT
// In case last next was the newline.	WITHOUT_CLASSIFICATION	0.9996134593131365	WITHOUT_CLASSIFICATION	3.865406868635146E-4	DEFECT
// Just a plain bang	WITHOUT_CLASSIFICATION	0.9999836533475378	WITHOUT_CLASSIFICATION	1.6346652462238852E-5	DEFECT
/* $_: last read line string */	WITHOUT_CLASSIFICATION	0.9995722645557995	WITHOUT_CLASSIFICATION	4.2773544420052976E-4	DEFECT
/* $~: match-data */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* $*: argv */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* $$: pid */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* $?: last status */	WITHOUT_CLASSIFICATION	0.9999643817878718	WITHOUT_CLASSIFICATION	3.561821212822634E-5	DEFECT
/* $!: error string */	WITHOUT_CLASSIFICATION	0.9999858030726253	WITHOUT_CLASSIFICATION	1.4196927374810224E-5	DEFECT
/* $@: error position */	WITHOUT_CLASSIFICATION	0.9999775222842799	WITHOUT_CLASSIFICATION	2.2477715720063238E-5	DEFECT
/* $/: input record separator */	WITHOUT_CLASSIFICATION	0.9998110358287166	WITHOUT_CLASSIFICATION	1.8896417128353885E-4	DEFECT
/* $;: field separator */	WITHOUT_CLASSIFICATION	0.9999835715217271	WITHOUT_CLASSIFICATION	1.6428478272791603E-5	DEFECT
/* $,: output field separator */	WITHOUT_CLASSIFICATION	0.9998997181567567	WITHOUT_CLASSIFICATION	1.0028184324326093E-4	DEFECT
/* $.: last read line number */	WITHOUT_CLASSIFICATION	0.9974088838909255	WITHOUT_CLASSIFICATION	0.00259111610907455	DEFECT
/* $=: ignorecase */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
/* $:: load path */	WITHOUT_CLASSIFICATION	0.9999787013727766	WITHOUT_CLASSIFICATION	2.129862722342267E-5	DEFECT
/* $<: reading filename */	WITHOUT_CLASSIFICATION	0.9999819529194236	WITHOUT_CLASSIFICATION	1.804708057640273E-5	DEFECT
/* $": already loaded files */	WITHOUT_CLASSIFICATION	0.9999887781906737	WITHOUT_CLASSIFICATION	1.1221809326357127E-5	DEFECT
/* $&: last match */	WITHOUT_CLASSIFICATION	0.9999792930118665	WITHOUT_CLASSIFICATION	2.0706988133539204E-5	DEFECT
/* $`: string before last match */	WITHOUT_CLASSIFICATION	0.9998614308603454	WITHOUT_CLASSIFICATION	1.3856913965459446E-4	DEFECT
/* $': string after last match */	WITHOUT_CLASSIFICATION	0.9999172220757545	WITHOUT_CLASSIFICATION	8.27779242454396E-5	DEFECT
// methods 'foo!' and 'foo?' are possible but if followed by '=' it is relop	WITHOUT_CLASSIFICATION	0.999958558250133	WITHOUT_CLASSIFICATION	4.144174986696641E-5	DEFECT
/* See if it is a reserved word.  */	WITHOUT_CLASSIFICATION	0.9994361243912158	WITHOUT_CLASSIFICATION	5.638756087841892E-4	DEFECT
// enum lex_state	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// block (primary)	WITHOUT_CLASSIFICATION	0.9999928889431895	WITHOUT_CLASSIFICATION	7.111056810436337E-6	DEFECT
// block (expr)	WITHOUT_CLASSIFICATION	0.9999928889431895	WITHOUT_CLASSIFICATION	7.111056810436337E-6	DEFECT
// hash	WITHOUT_CLASSIFICATION	0.9999508885425186	WITHOUT_CLASSIFICATION	4.91114574814193E-5	DEFECT
// ENEBO: 1.9 is IS_ARG, but we need to break apart for 1.8 support.	WITHOUT_CLASSIFICATION	0.9998380858123737	WITHOUT_CLASSIFICATION	1.6191418762637503E-4	DEFECT
// FIXME: peek('u') utf8 stuff for 1.9	WITHOUT_CLASSIFICATION	0.9937751392014595	WITHOUT_CLASSIFICATION	0.006224860798540523	DEFECT
// We don't append '+' since Java number parser gets confused	WITHOUT_CLASSIFICATION	0.9969618641962372	WITHOUT_CLASSIFICATION	0.003038135803762654	DEFECT
//  hexadecimal	WITHOUT_CLASSIFICATION	0.9999703608268721	WITHOUT_CLASSIFICATION	2.963917312794262E-5	DEFECT
// binary	WITHOUT_CLASSIFICATION	0.9999539115471635	WITHOUT_CLASSIFICATION	4.608845283639545E-5	DEFECT
// decimal	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
//Octal	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//  '_' in number just ignored	WITHOUT_CLASSIFICATION	0.999893114200666	WITHOUT_CLASSIFICATION	1.0688579933397288E-4	DEFECT
// backslash	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// newline	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// horizontal tab	WITHOUT_CLASSIFICATION	0.9999875209117741	WITHOUT_CLASSIFICATION	1.2479088225869241E-5	DEFECT
// form feed	WITHOUT_CLASSIFICATION	0.9999843760505848	WITHOUT_CLASSIFICATION	1.5623949415221496E-5	DEFECT
// vertical tab	WITHOUT_CLASSIFICATION	0.9999873875900045	WITHOUT_CLASSIFICATION	1.261240999556713E-5	DEFECT
// alarm(bell)	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// escape	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// hex constant	WITHOUT_CLASSIFICATION	0.9999844532893722	WITHOUT_CLASSIFICATION	1.5546710627713348E-5	DEFECT
//char hexValue = scanHex(2);	WITHOUT_CLASSIFICATION	0.999791180473519	WITHOUT_CLASSIFICATION	2.0881952648100973E-4	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9996426353346609	WITHOUT_CLASSIFICATION	3.573646653390922E-4	DEFECT
// space	WITHOUT_CLASSIFICATION	0.9999806053746063	WITHOUT_CLASSIFICATION	1.9394625393709283E-5	DEFECT
// Where we started this marker match	WITHOUT_CLASSIFICATION	0.9998278488680991	WITHOUT_CLASSIFICATION	1.721511319009975E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999665172432283	WITHOUT_CLASSIFICATION	3.348275677167969E-5	DEFECT
// We use offset here to keep track of extra newlines for windows	WITHOUT_CLASSIFICATION	0.9961555321310512	WITHOUT_CLASSIFICATION	0.0038444678689487444	DEFECT
// If \r\n then just pass along \n (windows).  // If \r[^\n] then pass along \n (MAC).	WITHOUT_CLASSIFICATION	0.9996426353346609	WITHOUT_CLASSIFICATION	3.573646653390922E-4	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9961875012497038	WITHOUT_CLASSIFICATION	0.00381249875029617	DEFECT
// FIXME: Old Mac format strings?	WITHOUT_CLASSIFICATION	0.9961875012497038	WITHOUT_CLASSIFICATION	0.00381249875029617	DEFECT
// Where we get our newest char's	WITHOUT_CLASSIFICATION	0.9998945904736438	WITHOUT_CLASSIFICATION	1.0540952635614856E-4	DEFECT
// Our readback/pushback buffer.	WITHOUT_CLASSIFICATION	0.9998286227639082	WITHOUT_CLASSIFICATION	1.7137723609193833E-4	DEFECT
// index of last character in pushback buffer	WITHOUT_CLASSIFICATION	0.9974709120332971	WITHOUT_CLASSIFICATION	0.0025290879667028907	DEFECT
// Character read before previous read	WITHOUT_CLASSIFICATION	0.999872027269398	WITHOUT_CLASSIFICATION	1.2797273060196794E-4	DEFECT
// keep value of twoAgo around so we can restore after we unread	WITHOUT_CLASSIFICATION	0.9994284132553491	WITHOUT_CLASSIFICATION	5.715867446508748E-4	DEFECT
// NetProtocolBufferedIOLibrary	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// BigDecimalLibrary	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// TODO: FD_CLOEXEC is mysterious and we are not sure how constantine should include this. // We did it here for now	WITHOUT_CLASSIFICATION	0.5841303734823449	WITHOUT_CLASSIFICATION	0.415869626517655	DEFECT
// Ruby's designation for some platforms, minus version numbers in some cases	WITHOUT_CLASSIFICATION	0.9987610706369521	WITHOUT_CLASSIFICATION	0.0012389293630480148	DEFECT
// that's what JDK5 produces on Windows Vista	WITHOUT_CLASSIFICATION	0.999607849482353	WITHOUT_CLASSIFICATION	3.9215051764692583E-4	DEFECT
// Rubygems is too specific on host cpu so until we have real need lets default to universal //setConfig(configHash, "arch", System.getProperty("os.arch") + "-java" + System.getProperty("java.specification.version"));	WITHOUT_CLASSIFICATION	0.9999434242502855	WITHOUT_CLASSIFICATION	5.657574971446108E-5	DEFECT
// Our shell scripts pass in non-canonicalized paths, but even if we didn't // anyone who did would become unhappy because Ruby apps expect no relative // operators in the pathname (rubygems, for example).	WITHOUT_CLASSIFICATION	0.9996944539804239	WITHOUT_CLASSIFICATION	3.055460195760764E-4	DEFECT
// this set is only for darwin	WITHOUT_CLASSIFICATION	0.999954429593695	WITHOUT_CLASSIFICATION	4.55704063050075E-5	DEFECT
// DigestLibrary	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// all errors, just info; do not prevent loading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9972196365985525	WITHOUT_CLASSIFICATION	0.002780363401447493	DEFECT
// all errors, just info; do not prevent unloading // IKVM does not support JMX, and throws an error	WITHOUT_CLASSIFICATION	0.9978656164421985	WITHOUT_CLASSIFICATION	0.002134383557801412	DEFECT
// do nothing, return dummy version below	WITHOUT_CLASSIFICATION	0.999606301390773	WITHOUT_CLASSIFICATION	3.936986092269228E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// line 329	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999696308607503	WITHOUT_CLASSIFICATION	3.036913924979735E-5	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9969262219997947	WITHOUT_CLASSIFICATION	0.0030737780002052513	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999677944525643	WITHOUT_CLASSIFICATION	3.220554743575078E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999587976950542	WITHOUT_CLASSIFICATION	4.1202304945677E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999984495228699	WITHOUT_CLASSIFICATION	1.5504771300971154E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999848521957414	WITHOUT_CLASSIFICATION	1.5147804258661753E-5	DEFECT
// line 271	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 274	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 303	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 311	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 314	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 317	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 332	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 338	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 341	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 344	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 358	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 367	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 372	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 378	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 407	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 411	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 414	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 434	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 443	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 446	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 452	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 457	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 464	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 467	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 470	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 479	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 484	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 492	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 498	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 501	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 504	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 507	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 510	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 519	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 525	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 556	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 559	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 563	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 569	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 575	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 578	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 587	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 596	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 604	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 607	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 613	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 616	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 634	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 638	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 643	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 646	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 655	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 660	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 667	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 670	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 701	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 717	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 720	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 726	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 729	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 735	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 738	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 751	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 754	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 757	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 760	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 763	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 769	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 775	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 797	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 803	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 806	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 809	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 815	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 818	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 821	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 824	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 830	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 833	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 836	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 852	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 858	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 861	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 868	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 871	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 876	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 879	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 883	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 903	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 907	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 915	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 920	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 923	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 926	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 936	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 940	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 948	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 956	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 964	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 967	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 978	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 984	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 986	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 996	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1001	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1008	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1014	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1029	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1032	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1034	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1045	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1048	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1051	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1058	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1070	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1073	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1076	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1079	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1082	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1089	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1100	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1103	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1107	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1113	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1115	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1119	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1135	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1137	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1151	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1154	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1164	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1175	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1178	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1187	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1189	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1193	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1214	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1234	WITHOUT_CLASSIFICATION	0.9999405093006452	WITHOUT_CLASSIFICATION	5.9490699354846794E-5	DEFECT
// line 1239	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1243	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1263	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1269	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1280	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1283	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1290	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1296	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1299	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1302	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1309	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1313	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1315	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1328	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1335	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1352	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1358	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1374	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1381	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1415	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1431	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1434	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1440	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1443	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1453	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1465	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1477	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1480	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1485	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1488	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1510	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1516	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1533	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1550	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1553	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1556	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1565	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1568	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1571	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1574	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1577	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1587	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1600	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1609	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1623	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1626	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1638	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1641	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1644	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1649	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1655	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1658	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1661	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1672	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1677	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1687	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1694	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1733	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1745	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1757	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1769	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1775	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1784	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1808	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1814	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999808885450823	WITHOUT_CLASSIFICATION	1.9111454917754156E-5	DEFECT
/*XXX 0;*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*                      $$ = $3;*/	WITHOUT_CLASSIFICATION	0.998506715359739	WITHOUT_CLASSIFICATION	0.0014932846402609587	DEFECT
/*                  }*/	WITHOUT_CLASSIFICATION	0.9999011067291425	WITHOUT_CLASSIFICATION	9.889327085757804E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.982769297518562	WITHOUT_CLASSIFICATION	0.0172307024814379	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996523961226716	WITHOUT_CLASSIFICATION	3.4760387732837503E-4	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9994908924527631	WITHOUT_CLASSIFICATION	5.091075472368848E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9994908924527631	WITHOUT_CLASSIFICATION	5.091075472368848E-4	DEFECT
/* NOEX_PRIVATE for toplevel */	WITHOUT_CLASSIFICATION	0.9997397509655642	WITHOUT_CLASSIFICATION	2.6024903443583336E-4	DEFECT
/*mirko: check*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/* Include pipes on multiple arg type*/	WITHOUT_CLASSIFICATION	0.9994419959148966	WITHOUT_CLASSIFICATION	5.580040851033632E-4	DEFECT
// line 529	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999306433702677	WITHOUT_CLASSIFICATION	6.935662973225199E-5	DEFECT
/* XXX*/	WITHOUT_CLASSIFICATION	0.9998463340425603	WITHOUT_CLASSIFICATION	1.5366595743965367E-4	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999693837664713	WITHOUT_CLASSIFICATION	3.061623352869466E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996641771504636	WITHOUT_CLASSIFICATION	3.35822849536351E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999306433702677	WITHOUT_CLASSIFICATION	6.935662973225199E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999448025002511	WITHOUT_CLASSIFICATION	5.5197499748903E-4	DEFECT
// line 1827 "DefaultRubyParser.y"	WITHOUT_CLASSIFICATION	0.9993262433194935	WITHOUT_CLASSIFICATION	6.73756680506593E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9996446683382033	WITHOUT_CLASSIFICATION	3.55331661796694E-4	DEFECT
// line 7713 "-"	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// local scopes are argument scopes by default	WITHOUT_CLASSIFICATION	0.9999920084200034	WITHOUT_CLASSIFICATION	7.991579996748642E-6	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999196511782608	WITHOUT_CLASSIFICATION	8.034882173929099E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999196511782608	WITHOUT_CLASSIFICATION	8.034882173929099E-5	DEFECT
// We know this is a block scope because a local scope cannot be within a local scope // If topScope was itself it would have created a LocalAsgnNode above.	WITHOUT_CLASSIFICATION	0.9992031738104168	WITHOUT_CLASSIFICATION	7.968261895832773E-4	DEFECT
// ENEBO: 1.9 has CURR nodes for local/block variables.  We don't.  I believe we follow proper logic	WITHOUT_CLASSIFICATION	0.9854071134627967	WITHOUT_CLASSIFICATION	0.014592886537203186	DEFECT
// odd...but it is odd in ruby too.	WITHOUT_CLASSIFICATION	0.9983464544753919	WITHOUT_CLASSIFICATION	0.0016535455246080477	DEFECT
// What linenumber will the source think it starts from?	WITHOUT_CLASSIFICATION	0.9997155713355579	WITHOUT_CLASSIFICATION	2.8442866444201696E-4	DEFECT
// Is this inline source (aka -e "...source...")	WITHOUT_CLASSIFICATION	0.9997522732874965	WITHOUT_CLASSIFICATION	2.4772671250347325E-4	DEFECT
// We parse evals more often in source so assume an eval parse.	WITHOUT_CLASSIFICATION	0.9995542323787989	WITHOUT_CLASSIFICATION	4.457676212010659E-4	DEFECT
// Should positions added extra IDE-friendly information and leave in all newline nodes	WITHOUT_CLASSIFICATION	0.9965999434409842	WITHOUT_CLASSIFICATION	0.0034000565590158152	DEFECT
// Will parser parse Duby grammar Extensions	WITHOUT_CLASSIFICATION	0.999515469936501	WITHOUT_CLASSIFICATION	4.8453006349902006E-4	DEFECT
// Should we display extra debug information while parsing?	WITHOUT_CLASSIFICATION	0.9998904286880629	WITHOUT_CLASSIFICATION	1.0957131193704804E-4	DEFECT
// __END__ marker offset (-1 means none present)	WITHOUT_CLASSIFICATION	0.9998426107170122	WITHOUT_CLASSIFICATION	1.5738928298784872E-4	DEFECT
// Parser states:	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Is the parser current within a singleton (value is number of nested singletons)	WITHOUT_CLASSIFICATION	0.9957598430650346	WITHOUT_CLASSIFICATION	0.004240156934965455	DEFECT
// Is the parser currently within a method definition	WITHOUT_CLASSIFICATION	0.9999319701735963	WITHOUT_CLASSIFICATION	6.802982640370648E-5	DEFECT
// LOCALVAR	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// CONSTANT	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// INSTANCE VARIABLE	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// Add real top to new top (unless this top is empty [only begin/end nodes or truly empty])	WITHOUT_CLASSIFICATION	0.9998846414204223	WITHOUT_CLASSIFICATION	1.1535857957758292E-4	DEFECT
/* MRI: block_append */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
// Reduces overhead in interp by not set position every single line we encounter. 	WITHOUT_CLASSIFICATION	0.9877702782243739	WITHOUT_CLASSIFICATION	0.012229721775626052	DEFECT
// Assumption: tail is never a list node	WITHOUT_CLASSIFICATION	0.9990457000652192	WITHOUT_CLASSIFICATION	9.542999347808005E-4	DEFECT
//        return new CallOneArgNode(firstNode.getPosition(), firstNode, operator, new ArrayNode(secondNode.getPosition(), secondNode));	WITHOUT_CLASSIFICATION	0.9999657016426488	WITHOUT_CLASSIFICATION	3.429835735115677E-5	DEFECT
// Node	WITHOUT_CLASSIFICATION	0.9999515893317905	WITHOUT_CLASSIFICATION	4.8410668209480314E-5	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9985403229822127	WITHOUT_CLASSIFICATION	0.0014596770177871914	DEFECT
/*case CONSTNODE:                handleUselessWarn(node, "a constant"); return;*/	WITHOUT_CLASSIFICATION	0.9978962038706284	WITHOUT_CLASSIFICATION	0.002103796129371644	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9985403229822127	WITHOUT_CLASSIFICATION	0.0014596770177871914	DEFECT
/*case CLASSNODE: case COLON2NODE:                handleUselessWarn(node, "::"); return;*/	WITHOUT_CLASSIFICATION	0.9990675180606143	WITHOUT_CLASSIFICATION	9.324819393857353E-4	DEFECT
/*case SELFNODE:                handleUselessWarn(node, "self"); return;*/	WITHOUT_CLASSIFICATION	0.9978962038706284	WITHOUT_CLASSIFICATION	0.002103796129371644	DEFECT
// FIXME: DSTR,EVSTR,STR: warning "string literal in condition"	WITHOUT_CLASSIFICATION	0.9916059878220352	WITHOUT_CLASSIFICATION	0.008394012177964774	DEFECT
/* MRI: range_op */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// Block and block pass passed in at same time....uh oh	WITHOUT_CLASSIFICATION	0.9996772583532314	WITHOUT_CLASSIFICATION	3.227416467685902E-4	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// foo()	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// tail must be EvStrNode at this point 	WITHOUT_CLASSIFICATION	0.9996841598127011	WITHOUT_CLASSIFICATION	3.158401872989077E-4	DEFECT
//Do not add an empty string node	WITHOUT_CLASSIFICATION	0.9952501589559536	WITHOUT_CLASSIFICATION	0.0047498410440464075	DEFECT
// Zero-Argument declaration	WITHOUT_CLASSIFICATION	0.9999834192377162	WITHOUT_CLASSIFICATION	1.6580762283849446E-5	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLen 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDefRed 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyDgoto 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yySindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyRindex 945	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 152	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// dynamically increase	WITHOUT_CLASSIFICATION	0.9999696308607503	WITHOUT_CLASSIFICATION	3.036913924979735E-5	DEFECT
// else [default] reduce (yyN)	WITHOUT_CLASSIFICATION	0.9999677944525643	WITHOUT_CLASSIFICATION	3.220554743575078E-5	DEFECT
// shift to yyN	WITHOUT_CLASSIFICATION	0.9999587976950542	WITHOUT_CLASSIFICATION	4.1202304945677E-5	DEFECT
// reduce (yyN)	WITHOUT_CLASSIFICATION	0.999984495228699	WITHOUT_CLASSIFICATION	1.5504771300971154E-5	DEFECT
// leave stack alone	WITHOUT_CLASSIFICATION	0.9999848521957414	WITHOUT_CLASSIFICATION	1.5147804258661753E-5	DEFECT
// line 321	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 351	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 382	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 417	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 420	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 426	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 280	WITHOUT_CLASSIFICATION	0.9999392968976392	WITHOUT_CLASSIFICATION	6.07031023609393E-5	DEFECT
// line 283	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 296	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 324	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 327	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 331	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 333	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 336	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 342	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 345	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 348	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 354	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 368	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 377	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 388	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 392	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 397	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 429	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 432	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 436	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 445	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 448	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 454	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 459	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 466	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 469	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 478	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 481	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 488	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 494	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 497	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 503	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 506	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 509	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 512	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 521	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 526	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 540	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 543	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 546	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 566	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 610	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 672	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 696	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 772	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 782	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 788	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 791	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 534	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 549	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 552	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 558	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 561	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 571	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 574	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 579	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 586	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 589	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 592	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 595	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 598	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 623	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 627	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 630	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 633	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 639	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 648	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 657	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 661	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 666	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 678	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 682	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 688	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 699	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 706	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 708	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 727	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 737	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 753	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 779	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 801	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 808	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 811	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 817	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 842	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 848	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 893	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 899	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 932	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 944	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 960	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 980	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1004	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 820	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 826	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 829	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 832	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 851	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 857	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 860	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 863	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 866	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 869	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 875	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 884	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 887	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 890	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 902	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 909	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 912	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 916	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 922	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 928	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 941	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 947	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 951	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 955	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 965	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 969	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 977	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 983	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1013	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1023	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1035	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1041	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1043	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1054	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1057	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1060	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1069	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1075	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1111	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1130	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1140	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1158	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1204	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1207	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1247	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1251	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1078	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1084	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1087	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1090	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1093	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1114	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1116	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1118	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1124	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1126	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1138	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1144	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1149	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1155	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1162	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1173	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1179	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1182	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1190	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1196	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1213	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1217	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1231	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1236	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1244	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1254	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1258	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1264	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1270	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1273	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1276	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1279	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1282	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1289	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1292	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1295	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1298	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1305	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1348	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1387	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1392	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1462	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1470	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1496	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1502	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1595	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1598	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1308	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1311	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1317	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1323	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1326	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1329	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1337	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1342	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1345	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1354	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1359	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1366	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1369	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1373	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1377	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1383	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1399	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1401	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1406	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1417	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1424	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1427	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1430	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1433	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1436	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1442	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1445	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1458	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1464	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1489	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1493	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1507	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1519	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1532	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1538	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1542	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1557	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1573	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1591	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1629	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1632	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1705	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1725	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1742	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1749	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1818	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1822	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1607	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1610	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1622	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1625	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1636	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1639	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1647	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1651	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1657	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1660	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1663	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1678	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1702	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1711	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1719	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1722	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1731	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1734	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1738	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1746	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1756	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1758	WITHOUT_CLASSIFICATION	0.9998665590427486	WITHOUT_CLASSIFICATION	1.334409572514123E-4	DEFECT
// line 1761	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1767	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1776	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1782	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1785	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1788	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1791	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1797	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1800	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1803	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1806	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1809	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1815	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1825	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1828	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1831	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1847	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
/*$8 == null ? NilImplicitNode.NIL : $8;*/	WITHOUT_CLASSIFICATION	0.9994908924527631	WITHOUT_CLASSIFICATION	5.091075472368848E-4	DEFECT
/*$5 == null ? NilImplicitNode.NIL : $5;*/	WITHOUT_CLASSIFICATION	0.9994908924527631	WITHOUT_CLASSIFICATION	5.091075472368848E-4	DEFECT
/* .setPosFrom($2);*/	WITHOUT_CLASSIFICATION	0.9999306433702677	WITHOUT_CLASSIFICATION	6.935662973225199E-5	DEFECT
/* zero length array */	WITHOUT_CLASSIFICATION	0.9999693837664713	WITHOUT_CLASSIFICATION	3.061623352869466E-5	DEFECT
/* DStrNode: :"some text #{some expression}"*/	WITHOUT_CLASSIFICATION	0.9996641771504636	WITHOUT_CLASSIFICATION	3.35822849536351E-4	DEFECT
/* StrNode: :"some text"*/	WITHOUT_CLASSIFICATION	0.9999306433702677	WITHOUT_CLASSIFICATION	6.935662973225199E-5	DEFECT
/* EvStrNode :"#{some expression}"*/	WITHOUT_CLASSIFICATION	0.999448025002511	WITHOUT_CLASSIFICATION	5.5197499748903E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// line 1854	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1869	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1872	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1877	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1886	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1898	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1902	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1905	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1911	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1918	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1935	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1938	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1942	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1948	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1960	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1963	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1968	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1972	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1982	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1995	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 2000	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 2006	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 2010	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
/* We may need to subtract addition offset off of first */	WITHOUT_CLASSIFICATION	0.999709137437656	WITHOUT_CLASSIFICATION	2.908625623440361E-4	DEFECT
/* string fragment (we optimistically take one off in*/	WITHOUT_CLASSIFICATION	0.9999456864628237	WITHOUT_CLASSIFICATION	5.431353717632437E-5	DEFECT
/* ParserSupport.literal_concat).  Check token length*/	WITHOUT_CLASSIFICATION	0.9994955530207948	WITHOUT_CLASSIFICATION	5.044469792052299E-4	DEFECT
/* and subtract as neeeded.*/	WITHOUT_CLASSIFICATION	0.9999489295128661	WITHOUT_CLASSIFICATION	5.1070487133997735E-5	DEFECT
/*                    $$ = new ArgAuxiliaryNode($1.getPosition(), (String) $1.getValue(), 1);  */	WITHOUT_CLASSIFICATION	0.9998566251547272	WITHOUT_CLASSIFICATION	1.433748452728166E-4	DEFECT
/* ENEBO: arg surrounded by in_defined set/unset*/	WITHOUT_CLASSIFICATION	0.9992654680004784	WITHOUT_CLASSIFICATION	7.345319995215391E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
//yyparse(lexer, new jay.yydebug.yyAnim("JRuby", 9));	WITHOUT_CLASSIFICATION	0.9996446683382033	WITHOUT_CLASSIFICATION	3.55331661796694E-4	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999196511782608	WITHOUT_CLASSIFICATION	8.034882173929099E-5	DEFECT
// mark as captured if from containing scope	WITHOUT_CLASSIFICATION	0.9999196511782608	WITHOUT_CLASSIFICATION	8.034882173929099E-5	DEFECT
/* ENEBO: Removed !compile_for_eval which probably is to reduce warnings*/	WITHOUT_CLASSIFICATION	0.9933959817082353	WITHOUT_CLASSIFICATION	0.006604018291764784	DEFECT
/* was $$ = null;*/	WITHOUT_CLASSIFICATION	0.9999650930867546	WITHOUT_CLASSIFICATION	3.4906913245253E-5	DEFECT
// line 2019 "Ruby19Parser.y"	WITHOUT_CLASSIFICATION	0.9999153322671348	WITHOUT_CLASSIFICATION	8.466773286521173E-5	DEFECT
// line 8143 "-"	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// we know variables cannot be null since localstaticscope will create a 0 length one.	WITHOUT_CLASSIFICATION	0.9998049519257488	WITHOUT_CLASSIFICATION	1.9504807425111027E-4	DEFECT
// No bit math to store level since we know level is zero for this case	WITHOUT_CLASSIFICATION	0.9998730960910829	WITHOUT_CLASSIFICATION	1.2690390891716559E-4	DEFECT
// Next immediate scope.  Variable and constant scoping rules make use of this variable // in different ways.	WITHOUT_CLASSIFICATION	0.995246160891875	WITHOUT_CLASSIFICATION	0.004753839108124955	DEFECT
// Live reference to module	WITHOUT_CLASSIFICATION	0.9999622564922919	WITHOUT_CLASSIFICATION	3.774350770818196E-5	DEFECT
// Next CRef down the lexical structure	WITHOUT_CLASSIFICATION	0.9999547405509012	WITHOUT_CLASSIFICATION	4.525944909878512E-5	DEFECT
// Our name holder (offsets are assigned as variables are added	WITHOUT_CLASSIFICATION	0.9999874464592496	WITHOUT_CLASSIFICATION	1.2553540750479249E-5	DEFECT
// number of variables in this scope representing required arguments	WITHOUT_CLASSIFICATION	0.9968236943882299	WITHOUT_CLASSIFICATION	0.003176305611769966	DEFECT
// number of variables in this scope representing optional arguments	WITHOUT_CLASSIFICATION	0.9980042390389472	WITHOUT_CLASSIFICATION	0.001995760961052793	DEFECT
// index of variable that represents a "rest" arg	WITHOUT_CLASSIFICATION	0.9996243473704352	WITHOUT_CLASSIFICATION	3.75652629564921E-4	DEFECT
// Note that this object equality check is intentional, to ensure // the string and its interned version are the same object.	WITHOUT_CLASSIFICATION	0.9999411719041716	WITHOUT_CLASSIFICATION	5.8828095828325764E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999484823775032	WITHOUT_CLASSIFICATION	5.151762249674067E-5	DEFECT
// Returns slot of variable	WITHOUT_CLASSIFICATION	0.9999484823775032	WITHOUT_CLASSIFICATION	5.151762249674067E-5	DEFECT
/* Note: Only used by compiler until it can use getConstant again or use some other refactoring */	WITHOUT_CLASSIFICATION	0.9999645115222111	WITHOUT_CLASSIFICATION	3.548847778892649E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9992528903122017	WITHOUT_CLASSIFICATION	7.471096877983642E-4	DEFECT
/* Try and unload the autoload specified from internedName */	WITHOUT_CLASSIFICATION	0.9998687436530383	WITHOUT_CLASSIFICATION	1.3125634696157376E-4	DEFECT
// We override that the logic which uses this	WITHOUT_CLASSIFICATION	0.9998119083162721	WITHOUT_CLASSIFICATION	1.8809168372779661E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9998612165106474	WITHOUT_CLASSIFICATION	1.387834893526453E-4	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999917820549316	WITHOUT_CLASSIFICATION	8.217945068386102E-6	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9998612165106474	WITHOUT_CLASSIFICATION	1.387834893526453E-4	DEFECT
// . Array given to rest should pass itself // . Array with rest + other args should extract array // . Array with multiple values and NO rest should extract args if there are more than one argument	WITHOUT_CLASSIFICATION	0.9999016565463874	WITHOUT_CLASSIFICATION	9.834345361252621E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// Is this thread currently with in a function trace?	WITHOUT_CLASSIFICATION	0.9998364616523969	WITHOUT_CLASSIFICATION	1.6353834760313214E-4	DEFECT
// Is this thread currently doing an defined? defined should set things like $!	WITHOUT_CLASSIFICATION	0.999990287674586	WITHOUT_CLASSIFICATION	9.712325414074777E-6	DEFECT
//private UnsynchronizedStack parentStack;	WITHOUT_CLASSIFICATION	0.9988740605721462	WITHOUT_CLASSIFICATION	0.0011259394278536796	DEFECT
//private UnsynchronizedStack frameStack;	WITHOUT_CLASSIFICATION	0.9988740605721462	WITHOUT_CLASSIFICATION	0.0011259394278536796	DEFECT
// List of active dynamic scopes.  Each of these may have captured other dynamic scopes // to implement closures.	WITHOUT_CLASSIFICATION	0.9987211396574053	WITHOUT_CLASSIFICATION	0.0012788603425946657	DEFECT
// File where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9997629644229112	WITHOUT_CLASSIFICATION	2.3703557708864523E-4	DEFECT
// Line where current executing unit is being evaluated	WITHOUT_CLASSIFICATION	0.9997635695210748	WITHOUT_CLASSIFICATION	2.364304789251516E-4	DEFECT
// In certain places, like grep, we don't use real frames for the // call blocks. This has the effect of not setting the backref in // the correct frame - this delta is activated to the place where // the grep is running in so that the backref will be set in an // appropriate place.	WITHOUT_CLASSIFICATION	0.9653319007665887	WITHOUT_CLASSIFICATION	0.03466809923341132	DEFECT
// TOPLEVEL self and a few others want a top-level scope.  We create this one right // away and then pass it into top-level parse so it ends up being the top level.	WITHOUT_CLASSIFICATION	0.9990761592003723	WITHOUT_CLASSIFICATION	9.238407996278262E-4	DEFECT
//////////////////// CATCH MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9988983979175874	WITHOUT_CLASSIFICATION	0.0011016020824126112	DEFECT
//////////////////// FRAME MANAGEMENT ////////////////////////	WITHOUT_CLASSIFICATION	0.9988983979175874	WITHOUT_CLASSIFICATION	0.0011016020824126112	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9980811606296233	WITHOUT_CLASSIFICATION	0.0019188393703767806	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999987255927525	WITHOUT_CLASSIFICATION	1.2744072474839122E-5	DEFECT
// assert level == 0;	WITHOUT_CLASSIFICATION	0.999987255927525	WITHOUT_CLASSIFICATION	1.2744072474839122E-5	DEFECT
// look for mangling markers for compiled Ruby in method name	WITHOUT_CLASSIFICATION	0.9997607961963425	WITHOUT_CLASSIFICATION	2.392038036574619E-4	DEFECT
// if it's not a rescue or ensure, there's a frame associated, so decrement	WITHOUT_CLASSIFICATION	0.9995403544878861	WITHOUT_CLASSIFICATION	4.5964551211387963E-4	DEFECT
// look for __file__ method name for compiled roots	WITHOUT_CLASSIFICATION	0.999897383172765	WITHOUT_CLASSIFICATION	1.0261682723505775E-4	DEFECT
// All entries following removed node can stay // in list, but all preceding ones need to be // cloned.	WITHOUT_CLASSIFICATION	0.9982899425364269	WITHOUT_CLASSIFICATION	0.0017100574635730574	DEFECT
// required and optional only	WITHOUT_CLASSIFICATION	0.9999314138853874	WITHOUT_CLASSIFICATION	6.858611461253842E-5	DEFECT
// do nothing, allow loop to redo	WITHOUT_CLASSIFICATION	0.9998612165106474	WITHOUT_CLASSIFICATION	1.387834893526453E-4	DEFECT
// look for mangling markers for bound, unframed methods in class name	WITHOUT_CLASSIFICATION	0.9999375768772065	WITHOUT_CLASSIFICATION	6.242312279347894E-5	DEFECT
// set the binding's frame's "previous" file and line to current, so // trace will show who called the block	WITHOUT_CLASSIFICATION	0.9999893380838373	WITHOUT_CLASSIFICATION	1.0661916162746087E-5	DEFECT
// framed invokers will have Ruby frames associated with them	WITHOUT_CLASSIFICATION	0.9997538123873612	WITHOUT_CLASSIFICATION	2.4618761263879807E-4	DEFECT
// look for mangling markers for bound, framed methods in class name	WITHOUT_CLASSIFICATION	0.9999375768772065	WITHOUT_CLASSIFICATION	6.242312279347894E-5	DEFECT
// unframed invokers have no Ruby frames, so pull from class name // but use current frame as file and line	WITHOUT_CLASSIFICATION	0.999996392496719	WITHOUT_CLASSIFICATION	3.6075032809339544E-6	DEFECT
// try to mine out a Ruby frame using our list of interpreter entry-point markers	WITHOUT_CLASSIFICATION	0.9998715651848115	WITHOUT_CLASSIFICATION	1.284348151885262E-4	DEFECT
// Frame matches one of our markers for "interpreted" calls	WITHOUT_CLASSIFICATION	0.999922516816919	WITHOUT_CLASSIFICATION	7.748318308096695E-5	DEFECT
// Frame is extraneous runtime information, skip it unless debug	WITHOUT_CLASSIFICATION	0.9989320864286095	WITHOUT_CLASSIFICATION	0.0010679135713903662	DEFECT
/*     * Determine what sort of assigner should be used for the provided 'iter' (e.g. block).     * Assigner provides just the right logic for assigning values to local parameters of the     * block.     *     * This method also has a second optimization which is to set 'noargblock' in the case that     * the block is a block which accepts no arguments.  The primary reason for this second     * optimization is that in the case of a yield with a RubyArray we will bypass some logic     * processing the RubyArray into a proper form (only to then not do anythign with it).  A     * secondary benefit is that a simple boolean seems to optimize by hotspot much faster     * than the zero arg assigner.     */	WITHOUT_CLASSIFICATION	0.9968182748420589	WITHOUT_CLASSIFICATION	0.003181725157941182	DEFECT
// new scope for this invocation of the block, based on parent scope	WITHOUT_CLASSIFICATION	0.9999132787301063	WITHOUT_CLASSIFICATION	8.672126989379953E-5	DEFECT
// No argument blocks	WITHOUT_CLASSIFICATION	0.9999894857917032	WITHOUT_CLASSIFICATION	1.0514208296725784E-5	DEFECT
// just push the same empty scope, since we won't use one	WITHOUT_CLASSIFICATION	0.9999936836261879	WITHOUT_CLASSIFICATION	6.3163738120479705E-6	DEFECT
// Not sure if this is actually possible, but better safe than sorry	WITHOUT_CLASSIFICATION	0.9997719926634785	WITHOUT_CLASSIFICATION	2.2800733652144988E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999370989552593	WITHOUT_CLASSIFICATION	6.290104474062871E-5	DEFECT
// This should only be called by 1.8 (1.9 subclasses this to handle unusedBlock).	WITHOUT_CLASSIFICATION	0.9906682398160415	WITHOUT_CLASSIFICATION	0.00933176018395855	DEFECT
// Highest reserved id	WITHOUT_CLASSIFICATION	0.9999777882245036	WITHOUT_CLASSIFICATION	2.2211775496400658E-5	DEFECT
// binary typed calls	WITHOUT_CLASSIFICATION	0.9999823468857986	WITHOUT_CLASSIFICATION	1.7653114201346786E-5	DEFECT
// id must always be even	WITHOUT_CLASSIFICATION	0.9997639075011436	WITHOUT_CLASSIFICATION	2.3609249885631067E-4	DEFECT
// with block pass	WITHOUT_CLASSIFICATION	0.9999885929353057	WITHOUT_CLASSIFICATION	1.1407064694349762E-5	DEFECT
// no block	WITHOUT_CLASSIFICATION	0.9999968600541286	WITHOUT_CLASSIFICATION	3.1399458713214967E-6	DEFECT
// with block literal (iter)	WITHOUT_CLASSIFICATION	0.999993410365235	WITHOUT_CLASSIFICATION	6.589634765043185E-6	DEFECT
//            assert false : "can this happen?";	WITHOUT_CLASSIFICATION	0.9997911468267048	WITHOUT_CLASSIFICATION	2.0885317329510803E-4	DEFECT
// if we have multiple asgn with just *args, need a special type for that	WITHOUT_CLASSIFICATION	0.9999946571072894	WITHOUT_CLASSIFICATION	5.342892710642038E-6	DEFECT
// && args.getMaxArgumentsCount() != 1) {	WITHOUT_CLASSIFICATION	0.9998802697612501	WITHOUT_CLASSIFICATION	1.1973023874991705E-4	DEFECT
//            return warnMultiReturnNil(ruby);	WITHOUT_CLASSIFICATION	0.9998902140760274	WITHOUT_CLASSIFICATION	1.0978592397268938E-4	DEFECT
// ensure zero is devoted to no method name	WITHOUT_CLASSIFICATION	0.9997802864443528	WITHOUT_CLASSIFICATION	2.1971355564724405E-4	DEFECT
// predefine a few other methods we invoke directly elsewhere	WITHOUT_CLASSIFICATION	0.99994456416249	WITHOUT_CLASSIFICATION	5.54358375100666E-5	DEFECT
// fast and safe respond_to? call site logic	WITHOUT_CLASSIFICATION	0.9998898293365588	WITHOUT_CLASSIFICATION	1.1017066344112896E-4	DEFECT
// Static scoping information for this scope	WITHOUT_CLASSIFICATION	0.9994153607104668	WITHOUT_CLASSIFICATION	5.846392895332851E-4	DEFECT
// Captured dynamic scopes	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// Backref for $~, $1, etc	WITHOUT_CLASSIFICATION	0.999963586663397	WITHOUT_CLASSIFICATION	3.641333660298388E-5	DEFECT
// Lastline	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// No binding scope so we should create one	WITHOUT_CLASSIFICATION	0.9999427618801151	WITHOUT_CLASSIFICATION	5.723811988485499E-5	DEFECT
// bindings scopes must always be ManyVars scopes since evals can grow them	WITHOUT_CLASSIFICATION	0.9996515547201111	WITHOUT_CLASSIFICATION	3.4844527988886167E-4	DEFECT
// Helper function to give a good view of current dynamic scope with captured scopes	WITHOUT_CLASSIFICATION	0.9994303413663242	WITHOUT_CLASSIFICATION	5.696586336757889E-4	DEFECT
// try count specific args to determine required	WITHOUT_CLASSIFICATION	0.9995919297943885	WITHOUT_CLASSIFICATION	4.08070205611565E-4	DEFECT
// Some helper functions:	WITHOUT_CLASSIFICATION	0.9999804853279565	WITHOUT_CLASSIFICATION	1.951467204342537E-5	DEFECT
// silently ignore	WITHOUT_CLASSIFICATION	0.9999863051896719	WITHOUT_CLASSIFICATION	1.3694810328063596E-5	DEFECT
// used by compiler	WITHOUT_CLASSIFICATION	0.9999919466727446	WITHOUT_CLASSIFICATION	8.053327255364674E-6	DEFECT
// initialize the static settings to determine which factory to use	WITHOUT_CLASSIFICATION	0.999899000878012	WITHOUT_CLASSIFICATION	1.0099912198808874E-4	DEFECT
// // INSTANCE VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.998773560179051	WITHOUT_CLASSIFICATION	0.0012264398209489854	DEFECT
//  Single node on list	WITHOUT_CLASSIFICATION	0.9999571636289473	WITHOUT_CLASSIFICATION	4.283637105273263E-5	DEFECT
// Reuse trailing consecutive sequence at same slot	WITHOUT_CLASSIFICATION	0.9999135658831382	WITHOUT_CLASSIFICATION	8.643411686186156E-5	DEFECT
// Clone all remaining nodes	WITHOUT_CLASSIFICATION	0.9998969173326118	WITHOUT_CLASSIFICATION	1.0308266738823874E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// Note: In Ruby 1.9 all of this logic can go away since they will require explicit // bindings for evals.	WITHOUT_CLASSIFICATION	0.9992360368152334	WITHOUT_CLASSIFICATION	7.639631847665968E-4	DEFECT
// We only define one special dynamic scope per 'logical' binding.  So all bindings for // the same scope should share the same dynamic scope.  This allows multiple evals with // different different bindings in the same scope to see the same stuff.	WITHOUT_CLASSIFICATION	0.9957882084638681	WITHOUT_CLASSIFICATION	0.004211791536132034	DEFECT
// If the next scope out has the same binding scope as this scope it means // we are evaling within an eval and in that case we should be sharing the same // binding scope.	WITHOUT_CLASSIFICATION	0.9999347640173504	WITHOUT_CLASSIFICATION	6.523598264970884E-5	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9997785910312668	WITHOUT_CLASSIFICATION	2.2140896873321138E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9997785910312668	WITHOUT_CLASSIFICATION	2.2140896873321138E-4	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999545771825386	WITHOUT_CLASSIFICATION	4.542281746151546E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999545771825386	WITHOUT_CLASSIFICATION	4.542281746151546E-5	DEFECT
// nil pad since we provided less values than block parms	WITHOUT_CLASSIFICATION	0.9999545771825386	WITHOUT_CLASSIFICATION	4.542281746151546E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999984342575112	WITHOUT_CLASSIFICATION	1.5657424888008392E-5	DEFECT
// no extra args for rest	WITHOUT_CLASSIFICATION	0.999984342575112	WITHOUT_CLASSIFICATION	1.5657424888008392E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999645410845159	WITHOUT_CLASSIFICATION	3.5458915484120056E-5	DEFECT
// extra args for rest	WITHOUT_CLASSIFICATION	0.9999645410845159	WITHOUT_CLASSIFICATION	3.5458915484120056E-5	DEFECT
/*     * This is the proper behavior for all non-expanded assigners which have a pre > 0.  The rest     * override this.     */	WITHOUT_CLASSIFICATION	0.9939061536863333	WITHOUT_CLASSIFICATION	0.006093846313666781	DEFECT
/*     * This is the proper behavior for all non-expanded assigners.     */	WITHOUT_CLASSIFICATION	0.9951830844532497	WITHOUT_CLASSIFICATION	0.004816915546750404	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999854820951258	WITHOUT_CLASSIFICATION	1.4517904874290704E-5	DEFECT
// prefill ?	WITHOUT_CLASSIFICATION	0.9999854820951258	WITHOUT_CLASSIFICATION	1.4517904874290704E-5	DEFECT
// MUST be called from synchronized/locked block! // should only be called by variableTableStore/variableTableFastStore	WITHOUT_CLASSIFICATION	0.9985521130883018	WITHOUT_CLASSIFICATION	0.0014478869116982007	DEFECT
// retrieve method // module // name	WITHOUT_CLASSIFICATION	0.9999093758654743	WITHOUT_CLASSIFICATION	9.062413452558314E-5	DEFECT
// call is ok, punch it!	WITHOUT_CLASSIFICATION	0.9999775831538944	WITHOUT_CLASSIFICATION	2.241684610554604E-5	DEFECT
// if undefined, branch to method_missing	WITHOUT_CLASSIFICATION	0.9997266210281004	WITHOUT_CLASSIFICATION	2.733789718995719E-4	DEFECT
// if we're not attempting to invoke method_missing and method is not visible, branch to method_missing	WITHOUT_CLASSIFICATION	0.9936929845601767	WITHOUT_CLASSIFICATION	0.006307015439823255	DEFECT
// method object already present, push various args // tc // self // klazz // name	WITHOUT_CLASSIFICATION	0.9998287445179308	WITHOUT_CLASSIFICATION	1.7125548206907667E-4	DEFECT
// if it's method_missing, just invoke it	WITHOUT_CLASSIFICATION	0.999923633369902	WITHOUT_CLASSIFICATION	7.636663009794364E-5	DEFECT
// invoke callMethodMissing	WITHOUT_CLASSIFICATION	0.9999777239651638	WITHOUT_CLASSIFICATION	2.227603483629345E-5	DEFECT
// caller	WITHOUT_CLASSIFICATION	0.999951031526522	WITHOUT_CLASSIFICATION	4.896847347795983E-5	DEFECT
// calltype // block	WITHOUT_CLASSIFICATION	0.9999928889431895	WITHOUT_CLASSIFICATION	7.111056810436337E-6	DEFECT
// if no exception raised, jump to end to leave result on stack for return	WITHOUT_CLASSIFICATION	0.9997367091691295	WITHOUT_CLASSIFICATION	2.632908308705619E-4	DEFECT
// load arity for check	WITHOUT_CLASSIFICATION	0.9999779031366717	WITHOUT_CLASSIFICATION	2.209686332834139E-5	DEFECT
// throw	WITHOUT_CLASSIFICATION	0.9996725669553235	WITHOUT_CLASSIFICATION	3.274330446765051E-4	DEFECT
// load arity for error	WITHOUT_CLASSIFICATION	0.9999068796366797	WITHOUT_CLASSIFICATION	9.312036332021087E-5	DEFECT
// arity ok, continue	WITHOUT_CLASSIFICATION	0.9999781620960836	WITHOUT_CLASSIFICATION	2.1837903916404645E-5	DEFECT
//InvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// ENEBO: Perhaps slow but simple for now	WITHOUT_CLASSIFICATION	0.9999816149808347	WITHOUT_CLASSIFICATION	1.8385019165240576E-5	DEFECT
// FastInvocationCallback	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// InvocationCallback	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
//DumpingInvocationCallbackFactory	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// for fast lookup: encoding entry => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9998232206821087	WITHOUT_CLASSIFICATION	1.7677931789120474E-4	DEFECT
// for fast lookup: org.joni.encoding.Encoding => org.jruby.RubyEncoding	WITHOUT_CLASSIFICATION	0.9997132443771342	WITHOUT_CLASSIFICATION	2.867556228659096E-4	DEFECT
// load the encoding	WITHOUT_CLASSIFICATION	0.9999912748820557	WITHOUT_CLASSIFICATION	8.725117944187107E-6	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999881654370514	WITHOUT_CLASSIFICATION	1.183456294859618E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999881654370514	WITHOUT_CLASSIFICATION	1.183456294859618E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String	WITHOUT_CLASSIFICATION	0.999881654370514	WITHOUT_CLASSIFICATION	1.183456294859618E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyModule, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998230924360023	WITHOUT_CLASSIFICATION	1.769075639977561E-4	DEFECT
// IRubyObject, DynamicMethod, ThreadContext, IRubyObject, RubyClass, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998230924360023	WITHOUT_CLASSIFICATION	1.769075639977561E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998230924360023	WITHOUT_CLASSIFICATION	1.769075639977561E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998230924360023	WITHOUT_CLASSIFICATION	1.769075639977561E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, IRubyObject	WITHOUT_CLASSIFICATION	0.9998230924360023	WITHOUT_CLASSIFICATION	1.769075639977561E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// If we're running in 1.9 compat mode, add Ruby 1.9 libs to path before 1.8 libs	WITHOUT_CLASSIFICATION	0.9992911172975282	WITHOUT_CLASSIFICATION	7.088827024717526E-4	DEFECT
// BreakJump, ThreadContext	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// ThreadContext	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// BreakJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// Make Java class files in the jar reachable from Ruby	WITHOUT_CLASSIFICATION	0.9999377726286047	WITHOUT_CLASSIFICATION	6.222737139531339E-5	DEFECT
// RetryJump, CacheEntry, ThreadContext, IRubyObject, IRubyObject	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// add all startup load paths to the list first	WITHOUT_CLASSIFICATION	0.9998009105908904	WITHOUT_CLASSIFICATION	1.9908940910967344E-4	DEFECT
// if it's a compiled JRuby script, instantiate and run it	WITHOUT_CLASSIFICATION	0.9998009155938452	WITHOUT_CLASSIFICATION	1.9908440615480473E-4	DEFECT
// wrap in try/catch for security exceptions in an applet	WITHOUT_CLASSIFICATION	0.9997456563661188	WITHOUT_CLASSIFICATION	2.5434363388115555E-4	DEFECT
// add $RUBYLIB paths	WITHOUT_CLASSIFICATION	0.9999664674499739	WITHOUT_CLASSIFICATION	3.353255002615037E-5	DEFECT
// Empty paths do not need to be added	WITHOUT_CLASSIFICATION	0.9983084167857532	WITHOUT_CLASSIFICATION	0.0016915832142467583	DEFECT
// "." dir is used for relative path loads from a given file, as in require '../foo/bar'	WITHOUT_CLASSIFICATION	0.9997389457158411	WITHOUT_CLASSIFICATION	2.610542841589483E-4	DEFECT
// Add 1.8 libs	WITHOUT_CLASSIFICATION	0.9999939528722193	WITHOUT_CLASSIFICATION	6.047127780738396E-6	DEFECT
// Create package name, by splitting on / and joining all but the last elements with a ".", and downcasing them.	WITHOUT_CLASSIFICATION	0.9999948686058907	WITHOUT_CLASSIFICATION	5.131394109289209E-6	DEFECT
// Library has already been loaded in some form, bail out	WITHOUT_CLASSIFICATION	0.9999794623424955	WITHOUT_CLASSIFICATION	2.053765750456371E-5	DEFECT
// We don't want a package name beginning with dots, so we remove them	WITHOUT_CLASSIFICATION	0.9999106591606826	WITHOUT_CLASSIFICATION	8.93408393174969E-5	DEFECT
// If there is a jar-file with the required name, we add this to the class path.	WITHOUT_CLASSIFICATION	0.9999216725607671	WITHOUT_CLASSIFICATION	7.832743923278408E-5	DEFECT
// quietly try to load the class	WITHOUT_CLASSIFICATION	0.9999112387136417	WITHOUT_CLASSIFICATION	8.876128635823076E-5	DEFECT
// If there was a good library before, we go back to that	WITHOUT_CLASSIFICATION	0.9998377095702945	WITHOUT_CLASSIFICATION	1.62290429705619E-4	DEFECT
// no library or extension found, try to load directly as a class	WITHOUT_CLASSIFICATION	0.9999618821287402	WITHOUT_CLASSIFICATION	3.8117871259854486E-5	DEFECT
// if an extension is specified, try more targetted searches	WITHOUT_CLASSIFICATION	0.9999358079015038	WITHOUT_CLASSIFICATION	6.419209849618815E-5	DEFECT
// signed short, big-endian	WITHOUT_CLASSIFICATION	0.9999777699769002	WITHOUT_CLASSIFICATION	2.2230023099784678E-5	DEFECT
// source extensions	WITHOUT_CLASSIFICATION	0.9999917820549316	WITHOUT_CLASSIFICATION	8.217945068386102E-6	DEFECT
// We don't support .so, but some stdlib require .so directly // replace it with .jar to look for an extension type we do support	WITHOUT_CLASSIFICATION	0.9999500320084684	WITHOUT_CLASSIFICATION	4.996799153145272E-5	DEFECT
// This code exploits the fact that all .jar files will be found for the JarredScript feature. // This is where the basic extension mechanism gets fixed	WITHOUT_CLASSIFICATION	0.9881815940766402	WITHOUT_CLASSIFICATION	0.01181840592335983	DEFECT
// Make the class name look nice, by splitting on _ and capitalize each segment, then joining // the, together without anything separating them, and last put on "Service" at the end.	WITHOUT_CLASSIFICATION	0.9999857037693598	WITHOUT_CLASSIFICATION	1.4296230640241646E-5	DEFECT
// It's _really_ expensive to check that the class actually exists in the Jar, so // we don't do that now.	WITHOUT_CLASSIFICATION	0.9999939319583809	WITHOUT_CLASSIFICATION	6.068041619013066E-6	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998636462134145	WITHOUT_CLASSIFICATION	1.3635378658559608E-4	DEFECT
// extension extensions	WITHOUT_CLASSIFICATION	0.9999817994014283	WITHOUT_CLASSIFICATION	1.820059857179087E-5	DEFECT
// unknown extension, fall back to search with extensions	WITHOUT_CLASSIFICATION	0.9996672234994363	WITHOUT_CLASSIFICATION	3.3277650056372644E-4	DEFECT
// try all extensions	WITHOUT_CLASSIFICATION	0.999986760256198	WITHOUT_CLASSIFICATION	1.3239743801843555E-5	DEFECT
// if a source extension is specified, try all source extensions	WITHOUT_CLASSIFICATION	0.9999260372971748	WITHOUT_CLASSIFICATION	7.396270282518219E-5	DEFECT
// unknown extension, fall back to exact search	WITHOUT_CLASSIFICATION	0.9993268540200813	WITHOUT_CLASSIFICATION	6.731459799188507E-4	DEFECT
// try only literal search	WITHOUT_CLASSIFICATION	0.9999715794799067	WITHOUT_CLASSIFICATION	2.8420520093282422E-5	DEFECT
// attempt to load the found library	WITHOUT_CLASSIFICATION	0.9997918730616614	WITHOUT_CLASSIFICATION	2.08126938338677E-4	DEFECT
// otherwise load the library we've found	WITHOUT_CLASSIFICATION	0.9999382399169046	WITHOUT_CLASSIFICATION	6.176008309546498E-5	DEFECT
// allow MainExitException to propagate out for exec and friends	WITHOUT_CLASSIFICATION	0.9995159124712961	WITHOUT_CLASSIFICATION	4.8408752870380113E-4	DEFECT
// Remove any relative prefix, e.g. "./foo/bar" becomes "foo/bar".	WITHOUT_CLASSIFICATION	0.9997142137027291	WITHOUT_CLASSIFICATION	2.857862972709768E-4	DEFECT
// check current directory; if file exists, retrieve URL and return resource	WITHOUT_CLASSIFICATION	0.9999966127419523	WITHOUT_CLASSIFICATION	3.387258047730188E-6	DEFECT
// if a jar or file URL, return load service resource directly without further searching	WITHOUT_CLASSIFICATION	0.9999640207070721	WITHOUT_CLASSIFICATION	3.597929292792328E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999577831514544	WITHOUT_CLASSIFICATION	4.221684854569355E-5	DEFECT
// if it's a ./ baseName, use CWD logic	WITHOUT_CLASSIFICATION	0.9998799233783684	WITHOUT_CLASSIFICATION	1.2007662163161311E-4	DEFECT
// if given path is absolute, just try it as-is (with extensions) and no load path	WITHOUT_CLASSIFICATION	0.9999537193517397	WITHOUT_CLASSIFICATION	4.6280648260387974E-5	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.996472017535828	WITHOUT_CLASSIFICATION	0.0035279824641719208	DEFECT
// we check length == 0 for 'load', which does not use load path	WITHOUT_CLASSIFICATION	0.996472017535828	WITHOUT_CLASSIFICATION	0.0035279824641719208	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998961227839025	WITHOUT_CLASSIFICATION	1.0387721609743185E-4	DEFECT
// it's an absolute path, use it as-is	WITHOUT_CLASSIFICATION	0.9998961227839025	WITHOUT_CLASSIFICATION	1.0387721609743185E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9992719627646582	WITHOUT_CLASSIFICATION	7.280372353417289E-4	DEFECT
// prepend ./ if . is not already there, since we're loading based on CWD	WITHOUT_CLASSIFICATION	0.9992719627646582	WITHOUT_CLASSIFICATION	7.280372353417289E-4	DEFECT
//                    actualPath = new File(RubyFile.expandUserPath(runtime.getCurrentContext(), reportedPath));	WITHOUT_CLASSIFICATION	0.9998498392750849	WITHOUT_CLASSIFICATION	1.5016072491517553E-4	DEFECT
// handle security-sensitive case	WITHOUT_CLASSIFICATION	0.9999589315061467	WITHOUT_CLASSIFICATION	4.106849385331296E-5	DEFECT
// if entry is an empty string, skip it	WITHOUT_CLASSIFICATION	0.9999328605874237	WITHOUT_CLASSIFICATION	6.713941257630191E-5	DEFECT
// if entry starts with a slash, skip it since classloader resources never start with a /	WITHOUT_CLASSIFICATION	0.9998269941781832	WITHOUT_CLASSIFICATION	1.7300582181670795E-4	DEFECT
// otherwise, try to load from classpath (Note: Jar resources always uses '/')	WITHOUT_CLASSIFICATION	0.9986256480123203	WITHOUT_CLASSIFICATION	0.0013743519876797288	DEFECT
// Make sure this is not a directory or unavailable in some way	WITHOUT_CLASSIFICATION	0.9987710063050262	WITHOUT_CLASSIFICATION	0.0012289936949737657	DEFECT
// signed short, native	WITHOUT_CLASSIFICATION	0.9999784900248919	WITHOUT_CLASSIFICATION	2.1509975108059043E-5	DEFECT
// If we fail to find as a normal Ruby script, we try to find as an extension, // checking for a builtin first.	WITHOUT_CLASSIFICATION	0.999899198737472	WITHOUT_CLASSIFICATION	1.0080126252797944E-4	DEFECT
// write `I' instance var signet if class is NOT a direct subclass of Object	WITHOUT_CLASSIFICATION	0.9997609569009961	WITHOUT_CLASSIFICATION	2.3904309900401268E-4	DEFECT
// if name starts with a / we're done (classloader resources won't load with an initial /)	WITHOUT_CLASSIFICATION	0.9999686533000138	WITHOUT_CLASSIFICATION	3.134669998619691E-5	DEFECT
// Look in classpath next (we do not use File as a test since UNC names will match) // Note: Jar resources must NEVER begin with an '/'. (previous code said "always begin with a /")	WITHOUT_CLASSIFICATION	0.9988051863350097	WITHOUT_CLASSIFICATION	0.0011948136649903554	DEFECT
/* Directories and unavailable resources are not able to open a stream. */	WITHOUT_CLASSIFICATION	0.9990163560031982	WITHOUT_CLASSIFICATION	9.83643996801894E-4	DEFECT
// Try to load from classpath without prefix. "A/b.rb" will not load as  // "./A/b.rb" in a jar file.	WITHOUT_CLASSIFICATION	0.8987333257191242	WITHOUT_CLASSIFICATION	0.10126667428087585	DEFECT
// object has instance vars and isn't a class, get a snapshot to be marshalled // and output the ivar header here	WITHOUT_CLASSIFICATION	0.9997940286603685	WITHOUT_CLASSIFICATION	2.0597133963154275E-4	DEFECT
// flush afer whole dump is complete	WITHOUT_CLASSIFICATION	0.9990708811092205	WITHOUT_CLASSIFICATION	9.291188907795698E-4	DEFECT
//            write('S');	WITHOUT_CLASSIFICATION	0.9999586895279656	WITHOUT_CLASSIFICATION	4.131047203431221E-5	DEFECT
// switch on the object's *native type*. This allows use-defined // classes that have extended core native types to piggyback on their // marshalling logic.	WITHOUT_CLASSIFICATION	0.9995510244287357	WITHOUT_CLASSIFICATION	4.4897557126429374E-4	DEFECT
// object is a custom class that extended one of the native types other than Object	WITHOUT_CLASSIFICATION	0.9999281197280658	WITHOUT_CLASSIFICATION	7.188027193414463E-5	DEFECT
// We do not want to capture cached methods	WITHOUT_CLASSIFICATION	0.9928768250924822	WITHOUT_CLASSIFICATION	0.007123174907517867	DEFECT
// w_symbol	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// w_unique	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// call the proc, but not for symbols	WITHOUT_CLASSIFICATION	0.9997176554938834	WITHOUT_CLASSIFICATION	2.823445061166111E-4	DEFECT
// Major // Minor	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// any ivars, since we don't have __attached__ ivar now	WITHOUT_CLASSIFICATION	0.9999399837867194	WITHOUT_CLASSIFICATION	6.0016213280566774E-5	DEFECT
// "hashdef" object, a hash with a default	WITHOUT_CLASSIFICATION	0.9999764582726016	WITHOUT_CLASSIFICATION	2.354172739832799E-5	DEFECT
// All "C" marshalled objects descend from core classes, which are all RubyObject	WITHOUT_CLASSIFICATION	0.999950644143508	WITHOUT_CLASSIFICATION	4.93558564921415E-5	DEFECT
// sic	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9997829324822253	WITHOUT_CLASSIFICATION	2.1706751777459543E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9997829324822253	WITHOUT_CLASSIFICATION	2.1706751777459543E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999370989552593	WITHOUT_CLASSIFICATION	6.290104474062871E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999370989552593	WITHOUT_CLASSIFICATION	6.290104474062871E-5	DEFECT
/*     * If we are setting post arguments we can assume there are no pre or others     */	WITHOUT_CLASSIFICATION	0.9999946932686048	WITHOUT_CLASSIFICATION	5.306731395217107E-6	DEFECT
// XXX: 0xffff0000 on BE?	WITHOUT_CLASSIFICATION	0.999978497017811	WITHOUT_CLASSIFICATION	2.1502982188858763E-5	DEFECT
// unsigned short, native	WITHOUT_CLASSIFICATION	0.9999784900248919	WITHOUT_CLASSIFICATION	2.1509975108059043E-5	DEFECT
// int, native // long, native	WITHOUT_CLASSIFICATION	0.999978749193579	WITHOUT_CLASSIFICATION	2.1250806421009408E-5	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// if we're not the "argument scope" for zsuper, try our parent	WITHOUT_CLASSIFICATION	0.9996126056203526	WITHOUT_CLASSIFICATION	3.873943796474024E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9997829324822253	WITHOUT_CLASSIFICATION	2.1706751777459543E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9997829324822253	WITHOUT_CLASSIFICATION	2.1706751777459543E-4	DEFECT
// copy and splat arguments out of the scope to use for zsuper call	WITHOUT_CLASSIFICATION	0.9997829324822253	WITHOUT_CLASSIFICATION	2.1706751777459543E-4	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999370989552593	WITHOUT_CLASSIFICATION	6.290104474062871E-5	DEFECT
// rest arg must be splatted	WITHOUT_CLASSIFICATION	0.9999370989552593	WITHOUT_CLASSIFICATION	6.290104474062871E-5	DEFECT
// Look for slash, starting from 'start' position, until 'end'.	WITHOUT_CLASSIFICATION	0.9995867693376764	WITHOUT_CLASSIFICATION	4.132306623236343E-4	DEFECT
// Our values holder (name of variables are kept in staticScope)	WITHOUT_CLASSIFICATION	0.9999216564055694	WITHOUT_CLASSIFICATION	7.834359443051496E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// SunSignalFacade	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// All braces pushed..	WITHOUT_CLASSIFICATION	0.999989189146521	WITHOUT_CLASSIFICATION	1.0810853478913272E-5	DEFECT
/* failed : try next recursion */	WITHOUT_CLASSIFICATION	0.9994276436484775	WITHOUT_CLASSIFICATION	5.723563515225386E-4	DEFECT
// leftToken made us start as nest 1	WITHOUT_CLASSIFICATION	0.9996532865354459	WITHOUT_CLASSIFICATION	3.46713464554076E-4	DEFECT
// are we at '**/'	WITHOUT_CLASSIFICATION	0.9999957536756857	WITHOUT_CLASSIFICATION	4.246324314367075E-6	DEFECT
// No or mismatched braces..Move along..nothing to see here	WITHOUT_CLASSIFICATION	0.99978731667506	WITHOUT_CLASSIFICATION	2.1268332494004674E-4	DEFECT
// not enough bytes	WITHOUT_CLASSIFICATION	0.9997784934404922	WITHOUT_CLASSIFICATION	2.2150655950780744E-4	DEFECT
// Get index of last read byte	WITHOUT_CLASSIFICATION	0.9999593397748325	WITHOUT_CLASSIFICATION	4.0660225167393486E-5	DEFECT
// skip inner braces	WITHOUT_CLASSIFICATION	0.9999856304805635	WITHOUT_CLASSIFICATION	1.4369519436445075E-5	DEFECT
/*     * Process {}'s (example: Dir.glob("{jruby,jython}/README*")      */	WITHOUT_CLASSIFICATION	0.9999242376665681	WITHOUT_CLASSIFICATION	7.57623334318855E-5	DEFECT
/* complete, according to Posix.2 */	WITHOUT_CLASSIFICATION	0.999591433605401	WITHOUT_CLASSIFICATION	4.0856639459894935E-4	DEFECT
/* Only accept an open brace if there is a close */	WITHOUT_CLASSIFICATION	0.9999849239720976	WITHOUT_CLASSIFICATION	1.5076027902277198E-5	DEFECT
/* brace to match it.  Bracket expressions must be */	WITHOUT_CLASSIFICATION	0.9973128655124023	WITHOUT_CLASSIFICATION	0.0026871344875978023	DEFECT
// index of left-most brace // index of right-most brace	WITHOUT_CLASSIFICATION	0.999380835990916	WITHOUT_CLASSIFICATION	6.191640090840552E-4	DEFECT
// Length check is a hack.  We should not be reeiving "" as a filename ever. 	WITHOUT_CLASSIFICATION	0.948214348304162	WITHOUT_CLASSIFICATION	0.051785651695838174	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999845663996028	WITHOUT_CLASSIFICATION	1.5433600397237338E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999845663996028	WITHOUT_CLASSIFICATION	1.5433600397237338E-5	DEFECT
// NOT REACHED HERE	WITHOUT_CLASSIFICATION	0.9999845663996028	WITHOUT_CLASSIFICATION	1.5433600397237338E-5	DEFECT
// Pickaxe says @ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9969213349770931	WITHOUT_CLASSIFICATION	0.0030786650229069484	DEFECT
// Pickaxe says @@ must be followed by a name character, but MRI // does not require this.	WITHOUT_CLASSIFICATION	0.9969213349770931	WITHOUT_CLASSIFICATION	0.0030786650229069484	DEFECT
// SimpleSampler	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/*     * convert into longs, returning unsigned 64-bit values as signed longs     * ( num2long raises a RangeError on values > Long.MAX_VALUE )     */	WITHOUT_CLASSIFICATION	0.9999882049997072	WITHOUT_CLASSIFICATION	1.17950002928979E-5	DEFECT
// b64_xtable for decoding Base 64	WITHOUT_CLASSIFICATION	0.9997103542283418	WITHOUT_CLASSIFICATION	2.8964577165831493E-4	DEFECT
// single precision, little-endian	WITHOUT_CLASSIFICATION	0.9997703008119625	WITHOUT_CLASSIFICATION	2.2969918803746853E-4	DEFECT
// single precision, big-endian	WITHOUT_CLASSIFICATION	0.9997703008119625	WITHOUT_CLASSIFICATION	2.2969918803746853E-4	DEFECT
// single precision, native	WITHOUT_CLASSIFICATION	0.9999720806247657	WITHOUT_CLASSIFICATION	2.791937523422739E-5	DEFECT
// single precision, native // single precision, native	WITHOUT_CLASSIFICATION	0.9997777394562933	WITHOUT_CLASSIFICATION	2.2226054370663595E-4	DEFECT
// double precision, little-endian	WITHOUT_CLASSIFICATION	0.9998645097042315	WITHOUT_CLASSIFICATION	1.3549029576854515E-4	DEFECT
// double precision, big-endian	WITHOUT_CLASSIFICATION	0.9998645097042315	WITHOUT_CLASSIFICATION	1.3549029576854515E-4	DEFECT
// double precision, native	WITHOUT_CLASSIFICATION	0.9999835328486051	WITHOUT_CLASSIFICATION	1.646715139492435E-5	DEFECT
// signed short, little-endian	WITHOUT_CLASSIFICATION	0.9999777699769002	WITHOUT_CLASSIFICATION	2.2230023099784678E-5	DEFECT
// signed char	WITHOUT_CLASSIFICATION	0.9999850905549854	WITHOUT_CLASSIFICATION	1.490944501468928E-5	DEFECT
// unsigned char	WITHOUT_CLASSIFICATION	0.9999850905549854	WITHOUT_CLASSIFICATION	1.490944501468928E-5	DEFECT
// long, little-endian	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// long, big-endian	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// unsigned int, native	WITHOUT_CLASSIFICATION	0.999978749193579	WITHOUT_CLASSIFICATION	2.1250806421009408E-5	DEFECT
// int, native	WITHOUT_CLASSIFICATION	0.9999847531938069	WITHOUT_CLASSIFICATION	1.5246806193159114E-5	DEFECT
// 64-bit number, native (as fixnum)	WITHOUT_CLASSIFICATION	0.9998502055566014	WITHOUT_CLASSIFICATION	1.4979444339845692E-4	DEFECT
// How many occurrences of 'type' we want	WITHOUT_CLASSIFICATION	0.9979084378330113	WITHOUT_CLASSIFICATION	0.0020915621669887912	DEFECT
// See if we have a converter for the job...	WITHOUT_CLASSIFICATION	0.9998455693049719	WITHOUT_CLASSIFICATION	1.5443069502803797E-4	DEFECT
// Otherwise the unpack should be here...	WITHOUT_CLASSIFICATION	0.999648432621758	WITHOUT_CLASSIFICATION	3.515673782420749E-4	DEFECT
// Possible Checksum Byte	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// obtain a	WITHOUT_CLASSIFICATION	0.9999820721506686	WITHOUT_CLASSIFICATION	1.79278493312976E-5	DEFECT
// obtain b	WITHOUT_CLASSIFICATION	0.9999858896249414	WITHOUT_CLASSIFICATION	1.4110375058619128E-5	DEFECT
// obtain c	WITHOUT_CLASSIFICATION	0.9999872391648597	WITHOUT_CLASSIFICATION	1.2760835140388891E-5	DEFECT
// obtain d	WITHOUT_CLASSIFICATION	0.9999840742670925	WITHOUT_CLASSIFICATION	1.592573290756708E-5	DEFECT
/*encode.limit() - */	WITHOUT_CLASSIFICATION	0.9999396087233905	WITHOUT_CLASSIFICATION	6.0391276609568555E-5	DEFECT
/* 1 */	WITHOUT_CLASSIFICATION	0.999958529851807	WITHOUT_CLASSIFICATION	4.1470148193020824E-5	DEFECT
/* 2 */	WITHOUT_CLASSIFICATION	0.9992269359482877	WITHOUT_CLASSIFICATION	7.730640517122114E-4	DEFECT
/* 3 */	WITHOUT_CLASSIFICATION	0.9999681937175177	WITHOUT_CLASSIFICATION	3.180628248242513E-5	DEFECT
/* 4 */	WITHOUT_CLASSIFICATION	0.9999568316172046	WITHOUT_CLASSIFICATION	4.316838279547303E-5	DEFECT
/* 5 */	WITHOUT_CLASSIFICATION	0.9999627440331124	WITHOUT_CLASSIFICATION	3.7255966887663746E-5	DEFECT
/* 6 */	WITHOUT_CLASSIFICATION	0.9999649263957383	WITHOUT_CLASSIFICATION	3.507360426179081E-5	DEFECT
/* 7 */	WITHOUT_CLASSIFICATION	0.9999526560471166	WITHOUT_CLASSIFICATION	4.734395288337042E-5	DEFECT
// Skip all whitespace in pack format string	WITHOUT_CLASSIFICATION	0.9997915333115157	WITHOUT_CLASSIFICATION	2.084666884843335E-4	DEFECT
// Skip embedded comments in pack format string	WITHOUT_CLASSIFICATION	0.999849217379298	WITHOUT_CLASSIFICATION	1.5078262070200297E-4	DEFECT
// In case when the number of occurences is // explicitly specified, we have to read up // the remaining garbage after the '\0' to // satisfy the requested pattern.	WITHOUT_CLASSIFICATION	0.997836991851848	WITHOUT_CLASSIFICATION	0.0021630081481519552	DEFECT
//normal exit, this should be faster than a test at each iterations for string with more than //about 40 char	WITHOUT_CLASSIFICATION	0.9931462821982945	WITHOUT_CLASSIFICATION	0.006853717801705462	DEFECT
// We encountered '\0' when // were reading the buffer above, // increment the number of read bytes.	WITHOUT_CLASSIFICATION	0.9929585057983837	WITHOUT_CLASSIFICATION	0.007041494201616246	DEFECT
// MRI behavior: Contrary to what seems to be logical, // when '*' is given, MRI calculates the distance // to the end, in order to go backwards.	WITHOUT_CLASSIFICATION	0.9907474857972306	WITHOUT_CLASSIFICATION	0.009252514202769431	DEFECT
// Determine how many of type are needed (default: 1)	WITHOUT_CLASSIFICATION	0.9996407859840872	WITHOUT_CLASSIFICATION	3.592140159127393E-4	DEFECT
// 'Z' adds extra null pad (versus 'a')	WITHOUT_CLASSIFICATION	0.9998831221902184	WITHOUT_CLASSIFICATION	1.1687780978168957E-4	DEFECT
//if the low bit is set //set the high bit of the result	WITHOUT_CLASSIFICATION	0.999415006391309	WITHOUT_CLASSIFICATION	5.849936086910396E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary //shift the byte	WITHOUT_CLASSIFICATION	0.984599442013435	WITHOUT_CLASSIFICATION	0.015400557986565165	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9656900387210905	WITHOUT_CLASSIFICATION	0.03430996127890954	DEFECT
//if the length is not a multiple of 8 //we need to pad the last byte	WITHOUT_CLASSIFICATION	0.9656900387210905	WITHOUT_CLASSIFICATION	0.03430996127890954	DEFECT
//do some padding, I don't understand the padding strategy	WITHOUT_CLASSIFICATION	0.9997609894806306	WITHOUT_CLASSIFICATION	2.390105193694246E-4	DEFECT
// we filled up current byte; append it and create next one	WITHOUT_CLASSIFICATION	0.9995312429023898	WITHOUT_CLASSIFICATION	4.6875709761015947E-4	DEFECT
//if the index is not a multiple of 8, we are not on a byte boundary	WITHOUT_CLASSIFICATION	0.984599442013435	WITHOUT_CLASSIFICATION	0.015400557986565165	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995690325182666	WITHOUT_CLASSIFICATION	4.309674817334063E-4	DEFECT
// we don't deal with negatives.	WITHOUT_CLASSIFICATION	0.9997802340051795	WITHOUT_CLASSIFICATION	2.1976599482055218E-4	DEFECT
// populate commandline with NG-provided stuff	WITHOUT_CLASSIFICATION	0.999899433050235	WITHOUT_CLASSIFICATION	1.0056694976504328E-4	DEFECT
// are we recursing?	WITHOUT_CLASSIFICATION	0.9999950089030372	WITHOUT_CLASSIFICATION	4.9910969628273675E-6	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9998521196555434	WITHOUT_CLASSIFICATION	1.478803444566055E-4	DEFECT
// default PidGetter	WITHOUT_CLASSIFICATION	0.9999963185046686	WITHOUT_CLASSIFICATION	3.6814953312946852E-6	DEFECT
// ignore and try windows version	WITHOUT_CLASSIFICATION	0.999300506067009	WITHOUT_CLASSIFICATION	6.994939329910568E-4	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999768648810995	WITHOUT_CLASSIFICATION	2.3135118900478423E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999768648810995	WITHOUT_CLASSIFICATION	2.3135118900478423E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999768648810995	WITHOUT_CLASSIFICATION	2.3135118900478423E-5	DEFECT
// ignore and use hashcode	WITHOUT_CLASSIFICATION	0.9999768648810995	WITHOUT_CLASSIFICATION	2.3135118900478423E-5	DEFECT
// try both	WITHOUT_CLASSIFICATION	0.9999895709330447	WITHOUT_CLASSIFICATION	1.0429066955264412E-5	DEFECT
// just unix	WITHOUT_CLASSIFICATION	0.9999925139165321	WITHOUT_CLASSIFICATION	7.486083467861705E-6	DEFECT
// just windows	WITHOUT_CLASSIFICATION	0.9999929492921386	WITHOUT_CLASSIFICATION	7.050707861494675E-6	DEFECT
// neither	WITHOUT_CLASSIFICATION	0.9999507151261833	WITHOUT_CLASSIFICATION	4.9284873816679304E-5	DEFECT
// CON: popen is a case where I think we should just always shell out.	WITHOUT_CLASSIFICATION	0.9998366674426865	WITHOUT_CLASSIFICATION	1.633325573135387E-4	DEFECT
// single string command, pass to sh to expand wildcards	WITHOUT_CLASSIFICATION	0.996610599611082	WITHOUT_CLASSIFICATION	0.0033894003889179854	DEFECT
// direct invocation of the command	WITHOUT_CLASSIFICATION	0.9993614978147879	WITHOUT_CLASSIFICATION	6.38502185212129E-4	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999495511036319	WITHOUT_CLASSIFICATION	5.04488963680622E-5	DEFECT
// break out if we've dug as deep as we can	WITHOUT_CLASSIFICATION	0.9999495511036319	WITHOUT_CLASSIFICATION	5.04488963680622E-5	DEFECT
// close process output // See JRUBY-3405; hooking up to parent process stdin caused // problems for IRB etc using stdin.	WITHOUT_CLASSIFICATION	0.9988783198605742	WITHOUT_CLASSIFICATION	0.0011216801394258614	DEFECT
// ignore, we're on the way out	WITHOUT_CLASSIFICATION	0.999971086106274	WITHOUT_CLASSIFICATION	2.8913893725891222E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999963109459491	WITHOUT_CLASSIFICATION	3.689054050804383E-6	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9991607525469178	WITHOUT_CLASSIFICATION	8.392474530821348E-4	DEFECT
// popen callers wants to be able to read, provide subprocess in directly	WITHOUT_CLASSIFICATION	0.9991607525469178	WITHOUT_CLASSIFICATION	8.392474530821348E-4	DEFECT
// popen caller wants to be able to write, provide subprocess out directly	WITHOUT_CLASSIFICATION	0.9998114458599786	WITHOUT_CLASSIFICATION	1.8855414002143166E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9997044821561729	WITHOUT_CLASSIFICATION	2.955178438271126E-4	DEFECT
// no read requested, hook up read to parents output	WITHOUT_CLASSIFICATION	0.9997044821561729	WITHOUT_CLASSIFICATION	2.955178438271126E-4	DEFECT
// execute command with sh -c // this does shell expansion of wildcards	WITHOUT_CLASSIFICATION	0.9984940734640074	WITHOUT_CLASSIFICATION	0.001505926535992545	DEFECT
// We need to close the out, since some // processes would just wait for the stream // to be closed before they process its content, // and produce the output. E.g.: "cat".	WITHOUT_CLASSIFICATION	0.9999560960517669	WITHOUT_CLASSIFICATION	4.3903948233053326E-5	DEFECT
// we only close out if it's the slave stream, to avoid // closing a directly-mapped stream from parent process	WITHOUT_CLASSIFICATION	0.9998332454320455	WITHOUT_CLASSIFICATION	1.667545679543167E-4	DEFECT
// The assumption here is that the 'in' stream provides // proper available() support. If available() always // returns 0, we'll hang!	WITHOUT_CLASSIFICATION	0.9995038071567875	WITHOUT_CLASSIFICATION	4.961928432124001E-4	DEFECT
// Force t3 to quit, just in case if it's stuck. // Note: On some platforms, even interrupt might not // have an effect if the thread is IO blocked.	WITHOUT_CLASSIFICATION	0.9988574842789435	WITHOUT_CLASSIFICATION	0.0011425157210565192	DEFECT
// Check for special shell characters [<>|] at the beginning // and end of each command word and don't run in process if we find them.	WITHOUT_CLASSIFICATION	0.9998207375827609	WITHOUT_CLASSIFICATION	1.7926241723916278E-4	DEFECT
// Note: this method produces meaningful results // only for RubyIO objects. For everything else returns 0.	WITHOUT_CLASSIFICATION	0.9997407452363984	WITHOUT_CLASSIFICATION	2.592547636016253E-4	DEFECT
//sequential	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// reverse the entire area of the array selected if it's reversed.	WITHOUT_CLASSIFICATION	0.999943770845166	WITHOUT_CLASSIFICATION	5.622915483395102E-5	DEFECT
// do median of 7 if the array is over 200 elements.	WITHOUT_CLASSIFICATION	0.9999287152672621	WITHOUT_CLASSIFICATION	7.128473273781569E-5	DEFECT
// if it's less than 200 do median of 3	WITHOUT_CLASSIFICATION	0.9998821604320214	WITHOUT_CLASSIFICATION	1.1783956797867377E-4	DEFECT
// SignalFacade	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// this is the order in which MRI does these two tests	WITHOUT_CLASSIFICATION	0.9969535858747626	WITHOUT_CLASSIFICATION	0.0030464141252373273	DEFECT
// this is the order in which MRI does these tests	WITHOUT_CLASSIFICATION	0.9959790070773091	WITHOUT_CLASSIFICATION	0.00402099292269088	DEFECT
// basically just forcing a TypeError here to match MRI	WITHOUT_CLASSIFICATION	0.999873856948965	WITHOUT_CLASSIFICATION	1.2614305103497063E-4	DEFECT
// not saving DFS instance, as it will only be used once (at most) per call	WITHOUT_CLASSIFICATION	0.9947498009912903	WITHOUT_CLASSIFICATION	0.005250199008709667	DEFECT
// Args	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// static methods only	WITHOUT_CLASSIFICATION	0.999975258640577	WITHOUT_CLASSIFICATION	2.4741359423053473E-5	DEFECT
//System.err.println(" calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
// MRI 1.8.6 behavior: null byte after '%' // leads to "%" string. Null byte in // other places, like "%5\0", leads to error.	WITHOUT_CLASSIFICATION	0.9998805616168999	WITHOUT_CLASSIFICATION	1.194383831001334E-4	DEFECT
// last index (+1) accessed by next() // last index (+1) accessed by get()	WITHOUT_CLASSIFICATION	0.9995340587113792	WITHOUT_CLASSIFICATION	4.6594128862065503E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly.	WITHOUT_CLASSIFICATION	0.9996138130866046	WITHOUT_CLASSIFICATION	3.86186913395459E-4	DEFECT
// Special form of sprintf that returns a RubyString and handles // tainted strings correctly. Version for 1.9.	WITHOUT_CLASSIFICATION	0.9993655960155459	WITHOUT_CLASSIFICATION	6.344039844540625E-4	DEFECT
// MRI doesn't flag it as an error if width is given multiple // times as a number (but it does for *)	WITHOUT_CLASSIFICATION	0.9966476678090408	WITHOUT_CLASSIFICATION	0.0033523321909591655	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9987232469410684	WITHOUT_CLASSIFICATION	0.001276753058931668	DEFECT
// MRI 1.8.5-p12 doesn't support 1-char strings, but // YARV 0.4.1 does. I don't think it hurts to include // this; sprintf('%c','a') is nicer than sprintf('%c','a'[0])	WITHOUT_CLASSIFICATION	0.9943892383526756	WITHOUT_CLASSIFICATION	0.005610761647324469	DEFECT
// 'd' and 'i' are the same	WITHOUT_CLASSIFICATION	0.9999976578036645	WITHOUT_CLASSIFICATION	2.342196335458782E-6	DEFECT
// 'u' with space or plus flags is same as 'd'	WITHOUT_CLASSIFICATION	0.9999668155503681	WITHOUT_CLASSIFICATION	3.3184449631852624E-5	DEFECT
// We depart here from strict adherence to MRI code, as MRI // uses C-sprintf, in part, to format numeric output, while // we'll use Java's numeric formatting code (and our own).	WITHOUT_CLASSIFICATION	0.9991665920456024	WITHOUT_CLASSIFICATION	8.334079543975467E-4	DEFECT
// skip '-' in bytes, will add where appropriate	WITHOUT_CLASSIFICATION	0.9993984301067084	WITHOUT_CLASSIFICATION	6.015698932916259E-4	DEFECT
// ..	WITHOUT_CLASSIFICATION	0.9998030206775043	WITHOUT_CLASSIFICATION	1.9697932249560857E-4	DEFECT
// the 1 is for the stripped sign char	WITHOUT_CLASSIFICATION	0.9998128173988303	WITHOUT_CLASSIFICATION	1.8718260116959833E-4	DEFECT
// FIXME: what is correct 'recv' argument? // (this does produce the desired behavior)	WITHOUT_CLASSIFICATION	0.9708539372796199	WITHOUT_CLASSIFICATION	0.029146062720380093	DEFECT
// gotta have at least a zero...	WITHOUT_CLASSIFICATION	0.9997786444280792	WITHOUT_CLASSIFICATION	2.2135557192076854E-4	DEFECT
// OK, we now have the significand in digits[0...nDigits] // and the exponent in exponent.  We're ready to format.	WITHOUT_CLASSIFICATION	0.9995161523577604	WITHOUT_CLASSIFICATION	4.838476422396352E-4	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999745498709559	WITHOUT_CLASSIFICATION	2.5450129044176917E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999776510941307	WITHOUT_CLASSIFICATION	2.2348905869275374E-5	DEFECT
//System.err.println(" stringToLong/reading c=" + data[s]);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//System.err.println(" stringToLong/converted c=" + c);	WITHOUT_CLASSIFICATION	0.9978289306885209	WITHOUT_CLASSIFICATION	0.002171069311479097	DEFECT
// intDigits isn't used here, but if it were, it would be 1	WITHOUT_CLASSIFICATION	0.9999745498709559	WITHOUT_CLASSIFICATION	2.5450129044176917E-5	DEFECT
/* intDigits = 1; */	WITHOUT_CLASSIFICATION	0.9999776510941307	WITHOUT_CLASSIFICATION	2.2348905869275374E-5	DEFECT
// precision for G/g includes integer digits	WITHOUT_CLASSIFICATION	0.9997446048831862	WITHOUT_CLASSIFICATION	2.5539511681386316E-4	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999850405901376	WITHOUT_CLASSIFICATION	1.4959409862396428E-5	DEFECT
// deal with length/width	WITHOUT_CLASSIFICATION	0.9999850405901376	WITHOUT_CLASSIFICATION	1.4959409862396428E-5	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9995692233546254	WITHOUT_CLASSIFICATION	4.307766453746759E-4	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9970510961699097	WITHOUT_CLASSIFICATION	0.0029489038300903317	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999898227255164	WITHOUT_CLASSIFICATION	1.0177274483585071E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999991539313593	WITHOUT_CLASSIFICATION	8.460686407075768E-6	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9986188809153922	WITHOUT_CLASSIFICATION	0.001381119084607803	DEFECT
// MRI behavior: In this mode // trailing zeroes are removed: // 1.500E+05 -> 1.5E+05 	WITHOUT_CLASSIFICATION	0.9999414005821438	WITHOUT_CLASSIFICATION	5.8599417856263695E-5	DEFECT
// '.' is printed	WITHOUT_CLASSIFICATION	0.9999701365455479	WITHOUT_CLASSIFICATION	2.986345445204429E-5	DEFECT
// all precision numebers printed	WITHOUT_CLASSIFICATION	0.9997853469088851	WITHOUT_CLASSIFICATION	2.1465309111482156E-4	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999980456844366	WITHOUT_CLASSIFICATION	1.9543155632838415E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// decimal form, like (but not *just* like!) 'f'	WITHOUT_CLASSIFICATION	0.9985966667591978	WITHOUT_CLASSIFICATION	0.0014033332408022851	DEFECT
// digits array shifted, update all	WITHOUT_CLASSIFICATION	0.9998912445628592	WITHOUT_CLASSIFICATION	1.0875543714083592E-4	DEFECT
// will have a trailing '.' // g fills trailing zeroes if #	WITHOUT_CLASSIFICATION	0.9995060787655901	WITHOUT_CLASSIFICATION	4.939212344099256E-4	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999444403138229	WITHOUT_CLASSIFICATION	5.55596861772281E-5	DEFECT
// s/b true, since intLength > 0	WITHOUT_CLASSIFICATION	0.9999444403138229	WITHOUT_CLASSIFICATION	5.55596861772281E-5	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999926798407823	WITHOUT_CLASSIFICATION	7.320159217624062E-6	DEFECT
// always need at least a 0	WITHOUT_CLASSIFICATION	0.9999926798407823	WITHOUT_CLASSIFICATION	7.320159217624062E-6	DEFECT
// digits arr shifted, update all	WITHOUT_CLASSIFICATION	0.999926170067194	WITHOUT_CLASSIFICATION	7.382993280607542E-5	DEFECT
// (1|intlen).prec	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// (1|intlen)	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// will have a trailing '.'	WITHOUT_CLASSIFICATION	0.9998960046321137	WITHOUT_CLASSIFICATION	1.0399536788635225E-4	DEFECT
// fill up the rest with zeroes	WITHOUT_CLASSIFICATION	0.9999731448023378	WITHOUT_CLASSIFICATION	2.6855197662328243E-5	DEFECT
//System.err.println(" main/len=" + len);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
// 5 -> e+nnn / e-nnn	WITHOUT_CLASSIFICATION	0.9999898227255164	WITHOUT_CLASSIFICATION	1.0177274483585071E-5	DEFECT
// 4 -> e+nn / e-nn	WITHOUT_CLASSIFICATION	0.999991539313593	WITHOUT_CLASSIFICATION	8.460686407075768E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999980456844366	WITHOUT_CLASSIFICATION	1.9543155632838415E-6	DEFECT
// '.'	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// equivalent to MRI case '\0':	WITHOUT_CLASSIFICATION	0.9998199906126861	WITHOUT_CLASSIFICATION	1.800093873139921E-4	DEFECT
// '.' and all precision digits printed	WITHOUT_CLASSIFICATION	0.999750293454967	WITHOUT_CLASSIFICATION	2.4970654503307036E-4	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// dangling '%' char	WITHOUT_CLASSIFICATION	0.9999850905549854	WITHOUT_CLASSIFICATION	1.490944501468928E-5	DEFECT
// main while loop (offset < length)	WITHOUT_CLASSIFICATION	0.9998567788393795	WITHOUT_CLASSIFICATION	1.4322116062040504E-4	DEFECT
// debugging code, keeping for now	WITHOUT_CLASSIFICATION	0.999938389623674	WITHOUT_CLASSIFICATION	6.16103763260768E-5	DEFECT
// MRI rounds up on nnn5nnn, but not nnn5 -- // except for when they do	WITHOUT_CLASSIFICATION	0.9999109754931411	WITHOUT_CLASSIFICATION	8.902450685885672E-5	DEFECT
// "%.0f" % 0.99	WITHOUT_CLASSIFICATION	0.9999840588689306	WITHOUT_CLASSIFICATION	1.5941131069420086E-5	DEFECT
// limit the length of negatives if possible (also faster)	WITHOUT_CLASSIFICATION	0.9997893640492579	WITHOUT_CLASSIFICATION	2.106359507421011E-4	DEFECT
// negative values	WITHOUT_CLASSIFICATION	0.999986924086168	WITHOUT_CLASSIFICATION	1.3075913832124226E-5	DEFECT
// calculation for negatives when %u specified // for values >= Integer.MIN_VALUE * 2, MRI uses (the equivalent of) //   long neg_u = (((long)Integer.MAX_VALUE + 1) << 1) + val // for smaller values, BigInteger math is required to conform to MRI's // result.	WITHOUT_CLASSIFICATION	0.9952803295951005	WITHOUT_CLASSIFICATION	0.004719670404899461	DEFECT
// relatively cheap test for 32-bit values	WITHOUT_CLASSIFICATION	0.9998324952230002	WITHOUT_CLASSIFICATION	1.675047769997569E-4	DEFECT
// no such luck...	WITHOUT_CLASSIFICATION	0.9999938863922673	WITHOUT_CLASSIFICATION	6.11360773276778E-6	DEFECT
// ok, now it gets expensive...	WITHOUT_CLASSIFICATION	0.9998193412613501	WITHOUT_CLASSIFICATION	1.8065873864988533E-4	DEFECT
// go through negated powers of 32 until we find one small enough 	WITHOUT_CLASSIFICATION	0.9998614762934946	WITHOUT_CLASSIFICATION	1.3852370650528973E-4	DEFECT
// add to the corresponding positive power of 32 for the result. // meaningful? no. conformant? yes. I just write the code...	WITHOUT_CLASSIFICATION	0.9996739239437418	WITHOUT_CLASSIFICATION	3.260760562582324E-4	DEFECT
/* constant vector a */	WITHOUT_CLASSIFICATION	0.9999667758714678	WITHOUT_CLASSIFICATION	3.322412853221143E-5	DEFECT
/* most significant w-r bits */	WITHOUT_CLASSIFICATION	0.9997948976579618	WITHOUT_CLASSIFICATION	2.0510234203821018E-4	DEFECT
/* least significant r bits */	WITHOUT_CLASSIFICATION	0.9999857762006847	WITHOUT_CLASSIFICATION	1.4223799315382547E-5	DEFECT
// state[j] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// state[i] &= 0xffffffffL;	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
/* MSB is 1; assuring non-zero initial array */	WITHOUT_CLASSIFICATION	0.9995642413440187	WITHOUT_CLASSIFICATION	4.3575865598129734E-4	DEFECT
/* Tempering */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
// MRI behavior: Week values are monotonous. // So, weeks that effectively belong to previous year, // will get the value of 0, not 52 or 53, as in Java.	WITHOUT_CLASSIFICATION	0.9966722548098873	WITHOUT_CLASSIFICATION	0.0033277451901127424	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//System.err.println("byteListToInum(" + str + ")");	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
// \v	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
//System.err.println("getSign()");	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//System.err.println(" getSign/" + sign);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//System.err.println("figureOutBase()/base=" + base);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//System.err.println(" figureOutBase/base=" + base);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//System.err.println("calculateLength()/str=" + str);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//System.err.println(" stringToLong=" + val);	WITHOUT_CLASSIFICATION	0.9977521374181051	WITHOUT_CLASSIFICATION	0.002247862581894916	DEFECT
// no number	WITHOUT_CLASSIFICATION	0.9999780983479662	WITHOUT_CLASSIFICATION	2.190165203378282E-5	DEFECT
// trailing garbage	WITHOUT_CLASSIFICATION	0.9999877937970764	WITHOUT_CLASSIFICATION	1.2206202923579529E-5	DEFECT
//System.err.println("ADDING CHAR: " + (char)cx + " with number: " + cx);	WITHOUT_CLASSIFICATION	0.9985487437109064	WITHOUT_CLASSIFICATION	0.0014512562890935357	DEFECT
// it was not found at all!	WITHOUT_CLASSIFICATION	0.9998978791772647	WITHOUT_CLASSIFICATION	1.0212082273530023E-4	DEFECT
// can be overridden to be informed when objects are removed	WITHOUT_CLASSIFICATION	0.998161201425496	WITHOUT_CLASSIFICATION	0.0018387985745039782	DEFECT
// we reached the end of a list	WITHOUT_CLASSIFICATION	0.9996345807290501	WITHOUT_CLASSIFICATION	3.654192709499794E-4	DEFECT
// goto next bucket	WITHOUT_CLASSIFICATION	0.9998857534954535	WITHOUT_CLASSIFICATION	1.1424650454652345E-4	DEFECT
// we reached the end	WITHOUT_CLASSIFICATION	0.9999738140164521	WITHOUT_CLASSIFICATION	2.618598354787185E-5	DEFECT
// entry is the first element of this bucket	WITHOUT_CLASSIFICATION	0.9998396378378619	WITHOUT_CLASSIFICATION	1.6036216213815042E-4	DEFECT
// states	WITHOUT_CLASSIFICATION	0.9999561711953675	WITHOUT_CLASSIFICATION	4.382880463252781E-5	DEFECT
// remove leading whitespace (includes _ for lax) // get sign, if any	WITHOUT_CLASSIFICATION	0.9998751933620877	WITHOUT_CLASSIFICATION	1.248066379122058E-4	DEFECT
// optimistic pass - calculate value as digits are processed // digits - lax rules // decimal digits - lax rules // exponent sign/digits - lax rules // digits - strict rules // decimal digits - strict rules // exponent sign/digits - strict rules // complete calculation if possible	WITHOUT_CLASSIFICATION	0.9984419499593093	WITHOUT_CLASSIFICATION	0.0015580500406907017	DEFECT
// fields used for direct (optimistic) calculation // number of significant digits, updated as parsed // zeroes that may go to significand or exponent // offset of decimal pt from start (-1 -> no decimal) // significand, updated as parsed // exponent, updated as parsed	WITHOUT_CLASSIFICATION	0.998312216362311	WITHOUT_CLASSIFICATION	0.001687783637689042	DEFECT
// drop through for sign	WITHOUT_CLASSIFICATION	0.9999759933126441	WITHOUT_CLASSIFICATION	2.400668735591727E-5	DEFECT
// switch // will use this if we have to go back the slow way	WITHOUT_CLASSIFICATION	0.9989016842598281	WITHOUT_CLASSIFICATION	0.0010983157401719468	DEFECT
// drop through for non-strict digits	WITHOUT_CLASSIFICATION	0.9998088823740232	WITHOUT_CLASSIFICATION	1.9111762597680268E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9997493802622405	WITHOUT_CLASSIFICATION	2.506197377595828E-4	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9997366680755084	WITHOUT_CLASSIFICATION	2.633319244915805E-4	DEFECT
// no digits, go calc (will return +/- 0.0 for lax)	WITHOUT_CLASSIFICATION	0.9999677132664515	WITHOUT_CLASSIFICATION	3.2286733548532534E-5	DEFECT
// ignore leading zeroes	WITHOUT_CLASSIFICATION	0.9999805753613829	WITHOUT_CLASSIFICATION	1.9424638617154003E-5	DEFECT
// just save a count of zeroes for now; if no digit // ends up following them, they'll be applied to the // exponent rather than the significand (and our max // length for optimistic calc).	WITHOUT_CLASSIFICATION	0.9977933937295149	WITHOUT_CLASSIFICATION	0.0022066062704850405	DEFECT
// ok, got a non-zero, have to own up to our horded zeroes	WITHOUT_CLASSIFICATION	0.9996132108702913	WITHOUT_CLASSIFICATION	3.867891297086709E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// oh, well, it was worth a try. go let // Double/FloatingDecimal handle it 	WITHOUT_CLASSIFICATION	0.99995045715439	WITHOUT_CLASSIFICATION	4.954284560995192E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999761987172298	WITHOUT_CLASSIFICATION	2.380128277026505E-5	DEFECT
// ignore // switch	WITHOUT_CLASSIFICATION	0.9999761987172298	WITHOUT_CLASSIFICATION	2.380128277026505E-5	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9983913541950841	WITHOUT_CLASSIFICATION	0.0016086458049158737	DEFECT
// end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9983913541950841	WITHOUT_CLASSIFICATION	0.0016086458049158737	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
// first non_underscore char must be digit	WITHOUT_CLASSIFICATION	0.9997132694322395	WITHOUT_CLASSIFICATION	2.8673056776047797E-4	DEFECT
// no dec digits, end of parseable data, go to calc	WITHOUT_CLASSIFICATION	0.9992890533080302	WITHOUT_CLASSIFICATION	7.10946691969811E-4	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999837082547983	WITHOUT_CLASSIFICATION	1.6291745201644946E-5	DEFECT
// difficult case, send to Double/FloatingDecimal	WITHOUT_CLASSIFICATION	0.9989465365114418	WITHOUT_CLASSIFICATION	0.0010534634885581784	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9997493802622405	WITHOUT_CLASSIFICATION	2.506197377595828E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9997493802622405	WITHOUT_CLASSIFICATION	2.506197377595828E-4	DEFECT
// first char must be digit or decimal point	WITHOUT_CLASSIFICATION	0.9997493802622405	WITHOUT_CLASSIFICATION	2.506197377595828E-4	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9997366680755084	WITHOUT_CLASSIFICATION	2.633319244915805E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999837082547983	WITHOUT_CLASSIFICATION	1.6291745201644946E-5	DEFECT
// switch // if	WITHOUT_CLASSIFICATION	0.9999837082547983	WITHOUT_CLASSIFICATION	1.6291745201644946E-5	DEFECT
// lax (str.to_f) allows underscores between e/E and sign	WITHOUT_CLASSIFICATION	0.9998718806939575	WITHOUT_CLASSIFICATION	1.2811930604249793E-4	DEFECT
// switch // for // no exponent, so drop through for calculation	WITHOUT_CLASSIFICATION	0.999892388640952	WITHOUT_CLASSIFICATION	1.0761135904799144E-4	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9994998424008251	WITHOUT_CLASSIFICATION	5.001575991747637E-4	DEFECT
// TODO: it's not clear to me why, in FloatingDecimal, the // "slop" calculation performed above for positive exponents // isn't used for negative exponents as well. Will find out...	WITHOUT_CLASSIFICATION	0.7970496051954143	DEFECT	0.2029503948045856	WITHOUT_CLASSIFICATION
// no digits, error	WITHOUT_CLASSIFICATION	0.9999908514215653	WITHOUT_CLASSIFICATION	9.148578434713442E-6	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999488977998074	WITHOUT_CLASSIFICATION	5.11022001924905E-5	DEFECT
// too big for us	WITHOUT_CLASSIFICATION	0.9999488977998074	WITHOUT_CLASSIFICATION	5.11022001924905E-5	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998175766357967	WITHOUT_CLASSIFICATION	1.8242336420326157E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9992548820337329	WITHOUT_CLASSIFICATION	7.451179662670834E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9992548820337329	WITHOUT_CLASSIFICATION	7.451179662670834E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9992548820337329	WITHOUT_CLASSIFICATION	7.451179662670834E-4	DEFECT
// first char must be digit	WITHOUT_CLASSIFICATION	0.999963980157799	WITHOUT_CLASSIFICATION	3.6019842201063665E-5	DEFECT
// no dec digits after '.', error for strict	WITHOUT_CLASSIFICATION	0.9999061091523388	WITHOUT_CLASSIFICATION	9.389084766124443E-5	DEFECT
// ignore leading zeroes // switch	WITHOUT_CLASSIFICATION	0.9997366680755084	WITHOUT_CLASSIFICATION	2.633319244915805E-4	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
// switch // for	WITHOUT_CLASSIFICATION	0.9999552361702045	WITHOUT_CLASSIFICATION	4.4763829795417056E-5	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// only whitespace allowed after value for strict	WITHOUT_CLASSIFICATION	0.9992548820337329	WITHOUT_CLASSIFICATION	7.451179662670834E-4	DEFECT
// must be at least one digit for strict	WITHOUT_CLASSIFICATION	0.9998175766357967	WITHOUT_CLASSIFICATION	1.8242336420326157E-4	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999365233283806	WITHOUT_CLASSIFICATION	6.347667161944025E-5	DEFECT
// switch //while	WITHOUT_CLASSIFICATION	0.9999727567671904	WITHOUT_CLASSIFICATION	2.7243232809469568E-5	DEFECT
/*     * All the positive powers of 10 that can be     * represented exactly in double/float.     * (From sun.misc.FloatingDecimal.java)     */	WITHOUT_CLASSIFICATION	0.9998258539807682	WITHOUT_CLASSIFICATION	1.7414601923184262E-4	DEFECT
// Zlib behavior: negative win_bits means no header and no checksum.	WITHOUT_CLASSIFICATION	0.9999058094825357	WITHOUT_CLASSIFICATION	9.419051746434789E-5	DEFECT
// rb_enc_mbclen	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// rb_enc_precise_mbclen	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999908746507926	WITHOUT_CLASSIFICATION	9.125349207394073E-5	DEFECT
// arg cannot be negative	WITHOUT_CLASSIFICATION	0.9999344615513277	WITHOUT_CLASSIFICATION	6.553844867236297E-5	DEFECT
// NoFunctionalitySignalFacade	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// Change visibility so others can see it	WITHOUT_CLASSIFICATION	0.9999286021272171	WITHOUT_CLASSIFICATION	7.139787278284316E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9997862258894088	WITHOUT_CLASSIFICATION	2.1377411059106584E-4	DEFECT
// strip off "_dot_rb" for .rb files	WITHOUT_CLASSIFICATION	0.9998880064605743	WITHOUT_CLASSIFICATION	1.1199353942570835E-4	DEFECT
// Makes sure the key is not already in the hashtable.	WITHOUT_CLASSIFICATION	0.9983627640698969	WITHOUT_CLASSIFICATION	0.0016372359301031671	DEFECT
// Rehash the table if the threshold is exceeded	WITHOUT_CLASSIFICATION	0.9999405210474922	WITHOUT_CLASSIFICATION	5.9478952507771606E-5	DEFECT
// Creates the new entry.	WITHOUT_CLASSIFICATION	0.9999968953499192	WITHOUT_CLASSIFICATION	3.104650080842211E-6	DEFECT
// next entry to return // current slot // current entry	WITHOUT_CLASSIFICATION	0.9994077996912417	WITHOUT_CLASSIFICATION	5.922003087582419E-4	DEFECT
// advance to first entry	WITHOUT_CLASSIFICATION	0.9999652155901421	WITHOUT_CLASSIFICATION	3.4784409857998436E-5	DEFECT
// The reason why we need the stream is to be able to invoke available() on it. // STDIN in Java is non-interruptible, non-selectable, and attempt to read // on such stream might lead to thread being blocked without *any* way to unblock it. // That's where available() comes it, so at least we could check whether // anything is available to be read without blocking.	WITHOUT_CLASSIFICATION	0.9999976777677021	WITHOUT_CLASSIFICATION	2.322232297939974E-6	DEFECT
/*package-protected*/	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// raw file URL, just open directly	WITHOUT_CLASSIFICATION	0.9999760554679317	WITHOUT_CLASSIFICATION	2.3944532068394243E-5	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9978163654917005	WITHOUT_CLASSIFICATION	0.0021836345082994774	DEFECT
// if refcount is at or below zero, we're no longer valid	WITHOUT_CLASSIFICATION	0.9993814067339523	WITHOUT_CLASSIFICATION	6.185932660478359E-4	DEFECT
// if channel is already closed, we're no longer valid	WITHOUT_CLASSIFICATION	0.9998356229026943	WITHOUT_CLASSIFICATION	1.6437709730566328E-4	DEFECT
// otherwise decrement and possibly close as normal	WITHOUT_CLASSIFICATION	0.9999242964458324	WITHOUT_CLASSIFICATION	7.570355416763034E-5	DEFECT
// r/w buffer // are we reading or writing?	WITHOUT_CLASSIFICATION	0.9998848276095457	WITHOUT_CLASSIFICATION	1.1517239045429089E-4	DEFECT
// this constructor is used by fdopen, so we don't increment descriptor ref count	WITHOUT_CLASSIFICATION	0.9999354972384329	WITHOUT_CLASSIFICATION	6.450276156717162E-5	DEFECT
// unread back	WITHOUT_CLASSIFICATION	0.9999713327427774	WITHOUT_CLASSIFICATION	2.8667257222612505E-5	DEFECT
// iterate over remainder of buffer until we find a match	WITHOUT_CLASSIFICATION	0.9994463080251018	WITHOUT_CLASSIFICATION	5.536919748982272E-4	DEFECT
// terminate and advance buffer when we find our char	WITHOUT_CLASSIFICATION	0.9998472689577197	WITHOUT_CLASSIFICATION	1.5273104228023189E-4	DEFECT
// no match, append remainder of buffer and continue with next block	WITHOUT_CLASSIFICATION	0.9994404705938096	WITHOUT_CLASSIFICATION	5.595294061904408E-4	DEFECT
// found a match above, check if remaining separator characters match, appending as we go	WITHOUT_CLASSIFICATION	0.9999935402451181	WITHOUT_CLASSIFICATION	6.4597548819553215E-6	DEFECT
// // Check file size - special files in /proc have zero size and need to be // handled by the generic read path. //	WITHOUT_CLASSIFICATION	0.999861241029522	WITHOUT_CLASSIFICATION	1.3875897047802878E-4	DEFECT
// // Copy any buffered data (including ungetc byte) //	WITHOUT_CLASSIFICATION	0.9997082544295994	WITHOUT_CLASSIFICATION	2.9174557040057925E-4	DEFECT
// // Now read unbuffered directly from the file //	WITHOUT_CLASSIFICATION	0.9999571800416939	WITHOUT_CLASSIFICATION	4.281995830615712E-5	DEFECT
// // Copy out any buffered bytes //	WITHOUT_CLASSIFICATION	0.9999365233283806	WITHOUT_CLASSIFICATION	6.347667161944025E-5	DEFECT
// // Need to clamp source (buffer) size to avoid overrun //	WITHOUT_CLASSIFICATION	0.9998789407371381	WITHOUT_CLASSIFICATION	1.2105926286189719E-4	DEFECT
// not closing from finalize	WITHOUT_CLASSIFICATION	0.9995353062164224	WITHOUT_CLASSIFICATION	4.6469378357762316E-4	DEFECT
// clear runtime so it doesn't get stuck in memory (JRUBY-2933)	WITHOUT_CLASSIFICATION	0.9990821194865913	WITHOUT_CLASSIFICATION	9.178805134086922E-4	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// silence	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999889612802213	WITHOUT_CLASSIFICATION	1.1038719778663662E-5	DEFECT
// Don't bother	WITHOUT_CLASSIFICATION	0.9999889612802213	WITHOUT_CLASSIFICATION	1.1038719778663662E-5	DEFECT
// For Sockets, only write as much as will fit.	WITHOUT_CLASSIFICATION	0.999831003515096	WITHOUT_CLASSIFICATION	1.6899648490398416E-4	DEFECT
// Correct position for read / write buffering (we could invalidate, but expensive)	WITHOUT_CLASSIFICATION	0.9999846451527468	WITHOUT_CLASSIFICATION	1.535484725329551E-5	DEFECT
// Adjust for buffered data	WITHOUT_CLASSIFICATION	0.9999238080867972	WITHOUT_CLASSIFICATION	7.619191320280885E-5	DEFECT
// for SEEK_CUR, need to adjust for buffered data	WITHOUT_CLASSIFICATION	0.9996295298283282	WITHOUT_CLASSIFICATION	3.7047017167174726E-4	DEFECT
// libc flushes writes on any read from the actual file, so we flush here	WITHOUT_CLASSIFICATION	0.9999865019825441	WITHOUT_CLASSIFICATION	1.3498017455917498E-5	DEFECT
// we have read ahead, and need to back up	WITHOUT_CLASSIFICATION	0.9996093890189166	WITHOUT_CLASSIFICATION	3.906109810834277E-4	DEFECT
// 128K seems to be the minimum at which the stat+seek is faster than reallocation	WITHOUT_CLASSIFICATION	0.9976532619768668	WITHOUT_CLASSIFICATION	0.002346738023133244	DEFECT
// // limit each iteration to a max of BULK_READ_SIZE to avoid over-size allocations //	WITHOUT_CLASSIFICATION	0.9987259227655844	WITHOUT_CLASSIFICATION	0.0012740772344157448	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9993061385265408	WITHOUT_CLASSIFICATION	6.938614734591683E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9997881849790977	WITHOUT_CLASSIFICATION	2.1181502090223913E-4	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size //	WITHOUT_CLASSIFICATION	0.9999020524839308	WITHOUT_CLASSIFICATION	9.794751606920236E-5	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9998684627976039	WITHOUT_CLASSIFICATION	1.315372023960889E-4	DEFECT
// // Complete the request by filling the read buffer first //	WITHOUT_CLASSIFICATION	0.9998684627976039	WITHOUT_CLASSIFICATION	1.315372023960889E-4	DEFECT
// // Avoid double-copying for reads that are larger than the buffer size, or // the destination is a direct buffer. //	WITHOUT_CLASSIFICATION	0.9994923764107089	WITHOUT_CLASSIFICATION	5.076235892911179E-4	DEFECT
// // We limit reads to BULK_READ_SIZED chunks to avoid NIO allocating // a huge temporary native buffer, when doing reads into a heap buffer // If the dst buffer is direct, then no need to limit. //	WITHOUT_CLASSIFICATION	0.9998745936152114	WITHOUT_CLASSIFICATION	1.2540638478863598E-4	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9998927487250682	WITHOUT_CLASSIFICATION	1.0725127493186805E-4	DEFECT
// Ruby ignores empty syswrites	WITHOUT_CLASSIFICATION	0.9998927487250682	WITHOUT_CLASSIFICATION	1.0725127493186805E-4	DEFECT
// Doesn't fit in buffer. Write immediately. // ensure nothing left to write	WITHOUT_CLASSIFICATION	0.9996577972682363	WITHOUT_CLASSIFICATION	3.422027317637223E-4	DEFECT
// truncate can't lengthen files, so we save position, seek/write, and go back	WITHOUT_CLASSIFICATION	0.9996608852309307	WITHOUT_CLASSIFICATION	3.3911476906936603E-4	DEFECT
// how far ahead we are when reading	WITHOUT_CLASSIFICATION	0.9999564048071514	WITHOUT_CLASSIFICATION	4.359519284858817E-5	DEFECT
// if the read buffer is ahead, back up	WITHOUT_CLASSIFICATION	0.9997637601794315	WITHOUT_CLASSIFICATION	2.362398205685755E-4	DEFECT
// close without removing from finalizers	WITHOUT_CLASSIFICATION	0.9998395226368112	WITHOUT_CLASSIFICATION	1.6047736318891556E-4	DEFECT
// putting a bit back, so we're not at EOF anymore	WITHOUT_CLASSIFICATION	0.9991416710622336	WITHOUT_CLASSIFICATION	8.583289377664705E-4	DEFECT
// save the ungot	WITHOUT_CLASSIFICATION	0.9999900857366681	WITHOUT_CLASSIFICATION	9.914263331854168E-6	DEFECT
// otherwise, we try an unbuffered read to get whatever's available	WITHOUT_CLASSIFICATION	0.9998858161812714	WITHOUT_CLASSIFICATION	1.1418381872864734E-4	DEFECT
// ignore this; select() will set the correct mode when it is finished	WITHOUT_CLASSIFICATION	0.9998276216568586	WITHOUT_CLASSIFICATION	1.723783431414435E-4	DEFECT
// flush first	WITHOUT_CLASSIFICATION	0.9999901993269065	WITHOUT_CLASSIFICATION	9.800673093578198E-6	DEFECT
// // Wake up any channels that became unblocked //	WITHOUT_CLASSIFICATION	0.999906522673855	WITHOUT_CLASSIFICATION	9.34773261449878E-5	DEFECT
// // Register any new blocking I/O requests //	WITHOUT_CLASSIFICATION	0.9999526056780591	WITHOUT_CLASSIFICATION	4.739432194091255E-5	DEFECT
// Now clear out any previously selected channels	WITHOUT_CLASSIFICATION	0.9999780039625655	WITHOUT_CLASSIFICATION	2.1996037434377142E-5	DEFECT
// // Wait for I/O on any channel //	WITHOUT_CLASSIFICATION	0.999791343651671	WITHOUT_CLASSIFICATION	2.0865634832907117E-4	DEFECT
// Do not open as 'rw' by default since a file with read-only permissions will fail on 'rw'	WITHOUT_CLASSIFICATION	0.999905037376777	WITHOUT_CLASSIFICATION	9.496262322287775E-5	DEFECT
// Java requires "w" for creating a file that does not exist	WITHOUT_CLASSIFICATION	0.9911886296643669	WITHOUT_CLASSIFICATION	0.008811370335633064	DEFECT
// seek to force underlying buffer to flush	WITHOUT_CLASSIFICATION	0.9992292074435019	WITHOUT_CLASSIFICATION	7.707925564979964E-4	DEFECT
// seek to force read buffer to invalidate	WITHOUT_CLASSIFICATION	0.9992721386275737	WITHOUT_CLASSIFICATION	7.27861372426199E-4	DEFECT
/*        result = eval("arr = Array::['c', 200]; p arr");        assertEquals("[\"c\", 200]", result);        result = eval("arr = Array.['d', 200]; p arr");        assertEquals("[\"d\", 200]", result);        */	WITHOUT_CLASSIFICATION	0.9997054585913099	WITHOUT_CLASSIFICATION	2.9454140869002214E-4	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9998778061418706	WITHOUT_CLASSIFICATION	1.2219385812935345E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9656974280240431	WITHOUT_CLASSIFICATION	0.034302571975956875	DEFECT
// make sure the pipe stream is set to null	WITHOUT_CLASSIFICATION	0.9998441153173983	WITHOUT_CLASSIFICATION	1.558846826016247E-4	DEFECT
// make sure the main stream is set to null	WITHOUT_CLASSIFICATION	0.9998864972353437	WITHOUT_CLASSIFICATION	1.1350276465628116E-4	DEFECT
// first try our custom-generated Unsafe	WITHOUT_CLASSIFICATION	0.9999700514084551	WITHOUT_CLASSIFICATION	2.9948591545016078E-5	DEFECT
// then try Sun's Unsafe	WITHOUT_CLASSIFICATION	0.9999933889389351	WITHOUT_CLASSIFICATION	6.611061064925793E-6	DEFECT
// if we get here, the class and field exist; construct our Unsafe impl // that calls it directly	WITHOUT_CLASSIFICATION	0.9999972757524525	WITHOUT_CLASSIFICATION	2.7242475475183104E-6	DEFECT
// else leave it null	WITHOUT_CLASSIFICATION	0.9999659520300338	WITHOUT_CLASSIFICATION	3.404796996616245E-5	DEFECT
// TypeMatcher	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// This is now needed, since module Java // isn't in by default	WITHOUT_CLASSIFICATION	0.9999117738769912	WITHOUT_CLASSIFICATION	8.822612300873756E-5	DEFECT
// Iterate over the RubyHash keySet, simultaneously iterating over the values()	WITHOUT_CLASSIFICATION	0.999929026449972	WITHOUT_CLASSIFICATION	7.097355002806448E-5	DEFECT
// Get the value from the map via the key	WITHOUT_CLASSIFICATION	0.9996659099972318	WITHOUT_CLASSIFICATION	3.3409000276818807E-4	DEFECT
// Get the value from the map via the values iterator	WITHOUT_CLASSIFICATION	0.9998083233036421	WITHOUT_CLASSIFICATION	1.9167669635791342E-4	DEFECT
// Check the 2 values obtained via different means	WITHOUT_CLASSIFICATION	0.999762328028317	WITHOUT_CLASSIFICATION	2.37671971683125E-4	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999129159832921	WITHOUT_CLASSIFICATION	8.70840167078493E-5	DEFECT
// Set a value in the RubyHash	WITHOUT_CLASSIFICATION	0.9999129159832921	WITHOUT_CLASSIFICATION	8.70840167078493E-5	DEFECT
// Check the entry.setValue values come back out ok	WITHOUT_CLASSIFICATION	0.9999830303838769	WITHOUT_CLASSIFICATION	1.696961612304353E-5	DEFECT
// If we're running from within an IDE we may not have // the .rb files in our classpath. Try to find them // in the filesystem instead.	WITHOUT_CLASSIFICATION	0.9997418835404269	WITHOUT_CLASSIFICATION	2.5811645957310686E-4	DEFECT
//assertEquals("\"foo\"\n\"bar\"", eval("$h.each {|val| p val}")); //assertEquals("[\"foo\", \"bar\"]", eval("p $h.each {|val| }"));	WITHOUT_CLASSIFICATION	0.9989870118984162	WITHOUT_CLASSIFICATION	0.0010129881015838668	DEFECT
// Init	WITHOUT_CLASSIFICATION	0.9999506560651865	WITHOUT_CLASSIFICATION	4.934393481339161E-5	DEFECT
// Block	WITHOUT_CLASSIFICATION	0.9999509408396471	WITHOUT_CLASSIFICATION	4.905916035303749E-5	DEFECT
// Copy constructor	WITHOUT_CLASSIFICATION	0.9999919720312166	WITHOUT_CLASSIFICATION	8.027968783398839E-6	DEFECT
// presumably this require should fail	WITHOUT_CLASSIFICATION	0.9991906840231006	WITHOUT_CLASSIFICATION	8.093159768994236E-4	DEFECT
// JRUBY-646 // presumably this require should fail	WITHOUT_CLASSIFICATION	0.9991906840231006	WITHOUT_CLASSIFICATION	8.093159768994236E-4	DEFECT
// Test that requiring a normal Java class raises an error (JRUBY-3214	WITHOUT_CLASSIFICATION	0.9999886386669944	WITHOUT_CLASSIFICATION	1.1361333005536747E-5	DEFECT
// ok	WITHOUT_CLASSIFICATION	0.9999552768490547	WITHOUT_CLASSIFICATION	4.472315094538403E-5	DEFECT
// Function not used...but it gets rid of unused warnings in Eclipse (we do call those methods // from Ruby so they are not really unused).	WITHOUT_CLASSIFICATION	0.9995117384843052	WITHOUT_CLASSIFICATION	4.882615156947978E-4	DEFECT
//load should work several times in a row	WITHOUT_CLASSIFICATION	0.9382445608867204	WITHOUT_CLASSIFICATION	0.061755439113279735	DEFECT
//reset the $loadTestvar	WITHOUT_CLASSIFICATION	0.9999363990190165	WITHOUT_CLASSIFICATION	6.360098098347602E-5	DEFECT
//call throwException via JRuby	WITHOUT_CLASSIFICATION	0.9988766033081101	WITHOUT_CLASSIFICATION	0.0011233966918899531	DEFECT
// Notify the calling thread that we're about to go to sleep the first time	WITHOUT_CLASSIFICATION	0.9999820726533963	WITHOUT_CLASSIFICATION	1.7927346603672703E-5	DEFECT
// wait for the go signal	WITHOUT_CLASSIFICATION	0.999988907408876	WITHOUT_CLASSIFICATION	1.1092591123908355E-5	DEFECT
// run ten separate calls into Ruby, with delay and explicit GC	WITHOUT_CLASSIFICATION	0.999947139422156	WITHOUT_CLASSIFICATION	5.2860577844094336E-5	DEFECT
// wait until thread has initialized	WITHOUT_CLASSIFICATION	0.999899640358845	WITHOUT_CLASSIFICATION	1.0035964115491359E-4	DEFECT
// notify thread to proceed	WITHOUT_CLASSIFICATION	0.9999218514303794	WITHOUT_CLASSIFICATION	7.814856962056378E-5	DEFECT
// wait until thread has completed	WITHOUT_CLASSIFICATION	0.9998902300581495	WITHOUT_CLASSIFICATION	1.0976994185045182E-4	DEFECT
// we do preand post load outside the "body" versions to pre-prepare // and pre-push the dynamic scope we need for lastline	WITHOUT_CLASSIFICATION	0.999907098442	WITHOUT_CLASSIFICATION	9.290155800006908E-5	DEFECT
// out of byte range // there will be no match for sure	WITHOUT_CLASSIFICATION	0.9997994097895458	WITHOUT_CLASSIFICATION	2.0059021045413567E-4	DEFECT
// MRI behavior: raise ArgumentError for 'unknown command' before // checking number of args.	WITHOUT_CLASSIFICATION	0.9969538083938665	WITHOUT_CLASSIFICATION	0.00304619160613365	DEFECT
// if any exceptions were raised, we fail	WITHOUT_CLASSIFICATION	0.999626923973524	WITHOUT_CLASSIFICATION	3.730760264760247E-4	DEFECT
// there should only be one more thread in thread group than before we started	WITHOUT_CLASSIFICATION	0.9969069520064597	WITHOUT_CLASSIFICATION	0.0030930479935401697	DEFECT
// construct a new cache with thread's classloader and no limit	WITHOUT_CLASSIFICATION	0.9999822917553837	WITHOUT_CLASSIFICATION	1.770824461639033E-5	DEFECT
//        Class<?> script1 = ((DefaultMethod) runtime1.getObject().getMethods().get("foo")).getJITCompilerScript().getClass(); //        Class<?> script2 = ((DefaultMethod) runtime2.getObject().getMethods().get("foo")).getJITCompilerScript().getClass();	WITHOUT_CLASSIFICATION	0.9995194717101148	WITHOUT_CLASSIFICATION	4.8052828988524415E-4	DEFECT
//        assertSame(script1, script2);	WITHOUT_CLASSIFICATION	0.999671166274184	WITHOUT_CLASSIFICATION	3.288337258161179E-4	DEFECT
// void methods should work	WITHOUT_CLASSIFICATION	0.9997024588834426	WITHOUT_CLASSIFICATION	2.975411165574716E-4	DEFECT
// methods with required = 4 or higher should bind and be callable using reflection // JRUBY-3649	WITHOUT_CLASSIFICATION	0.9989283829293883	WITHOUT_CLASSIFICATION	0.0010716170706115695	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9998537118015288	WITHOUT_CLASSIFICATION	1.4628819847125685E-4	DEFECT
// Ensure we have a new interpreter for each test. Previous we were using the //  same interpreter which caused problems as soon as one test failed.	WITHOUT_CLASSIFICATION	0.9998931465030995	WITHOUT_CLASSIFICATION	1.0685349690053492E-4	DEFECT
// Without a flush Ant will miss some of our output	WITHOUT_CLASSIFICATION	0.9998087328116932	WITHOUT_CLASSIFICATION	1.9126718830683745E-4	DEFECT
// assertTrue(rubyObject.kind_of(ruby.getClasses().getStringClass()).isFalse());	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
//        int n = 10;	WITHOUT_CLASSIFICATION	0.9999408339753865	WITHOUT_CLASSIFICATION	5.91660246135849E-5	DEFECT
// there might be more test classes in a single file, so we iterate over them	WITHOUT_CLASSIFICATION	0.9998559721978568	WITHOUT_CLASSIFICATION	1.440278021431819E-4	DEFECT
//No ClassCastException!	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// value equality	WITHOUT_CLASSIFICATION	0.9999485546686607	WITHOUT_CLASSIFICATION	5.1445331339191686E-5	DEFECT
// identity equality	WITHOUT_CLASSIFICATION	0.9999857519437508	WITHOUT_CLASSIFICATION	1.424805624913145E-5	DEFECT
// bench straight-up integer fib(30)	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// bench Integer fib	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// bench fully-boxed fib	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// bench fixnum-boxed fib	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// bench straight-up long fib(30)	WITHOUT_CLASSIFICATION	0.9998412751335474	WITHOUT_CLASSIFICATION	1.587248664526228E-4	DEFECT
// bench Long fib	WITHOUT_CLASSIFICATION	0.9999840140517029	WITHOUT_CLASSIFICATION	1.598594829716711E-5	DEFECT
// skip this one, probably no 'ls' (windows)	WITHOUT_CLASSIFICATION	0.9999154674625186	WITHOUT_CLASSIFICATION	8.453253748143311E-5	DEFECT
// start off with a neutral parent	WITHOUT_CLASSIFICATION	0.9998417451230115	WITHOUT_CLASSIFICATION	1.5825487698853795E-4	DEFECT
/*            public class Hello {                public static String getMessage() {                    return ".....";                }            }            */	WITHOUT_CLASSIFICATION	0.9999849064965581	WITHOUT_CLASSIFICATION	1.509350344186718E-5	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// Note: We can't use file.exists() to check whether the symlink // exists or not, because that method returns false for existing // but broken symlink. So, we try without the existence check, // but in the try-catch block. // MRI behavior: symlink? on broken symlink should return true.	WITHOUT_CLASSIFICATION	0.9998530742627789	WITHOUT_CLASSIFICATION	1.4692573722109435E-4	DEFECT
// We are creating a new IO object that shares the same // IOHandler (and fileno).	WITHOUT_CLASSIFICATION	0.9999646188746049	WITHOUT_CLASSIFICATION	3.538112539515534E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999963183557836	WITHOUT_CLASSIFICATION	3.6816442163070273E-6	DEFECT
//[IRubyObject] //[IRubyObject, IRubyObject] //[IRubyObject, RubyClass] //[IRubyObject, RubyClass, RubyClass] //[IRubyObject, RubyClass, Visibility] //[IRubyObject, RubyClass, Visibility, Visibility]	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// select appropriate call site // dup receiver // load self	WITHOUT_CLASSIFICATION	0.9997654484416477	WITHOUT_CLASSIFICATION	2.345515583523018E-4	DEFECT
// Translate "x || y" --> "x = (is_true(x) ? x : y)" --> //  //    x = -- build(x) should return a variable! -- //    f = is_true(x) //    beq(f, true, L) //    x = -- build(y) -- // L: //	WITHOUT_CLASSIFICATION	0.9997376986931431	WITHOUT_CLASSIFICATION	2.623013068569343E-4	DEFECT
// // Force the client socket to be blocking //	WITHOUT_CLASSIFICATION	0.9994633813810517	WITHOUT_CLASSIFICATION	5.366186189483397E-4	DEFECT
// Additional context surrounding tokens that both the lexer and // grammar use.	WITHOUT_CLASSIFICATION	0.9997265348090353	WITHOUT_CLASSIFICATION	2.734651909646764E-4	DEFECT
// Enebo:  c can never be antrhign but '.' // Why did I put this here?	WITHOUT_CLASSIFICATION	0.9991052358715045	WITHOUT_CLASSIFICATION	8.947641284953935E-4	DEFECT
// save package module as ivar in parent, and add method to parent so // we don't have to come back here.	WITHOUT_CLASSIFICATION	0.9809064163887081	WITHOUT_CLASSIFICATION	0.019093583611291896	DEFECT
//[C,C] //[C, boolean]	WITHOUT_CLASSIFICATION	0.9998571134890217	WITHOUT_CLASSIFICATION	1.4288651097824683E-4	DEFECT
// Label for the start of the closure (used to implement redo) // Label for the end of the closure (used to implement retry)	WITHOUT_CLASSIFICATION	0.9981955577830199	WITHOUT_CLASSIFICATION	0.001804442216980061	DEFECT
// ignore; job was cancelled // FIXME: is this ok?	WITHOUT_CLASSIFICATION	0.9970048953746581	WITHOUT_CLASSIFICATION	0.002995104625342022	DEFECT
//                    // check arity //                    checkArity(mv, scope);	WITHOUT_CLASSIFICATION	0.9998989243237549	WITHOUT_CLASSIFICATION	1.0107567624516978E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9991363314484546	WITHOUT_CLASSIFICATION	8.636685515454395E-4	DEFECT
// we take the first method found as our "n" method, since for any non-specific // arity they'll all error the same. If an actual "n" method is created, we // use that.	WITHOUT_CLASSIFICATION	0.9999958606180067	WITHOUT_CLASSIFICATION	4.139381993300809E-6	DEFECT
// Used by our duck-typification of Proc into interface types, to allow // coercing a simple proc into an interface parameter.	WITHOUT_CLASSIFICATION	0.9997417281721392	WITHOUT_CLASSIFICATION	2.5827182786074867E-4	DEFECT
// proxy is under construction, building thread can // safely read non-volatile value	WITHOUT_CLASSIFICATION	0.9986382205213963	WITHOUT_CLASSIFICATION	0.0013617794786036743	DEFECT
// it's either as converted as we can make it via above logic or it's // not one of the types we convert, so just pass it out as-is without wrapping	WITHOUT_CLASSIFICATION	0.9991254149461747	WITHOUT_CLASSIFICATION	8.745850538253593E-4	DEFECT
// package scheme 2: separate module for each full package name, constructed  // from the camel-cased package segments: Java::JavaLang::Object, 	WITHOUT_CLASSIFICATION	0.9999272759081844	WITHOUT_CLASSIFICATION	7.27240918156227E-5	DEFECT
// // construct the proxy method //	WITHOUT_CLASSIFICATION	0.9999279214977819	WITHOUT_CLASSIFICATION	7.207850221810052E-5	DEFECT
// line 159 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995936423603292	WITHOUT_CLASSIFICATION	4.063576396708753E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999778169582103	WITHOUT_CLASSIFICATION	2.218304178969822E-5	DEFECT
// line 152 "-" // %token constants	WITHOUT_CLASSIFICATION	0.9995936423603292	WITHOUT_CLASSIFICATION	4.063576396708753E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9995825152524196	WITHOUT_CLASSIFICATION	4.1748474758045916E-4	DEFECT
// +++ // Helper Methods	WITHOUT_CLASSIFICATION	0.9999778169582103	WITHOUT_CLASSIFICATION	2.218304178969822E-5	DEFECT
// We only need to pass in current scope if we are evaluating as a block (which // is only done for evals).  We need to pass this in so that we can appropriately scope // down to captured scopes when we are parsing.	WITHOUT_CLASSIFICATION	0.9998021162598709	WITHOUT_CLASSIFICATION	1.9788374012910193E-4	DEFECT
// let the width (if any), get processed in the next loop, // so any leading 0 gets treated correctly 	WITHOUT_CLASSIFICATION	0.9987232469410684	WITHOUT_CLASSIFICATION	0.001276753058931668	DEFECT
// A place to store that special hiding space that bindings need to implement things like: // eval("a = 1", binding); eval("p a").  All binding instances must get access to this // hidden shared scope.  We store it here.  This will be null if no binding has yet // been called.	WITHOUT_CLASSIFICATION	0.980031527380438	WITHOUT_CLASSIFICATION	0.019968472619561993	DEFECT
// TODO: make it 16 now ? // MUST be power of 2!	WITHOUT_CLASSIFICATION	0.6561976535691652	WITHOUT_CLASSIFICATION	0.3438023464308349	DEFECT
// check visibility // dup method	WITHOUT_CLASSIFICATION	0.9999382774327197	WITHOUT_CLASSIFICATION	6.172256728029154E-5	DEFECT
// &foo are not getting set from somewhere...I want the following assert to be true though //assert variableValues[offset] != null : "Getting unassigned: " + staticScope.getVariables()[offset];	WITHOUT_CLASSIFICATION	0.9926541214236841	WITHOUT_CLASSIFICATION	0.0073458785763159265	DEFECT
// unsigned int, native // unsigned long, native	WITHOUT_CLASSIFICATION	0.9998308187410739	WITHOUT_CLASSIFICATION	1.6918125892611096E-4	DEFECT
//need padding //I'm fairly sure there is a library call to create a //string filled with a given char with a given length but I couldn't find it	WITHOUT_CLASSIFICATION	0.9999290768970781	WITHOUT_CLASSIFICATION	7.092310292186573E-5	DEFECT
// MRI behavior: Be default, 2 digits // in the exponent. Use 3 digits // only when necessary. // See comment for writeExp method for more details.	WITHOUT_CLASSIFICATION	0.9970510961699097	WITHOUT_CLASSIFICATION	0.0029489038300903317	DEFECT
// MRI ignores seek errors, presumably for unseekable files like // serial ports (JRUBY-2979), so we shall too.	WITHOUT_CLASSIFICATION	0.9998778061418706	WITHOUT_CLASSIFICATION	1.2219385812935345E-4	DEFECT
// switch // for // no more data, OK for strict to go calc	WITHOUT_CLASSIFICATION	0.9994998424008251	WITHOUT_CLASSIFICATION	5.001575991747637E-4	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.928022972443506	WITHOUT_CLASSIFICATION	0.07197702755649395	DEFECT
// Estimate the square root with the foremost 62 bits of squarD // bi and scale are a tandem	WITHOUT_CLASSIFICATION	0.9999491728276675	WITHOUT_CLASSIFICATION	5.082717233263782E-5	DEFECT
// captures // begin and end are used when not groups defined // source string	WITHOUT_CLASSIFICATION	0.9999325331581882	WITHOUT_CLASSIFICATION	6.74668418117614E-5	DEFECT
// // INSTANCE VARIABLE RUBY METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// switch // while	WITHOUT_CLASSIFICATION	0.9999683168381669	WITHOUT_CLASSIFICATION	3.1683161833185654E-5	DEFECT
// For nodes do not have their own scope so we pass null to indicate this. // 'For's are implemented as blocks in evaluation, but they have no scope so we // just deal with this lack of scope throughout its lifespan.  We should probably // change the way this works to get rid of multiple null checks.	WITHOUT_CLASSIFICATION	0.99959226394471	WITHOUT_CLASSIFICATION	4.077360552899692E-4	DEFECT
// This field is used during argument processing to avoid putting RubyArray // instances that are purely for utility purposes into ObjectSpace.	WITHOUT_CLASSIFICATION	0.9996476218929081	WITHOUT_CLASSIFICATION	3.5237810709194564E-4	DEFECT
// Parent container for this context (can be dynamic!!) // If dynamic, at runtime, this will be the meta-object corresponding to a class/script/module/method/closure // List of IR instructions for this method	WITHOUT_CLASSIFICATION	0.9857439504087288	WITHOUT_CLASSIFICATION	0.014256049591271242	DEFECT
// Translate "ret = (a && b)" --> "ret = (a ? b : false)" --> //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is false if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = false    //    beq(v1, false, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.999931377674808	WITHOUT_CLASSIFICATION	6.86223251919601E-5	DEFECT
// expected	WITHOUT_CLASSIFICATION	0.9999863099179632	WITHOUT_CLASSIFICATION	1.3690082036852097E-5	DEFECT
// Do nothing	WITHOUT_CLASSIFICATION	0.9999962787032751	WITHOUT_CLASSIFICATION	3.7212967248817154E-6	DEFECT
// constructor	WITHOUT_CLASSIFICATION	0.9999912045483274	WITHOUT_CLASSIFICATION	8.795451672598736E-6	DEFECT
// If a line is followed by a blank line put // it back.	WITHOUT_CLASSIFICATION	0.9964059839274239	WITHOUT_CLASSIFICATION	0.003594016072576262	DEFECT
/* $>: default output handle */	WITHOUT_CLASSIFICATION	0.9999842448987076	WITHOUT_CLASSIFICATION	1.5755101292431688E-5	DEFECT
// line 423	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 486	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// Signal uses sun.misc.* classes, this is not allowed // in the security-sensitive environments	WITHOUT_CLASSIFICATION	0.9988825461983114	WITHOUT_CLASSIFICATION	0.0011174538016885198	DEFECT
// re-register, since fileno points at something new now	WITHOUT_CLASSIFICATION	0.9999971817484963	WITHOUT_CLASSIFICATION	2.8182515038308916E-6	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999421617426439	WITHOUT_CLASSIFICATION	5.783825735599654E-5	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999421617426439	WITHOUT_CLASSIFICATION	5.783825735599654E-5	DEFECT
// colon3, assign in Object	WITHOUT_CLASSIFICATION	0.999930815387749	WITHOUT_CLASSIFICATION	6.918461225104964E-5	DEFECT
// if there's no receiver, evaluate and pass in the superclass, or // pass self if it no superclass	WITHOUT_CLASSIFICATION	0.999775740393809	WITHOUT_CLASSIFICATION	2.2425960619108565E-4	DEFECT
// Wire up Function#call(*args) to use the super-fast native invokers	WITHOUT_CLASSIFICATION	0.9998555123033337	WITHOUT_CLASSIFICATION	1.444876966663804E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// Decrease value to hit upper range.  	WITHOUT_CLASSIFICATION	0.9985477011963506	WITHOUT_CLASSIFICATION	0.001452298803649402	DEFECT
// assign to appropriate variable	WITHOUT_CLASSIFICATION	0.999582012828306	WITHOUT_CLASSIFICATION	4.179871716939402E-4	DEFECT
// "else" body	WITHOUT_CLASSIFICATION	0.9999845636676521	WITHOUT_CLASSIFICATION	1.5436332347967898E-5	DEFECT
// done // done // done // Nothing to do for 1.8 // done // done // done // done // done // done // done? // done // done // done // done // done // done // done // done // done // done // done //            case DEFINEDNODE: return buildDefined(node, m); // Incomplete // done // done // done // done // done // done // done // done //            case ENSURENODE: return buildEnsureNode(node, m); // DEFERRED // done // done // done // done //            case FLIPNODE: return buildFlip(node, m); // SSS FIXME: What code generates this AST? // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done // done? // done // done // done // done // done // done -- partially //            case OPELEMENTASGNNODE: return buildOpElementAsgn(node, m); // DEFERRED SSS FIXME: What code generates this AST? // done //            case POSTEXENODE: return buildPostExe(node, m); // DEFERRED //            case PREEXENODE: return buildPreExe(node, m); // DEFERRED // done?? // done	WITHOUT_CLASSIFICATION	0.9987271507892267	WITHOUT_CLASSIFICATION	0.0012728492107732207	DEFECT
// read-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/* $+: string matches last paren. */	WITHOUT_CLASSIFICATION	0.9999344270111109	WITHOUT_CLASSIFICATION	6.55729888891019E-5	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999761907990279	WITHOUT_CLASSIFICATION	2.3809200972096234E-4	DEFECT
/* should alter global state */	WITHOUT_CLASSIFICATION	0.999761907990279	WITHOUT_CLASSIFICATION	2.3809200972096234E-4	DEFECT
// Ruby code frequently uses a platform check to choose "NUL:" on windows // but since that check doesn't work well on JRuby, we help it out	WITHOUT_CLASSIFICATION	0.9998818018063096	WITHOUT_CLASSIFICATION	1.1819819369032549E-4	DEFECT
/* 10! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
//            case RESCUENODE: return buildRescue(node, m); // DEFERRED //            case RETRYNODE: return buildRetry(node, m); // DEFERRED // done	WITHOUT_CLASSIFICATION	0.9999661750882421	WITHOUT_CLASSIFICATION	3.3824911757808826E-5	DEFECT
// Is this instruction live or dead?  During optimization passes, if this instruction // causes no side-effects and the result of the instruction is not needed by anyone else, // we can remove this instruction altogether without affecting program correctness.	WITHOUT_CLASSIFICATION	0.9811959092952677	WITHOUT_CLASSIFICATION	0.01880409070473232	DEFECT
// all these types are immediately considered "defined"	WITHOUT_CLASSIFICATION	0.9999193072544216	WITHOUT_CLASSIFICATION	8.06927455783629E-5	DEFECT
// first, iterate over all required args	WITHOUT_CLASSIFICATION	0.999738485027395	WITHOUT_CLASSIFICATION	2.615149726049083E-4	DEFECT
// // Determine if the parameter might be passed as a 32bit int parameter. // This just applies to buffer/pointer types. //	WITHOUT_CLASSIFICATION	0.9991065604765399	WITHOUT_CLASSIFICATION	8.934395234601005E-4	DEFECT
//Keyword keyword = Keyword.getKeyword(tempVal, tempVal.length());	WITHOUT_CLASSIFICATION	0.9985169537655074	WITHOUT_CLASSIFICATION	0.0014830462344926176	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyLhs 496	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// initial size // state stack // value stack // current input // #tokens to shift	WITHOUT_CLASSIFICATION	0.9995825152524196	WITHOUT_CLASSIFICATION	4.1748474758045916E-4	DEFECT
// line 449	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 495	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// Management/monitoring	WITHOUT_CLASSIFICATION	0.9999777030985879	WITHOUT_CLASSIFICATION	2.2296901412111225E-5	DEFECT
// if we've found the last char of the separator, // and we've found at least as many characters as separator length, // and the last n characters of our buffer match the separator, we're done	WITHOUT_CLASSIFICATION	0.9999206851447299	WITHOUT_CLASSIFICATION	7.931485527011945E-5	DEFECT
/* 14! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// Process any set of annotations // No supported options	WITHOUT_CLASSIFICATION	0.999806459621857	WITHOUT_CLASSIFICATION	1.935403781430221E-4	DEFECT
// add to the jitted methods set	WITHOUT_CLASSIFICATION	0.9999197139111221	WITHOUT_CLASSIFICATION	8.028608887779936E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999353335530308	WITHOUT_CLASSIFICATION	6.466644696919405E-5	DEFECT
// extract item from array	WITHOUT_CLASSIFICATION	0.9999353335530308	WITHOUT_CLASSIFICATION	6.466644696919405E-5	DEFECT
//            case SCLASSNODE: return buildSClass(node, m); // DEFERRED // done // done // done // done // done // done // done // done //            case UNDEFNODE: return buildUndef(node, m); // DEFERRED // done //            case VALIASNODE: return buildVAlias(node, m); // DEFERRED // done // done	WITHOUT_CLASSIFICATION	0.9999661750882421	WITHOUT_CLASSIFICATION	3.382491175780877E-5	DEFECT
// // Adding a post-invoke for the cb result serves to both keep it alive // until after the function returns, and allows us to clean up the native // trampoline early, instead of letting them accumulate until a GC run //	WITHOUT_CLASSIFICATION	0.9994415098172006	WITHOUT_CLASSIFICATION	5.584901827993358E-4	DEFECT
/* The Java method doesn't care what class it is, but we need to               know what to convert it to, so we use the object's own class.               If that doesn't help, we use String to force a call to the               object's "to_s" method. */	WITHOUT_CLASSIFICATION	0.9999966218741531	WITHOUT_CLASSIFICATION	3.3781258470394833E-6	DEFECT
// index for the item	WITHOUT_CLASSIFICATION	0.9999699190794676	WITHOUT_CLASSIFICATION	3.0080920532451595E-5	DEFECT
// Atomic integers for symbol and method IDs	WITHOUT_CLASSIFICATION	0.9996737864013259	WITHOUT_CLASSIFICATION	3.262135986741166E-4	DEFECT
/* 18! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// If we have more than one arg, make sure the array created to contain them is not ObjectSpaced	WITHOUT_CLASSIFICATION	0.9915012356801851	WITHOUT_CLASSIFICATION	0.008498764319814922	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// set up a local IRuby variable	WITHOUT_CLASSIFICATION	0.9999437869288716	WITHOUT_CLASSIFICATION	5.6213071128250525E-5	DEFECT
// NOTE: if 's' happens to the a class, this is effectively an assignment of a class instance variable	WITHOUT_CLASSIFICATION	0.9999426652109014	WITHOUT_CLASSIFICATION	5.7334789098586465E-5	DEFECT
/*      * This method takes as input a map of operands to their values, and outputs     * the result of this instruction.     *     * If the value map provides a value for any of the instruction's operands     * the expectation is that the operand will be replaced with the simplified value.     * It is not required that it do so -- code correctness is not compromised by failure     * to simplify.     *     * @param valueMap Mapping from operands to their simplified values     * @returns simplified result / output of this instruction     */	WITHOUT_CLASSIFICATION	0.9792252568702196	WITHOUT_CLASSIFICATION	0.020774743129780365	DEFECT
// Can't support the rest with Java	WITHOUT_CLASSIFICATION	0.9999432044065277	WITHOUT_CLASSIFICATION	5.679559347227469E-5	DEFECT
// An atomic long for generating DynamicMethod serial numbers	WITHOUT_CLASSIFICATION	0.9998473137371129	WITHOUT_CLASSIFICATION	1.526862628871342E-4	DEFECT
// MRI behavior: always check whether the file is writable // or not, even if we are to write 0 bytes.	WITHOUT_CLASSIFICATION	0.9999727605478564	WITHOUT_CLASSIFICATION	2.7239452143529002E-5	DEFECT
/* 22! */	WITHOUT_CLASSIFICATION	0.9999524448575449	WITHOUT_CLASSIFICATION	4.755514245518679E-5	DEFECT
// attribute set.	WITHOUT_CLASSIFICATION	0.9999831613199134	WITHOUT_CLASSIFICATION	1.683868008660487E-5	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// grab nil for local variables	WITHOUT_CLASSIFICATION	0.9997546604420089	WITHOUT_CLASSIFICATION	2.453395579910685E-4	DEFECT
// fill in all vars with nil so compiler is happy about future accesses	WITHOUT_CLASSIFICATION	0.9999245496994549	WITHOUT_CLASSIFICATION	7.545030054511752E-5	DEFECT
// Build a new class and add it to the current scope (could be a script / module / class)	WITHOUT_CLASSIFICATION	0.9998981833915366	WITHOUT_CLASSIFICATION	1.0181660846334156E-4	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999193817189015	WITHOUT_CLASSIFICATION	8.061828109851925E-5	DEFECT
// ---------- These methods below are used during compile-time optimizations ------- 	WITHOUT_CLASSIFICATION	0.9999193817189015	WITHOUT_CLASSIFICATION	8.061828109851925E-5	DEFECT
// AF_INET	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
//////////////////////////////////////////////////////////////////////////// // Now we provide default impls of a number of signatures. For each arity, // we first generate a non-block version of the method, which just adds // NULL_BLOCK and re-calls, allowing e.g. compiled code, which always can // potentially take a block, to only generate the block-receiving signature // and still avoid arg boxing. // // We then provide default implementations of each block-accepting method // that in turn call the IRubyObject[]+Block version of call. This then // finally falls back on the minimum implementation requirement for // dynamic method handles. ////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9628470903225603	WITHOUT_CLASSIFICATION	0.03715290967743961	DEFECT
// Because we implement Java interfaces now, we need a new === that's // aware of those additional "virtual" supertypes	WITHOUT_CLASSIFICATION	0.9999938741847085	WITHOUT_CLASSIFICATION	6.1258152914171616E-6	DEFECT
// BASE64	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
/* note nemes_gamma can return Double.POSITIVE_INFINITY or Double.NEGATIVE_INFINITY         * when value is an integer less than 1.         * We treat 0 as a special case to avoid Domain error.         */	WITHOUT_CLASSIFICATION	0.9998332366088609	WITHOUT_CLASSIFICATION	1.6676339113910735E-4	DEFECT
// element set	WITHOUT_CLASSIFICATION	0.9999946503541347	WITHOUT_CLASSIFICATION	5.349645865319187E-6	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9972492547451464	WITHOUT_CLASSIFICATION	0.002750745254853675	DEFECT
// visit a label to start scoping for local vars in this method	WITHOUT_CLASSIFICATION	0.9972492547451464	WITHOUT_CLASSIFICATION	0.002750745254853675	DEFECT
// temp locals must start after last real local	WITHOUT_CLASSIFICATION	0.9996999436394829	WITHOUT_CLASSIFICATION	3.0005636051709604E-4	DEFECT
// SSS: Looks like we receive the arg in buildBlockArgsAssignment via the IterNode // We won't get here for argument receives!  So, buildDasgn is called for // assignments to block variables within a block.  As far as the IR is concerned, // this is just a simple copy	WITHOUT_CLASSIFICATION	0.9999505877534335	WITHOUT_CLASSIFICATION	4.9412246566425914E-5	DEFECT
// getSimplifiedOperand returns the value of this operand, fully simplified // getSimplifiedOperand returns the operand in a form that can be materialized into bytecode, if it cannot be completely optimized away // // The value is used during optimizations and propagated through the IR.  But, it is thrown away after that. // But, the operand form is used for constructing the compound objects represented by the operand. // // Example: a = [1], b = [3,4], c = [a,b], d = [2,c] //   -- getValue(c) = [1,[3,4]];     getSimplifiedOperand(c) = [1, b] //   -- getValue(d) = [2,[1,[3,4]]]; getSimplifiedOperand(d) = [2, c] // // Note that a,b,c,d are all objects, and c has a reference to objects a and b, and d has a reference to c. // So, if contents of a or b is modified, the "simplified value"s of c and d also change!  This difference // is captured by these two methods.	WITHOUT_CLASSIFICATION	0.9812341243063254	WITHOUT_CLASSIFICATION	0.018765875693674623	DEFECT
//IRubyObject protocol = args[4];	WITHOUT_CLASSIFICATION	0.9983397203516692	WITHOUT_CLASSIFICATION	0.0016602796483307623	DEFECT
// promise to implement three to N with block	WITHOUT_CLASSIFICATION	0.9999252559676434	WITHOUT_CLASSIFICATION	7.474403235664276E-5	DEFECT
// Ruby's OMG capture all source in a Hash feature // Add each line to buffer when encountering newline or EOF for first time.	WITHOUT_CLASSIFICATION	0.9970713818829297	WITHOUT_CLASSIFICATION	0.002928618117070493	DEFECT
// carriage return	WITHOUT_CLASSIFICATION	0.999994660164342	WITHOUT_CLASSIFICATION	5.33983565798728E-6	DEFECT
//yyDgoto 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// discarding a token does not change stack	WITHOUT_CLASSIFICATION	0.9969262219997947	WITHOUT_CLASSIFICATION	0.0030737780002052513	DEFECT
// String construction routines by NOT byte[] buffer and making the target String shared 	WITHOUT_CLASSIFICATION	0.9999391482601105	WITHOUT_CLASSIFICATION	6.085173988957626E-5	DEFECT
// insert all nodes in sequence, hash them in the final instruction // KEY	WITHOUT_CLASSIFICATION	0.9995055709479843	WITHOUT_CLASSIFICATION	4.944290520156542E-4	DEFECT
// return last value from execution	WITHOUT_CLASSIFICATION	0.9995969216769682	WITHOUT_CLASSIFICATION	4.0307832303177263E-4	DEFECT
// we append an index to ensure two identical method names will not conflict	WITHOUT_CLASSIFICATION	0.9939689578882236	WITHOUT_CLASSIFICATION	0.006031042111776421	DEFECT
// Basic Block id // CFG that this basic block belongs to // All basic blocks have a starting label // List of non-label instructions	WITHOUT_CLASSIFICATION	0.999720517706526	WITHOUT_CLASSIFICATION	2.794822934739396E-4	DEFECT
// otherwise one key has been selected (ours) so we get the channel and hand it off	WITHOUT_CLASSIFICATION	0.9999985806964646	WITHOUT_CLASSIFICATION	1.4193035353772921E-6	DEFECT
// For all uninitialized specific arities, we defer to the "n" method which // should raise appropriate error in all cases.	WITHOUT_CLASSIFICATION	0.9996108435102047	WITHOUT_CLASSIFICATION	3.891564897952956E-4	DEFECT
// implement is called to force this class to create stubs for all // methods in the given interface, so they'll show up in the list // of methods and be invocable without passing through method_missing	WITHOUT_CLASSIFICATION	0.9999704963437228	WITHOUT_CLASSIFICATION	2.9503656277159646E-5	DEFECT
// CASE IR instructions are dummy instructions  // -- all when/then clauses have been converted into if-then-else blocks	WITHOUT_CLASSIFICATION	0.9999063574422106	WITHOUT_CLASSIFICATION	9.364255778945381E-5	DEFECT
// check arity in the variable-arity version	WITHOUT_CLASSIFICATION	0.9996152287596584	WITHOUT_CLASSIFICATION	3.847712403415892E-4	DEFECT
// leave it null and fall back on our normal invocation logic	WITHOUT_CLASSIFICATION	0.9998441596788881	WITHOUT_CLASSIFICATION	1.5584032111189776E-4	DEFECT
// Build closure body and return the result of the closure	WITHOUT_CLASSIFICATION	0.9999491479543265	WITHOUT_CLASSIFICATION	5.085204567333084E-5	DEFECT
// for each simple method name, implement the complex methods, calling the simple version	WITHOUT_CLASSIFICATION	0.9997764182070183	WITHOUT_CLASSIFICATION	2.2358179298166355E-4	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Need to initialize	WITHOUT_CLASSIFICATION	0.9999570754582842	WITHOUT_CLASSIFICATION	4.2924541715813345E-5	DEFECT
// Install direct java methods with mangled name so 'send' can call them directly.	WITHOUT_CLASSIFICATION	0.9999852896685171	WITHOUT_CLASSIFICATION	1.4710331482932862E-5	DEFECT
/* fall through */	WITHOUT_CLASSIFICATION	0.9999865028548509	WITHOUT_CLASSIFICATION	1.349714514900051E-5	DEFECT
// deal with case when "other" is not a string	WITHOUT_CLASSIFICATION	0.9992405031063971	WITHOUT_CLASSIFICATION	7.594968936028806E-4	DEFECT
// All errors to sysread should be SystemCallErrors, but on a closed stream // Ruby returns an IOError.  Java throws same exception for all errors so // we resort to this hack...	WITHOUT_CLASSIFICATION	0.9997944073779381	WITHOUT_CLASSIFICATION	2.0559262206187325E-4	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// in method body with no containing loop, issue jump error // load runtime and value, issue jump error	WITHOUT_CLASSIFICATION	0.9843888227225511	WITHOUT_CLASSIFICATION	0.015611177277448823	DEFECT
// store argument count information into scope	WITHOUT_CLASSIFICATION	0.9996701072588298	WITHOUT_CLASSIFICATION	3.2989274117029867E-4	DEFECT
// the load method is used for loading as a top-level script, and prepares appropriate scoping around the code	WITHOUT_CLASSIFICATION	0.9999036616385981	WITHOUT_CLASSIFICATION	9.633836140186866E-5	DEFECT
// First, build assignments for specific named arguments	WITHOUT_CLASSIFICATION	0.9997681085886259	WITHOUT_CLASSIFICATION	2.3189141137408575E-4	DEFECT
//        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3) { throw fail(); } //        public Object invoke(Object receiver, Object arg0, Object arg1, Object arg2, Object arg3, Object arg4) { throw fail(); }	WITHOUT_CLASSIFICATION	0.9981901922309843	WITHOUT_CLASSIFICATION	0.0018098077690156971	DEFECT
// get current context	WITHOUT_CLASSIFICATION	0.9999354397306995	WITHOUT_CLASSIFICATION	6.456026930051061E-5	DEFECT
// octal constant	WITHOUT_CLASSIFICATION	0.9999844532893722	WITHOUT_CLASSIFICATION	1.5546710627713348E-5	DEFECT
// read	WITHOUT_CLASSIFICATION	0.9999533498824779	WITHOUT_CLASSIFICATION	4.665011752200972E-5	DEFECT
// this really needs to be inlined here	WITHOUT_CLASSIFICATION	0.9979022833992801	WITHOUT_CLASSIFICATION	0.0020977166007198986	DEFECT
// it doesn't handle special cases	WITHOUT_CLASSIFICATION	0.9998484791943337	WITHOUT_CLASSIFICATION	1.515208056662281E-4	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
// If reciever is self then we do the call the same way as vcall	WITHOUT_CLASSIFICATION	0.9999925035863457	WITHOUT_CLASSIFICATION	7.496413654260429E-6	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// ignore; we won't use invokedynamic	WITHOUT_CLASSIFICATION	0.9996722466623235	WITHOUT_CLASSIFICATION	3.277533376765415E-4	DEFECT
// at end	WITHOUT_CLASSIFICATION	0.9999181478311309	WITHOUT_CLASSIFICATION	8.185216886909407E-5	DEFECT
/* bang: true, no match, no substitution */	WITHOUT_CLASSIFICATION	0.999933859051632	WITHOUT_CLASSIFICATION	6.614094836793125E-5	DEFECT
// save blocking state	WITHOUT_CLASSIFICATION	0.9999786727986413	WITHOUT_CLASSIFICATION	2.1327201358641398E-5	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*receiver*/	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
// invoke static __file__	WITHOUT_CLASSIFICATION	0.9999788495012343	WITHOUT_CLASSIFICATION	2.1150498765752294E-5	DEFECT
// rest of the argument array!	WITHOUT_CLASSIFICATION	0.9999874953810028	WITHOUT_CLASSIFICATION	1.2504618997127248E-5	DEFECT
// fall back on empty env when security disallows environment var access (like in an applet)	WITHOUT_CLASSIFICATION	0.9998481724624807	WITHOUT_CLASSIFICATION	1.5182753751932717E-4	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9989257942840087	WITHOUT_CLASSIFICATION	0.001074205715991227	DEFECT
// UndefinedMethod should be immutable	WITHOUT_CLASSIFICATION	0.9989257942840087	WITHOUT_CLASSIFICATION	0.001074205715991227	DEFECT
// load null block	WITHOUT_CLASSIFICATION	0.9999903187394943	WITHOUT_CLASSIFICATION	9.681260505748996E-6	DEFECT
// This point is only reached if there was an exception handler installed.	WITHOUT_CLASSIFICATION	0.9991040383688379	WITHOUT_CLASSIFICATION	8.959616311620955E-4	DEFECT
// nothing else to here - the module version will be // included in the class.	WITHOUT_CLASSIFICATION	0.9931376237926789	WITHOUT_CLASSIFICATION	0.006862376207321109	DEFECT
// JRUBY-1000, fail early when attempting to subclass a final Java class; // solved here by adding an exception-throwing "inherited"	WITHOUT_CLASSIFICATION	0.9998190488997377	WITHOUT_CLASSIFICATION	1.8095110026240542E-4	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999943356347879	WITHOUT_CLASSIFICATION	5.664365212122701E-6	DEFECT
// block given	WITHOUT_CLASSIFICATION	0.9999943356347879	WITHOUT_CLASSIFICATION	5.664365212122701E-6	DEFECT
// Translate ret = (a || b) to ret = (a ? true : b) as follows //  //    v1 = -- build(a) -- //       OPT: ret can be set to v1, but effectively v1 is true if we take the branch to L. //            while this info can be inferred by using attributes, why bother if we can do this? //    ret = true //    beq(v1, true, L) //    v2 = -- build(b) -- //    ret = v2 // L: //	WITHOUT_CLASSIFICATION	0.9999614422464631	WITHOUT_CLASSIFICATION	3.8557753536913996E-5	DEFECT
// Initial precision is that of double numbers 2^63/2 ~ 4E18 // 63-1 an even number of number bits // precision seems 16 to 18 digits	WITHOUT_CLASSIFICATION	0.9959275635481349	WITHOUT_CLASSIFICATION	0.004072436451865067	DEFECT
// We can callsite cache const_missing if we want	WITHOUT_CLASSIFICATION	0.9992030238950285	WITHOUT_CLASSIFICATION	7.969761049714787E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*self*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// declare the field	WITHOUT_CLASSIFICATION	0.9999936567221671	WITHOUT_CLASSIFICATION	6.343277832966636E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999900616149825	WITHOUT_CLASSIFICATION	9.938385017491593E-6	DEFECT
// Assign the values.	WITHOUT_CLASSIFICATION	0.9999900616149825	WITHOUT_CLASSIFICATION	9.938385017491593E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999950838594996	WITHOUT_CLASSIFICATION	4.916140500371458E-6	DEFECT
// check arity	WITHOUT_CLASSIFICATION	0.9999950838594996	WITHOUT_CLASSIFICATION	4.916140500371458E-6	DEFECT
// create the class	WITHOUT_CLASSIFICATION	0.9999968195346773	WITHOUT_CLASSIFICATION	3.1804653225607236E-6	DEFECT
// called only by initializing thread; no synchronization required	WITHOUT_CLASSIFICATION	0.9998925729678274	WITHOUT_CLASSIFICATION	1.0742703217257081E-4	DEFECT
// No hex value after the 'x'.	WITHOUT_CLASSIFICATION	0.9999795869195492	WITHOUT_CLASSIFICATION	2.0413080450854013E-5	DEFECT
// 1.8	WITHOUT_CLASSIFICATION	0.9999505963490023	WITHOUT_CLASSIFICATION	4.940365099770698E-5	DEFECT
/* 6:tags 16:addr 1:eos */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
// Let m be the exact digits precision in an earlier! loop	WITHOUT_CLASSIFICATION	0.9998192916177172	WITHOUT_CLASSIFICATION	1.8070838228275636E-4	DEFECT
// For 'foo()'.  Args are only significant in maintaining backwards compatible AST structure	WITHOUT_CLASSIFICATION	0.9999008453101319	WITHOUT_CLASSIFICATION	9.915468986812413E-5	DEFECT
// block	WITHOUT_CLASSIFICATION	0.9999780389477115	WITHOUT_CLASSIFICATION	2.1961052288431084E-5	DEFECT
// Label for the start of the method // Label for the end of the method	WITHOUT_CLASSIFICATION	0.9989506055856118	WITHOUT_CLASSIFICATION	0.0010493944143882758	DEFECT
// comparisons & checks // checks if the operand is non-null and non-false // EQQ a === call used only for its conditional results, as in case/when, begin/rescue, ...	WITHOUT_CLASSIFICATION	0.9999674745508325	WITHOUT_CLASSIFICATION	3.252544916754476E-5	DEFECT
// FIXME: JRUBY-3604	WITHOUT_CLASSIFICATION	0.9996535755306196	WITHOUT_CLASSIFICATION	3.464244693803953E-4	DEFECT
// invoke pre method stuff	WITHOUT_CLASSIFICATION	0.9999787349870591	WITHOUT_CLASSIFICATION	2.1265012940932123E-5	DEFECT
// all done with lookup attempts, release monitor	WITHOUT_CLASSIFICATION	0.9999154787917695	WITHOUT_CLASSIFICATION	8.452120823060096E-5	DEFECT
// allow proxy to be read without synchronization. if proxy // is under construction, only the building thread can see it.	WITHOUT_CLASSIFICATION	0.998041505081407	WITHOUT_CLASSIFICATION	0.0019584949185930353	DEFECT
// Create list of interface names to proxy (and make sure they really are interfaces) // Also build a hashcode from all classes to use for retrieving previously-created impl	WITHOUT_CLASSIFICATION	0.9993865280538332	WITHOUT_CLASSIFICATION	6.134719461667718E-4	DEFECT
// Construct local variables based on parameter names passed in	WITHOUT_CLASSIFICATION	0.9998163221706753	WITHOUT_CLASSIFICATION	1.8367782932470741E-4	DEFECT
// Value of "TZ" property is of a bit different format, // which confuses the Java's TimeZone.getTimeZone(id) method, // and so, we need to convert it.	WITHOUT_CLASSIFICATION	0.9993170624286721	WITHOUT_CLASSIFICATION	6.829375713279094E-4	DEFECT
// file given, use it and force it into binding	WITHOUT_CLASSIFICATION	0.9998526645417225	WITHOUT_CLASSIFICATION	1.4733545827746688E-4	DEFECT
// ensure the object is associated with the wrapper we found it in, // so that if it comes back we don't re-wrap it	WITHOUT_CLASSIFICATION	0.9999699045355269	WITHOUT_CLASSIFICATION	3.0095464473074676E-5	DEFECT
// return sqrt(squarD) with precision of rootMC	WITHOUT_CLASSIFICATION	0.9999180669409266	WITHOUT_CLASSIFICATION	8.193305907355146E-5	DEFECT
// A scoped location of this variable (high 16 bits is how many scopes down and low 16 bits // is what index in the right scope to set the value.	WITHOUT_CLASSIFICATION	0.928022972443506	WITHOUT_CLASSIFICATION	0.07197702755649395	DEFECT
/*arg*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// Get a new label using the provided label prefix	WITHOUT_CLASSIFICATION	0.999987441055536	WITHOUT_CLASSIFICATION	1.2558944463960838E-5	DEFECT
// normal exit, perform finally and return	WITHOUT_CLASSIFICATION	0.9999365357882098	WITHOUT_CLASSIFICATION	6.346421179013902E-5	DEFECT
// coerce arguments	WITHOUT_CLASSIFICATION	0.9999841076111479	WITHOUT_CLASSIFICATION	1.5892388852101E-5	DEFECT
// 0.0 is ok // float range // inverted float range? // NaN // +infinity // -infinity	WITHOUT_CLASSIFICATION	0.9997003621428325	WITHOUT_CLASSIFICATION	2.9963785716736026E-4	DEFECT
/* expected */	WITHOUT_CLASSIFICATION	0.9999868221696506	WITHOUT_CLASSIFICATION	1.317783034930452E-5	DEFECT
// set this class's method names in var @__java_ovrd_methods if this // is the new class; otherwise, get method names from there if this is // a proxy superclass.	WITHOUT_CLASSIFICATION	0.9999797716982817	WITHOUT_CLASSIFICATION	2.0228301718251088E-5	DEFECT
/* ignore backslashed spaces in %w */	WITHOUT_CLASSIFICATION	0.9996750075581038	WITHOUT_CLASSIFICATION	3.24992441896217E-4	DEFECT
// Invert the sign, since TZ format and Java format // use opposite signs, sigh... Also, Java API requires // the sign to be always present, be it "+" or "-".	WITHOUT_CLASSIFICATION	0.9990910526935882	WITHOUT_CLASSIFICATION	9.089473064117909E-4	DEFECT
// no binding given, use 0 for both	WITHOUT_CLASSIFICATION	0.9998719065443106	WITHOUT_CLASSIFICATION	1.2809345568940534E-4	DEFECT
// <=> may return nil in many circumstances, e.g. 3 <=> NaN        	WITHOUT_CLASSIFICATION	0.9995384543576926	WITHOUT_CLASSIFICATION	4.6154564230744345E-4	DEFECT
// use numbered access method	WITHOUT_CLASSIFICATION	0.9999780777407818	WITHOUT_CLASSIFICATION	2.192225921822381E-5	DEFECT
// Always use "GMT" since that's required by Java API.	WITHOUT_CLASSIFICATION	0.9999300686523394	WITHOUT_CLASSIFICATION	6.993134766064251E-5	DEFECT
// ignore if it's not a global var	WITHOUT_CLASSIFICATION	0.9987371350880024	WITHOUT_CLASSIFICATION	0.0012628649119976374	DEFECT
// The dataStruct is a place where custom information can be // contained for core implementations that doesn't necessarily // want to go to the trouble of creating a subclass of // RubyObject. The OpenSSL implementation uses this heavily to // save holder objects containing Java cryptography objects. // Java integration uses this to store the Java object ref. //protected transient Object dataStruct;	WITHOUT_CLASSIFICATION	0.9962093960352039	WITHOUT_CLASSIFICATION	0.0037906039647961315	DEFECT
// Remaining arguments are for the script itself	WITHOUT_CLASSIFICATION	0.9999688239043528	WITHOUT_CLASSIFICATION	3.1176095647197174E-5	DEFECT
// arg grouping, use slower arg walking logic	WITHOUT_CLASSIFICATION	0.9998192510716051	WITHOUT_CLASSIFICATION	1.807489283948101E-4	DEFECT
// build scope names string	WITHOUT_CLASSIFICATION	0.9999896933610727	WITHOUT_CLASSIFICATION	1.0306638927393312E-5	DEFECT
// Tries to load at compile-time the constant referred to by 'constRef'. // This might be possible if the constant is defined and is not a forward reference // to a value that will be defined later in the class.	WITHOUT_CLASSIFICATION	0.5944493465043805	DEFECT	0.4055506534956196	WITHOUT_CLASSIFICATION
// Here we create an "anonymous" exception type used for unrolling the stack. // MRI creates a new one for *every call* to timeout, which can be costly. // We opt to use a single exception type for all cases to avoid this overhead.	WITHOUT_CLASSIFICATION	0.9998820528425684	WITHOUT_CLASSIFICATION	1.1794715743172247E-4	DEFECT
// finally	WITHOUT_CLASSIFICATION	0.9999508282495598	WITHOUT_CLASSIFICATION	4.917175044025551E-5	DEFECT
// MRI behavior: With TZ equal to "GMT" or "UTC", Time.now // is *NOT* considered as a proper GMT/UTC time: //   ENV['TZ']="GMT" //   Time.now.gmt? ==> false //   ENV['TZ']="UTC" //   Time.now.utc? ==> false // Hence, we need to adjust for that.	WITHOUT_CLASSIFICATION	0.9996005816091895	WITHOUT_CLASSIFICATION	3.994183908104682E-4	DEFECT
// ?l  | boolean | True if file1 exists and is a symbolic link	WITHOUT_CLASSIFICATION	0.9998336736892088	WITHOUT_CLASSIFICATION	1.663263107911594E-4	DEFECT
// This try/catch is to allow failing over to the "commands" logic // when running from within a jruby-complete jar file, which has // jruby.home = a jar file URL that does not resolve correctly with // JRubyFile.create.	WITHOUT_CLASSIFICATION	0.9421185012548908	WITHOUT_CLASSIFICATION	0.05788149874510925	DEFECT
// Each root node has a top-level scope that we need to push	WITHOUT_CLASSIFICATION	0.9997839153440662	WITHOUT_CLASSIFICATION	2.160846559337965E-4	DEFECT
// specific arity	WITHOUT_CLASSIFICATION	0.9999874378037164	WITHOUT_CLASSIFICATION	1.2562196283629295E-5	DEFECT
// In the case of two arguments, MRI will discard the portion of // the first argument after a decimal point (i.e., "floor"). // However in the case of a single argument, any portion after // the decimal point is honored.	WITHOUT_CLASSIFICATION	0.9996911972418139	WITHOUT_CLASSIFICATION	3.088027581861722E-4	DEFECT
// ?w  | boolean | True if file1 exists and is writable by effective uid/gid	WITHOUT_CLASSIFICATION	0.9997536826494401	WITHOUT_CLASSIFICATION	2.4631735055989044E-4	DEFECT
// // COMMON VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
/*    @JRubyMethod    public IRubyObject to_proc() {        return RubyProc.newProc(getRuntime(),                                CallBlock.newCallClosure(this, getRuntime().getSymbol(), Arity.noArguments(), new ToProcCallback(this), getRuntime().getCurrentContext()),                                Block.Type.PROC);    }    */	WITHOUT_CLASSIFICATION	0.9999809387360011	WITHOUT_CLASSIFICATION	1.906126399879704E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999981400426085	WITHOUT_CLASSIFICATION	1.8599573915121836E-5	DEFECT
// let RescuedBlock continue	WITHOUT_CLASSIFICATION	0.999981400426085	WITHOUT_CLASSIFICATION	1.8599573915121836E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999348634897856	WITHOUT_CLASSIFICATION	6.51365102143918E-5	DEFECT
// do nothing, fall back on default compiler below	WITHOUT_CLASSIFICATION	0.9999348634897856	WITHOUT_CLASSIFICATION	6.51365102143918E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999210914849765	WITHOUT_CLASSIFICATION	7.89085150235459E-5	DEFECT
// Should we run this pass on the current scope before running it on nested scopes?	WITHOUT_CLASSIFICATION	0.9999210914849765	WITHOUT_CLASSIFICATION	7.89085150235459E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999014244893492	WITHOUT_CLASSIFICATION	9.857551065084699E-5	DEFECT
/*  ================     *  Utility Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999014244893492	WITHOUT_CLASSIFICATION	9.857551065084699E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// write-volatile	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999750925371244	WITHOUT_CLASSIFICATION	2.490746287559911E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999750925371244	WITHOUT_CLASSIFICATION	2.490746287559911E-4	DEFECT
// if more than 4 locals, get the locals array too	WITHOUT_CLASSIFICATION	0.999750925371244	WITHOUT_CLASSIFICATION	2.490746287559911E-4	DEFECT
// Add property name aliases	WITHOUT_CLASSIFICATION	0.9999898582147717	WITHOUT_CLASSIFICATION	1.014178522828357E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
/*  ================     *  Instance Methods     *  ================      */	WITHOUT_CLASSIFICATION	0.9999263044113652	WITHOUT_CLASSIFICATION	7.369558863485323E-5	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9997346233771646	WITHOUT_CLASSIFICATION	2.6537662283548523E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9997346233771646	WITHOUT_CLASSIFICATION	2.6537662283548523E-4	DEFECT
// @JRubyMethod(name = "new", meta = true, visibility = Visibility.PRIVATE)	WITHOUT_CLASSIFICATION	0.9997346233771646	WITHOUT_CLASSIFICATION	2.6537662283548523E-4	DEFECT
// // INTERNAL VARIABLE METHODS //	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// backspace	WITHOUT_CLASSIFICATION	0.9999840378271664	WITHOUT_CLASSIFICATION	1.5962172833696157E-5	DEFECT
//yySindex 889	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
//yyGindex 136	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/* package-private */	WITHOUT_CLASSIFICATION	0.9999785373909404	WITHOUT_CLASSIFICATION	2.1462609059603423E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999859781908583	WITHOUT_CLASSIFICATION	1.4021809141692118E-5	DEFECT
// fall through	WITHOUT_CLASSIFICATION	0.9999859781908583	WITHOUT_CLASSIFICATION	1.4021809141692118E-5	DEFECT
// MRI issuses warning here on (RBIGNUM(x)->len * SIZEOF_BDIGITS * yy > 1024*1024)	WITHOUT_CLASSIFICATION	0.9999814486314468	WITHOUT_CLASSIFICATION	1.8551368553189556E-5	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9998646755786067	WITHOUT_CLASSIFICATION	1.3532442139337517E-4	DEFECT
// interrupt the target thread in case it's blocking or waiting // WARNING: We no longer interrupt the target thread, since this usually means // interrupting IO and with NIO that means the channel is no longer usable. // We either need a new way to handle waking a target thread that's waiting // on IO, or we need to accept that we can't wake such threads and must wait // for them to complete their operation. //threadImpl.interrupt();	WITHOUT_CLASSIFICATION	0.9998646755786067	WITHOUT_CLASSIFICATION	1.3532442139337517E-4	DEFECT
/**      * Nested class whose instances act as thunks reacting to to_str method     * called from (Exception#to_str, Exception#message)     * MRI equivalent: rb_cNameErrorMesg, class name: "message", construction method: "!",     * to_str implementation: "name_err_mesg_to_str"     *     * TODO: this class should not be lookupable     */	WITHOUT_CLASSIFICATION	0.8445529161662064	WITHOUT_CLASSIFICATION	0.1554470838337936	DEFECT
// We need to guarantee that any existing reads of old Map can //  proceed. So we cannot yet null out each bin.	WITHOUT_CLASSIFICATION	0.998773560179051	WITHOUT_CLASSIFICATION	0.0012264398209489854	DEFECT
// The name of this source (e.g. a filename: foo.rb)	WITHOUT_CLASSIFICATION	0.9998021623421633	WITHOUT_CLASSIFICATION	1.9783765783667947E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// This should only be called by this and RubyFile. // It allows this object to be created without a IOHandler.	WITHOUT_CLASSIFICATION	0.9894416594766484	WITHOUT_CLASSIFICATION	0.010558340523351594	DEFECT
// We yield here to hopefully permit the target thread to schedule // MRI immediately schedules it, so this is close but not exact	WITHOUT_CLASSIFICATION	0.9998749171349004	WITHOUT_CLASSIFICATION	1.2508286509960352E-4	DEFECT
// note that addMethod now does its own put, so any change made to // functionality here should be made there as well 	WITHOUT_CLASSIFICATION	0.999991457478196	WITHOUT_CLASSIFICATION	8.54252180414551E-6	DEFECT
/* Currently dead code, but useful when we figure out how to actually perform translit.    private static boolean isTranslit(String encoding) {        return encoding.toLowerCase().indexOf(TRANSLIT) != -1 ? true : false;    }*/	WITHOUT_CLASSIFICATION	0.9999928535941249	WITHOUT_CLASSIFICATION	7.14640587512716E-6	DEFECT
// empirically it appears that to_ary coersions always return array or nil, so this // should always be an array by now.	WITHOUT_CLASSIFICATION	0.9996111517103992	WITHOUT_CLASSIFICATION	3.888482896009355E-4	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// EQ == 0 (i.e. false)	WITHOUT_CLASSIFICATION	0.9999836425503378	WITHOUT_CLASSIFICATION	1.635744966219403E-5	DEFECT
// No seconds, just yield	WITHOUT_CLASSIFICATION	0.9999905639800513	WITHOUT_CLASSIFICATION	9.436019948675235E-6	DEFECT
// finally handling for abnormal exit	WITHOUT_CLASSIFICATION	0.9997175473213712	WITHOUT_CLASSIFICATION	2.824526786288097E-4	DEFECT
// if it's an inner class and it's not public, we can't access it; // skip population of declared elements	WITHOUT_CLASSIFICATION	0.9992262429711094	WITHOUT_CLASSIFICATION	7.737570288906594E-4	DEFECT
// getFoo      => foo // getFoo(int) => foo(int)	WITHOUT_CLASSIFICATION	0.9996740528192418	WITHOUT_CLASSIFICATION	3.2594718075824647E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// MRI behavior on Windows: it treats '/' as a root of // a current drive (but only if SINGLE slash is present!): // E.g., if current work directory is // 'D:/home/directory', then '/' means 'D:/'. // // Basically, '/path' is treated as a *RELATIVE* path, // relative to the current drive. '//path' is treated // as absolute one.	WITHOUT_CLASSIFICATION	0.9980003259294591	WITHOUT_CLASSIFICATION	0.0019996740705409085	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// not reached	WITHOUT_CLASSIFICATION	0.9997352151937933	WITHOUT_CLASSIFICATION	2.647848062066363E-4	DEFECT
// This is needed when the enclosing class or module is a singleton. // In that case, we generated a name such as null::Foo, which broke  // Marshalling, among others. The correct thing to do in this situation  // is to insert the generate the name of form #<Class:01xasdfasd> if  // it's a singleton module/class, which this code accomplishes.	WITHOUT_CLASSIFICATION	0.998645933717622	WITHOUT_CLASSIFICATION	0.0013540662823780403	DEFECT
// this is the only case it might be null here (in MetaClass construction)	WITHOUT_CLASSIFICATION	0.9997360775494699	WITHOUT_CLASSIFICATION	2.639224505300325E-4	DEFECT
// EQ == 0 (i.e. false) // pop the extra result and replace with the send part of the AND	WITHOUT_CLASSIFICATION	0.9999811756852487	WITHOUT_CLASSIFICATION	1.8824314751331154E-5	DEFECT
// get "self"	WITHOUT_CLASSIFICATION	0.9999821921052684	WITHOUT_CLASSIFICATION	1.7807894731619585E-5	DEFECT
// No timeout in critical section	WITHOUT_CLASSIFICATION	0.9996579763615454	WITHOUT_CLASSIFICATION	3.4202363845464804E-4	DEFECT
// rethrow exception // rethrow it	WITHOUT_CLASSIFICATION	0.9991363314484546	WITHOUT_CLASSIFICATION	8.636685515454395E-4	DEFECT
// only public methods	WITHOUT_CLASSIFICATION	0.9999795909009557	WITHOUT_CLASSIFICATION	2.04090990443911E-5	DEFECT
// If already inspecting, there is no need to register/unregister again.	WITHOUT_CLASSIFICATION	0.9999531244978058	WITHOUT_CLASSIFICATION	4.687550219429348E-5	DEFECT
// First try to use drive letter from supplied dir value, // then try current work dir.	WITHOUT_CLASSIFICATION	0.999144457965928	WITHOUT_CLASSIFICATION	8.555420340719484E-4	DEFECT
// JRUBY-2435: Aliasing eval and other "special" methods should display a warning // We warn because we treat certain method names as "special" for purposes of // optimization. Hopefully this will be enough to convince people not to alias // them.	WITHOUT_CLASSIFICATION	0.6376651402893384	WITHOUT_CLASSIFICATION	0.3623348597106617	DEFECT
// generate a real method signature for the method, with to/from coercions	WITHOUT_CLASSIFICATION	0.9999338949135154	WITHOUT_CLASSIFICATION	6.610508648459931E-5	DEFECT
// block argument to the method // closure present // class present // method table mutations, def, defs, undef, alias // likely call to eval // makes calls that are aware of the frame // makes calls that are aware of the frame's self // makes calls that are aware of the frame's visibility // makes calls that are aware of the frame's block // makes calls that are aware of the frame's name // makes calls that set or get backref // makes calls that set or get lastline // makes calls that are aware of the frame's class // optional arguments to the method // rest arg to the method // makes calls that are aware of the scope // makes a zero-argument super call // accesses or sets constants // accesses or sets class variables // makes normal super call // contains a retry	WITHOUT_CLASSIFICATION	0.9999996820840733	WITHOUT_CLASSIFICATION	3.179159266985269E-7	DEFECT
// // Add aliases in Type::*, NativeType::* and FFI::TYPE_* //	WITHOUT_CLASSIFICATION	0.9998296528468387	WITHOUT_CLASSIFICATION	1.7034715316124413E-4	DEFECT
// Create constants for flock	WITHOUT_CLASSIFICATION	0.9999852822397638	WITHOUT_CLASSIFICATION	1.4717760236204454E-5	DEFECT
// double-testing args.length here, but it avoids duplicating the proc-setup code in two places	WITHOUT_CLASSIFICATION	0.999988117600246	WITHOUT_CLASSIFICATION	1.1882399754065688E-5	DEFECT
// indices for temp values	WITHOUT_CLASSIFICATION	0.9999794073338499	WITHOUT_CLASSIFICATION	2.0592666150070773E-5	DEFECT
// a while node could receive non-local flow control from any of these: // * a closure within the loop // * an eval within the loop // * a block-arg-based proc called within the loop	WITHOUT_CLASSIFICATION	0.9999963183557836	WITHOUT_CLASSIFICATION	3.6816442163070273E-6	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998985414044422	WITHOUT_CLASSIFICATION	1.0145859555781287E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998985414044422	WITHOUT_CLASSIFICATION	1.0145859555781287E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998985414044422	WITHOUT_CLASSIFICATION	1.0145859555781287E-4	DEFECT
// Done with closure compilation	WITHOUT_CLASSIFICATION	0.9998985414044422	WITHOUT_CLASSIFICATION	1.0145859555781287E-4	DEFECT
// snapshot of contents of directory // current position in directory	WITHOUT_CLASSIFICATION	0.9999598959335095	WITHOUT_CLASSIFICATION	4.010406649060512E-5	DEFECT
// Exclusive locks in Java require the channel to be writable, otherwise // an exception is thrown (terminating JRuby execution). // But flock behavior of MRI is that it allows // exclusive locks even on non-writable file. So we convert exclusive // lock to shared lock if the channel is not writable, to better match // the MRI behavior.	WITHOUT_CLASSIFICATION	0.9453036710412951	WITHOUT_CLASSIFICATION	0.05469632895870486	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9998985073976506	WITHOUT_CLASSIFICATION	1.014926023493746E-4	DEFECT
// explode array, it's an internal "args" array	WITHOUT_CLASSIFICATION	0.9998985073976506	WITHOUT_CLASSIFICATION	1.014926023493746E-4	DEFECT
// set self to the class	WITHOUT_CLASSIFICATION	0.9999959918759588	WITHOUT_CLASSIFICATION	4.008124041167951E-6	DEFECT
/* ---------- Public fields, methods --------- */	WITHOUT_CLASSIFICATION	0.9998903750555876	WITHOUT_CLASSIFICATION	1.0962494441236092E-4	DEFECT
// // A specific version was requested - use as is for search //	WITHOUT_CLASSIFICATION	0.9981204229901594	WITHOUT_CLASSIFICATION	0.0018795770098406607	DEFECT
// zero args, no block; do nothing	WITHOUT_CLASSIFICATION	0.999984936502005	WITHOUT_CLASSIFICATION	1.5063497995017204E-5	DEFECT
// we need to collect all methods, though we'll only // install the ones that are named in this class	WITHOUT_CLASSIFICATION	0.9999511559118108	WITHOUT_CLASSIFICATION	4.8844088189208156E-5	DEFECT
// Store each line into this list if not null.	WITHOUT_CLASSIFICATION	0.9977538195250544	WITHOUT_CLASSIFICATION	0.0022461804749455906	DEFECT
// Portion of line right after beginning marker	WITHOUT_CLASSIFICATION	0.9982813777510322	WITHOUT_CLASSIFICATION	0.001718622248967814	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999968418398412	WITHOUT_CLASSIFICATION	3.158160158802449E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999968418398412	WITHOUT_CLASSIFICATION	3.158160158802449E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999968418398412	WITHOUT_CLASSIFICATION	3.158160158802449E-6	DEFECT
// do nothing	WITHOUT_CLASSIFICATION	0.9999968418398412	WITHOUT_CLASSIFICATION	3.158160158802449E-6	DEFECT
// If an IO exception occurs (something odd, but possible) // A directory may return null.	WITHOUT_CLASSIFICATION	0.9999953900376893	WITHOUT_CLASSIFICATION	4.609962310706329E-6	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9988598175091176	WITHOUT_CLASSIFICATION	0.001140182490882353	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9988598175091176	WITHOUT_CLASSIFICATION	0.001140182490882353	DEFECT
// Check the visibility of the previous frame, which will be the frame in which the class is being eval'ed	WITHOUT_CLASSIFICATION	0.9988598175091176	WITHOUT_CLASSIFICATION	0.001140182490882353	DEFECT
// use array as-is, it's a literal array	WITHOUT_CLASSIFICATION	0.999655198915971	WITHOUT_CLASSIFICATION	3.4480108402900163E-4	DEFECT
// finally with no exception	WITHOUT_CLASSIFICATION	0.9999824388900601	WITHOUT_CLASSIFICATION	1.756110993981297E-5	DEFECT
// Now, for all variables used by 'i' mark them live before 'i'	WITHOUT_CLASSIFICATION	0.9998968918894863	WITHOUT_CLASSIFICATION	1.0310811051371121E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
/* The counting of slashes that follows is simply a way to adhere to          * Ruby's UNC (or something) compatibility. When Ruby's expand_path is          * called with "//foo//bar" it will return "//foo/bar". JRuby uses          * java.io.File, and hence returns "/foo/bar". In order to retain          * java.io.File in the lower layers and provide full Ruby          * compatibility, the number of extra slashes must be counted and          * prepended to the result.         */	WITHOUT_CLASSIFICATION	0.9948987001182056	WITHOUT_CLASSIFICATION	0.005101299881794419	DEFECT
// This is almost always already interned, since it will be called with a symbol in most cases // but when created from Java code, we might get an argument that needs to be interned. // addAccessor has as a precondition that the string MUST be interned	WITHOUT_CLASSIFICATION	0.9999100252191607	WITHOUT_CLASSIFICATION	8.997478083924236E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999089527294447	WITHOUT_CLASSIFICATION	9.104727055524571E-5	DEFECT
/* not a class */	WITHOUT_CLASSIFICATION	0.9999089527294447	WITHOUT_CLASSIFICATION	9.104727055524571E-5	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999940793991757	WITHOUT_CLASSIFICATION	5.920600824223225E-6	DEFECT
// Ruby uses Qnil here, we use "dummy" because we need a class	WITHOUT_CLASSIFICATION	0.9999940793991757	WITHOUT_CLASSIFICATION	5.920600824223225E-6	DEFECT
// io.available() only returns 0 after EOF is encountered // so we need to differentiate between the empty string and EOF	WITHOUT_CLASSIFICATION	0.9999819166138758	WITHOUT_CLASSIFICATION	1.8083386124126518E-5	DEFECT
// In the current logic, if we get here we know that module is not an // IncludedModuleWrapper, so there's no need to fish out the delegate. But just // in case the logic should change later, let's do it anyway	WITHOUT_CLASSIFICATION	0.9999982080383293	WITHOUT_CLASSIFICATION	1.7919616706755287E-6	DEFECT
// rb_iterate((VALUE(*)_((VALUE)))str_step, (VALUE)args, step_i, (VALUE)iter);	WITHOUT_CLASSIFICATION	0.999822491894826	WITHOUT_CLASSIFICATION	1.7750810517398922E-4	DEFECT
// Broken symlinks considered by exists() as non-existing, // so we need to check for symlinks explicitly.	WITHOUT_CLASSIFICATION	0.9999832282919557	WITHOUT_CLASSIFICATION	1.677170804427916E-5	DEFECT
// ////////////////// CONSTANT API METHODS //////////////// //	WITHOUT_CLASSIFICATION	0.9998522459218239	WITHOUT_CLASSIFICATION	1.4775407817602584E-4	DEFECT
// create the default thread group	WITHOUT_CLASSIFICATION	0.9999873117699086	WITHOUT_CLASSIFICATION	1.268823009143042E-5	DEFECT
// range_each_func(range, step_i, b, e, args);	WITHOUT_CLASSIFICATION	0.9998280839815998	WITHOUT_CLASSIFICATION	1.7191601840015628E-4	DEFECT
/* ============================     * Here are hash internals     * (This could be extracted to a separate class but it's not too large though)     * ============================     */	WITHOUT_CLASSIFICATION	0.999980283605236	WITHOUT_CLASSIFICATION	1.971639476391366E-5	DEFECT
// ////////////////// LOW-LEVEL CLASS VARIABLE INTERFACE //////////////// // // fetch/store/list class variables for this module //	WITHOUT_CLASSIFICATION	0.9999218946614489	WITHOUT_CLASSIFICATION	7.810533855114324E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999788903717914	WITHOUT_CLASSIFICATION	2.1109628208463674E-5	DEFECT
// used only by the compiler/interpreter (will set the literal flag)	WITHOUT_CLASSIFICATION	0.9999788903717914	WITHOUT_CLASSIFICATION	2.1109628208463674E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999724690410678	WITHOUT_CLASSIFICATION	2.7530958932107076E-5	DEFECT
// Used for the 'redo' command	WITHOUT_CLASSIFICATION	0.9999724690410678	WITHOUT_CLASSIFICATION	2.7530958932107076E-5	DEFECT
// retuns null when not found to avoid unnecessary getRuntime().getNil() call	WITHOUT_CLASSIFICATION	0.99867935507366	WITHOUT_CLASSIFICATION	0.0013206449263400018	DEFECT
// returns the stored value without processing undefs (autoloads)	WITHOUT_CLASSIFICATION	0.9995574705459829	WITHOUT_CLASSIFICATION	4.425294540171622E-4	DEFECT
/* \cX, \c\M-X */	WITHOUT_CLASSIFICATION	0.9999846012309448	WITHOUT_CLASSIFICATION	1.5398769055194894E-5	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
//new Exception().printStackTrace();	WITHOUT_CLASSIFICATION	0.9988634187483939	WITHOUT_CLASSIFICATION	0.0011365812516061593	DEFECT
// line 286	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 476	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 513	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 530	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 533	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 537	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 551	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// end loop	WITHOUT_CLASSIFICATION	0.9999703155990455	WITHOUT_CLASSIFICATION	2.9684400954552335E-5	DEFECT
// MRI behavior: we don't print errno for actual Errno errors	WITHOUT_CLASSIFICATION	0.999590177814335	WITHOUT_CLASSIFICATION	4.098221856649425E-4	DEFECT
// prepare to call class definition method	WITHOUT_CLASSIFICATION	0.9998936958768209	WITHOUT_CLASSIFICATION	1.0630412317910086E-4	DEFECT
// Traverse the instructions in this basic block in reverse order! // Mark as dead all instructions whose results are not used! 	WITHOUT_CLASSIFICATION	0.9998989796912109	WITHOUT_CLASSIFICATION	1.0102030878916127E-4	DEFECT
// // fields should really be an immutable map as it is never modified after construction //	WITHOUT_CLASSIFICATION	0.9958454226675088	WITHOUT_CLASSIFICATION	0.004154577332491192	DEFECT
// load self object as IRubyObject, for recv param	WITHOUT_CLASSIFICATION	0.9995148952366967	WITHOUT_CLASSIFICATION	4.851047633032854E-4	DEFECT
// TODO: varargs?	WITHOUT_CLASSIFICATION	0.9931802434237721	WITHOUT_CLASSIFICATION	0.006819756576227909	DEFECT
// If we define a class in Ruby, but later want to allow it to be defined in Java, // the allocator needs to be updated	WITHOUT_CLASSIFICATION	0.9998892498179016	WITHOUT_CLASSIFICATION	1.1075018209847307E-4	DEFECT
// We only want IO objects with valid streams (better to error now). 	WITHOUT_CLASSIFICATION	0.995109806114806	WITHOUT_CLASSIFICATION	0.004890193885193999	DEFECT
// produce a nicer error since Rubyists aren't used to seeing this	WITHOUT_CLASSIFICATION	0.9999421617426439	WITHOUT_CLASSIFICATION	5.783825735599654E-5	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
//yyLhs 542	WITHOUT_CLASSIFICATION	0.9998974797582009	WITHOUT_CLASSIFICATION	1.0252024179908866E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*value*/	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
// MRI has extra pointer which makes our code look a little bit // more strange in // comparison	WITHOUT_CLASSIFICATION	0.9999608085006209	WITHOUT_CLASSIFICATION	3.919149937919024E-5	DEFECT
// Tempory buffer to build up a potential token.  Consumer takes responsibility to reset  // this before use.	WITHOUT_CLASSIFICATION	0.9979507075282039	WITHOUT_CLASSIFICATION	0.0020492924717960903	DEFECT
//tmpPosition is required because getPosition()'s side effects. //if the warning is generated, the getPosition() on line 954 (this line + 18) will create //a wrong position if the "inclusive" flag is not set.	WITHOUT_CLASSIFICATION	0.7532847331256425	WITHOUT_CLASSIFICATION	0.24671526687435755	DEFECT
/* What is \v in C?                    case '\v':                        c2 = 'v';                        break;                        */	WITHOUT_CLASSIFICATION	0.9981875388963224	WITHOUT_CLASSIFICATION	0.0018124611036776396	DEFECT
/* Consider Thread aspects of this */	WITHOUT_CLASSIFICATION	0.9996275198599334	WITHOUT_CLASSIFICATION	3.724801400665894E-4	DEFECT
// Position within source must reflect the actual offset and column.  Since // we ate an extra character here (this accounting is normally done in read // ), we should update position info.	WITHOUT_CLASSIFICATION	0.9999665172432283	WITHOUT_CLASSIFICATION	3.348275677167969E-5	DEFECT
// An interrupt or timeout may have caused us to miss // a notify that we consumed, so do another notify in // case someone else is available to pick it up.	WITHOUT_CLASSIFICATION	0.9995933722921555	WITHOUT_CLASSIFICATION	4.0662770784444404E-4	DEFECT
// line 572	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 601	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 625	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 649	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 691	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 723	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 732	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 745	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 766	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 785	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 794	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 800	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 812	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 827	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 839	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 845	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 864	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 886	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 896	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 911	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 929	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 952	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 970	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 972	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 991	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1011	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1026	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1038	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1067	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1085	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1097	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1105	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1122	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1133	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1145	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1169	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1201	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1210	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1229	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1261	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1287	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1293	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1307	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1320	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1325	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1363	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1398	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1448	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1456	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1473	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1492	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1513	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1523	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1562	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1582	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1603	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1615	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1620	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1635	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1652	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1681	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1708	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1716	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1755	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1772	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1789	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
// ACTIONS_END	WITHOUT_CLASSIFICATION	0.9999840026477922	WITHOUT_CLASSIFICATION	1.5997352207769337E-5	DEFECT
/* force for args */	WITHOUT_CLASSIFICATION	0.9999808885450823	WITHOUT_CLASSIFICATION	1.9111454917754156E-5	DEFECT
/* last expression should not be void */	WITHOUT_CLASSIFICATION	0.982769297518562	WITHOUT_CLASSIFICATION	0.0172307024814379	DEFECT
/* compstmt position includes both parens around it*/	WITHOUT_CLASSIFICATION	0.9996523961226716	WITHOUT_CLASSIFICATION	3.4760387732837503E-4	DEFECT
// We can assign if we already have variable of that name here or we are the only // scope in the chain (which Local scopes always are).	WITHOUT_CLASSIFICATION	0.9991865109500626	WITHOUT_CLASSIFICATION	8.134890499372654E-4	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
// ignore, no debugger present	WITHOUT_CLASSIFICATION	0.9999915100986091	WITHOUT_CLASSIFICATION	8.489901390996579E-6	DEFECT
// FIXME: Temporarily disabling because this fires way too much running Rails tests. JRUBY-518	WITHOUT_CLASSIFICATION	0.9985403229822127	WITHOUT_CLASSIFICATION	0.0014596770177871914	DEFECT
/*     * This method exists for us to break up multiple expression when nodes (e.g. when 1,2,3:)     * into individual whenNodes.  The primary reason for this is to ensure lazy evaluation of     * the arguments (when foo,bar,gar:) to prevent side-effects.  In the old code this was done     * using nested when statements, which was awful for interpreter and compilation.     *     * Notes: This has semantic equivalence but will not be lexically equivalent.  Compiler     * needs to detect same bodies to simplify bytecode generated.     */	WITHOUT_CLASSIFICATION	0.5325804963532241	DEFECT	0.4674195036467758	WITHOUT_CLASSIFICATION
// line 313	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 339	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 361	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 413	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 451	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 472	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 500	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 515	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 555	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 582	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 619	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 636	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 669	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 703	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 776	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 814	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 823	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 854	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 872	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 905	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 925	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 958	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 992	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1047	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1072	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1081	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1108	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1136	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1168	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1192	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1241	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1267	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1286	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1301	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1314	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1333	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1362	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1395	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1420	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1439	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1476	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1535	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1588	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1618	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1643	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1669	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1728	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1753	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1779	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1794	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1812	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1837	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1895	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1925	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1950	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 1992	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// line 2014	WITHOUT_CLASSIFICATION	0.999939252392653	WITHOUT_CLASSIFICATION	6.074760734704099E-5	DEFECT
// Whether this scope is used as the "argument scope" for e.g. zsuper	WITHOUT_CLASSIFICATION	0.9999065914945694	WITHOUT_CLASSIFICATION	9.340850543064613E-5	DEFECT
// If we could not find the constant from cref..then try getting from inheritence hierarchy	WITHOUT_CLASSIFICATION	0.9992528903122017	WITHOUT_CLASSIFICATION	7.471096877983642E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// This while loop is for restarting the block call in case a 'redo' fires.	WITHOUT_CLASSIFICATION	0.9993452787718693	WITHOUT_CLASSIFICATION	6.547212281307908E-4	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// A 'next' is like a local return from the block, ending this call or yield.	WITHOUT_CLASSIFICATION	0.999955095790312	WITHOUT_CLASSIFICATION	4.490420968794193E-5	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9980811606296233	WITHOUT_CLASSIFICATION	0.0019188393703767806	DEFECT
// happens with native exceptions, should not filter those out	WITHOUT_CLASSIFICATION	0.9980811606296233	WITHOUT_CLASSIFICATION	0.0019188393703767806	DEFECT
// We create one extra dynamicScope on a binding so that when we 'eval "b=1", binding' the // 'b' will get put into this new dynamic scope.  The original scope does not see the new // 'b' and successive evals with this binding will.  I take it having the ability to have  // succesive binding evals be able to share same scope makes sense from a programmers  // perspective.   One crappy outcome of this design is it requires Dynamic and Static  // scopes to be mutable for this one case.	WITHOUT_CLASSIFICATION	0.8362904479462782	WITHOUT_CLASSIFICATION	0.16370955205372184	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9997785910312668	WITHOUT_CLASSIFICATION	2.2140896873321138E-4	DEFECT
// Populate up to shorter of calling arguments or local parameters in the block	WITHOUT_CLASSIFICATION	0.9997785910312668	WITHOUT_CLASSIFICATION	2.2140896873321138E-4	DEFECT
// tc // under method // self // under method // name // args	WITHOUT_CLASSIFICATION	0.9998947198584657	WITHOUT_CLASSIFICATION	1.0528014153424603E-4	DEFECT
// allow it to bubble up	WITHOUT_CLASSIFICATION	0.999924342487508	WITHOUT_CLASSIFICATION	7.565751249185716E-5	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, DynamicMethod, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, RubyClass, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// IRubyObject, CacheEntry, ThreadContext, IRubyObject, IRubyObject, String, args	WITHOUT_CLASSIFICATION	0.9998255483282106	WITHOUT_CLASSIFICATION	1.7445167178953825E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998636462134145	WITHOUT_CLASSIFICATION	1.3635378658559608E-4	DEFECT
// trim extension to try other options	WITHOUT_CLASSIFICATION	0.9998636462134145	WITHOUT_CLASSIFICATION	1.3635378658559608E-4	DEFECT
// Check for a builtin first.	WITHOUT_CLASSIFICATION	0.9999900960979586	WITHOUT_CLASSIFICATION	9.903902041356327E-6	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999577831514544	WITHOUT_CLASSIFICATION	4.221684854569355E-5	DEFECT
// end suffix iteration	WITHOUT_CLASSIFICATION	0.9999577831514544	WITHOUT_CLASSIFICATION	4.221684854569355E-5	DEFECT
// Unfortunately, the number of digits in the exponent is // not clearly defined in Ruby documentation. This is a // platform/version-dependent behavior. On Linux/Mac/Cygwin/*nix, // two digits are used. On Windows, 3 digits are used. // It is desirable for JRuby to have consistent behavior, and // the two digits behavior was selected. This is also in sync // with "Java-native" sprintf behavior (java.util.Formatter). // E or e	WITHOUT_CLASSIFICATION	0.805253545455085	WITHOUT_CLASSIFICATION	0.1947464545449151	DEFECT
/** * Represents the the dynamic portion of scoping information.  The variableValues are the * values of assigned local or block variables.  The staticScope identifies which sort of * scope this is (block or local). *  * Properties of Dynamic Scopes: * 1. static and dynamic scopes have the same number of names to values * 2. size of variables (and thus names) is determined during parsing.  So those structured do *    not need to change * * FIXME: When creating dynamic scopes we sometimes accidentally pass in extra parents.  This * is harmless (other than wasting memory), but we should not do that.  We can fix this in two * ways: * 1. Fix all callers * 2. Check parent that is passed in and make if new instance is local, then its parent is not local */	WITHOUT_CLASSIFICATION	0.9873813734688105	WITHOUT_CLASSIFICATION	0.01261862653118956	DEFECT
// This method handles '**/' patterns and delegates to // fnmatch_helper for the main work.	WITHOUT_CLASSIFICATION	0.9991443312624357	WITHOUT_CLASSIFICATION	8.556687375642086E-4	DEFECT
// Peel onion...make subpatterns out of outer layer of glob and recall with each subpattern  // Example: foo{a{c},b}bar -> fooa{c}bar, foobbar	WITHOUT_CLASSIFICATION	0.9999117440360307	WITHOUT_CLASSIFICATION	8.825596396934996E-5	DEFECT
// double precision, native // double precision, native	WITHOUT_CLASSIFICATION	0.9998688978608672	WITHOUT_CLASSIFICATION	1.311021391328014E-4	DEFECT
// 64-bit number, native (as bignum)	WITHOUT_CLASSIFICATION	0.9998502055566014	WITHOUT_CLASSIFICATION	1.4979444339845692E-4	DEFECT
// Next indicates to decode using native encoding format	WITHOUT_CLASSIFICATION	0.9996519529724887	WITHOUT_CLASSIFICATION	3.4804702751126723E-4	DEFECT
// calculate based on a, b, c and d	WITHOUT_CLASSIFICATION	0.9999182525221245	WITHOUT_CLASSIFICATION	8.174747787546462E-5	DEFECT
// processes seem to have some peculiar locking sequences, so we // need to ensure nobody is trying to close/destroy while we are	WITHOUT_CLASSIFICATION	0.9999963109459491	WITHOUT_CLASSIFICATION	3.689054050804383E-6	DEFECT
// MRI behavior:  for 'Q', do not add trailing nils	WITHOUT_CLASSIFICATION	0.9966616572181733	WITHOUT_CLASSIFICATION	0.0033383427818265924	DEFECT
//this test may be too lax but it is the same as in MRI	WITHOUT_CLASSIFICATION	0.9995690325182666	WITHOUT_CLASSIFICATION	4.309674817334063E-4	DEFECT
// exec needs to behave differently in-process, because it's technically // supposed to replace the calling process. So if we're supposed to run // in-process, we allow it to use the default streams and not use // pumpers at all. See JRUBY-2156 and JRUBY-2154.	WITHOUT_CLASSIFICATION	0.9987697380752089	WITHOUT_CLASSIFICATION	0.0012302619247910645	DEFECT
// snip off ruby or jruby command from list of arguments // leave alone if the command is the name of a script	WITHOUT_CLASSIFICATION	0.9998521196555434	WITHOUT_CLASSIFICATION	1.478803444566055E-4	DEFECT
// The problem we trying to solve below: STDIN in Java // is blocked and non-interruptible, so if we invoke read // on it, we might never be able to interrupt such thread. // So, we use in.available() to see if there is any input // ready, and only then read it. But this approach can't // tell whether the end of stream reached or not, so we // might end up looping right at the end of the stream. // Well, at least, we can improve the situation by checking // if some input was ever available, and if so, not // checking for available anymore, and just go to read.	WITHOUT_CLASSIFICATION	0.9898890715715446	WITHOUT_CLASSIFICATION	0.010110928428455417	DEFECT
// first digit is always printed	WITHOUT_CLASSIFICATION	0.9995692233546254	WITHOUT_CLASSIFICATION	4.307766453746759E-4	DEFECT
// an empirically derived rule: precision applies to // significand length, irrespective of exponent	WITHOUT_CLASSIFICATION	0.999558418819001	WITHOUT_CLASSIFICATION	4.4158118099898243E-4	DEFECT
// an official rule, clarified: if the exponent // <clarif>after adjusting for exponent form</clarif> // is < -4,  or the exponent <clarif>after adjusting  // for exponent form</clarif> is greater than the // precision, use exponent form	WITHOUT_CLASSIFICATION	0.9997160242159866	WITHOUT_CLASSIFICATION	2.8397578401336167E-4	DEFECT
// in this mode, '.' is always printed	WITHOUT_CLASSIFICATION	0.9986188809153922	WITHOUT_CLASSIFICATION	0.001381119084607803	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999980456844366	WITHOUT_CLASSIFICATION	1.9543155632838415E-6	DEFECT
// now some data...	WITHOUT_CLASSIFICATION	0.9999980456844366	WITHOUT_CLASSIFICATION	1.9543155632838415E-6	DEFECT
// MRI behavior: validate only the unnumbered arguments	WITHOUT_CLASSIFICATION	0.999857138202623	WITHOUT_CLASSIFICATION	1.4286179737690844E-4	DEFECT
// else catch oversize below	WITHOUT_CLASSIFICATION	0.9999388450933733	WITHOUT_CLASSIFICATION	6.11549066267452E-5	DEFECT
// calculation for simple (and typical) case, // adapted from sun.misc.FloatingDecimal	WITHOUT_CLASSIFICATION	0.9963428225206314	WITHOUT_CLASSIFICATION	0.003657177479368572	DEFECT
//switch	WITHOUT_CLASSIFICATION	0.9996834501605658	WITHOUT_CLASSIFICATION	3.165498394342073E-4	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999908746507926	WITHOUT_CLASSIFICATION	9.125349207394073E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999908746507926	WITHOUT_CLASSIFICATION	9.125349207394073E-5	DEFECT
/*utf8 lead byte*/	WITHOUT_CLASSIFICATION	0.999908746507926	WITHOUT_CLASSIFICATION	9.125349207394073E-5	DEFECT
// could not get canonical path, just use given path	WITHOUT_CLASSIFICATION	0.9997862258894088	WITHOUT_CLASSIFICATION	2.1377411059106584E-4	DEFECT
// We always open this rw since we can only open it r or rw.	WITHOUT_CLASSIFICATION	0.9978163654917005	WITHOUT_CLASSIFICATION	0.0021836345082994774	DEFECT
// call chmod after we created the RandomAccesFile // because otherwise, the file could be read-only	WITHOUT_CLASSIFICATION	0.9999928149370365	WITHOUT_CLASSIFICATION	7.18506296346354E-6	DEFECT
// attempt to set the permissions, if we have been passed a POSIX instance, // and only if the file was created in this call.	WITHOUT_CLASSIFICATION	0.9999795157159663	WITHOUT_CLASSIFICATION	2.0484284033711423E-5	DEFECT
// // When reading into a heap buffer, the jvm allocates a temporary // direct ByteBuffer of the requested size.  To avoid allocating // a huge direct buffer when doing ludicrous reads (e.g. 1G or more) // we split the read up into chunks of no more than 1M //	WITHOUT_CLASSIFICATION	0.9992808368589844	WITHOUT_CLASSIFICATION	7.191631410156254E-4	DEFECT
// // If it is a file channel, then we can pre-allocate the output buffer // to the total size of buffered + remaining bytes in file //	WITHOUT_CLASSIFICATION	0.9971843313756794	WITHOUT_CLASSIFICATION	0.0028156686243207304	DEFECT
// // Cannot discern the total read length - allocate at least enough for the buffered data //	WITHOUT_CLASSIFICATION	0.9998195567422798	WITHOUT_CLASSIFICATION	1.804432577201442E-4	DEFECT
// // Copy what is in the buffer, if there is some buffered data //	WITHOUT_CLASSIFICATION	0.9997881849790977	WITHOUT_CLASSIFICATION	2.1181502090223913E-4	DEFECT
// append what we read into our buffer and allow the loop to continue	WITHOUT_CLASSIFICATION	0.9993061385265408	WITHOUT_CLASSIFICATION	6.938614734591683E-4	DEFECT
// already have some bytes buffered, just return those	WITHOUT_CLASSIFICATION	0.9999833340604121	WITHOUT_CLASSIFICATION	1.666593958797601E-5	DEFECT
// reset buffer	WITHOUT_CLASSIFICATION	0.999966904731047	WITHOUT_CLASSIFICATION	3.309526895296902E-5	DEFECT
// // Synchronize and re-check to avoid creating more than one Selector per provider //	WITHOUT_CLASSIFICATION	0.9993026469094864	WITHOUT_CLASSIFICATION	6.973530905134662E-4	DEFECT
// TODO: Ruby logic is somewhat more complicated here, see comments after	WITHOUT_CLASSIFICATION	0.9656974280240431	WITHOUT_CLASSIFICATION	0.034302571975956875	DEFECT
// Is there something built into JRuby to do this?	WITHOUT_CLASSIFICATION	0.999830120569883	WITHOUT_CLASSIFICATION	1.6987943011706938E-4	DEFECT
// Note that WE CAN'T say the following, because of the on-the-fly conversion of Fixnum to Long // assertTrue(value == valueViaValuesIterator);	WITHOUT_CLASSIFICATION	0.9993704211586245	WITHOUT_CLASSIFICATION	6.295788413753996E-4	DEFECT
// value equality //result = eval("key = 3; arr = []; arr[key] = 'one'; arr.store(3, 'two'); puts arr[key]"); //assertEquals("two", result);	WITHOUT_CLASSIFICATION	0.999174219000369	WITHOUT_CLASSIFICATION	8.257809996311225E-4	DEFECT
// Uncomment the "puts" lines if you want to see more detail	WITHOUT_CLASSIFICATION	0.9993844100281873	WITHOUT_CLASSIFICATION	6.155899718126352E-4	DEFECT
// Since we don't have any other error reporting mechanism, we // add the error message as an always-failing test to the test suite.	WITHOUT_CLASSIFICATION	0.9998537118015288	WITHOUT_CLASSIFICATION	1.4628819847125685E-4	DEFECT
// change the thread context to include the class	WITHOUT_CLASSIFICATION	0.9999339586621325	WITHOUT_CLASSIFICATION	6.604133786745111E-5	DEFECT
// FIXME: This is a system error based on errno	DEFECT	0.9513926612894762	WITHOUT_CLASSIFICATION	0.04860733871052384	DEFECT
// TODO: In MRI 1.9, an explicit check for negative length is // added here. IndexError is raised when length is negative. // See [ruby-core:12953] for more details. // // New note: This is actually under re-evaluation, // see [ruby-core:17483].	DEFECT	0.8946896500582022	DEFECT	0.10531034994179772	WITHOUT_CLASSIFICATION
// TODO: make sure it's really safe to not to copy it	DEFECT	0.8850142883945454	DEFECT	0.11498571160545455	WITHOUT_CLASSIFICATION
// TODO: Numeric.new works in Ruby and it does here too.  However trying to use //   that instance in a numeric operation should generate an ArgumentError. Doing //   this seems so pathological I do not see the need to fix this now.	DEFECT	0.5106756856170112	DEFECT	0.4893243143829888	WITHOUT_CLASSIFICATION
// FIXME: We can't guarantee this will always be a RubyIO...so the old code here is not safe	DEFECT	0.6459194956141677	DEFECT	0.3540805043858322	WITHOUT_CLASSIFICATION
// dump the trace and continue // this is currently only here for Android, which seems to have // bugs in its enumeration logic // http://code.google.com/p/android/issues/detail?id=2812	DEFECT	0.9990832943996442	WITHOUT_CLASSIFICATION	9.167056003558065E-4	DEFECT
// FIXME: Add at_exit and finalizers to exit, then make exit_bang not call those.	DEFECT	0.9437920240940207	WITHOUT_CLASSIFICATION	0.05620797590597917	DEFECT
// TODO: need to isolate the "current" thread from class creation	DEFECT	0.971247141011162	WITHOUT_CLASSIFICATION	0.028752858988838028	DEFECT
// FIXME: not correct exception	DEFECT	0.8494774473159066	WITHOUT_CLASSIFICATION	0.15052255268409334	DEFECT
// XXX actually only on windows...	DEFECT	0.9984318455890234	WITHOUT_CLASSIFICATION	0.001568154410976584	DEFECT
// Enebo : Should ~frogger\\foo work (it doesnt in linux ruby)?	DEFECT	0.9993349338924257	WITHOUT_CLASSIFICATION	6.650661075743592E-4	DEFECT
// FIXME can't use static; would interfere with other runtimes in the same JVM	DEFECT	0.9995246657518603	WITHOUT_CLASSIFICATION	4.7533424813974226E-4	DEFECT
// TODO: anything threads attached to original fd are notified of the close... // see rb_thread_fd_close	DEFECT	0.9007686665350653	WITHOUT_CLASSIFICATION	0.09923133346493483	DEFECT
// TODO: This is an freopen in MRI, this is close, but not quite the same	DEFECT	0.5026945042046773	DEFECT	0.49730549579532274	WITHOUT_CLASSIFICATION
// TODO: sys fail	DEFECT	0.984170965961936	WITHOUT_CLASSIFICATION	0.01582903403806412	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9908062587001374	WITHOUT_CLASSIFICATION	0.009193741299862617	DEFECT
// TODO: Ruby locks the string here	DEFECT	0.9908062587001374	WITHOUT_CLASSIFICATION	0.009193741299862617	DEFECT
//      FIXME: check how ruby 1.9 handles this	DEFECT	0.998876370195895	WITHOUT_CLASSIFICATION	0.0011236298041049687	DEFECT
// FIXME: MRI has special case for constants here 	DEFECT	0.9996567521769845	WITHOUT_CLASSIFICATION	3.432478230154731E-4	DEFECT
// FIXME: Throw the right ArgumentError's if the class is missing // or if it's a module.	DEFECT	0.99888127248729	WITHOUT_CLASSIFICATION	0.0011187275127100505	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999829463397906	WITHOUT_CLASSIFICATION	1.7053660209450444E-5	DEFECT
// ENEBO: Very wrong	DEFECT	0.9999829463397906	WITHOUT_CLASSIFICATION	1.7053660209450444E-5	DEFECT
// synchronized method per JRUBY-1173 (unsafe Double-Checked Locking) // FIXME: synchronization is still wrong in CP code	DEFECT	0.9883541611450988	WITHOUT_CLASSIFICATION	0.011645838854901126	DEFECT
// FIXME: I'm not sure this is right, but the old code returned // the undef, which definitely isn't right...	DEFECT	0.9985066600657374	WITHOUT_CLASSIFICATION	0.0014933399342626078	DEFECT
// FIXME: Errno descriptions from Constantine // on Windows are not useful at the moment.	DEFECT	0.9935646547166628	WITHOUT_CLASSIFICATION	0.006435345283337158	DEFECT
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8125891949006941	WITHOUT_CLASSIFICATION	0.18741080509930574	DEFECT
// TODO: take BigDecimal.mode into account.	DEFECT	0.9420520689085428	WITHOUT_CLASSIFICATION	0.05794793109145712	DEFECT
// TODO: full-precision divmod is 1000x slower than MRI!	DEFECT	0.7377573411616961	WITHOUT_CLASSIFICATION	0.26224265883830394	DEFECT
// TODO: proper sign	DEFECT	0.9875577573237093	WITHOUT_CLASSIFICATION	0.012442242676290592	DEFECT
// FIXME: No argument seems to work for -K in MRI plus this should not // siphon off additional args 'jruby -K ~/scripts/foo'.  Also better error // processing.	DEFECT	0.9459859322769804	DEFECT	0.054014067723019726	WITHOUT_CLASSIFICATION
// FIXME: -x flag not supported //                    case 'x' : //                        break;	DEFECT	0.955854725714793	WITHOUT_CLASSIFICATION	0.044145274285207016	DEFECT
// FIXME: We are assuming that original string will be raw bytes.  If -Ku is provided // this will not be true, but that is ok for now.  Deal with that when someone needs it.	DEFECT	0.8599931956990138	WITHOUT_CLASSIFICATION	0.14000680430098625	DEFECT
// FIXME: This is causing a verification error for some reason //nilClass.dispatcher = callbackFactory.createDispatcher(nilClass);	DEFECT	0.9240652502748053	WITHOUT_CLASSIFICATION	0.07593474972519469	DEFECT
// FIXME: for some reason this dispatcher causes a VerifyError... //classClass.dispatcher = callbackFactory.createDispatcher(classClass);	DEFECT	0.9934198720586996	WITHOUT_CLASSIFICATION	0.006580127941300383	DEFECT
// TODO: Rewriter and compiler assume case when empty expression.  In MRI this is just // a when. //        assert caseNode != null : "caseNode is not null";	DEFECT	0.6168619248141325	WITHOUT_CLASSIFICATION	0.3831380751858675	DEFECT
// TODO: This code effectively disables all inspection-based optimizations; none of them are 100% safe yet	DEFECT	0.5813276088800207	WITHOUT_CLASSIFICATION	0.41867239111997945	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// FIXME: this should reset to what it was before	DEFECT	0.9635247041317605	WITHOUT_CLASSIFICATION	0.036475295868239575	DEFECT
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9805007934192802	WITHOUT_CLASSIFICATION	0.019499206580719807	DEFECT
// SSS FIXME: Incorect!	DEFECT	0.9995172209001079	WITHOUT_CLASSIFICATION	4.827790998921462E-4	DEFECT
// SSS FIXME: // // There are also differences in variable scoping between 1.8 and 1.9  // Ruby 1.8 is the buggy semantics if I understand correctly. // // The semantics of how this shadows other variables outside the block needs // to be figured out during live var analysis.	DEFECT	0.9914879956426168	WITHOUT_CLASSIFICATION	0.008512004357383182	DEFECT
// SSS FIXME: This doesn't preserve original order of when clauses.  We could consider // preserving the order (or maybe not, since we would have to sort the constants first // in any case) for outputing jump tables in certain situations. // // add body to map for emitting later	DEFECT	0.5293044898701054	DEFECT	0.4706955101298947	WITHOUT_CLASSIFICATION
// IMPORTANT: Receive the block argument before the opt and splat args // This is so that the *arg can be encoded as 'rest of the array'.  This // won't work if the block argument hasn't been received yet!	DEFECT	0.9969226525374529	WITHOUT_CLASSIFICATION	0.0030773474625469498	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.998214054866989	WITHOUT_CLASSIFICATION	0.0017859451330109874	DEFECT
/** Are there are available data flow facts to run this problem? SSS FIXME: Silly optimization? */	DEFECT	0.998214054866989	WITHOUT_CLASSIFICATION	0.0017859451330109874	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9157358950316881	WITHOUT_CLASSIFICATION	0.08426410496831192	DEFECT
// SSS FIXME: Verify semantics of this instruction	DEFECT	0.9924244634879923	WITHOUT_CLASSIFICATION	0.007575536512007682	DEFECT
// The following constants capture pre-known static call sites -- JRuby implementations of methods of ruby classes // SSS FIXME: Note that compiler/impl/BaseBodyCompiler is using op_match2 for match() and and op_match for match2 ... Is this a bug there?	DEFECT	0.9631150279255555	WITHOUT_CLASSIFICATION	0.036884972074444446	DEFECT
// SSS FIXME: For constant arrays, we should never get here!	DEFECT	0.9880281962394634	WITHOUT_CLASSIFICATION	0.011971803760536718	DEFECT
// FIXME: This is wrong	DEFECT	0.9922758166576217	WITHOUT_CLASSIFICATION	0.007724183342378451	DEFECT
// FIXME: may need to broaden for IPV6 IP address strings	DEFECT	0.9977431452089893	WITHOUT_CLASSIFICATION	0.00225685479101069	DEFECT
// XXX Wrong, but will have to do for now	DEFECT	0.9997396453319133	WITHOUT_CLASSIFICATION	2.6035466808671493E-4	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.556653523896557	DEFECT	0.443346476103443	WITHOUT_CLASSIFICATION
// FIXME: vulture daemon thread prevents finalization, // find alternative approach. // vulture.start();	DEFECT	0.9982665264521228	WITHOUT_CLASSIFICATION	0.0017334735478771641	DEFECT
// If we outgrow our pushback stack then grow it (this should only happen in pretty  // pathological cases).	DEFECT	0.996181083193507	WITHOUT_CLASSIFICATION	0.003818916806492998	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998756765049152	WITHOUT_CLASSIFICATION	1.2432349508478284E-4	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.5507745489699474	DEFECT	0.44922545103005274	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.5507745489699474	DEFECT	0.44922545103005274	WITHOUT_CLASSIFICATION
// FIXME: this seems like a good assertion, but it breaks compiled code and the code seems // to run without it... //assert currentModule != null : "Can't push null RubyClass";	DEFECT	0.9988666767874136	WITHOUT_CLASSIFICATION	0.0011333232125864685	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
// FIXME: I got a bunch of NPEs when I didn't check for nulls here...HOW?!	DEFECT	0.9950268206693468	WITHOUT_CLASSIFICATION	0.004973179330653252	DEFECT
// MRI 1.8 behavior: this combination of flags is not allowed	DEFECT	0.9923107241058367	WITHOUT_CLASSIFICATION	0.007689275894163371	DEFECT
// FIXME: Arg may also be true, false, and nil and still be valid.  Strangely enough,  // protocol conversion is not happening in Ruby on this arg?	DEFECT	0.8109883943679075	WITHOUT_CLASSIFICATION	0.18901160563209252	DEFECT
// TODO: Rubicon TestKernel dies without this line.  A cursory glance implies we // falsely set $! to nil and this sets it back to something valid.  This should  // get fixed at the same time we address bug #1296484.	DEFECT	0.9362929836124977	DEFECT	0.0637070163875024	WITHOUT_CLASSIFICATION
// This is the result of a bug that left off all trailing arguments. E.g.: //   system "ls", "-1", "dir" // would be seen as //   system "ls"	DEFECT	0.9829933818844178	WITHOUT_CLASSIFICATION	0.017006618115582336	DEFECT
// We are in eval with binding break out early // FIXME: This is broken with the new backtrace stuff	DEFECT	0.9941096351517446	WITHOUT_CLASSIFICATION	0.005890364848255479	DEFECT
// Walk up the scope tree right now as much as possible, to avoid run-time walking // SSS FIXME: Any reason why this might break in the presence of ruby's dynamic resolution?  What might break?	DEFECT	0.9157358950316881	WITHOUT_CLASSIFICATION	0.08426410496831192	DEFECT
// This was a getOpt with one mandatory arg, but it did not work // so I am parsing it for now.	DEFECT	0.9973860399130644	WITHOUT_CLASSIFICATION	0.0026139600869356404	DEFECT
// FIXME: I doubt any of the constants referenced in this method // are ever redefined -- should compare to the known values, rather // than do an expensive constant lookup.	DEFECT	0.9968780352662128	WITHOUT_CLASSIFICATION	0.0031219647337872476	DEFECT
// SSS FIXME: Why is the for node being built using closures and not as a "regular" loop with branches? // // This has implications on inlining, implementations of closures, next, break, etc. // When "each" and the block it consumes are inlined together in the caller, the "loop" // from the each should become a normal loop without any closures.  But, in this implementation // of for, we replace one closure with another! //	DEFECT	0.9142296587170231	DEFECT	0.08577034128297682	WITHOUT_CLASSIFICATION
// TODO: full-precision remainder is 1000x slower than MRI!	DEFECT	0.8125891949006941	WITHOUT_CLASSIFICATION	0.18741080509930574	DEFECT
// TODO: Adding implicit nils caused multiple problems in compiler -- revist after landing //assert bodyNode != null : "bodyNode is not null";	DEFECT	0.8150232420225243	DEFECT	0.18497675797747565	WITHOUT_CLASSIFICATION
// FIXME: It may be possible to killpg on systems which support it.  POSIX library // needs to tell whether a particular method works or not	DEFECT	0.8654883605382999	DEFECT	0.1345116394617001	WITHOUT_CLASSIFICATION
// FIXME: if we terminate immediately, this appears to break while in method arguments // we need to push a nil for the cases where we will never enter the body	DEFECT	0.9805007934192802	WITHOUT_CLASSIFICATION	0.019499206580719807	DEFECT
// zero args with block // FIXME: omit args index; subtract one from normal block index	DEFECT	0.999114548484301	WITHOUT_CLASSIFICATION	8.854515156988989E-4	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// FIXME: Broken but behaving	DEFECT	0.9998756765049152	WITHOUT_CLASSIFICATION	1.2432349508478284E-4	DEFECT
// TODO: we loose encoding information here, fix it	DEFECT	0.828386202520462	WITHOUT_CLASSIFICATION	0.17161379747953806	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// TODO: don't require pop	DEFECT	0.9877463236900913	WITHOUT_CLASSIFICATION	0.012253676309908725	DEFECT
// FIXME: This isn't quite right; it shouldn't evaluate the value if it's going to throw the error	DEFECT	0.556653523896557	DEFECT	0.443346476103443	WITHOUT_CLASSIFICATION
// vulture thread will periodically expunge dead // entries.  entries are also expunged during 'put' // operations; this is designed to cover the case where // many objects are created initially, followed by limited // put activity. // // FIXME: DISABLED (below) pending resolution of finalization issue //	DEFECT	0.7192546674941812	WITHOUT_CLASSIFICATION	0.2807453325058189	DEFECT
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.5507745489699474	DEFECT	0.44922545103005274	WITHOUT_CLASSIFICATION
/* TODO: We should use implicit nil for body, but problem (punt til later)*/	DEFECT	0.5507745489699474	DEFECT	0.44922545103005274	WITHOUT_CLASSIFICATION
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
/**     * Get value from current scope or one of its captured scopes.     *      * FIXME: block variables are not getting primed to nil so we need to null check those     *  until we prime them properly.  Also add assert back in.     *      * @param offset zero-indexed value that represents where variable lives     * @param depth how many captured scopes down this variable should be set     * @return the value here     */	DEFECT	0.9997533839589821	WITHOUT_CLASSIFICATION	2.4661604101796687E-4	DEFECT
// TODO: We overflow on large files...We could increase to long to limit // this, but then the impl gets more involved since java io APIs based on // int (means we have to chunk up a long into a series of int ops).	DEFECT	0.8592646640856515	WITHOUT_CLASSIFICATION	0.14073533591434853	DEFECT
